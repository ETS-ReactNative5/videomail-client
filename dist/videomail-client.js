(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.VideomailClient = f()}})(function(){var define,module,exports;return (function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(_dereq_,module,exports){
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["add-eventlistener-with-options"] = factory();
	else
		root["add-eventlistener-with-options"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = addEventListenerWithOptions;

	var _checkSupport = __webpack_require__(1);

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	/**
	 * Add event listener with additional options
	 * @param {EventTarget} target - The EventTarget element
	 * @param {string} name - The name of the event
	 * @param {function} listener - The event listener callback
	 * @param {object} options - The options explicitly passed from caller
	 * @param {string} optionName - The additioanl option to add to the event listener 
	 */
	function addEventListenerWithOptions(target, name, listener, options) {
	    var optionName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'passive';

	    if (target.addEventListener !== undefined) {
	        var listenerOptions = _checkSupport.SupportMap[optionName] ? Object.assign({}, options, _defineProperty({}, optionName, true)) : options;
	        target.addEventListener(name, listener, listenerOptions);
	    }
	}

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.SupportMap = undefined;

	var _OptionsMap;

	var _constants = __webpack_require__(2);

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var OptionsMap = (_OptionsMap = {}, _defineProperty(_OptionsMap, _constants.PASSIVE, false), _defineProperty(_OptionsMap, _constants.CAPTURE, false), _defineProperty(_OptionsMap, _constants.ONCE, false), _OptionsMap);

	var getOptionsMap = function getOptionsMap() {
	    Object.keys(OptionsMap).forEach(function (k, i) {
	        OptionsMap[k] = checkSupportForProperty(k);
	    });

	    return OptionsMap;
	};

	function checkSupportForProperty(property) {
	    if (!!OptionsMap[property]) {
	        return OptionsMap[property];
	    }

	    try {
	        var opts = Object.defineProperty({}, property, {
	            get: function get() {
	                OptionsMap[property] = true;
	            }
	        });
	        window.addEventListener("test", null, opts);
	        window.removeListener("test", null);
	    } catch (e) {}

	    return OptionsMap[property];
	}

	var SupportMap = exports.SupportMap = getOptionsMap();

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var PASSIVE = exports.PASSIVE = 'passive';
	var CAPTURE = exports.CAPTURE = 'capture';
	var ONCE = exports.ONCE = 'once';

/***/ }
/******/ ])
});
;
},{}],2:[function(_dereq_,module,exports){
var EventEmitter          = _dereq_('events').EventEmitter,
    inherits              = _dereq_('inherits'),
    raf                   = _dereq_('raf'),
    methods;


//the same as off window unless polyfilled or in node
var defaultRAFObject = {
    requestAnimationFrame: raf,
    cancelAnimationFrame: raf.cancel
};

function returnTrue(){ return true; }

//manage FPS if < 60, else return true;
function makeThrottle(fps){
    var delay = 1000/fps;
    var lastTime = Date.now();


    if( fps<=0 || fps === Infinity ){
        return returnTrue;
    }

    //if an fps throttle has been set then we'll assume
    //it natively runs at 60fps,
    var half = Math.ceil(1000 / 60) / 2;

    return function(){
        //if a custom fps is requested
        var now = Date.now();
        //is this frame within 8.5ms of the target?
        //if so then next frame is gonna be too late
        if(now - lastTime < delay - half){
            return false;
        }
        lastTime = now;
        return true;
    };
}


/**
 * Animitter provides event-based loops for the browser and node,
 * using `requestAnimationFrame`
 * @param {Object} [opts]
 * @param {Number} [opts.fps=Infinity] the framerate requested, defaults to as fast as it can (60fps on window)
 * @param {Number} [opts.delay=0] milliseconds delay between invoking `start` and initializing the loop
 * @param {Object} [opts.requestAnimationFrameObject=global] the object on which to find `requestAnimationFrame` and `cancelAnimationFrame` methods
 * @param {Boolean} [opts.fixedDelta=false] if true, timestamps will pretend to be executed at fixed intervals always
 * @constructor
 */
function Animitter( opts ){
    opts = opts || {};

    this.__delay = opts.delay || 0;

    /** @expose */
    this.fixedDelta = !!opts.fixedDelta;

    /** @expose */
    this.frameCount = 0;
    /** @expose */
    this.deltaTime = 0;
    /** @expose */
    this.elapsedTime = 0;

    /** @private */
    this.__running = false;
    /** @private */
    this.__completed = false;

    this.setFPS(opts.fps || Infinity);
    this.setRequestAnimationFrameObject(opts.requestAnimationFrameObject || defaultRAFObject);
}

inherits(Animitter, EventEmitter);

function onStart(scope){
    var now = Date.now();
    var rAFID;
    //dont let a second animation start on the same object
    //use *.on('update',fn)* instead
    if(scope.__running){
        return scope;
    }

    exports.running += 1;
    scope.__running = true;
    scope.__lastTime = now;
    scope.deltaTime = 0;

    //emit **start** once at the beginning
    scope.emit('start', scope.deltaTime, 0, scope.frameCount);

    var lastRAFObject = scope.requestAnimationFrameObject;

    var drawFrame = function(){
        if(lastRAFObject !== scope.requestAnimationFrameObject){
            //if the requestAnimationFrameObject switched in-between,
            //then re-request with the new one to ensure proper update execution context
            //i.e. VRDisplay#submitFrame() may only be requested through VRDisplay#requestAnimationFrame(drawFrame)
            lastRAFObject = scope.requestAnimationFrameObject;
            scope.requestAnimationFrameObject.requestAnimationFrame(drawFrame);
            return;
        }
        if(scope.__isReadyForUpdate()){
            scope.update();
        }
        if(scope.__running){
            rAFID = scope.requestAnimationFrameObject.requestAnimationFrame(drawFrame);
        } else {
            scope.requestAnimationFrameObject.cancelAnimationFrame(rAFID);
        }
    };

    scope.requestAnimationFrameObject.requestAnimationFrame(drawFrame);

    return scope;
}

methods = {
    //EventEmitter Aliases
    off     : EventEmitter.prototype.removeListener,
    trigger : EventEmitter.prototype.emit,

    /**
     * stops the animation and marks it as completed
     * @emit Animitter#complete
     * @returns {Animitter}
     */
    complete: function(){
        this.stop();
        this.__completed = true;
        this.emit('complete', this.frameCount, this.deltaTime);
        return this;
    },

    /**
     * stops the animation and removes all listeners
     * @emit Animitter#stop
     * @returns {Animitter}
     */
    dispose: function(){
        this.stop();
        this.removeAllListeners();
        return this;
    },

    /**
     * get milliseconds between the last 2 updates
     *
     * @return {Number}
     */
    getDeltaTime: function(){
        return this.deltaTime;
    },

    /**
     * get the total milliseconds that the animation has ran.
     * This is the cumlative value of the deltaTime between frames
     *
     * @return {Number}
     */
    getElapsedTime: function(){
        return this.elapsedTime;
    },

    /**
     * get the instances frames per second as calculated by the last delta
     *
     * @return {Number}
     */
    getFPS: function(){
        return this.deltaTime > 0 ? 1000 / this.deltaTime : 0;
        if(this.deltaTime){
            return 1000 / this.deltaTime;
        }
    },

    /**
     * get the explicit FPS limit set via `Animitter#setFPS(fps)` or
     * via the initial `options.fps` property
     *
     * @returns {Number} either as set or Infinity
     */
    getFPSLimit: function(){
        return this.__fps;
    },

    /**
     * get the number of frames that have occurred
     *
     * @return {Number}
     */
    getFrameCount: function(){
        return this.frameCount;
    },


    /**
     * get the object providing `requestAnimationFrame`
     * and `cancelAnimationFrame` methods
     * @return {Object}
     */
    getRequestAnimationFrameObject: function(){
        return this.requestAnimationFrameObject;
    },

    /**
     * is the animation loop active
     *
     * @return {boolean}
     */
    isRunning: function(){
        return this.__running;
    },

    /**
     * is the animation marked as completed
     *
     * @return {boolean}
     */
    isCompleted: function(){
        return this.__completed;
    },

    /**
     * reset the animation loop, marks as incomplete,
     * leaves listeners intact
     *
     * @emit Animitter#reset
     * @return {Animitter}
     */
    reset: function(){
        this.stop();
        this.__completed = false;
        this.__lastTime = 0;
        this.deltaTime = 0;
        this.elapsedTime = 0;
        this.frameCount = 0;

        this.emit('reset', 0, 0, this.frameCount);
        return this;
    },

    /**
     * set the framerate for the animation loop
     *
     * @param {Number} fps
     * @return {Animitter}
     */
    setFPS: function(fps){
        this.__fps = fps;
        this.__isReadyForUpdate = makeThrottle(fps);
        return this;
    },

    /**
     * set the object that will provide `requestAnimationFrame`
     * and `cancelAnimationFrame` methods to this instance
     * @param {Object} object
     * @return {Animitter}
     */
    setRequestAnimationFrameObject: function(object){
        if(typeof object.requestAnimationFrame !== 'function' || typeof object.cancelAnimationFrame !== 'function'){
            throw new Error("Invalid object provide to `setRequestAnimationFrameObject`");
        }
        this.requestAnimationFrameObject = object;
        return this;
    },

    /**
     * start an animation loop
     * @emit Animitter#start
     * @return {Animitter}
     */
    start: function(){
        var self = this;
        if(this.__delay){
            setTimeout(function(){
                onStart(self);
            }, this.__delay);
        } else {
            onStart(this);
        }
        return this;
    },

    /**
     * stops the animation loop, does not mark as completed
     *
     * @emit Animitter#stop
     * @return {Animitter}
     */
    stop: function(){
        if( this.__running ){
            this.__running = false;
            exports.running -= 1;
            this.emit('stop', this.deltaTime, this.elapsedTime, this.frameCount);
        }
        return this;
    },

    /**
     * update the animation loop once
     *
     * @emit Animitter#update
     * @return {Animitter}
     */
    update: function(){
        this.frameCount++;
        /** @private */
        var now = Date.now();
        this.__lastTime = this.__lastTime || now;
        this.deltaTime = (this.fixedDelta || exports.globalFixedDelta) ? 1000/Math.min(60, this.__fps) : now - this.__lastTime;
        this.elapsedTime += this.deltaTime;
        this.__lastTime = now;

        this.emit('update', this.deltaTime, this.elapsedTime, this.frameCount);
        return this;
    }
};



for(var method in methods){
    Animitter.prototype[method] = methods[method];
}


/**
 * create an animitter instance,
 * @param {Object} [options]
 * @param {Function} fn( deltaTime:Number, elapsedTime:Number, frameCount:Number )
 * @returns {Animitter}
 */
function createAnimitter(options, fn){

    if( arguments.length === 1 && typeof options === 'function'){
        fn = options;
        options = {};
    }

    var _instance = new Animitter( options );

    if( fn ){
        _instance.on('update', fn);
    }

    return _instance;
}

module.exports = exports = createAnimitter;

/**
 * create an animitter instance,
 * where the scope is bound in all functions
 * @param {Object} [options]
 * @param {Function} fn( deltaTime:Number, elapsedTime:Number, frameCount:Number )
 * @returns {Animitter}
 */
exports.bound = function(options, fn){

    var loop = createAnimitter(options, fn),
        functionKeys = functions(Animitter.prototype),
        hasBind = !!Function.prototype.bind,
        fnKey;

    for(var i=0; i<functionKeys.length; i++){
        fnKey = functionKeys[i];
        loop[fnKey] = hasBind ? loop[fnKey].bind(loop) : bind(loop[fnKey], loop);
    }

    return loop;
};


exports.Animitter = Animitter;

/**
 * if true, all `Animitter` instances will behave as if `options.fixedDelta = true`
 */
exports.globalFixedDelta = false;

//helpful to inherit from when using bundled
exports.EventEmitter = EventEmitter;
//keep a global counter of all loops running, helpful to watch in dev tools
exports.running = 0;

function bind(fn, scope){
    if(typeof fn.bind === 'function'){
        return fn.bind(scope);
    }
    return function(){
        return fn.apply(scope, arguments);
    };
}

function functions(obj){
    var keys = Object.keys(obj);
    var arr = [];
    for(var i=0; i<keys.length; i++){
        if(typeof obj[keys[i]] === 'function'){
            arr.push(keys[i]);
        }
    }
    return arr;
}



//polyfill Date.now for real-old browsers
Date.now = Date.now || function now() {
    return new Date().getTime();
};

},{"events":24,"inherits":36,"raf":51}],3:[function(_dereq_,module,exports){
(function (Buffer){
(function (w) {
  "use strict";

  var a2b = w.atob;

  function atob(str) {
    // normal window
    if ('function' === typeof a2b) {
      return a2b(str);
    }
    // browserify (web worker)
    else if ('function' === typeof Buffer) {
      return new Buffer(str, 'base64').toString('binary');
    }
    // ios web worker with base64js
    else if ('object' === typeof w.base64js) {
      // bufferToBinaryString
      // https://github.com/coolaj86/unibabel-js/blob/master/index.js#L50
      var buf = w.base64js.b64ToByteArray(str);

      return Array.prototype.map.call(buf, function (ch) {
        return String.fromCharCode(ch);
      }).join('');
    }
    // ios web worker without base64js
    else {
      throw new Error("you're probably in an ios webworker. please include use beatgammit's base64-js");
    }
  }

  w.atob = atob;

  if (typeof module !== 'undefined') {
    module.exports = atob;
  }
}(window));

}).call(this,_dereq_("buffer").Buffer)

},{"buffer":8}],4:[function(_dereq_,module,exports){
var toBuffer = _dereq_('typedarray-to-buffer')
var isFloat32Array = _dereq_('validate.io-float32array')

module.exports = function (float32Array) {
  if (!float32Array) {
    throw new Error('A Float32Array parameter is missing.')
  }

  if (!isFloat32Array(float32Array)) {
    throw new Error('The parameter is not a Float32Array.')
  }

  this.toBuffer = function () {
    var l = float32Array.length
    var arr = new Int16Array(l)
    var i

    for (i = 0; i < l; i++) {
      arr[i] = Math.min(1, float32Array[i]) * 0x7FFF
    }

    return toBuffer(arr)
  }
}

},{"typedarray-to-buffer":75,"validate.io-float32array":81}],5:[function(_dereq_,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = ((uint8[i] << 16) & 0xFF0000) + ((uint8[i + 1] << 8) & 0xFF00) + (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],6:[function(_dereq_,module,exports){

},{}],7:[function(_dereq_,module,exports){
/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */

/**
 * Splits a string into an array of strings using a regex or string separator. Matches of the
 * separator are not included in the result array. However, if `separator` is a regex that contains
 * capturing groups, backreferences are spliced into the result each time `separator` is matched.
 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
 * cross-browser.
 * @param {String} str String to split.
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 * @example
 *
 * // Basic use
 * split('a b c d', ' ');
 * // -> ['a', 'b', 'c', 'd']
 *
 * // With limit
 * split('a b c d', ' ', 2);
 * // -> ['a', 'b']
 *
 * // Backreferences in result array
 * split('..word1 word2..', /([a-z]+)(\d+)/i);
 * // -> ['..', 'word', '1', ' ', 'word', '2', '..']
 */
module.exports = (function split(undef) {

  var nativeSplit = String.prototype.split,
    compliantExecNpcg = /()??/.exec("")[1] === undef,
    // NPCG: nonparticipating capturing group
    self;

  self = function(str, separator, limit) {
    // If `separator` is not a regex, use `nativeSplit`
    if (Object.prototype.toString.call(separator) !== "[object RegExp]") {
      return nativeSplit.call(str, separator, limit);
    }
    var output = [],
      flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.extended ? "x" : "") + // Proposed for ES6
      (separator.sticky ? "y" : ""),
      // Firefox 3+
      lastLastIndex = 0,
      // Make `global` and avoid `lastIndex` issues by working with a copy
      separator = new RegExp(separator.source, flags + "g"),
      separator2, match, lastIndex, lastLength;
    str += ""; // Type-convert
    if (!compliantExecNpcg) {
      // Doesn't need flags gy, but they don't hurt
      separator2 = new RegExp("^" + separator.source + "$(?!\\s)", flags);
    }
    /* Values for `limit`, per the spec:
     * If undefined: 4294967295 // Math.pow(2, 32) - 1
     * If 0, Infinity, or NaN: 0
     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
     * If negative number: 4294967296 - Math.floor(Math.abs(limit))
     * If other: Type-convert, then use the above rules
     */
    limit = limit === undef ? -1 >>> 0 : // Math.pow(2, 32) - 1
    limit >>> 0; // ToUint32(limit)
    while (match = separator.exec(str)) {
      // `separator.lastIndex` is not reliable cross-browser
      lastIndex = match.index + match[0].length;
      if (lastIndex > lastLastIndex) {
        output.push(str.slice(lastLastIndex, match.index));
        // Fix browsers whose `exec` methods don't consistently return `undefined` for
        // nonparticipating capturing groups
        if (!compliantExecNpcg && match.length > 1) {
          match[0].replace(separator2, function() {
            for (var i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === undef) {
                match[i] = undef;
              }
            }
          });
        }
        if (match.length > 1 && match.index < str.length) {
          Array.prototype.push.apply(output, match.slice(1));
        }
        lastLength = match[0].length;
        lastLastIndex = lastIndex;
        if (output.length >= limit) {
          break;
        }
      }
      if (separator.lastIndex === match.index) {
        separator.lastIndex++; // Avoid an infinite loop
      }
    }
    if (lastLastIndex === str.length) {
      if (lastLength || !separator.test("")) {
        output.push("");
      }
    } else {
      output.push(str.slice(lastLastIndex));
    }
    return output.length > limit ? output.slice(0, limit) : output;
  };

  return self;
})();

},{}],8:[function(_dereq_,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = _dereq_('base64-js')
var ieee754 = _dereq_('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  get: function () {
    if (!(this instanceof Buffer)) {
      return undefined
    }
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  get: function () {
    if (!(this instanceof Buffer)) {
      return undefined
    }
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (ArrayBuffer.isView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (ArrayBuffer.isView(buf)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":5,"ieee754":34}],9:[function(_dereq_,module,exports){
var toBuffer = _dereq_('typedarray-to-buffer')
var atob = _dereq_('atob')
var isBrowser = typeof document !== 'undefined' && typeof document.createElement === 'function'

// cached, used only once for browser environments
var verifiedImageType

module.exports = function (canvas, options) {
  var self = this

  options = options || {}
  options.image = options.image ? options.image : {}
  options.image.types = options.image.types ? options.image.types : []

  // validate some options this class needs
  if (options.image.types.length > 2) {
    throw new Error('Too many image types are specified!')
  } else if (options.image.types.length < 1) {
    // Set a default image type, just to be robust
    options.image.types = isBrowser ? ['webp', 'jpeg'] : ['png']
  }

  if (!options.image.quality) {
    options.image.quality = 0.5 // default
  }

  var quality = parseFloat(options.image.quality)

  function composeImageType (index) {
    var imageType

    if (options.image.types[index]) {
      imageType = 'image/' + options.image.types[index]
    }

    return imageType
  }

  function isMatch (uri, imageType) {
    var match = uri && uri.match(imageType)

    match && options.debug && options.debug('Image type %s verified', imageType)

    return match
  }

  // Performance tweak, we do not need a big canvas for finding out the supported image type
  function getTestCanvas () {
    var testCanvas

    if (isBrowser) {
      testCanvas = document.createElement('canvas')
      testCanvas.width = testCanvas.height = 1
    } else {
      testCanvas = canvas
    }

    return testCanvas
  }

  function canvasSupportsImageTypeAsync (imageType, cb) {
    try {
      getTestCanvas().toDataURL(imageType, function (err, uri) {
        if (err) {
          cb(err)
        } else {
          cb(null, isMatch(uri, imageType))
        }
      })
    } catch (exc) {
      cb(null, false)
    }
  }

  function canvasSupportsImageTypeSync (imageType) {
    var match

    try {
      var testCanvas = getTestCanvas()
      var uri = testCanvas.toDataURL && testCanvas.toDataURL(imageType)

      match = isMatch(uri, imageType)
    } catch (exc) {
      // Can happen when i.E. a spider is coming. Just be robust here and continue.
      options.debug &&
      options.logger.debug('Failed to call toDataURL() on canvas for image type %s', imageType)
    }

    return match
  }

  function verifyImageTypeAsync (imageType, cb) {
    canvasSupportsImageTypeAsync(imageType, function (err, match) {
      if (err) {
        cb(err)
      } else {
        if (match) {
          cb(null, imageType)
        } else {
          imageType = composeImageType(1)

          canvasSupportsImageTypeAsync(imageType, function (err, match) {
            if (err) {
              cb(err)
            } else {
              cb(null, match ? imageType : null)
            }
          })
        }
      }
    })
  }

  function verifyImageTypeSync (imageType) {
    if (!canvasSupportsImageTypeSync(imageType)) {
      if (options.image.types[1]) {
        imageType = composeImageType(1)

        if (!canvasSupportsImageTypeSync(imageType)) {
          imageType = null
        }
      } else {
        imageType = null
      }
    }

    !imageType && options.debug && options.logger.debug('Unable to verify image type')

    return imageType
  }

  // callbacks are needed for server side tests
  function verifyImageType (cb) {
    var imageType = composeImageType(0)

    if (cb) {
      verifyImageTypeAsync(imageType, cb)
    } else {
      return verifyImageTypeSync(imageType)
    }
  }

  // this method is proven to be fast, see
  // http://jsperf.com/data-uri-to-buffer-performance/3
  function uriToBuffer (uri) {
    var uriSplitted = uri.split(',')[1]
    var bytes

    // Beware that the atob function might be a static one for server side tests
    if (typeof (atob) === 'function') {
      bytes = atob(uriSplitted)
    } else if (typeof (self.constructor.atob) === 'function') {
      bytes = self.constructor.atob(uriSplitted)
    } else {
      throw new Error('atob function is missing')
    }

    var arr = new Uint8Array(bytes.length)

    // http://mrale.ph/blog/2014/12/24/array-length-caching.html
    for (var i = 0, l = bytes.length; i < l; i++) {
      arr[i] = bytes.charCodeAt(i)
    }

    return toBuffer(arr)
  }

  function toBufferSync () {
    var imageType = self.getImageType()
    var buffer

    if (imageType) {
      var uri = canvas.toDataURL(imageType, quality)
      buffer = uriToBuffer(uri)
    }

    return buffer
  }

  function toBufferAsync (cb) {
    self.getImageType(function (err, imageType) {
      if (err) {
        cb(err)
      } else if (!imageType) {
        cb()
      } else {
        canvas.toDataURL(imageType, function (err, uri) {
          if (err) {
            cb(err)
          } else {
            cb(null, uriToBuffer(uri))
          }
        })
      }
    })
  }

  this.toBuffer = function (cb) {
    if (cb) {
      toBufferAsync(cb)
    } else {
      return toBufferSync()
    }
  }

  // browsers do not need a callback, but tests do
  this.getImageType = function (cb) {
    // only run for the first time this constructor is called and
    // cache result for the next calls
    if (cb) {
      if (!verifiedImageType || !isBrowser) {
        verifyImageType(function (err, newVerifiedImageType) {
          if (err) {
            cb(err)
          } else {
            verifiedImageType = newVerifiedImageType
            cb(null, verifiedImageType)
          }
        })
      } else {
        cb(null, verifiedImageType)
      }
    } else {
      // on the browser side we do cache it for speed
      if (!verifiedImageType || !isBrowser) {
        verifiedImageType = verifyImageType()
      }

      return verifiedImageType
    }
  }
}

},{"atob":3,"typedarray-to-buffer":75}],10:[function(_dereq_,module,exports){
// contains, add, remove, toggle
var indexof = _dereq_('indexof')

module.exports = ClassList

function ClassList(elem) {
    var cl = elem.classList

    if (cl) {
        return cl
    }

    var classList = {
        add: add
        , remove: remove
        , contains: contains
        , toggle: toggle
        , toString: $toString
        , length: 0
        , item: item
    }

    return classList

    function add(token) {
        var list = getTokens()
        if (indexof(list, token) > -1) {
            return
        }
        list.push(token)
        setTokens(list)
    }

    function remove(token) {
        var list = getTokens()
            , index = indexof(list, token)

        if (index === -1) {
            return
        }

        list.splice(index, 1)
        setTokens(list)
    }

    function contains(token) {
        return indexof(getTokens(), token) > -1
    }

    function toggle(token) {
        if (contains(token)) {
            remove(token)
            return false
        } else {
            add(token)
            return true
        }
    }

    function $toString() {
        return elem.className
    }

    function item(index) {
        var tokens = getTokens()
        return tokens[index] || null
    }

    function getTokens() {
        var className = elem.className

        return filter(className.split(" "), isTruthy)
    }

    function setTokens(list) {
        var length = list.length

        elem.className = list.join(" ")
        classList.length = length

        for (var i = 0; i < list.length; i++) {
            classList[i] = list[i]
        }

        delete list[length]
    }
}

function filter (arr, fn) {
    var ret = []
    for (var i = 0; i < arr.length; i++) {
        if (fn(arr[i])) ret.push(arr[i])
    }
    return ret
}

function isTruthy(value) {
    return !!value
}

},{"indexof":35}],11:[function(_dereq_,module,exports){
/*
 * classList.js: Cross-browser full element.classList implementation.
 * 1.1.20150312
 *
 * By Eli Grey, http://eligrey.com
 * License: Dedicated to the public domain.
 *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md
 */

/*global self, document, DOMException */

/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */

if ("document" in self) {

// Full polyfill for browsers with no classList support
// Including IE < Edge missing SVGElement.classList
if (!("classList" in document.createElement("_")) 
	|| document.createElementNS && !("classList" in document.createElementNS("http://www.w3.org/2000/svg","g"))) {

(function (view) {

"use strict";

if (!('Element' in view)) return;

var
	  classListProp = "classList"
	, protoProp = "prototype"
	, elemCtrProto = view.Element[protoProp]
	, objCtr = Object
	, strTrim = String[protoProp].trim || function () {
		return this.replace(/^\s+|\s+$/g, "");
	}
	, arrIndexOf = Array[protoProp].indexOf || function (item) {
		var
			  i = 0
			, len = this.length
		;
		for (; i < len; i++) {
			if (i in this && this[i] === item) {
				return i;
			}
		}
		return -1;
	}
	// Vendors: please allow content code to instantiate DOMExceptions
	, DOMEx = function (type, message) {
		this.name = type;
		this.code = DOMException[type];
		this.message = message;
	}
	, checkTokenAndGetIndex = function (classList, token) {
		if (token === "") {
			throw new DOMEx(
				  "SYNTAX_ERR"
				, "An invalid or illegal string was specified"
			);
		}
		if (/\s/.test(token)) {
			throw new DOMEx(
				  "INVALID_CHARACTER_ERR"
				, "String contains an invalid character"
			);
		}
		return arrIndexOf.call(classList, token);
	}
	, ClassList = function (elem) {
		var
			  trimmedClasses = strTrim.call(elem.getAttribute("class") || "")
			, classes = trimmedClasses ? trimmedClasses.split(/\s+/) : []
			, i = 0
			, len = classes.length
		;
		for (; i < len; i++) {
			this.push(classes[i]);
		}
		this._updateClassName = function () {
			elem.setAttribute("class", this.toString());
		};
	}
	, classListProto = ClassList[protoProp] = []
	, classListGetter = function () {
		return new ClassList(this);
	}
;
// Most DOMException implementations don't allow calling DOMException's toString()
// on non-DOMExceptions. Error's toString() is sufficient here.
DOMEx[protoProp] = Error[protoProp];
classListProto.item = function (i) {
	return this[i] || null;
};
classListProto.contains = function (token) {
	token += "";
	return checkTokenAndGetIndex(this, token) !== -1;
};
classListProto.add = function () {
	var
		  tokens = arguments
		, i = 0
		, l = tokens.length
		, token
		, updated = false
	;
	do {
		token = tokens[i] + "";
		if (checkTokenAndGetIndex(this, token) === -1) {
			this.push(token);
			updated = true;
		}
	}
	while (++i < l);

	if (updated) {
		this._updateClassName();
	}
};
classListProto.remove = function () {
	var
		  tokens = arguments
		, i = 0
		, l = tokens.length
		, token
		, updated = false
		, index
	;
	do {
		token = tokens[i] + "";
		index = checkTokenAndGetIndex(this, token);
		while (index !== -1) {
			this.splice(index, 1);
			updated = true;
			index = checkTokenAndGetIndex(this, token);
		}
	}
	while (++i < l);

	if (updated) {
		this._updateClassName();
	}
};
classListProto.toggle = function (token, force) {
	token += "";

	var
		  result = this.contains(token)
		, method = result ?
			force !== true && "remove"
		:
			force !== false && "add"
	;

	if (method) {
		this[method](token);
	}

	if (force === true || force === false) {
		return force;
	} else {
		return !result;
	}
};
classListProto.toString = function () {
	return this.join(" ");
};

if (objCtr.defineProperty) {
	var classListPropDesc = {
		  get: classListGetter
		, enumerable: true
		, configurable: true
	};
	try {
		objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
	} catch (ex) { // IE 8 doesn't support enumerable:true
		if (ex.number === -0x7FF5EC54) {
			classListPropDesc.enumerable = false;
			objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
		}
	}
} else if (objCtr[protoProp].__defineGetter__) {
	elemCtrProto.__defineGetter__(classListProp, classListGetter);
}

}(self));

} else {
// There is full or partial native classList support, so just check if we need
// to normalize the add/remove and toggle APIs.

(function () {
	"use strict";

	var testElement = document.createElement("_");

	testElement.classList.add("c1", "c2");

	// Polyfill for IE 10/11 and Firefox <26, where classList.add and
	// classList.remove exist but support only one argument at a time.
	if (!testElement.classList.contains("c2")) {
		var createMethod = function(method) {
			var original = DOMTokenList.prototype[method];

			DOMTokenList.prototype[method] = function(token) {
				var i, len = arguments.length;

				for (i = 0; i < len; i++) {
					token = arguments[i];
					original.call(this, token);
				}
			};
		};
		createMethod('add');
		createMethod('remove');
	}

	testElement.classList.toggle("c3", false);

	// Polyfill for IE 10 and Firefox <24, where classList.toggle does not
	// support the second argument.
	if (testElement.classList.contains("c3")) {
		var _toggle = DOMTokenList.prototype.toggle;

		DOMTokenList.prototype.toggle = function(token, force) {
			if (1 in arguments && !this.contains(token) === !force) {
				return force;
			} else {
				return _toggle.call(this, token);
			}
		};

	}

	testElement = null;
}());

}

}


},{}],12:[function(_dereq_,module,exports){

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],13:[function(_dereq_,module,exports){
var DOCUMENT_POSITION_CONTAINED_BY = 16

module.exports = contains

function contains(container, elem) {
    if (container.contains) {
        return container.contains(elem)
    }

    var comparison = container.compareDocumentPosition(elem)

    return comparison === 0 || comparison & DOCUMENT_POSITION_CONTAINED_BY
}

},{}],14:[function(_dereq_,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":_dereq_("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":40}],15:[function(_dereq_,module,exports){
//     create-error.js 0.3.1
//     (c) 2013 Tim Griesser
//     This source may be freely distributed under the MIT license.
(function(factory) {

"use strict";

// A simple utility for subclassing the "Error"
// object in multiple environments, while maintaining
// relevant stack traces, messages, and prototypes.
factory(function() {

var toString = Object.prototype.toString;

// Creates an new error type with a "name",
// and any additional properties that should be set
// on the error instance.
return function() {
  var args = new Array(arguments.length);
  for (var i = 0; i < args.length; ++i) {
    args[i] = arguments[i];
  }
  var name       = getName(args);
  var target     = getTarget(args);
  var properties = getProps(args);
  function ErrorCtor(message, obj) {
    attachProps(this, properties);
    attachProps(this, obj);
    this.message = (message || this.message);
    if (message instanceof Error) {
      this.message = message.message;
      this.stack = message.stack;
    } else if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
  }
  function Err() { this.constructor = ErrorCtor; }
  Err.prototype = target['prototype'];
  ErrorCtor.prototype = new Err();
  ErrorCtor.prototype.name = ('' + name) || 'CustomError';
  return ErrorCtor;
};

// Just a few helpers to clean up the function above
// https://github.com/petkaantonov/bluebird/wiki/Optimization-killers
function getName(args) {
  if (args.length === 0) return '';
  return isError(args[0]) ? (args[1] || '') : args[0];
}
function getTarget(args) {
  if (args.length === 0) return Error;
  return isError(args[0]) ? args[0] : Error;
}
function getProps(args) {
  if (args.length === 0) return null;
  return isError(args[0]) ? args[2] : args[1];
}
function inheritedKeys(obj) {
  var ret = [];
  for (var key in obj) {
    ret.push(key);
  }
  return ret;
}

// Right now we're just assuming that a function in the first argument is an error.
function isError(obj) {
  return (typeof obj === "function");
}

// We don't need the full underscore check here, since it should either be
// an object-literal, or nothing at all.
function isObject(obj) {
  return (obj && typeof obj === "object" && toString.call(obj) === "[object Object]");
}

// Used to attach attributes to the error object in the constructor.
function attachProps(context, target) {
  if (isObject(target)) {
    var keys = inheritedKeys(target);
    for (var i = 0, l = keys.length; i < l; ++i) {
      context[keys[i]] = clone(target[keys[i]]);
    }
  }
}

// Don't need the full-out "clone" mechanism here, since if you're
// trying to set things other than empty arrays/objects on your
// sub-classed `Error` object, you're probably doing it wrong.
function clone(target) {
  if (target == null || typeof target !== "object") return target;
  var cloned = target.constructor ? target.constructor() : Object.create(null);
  for (var attr in target) {
    if (target.hasOwnProperty(attr)) {
      cloned[attr] = target[attr];
    }
  }
  return cloned;
}

});

// Boilerplate UMD definition block...
})(function(createErrorLib) {
  if (typeof define === "function" && define.amd) {
    define(createErrorLib);
  } else if (typeof exports === 'object') {
    module.exports = createErrorLib();
  } else {
    var root = this;
    var lastcreateError = root.createError;
    var createError = root.createError = createErrorLib();
    createError.noConflict = function() {
      root.createError = lastcreateError;
      return createError;
    };
  }
});

},{}],16:[function(_dereq_,module,exports){
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.deepmerge = factory());
}(this, (function () { 'use strict';

var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}

function cloneUnlessOtherwiseSpecified(value, options) {
	return (options.clone !== false && options.isMergeableObject(value))
		? deepmerge(emptyTarget(value), value, options)
		: value
}

function defaultArrayMerge(target, source, options) {
	return target.concat(source).map(function(element) {
		return cloneUnlessOtherwiseSpecified(element, options)
	})
}

function mergeObject(target, source, options) {
	var destination = {};
	if (options.isMergeableObject(target)) {
		Object.keys(target).forEach(function(key) {
			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
		});
	}
	Object.keys(source).forEach(function(key) {
		if (!options.isMergeableObject(source[key]) || !target[key]) {
			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
		} else {
			destination[key] = deepmerge(target[key], source[key], options);
		}
	});
	return destination
}

function deepmerge(target, source, options) {
	options = options || {};
	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
	options.isMergeableObject = options.isMergeableObject || isMergeableObject;

	var sourceIsArray = Array.isArray(source);
	var targetIsArray = Array.isArray(target);
	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	if (!sourceAndTargetTypesMatch) {
		return cloneUnlessOtherwiseSpecified(source, options)
	} else if (sourceIsArray) {
		return options.arrayMerge(target, source, options)
	} else {
		return mergeObject(target, source, options)
	}
}

deepmerge.all = function deepmergeAll(array, options) {
	if (!Array.isArray(array)) {
		throw new Error('first argument should be an array')
	}

	return array.reduce(function(prev, next) {
		return deepmerge(prev, next, options)
	}, {})
};

var deepmerge_1 = deepmerge;

return deepmerge_1;

})));

},{}],17:[function(_dereq_,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],18:[function(_dereq_,module,exports){
var util = _dereq_('util')
var global = _dereq_('global')
var EventEmitter = _dereq_('events')

var makeDespot = function () {
  var Despot = function () {
    if (global._singletonDespotInstance) {
      return global._singletonDespotInstance
    } else {
      global._singletonDespotInstance = this
      EventEmitter.call(this)
    }
  }

  util.inherits(Despot, EventEmitter)

  return new Despot()
}

module.exports = makeDespot()

},{"events":24,"global":30,"util":80}],19:[function(_dereq_,module,exports){
'use strict'

var document = _dereq_('global/document')
var Event = _dereq_('geval')
var Keys = _dereq_('./keys')

module.exports = Visibility

function Visibility () {
  var keys = Keys(document)
  if (!keys) return noopShim()

  return {
    visible: visible,
    onChange: Event(listen)
  }

  function visible () {
    return !document[keys.hidden]
  }

  function listen (broadcast) {
    document.addEventListener(keys.event, function onVisibilityChange () {
      broadcast(visible())
    })
  }
}

function noopShim () {
  return {
    visible: function () {
      return true
    },
    onChange: noop
  }
}

function noop () {}

},{"./keys":20,"geval":28,"global/document":29}],20:[function(_dereq_,module,exports){
'use strict'

module.exports = keys

function keys (document) {
  var prefix = detectPrefix(document)
  if (prefix == null) return
  return {
    hidden: lowercaseFirst(prefix + 'Hidden'),
    event: prefix + 'visibilitychange'
  }
}

function detectPrefix (document) {
  if (document.hidden != null) return ''
  if (document.mozHidden != null) return 'moz'
  if (document.msHidden != null) return 'ms'
  if (document.webkitHidden != null) return 'webkit'
}

function lowercaseFirst (string) {
  return string.substring(0, 1).toLowerCase() + string.substring(1)
}

},{}],21:[function(_dereq_,module,exports){
(function (process,Buffer){
var stream = _dereq_('readable-stream')
var eos = _dereq_('end-of-stream')
var inherits = _dereq_('inherits')
var shift = _dereq_('stream-shift')

var SIGNAL_FLUSH = (Buffer.from && Buffer.from !== Uint8Array.from)
  ? Buffer.from([0])
  : new Buffer([0])

var onuncork = function(self, fn) {
  if (self._corked) self.once('uncork', fn)
  else fn()
}

var destroyer = function(self, end) {
  return function(err) {
    if (err) self._destroyInterval(err)
    else if (end && !self._ended) self.end()
  }
}

var end = function(ws, fn) {
  if (!ws) return fn()
  if (ws._writableState && ws._writableState.finished) return fn()
  if (ws._writableState) return ws.end(fn)
  ws.end()
  fn()
}

var toStreams2 = function(rs) {
  return new (stream.Readable)({objectMode:true, highWaterMark:16}).wrap(rs)
}

var Duplexify = function(writable, readable, opts) {
  if (!(this instanceof Duplexify)) return new Duplexify(writable, readable, opts)
  stream.Duplex.call(this, opts)

  this._writable = null
  this._readable = null
  this._readable2 = null

  this._forwardDestroy = !opts || opts.destroy !== false
  this._forwardEnd = !opts || opts.end !== false
  this._corked = 1 // start corked
  this._ondrain = null
  this._drained = false
  this._forwarding = false
  this._unwrite = null
  this._unread = null
  this._ended = false
  this._error = null
  this._preferError = false

  this.destroyed = false

  if (writable) this.setWritable(writable)
  if (readable) this.setReadable(readable)
}

inherits(Duplexify, stream.Duplex)

Duplexify.obj = function(writable, readable, opts) {
  if (!opts) opts = {}
  opts.objectMode = true
  opts.highWaterMark = 16
  return new Duplexify(writable, readable, opts)
}

Duplexify.prototype.cork = function() {
  if (++this._corked === 1) this.emit('cork')
}

Duplexify.prototype.uncork = function() {
  if (this._corked && --this._corked === 0) this.emit('uncork')
}

Duplexify.prototype.setWritable = function(writable) {
  if (this._unwrite) this._unwrite()

  if (this.destroyed) {
    if (writable && writable.destroy) writable.destroy()
    return
  }

  if (writable === null || writable === false) {
    this.end()
    return
  }

  var self = this
  var unend = eos(writable, {writable:true, readable:false}, destroyer(this, this._forwardEnd))

  var ondrain = function() {
    var ondrain = self._ondrain
    self._ondrain = null
    if (ondrain) ondrain()
  }

  var clear = function() {
    self._writable.removeListener('drain', ondrain)
    unend()
  }

  if (this._unwrite) process.nextTick(ondrain) // force a drain on stream reset to avoid livelocks

  this._writable = writable
  this._writable.on('drain', ondrain)
  this._unwrite = clear

  this.uncork() // always uncork setWritable
}

Duplexify.prototype.setReadable = function(readable) {
  if (this._unread) this._unread()

  if (this.destroyed) {
    if (readable && readable.destroy) readable.destroy()
    return
  }

  if (readable === null || readable === false) {
    this.push(null)
    this.resume()
    return
  }

  var self = this
  var unend = eos(readable, {writable:false, readable:true}, destroyer(this))

  var onreadable = function() {
    self._forward()
  }

  var onend = function() {
    self.push(null)
  }

  var clear = function() {
    self._readable2.removeListener('readable', onreadable)
    self._readable2.removeListener('end', onend)
    unend()
  }

  this._drained = true
  this._readable = readable
  this._readable2 = readable._readableState ? readable : toStreams2(readable)
  this._readable2.on('readable', onreadable)
  this._readable2.on('end', onend)
  this._unread = clear

  this._forward()
}

Duplexify.prototype._read = function() {
  this._drained = true
  this._forward()
}

Duplexify.prototype._forward = function() {
  if (this._forwarding || !this._readable2 || !this._drained) return
  this._forwarding = true

  var data

  while (this._drained && (data = shift(this._readable2)) !== null) {
    if (this.destroyed) continue
    this._drained = this.push(data)
  }

  this._forwarding = false
}

Duplexify.prototype.destroy = function(err) {
  if (this._preferError && !this._error && err) this._error = err

  if (this.destroyed) return
  this.destroyed = true

  var self = this
  process.nextTick(function() {
    self._destroy(self._preferError ? self._error : err)
  })
}

Duplexify.prototype._destroyInterval = function(err) {
  if (this.destroyed) return
  if (err.message !== 'premature close') return this.destroy(err)
  this._preferError = true
  this.destroy(null)
}

Duplexify.prototype._destroy = function(err) {
  if (err) {
    var ondrain = this._ondrain
    this._ondrain = null
    if (ondrain) ondrain(err)
    else this.emit('error', err)
  }

  if (this._forwardDestroy) {
    if (this._readable && this._readable.destroy) this._readable.destroy()
    if (this._writable && this._writable.destroy) this._writable.destroy()
  }

  this.emit('close')
}

Duplexify.prototype._write = function(data, enc, cb) {
  if (this.destroyed) return cb()
  if (this._corked) return onuncork(this, this._write.bind(this, data, enc, cb))
  if (data === SIGNAL_FLUSH) return this._finish(cb)
  if (!this._writable) return cb()

  if (this._writable.write(data) === false) this._ondrain = cb
  else cb()
}


Duplexify.prototype._finish = function(cb) {
  var self = this
  this.emit('preend')
  onuncork(this, function() {
    end(self._forwardEnd && self._writable, function() {
      // haxx to not emit prefinish twice
      if (self._writableState.prefinished === false) self._writableState.prefinished = true
      self.emit('prefinish')
      onuncork(self, cb)
    })
  })
}

Duplexify.prototype.end = function(data, enc, cb) {
  if (typeof data === 'function') return this.end(null, null, data)
  if (typeof enc === 'function') return this.end(data, null, enc)
  this._ended = true
  if (data) this.write(data)
  if (!this._writableState.ending) this.write(SIGNAL_FLUSH)
  return stream.Writable.prototype.end.call(this, cb)
}

module.exports = Duplexify

}).call(this,_dereq_('_process'),_dereq_("buffer").Buffer)

},{"_process":50,"buffer":8,"end-of-stream":23,"inherits":36,"readable-stream":62,"stream-shift":68}],22:[function(_dereq_,module,exports){
// element-closest | CC0-1.0 | github.com/jonathantneal/closest

(function (ElementProto) {
	if (typeof ElementProto.matches !== 'function') {
		ElementProto.matches = ElementProto.msMatchesSelector || ElementProto.mozMatchesSelector || ElementProto.webkitMatchesSelector || function matches(selector) {
			var element = this;
			var elements = (element.document || element.ownerDocument).querySelectorAll(selector);
			var index = 0;

			while (elements[index] && elements[index] !== element) {
				++index;
			}

			return Boolean(elements[index]);
		};
	}

	if (typeof ElementProto.closest !== 'function') {
		ElementProto.closest = function closest(selector) {
			var element = this;

			while (element && element.nodeType === 1) {
				if (element.matches(selector)) {
					return element;
				}

				element = element.parentNode;
			}

			return null;
		};
	}
})(window.Element.prototype);

},{}],23:[function(_dereq_,module,exports){
var once = _dereq_('once');

var noop = function() {};

var isRequest = function(stream) {
	return stream.setHeader && typeof stream.abort === 'function';
};

var isChildProcess = function(stream) {
	return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3
};

var eos = function(stream, opts, callback) {
	if (typeof opts === 'function') return eos(stream, null, opts);
	if (!opts) opts = {};

	callback = once(callback || noop);

	var ws = stream._writableState;
	var rs = stream._readableState;
	var readable = opts.readable || (opts.readable !== false && stream.readable);
	var writable = opts.writable || (opts.writable !== false && stream.writable);

	var onlegacyfinish = function() {
		if (!stream.writable) onfinish();
	};

	var onfinish = function() {
		writable = false;
		if (!readable) callback.call(stream);
	};

	var onend = function() {
		readable = false;
		if (!writable) callback.call(stream);
	};

	var onexit = function(exitCode) {
		callback.call(stream, exitCode ? new Error('exited with error code: ' + exitCode) : null);
	};

	var onerror = function(err) {
		callback.call(stream, err);
	};

	var onclose = function() {
		if (readable && !(rs && rs.ended)) return callback.call(stream, new Error('premature close'));
		if (writable && !(ws && ws.ended)) return callback.call(stream, new Error('premature close'));
	};

	var onrequest = function() {
		stream.req.on('finish', onfinish);
	};

	if (isRequest(stream)) {
		stream.on('complete', onfinish);
		stream.on('abort', onclose);
		if (stream.req) onrequest();
		else stream.on('request', onrequest);
	} else if (writable && !ws) { // legacy streams
		stream.on('end', onlegacyfinish);
		stream.on('close', onlegacyfinish);
	}

	if (isChildProcess(stream)) stream.on('exit', onexit);

	stream.on('end', onend);
	stream.on('finish', onfinish);
	if (opts.error !== false) stream.on('error', onerror);
	stream.on('close', onclose);

	return function() {
		stream.removeListener('complete', onfinish);
		stream.removeListener('abort', onclose);
		stream.removeListener('request', onrequest);
		if (stream.req) stream.req.removeListener('finish', onfinish);
		stream.removeListener('end', onlegacyfinish);
		stream.removeListener('close', onlegacyfinish);
		stream.removeListener('finish', onfinish);
		stream.removeListener('exit', onexit);
		stream.removeListener('end', onend);
		stream.removeListener('error', onerror);
		stream.removeListener('close', onclose);
	};
};

module.exports = eos;

},{"once":48}],24:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

EventEmitter.prototype.listeners = function listeners(type) {
  var evlistener;
  var ret;
  var events = this._events;

  if (!events)
    ret = [];
  else {
    evlistener = events[type];
    if (!evlistener)
      ret = [];
    else if (typeof evlistener === 'function')
      ret = [evlistener.listener || evlistener];
    else
      ret = unwrapListeners(evlistener);
  }

  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],25:[function(_dereq_,module,exports){
(function (global){
"use strict";

/**
 * filesize
 *
 * @copyright 2018 Jason Mulligan <jason.mulligan@avoidwork.com>
 * @license BSD-3-Clause
 * @version 3.6.1
 */
(function (global) {
	var b = /^(b|B)$/,
	    symbol = {
		iec: {
			bits: ["b", "Kib", "Mib", "Gib", "Tib", "Pib", "Eib", "Zib", "Yib"],
			bytes: ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"]
		},
		jedec: {
			bits: ["b", "Kb", "Mb", "Gb", "Tb", "Pb", "Eb", "Zb", "Yb"],
			bytes: ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]
		}
	},
	    fullform = {
		iec: ["", "kibi", "mebi", "gibi", "tebi", "pebi", "exbi", "zebi", "yobi"],
		jedec: ["", "kilo", "mega", "giga", "tera", "peta", "exa", "zetta", "yotta"]
	};

	/**
  * filesize
  *
  * @method filesize
  * @param  {Mixed}   arg        String, Int or Float to transform
  * @param  {Object}  descriptor [Optional] Flags
  * @return {String}             Readable file size String
  */
	function filesize(arg) {
		var descriptor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		var result = [],
		    val = 0,
		    e = void 0,
		    base = void 0,
		    bits = void 0,
		    ceil = void 0,
		    full = void 0,
		    fullforms = void 0,
		    neg = void 0,
		    num = void 0,
		    output = void 0,
		    round = void 0,
		    unix = void 0,
		    separator = void 0,
		    spacer = void 0,
		    standard = void 0,
		    symbols = void 0;

		if (isNaN(arg)) {
			throw new Error("Invalid arguments");
		}

		bits = descriptor.bits === true;
		unix = descriptor.unix === true;
		base = descriptor.base || 2;
		round = descriptor.round !== void 0 ? descriptor.round : unix ? 1 : 2;
		separator = descriptor.separator !== void 0 ? descriptor.separator || "" : "";
		spacer = descriptor.spacer !== void 0 ? descriptor.spacer : unix ? "" : " ";
		symbols = descriptor.symbols || descriptor.suffixes || {};
		standard = base === 2 ? descriptor.standard || "jedec" : "jedec";
		output = descriptor.output || "string";
		full = descriptor.fullform === true;
		fullforms = descriptor.fullforms instanceof Array ? descriptor.fullforms : [];
		e = descriptor.exponent !== void 0 ? descriptor.exponent : -1;
		num = Number(arg);
		neg = num < 0;
		ceil = base > 2 ? 1000 : 1024;

		// Flipping a negative number to determine the size
		if (neg) {
			num = -num;
		}

		// Determining the exponent
		if (e === -1 || isNaN(e)) {
			e = Math.floor(Math.log(num) / Math.log(ceil));

			if (e < 0) {
				e = 0;
			}
		}

		// Exceeding supported length, time to reduce & multiply
		if (e > 8) {
			e = 8;
		}

		// Zero is now a special case because bytes divide by 1
		if (num === 0) {
			result[0] = 0;
			result[1] = unix ? "" : symbol[standard][bits ? "bits" : "bytes"][e];
		} else {
			val = num / (base === 2 ? Math.pow(2, e * 10) : Math.pow(1000, e));

			if (bits) {
				val = val * 8;

				if (val >= ceil && e < 8) {
					val = val / ceil;
					e++;
				}
			}

			result[0] = Number(val.toFixed(e > 0 ? round : 0));
			result[1] = base === 10 && e === 1 ? bits ? "kb" : "kB" : symbol[standard][bits ? "bits" : "bytes"][e];

			if (unix) {
				result[1] = standard === "jedec" ? result[1].charAt(0) : e > 0 ? result[1].replace(/B$/, "") : result[1];

				if (b.test(result[1])) {
					result[0] = Math.floor(result[0]);
					result[1] = "";
				}
			}
		}

		// Decorating a 'diff'
		if (neg) {
			result[0] = -result[0];
		}

		// Applying custom symbol
		result[1] = symbols[result[1]] || result[1];

		// Returning Array, Object, or String (default)
		if (output === "array") {
			return result;
		}

		if (output === "exponent") {
			return e;
		}

		if (output === "object") {
			return { value: result[0], suffix: result[1], symbol: result[1] };
		}

		if (full) {
			result[1] = fullforms[e] ? fullforms[e] : fullform[standard][e] + (bits ? "bit" : "byte") + (result[0] === 1 ? "" : "s");
		}

		if (separator.length > 0) {
			result[0] = result[0].toString().replace(".", separator);
		}

		return result.join(spacer);
	}

	// Partial application for functional programming
	filesize.partial = function (opt) {
		return function (arg) {
			return filesize(arg, opt);
		};
	};

	// CommonJS, AMD, script tag
	if (typeof exports !== "undefined") {
		module.exports = filesize;
	} else if (typeof define === "function" && define.amd) {
		define(function () {
			return filesize;
		});
	} else {
		global.filesize = filesize;
	}
})(typeof window !== "undefined" ? window : global);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],26:[function(_dereq_,module,exports){
'use strict';

exports.__esModule = true;
exports.default = getFormData;
exports.getFieldData = getFieldData;
var NODE_LIST_CLASSES = {
  '[object HTMLCollection]': true,
  '[object NodeList]': true,
  '[object RadioNodeList]': true

  // .type values for elements which can appear in .elements and should be ignored
};var IGNORED_ELEMENT_TYPES = {
  'button': true,
  'fieldset': true,
  'reset': true,
  'submit': true
};

var CHECKED_INPUT_TYPES = {
  'checkbox': true,
  'radio': true
};

var TRIM_RE = /^\s+|\s+$/g;

var slice = Array.prototype.slice;
var toString = Object.prototype.toString;

/**
 * @param {HTMLFormElement} form
 * @param {Object} options
 * @return {Object.<string,(string|Array.<string>)>} an object containing
 *   submittable value(s) held in the form's .elements collection, with
 *   properties named as per element names or ids.
 */

function getFormData(form) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { trim: false };

  if (!form) {
    throw new Error('A form is required by getFormData, was given form=' + form);
  }

  var data = {};
  var elementName = void 0;
  var elementNames = [];
  var elementNameLookup = {};

  // Get unique submittable element names for the form
  for (var i = 0, l = form.elements.length; i < l; i++) {
    var element = form.elements[i];
    if (IGNORED_ELEMENT_TYPES[element.type] || element.disabled) {
      continue;
    }
    elementName = element.name || element.id;
    if (elementName && !elementNameLookup[elementName]) {
      elementNames.push(elementName);
      elementNameLookup[elementName] = true;
    }
  }

  // Extract element data name-by-name for consistent handling of special cases
  // around elements which contain multiple inputs.
  for (var _i = 0, _l = elementNames.length; _i < _l; _i++) {
    elementName = elementNames[_i];
    var value = getFieldData(form, elementName, options);
    if (value != null) {
      data[elementName] = value;
    }
  }

  return data;
}

/**
 * @param {HTMLFormElement} form
 * @param {string} fieldName
 * @param {Object} options
 * @return {(string|Array.<string>)} submittable value(s) in the form for a
 *   named element from its .elements collection, or null if there was no
 *   element with that name or the element had no submittable value(s).
 */
function getFieldData(form, fieldName) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { trim: false };

  if (!form) {
    throw new Error('A form is required by getFieldData, was given form=' + form);
  }
  if (!fieldName && toString.call(fieldName) !== '[object String]') {
    throw new Error('A field name is required by getFieldData, was given fieldName=' + fieldName);
  }

  var element = form.elements[fieldName];
  if (!element || element.disabled) {
    return null;
  }

  if (!NODE_LIST_CLASSES[toString.call(element)]) {
    return getFormElementValue(element, options.trim);
  }

  // Deal with multiple form controls which have the same name
  var data = [];
  var allRadios = true;
  for (var i = 0, l = element.length; i < l; i++) {
    if (element[i].disabled) {
      continue;
    }
    if (allRadios && element[i].type !== 'radio') {
      allRadios = false;
    }
    var value = getFormElementValue(element[i], options.trim);
    if (value != null) {
      data = data.concat(value);
    }
  }

  // Special case for an element with multiple same-named inputs which were all
  // radio buttons: if there was a selected value, only return the value.
  if (allRadios && data.length === 1) {
    return data[0];
  }

  return data.length > 0 ? data : null;
}

/**
 * @param {HTMLElement} element a form element.
 * @param {booleam} trim should values for text entry inputs be trimmed?
 * @return {(string|Array.<string>|File|Array.<File>)} the element's submittable
 *   value(s), or null if it had none.
 */
function getFormElementValue(element, trim) {
  var value = null;
  var type = element.type;


  if (type === 'select-one') {
    if (element.options.length) {
      value = element.options[element.selectedIndex].value;
    }
    return value;
  }

  if (type === 'select-multiple') {
    value = [];
    for (var i = 0, l = element.options.length; i < l; i++) {
      if (element.options[i].selected) {
        value.push(element.options[i].value);
      }
    }
    if (value.length === 0) {
      value = null;
    }
    return value;
  }

  // If a file input doesn't have a files attribute, fall through to using its
  // value attribute.
  if (type === 'file' && 'files' in element) {
    if (element.multiple) {
      value = slice.call(element.files);
      if (value.length === 0) {
        value = null;
      }
    } else {
      // Should be null if not present, according to the spec
      value = element.files[0];
    }
    return value;
  }

  if (!CHECKED_INPUT_TYPES[type]) {
    value = trim ? element.value.replace(TRIM_RE, '') : element.value;
  } else if (element.checked) {
    value = element.value;
  }

  return value;
}

// For UMD build access to getFieldData
getFormData.getFieldData = getFieldData;
},{}],27:[function(_dereq_,module,exports){
module.exports = Event

function Event() {
    var listeners = []

    return { broadcast: broadcast, listen: event }

    function broadcast(value) {
        for (var i = 0; i < listeners.length; i++) {
            listeners[i](value)
        }
    }

    function event(listener) {
        listeners.push(listener)

        return removeListener

        function removeListener() {
            var index = listeners.indexOf(listener)
            if (index !== -1) {
                listeners.splice(index, 1)
            }
        }
    }
}

},{}],28:[function(_dereq_,module,exports){
var Event = _dereq_('./event.js')

module.exports = Source

function Source(broadcaster) {
    var tuple = Event()

    broadcaster(tuple.broadcast)

    return tuple.listen
}

},{"./event.js":27}],29:[function(_dereq_,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = _dereq_('min-document');

var doccy;

if (typeof document !== 'undefined') {
    doccy = document;
} else {
    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }
}

module.exports = doccy;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"min-document":6}],30:[function(_dereq_,module,exports){
(function (global){
var win;

if (typeof window !== "undefined") {
    win = window;
} else if (typeof global !== "undefined") {
    win = global;
} else if (typeof self !== "undefined"){
    win = self;
} else {
    win = {};
}

module.exports = win;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],31:[function(_dereq_,module,exports){
module.exports = shim

function shim (element, value) {
    if (value === undefined) {
        return element.style.display === 'none'
    }

    element.style.display = value ? 'none' : ''
}

},{}],32:[function(_dereq_,module,exports){
// HumanizeDuration.js - https://git.io/j0HgmQ

;(function () {
  // This has to be defined separately because of a bug: we want to alias
  // `gr` and `el` for backwards-compatiblity. In a breaking change, we can
  // remove `gr` entirely.
  // See https://github.com/EvanHahn/HumanizeDuration.js/issues/143 for more.
  var greek = {
    y: function (c) { return c === 1 ? 'χρόνος' : 'χρόνια' },
    mo: function (c) { return c === 1 ? 'μήνας' : 'μήνες' },
    w: function (c) { return c === 1 ? 'εβδομάδα' : 'εβδομάδες' },
    d: function (c) { return c === 1 ? 'μέρα' : 'μέρες' },
    h: function (c) { return c === 1 ? 'ώρα' : 'ώρες' },
    m: function (c) { return c === 1 ? 'λεπτό' : 'λεπτά' },
    s: function (c) { return c === 1 ? 'δευτερόλεπτο' : 'δευτερόλεπτα' },
    ms: function (c) { return c === 1 ? 'χιλιοστό του δευτερολέπτου' : 'χιλιοστά του δευτερολέπτου' },
    decimal: ','
  }

  var languages = {
    ar: {
      y: function (c) { return c === 1 ? 'سنة' : 'سنوات' },
      mo: function (c) { return c === 1 ? 'شهر' : 'أشهر' },
      w: function (c) { return c === 1 ? 'أسبوع' : 'أسابيع' },
      d: function (c) { return c === 1 ? 'يوم' : 'أيام' },
      h: function (c) { return c === 1 ? 'ساعة' : 'ساعات' },
      m: function (c) {
        return ['دقيقة', 'دقائق'][getArabicForm(c)]
      },
      s: function (c) { return c === 1 ? 'ثانية' : 'ثواني' },
      ms: function (c) { return c === 1 ? 'جزء من الثانية' : 'أجزاء من الثانية' },
      decimal: ','
    },
    bg: {
      y: function (c) { return ['години', 'година', 'години'][getSlavicForm(c)] },
      mo: function (c) { return ['месеца', 'месец', 'месеца'][getSlavicForm(c)] },
      w: function (c) { return ['седмици', 'седмица', 'седмици'][getSlavicForm(c)] },
      d: function (c) { return ['дни', 'ден', 'дни'][getSlavicForm(c)] },
      h: function (c) { return ['часа', 'час', 'часа'][getSlavicForm(c)] },
      m: function (c) { return ['минути', 'минута', 'минути'][getSlavicForm(c)] },
      s: function (c) { return ['секунди', 'секунда', 'секунди'][getSlavicForm(c)] },
      ms: function (c) { return ['милисекунди', 'милисекунда', 'милисекунди'][getSlavicForm(c)] },
      decimal: ','
    },
    ca: {
      y: function (c) { return 'any' + (c === 1 ? '' : 's') },
      mo: function (c) { return 'mes' + (c === 1 ? '' : 'os') },
      w: function (c) { return 'setman' + (c === 1 ? 'a' : 'es') },
      d: function (c) { return 'di' + (c === 1 ? 'a' : 'es') },
      h: function (c) { return 'hor' + (c === 1 ? 'a' : 'es') },
      m: function (c) { return 'minut' + (c === 1 ? '' : 's') },
      s: function (c) { return 'segon' + (c === 1 ? '' : 's') },
      ms: function (c) { return 'milisegon' + (c === 1 ? '' : 's') },
      decimal: ','
    },
    cs: {
      y: function (c) { return ['rok', 'roku', 'roky', 'let'][getCzechOrSlovakForm(c)] },
      mo: function (c) { return ['měsíc', 'měsíce', 'měsíce', 'měsíců'][getCzechOrSlovakForm(c)] },
      w: function (c) { return ['týden', 'týdne', 'týdny', 'týdnů'][getCzechOrSlovakForm(c)] },
      d: function (c) { return ['den', 'dne', 'dny', 'dní'][getCzechOrSlovakForm(c)] },
      h: function (c) { return ['hodina', 'hodiny', 'hodiny', 'hodin'][getCzechOrSlovakForm(c)] },
      m: function (c) { return ['minuta', 'minuty', 'minuty', 'minut'][getCzechOrSlovakForm(c)] },
      s: function (c) { return ['sekunda', 'sekundy', 'sekundy', 'sekund'][getCzechOrSlovakForm(c)] },
      ms: function (c) { return ['milisekunda', 'milisekundy', 'milisekundy', 'milisekund'][getCzechOrSlovakForm(c)] },
      decimal: ','
    },
    da: {
      y: 'år',
      mo: function (c) { return 'måned' + (c === 1 ? '' : 'er') },
      w: function (c) { return 'uge' + (c === 1 ? '' : 'r') },
      d: function (c) { return 'dag' + (c === 1 ? '' : 'e') },
      h: function (c) { return 'time' + (c === 1 ? '' : 'r') },
      m: function (c) { return 'minut' + (c === 1 ? '' : 'ter') },
      s: function (c) { return 'sekund' + (c === 1 ? '' : 'er') },
      ms: function (c) { return 'millisekund' + (c === 1 ? '' : 'er') },
      decimal: ','
    },
    de: {
      y: function (c) { return 'Jahr' + (c === 1 ? '' : 'e') },
      mo: function (c) { return 'Monat' + (c === 1 ? '' : 'e') },
      w: function (c) { return 'Woche' + (c === 1 ? '' : 'n') },
      d: function (c) { return 'Tag' + (c === 1 ? '' : 'e') },
      h: function (c) { return 'Stunde' + (c === 1 ? '' : 'n') },
      m: function (c) { return 'Minute' + (c === 1 ? '' : 'n') },
      s: function (c) { return 'Sekunde' + (c === 1 ? '' : 'n') },
      ms: function (c) { return 'Millisekunde' + (c === 1 ? '' : 'n') },
      decimal: ','
    },
    el: greek,
    en: {
      y: function (c) { return 'year' + (c === 1 ? '' : 's') },
      mo: function (c) { return 'month' + (c === 1 ? '' : 's') },
      w: function (c) { return 'week' + (c === 1 ? '' : 's') },
      d: function (c) { return 'day' + (c === 1 ? '' : 's') },
      h: function (c) { return 'hour' + (c === 1 ? '' : 's') },
      m: function (c) { return 'minute' + (c === 1 ? '' : 's') },
      s: function (c) { return 'second' + (c === 1 ? '' : 's') },
      ms: function (c) { return 'millisecond' + (c === 1 ? '' : 's') },
      decimal: '.'
    },
    es: {
      y: function (c) { return 'año' + (c === 1 ? '' : 's') },
      mo: function (c) { return 'mes' + (c === 1 ? '' : 'es') },
      w: function (c) { return 'semana' + (c === 1 ? '' : 's') },
      d: function (c) { return 'día' + (c === 1 ? '' : 's') },
      h: function (c) { return 'hora' + (c === 1 ? '' : 's') },
      m: function (c) { return 'minuto' + (c === 1 ? '' : 's') },
      s: function (c) { return 'segundo' + (c === 1 ? '' : 's') },
      ms: function (c) { return 'milisegundo' + (c === 1 ? '' : 's') },
      decimal: ','
    },
    fa: {
      y: 'سال',
      mo: 'ماه',
      w: 'هفته',
      d: 'روز',
      h: 'ساعت',
      m: 'دقیقه',
      s: 'ثانیه',
      ms: 'میلی ثانیه',
      decimal: '.'
    },
    fi: {
      y: function (c) { return c === 1 ? 'vuosi' : 'vuotta' },
      mo: function (c) { return c === 1 ? 'kuukausi' : 'kuukautta' },
      w: function (c) { return 'viikko' + (c === 1 ? '' : 'a') },
      d: function (c) { return 'päivä' + (c === 1 ? '' : 'ä') },
      h: function (c) { return 'tunti' + (c === 1 ? '' : 'a') },
      m: function (c) { return 'minuutti' + (c === 1 ? '' : 'a') },
      s: function (c) { return 'sekunti' + (c === 1 ? '' : 'a') },
      ms: function (c) { return 'millisekunti' + (c === 1 ? '' : 'a') },
      decimal: ','
    },
    fr: {
      y: function (c) { return 'an' + (c >= 2 ? 's' : '') },
      mo: 'mois',
      w: function (c) { return 'semaine' + (c >= 2 ? 's' : '') },
      d: function (c) { return 'jour' + (c >= 2 ? 's' : '') },
      h: function (c) { return 'heure' + (c >= 2 ? 's' : '') },
      m: function (c) { return 'minute' + (c >= 2 ? 's' : '') },
      s: function (c) { return 'seconde' + (c >= 2 ? 's' : '') },
      ms: function (c) { return 'milliseconde' + (c >= 2 ? 's' : '') },
      decimal: ','
    },
    gr: greek,
    hr: {
      y: function (c) {
        if (c % 10 === 2 || c % 10 === 3 || c % 10 === 4) {
          return 'godine'
        }
        return 'godina'
      },
      mo: function (c) {
        if (c === 1) {
          return 'mjesec'
        } else if (c === 2 || c === 3 || c === 4) {
          return 'mjeseca'
        }
        return 'mjeseci'
      },
      w: function (c) {
        if (c % 10 === 1 && c !== 11) {
          return 'tjedan'
        }
        return 'tjedna'
      },
      d: function (c) { return c === 1 ? 'dan' : 'dana' },
      h: function (c) {
        if (c === 1) {
          return 'sat'
        } else if (c === 2 || c === 3 || c === 4) {
          return 'sata'
        }
        return 'sati'
      },
      m: function (c) {
        var mod10 = c % 10
        if ((mod10 === 2 || mod10 === 3 || mod10 === 4) && (c < 10 || c > 14)) {
          return 'minute'
        }
        return 'minuta'
      },
      s: function (c) {
        if ((c === 10 || c === 11 || c === 12 || c === 13 || c === 14 || c === 16 || c === 17 || c === 18 || c === 19) || (c % 10 === 5)) {
          return 'sekundi'
        } else if (c % 10 === 1) {
          return 'sekunda'
        } else if (c % 10 === 2 || c % 10 === 3 || c % 10 === 4) {
          return 'sekunde'
        }
        return 'sekundi'
      },
      ms: function (c) {
        if (c === 1) {
          return 'milisekunda'
        } else if (c % 10 === 2 || c % 10 === 3 || c % 10 === 4) {
          return 'milisekunde'
        }
        return 'milisekundi'
      },
      decimal: ','
    },
    hu: {
      y: 'év',
      mo: 'hónap',
      w: 'hét',
      d: 'nap',
      h: 'óra',
      m: 'perc',
      s: 'másodperc',
      ms: 'ezredmásodperc',
      decimal: ','
    },
    id: {
      y: 'tahun',
      mo: 'bulan',
      w: 'minggu',
      d: 'hari',
      h: 'jam',
      m: 'menit',
      s: 'detik',
      ms: 'milidetik',
      decimal: '.'
    },
    is: {
      y: 'ár',
      mo: function (c) { return 'mánuð' + (c === 1 ? 'ur' : 'ir') },
      w: function (c) { return 'vik' + (c === 1 ? 'a' : 'ur') },
      d: function (c) { return 'dag' + (c === 1 ? 'ur' : 'ar') },
      h: function (c) { return 'klukkutím' + (c === 1 ? 'i' : 'ar') },
      m: function (c) { return 'mínút' + (c === 1 ? 'a' : 'ur') },
      s: function (c) { return 'sekúnd' + (c === 1 ? 'a' : 'ur') },
      ms: function (c) { return 'millisekúnd' + (c === 1 ? 'a' : 'ur') },
      decimal: '.'
    },
    it: {
      y: function (c) { return 'ann' + (c === 1 ? 'o' : 'i') },
      mo: function (c) { return 'mes' + (c === 1 ? 'e' : 'i') },
      w: function (c) { return 'settiman' + (c === 1 ? 'a' : 'e') },
      d: function (c) { return 'giorn' + (c === 1 ? 'o' : 'i') },
      h: function (c) { return 'or' + (c === 1 ? 'a' : 'e') },
      m: function (c) { return 'minut' + (c === 1 ? 'o' : 'i') },
      s: function (c) { return 'second' + (c === 1 ? 'o' : 'i') },
      ms: function (c) { return 'millisecond' + (c === 1 ? 'o' : 'i') },
      decimal: ','
    },
    ja: {
      y: '年',
      mo: '月',
      w: '週',
      d: '日',
      h: '時間',
      m: '分',
      s: '秒',
      ms: 'ミリ秒',
      decimal: '.'
    },
    ko: {
      y: '년',
      mo: '개월',
      w: '주일',
      d: '일',
      h: '시간',
      m: '분',
      s: '초',
      ms: '밀리 초',
      decimal: '.'
    },
    lo: {
      y: 'ປີ',
      mo: 'ເດືອນ',
      w: 'ອາທິດ',
      d: 'ມື້',
      h: 'ຊົ່ວໂມງ',
      m: 'ນາທີ',
      s: 'ວິນາທີ',
      ms: 'ມິນລິວິນາທີ',
      decimal: ','
    },
    lt: {
      y: function (c) { return ((c % 10 === 0) || (c % 100 >= 10 && c % 100 <= 20)) ? 'metų' : 'metai' },
      mo: function (c) { return ['mėnuo', 'mėnesiai', 'mėnesių'][getLithuanianForm(c)] },
      w: function (c) { return ['savaitė', 'savaitės', 'savaičių'][getLithuanianForm(c)] },
      d: function (c) { return ['diena', 'dienos', 'dienų'][getLithuanianForm(c)] },
      h: function (c) { return ['valanda', 'valandos', 'valandų'][getLithuanianForm(c)] },
      m: function (c) { return ['minutė', 'minutės', 'minučių'][getLithuanianForm(c)] },
      s: function (c) { return ['sekundė', 'sekundės', 'sekundžių'][getLithuanianForm(c)] },
      ms: function (c) { return ['milisekundė', 'milisekundės', 'milisekundžių'][getLithuanianForm(c)] },
      decimal: ','
    },
    ms: {
      y: 'tahun',
      mo: 'bulan',
      w: 'minggu',
      d: 'hari',
      h: 'jam',
      m: 'minit',
      s: 'saat',
      ms: 'milisaat',
      decimal: '.'
    },
    nl: {
      y: 'jaar',
      mo: function (c) { return c === 1 ? 'maand' : 'maanden' },
      w: function (c) { return c === 1 ? 'week' : 'weken' },
      d: function (c) { return c === 1 ? 'dag' : 'dagen' },
      h: 'uur',
      m: function (c) { return c === 1 ? 'minuut' : 'minuten' },
      s: function (c) { return c === 1 ? 'seconde' : 'seconden' },
      ms: function (c) { return c === 1 ? 'milliseconde' : 'milliseconden' },
      decimal: ','
    },
    no: {
      y: 'år',
      mo: function (c) { return 'måned' + (c === 1 ? '' : 'er') },
      w: function (c) { return 'uke' + (c === 1 ? '' : 'r') },
      d: function (c) { return 'dag' + (c === 1 ? '' : 'er') },
      h: function (c) { return 'time' + (c === 1 ? '' : 'r') },
      m: function (c) { return 'minutt' + (c === 1 ? '' : 'er') },
      s: function (c) { return 'sekund' + (c === 1 ? '' : 'er') },
      ms: function (c) { return 'millisekund' + (c === 1 ? '' : 'er') },
      decimal: ','
    },
    pl: {
      y: function (c) { return ['rok', 'roku', 'lata', 'lat'][getPolishForm(c)] },
      mo: function (c) { return ['miesiąc', 'miesiąca', 'miesiące', 'miesięcy'][getPolishForm(c)] },
      w: function (c) { return ['tydzień', 'tygodnia', 'tygodnie', 'tygodni'][getPolishForm(c)] },
      d: function (c) { return ['dzień', 'dnia', 'dni', 'dni'][getPolishForm(c)] },
      h: function (c) { return ['godzina', 'godziny', 'godziny', 'godzin'][getPolishForm(c)] },
      m: function (c) { return ['minuta', 'minuty', 'minuty', 'minut'][getPolishForm(c)] },
      s: function (c) { return ['sekunda', 'sekundy', 'sekundy', 'sekund'][getPolishForm(c)] },
      ms: function (c) { return ['milisekunda', 'milisekundy', 'milisekundy', 'milisekund'][getPolishForm(c)] },
      decimal: ','
    },
    pt: {
      y: function (c) { return 'ano' + (c === 1 ? '' : 's') },
      mo: function (c) { return c === 1 ? 'mês' : 'meses' },
      w: function (c) { return 'semana' + (c === 1 ? '' : 's') },
      d: function (c) { return 'dia' + (c === 1 ? '' : 's') },
      h: function (c) { return 'hora' + (c === 1 ? '' : 's') },
      m: function (c) { return 'minuto' + (c === 1 ? '' : 's') },
      s: function (c) { return 'segundo' + (c === 1 ? '' : 's') },
      ms: function (c) { return 'milissegundo' + (c === 1 ? '' : 's') },
      decimal: ','
    },
    ru: {
      y: function (c) { return ['лет', 'год', 'года'][getSlavicForm(c)] },
      mo: function (c) { return ['месяцев', 'месяц', 'месяца'][getSlavicForm(c)] },
      w: function (c) { return ['недель', 'неделя', 'недели'][getSlavicForm(c)] },
      d: function (c) { return ['дней', 'день', 'дня'][getSlavicForm(c)] },
      h: function (c) { return ['часов', 'час', 'часа'][getSlavicForm(c)] },
      m: function (c) { return ['минут', 'минута', 'минуты'][getSlavicForm(c)] },
      s: function (c) { return ['секунд', 'секунда', 'секунды'][getSlavicForm(c)] },
      ms: function (c) { return ['миллисекунд', 'миллисекунда', 'миллисекунды'][getSlavicForm(c)] },
      decimal: ','
    },
    uk: {
      y: function (c) { return ['років', 'рік', 'роки'][getSlavicForm(c)] },
      mo: function (c) { return ['місяців', 'місяць', 'місяці'][getSlavicForm(c)] },
      w: function (c) { return ['тижнів', 'тиждень', 'тижні'][getSlavicForm(c)] },
      d: function (c) { return ['днів', 'день', 'дні'][getSlavicForm(c)] },
      h: function (c) { return ['годин', 'година', 'години'][getSlavicForm(c)] },
      m: function (c) { return ['хвилин', 'хвилина', 'хвилини'][getSlavicForm(c)] },
      s: function (c) { return ['секунд', 'секунда', 'секунди'][getSlavicForm(c)] },
      ms: function (c) { return ['мілісекунд', 'мілісекунда', 'мілісекунди'][getSlavicForm(c)] },
      decimal: ','
    },
    ur: {
      y: 'سال',
      mo: function (c) { return c === 1 ? 'مہینہ' : 'مہینے' },
      w: function (c) { return c === 1 ? 'ہفتہ' : 'ہفتے' },
      d: 'دن',
      h: function (c) { return c === 1 ? 'گھنٹہ' : 'گھنٹے' },
      m: 'منٹ',
      s: 'سیکنڈ',
      ms: 'ملی سیکنڈ',
      decimal: '.'
    },
    sk: {
      y: function (c) { return ['rok', 'roky', 'roky', 'rokov'][getCzechOrSlovakForm(c)] },
      mo: function (c) { return ['mesiac', 'mesiace', 'mesiace', 'mesiacov'][getCzechOrSlovakForm(c)] },
      w: function (c) { return ['týždeň', 'týždne', 'týždne', 'týždňov'][getCzechOrSlovakForm(c)] },
      d: function (c) { return ['deň', 'dni', 'dni', 'dní'][getCzechOrSlovakForm(c)] },
      h: function (c) { return ['hodina', 'hodiny', 'hodiny', 'hodín'][getCzechOrSlovakForm(c)] },
      m: function (c) { return ['minúta', 'minúty', 'minúty', 'minút'][getCzechOrSlovakForm(c)] },
      s: function (c) { return ['sekunda', 'sekundy', 'sekundy', 'sekúnd'][getCzechOrSlovakForm(c)] },
      ms: function (c) { return ['milisekunda', 'milisekundy', 'milisekundy', 'milisekúnd'][getCzechOrSlovakForm(c)] },
      decimal: ','
    },
    sv: {
      y: 'år',
      mo: function (c) { return 'månad' + (c === 1 ? '' : 'er') },
      w: function (c) { return 'veck' + (c === 1 ? 'a' : 'or') },
      d: function (c) { return 'dag' + (c === 1 ? '' : 'ar') },
      h: function (c) { return 'timm' + (c === 1 ? 'e' : 'ar') },
      m: function (c) { return 'minut' + (c === 1 ? '' : 'er') },
      s: function (c) { return 'sekund' + (c === 1 ? '' : 'er') },
      ms: function (c) { return 'millisekund' + (c === 1 ? '' : 'er') },
      decimal: ','
    },
    tr: {
      y: 'yıl',
      mo: 'ay',
      w: 'hafta',
      d: 'gün',
      h: 'saat',
      m: 'dakika',
      s: 'saniye',
      ms: 'milisaniye',
      decimal: ','
    },
    vi: {
      y: 'năm',
      mo: 'tháng',
      w: 'tuần',
      d: 'ngày',
      h: 'giờ',
      m: 'phút',
      s: 'giây',
      ms: 'mili giây',
      decimal: ','
    },
    zh_CN: {
      y: '年',
      mo: '个月',
      w: '周',
      d: '天',
      h: '小时',
      m: '分钟',
      s: '秒',
      ms: '毫秒',
      decimal: '.'
    },
    zh_TW: {
      y: '年',
      mo: '個月',
      w: '周',
      d: '天',
      h: '小時',
      m: '分鐘',
      s: '秒',
      ms: '毫秒',
      decimal: '.'
    }
  }

  // You can create a humanizer, which returns a function with default
  // parameters.
  function humanizer (passedOptions) {
    var result = function humanizer (ms, humanizerOptions) {
      var options = extend({}, result, humanizerOptions || {})
      return doHumanization(ms, options)
    }

    return extend(result, {
      language: 'en',
      delimiter: ', ',
      spacer: ' ',
      conjunction: '',
      serialComma: true,
      units: ['y', 'mo', 'w', 'd', 'h', 'm', 's'],
      languages: {},
      round: false,
      unitMeasures: {
        y: 31557600000,
        mo: 2629800000,
        w: 604800000,
        d: 86400000,
        h: 3600000,
        m: 60000,
        s: 1000,
        ms: 1
      }
    }, passedOptions)
  }

  // The main function is just a wrapper around a default humanizer.
  var humanizeDuration = humanizer({})

  // doHumanization does the bulk of the work.
  function doHumanization (ms, options) {
    var i, len, piece

    // Make sure we have a positive number.
    // Has the nice sideffect of turning Number objects into primitives.
    ms = Math.abs(ms)

    var dictionary = options.languages[options.language] || languages[options.language]
    if (!dictionary) {
      throw new Error('No language ' + dictionary + '.')
    }

    var pieces = []

    // Start at the top and keep removing units, bit by bit.
    var unitName, unitMS, unitCount
    for (i = 0, len = options.units.length; i < len; i++) {
      unitName = options.units[i]
      unitMS = options.unitMeasures[unitName]

      // What's the number of full units we can fit?
      if (i + 1 === len) {
        unitCount = ms / unitMS
      } else {
        unitCount = Math.floor(ms / unitMS)
      }

      // Add the string.
      pieces.push({
        unitCount: unitCount,
        unitName: unitName
      })

      // Remove what we just figured out.
      ms -= unitCount * unitMS
    }

    var firstOccupiedUnitIndex = 0
    for (i = 0; i < pieces.length; i++) {
      if (pieces[i].unitCount) {
        firstOccupiedUnitIndex = i
        break
      }
    }

    if (options.round) {
      var ratioToLargerUnit, previousPiece
      for (i = pieces.length - 1; i >= 0; i--) {
        piece = pieces[i]
        piece.unitCount = Math.round(piece.unitCount)

        if (i === 0) { break }

        previousPiece = pieces[i - 1]

        ratioToLargerUnit = options.unitMeasures[previousPiece.unitName] / options.unitMeasures[piece.unitName]
        if ((piece.unitCount % ratioToLargerUnit) === 0 || (options.largest && ((options.largest - 1) < (i - firstOccupiedUnitIndex)))) {
          previousPiece.unitCount += piece.unitCount / ratioToLargerUnit
          piece.unitCount = 0
        }
      }
    }

    var result = []
    for (i = 0, pieces.length; i < len; i++) {
      piece = pieces[i]
      if (piece.unitCount) {
        result.push(render(piece.unitCount, piece.unitName, dictionary, options))
      }

      if (result.length === options.largest) { break }
    }

    if (result.length) {
      if (!options.conjunction || result.length === 1) {
        return result.join(options.delimiter)
      } else if (result.length === 2) {
        return result.join(options.conjunction)
      } else if (result.length > 2) {
        return result.slice(0, -1).join(options.delimiter) + (options.serialComma ? ',' : '') + options.conjunction + result.slice(-1)
      }
    } else {
      return render(0, options.units[options.units.length - 1], dictionary, options)
    }
  }

  function render (count, type, dictionary, options) {
    var decimal
    if (options.decimal === void 0) {
      decimal = dictionary.decimal
    } else {
      decimal = options.decimal
    }

    var countStr = count.toString().replace('.', decimal)

    var dictionaryValue = dictionary[type]
    var word
    if (typeof dictionaryValue === 'function') {
      word = dictionaryValue(count)
    } else {
      word = dictionaryValue
    }

    return countStr + options.spacer + word
  }

  function extend (destination) {
    var source
    for (var i = 1; i < arguments.length; i++) {
      source = arguments[i]
      for (var prop in source) {
        if (source.hasOwnProperty(prop)) {
          destination[prop] = source[prop]
        }
      }
    }
    return destination
  }

  // Internal helper function for Polish language.
  function getPolishForm (c) {
    if (c === 1) {
      return 0
    } else if (Math.floor(c) !== c) {
      return 1
    } else if (c % 10 >= 2 && c % 10 <= 4 && !(c % 100 > 10 && c % 100 < 20)) {
      return 2
    } else {
      return 3
    }
  }

  // Internal helper function for Russian and Ukranian languages.
  function getSlavicForm (c) {
    if (Math.floor(c) !== c) {
      return 2
    } else if ((c % 100 >= 5 && c % 100 <= 20) || (c % 10 >= 5 && c % 10 <= 9) || c % 10 === 0) {
      return 0
    } else if (c % 10 === 1) {
      return 1
    } else if (c > 1) {
      return 2
    } else {
      return 0
    }
  }

  // Internal helper function for Slovak language.
  function getCzechOrSlovakForm (c) {
    if (c === 1) {
      return 0
    } else if (Math.floor(c) !== c) {
      return 1
    } else if (c % 10 >= 2 && c % 10 <= 4 && c % 100 < 10) {
      return 2
    } else {
      return 3
    }
  }

  // Internal helper function for Lithuanian language.
  function getLithuanianForm (c) {
    if (c === 1 || (c % 10 === 1 && c % 100 > 20)) {
      return 0
    } else if (Math.floor(c) !== c || (c % 10 >= 2 && c % 100 > 20) || (c % 10 >= 2 && c % 100 < 10)) {
      return 1
    } else {
      return 2
    }
  }

  // Internal helper function for Arabic language.
  function getArabicForm (c) {
    if (c <= 2) { return 0 }
    if (c > 2 && c < 11) { return 1 }
    return 0
  }

  humanizeDuration.getSupportedLanguages = function getSupportedLanguages () {
    var result = []
    for (var language in languages) {
      if (languages.hasOwnProperty(language) && language !== 'gr') {
        result.push(language)
      }
    }
    return result
  }

  humanizeDuration.humanizer = humanizer

  if (typeof define === 'function' && define.amd) {
    define(function () {
      return humanizeDuration
    })
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = humanizeDuration
  } else {
    this.humanizeDuration = humanizeDuration
  }
})(); // eslint-disable-line semi

},{}],33:[function(_dereq_,module,exports){
var split = _dereq_('browser-split')
var ClassList = _dereq_('class-list')

var w = typeof window === 'undefined' ? _dereq_('html-element') : window
var document = w.document
var Text = w.Text

function context () {

  var cleanupFuncs = []

  function h() {
    var args = [].slice.call(arguments), e = null
    function item (l) {
      var r
      function parseClass (string) {
        // Our minimal parser doesn’t understand escaping CSS special
        // characters like `#`. Don’t use them. More reading:
        // https://mathiasbynens.be/notes/css-escapes .

        var m = split(string, /([\.#]?[^\s#.]+)/)
        if(/^\.|#/.test(m[1]))
          e = document.createElement('div')
        forEach(m, function (v) {
          var s = v.substring(1,v.length)
          if(!v) return
          if(!e)
            e = document.createElement(v)
          else if (v[0] === '.')
            ClassList(e).add(s)
          else if (v[0] === '#')
            e.setAttribute('id', s)
        })
      }

      if(l == null)
        ;
      else if('string' === typeof l) {
        if(!e)
          parseClass(l)
        else
          e.appendChild(r = document.createTextNode(l))
      }
      else if('number' === typeof l
        || 'boolean' === typeof l
        || l instanceof Date
        || l instanceof RegExp ) {
          e.appendChild(r = document.createTextNode(l.toString()))
      }
      //there might be a better way to handle this...
      else if (isArray(l))
        forEach(l, item)
      else if(isNode(l))
        e.appendChild(r = l)
      else if(l instanceof Text)
        e.appendChild(r = l)
      else if ('object' === typeof l) {
        for (var k in l) {
          if('function' === typeof l[k]) {
            if(/^on\w+/.test(k)) {
              (function (k, l) { // capture k, l in the closure
                if (e.addEventListener){
                  e.addEventListener(k.substring(2), l[k], false)
                  cleanupFuncs.push(function(){
                    e.removeEventListener(k.substring(2), l[k], false)
                  })
                }else{
                  e.attachEvent(k, l[k])
                  cleanupFuncs.push(function(){
                    e.detachEvent(k, l[k])
                  })
                }
              })(k, l)
            } else {
              // observable
              e[k] = l[k]()
              cleanupFuncs.push(l[k](function (v) {
                e[k] = v
              }))
            }
          }
          else if(k === 'style') {
            if('string' === typeof l[k]) {
              e.style.cssText = l[k]
            }else{
              for (var s in l[k]) (function(s, v) {
                if('function' === typeof v) {
                  // observable
                  e.style.setProperty(s, v())
                  cleanupFuncs.push(v(function (val) {
                    e.style.setProperty(s, val)
                  }))
                } else
                  var match = l[k][s].match(/(.*)\W+!important\W*$/);
                  if (match) {
                    e.style.setProperty(s, match[1], 'important')
                  } else {
                    e.style.setProperty(s, l[k][s])
                  }
              })(s, l[k][s])
            }
          } else if(k === 'attrs') {
            for (var v in l[k]) {
              e.setAttribute(v, l[k][v])
            }
          }
          else if (k.substr(0, 5) === "data-") {
            e.setAttribute(k, l[k])
          } else {
            e[k] = l[k]
          }
        }
      } else if ('function' === typeof l) {
        //assume it's an observable!
        var v = l()
        e.appendChild(r = isNode(v) ? v : document.createTextNode(v))

        cleanupFuncs.push(l(function (v) {
          if(isNode(v) && r.parentElement)
            r.parentElement.replaceChild(v, r), r = v
          else
            r.textContent = v
        }))
      }

      return r
    }
    while(args.length)
      item(args.shift())

    return e
  }

  h.cleanup = function () {
    for (var i = 0; i < cleanupFuncs.length; i++){
      cleanupFuncs[i]()
    }
    cleanupFuncs.length = 0
  }

  return h
}

var h = module.exports = context()
h.context = context

function isNode (el) {
  return el && el.nodeName && el.nodeType
}

function forEach (arr, fn) {
  if (arr.forEach) return arr.forEach(fn)
  for (var i = 0; i < arr.length; i++) fn(arr[i], i)
}

function isArray (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]'
}



},{"browser-split":7,"class-list":10,"html-element":6}],34:[function(_dereq_,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],35:[function(_dereq_,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],36:[function(_dereq_,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],37:[function(_dereq_,module,exports){
var containers = []; // will store container HTMLElement references
var styleElements = []; // will store {prepend: HTMLElement, append: HTMLElement}

var usage = 'insert-css: You need to provide a CSS string. Usage: insertCss(cssString[, options]).';

function insertCss(css, options) {
    options = options || {};

    if (css === undefined) {
        throw new Error(usage);
    }

    var position = options.prepend === true ? 'prepend' : 'append';
    var container = options.container !== undefined ? options.container : document.querySelector('head');
    var containerId = containers.indexOf(container);

    // first time we see this container, create the necessary entries
    if (containerId === -1) {
        containerId = containers.push(container) - 1;
        styleElements[containerId] = {};
    }

    // try to get the correponding container + position styleElement, create it otherwise
    var styleElement;

    if (styleElements[containerId] !== undefined && styleElements[containerId][position] !== undefined) {
        styleElement = styleElements[containerId][position];
    } else {
        styleElement = styleElements[containerId][position] = createStyleElement();

        if (position === 'prepend') {
            container.insertBefore(styleElement, container.childNodes[0]);
        } else {
            container.appendChild(styleElement);
        }
    }

    // strip potential UTF-8 BOM if css was read from a file
    if (css.charCodeAt(0) === 0xFEFF) { css = css.substr(1, css.length); }

    // actually add the stylesheet
    if (styleElement.styleSheet) {
        styleElement.styleSheet.cssText += css
    } else {
        styleElement.textContent += css;
    }

    return styleElement;
};

function createStyleElement() {
    var styleElement = document.createElement('style');
    styleElement.setAttribute('type', 'text/css');
    return styleElement;
}

module.exports = insertCss;
module.exports.insertCss = insertCss;

},{}],38:[function(_dereq_,module,exports){
/*! npm.im/intervalometer */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function intervalometer(cb, request, cancel, requestParameter) {
	var requestId;
	var previousLoopTime;
	function loop(now) {
		// must be requested before cb() because that might call .stop()
		requestId = request(loop, requestParameter);

		// called with "ms since last call". 0 on start()
		cb(now - (previousLoopTime || now));

		previousLoopTime = now;
	}
	return {
		start: function start() {
			if (!requestId) { // prevent double starts
				loop(0);
			}
		},
		stop: function stop() {
			cancel(requestId);
			requestId = null;
			previousLoopTime = 0;
		}
	};
}

function frameIntervalometer(cb) {
	return intervalometer(cb, requestAnimationFrame, cancelAnimationFrame);
}

function timerIntervalometer(cb, delay) {
	return intervalometer(cb, setTimeout, clearTimeout, delay);
}

exports.intervalometer = intervalometer;
exports.frameIntervalometer = frameIntervalometer;
exports.timerIntervalometer = timerIntervalometer;
},{}],39:[function(_dereq_,module,exports){
/*! npm.im/iphone-inline-video 2.2.2 */
'use strict';

var intervalometer = _dereq_('intervalometer');

function preventEvent(element, eventName, test) {
	function handler(e) {
		if (!test || test(element, eventName)) {
			e.stopImmediatePropagation();
			// // console.log(eventName, 'prevented on', element);
		}
	}
	element.addEventListener(eventName, handler);

	// Return handler to allow to disable the prevention. Usage:
	// const preventionHandler = preventEvent(el, 'click');
	// el.removeEventHandler('click', preventionHandler);
	return handler;
}

function proxyProperty(object, propertyName, sourceObject, copyFirst) {
	function get() {
		return sourceObject[propertyName];
	}
	function set(value) {
		sourceObject[propertyName] = value;
	}

	if (copyFirst) {
		set(object[propertyName]);
	}

	Object.defineProperty(object, propertyName, {get: get, set: set});
}

function proxyEvent(object, eventName, sourceObject) {
	sourceObject.addEventListener(eventName, function () { return object.dispatchEvent(new Event(eventName)); });
}

function dispatchEventAsync(element, type) {
	Promise.resolve().then(function () {
		element.dispatchEvent(new Event(type));
	});
}

var iOS8or9 = typeof document === 'object' && 'object-fit' in document.head.style && !matchMedia('(-webkit-video-playable-inline)').matches;

var IIV = 'bfred-it:iphone-inline-video';
var IIVEvent = 'bfred-it:iphone-inline-video:event';
var IIVPlay = 'bfred-it:iphone-inline-video:nativeplay';
var IIVPause = 'bfred-it:iphone-inline-video:nativepause';

/**
 * UTILS
 */

function getAudioFromVideo(video) {
	var audio = new Audio();
	proxyEvent(video, 'play', audio);
	proxyEvent(video, 'playing', audio);
	proxyEvent(video, 'pause', audio);
	audio.crossOrigin = video.crossOrigin;

	// 'data:' causes audio.networkState > 0
	// which then allows to keep <audio> in a resumable playing state
	// i.e. once you set a real src it will keep playing if it was if .play() was called
	audio.src = video.src || video.currentSrc || 'data:';

	// // if (audio.src === 'data:') {
	//   TODO: wait for video to be selected
	// // }
	return audio;
}

var lastRequests = [];
var requestIndex = 0;
var lastTimeupdateEvent;

function setTime(video, time, rememberOnly) {
	// Allow one timeupdate event every 200+ ms
	if ((lastTimeupdateEvent || 0) + 200 < Date.now()) {
		video[IIVEvent] = true;
		lastTimeupdateEvent = Date.now();
	}
	if (!rememberOnly) {
		video.currentTime = time;
	}
	lastRequests[++requestIndex % 3] = time * 100 | 0 / 100;
}

function isPlayerEnded(player) {
	return player.driver.currentTime >= player.video.duration;
}

function update(timeDiff) {
	var player = this;
	// // console.log('update', player.video.readyState, player.video.networkState, player.driver.readyState, player.driver.networkState, player.driver.paused);
	if (player.video.readyState >= player.video.HAVE_FUTURE_DATA) {
		if (!player.hasAudio) {
			player.driver.currentTime = player.video.currentTime + ((timeDiff * player.video.playbackRate) / 1000);
			if (player.video.loop && isPlayerEnded(player)) {
				player.driver.currentTime = 0;
			}
		}
		setTime(player.video, player.driver.currentTime);
	} else if (player.video.networkState === player.video.NETWORK_IDLE && player.video.buffered.length === 0) {
		// This should happen when the source is available but:
		// - it's potentially playing (.paused === false)
		// - it's not ready to play
		// - it's not loading
		// If it hasAudio, that will be loaded in the 'emptied' handler below
		player.video.load();
		// // console.log('Will load');
	}

	// // console.assert(player.video.currentTime === player.driver.currentTime, 'Video not updating!');

	if (player.video.ended) {
		delete player.video[IIVEvent]; // Allow timeupdate event
		player.video.pause(true);
	}
}

/**
 * METHODS
 */

function play() {
	// // console.log('play');
	var video = this;
	var player = video[IIV];

	// If it's fullscreen, use the native player
	if (video.webkitDisplayingFullscreen) {
		video[IIVPlay]();
		return;
	}

	if (player.driver.src !== 'data:' && player.driver.src !== video.src) {
		// // console.log('src changed on play', video.src);
		setTime(video, 0, true);
		player.driver.src = video.src;
	}

	if (!video.paused) {
		return;
	}
	player.paused = false;

	if (video.buffered.length === 0) {
		// .load() causes the emptied event
		// the alternative is .play()+.pause() but that triggers play/pause events, even worse
		// possibly the alternative is preventing this event only once
		video.load();
	}

	player.driver.play();
	player.updater.start();

	if (!player.hasAudio) {
		dispatchEventAsync(video, 'play');
		if (player.video.readyState >= player.video.HAVE_ENOUGH_DATA) {
			// // console.log('onplay');
			dispatchEventAsync(video, 'playing');
		}
	}
}
function pause(forceEvents) {
	// // console.log('pause');
	var video = this;
	var player = video[IIV];

	player.driver.pause();
	player.updater.stop();

	// If it's fullscreen, the developer the native player.pause()
	// This is at the end of pause() because it also
	// needs to make sure that the simulation is paused
	if (video.webkitDisplayingFullscreen) {
		video[IIVPause]();
	}

	if (player.paused && !forceEvents) {
		return;
	}

	player.paused = true;
	if (!player.hasAudio) {
		dispatchEventAsync(video, 'pause');
	}

	// Handle the 'ended' event only if it's not fullscreen
	if (video.ended && !video.webkitDisplayingFullscreen) {
		video[IIVEvent] = true;
		dispatchEventAsync(video, 'ended');
	}
}

/**
 * SETUP
 */

function addPlayer(video, hasAudio) {
	var player = {};
	video[IIV] = player;
	player.paused = true; // Track whether 'pause' events have been fired
	player.hasAudio = hasAudio;
	player.video = video;
	player.updater = intervalometer.frameIntervalometer(update.bind(player));

	if (hasAudio) {
		player.driver = getAudioFromVideo(video);
	} else {
		video.addEventListener('canplay', function () {
			if (!video.paused) {
				// // console.log('oncanplay');
				dispatchEventAsync(video, 'playing');
			}
		});
		player.driver = {
			src: video.src || video.currentSrc || 'data:',
			muted: true,
			paused: true,
			pause: function () {
				player.driver.paused = true;
			},
			play: function () {
				player.driver.paused = false;
				// Media automatically goes to 0 if .play() is called when it's done
				if (isPlayerEnded(player)) {
					setTime(video, 0);
				}
			},
			get ended() {
				return isPlayerEnded(player);
			}
		};
	}

	// .load() causes the emptied event
	video.addEventListener('emptied', function () {
		// // console.log('driver src is', player.driver.src);
		var wasEmpty = !player.driver.src || player.driver.src === 'data:';
		if (player.driver.src && player.driver.src !== video.src) {
			// // console.log('src changed to', video.src);
			setTime(video, 0, true);
			player.driver.src = video.src;
			// Playing videos will only keep playing if no src was present when .play()’ed
			if (wasEmpty || (!hasAudio && video.autoplay)) {
				player.driver.play();
			} else {
				player.updater.stop();
			}
		}
	}, false);

	// Stop programmatic player when OS takes over
	video.addEventListener('webkitbeginfullscreen', function () {
		if (!video.paused) {
			// Make sure that the <audio> and the syncer/updater are stopped
			video.pause();

			// Play video natively
			video[IIVPlay]();
		} else if (hasAudio && player.driver.buffered.length === 0) {
			// If the first play is native,
			// the <audio> needs to be buffered manually
			// so when the fullscreen ends, it can be set to the same current time
			player.driver.load();
		}
	});
	if (hasAudio) {
		video.addEventListener('webkitendfullscreen', function () {
			// Sync audio to new video position
			player.driver.currentTime = video.currentTime;
			// // console.assert(player.driver.currentTime === video.currentTime, 'Audio not synced');
		});

		// Allow seeking
		video.addEventListener('seeking', function () {
			if (lastRequests.indexOf(video.currentTime * 100 | 0 / 100) < 0) {
				// // console.log('User-requested seeking');
				player.driver.currentTime = video.currentTime;
			}
		});
	}
}

function preventWithPropOrFullscreen(el) {
	var isAllowed = el[IIVEvent];
	delete el[IIVEvent];
	return !el.webkitDisplayingFullscreen && !isAllowed;
}

function overloadAPI(video) {
	var player = video[IIV];
	video[IIVPlay] = video.play;
	video[IIVPause] = video.pause;
	video.play = play;
	video.pause = pause;
	proxyProperty(video, 'paused', player.driver);
	proxyProperty(video, 'muted', player.driver, true);
	proxyProperty(video, 'playbackRate', player.driver, true);
	proxyProperty(video, 'ended', player.driver);
	proxyProperty(video, 'loop', player.driver, true);

	// IIV works by seeking 60 times per second.
	// These events are now useless.
	preventEvent(video, 'seeking', function (el) { return !el.webkitDisplayingFullscreen; });
	preventEvent(video, 'seeked', function (el) { return !el.webkitDisplayingFullscreen; });

	// Limit timeupdate events
	preventEvent(video, 'timeupdate', preventWithPropOrFullscreen);

	// Prevent occasional native ended events
	preventEvent(video, 'ended', preventWithPropOrFullscreen);
}

function enableInlineVideo(video, opts) {
	if ( opts === void 0 ) opts = {};

	// Stop if already enabled
	if (video[IIV]) {
		return;
	}

	// Allow the user to skip detection
	if (!opts.everywhere) {
		// Only iOS8 and 9 are supported
		if (!iOS8or9) {
			return;
		}

		// Stop if it's not an allowed device
		if (!(opts.iPad || opts.ipad ? /iPhone|iPod|iPad/ : /iPhone|iPod/).test(navigator.userAgent)) {
			return;
		}
	}

	// Try to pause
	video.pause();

	// Prevent autoplay.
	// An non-started autoplaying video can't be .pause()'d
	var willAutoplay = video.autoplay;
	video.autoplay = false;

	addPlayer(video, !video.muted);
	overloadAPI(video);
	video.classList.add('IIV');

	// Autoplay
	if (video.muted && willAutoplay) {
		video.play();
		video.addEventListener('playing', function restoreAutoplay() {
			video.autoplay = true;
			video.removeEventListener('playing', restoreAutoplay);
		});
	}

	if (!/iPhone|iPod|iPad/.test(navigator.platform)) {
		console.warn('iphone-inline-video is not guaranteed to work in emulated environments');
	}
}

module.exports = enableInlineVideo;

},{"intervalometer":38}],40:[function(_dereq_,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],41:[function(_dereq_,module,exports){
'use strict';
var numberIsNan = _dereq_('number-is-nan');

module.exports = Number.isFinite || function (val) {
	return !(typeof val !== 'number' || numberIsNan(val) || val === Infinity || val === -Infinity);
};

},{"number-is-nan":47}],42:[function(_dereq_,module,exports){
module.exports = isPowerOfTwo

function isPowerOfTwo(n) {
  return n !== 0 && (n & (n - 1)) === 0
}
},{}],43:[function(_dereq_,module,exports){
module.exports      = isTypedArray
isTypedArray.strict = isStrictTypedArray
isTypedArray.loose  = isLooseTypedArray

var toString = Object.prototype.toString
var names = {
    '[object Int8Array]': true
  , '[object Int16Array]': true
  , '[object Int32Array]': true
  , '[object Uint8Array]': true
  , '[object Uint8ClampedArray]': true
  , '[object Uint16Array]': true
  , '[object Uint32Array]': true
  , '[object Float32Array]': true
  , '[object Float64Array]': true
}

function isTypedArray(arr) {
  return (
       isStrictTypedArray(arr)
    || isLooseTypedArray(arr)
  )
}

function isStrictTypedArray(arr) {
  return (
       arr instanceof Int8Array
    || arr instanceof Int16Array
    || arr instanceof Int32Array
    || arr instanceof Uint8Array
    || arr instanceof Uint8ClampedArray
    || arr instanceof Uint16Array
    || arr instanceof Uint32Array
    || arr instanceof Float32Array
    || arr instanceof Float64Array
  )
}

function isLooseTypedArray(arr) {
  return names[toString.call(arr)]
}

},{}],44:[function(_dereq_,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],45:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

"use strict";

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  if (!(obj instanceof Object && !Array.isArray(obj))) {
    throw new Error('keyMirror(...): Argument must be an object.');
  }
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{}],46:[function(_dereq_,module,exports){
'use strict';
var numberIsFinite = _dereq_('is-finite');

module.exports = Number.isInteger || function (x) {
	return numberIsFinite(x) && Math.floor(x) === x;
};

},{"is-finite":41}],47:[function(_dereq_,module,exports){
'use strict';
module.exports = Number.isNaN || function (x) {
	return x !== x;
};

},{}],48:[function(_dereq_,module,exports){
var wrappy = _dereq_('wrappy')
module.exports = wrappy(once)
module.exports.strict = wrappy(onceStrict)

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })

  Object.defineProperty(Function.prototype, 'onceStrict', {
    value: function () {
      return onceStrict(this)
    },
    configurable: true
  })
})

function once (fn) {
  var f = function () {
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  f.called = false
  return f
}

function onceStrict (fn) {
  var f = function () {
    if (f.called)
      throw new Error(f.onceError)
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  var name = fn.name || 'Function wrapped with `once`'
  f.onceError = name + " shouldn't be called more than once"
  f.called = false
  return f
}

},{"wrappy":84}],49:[function(_dereq_,module,exports){
(function (process){
// Generated by CoffeeScript 1.12.2
(function() {
  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - nodeLoadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    moduleLoadTime = getNanoSeconds();
    upTime = process.uptime() * 1e9;
    nodeLoadTime = moduleLoadTime - upTime;
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);



}).call(this,_dereq_('_process'))

},{"_process":50}],50:[function(_dereq_,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],51:[function(_dereq_,module,exports){
(function (global){
var now = _dereq_('performance-now')
  , root = typeof window === 'undefined' ? global : window
  , vendors = ['moz', 'webkit']
  , suffix = 'AnimationFrame'
  , raf = root['request' + suffix]
  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]

for(var i = 0; !raf && i < vendors.length; i++) {
  raf = root[vendors[i] + 'Request' + suffix]
  caf = root[vendors[i] + 'Cancel' + suffix]
      || root[vendors[i] + 'CancelRequest' + suffix]
}

// Some versions of FF have rAF but not cAF
if(!raf || !caf) {
  var last = 0
    , id = 0
    , queue = []
    , frameDuration = 1000 / 60

  raf = function(callback) {
    if(queue.length === 0) {
      var _now = now()
        , next = Math.max(0, frameDuration - (_now - last))
      last = next + _now
      setTimeout(function() {
        var cp = queue.slice(0)
        // Clear queue here to prevent
        // callbacks from appending listeners
        // to the current frame's queue
        queue.length = 0
        for(var i = 0; i < cp.length; i++) {
          if(!cp[i].cancelled) {
            try{
              cp[i].callback(last)
            } catch(e) {
              setTimeout(function() { throw e }, 0)
            }
          }
        }
      }, Math.round(next))
    }
    queue.push({
      handle: ++id,
      callback: callback,
      cancelled: false
    })
    return id
  }

  caf = function(handle) {
    for(var i = 0; i < queue.length; i++) {
      if(queue[i].handle === handle) {
        queue[i].cancelled = true
      }
    }
  }
}

module.exports = function(fn) {
  // Wrap in a new function to prevent
  // `cancel` potentially being assigned
  // to the native rAF function
  return raf.call(root, fn)
}
module.exports.cancel = function() {
  caf.apply(root, arguments)
}
module.exports.polyfill = function(object) {
  if (!object) {
    object = root;
  }
  object.requestAnimationFrame = raf
  object.cancelAnimationFrame = caf
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"performance-now":49}],52:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var pna = _dereq_('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = _dereq_('core-util-is');
util.inherits = _dereq_('inherits');
/*</replacement>*/

var Readable = _dereq_('./_stream_readable');
var Writable = _dereq_('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":54,"./_stream_writable":56,"core-util-is":14,"inherits":36,"process-nextick-args":60}],53:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = _dereq_('./_stream_transform');

/*<replacement>*/
var util = _dereq_('core-util-is');
util.inherits = _dereq_('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":55,"core-util-is":14,"inherits":36}],54:[function(_dereq_,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var pna = _dereq_('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = _dereq_('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = _dereq_('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = _dereq_('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = _dereq_('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = _dereq_('core-util-is');
util.inherits = _dereq_('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = _dereq_('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = _dereq_('./internal/streams/BufferList');
var destroyImpl = _dereq_('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || _dereq_('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = _dereq_('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || _dereq_('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = _dereq_('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./_stream_duplex":52,"./internal/streams/BufferList":57,"./internal/streams/destroy":58,"./internal/streams/stream":59,"_process":50,"core-util-is":14,"events":24,"inherits":36,"isarray":44,"process-nextick-args":60,"safe-buffer":66,"string_decoder/":61,"util":6}],55:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = _dereq_('./_stream_duplex');

/*<replacement>*/
var util = _dereq_('core-util-is');
util.inherits = _dereq_('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":52,"core-util-is":14,"inherits":36}],56:[function(_dereq_,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var pna = _dereq_('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = _dereq_('core-util-is');
util.inherits = _dereq_('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: _dereq_('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = _dereq_('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = _dereq_('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = _dereq_('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || _dereq_('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || _dereq_('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./_stream_duplex":52,"./internal/streams/destroy":58,"./internal/streams/stream":59,"_process":50,"core-util-is":14,"inherits":36,"process-nextick-args":60,"safe-buffer":66,"util-deprecate":77}],57:[function(_dereq_,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = _dereq_('safe-buffer').Buffer;
var util = _dereq_('util');

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}
},{"safe-buffer":66,"util":6}],58:[function(_dereq_,module,exports){
'use strict';

/*<replacement>*/

var pna = _dereq_('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":60}],59:[function(_dereq_,module,exports){
module.exports = _dereq_('events').EventEmitter;

},{"events":24}],60:[function(_dereq_,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


}).call(this,_dereq_('_process'))

},{"_process":50}],61:[function(_dereq_,module,exports){
'use strict';

var Buffer = _dereq_('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":66}],62:[function(_dereq_,module,exports){
exports = module.exports = _dereq_('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = _dereq_('./lib/_stream_writable.js');
exports.Duplex = _dereq_('./lib/_stream_duplex.js');
exports.Transform = _dereq_('./lib/_stream_transform.js');
exports.PassThrough = _dereq_('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":52,"./lib/_stream_passthrough.js":53,"./lib/_stream_readable.js":54,"./lib/_stream_transform.js":55,"./lib/_stream_writable.js":56}],63:[function(_dereq_,module,exports){
'use strict';

var readystate = module.exports = _dereq_('./readystate')
  , win = (new Function('return this'))()
  , complete = 'complete'
  , root = true
  , doc = win.document
  , html = doc.documentElement;

(function wrapper() {
  //
  // Bail out early if the document is already fully loaded. This means that this
  // script is loaded after the onload event.
  //
  if (complete === doc.readyState) {
    return readystate.change(complete);
  }

  //
  // Use feature detection to see what kind of browser environment we're dealing
  // with. Old versions of Internet Explorer do not support the addEventListener
  // interface so we can also safely assume that we need to fall back to polling.
  //
  var modern = !!doc.addEventListener
    , prefix = modern ? '' : 'on'
    , on = modern ? 'addEventListener' : 'attachEvent'
    , off = modern ? 'removeEventListener' : 'detachEvent';

  if (!modern && 'function' === typeof html.doScroll) {
    try { root = !win.frameElement; }
    catch (e) {}

    if (root) (function polling() {
      try { html.doScroll('left'); }
      catch (e) { return setTimeout(polling, 50); }

      readystate.change('interactive');
    }());
  }

  /**
   * Handle the various of event listener calls.
   *
   * @param {Event} evt Simple DOM event.
   * @api private
   */
  function change(evt) {
    evt = evt || win.event;

    if ('readystatechange' === evt.type) {
      readystate.change(doc.readyState);
      if (complete !== doc.readyState) return;
    }

    if ('load' === evt.type) readystate.change('complete');
    else readystate.change('interactive');

    //
    // House keeping, remove our assigned event listeners.
    //
    (evt.type === 'load' ? win : doc)[off](evt.type, change, false);
  }

  //
  // Assign a shit load of event listeners so we can update our internal state.
  //
  doc[on](prefix +'DOMContentLoaded', change, false);
  doc[on](prefix +'readystatechange', change, false);
  win[on](prefix +'load', change, false);
} ());


},{"./readystate":64}],64:[function(_dereq_,module,exports){
'use strict';

/**
 * Generate a new prototype method which will the given function once the
 * desired state has been reached. The returned function accepts 2 arguments:
 *
 * - fn: The assigned function which needs to be called.
 * - context: Context/this value of the function we need to execute.
 *
 * @param {String} state The state we need to operate upon.
 * @returns {Function}
 * @api private
 */
function generate(state) {
  return function proxy(fn, context) {
    var rs = this;

    if (rs.is(state)) {
      setTimeout(function () {
        fn.call(context, rs.readyState);
      }, 0);
    } else {
      if (!rs._events[state]) rs._events[state] = [];
      rs._events[state].push({ fn: fn, context: context });
    }

    return rs;
  };
}

/**
 * RS (readyState) instance.
 *
 * @constructor
 * @api public
 */
function RS() {
  this.readyState = RS.UNKNOWN;
  this._events = {};
}

/**
 * The environment can be in different states. The following states are
 * generated:
 *
 * - ALL:         The I don't really give a fuck state.
 * - UNKNOWN:     We got an unknown readyState we should start listening for events.
 * - LOADING:     Environment is currently loading.
 * - INTERACTIVE: Environment is ready for modification.
 * - COMPLETE:    All resources have been loaded.
 *
 * Please note that the order of the `states` string/array is of vital
 * importance as it's used in the readyState check.
 *
 * @type {Number}
 * @private
 */
RS.states = 'ALL,UNKNOWN,LOADING,INTERACTIVE,COMPLETE'.split(',');

for (var s = 0, state; s < RS.states.length; s++) {
  state = RS.states[s];

  RS[state] = RS.prototype[state] = s;
  RS.prototype[state.toLowerCase()] = generate(state);
}

/**
 * A change in the environment has been detected so we need to change our
 * readyState and call assigned event listeners and those of the previous
 * states.
 *
 * @param {Number} state The new readyState that we detected.
 * @returns {RS}
 * @api private
 */
RS.prototype.change = function change(state) {
  state = this.clean(state, true);

  var j
    , name
    , i = 0
    , listener
    , rs = this
    , previously = rs.readyState;

  if (previously >= state) return rs;

  rs.readyState = state;

  for (; i < RS.states.length; i++) {
    if (i > state) break;
    name = RS.states[i];

    if (name in rs._events) {
      for (j = 0; j < rs._events[name].length; j++) {
        listener = rs._events[name][j];
        listener.fn.call(listener.context || rs, previously);
      }

      delete rs._events[name];
    }
  }

  return rs;
};

/**
 * Check if we're currently in a given readyState.
 *
 * @param {String|Number} state The required readyState.
 * @returns {Boolean} Indication if this state has been reached.
 * @api public
 */
RS.prototype.is = function is(state) {
  return this.readyState >= this.clean(state, true);
};

/**
 * Transform a state to a number or toUpperCase.
 *
 * @param {Mixed} state State to transform.
 * @param {Boolean} nr Change to number.
 * @returns {Mixed}
 * @api public
 */
RS.prototype.clean = function transform(state, nr) {
  var type = typeof state;

  if (nr) return 'number' !== type
  ? +RS[state.toUpperCase()] || 0
  : state;

  return ('number' === type ? RS.states[state] : state).toUpperCase();
};

/**
 * Removes all event listeners. Useful when you want to unload readystatechange
 * completely so that it won't react to any events anymore. See
 * https://github.com/unshiftio/readystate/issues/8
 *
 * @returns {Function} rs so that calls can be chained.
 * @api public
 */
RS.prototype.removeAllListeners = function removeAllListeners() {
  this._events = {};
  return this;
}

//
// Expose the module.
//
module.exports = new RS();

},{}],65:[function(_dereq_,module,exports){
/**
 * request-frame - requestAnimationFrame & cancelAnimationFrame polyfill for optimal cross-browser development.
 * @version v1.5.3
 * @license MIT
 * Copyright Julien Etienne 2015 All Rights Reserved.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.requestFrame = factory());
}(this, (function () { 'use strict';

/**
 * @param  {String} type - request | cancel | native.
 * @return {Function} Timing function.
 */
function requestFrame(type) {
    // The only vendor prefixes required.
    var vendors = ['moz', 'webkit'];

    // Disassembled timing function abbreviations.
    var aF = 'AnimationFrame';
    var rqAF = 'Request' + aF;

    // Checks for firefox 4 - 10 function pair mismatch.
    var mozRAF = window.mozRequestAnimationFrame;
    var mozCAF = window.mozCancelAnimationFrame;
    var hasMozMismatch = mozRAF && !mozCAF;

    // Final assigned functions.
    var assignedRequestAnimationFrame;
    var assignedCancelAnimationFrame;

    // Initial time of the timing lapse.
    var previousTime = 0;

    var requestFrameMain;

    // Date.now polyfill, mainly for legacy IE versions.
    if (!Date.now) {
        Date.now = function () {
            return new Date().getTime();
        };
    }

    /**
     * hasIOS6RequestAnimationFrameBug.
     * @See {@Link https://gist.github.com/julienetie/86ac394ec41f1271ff0a}
     * - for Commentary.
     * @Copyright 2015 - Julien Etienne. 
     * @License: MIT.
     */
    function hasIOS6RequestAnimationFrameBug() {
        var webkitRAF = window.webkitRequestAnimationFrame;
        var rAF = window.requestAnimationFrame;

        // CSS/ Device with max for iOS6 Devices.
        var hasMobileDeviceWidth = screen.width <= 768 ? true : false;

        // Only supports webkit prefixed requestAnimtionFrane.
        var requiresWebkitprefix = !(webkitRAF && rAF);

        // iOS6 webkit browsers don't support performance now.
        var hasNoNavigationTiming = window.performance ? false : true;

        var iOS6Notice = 'setTimeout is being used as a substitiue for \n            requestAnimationFrame due to a bug within iOS 6 builds';

        var hasIOS6Bug = requiresWebkitprefix && hasMobileDeviceWidth && hasNoNavigationTiming;

        var bugCheckresults = function bugCheckresults(timingFnA, timingFnB, notice) {
            if (timingFnA || timingFnB) {
                console.warn(notice);
                return true;
            } else {
                return false;
            }
        };

        var displayResults = function displayResults(hasBug, hasBugNotice, webkitFn, nativeFn) {
            if (hasBug) {
                return bugCheckresults(webkitFn, nativeFn, hasBugNotice);
            } else {
                return false;
            }
        };

        return displayResults(hasIOS6Bug, iOS6Notice, webkitRAF, rAF);
    }

    /**
     * Native clearTimeout function.
     * @return {Function}
     */
    function clearTimeoutWithId(id) {
        clearTimeout(id);
    }

    /**
     * Based on a polyfill by Erik, introduced by Paul Irish & 
     * further improved by Darius Bacon.
     * @see  {@link http://www.paulirish.com/2011/
     * requestanimationframe-for-smart-animating}
     * @see  {@link https://github.com/darius/requestAnimationFrame/blob/
     * master/requestAnimationFrame.js}
     * @callback {Number} Timestamp.
     * @return {Function} setTimeout Function.
     */
    function setTimeoutWithTimestamp(callback) {
        var immediateTime = Date.now();
        var lapsedTime = Math.max(previousTime + 16, immediateTime);
        return setTimeout(function () {
            callback(previousTime = lapsedTime);
        }, lapsedTime - immediateTime);
    }

    /**
     * Queries the native function, prefixed function 
     * or use the setTimeoutWithTimestamp function.
     * @return {Function}
     */
    function queryRequestAnimationFrame() {
        if (Array.prototype.filter) {
            assignedRequestAnimationFrame = window['request' + aF] || window[vendors.filter(function (vendor) {
                if (window[vendor + rqAF] !== undefined) return vendor;
            }) + rqAF] || setTimeoutWithTimestamp;
        } else {
            return setTimeoutWithTimestamp;
        }
        if (!hasIOS6RequestAnimationFrameBug()) {
            return assignedRequestAnimationFrame;
        } else {
            return setTimeoutWithTimestamp;
        }
    }

    /**
     * Queries the native function, prefixed function 
     * or use the clearTimeoutWithId function.
     * @return {Function}
     */
    function queryCancelAnimationFrame() {
        var cancellationNames = [];
        if (Array.prototype.map) {
            vendors.map(function (vendor) {
                return ['Cancel', 'CancelRequest'].map(function (cancellationNamePrefix) {
                    cancellationNames.push(vendor + cancellationNamePrefix + aF);
                });
            });
        } else {
            return clearTimeoutWithId;
        }

        /**
         * Checks for the prefixed cancelAnimationFrame implementation.
         * @param  {Array} prefixedNames - An array of the prefixed names. 
         * @param  {Number} i - Iteration start point.
         * @return {Function} prefixed cancelAnimationFrame function.
         */
        function prefixedCancelAnimationFrame(prefixedNames, i) {
            var cancellationFunction = void 0;
            for (; i < prefixedNames.length; i++) {
                if (window[prefixedNames[i]]) {
                    cancellationFunction = window[prefixedNames[i]];
                    break;
                }
            }
            return cancellationFunction;
        }

        // Use truthly function
        assignedCancelAnimationFrame = window['cancel' + aF] || prefixedCancelAnimationFrame(cancellationNames, 0) || clearTimeoutWithId;

        // Check for iOS 6 bug
        if (!hasIOS6RequestAnimationFrameBug()) {
            return assignedCancelAnimationFrame;
        } else {
            return clearTimeoutWithId;
        }
    }

    function getRequestFn() {
        if (hasMozMismatch) {
            return setTimeoutWithTimestamp;
        } else {
            return queryRequestAnimationFrame();
        }
    }

    function getCancelFn() {
        return queryCancelAnimationFrame();
    }

    function setNativeFn() {
        if (hasMozMismatch) {
            window.requestAnimationFrame = setTimeoutWithTimestamp;
            window.cancelAnimationFrame = clearTimeoutWithId;
        } else {
            window.requestAnimationFrame = queryRequestAnimationFrame();
            window.cancelAnimationFrame = queryCancelAnimationFrame();
        }
    }

    /**
     * The type value "request" singles out firefox 4 - 10 and 
     * assigns the setTimeout function if plausible.
     */

    switch (type) {
        case 'request':
        case '':
            requestFrameMain = getRequestFn();
            break;

        case 'cancel':
            requestFrameMain = getCancelFn();
            break;

        case 'native':
            setNativeFn();
            break;
        default:
            throw new Error('RequestFrame parameter is not a type.');
    }
    return requestFrameMain;
}

return requestFrame;

})));

},{}],66:[function(_dereq_,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = _dereq_('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":8}],67:[function(_dereq_,module,exports){
var hasProp = Object.prototype.hasOwnProperty;

function throwsMessage(err) {
	return '[Throws: ' + (err ? err.message : '?') + ']';
}

function safeGetValueFromPropertyOnObject(obj, property) {
	if (hasProp.call(obj, property)) {
		try {
			return obj[property];
		}
		catch (err) {
			return throwsMessage(err);
		}
	}

	return obj[property];
}

function ensureProperties(obj) {
	var seen = [ ]; // store references to objects we have seen before

	function visit(obj) {
		if (obj === null || typeof obj !== 'object') {
			return obj;
		}

		if (seen.indexOf(obj) !== -1) {
			return '[Circular]';
		}
		seen.push(obj);

		if (typeof obj.toJSON === 'function') {
			try {
				var fResult = visit(obj.toJSON());
				seen.pop();
				return fResult;
			} catch(err) {
				return throwsMessage(err);
			}
		}

		if (Array.isArray(obj)) {
			var aResult = obj.map(visit);
			seen.pop();
			return aResult;
		}

		var result = Object.keys(obj).reduce(function(result, prop) {
			// prevent faulty defined getter properties
			result[prop] = visit(safeGetValueFromPropertyOnObject(obj, prop));
			return result;
		}, {});
		seen.pop();
		return result;
	};

	return visit(obj);
}

module.exports = function(data, replacer, space) {
	return JSON.stringify(ensureProperties(data), replacer, space);
}

module.exports.ensureProperties = ensureProperties;

},{}],68:[function(_dereq_,module,exports){
module.exports = shift

function shift (stream) {
  var rs = stream._readableState
  if (!rs) return null
  return rs.objectMode ? stream.read() : stream.read(getStateLength(rs))
}

function getStateLength (state) {
  if (state.buffer.length) {
    // Since node 6.3.0 state.buffer is a BufferList not an array
    if (state.buffer.head) {
      return state.buffer.head.data.length
    }

    return state.buffer[0].length
  }

  return state.length
}

},{}],69:[function(_dereq_,module,exports){
function Agent() {
  this._defaults = [];
}

["use", "on", "once", "set", "query", "type", "accept", "auth", "withCredentials", "sortQuery", "retry", "ok", "redirects",
 "timeout", "buffer", "serialize", "parse", "ca", "key", "pfx", "cert"].forEach(function(fn) {
  /** Default setting for all requests from this agent */
  Agent.prototype[fn] = function(/*varargs*/) {
    this._defaults.push({fn:fn, arguments:arguments});
    return this;
  }
});

Agent.prototype._setDefaults = function(req) {
    this._defaults.forEach(function(def) {
      req[def.fn].apply(req, def.arguments);
    });
};

module.exports = Agent;

},{}],70:[function(_dereq_,module,exports){
/**
 * Root reference for iframes.
 */

var root;
if (typeof window !== 'undefined') { // Browser window
  root = window;
} else if (typeof self !== 'undefined') { // Web Worker
  root = self;
} else { // Other environments
  console.warn("Using browser-only version of superagent in non-browser environment");
  root = this;
}

var Emitter = _dereq_('component-emitter');
var RequestBase = _dereq_('./request-base');
var isObject = _dereq_('./is-object');
var ResponseBase = _dereq_('./response-base');
var Agent = _dereq_('./agent-base');

/**
 * Noop.
 */

function noop(){};

/**
 * Expose `request`.
 */

var request = exports = module.exports = function(method, url) {
  // callback
  if ('function' == typeof url) {
    return new exports.Request('GET', method).end(url);
  }

  // url first
  if (1 == arguments.length) {
    return new exports.Request('GET', method);
  }

  return new exports.Request(method, url);
}

exports.Request = Request;

/**
 * Determine XHR.
 */

request.getXHR = function () {
  if (root.XMLHttpRequest
      && (!root.location || 'file:' != root.location.protocol
          || !root.ActiveXObject)) {
    return new XMLHttpRequest;
  } else {
    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
  }
  throw Error("Browser-only version of superagent could not find XHR");
};

/**
 * Removes leading and trailing whitespace, added to support IE.
 *
 * @param {String} s
 * @return {String}
 * @api private
 */

var trim = ''.trim
  ? function(s) { return s.trim(); }
  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

/**
 * Serialize the given `obj`.
 *
 * @param {Object} obj
 * @return {String}
 * @api private
 */

function serialize(obj) {
  if (!isObject(obj)) return obj;
  var pairs = [];
  for (var key in obj) {
    pushEncodedKeyValuePair(pairs, key, obj[key]);
  }
  return pairs.join('&');
}

/**
 * Helps 'serialize' with serializing arrays.
 * Mutates the pairs array.
 *
 * @param {Array} pairs
 * @param {String} key
 * @param {Mixed} val
 */

function pushEncodedKeyValuePair(pairs, key, val) {
  if (val != null) {
    if (Array.isArray(val)) {
      val.forEach(function(v) {
        pushEncodedKeyValuePair(pairs, key, v);
      });
    } else if (isObject(val)) {
      for(var subkey in val) {
        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);
      }
    } else {
      pairs.push(encodeURIComponent(key)
        + '=' + encodeURIComponent(val));
    }
  } else if (val === null) {
    pairs.push(encodeURIComponent(key));
  }
}

/**
 * Expose serialization method.
 */

request.serializeObject = serialize;

/**
  * Parse the given x-www-form-urlencoded `str`.
  *
  * @param {String} str
  * @return {Object}
  * @api private
  */

function parseString(str) {
  var obj = {};
  var pairs = str.split('&');
  var pair;
  var pos;

  for (var i = 0, len = pairs.length; i < len; ++i) {
    pair = pairs[i];
    pos = pair.indexOf('=');
    if (pos == -1) {
      obj[decodeURIComponent(pair)] = '';
    } else {
      obj[decodeURIComponent(pair.slice(0, pos))] =
        decodeURIComponent(pair.slice(pos + 1));
    }
  }

  return obj;
}

/**
 * Expose parser.
 */

request.parseString = parseString;

/**
 * Default MIME type map.
 *
 *     superagent.types.xml = 'application/xml';
 *
 */

request.types = {
  html: 'text/html',
  json: 'application/json',
  xml: 'text/xml',
  urlencoded: 'application/x-www-form-urlencoded',
  'form': 'application/x-www-form-urlencoded',
  'form-data': 'application/x-www-form-urlencoded'
};

/**
 * Default serialization map.
 *
 *     superagent.serialize['application/xml'] = function(obj){
 *       return 'generated xml here';
 *     };
 *
 */

request.serialize = {
  'application/x-www-form-urlencoded': serialize,
  'application/json': JSON.stringify
};

/**
  * Default parsers.
  *
  *     superagent.parse['application/xml'] = function(str){
  *       return { object parsed from str };
  *     };
  *
  */

request.parse = {
  'application/x-www-form-urlencoded': parseString,
  'application/json': JSON.parse
};

/**
 * Parse the given header `str` into
 * an object containing the mapped fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function parseHeader(str) {
  var lines = str.split(/\r?\n/);
  var fields = {};
  var index;
  var line;
  var field;
  var val;

  for (var i = 0, len = lines.length; i < len; ++i) {
    line = lines[i];
    index = line.indexOf(':');
    if (index === -1) { // could be empty line, just skip it
      continue;
    }
    field = line.slice(0, index).toLowerCase();
    val = trim(line.slice(index + 1));
    fields[field] = val;
  }

  return fields;
}

/**
 * Check if `mime` is json or has +json structured syntax suffix.
 *
 * @param {String} mime
 * @return {Boolean}
 * @api private
 */

function isJSON(mime) {
  // should match /json or +json
  // but not /json-seq
  return /[\/+]json($|[^-\w])/.test(mime);
}

/**
 * Initialize a new `Response` with the given `xhr`.
 *
 *  - set flags (.ok, .error, etc)
 *  - parse header
 *
 * Examples:
 *
 *  Aliasing `superagent` as `request` is nice:
 *
 *      request = superagent;
 *
 *  We can use the promise-like API, or pass callbacks:
 *
 *      request.get('/').end(function(res){});
 *      request.get('/', function(res){});
 *
 *  Sending data can be chained:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' })
 *        .end(function(res){});
 *
 *  Or passed to `.send()`:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' }, function(res){});
 *
 *  Or passed to `.post()`:
 *
 *      request
 *        .post('/user', { name: 'tj' })
 *        .end(function(res){});
 *
 * Or further reduced to a single call for simple cases:
 *
 *      request
 *        .post('/user', { name: 'tj' }, function(res){});
 *
 * @param {XMLHTTPRequest} xhr
 * @param {Object} options
 * @api private
 */

function Response(req) {
  this.req = req;
  this.xhr = this.req.xhr;
  // responseText is accessible only if responseType is '' or 'text' and on older browsers
  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
     ? this.xhr.responseText
     : null;
  this.statusText = this.req.xhr.statusText;
  var status = this.xhr.status;
  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
  if (status === 1223) {
    status = 204;
  }
  this._setStatusProperties(status);
  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
  // getResponseHeader still works. so we get content-type even if getting
  // other headers fails.
  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
  this._setHeaderProperties(this.header);

  if (null === this.text && req._responseType) {
    this.body = this.xhr.response;
  } else {
    this.body = this.req.method != 'HEAD'
      ? this._parseBody(this.text ? this.text : this.xhr.response)
      : null;
  }
}

ResponseBase(Response.prototype);

/**
 * Parse the given body `str`.
 *
 * Used for auto-parsing of bodies. Parsers
 * are defined on the `superagent.parse` object.
 *
 * @param {String} str
 * @return {Mixed}
 * @api private
 */

Response.prototype._parseBody = function(str) {
  var parse = request.parse[this.type];
  if (this.req._parser) {
    return this.req._parser(this, str);
  }
  if (!parse && isJSON(this.type)) {
    parse = request.parse['application/json'];
  }
  return parse && str && (str.length || str instanceof Object)
    ? parse(str)
    : null;
};

/**
 * Return an `Error` representative of this response.
 *
 * @return {Error}
 * @api public
 */

Response.prototype.toError = function(){
  var req = this.req;
  var method = req.method;
  var url = req.url;

  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
  var err = new Error(msg);
  err.status = this.status;
  err.method = method;
  err.url = url;

  return err;
};

/**
 * Expose `Response`.
 */

request.Response = Response;

/**
 * Initialize a new `Request` with the given `method` and `url`.
 *
 * @param {String} method
 * @param {String} url
 * @api public
 */

function Request(method, url) {
  var self = this;
  this._query = this._query || [];
  this.method = method;
  this.url = url;
  this.header = {}; // preserves header name case
  this._header = {}; // coerces header names to lowercase
  this.on('end', function(){
    var err = null;
    var res = null;

    try {
      res = new Response(self);
    } catch(e) {
      err = new Error('Parser is unable to parse the response');
      err.parse = true;
      err.original = e;
      // issue #675: return the raw response if the response parsing fails
      if (self.xhr) {
        // ie9 doesn't have 'response' property
        err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response;
        // issue #876: return the http status code if the response parsing fails
        err.status = self.xhr.status ? self.xhr.status : null;
        err.statusCode = err.status; // backwards-compat only
      } else {
        err.rawResponse = null;
        err.status = null;
      }

      return self.callback(err);
    }

    self.emit('response', res);

    var new_err;
    try {
      if (!self._isResponseOK(res)) {
        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
      }
    } catch(custom_err) {
      new_err = custom_err; // ok() callback can throw
    }

    // #1000 don't catch errors from the callback to avoid double calling it
    if (new_err) {
      new_err.original = err;
      new_err.response = res;
      new_err.status = res.status;
      self.callback(new_err, res);
    } else {
      self.callback(null, res);
    }
  });
}

/**
 * Mixin `Emitter` and `RequestBase`.
 */

Emitter(Request.prototype);
RequestBase(Request.prototype);

/**
 * Set Content-Type to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.xml = 'application/xml';
 *
 *      request.post('/')
 *        .type('xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('application/xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 * @param {String} type
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.type = function(type){
  this.set('Content-Type', request.types[type] || type);
  return this;
};

/**
 * Set Accept to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.json = 'application/json';
 *
 *      request.get('/agent')
 *        .accept('json')
 *        .end(callback);
 *
 *      request.get('/agent')
 *        .accept('application/json')
 *        .end(callback);
 *
 * @param {String} accept
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.accept = function(type){
  this.set('Accept', request.types[type] || type);
  return this;
};

/**
 * Set Authorization field value with `user` and `pass`.
 *
 * @param {String} user
 * @param {String} [pass] optional in case of using 'bearer' as type
 * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.auth = function(user, pass, options){
  if (1 === arguments.length) pass = '';
  if (typeof pass === 'object' && pass !== null) { // pass is optional and can be replaced with options
    options = pass;
    pass = '';
  }
  if (!options) {
    options = {
      type: 'function' === typeof btoa ? 'basic' : 'auto',
    };
  }

  var encoder = function(string) {
    if ('function' === typeof btoa) {
      return btoa(string);
    }
    throw new Error('Cannot use basic auth, btoa is not a function');
  };

  return this._auth(user, pass, options, encoder);
};

/**
 * Add query-string `val`.
 *
 * Examples:
 *
 *   request.get('/shoes')
 *     .query('size=10')
 *     .query({ color: 'blue' })
 *
 * @param {Object|String} val
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.query = function(val){
  if ('string' != typeof val) val = serialize(val);
  if (val) this._query.push(val);
  return this;
};

/**
 * Queue the given `file` as an attachment to the specified `field`,
 * with optional `options` (or filename).
 *
 * ``` js
 * request.post('/upload')
 *   .attach('content', new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
 *   .end(callback);
 * ```
 *
 * @param {String} field
 * @param {Blob|File} file
 * @param {String|Object} options
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.attach = function(field, file, options){
  if (file) {
    if (this._data) {
      throw Error("superagent can't mix .send() and .attach()");
    }

    this._getFormData().append(field, file, options || file.name);
  }
  return this;
};

Request.prototype._getFormData = function(){
  if (!this._formData) {
    this._formData = new root.FormData();
  }
  return this._formData;
};

/**
 * Invoke the callback with `err` and `res`
 * and handle arity check.
 *
 * @param {Error} err
 * @param {Response} res
 * @api private
 */

Request.prototype.callback = function(err, res){
  if (this._shouldRetry(err, res)) {
    return this._retry();
  }

  var fn = this._callback;
  this.clearTimeout();

  if (err) {
    if (this._maxRetries) err.retries = this._retries - 1;
    this.emit('error', err);
  }

  fn(err, res);
};

/**
 * Invoke callback with x-domain error.
 *
 * @api private
 */

Request.prototype.crossDomainError = function(){
  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
  err.crossDomain = true;

  err.status = this.status;
  err.method = this.method;
  err.url = this.url;

  this.callback(err);
};

// This only warns, because the request is still likely to work
Request.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function(){
  console.warn("This is not supported in browser version of superagent");
  return this;
};

// This throws, because it can't send/receive data as expected
Request.prototype.pipe = Request.prototype.write = function(){
  throw Error("Streaming is not supported in browser version of superagent");
};

/**
 * Check if `obj` is a host object,
 * we don't want to serialize these :)
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */
Request.prototype._isHost = function _isHost(obj) {
  // Native objects stringify to [object File], [object Blob], [object FormData], etc.
  return obj && 'object' === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';
}

/**
 * Initiate request, invoking callback `fn(res)`
 * with an instanceof `Response`.
 *
 * @param {Function} fn
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.end = function(fn){
  if (this._endCalled) {
    console.warn("Warning: .end() was called twice. This is not supported in superagent");
  }
  this._endCalled = true;

  // store callback
  this._callback = fn || noop;

  // querystring
  this._finalizeQueryString();

  return this._end();
};

Request.prototype._end = function() {
  var self = this;
  var xhr = (this.xhr = request.getXHR());
  var data = this._formData || this._data;

  this._setTimeouts();

  // state change
  xhr.onreadystatechange = function(){
    var readyState = xhr.readyState;
    if (readyState >= 2 && self._responseTimeoutTimer) {
      clearTimeout(self._responseTimeoutTimer);
    }
    if (4 != readyState) {
      return;
    }

    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
    // result in the error "Could not complete the operation due to error c00c023f"
    var status;
    try { status = xhr.status } catch(e) { status = 0; }

    if (!status) {
      if (self.timedout || self._aborted) return;
      return self.crossDomainError();
    }
    self.emit('end');
  };

  // progress
  var handleProgress = function(direction, e) {
    if (e.total > 0) {
      e.percent = e.loaded / e.total * 100;
    }
    e.direction = direction;
    self.emit('progress', e);
  };
  if (this.hasListeners('progress')) {
    try {
      xhr.onprogress = handleProgress.bind(null, 'download');
      if (xhr.upload) {
        xhr.upload.onprogress = handleProgress.bind(null, 'upload');
      }
    } catch(e) {
      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
      // Reported here:
      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
    }
  }

  // initiate request
  try {
    if (this.username && this.password) {
      xhr.open(this.method, this.url, true, this.username, this.password);
    } else {
      xhr.open(this.method, this.url, true);
    }
  } catch (err) {
    // see #1149
    return this.callback(err);
  }

  // CORS
  if (this._withCredentials) xhr.withCredentials = true;

  // body
  if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {
    // serialize stuff
    var contentType = this._header['content-type'];
    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];
    if (!serialize && isJSON(contentType)) {
      serialize = request.serialize['application/json'];
    }
    if (serialize) data = serialize(data);
  }

  // set header fields
  for (var field in this.header) {
    if (null == this.header[field]) continue;

    if (this.header.hasOwnProperty(field))
      xhr.setRequestHeader(field, this.header[field]);
  }

  if (this._responseType) {
    xhr.responseType = this._responseType;
  }

  // send stuff
  this.emit('request', this);

  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
  // We need null here if data is undefined
  xhr.send(typeof data !== 'undefined' ? data : null);
  return this;
};

request.agent = function() {
  return new Agent();
};

["GET", "POST", "OPTIONS", "PATCH", "PUT", "DELETE"].forEach(function(method) {
  Agent.prototype[method.toLowerCase()] = function(url, fn) {
    var req = new request.Request(method, url);
    this._setDefaults(req);
    if (fn) {
      req.end(fn);
    }
    return req;
  };
});

Agent.prototype.del = Agent.prototype['delete'];

/**
 * GET `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.get = function(url, data, fn) {
  var req = request('GET', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * HEAD `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.head = function(url, data, fn) {
  var req = request('HEAD', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * OPTIONS query to `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.options = function(url, data, fn) {
  var req = request('OPTIONS', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * DELETE `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

function del(url, data, fn) {
  var req = request('DELETE', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
}

request['del'] = del;
request['delete'] = del;

/**
 * PATCH `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.patch = function(url, data, fn) {
  var req = request('PATCH', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * POST `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.post = function(url, data, fn) {
  var req = request('POST', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * PUT `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.put = function(url, data, fn) {
  var req = request('PUT', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

},{"./agent-base":69,"./is-object":71,"./request-base":72,"./response-base":73,"component-emitter":12}],71:[function(_dereq_,module,exports){
'use strict';

/**
 * Check if `obj` is an object.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isObject(obj) {
  return null !== obj && 'object' === typeof obj;
}

module.exports = isObject;

},{}],72:[function(_dereq_,module,exports){
'use strict';

/**
 * Module of mixed-in functions shared between node and client code
 */
var isObject = _dereq_('./is-object');

/**
 * Expose `RequestBase`.
 */

module.exports = RequestBase;

/**
 * Initialize a new `RequestBase`.
 *
 * @api public
 */

function RequestBase(obj) {
  if (obj) return mixin(obj);
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in RequestBase.prototype) {
    obj[key] = RequestBase.prototype[key];
  }
  return obj;
}

/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.clearTimeout = function _clearTimeout(){
  clearTimeout(this._timer);
  clearTimeout(this._responseTimeoutTimer);
  delete this._timer;
  delete this._responseTimeoutTimer;
  return this;
};

/**
 * Override default response body parser
 *
 * This function will be called to convert incoming data into request.body
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.parse = function parse(fn){
  this._parser = fn;
  return this;
};

/**
 * Set format of binary response body.
 * In browser valid formats are 'blob' and 'arraybuffer',
 * which return Blob and ArrayBuffer, respectively.
 *
 * In Node all values result in Buffer.
 *
 * Examples:
 *
 *      req.get('/')
 *        .responseType('blob')
 *        .end(callback);
 *
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.responseType = function(val){
  this._responseType = val;
  return this;
};

/**
 * Override default request body serializer
 *
 * This function will be called to convert data set via .send or .attach into payload to send
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.serialize = function serialize(fn){
  this._serializer = fn;
  return this;
};

/**
 * Set timeouts.
 *
 * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.
 * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.
 *
 * Value of 0 or false means no timeout.
 *
 * @param {Number|Object} ms or {response, deadline}
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.timeout = function timeout(options){
  if (!options || 'object' !== typeof options) {
    this._timeout = options;
    this._responseTimeout = 0;
    return this;
  }

  for(var option in options) {
    switch(option) {
      case 'deadline':
        this._timeout = options.deadline;
        break;
      case 'response':
        this._responseTimeout = options.response;
        break;
      default:
        console.warn("Unknown timeout option", option);
    }
  }
  return this;
};

/**
 * Set number of retry attempts on error.
 *
 * Failed requests will be retried 'count' times if timeout or err.code >= 500.
 *
 * @param {Number} count
 * @param {Function} [fn]
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.retry = function retry(count, fn){
  // Default to 1 if no count passed or true
  if (arguments.length === 0 || count === true) count = 1;
  if (count <= 0) count = 0;
  this._maxRetries = count;
  this._retries = 0;
  this._retryCallback = fn;
  return this;
};

var ERROR_CODES = [
  'ECONNRESET',
  'ETIMEDOUT',
  'EADDRINFO',
  'ESOCKETTIMEDOUT'
];

/**
 * Determine if a request should be retried.
 * (Borrowed from segmentio/superagent-retry)
 *
 * @param {Error} err
 * @param {Response} [res]
 * @returns {Boolean}
 */
RequestBase.prototype._shouldRetry = function(err, res) {
  if (!this._maxRetries || this._retries++ >= this._maxRetries) {
    return false;
  }
  if (this._retryCallback) {
    try {
      var override = this._retryCallback(err, res);
      if (override === true) return true;
      if (override === false) return false;
      // undefined falls back to defaults
    } catch(e) {
      console.error(e);
    }
  }
  if (res && res.status && res.status >= 500 && res.status != 501) return true;
  if (err) {
    if (err.code && ~ERROR_CODES.indexOf(err.code)) return true;
    // Superagent timeout
    if (err.timeout && err.code == 'ECONNABORTED') return true;
    if (err.crossDomain) return true;
  }
  return false;
};

/**
 * Retry request
 *
 * @return {Request} for chaining
 * @api private
 */

RequestBase.prototype._retry = function() {

  this.clearTimeout();

  // node
  if (this.req) {
    this.req = null;
    this.req = this.request();
  }

  this._aborted = false;
  this.timedout = false;

  return this._end();
};

/**
 * Promise support
 *
 * @param {Function} resolve
 * @param {Function} [reject]
 * @return {Request}
 */

RequestBase.prototype.then = function then(resolve, reject) {
  if (!this._fullfilledPromise) {
    var self = this;
    if (this._endCalled) {
      console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
    }
    this._fullfilledPromise = new Promise(function(innerResolve, innerReject) {
      self.end(function(err, res) {
        if (err) innerReject(err);
        else innerResolve(res);
      });
    });
  }
  return this._fullfilledPromise.then(resolve, reject);
};

RequestBase.prototype['catch'] = function(cb) {
  return this.then(undefined, cb);
};

/**
 * Allow for extension
 */

RequestBase.prototype.use = function use(fn) {
  fn(this);
  return this;
};

RequestBase.prototype.ok = function(cb) {
  if ('function' !== typeof cb) throw Error("Callback required");
  this._okCallback = cb;
  return this;
};

RequestBase.prototype._isResponseOK = function(res) {
  if (!res) {
    return false;
  }

  if (this._okCallback) {
    return this._okCallback(res);
  }

  return res.status >= 200 && res.status < 300;
};

/**
 * Get request header `field`.
 * Case-insensitive.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

RequestBase.prototype.get = function(field){
  return this._header[field.toLowerCase()];
};

/**
 * Get case-insensitive header `field` value.
 * This is a deprecated internal API. Use `.get(field)` instead.
 *
 * (getHeader is no longer used internally by the superagent code base)
 *
 * @param {String} field
 * @return {String}
 * @api private
 * @deprecated
 */

RequestBase.prototype.getHeader = RequestBase.prototype.get;

/**
 * Set header `field` to `val`, or multiple fields with one object.
 * Case-insensitive.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.set = function(field, val){
  if (isObject(field)) {
    for (var key in field) {
      this.set(key, field[key]);
    }
    return this;
  }
  this._header[field.toLowerCase()] = val;
  this.header[field] = val;
  return this;
};

/**
 * Remove header `field`.
 * Case-insensitive.
 *
 * Example:
 *
 *      req.get('/')
 *        .unset('User-Agent')
 *        .end(callback);
 *
 * @param {String} field
 */
RequestBase.prototype.unset = function(field){
  delete this._header[field.toLowerCase()];
  delete this.header[field];
  return this;
};

/**
 * Write the field `name` and `val`, or multiple fields with one object
 * for "multipart/form-data" request bodies.
 *
 * ``` js
 * request.post('/upload')
 *   .field('foo', 'bar')
 *   .end(callback);
 *
 * request.post('/upload')
 *   .field({ foo: 'bar', baz: 'qux' })
 *   .end(callback);
 * ```
 *
 * @param {String|Object} name
 * @param {String|Blob|File|Buffer|fs.ReadStream} val
 * @return {Request} for chaining
 * @api public
 */
RequestBase.prototype.field = function(name, val) {
  // name should be either a string or an object.
  if (null === name || undefined === name) {
    throw new Error('.field(name, val) name can not be empty');
  }

  if (this._data) {
    console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObject(name)) {
    for (var key in name) {
      this.field(key, name[key]);
    }
    return this;
  }

  if (Array.isArray(val)) {
    for (var i in val) {
      this.field(name, val[i]);
    }
    return this;
  }

  // val should be defined now
  if (null === val || undefined === val) {
    throw new Error('.field(name, val) val can not be empty');
  }
  if ('boolean' === typeof val) {
    val = '' + val;
  }
  this._getFormData().append(name, val);
  return this;
};

/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */
RequestBase.prototype.abort = function(){
  if (this._aborted) {
    return this;
  }
  this._aborted = true;
  this.xhr && this.xhr.abort(); // browser
  this.req && this.req.abort(); // node
  this.clearTimeout();
  this.emit('abort');
  return this;
};

RequestBase.prototype._auth = function(user, pass, options, base64Encoder) {
  switch (options.type) {
    case 'basic':
      this.set('Authorization', 'Basic ' + base64Encoder(user + ':' + pass));
      break;

    case 'auto':
      this.username = user;
      this.password = pass;
      break;

    case 'bearer': // usage would be .auth(accessToken, { type: 'bearer' })
      this.set('Authorization', 'Bearer ' + user);
      break;
  }
  return this;
};

/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */

RequestBase.prototype.withCredentials = function(on) {
  // This is browser-only functionality. Node side is no-op.
  if (on == undefined) on = true;
  this._withCredentials = on;
  return this;
};

/**
 * Set the max redirects to `n`. Does noting in browser XHR implementation.
 *
 * @param {Number} n
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.redirects = function(n){
  this._maxRedirects = n;
  return this;
};

/**
 * Maximum size of buffered response body, in bytes. Counts uncompressed size.
 * Default 200MB.
 *
 * @param {Number} n
 * @return {Request} for chaining
 */
RequestBase.prototype.maxResponseSize = function(n){
  if ('number' !== typeof n) {
    throw TypeError("Invalid argument");
  }
  this._maxResponseSize = n;
  return this;
};

/**
 * Convert to a plain javascript object (not JSON string) of scalar properties.
 * Note as this method is designed to return a useful non-this value,
 * it cannot be chained.
 *
 * @return {Object} describing method, url, and data of this request
 * @api public
 */

RequestBase.prototype.toJSON = function() {
  return {
    method: this.method,
    url: this.url,
    data: this._data,
    headers: this._header,
  };
};

/**
 * Send `data` as the request body, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"}')
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
 *      request.post('/user')
 *        .send('name=tobi')
 *        .send('species=ferret')
 *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.send = function(data){
  var isObj = isObject(data);
  var type = this._header['content-type'];

  if (this._formData) {
    console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObj && !this._data) {
    if (Array.isArray(data)) {
      this._data = [];
    } else if (!this._isHost(data)) {
      this._data = {};
    }
  } else if (data && this._data && this._isHost(this._data)) {
    throw Error("Can't merge these send calls");
  }

  // merge
  if (isObj && isObject(this._data)) {
    for (var key in data) {
      this._data[key] = data[key];
    }
  } else if ('string' == typeof data) {
    // default to x-www-form-urlencoded
    if (!type) this.type('form');
    type = this._header['content-type'];
    if ('application/x-www-form-urlencoded' == type) {
      this._data = this._data
        ? this._data + '&' + data
        : data;
    } else {
      this._data = (this._data || '') + data;
    }
  } else {
    this._data = data;
  }

  if (!isObj || this._isHost(data)) {
    return this;
  }

  // default to json
  if (!type) this.type('json');
  return this;
};

/**
 * Sort `querystring` by the sort function
 *
 *
 * Examples:
 *
 *       // default order
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery()
 *         .end(callback)
 *
 *       // customized sort function
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery(function(a, b){
 *           return a.length - b.length;
 *         })
 *         .end(callback)
 *
 *
 * @param {Function} sort
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.sortQuery = function(sort) {
  // _sort default to true but otherwise can be a function or boolean
  this._sort = typeof sort === 'undefined' ? true : sort;
  return this;
};

/**
 * Compose querystring to append to req.url
 *
 * @api private
 */
RequestBase.prototype._finalizeQueryString = function(){
  var query = this._query.join('&');
  if (query) {
    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;
  }
  this._query.length = 0; // Makes the call idempotent

  if (this._sort) {
    var index = this.url.indexOf('?');
    if (index >= 0) {
      var queryArr = this.url.substring(index + 1).split('&');
      if ('function' === typeof this._sort) {
        queryArr.sort(this._sort);
      } else {
        queryArr.sort();
      }
      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');
    }
  }
};

// For backwards compat only
RequestBase.prototype._appendQueryString = function() {console.trace("Unsupported");}

/**
 * Invoke callback with timeout error.
 *
 * @api private
 */

RequestBase.prototype._timeoutError = function(reason, timeout, errno){
  if (this._aborted) {
    return;
  }
  var err = new Error(reason + timeout + 'ms exceeded');
  err.timeout = timeout;
  err.code = 'ECONNABORTED';
  err.errno = errno;
  this.timedout = true;
  this.abort();
  this.callback(err);
};

RequestBase.prototype._setTimeouts = function() {
  var self = this;

  // deadline
  if (this._timeout && !this._timer) {
    this._timer = setTimeout(function(){
      self._timeoutError('Timeout of ', self._timeout, 'ETIME');
    }, this._timeout);
  }
  // response timeout
  if (this._responseTimeout && !this._responseTimeoutTimer) {
    this._responseTimeoutTimer = setTimeout(function(){
      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');
    }, this._responseTimeout);
  }
};

},{"./is-object":71}],73:[function(_dereq_,module,exports){
'use strict';

/**
 * Module dependencies.
 */

var utils = _dereq_('./utils');

/**
 * Expose `ResponseBase`.
 */

module.exports = ResponseBase;

/**
 * Initialize a new `ResponseBase`.
 *
 * @api public
 */

function ResponseBase(obj) {
  if (obj) return mixin(obj);
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in ResponseBase.prototype) {
    obj[key] = ResponseBase.prototype[key];
  }
  return obj;
}

/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

ResponseBase.prototype.get = function(field) {
  return this.header[field.toLowerCase()];
};

/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */

ResponseBase.prototype._setHeaderProperties = function(header){
    // TODO: moar!
    // TODO: make this a util

    // content-type
    var ct = header['content-type'] || '';
    this.type = utils.type(ct);

    // params
    var params = utils.params(ct);
    for (var key in params) this[key] = params[key];

    this.links = {};

    // links
    try {
        if (header.link) {
            this.links = utils.parseLinks(header.link);
        }
    } catch (err) {
        // ignore
    }
};

/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */

ResponseBase.prototype._setStatusProperties = function(status){
    var type = status / 100 | 0;

    // status / class
    this.status = this.statusCode = status;
    this.statusType = type;

    // basics
    this.info = 1 == type;
    this.ok = 2 == type;
    this.redirect = 3 == type;
    this.clientError = 4 == type;
    this.serverError = 5 == type;
    this.error = (4 == type || 5 == type)
        ? this.toError()
        : false;

    // sugar
    this.created = 201 == status;
    this.accepted = 202 == status;
    this.noContent = 204 == status;
    this.badRequest = 400 == status;
    this.unauthorized = 401 == status;
    this.notAcceptable = 406 == status;
    this.forbidden = 403 == status;
    this.notFound = 404 == status;
    this.unprocessableEntity = 422 == status;
};

},{"./utils":74}],74:[function(_dereq_,module,exports){
'use strict';

/**
 * Return the mime type for the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

exports.type = function(str){
  return str.split(/ *; */).shift();
};

/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.params = function(str){
  return str.split(/ *; */).reduce(function(obj, str){
    var parts = str.split(/ *= */);
    var key = parts.shift();
    var val = parts.shift();

    if (key && val) obj[key] = val;
    return obj;
  }, {});
};

/**
 * Parse Link header fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.parseLinks = function(str){
  return str.split(/ *, */).reduce(function(obj, str){
    var parts = str.split(/ *; */);
    var url = parts[0].slice(1, -1);
    var rel = parts[1].split(/ *= */)[1].slice(1, -1);
    obj[rel] = url;
    return obj;
  }, {});
};

/**
 * Strip content related fields from `header`.
 *
 * @param {Object} header
 * @return {Object} header
 * @api private
 */

exports.cleanHeader = function(header, changesOrigin){
  delete header['content-type'];
  delete header['content-length'];
  delete header['transfer-encoding'];
  delete header['host'];
  // secuirty
  if (changesOrigin) {
    delete header['authorization'];
    delete header['cookie'];
  }
  return header;
};

},{}],75:[function(_dereq_,module,exports){
(function (Buffer){
/**
 * Convert a typed array to a Buffer without a copy
 *
 * Author:   Feross Aboukhadijeh <https://feross.org>
 * License:  MIT
 *
 * `npm install typedarray-to-buffer`
 */

var isTypedArray = _dereq_('is-typedarray').strict

module.exports = function typedarrayToBuffer (arr) {
  if (isTypedArray(arr)) {
    // To avoid a copy, use the typed array's underlying ArrayBuffer to back new Buffer
    var buf = Buffer.from(arr.buffer)
    if (arr.byteLength !== arr.buffer.byteLength) {
      // Respect the "view", i.e. byteOffset and byteLength, without doing a copy
      buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength)
    }
    return buf
  } else {
    // Pass through all other types to `Buffer.from`
    return Buffer.from(arr)
  }
}

}).call(this,_dereq_("buffer").Buffer)

},{"buffer":8,"is-typedarray":43}],76:[function(_dereq_,module,exports){
/*!
 * UAParser.js v0.7.18
 * Lightweight JavaScript-based User-Agent string parser
 * https://github.com/faisalman/ua-parser-js
 *
 * Copyright © 2012-2016 Faisal Salman <fyzlman@gmail.com>
 * Dual licensed under GPLv2 or MIT
 */

(function (window, undefined) {

    'use strict';

    //////////////
    // Constants
    /////////////


    var LIBVERSION  = '0.7.18',
        EMPTY       = '',
        UNKNOWN     = '?',
        FUNC_TYPE   = 'function',
        UNDEF_TYPE  = 'undefined',
        OBJ_TYPE    = 'object',
        STR_TYPE    = 'string',
        MAJOR       = 'major', // deprecated
        MODEL       = 'model',
        NAME        = 'name',
        TYPE        = 'type',
        VENDOR      = 'vendor',
        VERSION     = 'version',
        ARCHITECTURE= 'architecture',
        CONSOLE     = 'console',
        MOBILE      = 'mobile',
        TABLET      = 'tablet',
        SMARTTV     = 'smarttv',
        WEARABLE    = 'wearable',
        EMBEDDED    = 'embedded';


    ///////////
    // Helper
    //////////


    var util = {
        extend : function (regexes, extensions) {
            var margedRegexes = {};
            for (var i in regexes) {
                if (extensions[i] && extensions[i].length % 2 === 0) {
                    margedRegexes[i] = extensions[i].concat(regexes[i]);
                } else {
                    margedRegexes[i] = regexes[i];
                }
            }
            return margedRegexes;
        },
        has : function (str1, str2) {
          if (typeof str1 === "string") {
            return str2.toLowerCase().indexOf(str1.toLowerCase()) !== -1;
          } else {
            return false;
          }
        },
        lowerize : function (str) {
            return str.toLowerCase();
        },
        major : function (version) {
            return typeof(version) === STR_TYPE ? version.replace(/[^\d\.]/g,'').split(".")[0] : undefined;
        },
        trim : function (str) {
          return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
        }
    };


    ///////////////
    // Map helper
    //////////////


    var mapper = {

        rgx : function (ua, arrays) {

            //var result = {},
            var i = 0, j, k, p, q, matches, match;//, args = arguments;

            /*// construct object barebones
            for (p = 0; p < args[1].length; p++) {
                q = args[1][p];
                result[typeof q === OBJ_TYPE ? q[0] : q] = undefined;
            }*/

            // loop through all regexes maps
            while (i < arrays.length && !matches) {

                var regex = arrays[i],       // even sequence (0,2,4,..)
                    props = arrays[i + 1];   // odd sequence (1,3,5,..)
                j = k = 0;

                // try matching uastring with regexes
                while (j < regex.length && !matches) {

                    matches = regex[j++].exec(ua);

                    if (!!matches) {
                        for (p = 0; p < props.length; p++) {
                            match = matches[++k];
                            q = props[p];
                            // check if given property is actually array
                            if (typeof q === OBJ_TYPE && q.length > 0) {
                                if (q.length == 2) {
                                    if (typeof q[1] == FUNC_TYPE) {
                                        // assign modified match
                                        this[q[0]] = q[1].call(this, match);
                                    } else {
                                        // assign given value, ignore regex match
                                        this[q[0]] = q[1];
                                    }
                                } else if (q.length == 3) {
                                    // check whether function or regex
                                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                                        // call function (usually string mapper)
                                        this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
                                    } else {
                                        // sanitize match using given regex
                                        this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
                                    }
                                } else if (q.length == 4) {
                                        this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;
                                }
                            } else {
                                this[q] = match ? match : undefined;
                            }
                        }
                    }
                }
                i += 2;
            }
            // console.log(this);
            //return this;
        },

        str : function (str, map) {

            for (var i in map) {
                // check if array
                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
                    for (var j = 0; j < map[i].length; j++) {
                        if (util.has(map[i][j], str)) {
                            return (i === UNKNOWN) ? undefined : i;
                        }
                    }
                } else if (util.has(map[i], str)) {
                    return (i === UNKNOWN) ? undefined : i;
                }
            }
            return str;
        }
    };


    ///////////////
    // String map
    //////////////


    var maps = {

        browser : {
            oldsafari : {
                version : {
                    '1.0'   : '/8',
                    '1.2'   : '/1',
                    '1.3'   : '/3',
                    '2.0'   : '/412',
                    '2.0.2' : '/416',
                    '2.0.3' : '/417',
                    '2.0.4' : '/419',
                    '?'     : '/'
                }
            }
        },

        device : {
            amazon : {
                model : {
                    'Fire Phone' : ['SD', 'KF']
                }
            },
            sprint : {
                model : {
                    'Evo Shift 4G' : '7373KT'
                },
                vendor : {
                    'HTC'       : 'APA',
                    'Sprint'    : 'Sprint'
                }
            }
        },

        os : {
            windows : {
                version : {
                    'ME'        : '4.90',
                    'NT 3.11'   : 'NT3.51',
                    'NT 4.0'    : 'NT4.0',
                    '2000'      : 'NT 5.0',
                    'XP'        : ['NT 5.1', 'NT 5.2'],
                    'Vista'     : 'NT 6.0',
                    '7'         : 'NT 6.1',
                    '8'         : 'NT 6.2',
                    '8.1'       : 'NT 6.3',
                    '10'        : ['NT 6.4', 'NT 10.0'],
                    'RT'        : 'ARM'
                }
            }
        }
    };


    //////////////
    // Regex map
    /////////////


    var regexes = {

        browser : [[

            // Presto based
            /(opera\smini)\/([\w\.-]+)/i,                                       // Opera Mini
            /(opera\s[mobiletab]+).+version\/([\w\.-]+)/i,                      // Opera Mobi/Tablet
            /(opera).+version\/([\w\.]+)/i,                                     // Opera > 9.80
            /(opera)[\/\s]+([\w\.]+)/i                                          // Opera < 9.80
            ], [NAME, VERSION], [

            /(opios)[\/\s]+([\w\.]+)/i                                          // Opera mini on iphone >= 8.0
            ], [[NAME, 'Opera Mini'], VERSION], [

            /\s(opr)\/([\w\.]+)/i                                               // Opera Webkit
            ], [[NAME, 'Opera'], VERSION], [

            // Mixed
            /(kindle)\/([\w\.]+)/i,                                             // Kindle
            /(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]*)/i,
                                                                                // Lunascape/Maxthon/Netfront/Jasmine/Blazer

            // Trident based
            /(avant\s|iemobile|slim|baidu)(?:browser)?[\/\s]?([\w\.]*)/i,
                                                                                // Avant/IEMobile/SlimBrowser/Baidu
            /(?:ms|\()(ie)\s([\w\.]+)/i,                                        // Internet Explorer

            // Webkit/KHTML based
            /(rekonq)\/([\w\.]*)/i,                                             // Rekonq
            /(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark)\/([\w\.-]+)/i
                                                                                // Chromium/Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser
            ], [NAME, VERSION], [

            /(trident).+rv[:\s]([\w\.]+).+like\sgecko/i                         // IE11
            ], [[NAME, 'IE'], VERSION], [

            /(edge|edgios|edgea)\/((\d+)?[\w\.]+)/i                             // Microsoft Edge
            ], [[NAME, 'Edge'], VERSION], [

            /(yabrowser)\/([\w\.]+)/i                                           // Yandex
            ], [[NAME, 'Yandex'], VERSION], [

            /(puffin)\/([\w\.]+)/i                                              // Puffin
            ], [[NAME, 'Puffin'], VERSION], [

            /((?:[\s\/])uc?\s?browser|(?:juc.+)ucweb)[\/\s]?([\w\.]+)/i
                                                                                // UCBrowser
            ], [[NAME, 'UCBrowser'], VERSION], [

            /(comodo_dragon)\/([\w\.]+)/i                                       // Comodo Dragon
            ], [[NAME, /_/g, ' '], VERSION], [

            /(micromessenger)\/([\w\.]+)/i                                      // WeChat
            ], [[NAME, 'WeChat'], VERSION], [

            /(qqbrowserlite)\/([\w\.]+)/i                                       // QQBrowserLite
            ], [NAME, VERSION], [

            /(QQ)\/([\d\.]+)/i                                                  // QQ, aka ShouQ
            ], [NAME, VERSION], [

            /m?(qqbrowser)[\/\s]?([\w\.]+)/i                                    // QQBrowser
            ], [NAME, VERSION], [

            /(BIDUBrowser)[\/\s]?([\w\.]+)/i                                    // Baidu Browser
            ], [NAME, VERSION], [

            /(2345Explorer)[\/\s]?([\w\.]+)/i                                   // 2345 Browser
            ], [NAME, VERSION], [

            /(MetaSr)[\/\s]?([\w\.]+)/i                                         // SouGouBrowser
            ], [NAME], [

            /(LBBROWSER)/i                                      // LieBao Browser
            ], [NAME], [

            /xiaomi\/miuibrowser\/([\w\.]+)/i                                   // MIUI Browser
            ], [VERSION, [NAME, 'MIUI Browser']], [

            /;fbav\/([\w\.]+);/i                                                // Facebook App for iOS & Android
            ], [VERSION, [NAME, 'Facebook']], [

            /headlesschrome(?:\/([\w\.]+)|\s)/i                                 // Chrome Headless
            ], [VERSION, [NAME, 'Chrome Headless']], [

            /\swv\).+(chrome)\/([\w\.]+)/i                                      // Chrome WebView
            ], [[NAME, /(.+)/, '$1 WebView'], VERSION], [

            /((?:oculus|samsung)browser)\/([\w\.]+)/i
            ], [[NAME, /(.+(?:g|us))(.+)/, '$1 $2'], VERSION], [                // Oculus / Samsung Browser

            /android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)*/i        // Android Browser
            ], [VERSION, [NAME, 'Android Browser']], [

            /(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i
                                                                                // Chrome/OmniWeb/Arora/Tizen/Nokia
            ], [NAME, VERSION], [

            /(dolfin)\/([\w\.]+)/i                                              // Dolphin
            ], [[NAME, 'Dolphin'], VERSION], [

            /((?:android.+)crmo|crios)\/([\w\.]+)/i                             // Chrome for Android/iOS
            ], [[NAME, 'Chrome'], VERSION], [

            /(coast)\/([\w\.]+)/i                                               // Opera Coast
            ], [[NAME, 'Opera Coast'], VERSION], [

            /fxios\/([\w\.-]+)/i                                                // Firefox for iOS
            ], [VERSION, [NAME, 'Firefox']], [

            /version\/([\w\.]+).+?mobile\/\w+\s(safari)/i                       // Mobile Safari
            ], [VERSION, [NAME, 'Mobile Safari']], [

            /version\/([\w\.]+).+?(mobile\s?safari|safari)/i                    // Safari & Safari Mobile
            ], [VERSION, NAME], [

            /webkit.+?(gsa)\/([\w\.]+).+?(mobile\s?safari|safari)(\/[\w\.]+)/i  // Google Search Appliance on iOS
            ], [[NAME, 'GSA'], VERSION], [

            /webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i                     // Safari < 3.0
            ], [NAME, [VERSION, mapper.str, maps.browser.oldsafari.version]], [

            /(konqueror)\/([\w\.]+)/i,                                          // Konqueror
            /(webkit|khtml)\/([\w\.]+)/i
            ], [NAME, VERSION], [

            // Gecko based
            /(navigator|netscape)\/([\w\.-]+)/i                                 // Netscape
            ], [[NAME, 'Netscape'], VERSION], [
            /(swiftfox)/i,                                                      // Swiftfox
            /(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,
                                                                                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror
            /(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([\w\.-]+)$/i,

                                                                                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
            /(mozilla)\/([\w\.]+).+rv\:.+gecko\/\d+/i,                          // Mozilla

            // Other
            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i,
                                                                                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir
            /(links)\s\(([\w\.]+)/i,                                            // Links
            /(gobrowser)\/?([\w\.]*)/i,                                         // GoBrowser
            /(ice\s?browser)\/v?([\w\._]+)/i,                                   // ICE Browser
            /(mosaic)[\/\s]([\w\.]+)/i                                          // Mosaic
            ], [NAME, VERSION]

            /* /////////////////////
            // Media players BEGIN
            ////////////////////////

            , [

            /(apple(?:coremedia|))\/((\d+)[\w\._]+)/i,                          // Generic Apple CoreMedia
            /(coremedia) v((\d+)[\w\._]+)/i
            ], [NAME, VERSION], [

            /(aqualung|lyssna|bsplayer)\/((\d+)?[\w\.-]+)/i                     // Aqualung/Lyssna/BSPlayer
            ], [NAME, VERSION], [

            /(ares|ossproxy)\s((\d+)[\w\.-]+)/i                                 // Ares/OSSProxy
            ], [NAME, VERSION], [

            /(audacious|audimusicstream|amarok|bass|core|dalvik|gnomemplayer|music on console|nsplayer|psp-internetradioplayer|videos)\/((\d+)[\w\.-]+)/i,
                                                                                // Audacious/AudiMusicStream/Amarok/BASS/OpenCORE/Dalvik/GnomeMplayer/MoC
                                                                                // NSPlayer/PSP-InternetRadioPlayer/Videos
            /(clementine|music player daemon)\s((\d+)[\w\.-]+)/i,               // Clementine/MPD
            /(lg player|nexplayer)\s((\d+)[\d\.]+)/i,
            /player\/(nexplayer|lg player)\s((\d+)[\w\.-]+)/i                   // NexPlayer/LG Player
            ], [NAME, VERSION], [
            /(nexplayer)\s((\d+)[\w\.-]+)/i                                     // Nexplayer
            ], [NAME, VERSION], [

            /(flrp)\/((\d+)[\w\.-]+)/i                                          // Flip Player
            ], [[NAME, 'Flip Player'], VERSION], [

            /(fstream|nativehost|queryseekspider|ia-archiver|facebookexternalhit)/i
                                                                                // FStream/NativeHost/QuerySeekSpider/IA Archiver/facebookexternalhit
            ], [NAME], [

            /(gstreamer) souphttpsrc (?:\([^\)]+\)){0,1} libsoup\/((\d+)[\w\.-]+)/i
                                                                                // Gstreamer
            ], [NAME, VERSION], [

            /(htc streaming player)\s[\w_]+\s\/\s((\d+)[\d\.]+)/i,              // HTC Streaming Player
            /(java|python-urllib|python-requests|wget|libcurl)\/((\d+)[\w\.-_]+)/i,
                                                                                // Java/urllib/requests/wget/cURL
            /(lavf)((\d+)[\d\.]+)/i                                             // Lavf (FFMPEG)
            ], [NAME, VERSION], [

            /(htc_one_s)\/((\d+)[\d\.]+)/i                                      // HTC One S
            ], [[NAME, /_/g, ' '], VERSION], [

            /(mplayer)(?:\s|\/)(?:(?:sherpya-){0,1}svn)(?:-|\s)(r\d+(?:-\d+[\w\.-]+){0,1})/i
                                                                                // MPlayer SVN
            ], [NAME, VERSION], [

            /(mplayer)(?:\s|\/|[unkow-]+)((\d+)[\w\.-]+)/i                      // MPlayer
            ], [NAME, VERSION], [

            /(mplayer)/i,                                                       // MPlayer (no other info)
            /(yourmuze)/i,                                                      // YourMuze
            /(media player classic|nero showtime)/i                             // Media Player Classic/Nero ShowTime
            ], [NAME], [

            /(nero (?:home|scout))\/((\d+)[\w\.-]+)/i                           // Nero Home/Nero Scout
            ], [NAME, VERSION], [

            /(nokia\d+)\/((\d+)[\w\.-]+)/i                                      // Nokia
            ], [NAME, VERSION], [

            /\s(songbird)\/((\d+)[\w\.-]+)/i                                    // Songbird/Philips-Songbird
            ], [NAME, VERSION], [

            /(winamp)3 version ((\d+)[\w\.-]+)/i,                               // Winamp
            /(winamp)\s((\d+)[\w\.-]+)/i,
            /(winamp)mpeg\/((\d+)[\w\.-]+)/i
            ], [NAME, VERSION], [

            /(ocms-bot|tapinradio|tunein radio|unknown|winamp|inlight radio)/i  // OCMS-bot/tap in radio/tunein/unknown/winamp (no other info)
                                                                                // inlight radio
            ], [NAME], [

            /(quicktime|rma|radioapp|radioclientapplication|soundtap|totem|stagefright|streamium)\/((\d+)[\w\.-]+)/i
                                                                                // QuickTime/RealMedia/RadioApp/RadioClientApplication/
                                                                                // SoundTap/Totem/Stagefright/Streamium
            ], [NAME, VERSION], [

            /(smp)((\d+)[\d\.]+)/i                                              // SMP
            ], [NAME, VERSION], [

            /(vlc) media player - version ((\d+)[\w\.]+)/i,                     // VLC Videolan
            /(vlc)\/((\d+)[\w\.-]+)/i,
            /(xbmc|gvfs|xine|xmms|irapp)\/((\d+)[\w\.-]+)/i,                    // XBMC/gvfs/Xine/XMMS/irapp
            /(foobar2000)\/((\d+)[\d\.]+)/i,                                    // Foobar2000
            /(itunes)\/((\d+)[\d\.]+)/i                                         // iTunes
            ], [NAME, VERSION], [

            /(wmplayer)\/((\d+)[\w\.-]+)/i,                                     // Windows Media Player
            /(windows-media-player)\/((\d+)[\w\.-]+)/i
            ], [[NAME, /-/g, ' '], VERSION], [

            /windows\/((\d+)[\w\.-]+) upnp\/[\d\.]+ dlnadoc\/[\d\.]+ (home media server)/i
                                                                                // Windows Media Server
            ], [VERSION, [NAME, 'Windows']], [

            /(com\.riseupradioalarm)\/((\d+)[\d\.]*)/i                          // RiseUP Radio Alarm
            ], [NAME, VERSION], [

            /(rad.io)\s((\d+)[\d\.]+)/i,                                        // Rad.io
            /(radio.(?:de|at|fr))\s((\d+)[\d\.]+)/i
            ], [[NAME, 'rad.io'], VERSION]

            //////////////////////
            // Media players END
            ////////////////////*/

        ],

        cpu : [[

            /(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i                     // AMD64
            ], [[ARCHITECTURE, 'amd64']], [

            /(ia32(?=;))/i                                                      // IA32 (quicktime)
            ], [[ARCHITECTURE, util.lowerize]], [

            /((?:i[346]|x)86)[;\)]/i                                            // IA32
            ], [[ARCHITECTURE, 'ia32']], [

            // PocketPC mistakenly identified as PowerPC
            /windows\s(ce|mobile);\sppc;/i
            ], [[ARCHITECTURE, 'arm']], [

            /((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i                           // PowerPC
            ], [[ARCHITECTURE, /ower/, '', util.lowerize]], [

            /(sun4\w)[;\)]/i                                                    // SPARC
            ], [[ARCHITECTURE, 'sparc']], [

            /((?:avr32|ia64(?=;))|68k(?=\))|arm(?:64|(?=v\d+;))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?(?=;)|pa-risc)/i
                                                                                // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
            ], [[ARCHITECTURE, util.lowerize]]
        ],

        device : [[

            /\((ipad|playbook);[\w\s\);-]+(rim|apple)/i                         // iPad/PlayBook
            ], [MODEL, VENDOR, [TYPE, TABLET]], [

            /applecoremedia\/[\w\.]+ \((ipad)/                                  // iPad
            ], [MODEL, [VENDOR, 'Apple'], [TYPE, TABLET]], [

            /(apple\s{0,1}tv)/i                                                 // Apple TV
            ], [[MODEL, 'Apple TV'], [VENDOR, 'Apple']], [

            /(archos)\s(gamepad2?)/i,                                           // Archos
            /(hp).+(touchpad)/i,                                                // HP TouchPad
            /(hp).+(tablet)/i,                                                  // HP Tablet
            /(kindle)\/([\w\.]+)/i,                                             // Kindle
            /\s(nook)[\w\s]+build\/(\w+)/i,                                     // Nook
            /(dell)\s(strea[kpr\s\d]*[\dko])/i                                  // Dell Streak
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /(kf[A-z]+)\sbuild\/.+silk\//i                                      // Kindle Fire HD
            ], [MODEL, [VENDOR, 'Amazon'], [TYPE, TABLET]], [
            /(sd|kf)[0349hijorstuw]+\sbuild\/.+silk\//i                         // Fire Phone
            ], [[MODEL, mapper.str, maps.device.amazon.model], [VENDOR, 'Amazon'], [TYPE, MOBILE]], [

            /\((ip[honed|\s\w*]+);.+(apple)/i                                   // iPod/iPhone
            ], [MODEL, VENDOR, [TYPE, MOBILE]], [
            /\((ip[honed|\s\w*]+);/i                                            // iPod/iPhone
            ], [MODEL, [VENDOR, 'Apple'], [TYPE, MOBILE]], [

            /(blackberry)[\s-]?(\w+)/i,                                         // BlackBerry
            /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[\s_-]?([\w-]*)/i,
                                                                                // BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
            /(hp)\s([\w\s]+\w)/i,                                               // HP iPAQ
            /(asus)-?(\w+)/i                                                    // Asus
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [
            /\(bb10;\s(\w+)/i                                                   // BlackBerry 10
            ], [MODEL, [VENDOR, 'BlackBerry'], [TYPE, MOBILE]], [
                                                                                // Asus Tablets
            /android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7|padfone)/i
            ], [MODEL, [VENDOR, 'Asus'], [TYPE, TABLET]], [

            /(sony)\s(tablet\s[ps])\sbuild\//i,                                  // Sony
            /(sony)?(?:sgp.+)\sbuild\//i
            ], [[VENDOR, 'Sony'], [MODEL, 'Xperia Tablet'], [TYPE, TABLET]], [
            /android.+\s([c-g]\d{4}|so[-l]\w+)\sbuild\//i
            ], [MODEL, [VENDOR, 'Sony'], [TYPE, MOBILE]], [

            /\s(ouya)\s/i,                                                      // Ouya
            /(nintendo)\s([wids3u]+)/i                                          // Nintendo
            ], [VENDOR, MODEL, [TYPE, CONSOLE]], [

            /android.+;\s(shield)\sbuild/i                                      // Nvidia
            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [

            /(playstation\s[34portablevi]+)/i                                   // Playstation
            ], [MODEL, [VENDOR, 'Sony'], [TYPE, CONSOLE]], [

            /(sprint\s(\w+))/i                                                  // Sprint Phones
            ], [[VENDOR, mapper.str, maps.device.sprint.vendor], [MODEL, mapper.str, maps.device.sprint.model], [TYPE, MOBILE]], [

            /(lenovo)\s?(S(?:5000|6000)+(?:[-][\w+]))/i                         // Lenovo tablets
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /(htc)[;_\s-]+([\w\s]+(?=\))|\w+)*/i,                               // HTC
            /(zte)-(\w*)/i,                                                     // ZTE
            /(alcatel|geeksphone|lenovo|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]*)/i
                                                                                // Alcatel/GeeksPhone/Lenovo/Nexian/Panasonic/Sony
            ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [

            /(nexus\s9)/i                                                       // HTC Nexus 9
            ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [

            /d\/huawei([\w\s-]+)[;\)]/i,
            /(nexus\s6p)/i                                                      // Huawei
            ], [MODEL, [VENDOR, 'Huawei'], [TYPE, MOBILE]], [

            /(microsoft);\s(lumia[\s\w]+)/i                                     // Microsoft Lumia
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

            /[\s\(;](xbox(?:\sone)?)[\s\);]/i                                   // Microsoft Xbox
            ], [MODEL, [VENDOR, 'Microsoft'], [TYPE, CONSOLE]], [
            /(kin\.[onetw]{3})/i                                                // Microsoft Kin
            ], [[MODEL, /\./g, ' '], [VENDOR, 'Microsoft'], [TYPE, MOBILE]], [

                                                                                // Motorola
            /\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?:?(\s4g)?)[\w\s]+build\//i,
            /mot[\s-]?(\w*)/i,
            /(XT\d{3,4}) build\//i,
            /(nexus\s6)/i
            ], [MODEL, [VENDOR, 'Motorola'], [TYPE, MOBILE]], [
            /android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i
            ], [MODEL, [VENDOR, 'Motorola'], [TYPE, TABLET]], [

            /hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i            // HbbTV devices
            ], [[VENDOR, util.trim], [MODEL, util.trim], [TYPE, SMARTTV]], [

            /hbbtv.+maple;(\d+)/i
            ], [[MODEL, /^/, 'SmartTV'], [VENDOR, 'Samsung'], [TYPE, SMARTTV]], [

            /\(dtv[\);].+(aquos)/i                                              // Sharp
            ], [MODEL, [VENDOR, 'Sharp'], [TYPE, SMARTTV]], [

            /android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n\d+|sgh-t8[56]9|nexus 10))/i,
            /((SM-T\w+))/i
            ], [[VENDOR, 'Samsung'], MODEL, [TYPE, TABLET]], [                  // Samsung
            /smart-tv.+(samsung)/i
            ], [VENDOR, [TYPE, SMARTTV], MODEL], [
            /((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-\w[\w\d]+))/i,
            /(sam[sung]*)[\s-]*(\w+-?[\w-]*)/i,
            /sec-((sgh\w+))/i
            ], [[VENDOR, 'Samsung'], MODEL, [TYPE, MOBILE]], [

            /sie-(\w*)/i                                                        // Siemens
            ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [

            /(maemo|nokia).*(n900|lumia\s\d+)/i,                                // Nokia
            /(nokia)[\s_-]?([\w-]*)/i
            ], [[VENDOR, 'Nokia'], MODEL, [TYPE, MOBILE]], [

            /android\s3\.[\s\w;-]{10}(a\d{3})/i                                 // Acer
            ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [

            /android.+([vl]k\-?\d{3})\s+build/i                                 // LG Tablet
            ], [MODEL, [VENDOR, 'LG'], [TYPE, TABLET]], [
            /android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i                     // LG Tablet
            ], [[VENDOR, 'LG'], MODEL, [TYPE, TABLET]], [
            /(lg) netcast\.tv/i                                                 // LG SmartTV
            ], [VENDOR, MODEL, [TYPE, SMARTTV]], [
            /(nexus\s[45])/i,                                                   // LG
            /lg[e;\s\/-]+(\w*)/i,
            /android.+lg(\-?[\d\w]+)\s+build/i
            ], [MODEL, [VENDOR, 'LG'], [TYPE, MOBILE]], [

            /android.+(ideatab[a-z0-9\-\s]+)/i                                  // Lenovo
            ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [

            /linux;.+((jolla));/i                                               // Jolla
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

            /((pebble))app\/[\d\.]+\s/i                                         // Pebble
            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [

            /android.+;\s(oppo)\s?([\w\s]+)\sbuild/i                            // OPPO
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

            /crkey/i                                                            // Google Chromecast
            ], [[MODEL, 'Chromecast'], [VENDOR, 'Google']], [

            /android.+;\s(glass)\s\d/i                                          // Google Glass
            ], [MODEL, [VENDOR, 'Google'], [TYPE, WEARABLE]], [

            /android.+;\s(pixel c)\s/i                                          // Google Pixel C
            ], [MODEL, [VENDOR, 'Google'], [TYPE, TABLET]], [

            /android.+;\s(pixel xl|pixel)\s/i                                   // Google Pixel
            ], [MODEL, [VENDOR, 'Google'], [TYPE, MOBILE]], [

            /android.+;\s(\w+)\s+build\/hm\1/i,                                 // Xiaomi Hongmi 'numeric' models
            /android.+(hm[\s\-_]*note?[\s_]*(?:\d\w)?)\s+build/i,               // Xiaomi Hongmi
            /android.+(mi[\s\-_]*(?:one|one[\s_]plus|note lte)?[\s_]*(?:\d?\w?)[\s_]*(?:plus)?)\s+build/i,    // Xiaomi Mi
            /android.+(redmi[\s\-_]*(?:note)?(?:[\s_]*[\w\s]+))\s+build/i       // Redmi Phones
            ], [[MODEL, /_/g, ' '], [VENDOR, 'Xiaomi'], [TYPE, MOBILE]], [
            /android.+(mi[\s\-_]*(?:pad)(?:[\s_]*[\w\s]+))\s+build/i            // Mi Pad tablets
            ],[[MODEL, /_/g, ' '], [VENDOR, 'Xiaomi'], [TYPE, TABLET]], [
            /android.+;\s(m[1-5]\snote)\sbuild/i                                // Meizu Tablet
            ], [MODEL, [VENDOR, 'Meizu'], [TYPE, TABLET]], [

            /android.+a000(1)\s+build/i,                                        // OnePlus
            /android.+oneplus\s(a\d{4})\s+build/i
            ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [

            /android.+[;\/]\s*(RCT[\d\w]+)\s+build/i                            // RCA Tablets
            ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [

            /android.+[;\/\s]+(Venue[\d\s]{2,7})\s+build/i                      // Dell Venue Tablets
            ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [

            /android.+[;\/]\s*(Q[T|M][\d\w]+)\s+build/i                         // Verizon Tablet
            ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [

            /android.+[;\/]\s+(Barnes[&\s]+Noble\s+|BN[RT])(V?.*)\s+build/i     // Barnes & Noble Tablet
            ], [[VENDOR, 'Barnes & Noble'], MODEL, [TYPE, TABLET]], [

            /android.+[;\/]\s+(TM\d{3}.*\b)\s+build/i                           // Barnes & Noble Tablet
            ], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [

            /android.+;\s(k88)\sbuild/i                                         // ZTE K Series Tablet
            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [

            /android.+[;\/]\s*(gen\d{3})\s+build.*49h/i                         // Swiss GEN Mobile
            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [

            /android.+[;\/]\s*(zur\d{3})\s+build/i                              // Swiss ZUR Tablet
            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [

            /android.+[;\/]\s*((Zeki)?TB.*\b)\s+build/i                         // Zeki Tablets
            ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [

            /(android).+[;\/]\s+([YR]\d{2})\s+build/i,
            /android.+[;\/]\s+(Dragon[\-\s]+Touch\s+|DT)(\w{5})\sbuild/i        // Dragon Touch Tablet
            ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [

            /android.+[;\/]\s*(NS-?\w{0,9})\sbuild/i                            // Insignia Tablets
            ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [

            /android.+[;\/]\s*((NX|Next)-?\w{0,9})\s+build/i                    // NextBook Tablets
            ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [

            /android.+[;\/]\s*(Xtreme\_)?(V(1[045]|2[015]|30|40|60|7[05]|90))\s+build/i
            ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [                    // Voice Xtreme Phones

            /android.+[;\/]\s*(LVTEL\-)?(V1[12])\s+build/i                     // LvTel Phones
            ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [

            /android.+[;\/]\s*(V(100MD|700NA|7011|917G).*\b)\s+build/i          // Envizen Tablets
            ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [

            /android.+[;\/]\s*(Le[\s\-]+Pan)[\s\-]+(\w{1,9})\s+build/i          // Le Pan Tablets
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /android.+[;\/]\s*(Trio[\s\-]*.*)\s+build/i                         // MachSpeed Tablets
            ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [

            /android.+[;\/]\s*(Trinity)[\-\s]*(T\d{3})\s+build/i                // Trinity Tablets
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /android.+[;\/]\s*TU_(1491)\s+build/i                               // Rotor Tablets
            ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [

            /android.+(KS(.+))\s+build/i                                        // Amazon Kindle Tablets
            ], [MODEL, [VENDOR, 'Amazon'], [TYPE, TABLET]], [

            /android.+(Gigaset)[\s\-]+(Q\w{1,9})\s+build/i                      // Gigaset Tablets
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /\s(tablet|tab)[;\/]/i,                                             // Unidentifiable Tablet
            /\s(mobile)(?:[;\/]|\ssafari)/i                                     // Unidentifiable Mobile
            ], [[TYPE, util.lowerize], VENDOR, MODEL], [

            /(android[\w\.\s\-]{0,9});.+build/i                                 // Generic Android Device
            ], [MODEL, [VENDOR, 'Generic']]


        /*//////////////////////////
            // TODO: move to string map
            ////////////////////////////

            /(C6603)/i                                                          // Sony Xperia Z C6603
            ], [[MODEL, 'Xperia Z C6603'], [VENDOR, 'Sony'], [TYPE, MOBILE]], [
            /(C6903)/i                                                          // Sony Xperia Z 1
            ], [[MODEL, 'Xperia Z 1'], [VENDOR, 'Sony'], [TYPE, MOBILE]], [

            /(SM-G900[F|H])/i                                                   // Samsung Galaxy S5
            ], [[MODEL, 'Galaxy S5'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
            /(SM-G7102)/i                                                       // Samsung Galaxy Grand 2
            ], [[MODEL, 'Galaxy Grand 2'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
            /(SM-G530H)/i                                                       // Samsung Galaxy Grand Prime
            ], [[MODEL, 'Galaxy Grand Prime'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
            /(SM-G313HZ)/i                                                      // Samsung Galaxy V
            ], [[MODEL, 'Galaxy V'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
            /(SM-T805)/i                                                        // Samsung Galaxy Tab S 10.5
            ], [[MODEL, 'Galaxy Tab S 10.5'], [VENDOR, 'Samsung'], [TYPE, TABLET]], [
            /(SM-G800F)/i                                                       // Samsung Galaxy S5 Mini
            ], [[MODEL, 'Galaxy S5 Mini'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
            /(SM-T311)/i                                                        // Samsung Galaxy Tab 3 8.0
            ], [[MODEL, 'Galaxy Tab 3 8.0'], [VENDOR, 'Samsung'], [TYPE, TABLET]], [

            /(T3C)/i                                                            // Advan Vandroid T3C
            ], [MODEL, [VENDOR, 'Advan'], [TYPE, TABLET]], [
            /(ADVAN T1J\+)/i                                                    // Advan Vandroid T1J+
            ], [[MODEL, 'Vandroid T1J+'], [VENDOR, 'Advan'], [TYPE, TABLET]], [
            /(ADVAN S4A)/i                                                      // Advan Vandroid S4A
            ], [[MODEL, 'Vandroid S4A'], [VENDOR, 'Advan'], [TYPE, MOBILE]], [

            /(V972M)/i                                                          // ZTE V972M
            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [

            /(i-mobile)\s(IQ\s[\d\.]+)/i                                        // i-mobile IQ
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [
            /(IQ6.3)/i                                                          // i-mobile IQ IQ 6.3
            ], [[MODEL, 'IQ 6.3'], [VENDOR, 'i-mobile'], [TYPE, MOBILE]], [
            /(i-mobile)\s(i-style\s[\d\.]+)/i                                   // i-mobile i-STYLE
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [
            /(i-STYLE2.1)/i                                                     // i-mobile i-STYLE 2.1
            ], [[MODEL, 'i-STYLE 2.1'], [VENDOR, 'i-mobile'], [TYPE, MOBILE]], [

            /(mobiistar touch LAI 512)/i                                        // mobiistar touch LAI 512
            ], [[MODEL, 'Touch LAI 512'], [VENDOR, 'mobiistar'], [TYPE, MOBILE]], [

            /////////////
            // END TODO
            ///////////*/

        ],

        engine : [[

            /windows.+\sedge\/([\w\.]+)/i                                       // EdgeHTML
            ], [VERSION, [NAME, 'EdgeHTML']], [

            /(presto)\/([\w\.]+)/i,                                             // Presto
            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m)\/([\w\.]+)/i,     // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m
            /(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i,                          // KHTML/Tasman/Links
            /(icab)[\/\s]([23]\.[\d\.]+)/i                                      // iCab
            ], [NAME, VERSION], [

            /rv\:([\w\.]{1,9}).+(gecko)/i                                       // Gecko
            ], [VERSION, NAME]
        ],

        os : [[

            // Windows based
            /microsoft\s(windows)\s(vista|xp)/i                                 // Windows (iTunes)
            ], [NAME, VERSION], [
            /(windows)\snt\s6\.2;\s(arm)/i,                                     // Windows RT
            /(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s\w]*)/i,                   // Windows Phone
            /(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i
            ], [NAME, [VERSION, mapper.str, maps.os.windows.version]], [
            /(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i
            ], [[NAME, 'Windows'], [VERSION, mapper.str, maps.os.windows.version]], [

            // Mobile/Embedded OS
            /\((bb)(10);/i                                                      // BlackBerry 10
            ], [[NAME, 'BlackBerry'], VERSION], [
            /(blackberry)\w*\/?([\w\.]*)/i,                                     // Blackberry
            /(tizen)[\/\s]([\w\.]+)/i,                                          // Tizen
            /(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|contiki)[\/\s-]?([\w\.]*)/i,
                                                                                // Android/WebOS/Palm/QNX/Bada/RIM/MeeGo/Contiki
            /linux;.+(sailfish);/i                                              // Sailfish OS
            ], [NAME, VERSION], [
            /(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]*)/i                  // Symbian
            ], [[NAME, 'Symbian'], VERSION], [
            /\((series40);/i                                                    // Series 40
            ], [NAME], [
            /mozilla.+\(mobile;.+gecko.+firefox/i                               // Firefox OS
            ], [[NAME, 'Firefox OS'], VERSION], [

            // Console
            /(nintendo|playstation)\s([wids34portablevu]+)/i,                   // Nintendo/Playstation

            // GNU/Linux based
            /(mint)[\/\s\(]?(\w*)/i,                                            // Mint
            /(mageia|vectorlinux)[;\s]/i,                                       // Mageia/VectorLinux
            /(joli|[kxln]?ubuntu|debian|suse|opensuse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?(?!chrom)([\w\.-]*)/i,
                                                                                // Joli/Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware
                                                                                // Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus
            /(hurd|linux)\s?([\w\.]*)/i,                                        // Hurd/Linux
            /(gnu)\s?([\w\.]*)/i                                                // GNU
            ], [NAME, VERSION], [

            /(cros)\s[\w]+\s([\w\.]+\w)/i                                       // Chromium OS
            ], [[NAME, 'Chromium OS'], VERSION],[

            // Solaris
            /(sunos)\s?([\w\.\d]*)/i                                            // Solaris
            ], [[NAME, 'Solaris'], VERSION], [

            // BSD based
            /\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]*)/i                    // FreeBSD/NetBSD/OpenBSD/PC-BSD/DragonFly
            ], [NAME, VERSION],[

            /(haiku)\s(\w+)/i                                                   // Haiku
            ], [NAME, VERSION],[

            /cfnetwork\/.+darwin/i,
            /ip[honead]{2,4}(?:.*os\s([\w]+)\slike\smac|;\sopera)/i             // iOS
            ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [

            /(mac\sos\sx)\s?([\w\s\.]*)/i,
            /(macintosh|mac(?=_powerpc)\s)/i                                    // Mac OS
            ], [[NAME, 'Mac OS'], [VERSION, /_/g, '.']], [

            // Other
            /((?:open)?solaris)[\/\s-]?([\w\.]*)/i,                             // Solaris
            /(aix)\s((\d)(?=\.|\)|\s)[\w\.])*/i,                                // AIX
            /(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms)/i,
                                                                                // Plan9/Minix/BeOS/OS2/AmigaOS/MorphOS/RISCOS/OpenVMS
            /(unix)\s?([\w\.]*)/i                                               // UNIX
            ], [NAME, VERSION]
        ]
    };


    /////////////////
    // Constructor
    ////////////////
    /*
    var Browser = function (name, version) {
        this[NAME] = name;
        this[VERSION] = version;
    };
    var CPU = function (arch) {
        this[ARCHITECTURE] = arch;
    };
    var Device = function (vendor, model, type) {
        this[VENDOR] = vendor;
        this[MODEL] = model;
        this[TYPE] = type;
    };
    var Engine = Browser;
    var OS = Browser;
    */
    var UAParser = function (uastring, extensions) {

        if (typeof uastring === 'object') {
            extensions = uastring;
            uastring = undefined;
        }

        if (!(this instanceof UAParser)) {
            return new UAParser(uastring, extensions).getResult();
        }

        var ua = uastring || ((window && window.navigator && window.navigator.userAgent) ? window.navigator.userAgent : EMPTY);
        var rgxmap = extensions ? util.extend(regexes, extensions) : regexes;
        //var browser = new Browser();
        //var cpu = new CPU();
        //var device = new Device();
        //var engine = new Engine();
        //var os = new OS();

        this.getBrowser = function () {
            var browser = { name: undefined, version: undefined };
            mapper.rgx.call(browser, ua, rgxmap.browser);
            browser.major = util.major(browser.version); // deprecated
            return browser;
        };
        this.getCPU = function () {
            var cpu = { architecture: undefined };
            mapper.rgx.call(cpu, ua, rgxmap.cpu);
            return cpu;
        };
        this.getDevice = function () {
            var device = { vendor: undefined, model: undefined, type: undefined };
            mapper.rgx.call(device, ua, rgxmap.device);
            return device;
        };
        this.getEngine = function () {
            var engine = { name: undefined, version: undefined };
            mapper.rgx.call(engine, ua, rgxmap.engine);
            return engine;
        };
        this.getOS = function () {
            var os = { name: undefined, version: undefined };
            mapper.rgx.call(os, ua, rgxmap.os);
            return os;
        };
        this.getResult = function () {
            return {
                ua      : this.getUA(),
                browser : this.getBrowser(),
                engine  : this.getEngine(),
                os      : this.getOS(),
                device  : this.getDevice(),
                cpu     : this.getCPU()
            };
        };
        this.getUA = function () {
            return ua;
        };
        this.setUA = function (uastring) {
            ua = uastring;
            //browser = new Browser();
            //cpu = new CPU();
            //device = new Device();
            //engine = new Engine();
            //os = new OS();
            return this;
        };
        return this;
    };

    UAParser.VERSION = LIBVERSION;
    UAParser.BROWSER = {
        NAME    : NAME,
        MAJOR   : MAJOR, // deprecated
        VERSION : VERSION
    };
    UAParser.CPU = {
        ARCHITECTURE : ARCHITECTURE
    };
    UAParser.DEVICE = {
        MODEL   : MODEL,
        VENDOR  : VENDOR,
        TYPE    : TYPE,
        CONSOLE : CONSOLE,
        MOBILE  : MOBILE,
        SMARTTV : SMARTTV,
        TABLET  : TABLET,
        WEARABLE: WEARABLE,
        EMBEDDED: EMBEDDED
    };
    UAParser.ENGINE = {
        NAME    : NAME,
        VERSION : VERSION
    };
    UAParser.OS = {
        NAME    : NAME,
        VERSION : VERSION
    };
    //UAParser.Utils = util;

    ///////////
    // Export
    //////////


    // check js environment
    if (typeof(exports) !== UNDEF_TYPE) {
        // nodejs env
        if (typeof module !== UNDEF_TYPE && module.exports) {
            exports = module.exports = UAParser;
        }
        // TODO: test!!!!!!!!
        /*
        if (require && require.main === module && process) {
            // cli
            var jsonize = function (arr) {
                var res = [];
                for (var i in arr) {
                    res.push(new UAParser(arr[i]).getResult());
                }
                process.stdout.write(JSON.stringify(res, null, 2) + '\n');
            };
            if (process.stdin.isTTY) {
                // via args
                jsonize(process.argv.slice(2));
            } else {
                // via pipe
                var str = '';
                process.stdin.on('readable', function() {
                    var read = process.stdin.read();
                    if (read !== null) {
                        str += read;
                    }
                });
                process.stdin.on('end', function () {
                    jsonize(str.replace(/\n$/, '').split('\n'));
                });
            }
        }
        */
        exports.UAParser = UAParser;
    } else {
        // requirejs env (optional)
        if (typeof(define) === FUNC_TYPE && define.amd) {
            define(function () {
                return UAParser;
            });
        } else if (window) {
            // browser env
            window.UAParser = UAParser;
        }
    }

    // jQuery/Zepto specific (optional)
    // Note:
    //   In AMD env the global scope should be kept clean, but jQuery is an exception.
    //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
    //   and we should catch that.
    var $ = window && (window.jQuery || window.Zepto);
    if (typeof $ !== UNDEF_TYPE) {
        var parser = new UAParser();
        $.ua = parser.getResult();
        $.ua.get = function () {
            return parser.getUA();
        };
        $.ua.set = function (uastring) {
            parser.setUA(uastring);
            var result = parser.getResult();
            for (var prop in result) {
                $.ua[prop] = result[prop];
            }
        };
    }

})(typeof window === 'object' ? window : this);

},{}],77:[function(_dereq_,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],78:[function(_dereq_,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"dup":36}],79:[function(_dereq_,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],80:[function(_dereq_,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = _dereq_('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = _dereq_('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":79,"_process":50,"inherits":78}],81:[function(_dereq_,module,exports){
'use strict';

// FUNCTIONS //

var isStr = Object.prototype.toString;


// IS FLOAT32ARRAY //

/**
* FUNCTION: isFloat32Array( value )
*	Validates if a value is a Float32Array.
*
* @param {*} value - value to validate
* @returns {Boolean} boolean indicating if a value is a Float32Array
*/
function isFloat32Array( value ) {
	return isStr.call( value ) === '[object Float32Array]';
} // end FUNCTION isFloat32Array()


// EXPORTS //

module.exports = isFloat32Array;

},{}],82:[function(_dereq_,module,exports){
(function (process,global){
'use strict'

var Transform = _dereq_('readable-stream').Transform
var duplexify = _dereq_('duplexify')
var WS = _dereq_('ws')
var Buffer = _dereq_('safe-buffer').Buffer

module.exports = WebSocketStream

function buildProxy (options, socketWrite, socketEnd) {
  var proxy = new Transform({
    objectMode: options.objectMode
  })

  proxy._write = socketWrite
  proxy._flush = socketEnd

  return proxy
}

function WebSocketStream(target, protocols, options) {
  var stream, socket

  var isBrowser = process.title === 'browser'
  var isNative = !!global.WebSocket
  var socketWrite = isBrowser ? socketWriteBrowser : socketWriteNode

  if (protocols && !Array.isArray(protocols) && 'object' === typeof protocols) {
    // accept the "options" Object as the 2nd argument
    options = protocols
    protocols = null

    if (typeof options.protocol === 'string' || Array.isArray(options.protocol)) {
      protocols = options.protocol;
    }
  }

  if (!options) options = {}

  if (options.objectMode === undefined) {
    options.objectMode = !(options.binary === true || options.binary === undefined)
  }

  var proxy = buildProxy(options, socketWrite, socketEnd)

  if (!options.objectMode) {
    proxy._writev = writev
  }

  // browser only: sets the maximum socket buffer size before throttling
  var bufferSize = options.browserBufferSize || 1024 * 512

  // browser only: how long to wait when throttling
  var bufferTimeout = options.browserBufferTimeout || 1000

  // use existing WebSocket object that was passed in
  if (typeof target === 'object') {
    socket = target
  // otherwise make a new one
  } else {
    // special constructor treatment for native websockets in browsers, see
    // https://github.com/maxogden/websocket-stream/issues/82
    if (isNative && isBrowser) {
      socket = new WS(target, protocols)
    } else {
      socket = new WS(target, protocols, options)
    }

    socket.binaryType = 'arraybuffer'
  }

  // was already open when passed in
  if (socket.readyState === socket.OPEN) {
    stream = proxy
  } else {
    stream = duplexify.obj()
    socket.onopen = onopen
  }

  stream.socket = socket

  socket.onclose = onclose
  socket.onerror = onerror
  socket.onmessage = onmessage

  proxy.on('close', destroy)

  var coerceToBuffer = !options.objectMode

  function socketWriteNode(chunk, enc, next) {
    // avoid errors, this never happens unless
    // destroy() is called
    if (socket.readyState !== socket.OPEN) {
      next()
      return
    }

    if (coerceToBuffer && typeof chunk === 'string') {
      chunk = Buffer.from(chunk, 'utf8')
    }
    socket.send(chunk, next)
  }

  function socketWriteBrowser(chunk, enc, next) {
    if (socket.bufferedAmount > bufferSize) {
      setTimeout(socketWriteBrowser, bufferTimeout, chunk, enc, next)
      return
    }

    if (coerceToBuffer && typeof chunk === 'string') {
      chunk = Buffer.from(chunk, 'utf8')
    }

    try {
      socket.send(chunk)
    } catch(err) {
      return next(err)
    }

    next()
  }

  function socketEnd(done) {
    socket.close()
    done()
  }

  function onopen() {
    stream.setReadable(proxy)
    stream.setWritable(proxy)
    stream.emit('connect')
  }

  function onclose() {
    stream.end()
    stream.destroy()
  }

  function onerror(err) {
    stream.destroy(err)
  }

  function onmessage(event) {
    var data = event.data
    if (data instanceof ArrayBuffer) data = Buffer.from(data)
    else data = Buffer.from(data, 'utf8')
    proxy.push(data)
  }

  function destroy() {
    socket.close()
  }

  // this is to be enabled only if objectMode is false
  function writev (chunks, cb) {
    var buffers = new Array(chunks.length)
    for (var i = 0; i < chunks.length; i++) {
      if (typeof chunks[i].chunk === 'string') {
        buffers[i] = Buffer.from(chunks[i], 'utf8')
      } else {
        buffers[i] = chunks[i].chunk
      }
    }

    this._write(Buffer.concat(buffers), 'binary', cb)
  }

  return stream
}

}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":50,"duplexify":21,"readable-stream":62,"safe-buffer":66,"ws":83}],83:[function(_dereq_,module,exports){

var ws = null

if (typeof WebSocket !== 'undefined') {
  ws = WebSocket
} else if (typeof MozWebSocket !== 'undefined') {
  ws = MozWebSocket
} else if (typeof window !== 'undefined') {
  ws = window.WebSocket || window.MozWebSocket
}

module.exports = ws

},{}],84:[function(_dereq_,module,exports){
// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy
function wrappy (fn, cb) {
  if (fn && cb) return wrappy(fn)(cb)

  if (typeof fn !== 'function')
    throw new TypeError('need wrapper function')

  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k]
  })

  return wrapper

  function wrapper() {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }
    var ret = fn.apply(this, args)
    var cb = args[args.length-1]
    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k]
      })
    }
    return ret
  }
}

},{}],85:[function(_dereq_,module,exports){
module.exports={
  "name": "videomail-client",
  "version": "2.4.11",
  "description": "A wicked npm package to record videos directly in the browser, wohooo!",
  "author": "Michael Heuberger <michael.heuberger@binarykitchen.com>",
  "contributors": [
    {
      "name": "Michael Heuberger",
      "email": "michael.heuberger@binarykitchen.com"
    }
  ],
  "homepage": "https://videomail.io",
  "repository": {
    "type": "git",
    "url": "https://github.com/binarykitchen/videomail-client.git"
  },
  "license": "CC0-1.0",
  "readmeFilename": "README.md",
  "module": "src/index.js",
  "main": "dist/videomail-client.js",
  "scripts": {
    "test": "gulp test",
    "start": "NODE_NO_HTTP2=1 gulp examples",
    "patch": "./env/dev/release.sh --importance=patch",
    "minor": "./env/dev/release.sh --importance=minor",
    "major": "./env/dev/release.sh --importance=major"
  },
  "engines": {
    "node": ">=8.12.0",
    "yarn": ">=1.3.0",
    "npm": ">=5.4.0"
  },
  "keywords": [
    "webcam",
    "video",
    "videomail",
    "encoder",
    "getusermedia",
    "audio",
    "recorder"
  ],
  "dependencies": {
    "add-eventlistener-with-options": "1.25.0",
    "animitter": "3.0.0",
    "audio-sample": "1.0.5",
    "canvas-to-buffer": "1.0.13",
    "classlist.js": "1.1.20150312",
    "contains": "0.1.1",
    "create-error": "0.3.1",
    "deepmerge": "2.2.1",
    "defined": "1.0.0",
    "despot": "1.1.3",
    "document-visibility": "1.0.1",
    "element-closest": "2.0.2",
    "filesize": "3.6.1",
    "get-form-data": "2.0.0",
    "hidden": "1.1.1",
    "humanize-duration": "3.15.3",
    "hyperscript": "2.0.2",
    "insert-css": "2.0.0",
    "iphone-inline-video": "2.2.2",
    "is-power-of-two": "1.0.0",
    "keymirror": "0.1.1",
    "number-is-integer": "1.0.1",
    "readystate": "0.3.0",
    "request-frame": "1.5.3",
    "safe-json-stringify": "1.2.0",
    "superagent": "3.8.3",
    "ua-parser-js": "0.7.18",
    "websocket-stream": "5.1.2"
  },
  "devDependencies": {
    "@babel/core": "7.1.2",
    "@babel/polyfill": "7.0.0",
    "@babel/preset-env": "7.1.0",
    "babelify": "10.0.0",
    "body-parser": "1.18.3",
    "browserify": "16.2.3",
    "connect-send-json": "1.0.0",
    "del": "3.0.0",
    "fancy-log": "1.3.2",
    "glob": "7.1.3",
    "gulp": "3.9.1",
    "gulp-autoprefixer": "6.0.0",
    "gulp-bump": "3.1.1",
    "gulp-bytediff": "1.0.0",
    "gulp-concat": "2.6.1",
    "gulp-connect": "5.6.1",
    "gulp-cssnano": "2.1.3",
    "gulp-derequire": "2.1.0",
    "gulp-if": "2.0.2",
    "gulp-inject-string": "1.1.1",
    "gulp-load-plugins": "1.5.0",
    "gulp-plumber": "1.2.0",
    "gulp-rename": "1.4.0",
    "gulp-sourcemaps": "2.6.4",
    "gulp-standard": "12.0.0",
    "gulp-stylus": "2.7.0",
    "gulp-todo": "7.0.0",
    "gulp-uglify": "3.0.1",
    "minimist": "1.2.0",
    "nib": "1.1.2",
    "router": "1.3.3",
    "ssl-root-cas": "1.2.5",
    "standard": "12.0.1",
    "tap-summary": "4.0.0",
    "tape": "4.9.1",
    "tape-catch": "1.0.6",
    "tape-run": "4.0.0",
    "vinyl-buffer": "1.0.1",
    "vinyl-source-stream": "2.0.0",
    "watchify": "3.11.0"
  }
}

},{}],86:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _deepmerge = _interopRequireDefault(_dereq_("deepmerge"));

var _readystate = _interopRequireDefault(_dereq_("readystate"));

var _util = _interopRequireDefault(_dereq_("util"));

var _options = _interopRequireDefault(_dereq_("./options"));

var _constants = _interopRequireDefault(_dereq_("./constants"));

var _events = _interopRequireDefault(_dereq_("./events"));

var _collectLogger = _interopRequireDefault(_dereq_("./util/collectLogger"));

var _eventEmitter = _interopRequireDefault(_dereq_("./util/eventEmitter"));

var _container = _interopRequireDefault(_dereq_("./wrappers/container"));

var _replay = _interopRequireDefault(_dereq_("./wrappers/visuals/replay"));

var _optionsWrapper = _interopRequireDefault(_dereq_("./wrappers/optionsWrapper"));

var _browser = _interopRequireDefault(_dereq_("./util/browser"));

var _resource = _interopRequireDefault(_dereq_("./resource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var collectLogger;
var browser;

function adjustOptions() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var localOptions = (0, _deepmerge.default)(_options.default, options, {
    arrayMerge: function arrayMerge(destination, source) {
      return source;
    }
  });
  collectLogger = collectLogger || new _collectLogger.default(localOptions);
  localOptions.logger = collectLogger;
  localOptions.debug = localOptions.logger.debug;

  _optionsWrapper.default.addFunctions(localOptions);

  return localOptions;
}

function getBrowser(localOptions) {
  if (!browser) {
    browser = new _browser.default(localOptions);
  }

  return browser;
}

var VideomailClient = function VideomailClient(options) {
  var localOptions = adjustOptions(options);
  var container = new _container.default(localOptions);
  var debug = localOptions.debug;
  var replay;

  _eventEmitter.default.call(this, localOptions, 'VideomailClient'); // expose all possible events


  this.events = _events.default;

  function build() {
    var building = false;

    _readystate.default.interactive(function (previousState) {
      debug('Client: interactive(),', 'previousState =', previousState + ',', '!building =', !building + ',', '!isBuilt() =', !container.isBuilt()); // it can happen that it gets called twice, i.E. when an error is thrown
      // in the middle of the build() fn

      if (!building && !container.isBuilt()) {
        building = true;

        try {
          container.build();
        } catch (exc) {
          throw exc;
        } finally {
          building = false;
        }
      }
    });
  }

  this.show = function () {
    if (container.isBuilt()) {
      container.show();
    } else {
      this.once(_events.default.BUILT, container.show);
    }
  }; // automatically adds a <video> element inside the given parentElement and loads
  // it with the videomail


  this.replay = function (videomail, parentElement) {
    function buildReplay() {
      if (typeof parentElement === 'string') {
        parentElement = document.getElementById(parentElement);
      }

      if (!parentElement) {
        if (!container.isBuilt()) {
          // this will try build all over again
          container.build();
        }

        if (!container.hasElement()) {
          // if container.setElement() failed too, then complain
          _readystate.default.removeAllListeners();

          throw new Error('Unable to replay video without a container nor parent element.');
        }
      } else {
        if (container.isOutsideElementOf(parentElement)) {
          replay = new _replay.default(parentElement, localOptions);
          replay.build();
        }
      }

      if (!replay) {
        replay = container.getReplay();
      }

      if (!parentElement) {
        parentElement = replay.getParentElement();
      }

      if (videomail) {
        videomail = container.addPlayerDimensions(videomail, parentElement);
      }

      if (container.isOutsideElementOf(parentElement)) {
        // replay element must be outside of the container
        container.hideForm({
          deep: true
        });
      } else {
        container.loadForm(videomail);
      } // slight delay needed to avoid HTTP 416 errors (request range unavailable)


      setTimeout(function () {
        replay.setVideomail(videomail);
        container.showReplayOnly();
      }, 10e2); // not sure, but probably can be reduced a bit
    }

    _readystate.default.interactive(buildReplay);
  };

  this.startOver = function (params) {
    if (replay) {
      replay.hide();
      replay.reset();
    }

    container.startOver(params);
  };

  this.unload = function (e) {
    _readystate.default.removeAllListeners();

    container.unload(e);
  };

  this.hide = function () {
    container.hide();
  };

  this.get = function (key, cb) {
    new _resource.default(localOptions).get(key, function (err, videomail) {
      if (err) {
        cb(err);
      } else {
        cb(null, container.addPlayerDimensions(videomail));
      }
    });
  };

  this.canRecord = function () {
    return getBrowser(localOptions).canRecord();
  }; // return true when a video has been recorded but is not sent yet


  this.isDirty = function () {
    return container.isDirty();
  };

  this.isRecording = function () {
    return container.isRecording();
  };

  this.submit = function () {
    container.submit();
  };

  this.getLogLines = function () {
    if (localOptions.logger && localOptions.logger.getLines) {
      return localOptions.logger.getLines();
    }
  };

  build();
};

_util.default.inherits(VideomailClient, _eventEmitter.default);

Object.keys(_constants.default.public).forEach(function (name) {
  VideomailClient[name] = _constants.default.public[name];
}); // just another convenient thing

VideomailClient.events = _events.default;
var _default = VideomailClient;
exports.default = _default;

},{"./constants":87,"./events":88,"./options":89,"./resource":90,"./util/browser":93,"./util/collectLogger":94,"./util/eventEmitter":95,"./wrappers/container":102,"./wrappers/optionsWrapper":105,"./wrappers/visuals/replay":114,"deepmerge":16,"readystate":63,"util":80}],87:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// constants (changing these only break down functionality, so be careful)
var _default = {
  SITE_NAME_LABEL: 'x-videomail-site-name',
  VERSION_LABEL: 'videomailClientVersion',
  public: {
    ENC_TYPE_APP_JSON: 'application/json',
    ENC_TYPE_FORM: 'application/x-www-form-urlencoded'
  }
};
exports.default = _default;

},{}],88:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _keymirror = _interopRequireDefault(_dereq_("keymirror"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _keymirror.default)({
  BUILT: null,
  // all dom elements are ready, are in the DOM
  FORM_READY: null,
  // form is ready, available in the DOM
  LOADING_USER_MEDIA: null,
  // asking for webcam access
  USER_MEDIA_READY: null,
  // user media (= webcam) is ready, loaded
  CONNECTING: null,
  // socket is connecting to server
  CONNECTED: null,
  // socket is connected to server
  DISCONNECTED: null,
  // socket to server is disconnected
  COUNTDOWN: null,
  // countdown for recording has started
  RECORDING: null,
  // webcam is recording
  STOPPING: null,
  // recording is being stopped (= preview)
  PROGRESS: null,
  // start sending
  BEGIN_AUDIO_ENCODING: null,
  // encoding video
  BEGIN_VIDEO_ENCODING: null,
  // encoding video
  RESETTING: null,
  // resetting everything to go back to initial state
  PAUSED: null,
  // recording is being paused
  RESUMING: null,
  // recording is resumed
  PREVIEW: null,
  // video preview is set
  PREVIEW_SHOWN: null,
  // video preview is shown
  REPLAY_SHOWN: null,
  // submitted video is shown
  INVALID: null,
  // form is invalid
  VALIDATING: null,
  // form is being validated
  VALID: null,
  // form is valid
  SUBMITTING: null,
  // form is being submitted
  SUBMITTED: null,
  // form has been successfully submitted
  ERROR: null,
  // an error occured
  BLOCKING: null,
  // something serious, most likely an error, is shown and blocks
  SENDING_FIRST_FRAME: null,
  // emitted before the first frame is being computed
  FIRST_FRAME_SENT: null,
  // emitted once when fist frame has been sent to server
  HIDE: null,
  // emitted when hidden
  NOTIFYING: null,
  // notifies user about something (not blocking)
  ENABLING_AUDIO: null,
  // about to enable audio
  DISABLING_AUDIO: null,
  // about to disable audio
  LOADED_META_DATA: null,
  // raised when webcam knows its dimensions
  EVENT_EMITTED: null,
  // for debugging only, is emitted when an event is emitted lol,
  GOING_BACK: null,
  // switch from replaying back to recording
  STARTING_OVER: null,
  // starting all over again back to its inital state
  ASKING_WEBCAM_PERMISSION: null,
  // when about to ask for webcam permissions
  VISIBLE: null,
  // document just became visible
  INVISIBLE: null // document just became INvisible

});

exports.default = _default;

},{"keymirror":45}],89:[function(_dereq_,module,exports){
(function (process){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _package = _dereq_("../package.json");

var PRODUCTION = process.env.NODE_ENV === 'production';
/* eslint-disable no-multi-spaces */

/* eslint indent: ["error", 2, { "ignoreComments": true }] */

var _default = {
  logger: null,
  // define logging instance. leave null for default, console.
  logStackSize: 30,
  // limits the stack size of log outputs to collect
  verbose: !PRODUCTION,
  // set true to log more info
  baseUrl: 'https://videomail.io',
  // leave as it, permanent url to post videos
  socketUrl: 'wss://videomail.io',
  // leave as it, permanent url to send frames
  siteName: 'videomail-client-demo',
  // Required for API, use https://videomail.io/whitelist
  cache: true,
  // reduces GET queries when loading videos
  insertCss: true,
  // inserts predefined CSS, see examples
  enablePause: true,
  // enable pause/resume button
  enableAutoPause: true,
  // automatically pauses when window becomes inactive
  enableSpace: true,
  // hitting space can pause recording
  disableSubmit: false,
  // set this to true if you do not want to submit videos,
  // but just want to record and replay these temporarily
  enableAutoValidation: true,
  // automatically validates all form inputs if any exist and
  // does not /enable disable submit button after recording
  // when something else seems invalid.
  enableAutoSubmission: true,
  // automatically submits the form where the videomail-client
  // appears upon press of submit button. disable it when
  // you want a framework to deal with the form submission itself.
  enctype: 'application/json',
  // enctype for the form submission. currently implemented are:
  // 'application/json' and 'application/x-www-form-urlencoded'
  // default CSS selectors you can alter, see examples
  selectors: {
    containerId: 'videomail',
    replayClass: 'replay',
    userMediaClass: 'userMedia',
    visualsClass: 'visuals',
    buttonClass: null,
    // can also be used as a default class for all buttons
    buttonsClass: 'buttons',
    recordButtonClass: 'record',
    pauseButtonClass: 'pause',
    resumeButtonClass: 'resume',
    previewButtonClass: 'preview',
    recordAgainButtonClass: 'recordAgain',
    submitButtonClass: 'submit',
    subjectInputName: 'subject',
    // the form input name for subject
    fromInputName: 'from',
    // the form input name for the from email
    toInputName: 'to',
    // the form input name for the to email
    bodyInputName: 'body',
    // the form input name for the message (body)
    sendCopyInputName: 'sendCopy',
    // the form checkbox name for sending myself a copy
    keyInputName: 'videomail_key',
    parentKeyInputName: 'videomail_parent_key',
    aliasInputName: 'videomail_alias',
    formId: null,
    // automatically detects form if any
    submitButtonId: null,
    // semi-automatically detects submit button in the form
    // but if that does not work, try using the
    submitButtonSelector: null // submitButtonSelector

  },
  audio: {
    enabled: false,
    // set to true for experimential audio recording
    'switch': false,
    // enables a switcher for audio recording (on/off)
    volume: 0.2,
    // must be between 0 .. 1 but 0.20 is recommeded to avoid
    // distorting at the higher volume peaks
    bufferSize: 1024 // decides how often the audio is being sampled, must be a power of two.
    // the higher the less traffic, but harder to adjust with rubberband
    // to match with the video length on server side during encoding

  },
  video: {
    fps: 15,
    // depends on your connection
    limitSeconds: 30,
    // recording automatically stops after that limit
    countdown: 3,
    // set it to 0 or false to disable it
    // it is recommended to set one dimension only and leave the other one to auto
    // because each webcam has a different aspect ratio
    width: 'auto',
    // or use an integer for exact pixels
    height: 'auto',
    // or use an integer for exact pixels
    facingMode: 'user' // can be 'user', 'environment', 'left' or 'right'. useful for mobiles.

  },
  image: {
    quality: 0.44,
    types: ['webp', 'jpeg'] // recommended settings to make most of all browsers

  },
  // alter these text for internationalisation
  text: {
    pausedHeader: 'Paused',
    pausedHint: null,
    sending: 'Teleporting',
    encoding: 'Encoding',
    limitReached: 'Limit reached',
    buttons: {
      'record': 'Record video',
      'recordAgain': 'Record again',
      'resume': 'Resume',
      'pause': 'Pause',
      'preview': 'Preview'
    }
  },
  notifier: {
    entertain: false,
    // when true, user is entertained while waiting, see examples
    entertainClass: 'bg',
    entertainLimit: 6,
    entertainInterval: 9000
  },
  timeouts: {
    userMedia: 20e3,
    // in milliseconds, increase if you want user give more time to enable webcam
    connection: 1e4,
    // in seconds, increase if api is slow
    pingInterval: 45e3 // in milliseconds, keeps webstream (connection) alive when pausing

  },
  callbacks: {
    // a custom callback to tweak form data before posting to server
    // this is for advanced use only and shouldn't be used if possible
    adjustFormDataBeforePosting: null
  },
  defaults: {
    from: null,
    // define default FROM email address
    to: null,
    // define default TO email address
    subject: null,
    // define default subject line
    body: null // define default body content

  },
  // a special flag to indicate that everything to be initialised
  // serves only for playing existing videomails with the replay function
  playerOnly: false,
  // show errors inside the container?
  displayErrors: true,
  // true = all form inputs get disabled and disappear when browser can't record
  adjustFormOnBrowserError: false,
  // when true, any errors will be sent to the videomail server for analysis
  // ps: can be a function too returning a boolean
  reportErrors: false,
  // just for testing purposes to simulate browser agent handling
  fakeUaString: null,
  version: _package.version
};
exports.default = _default;

}).call(this,_dereq_('_process'))

},{"../package.json":85,"_process":50}],90:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _superagent = _interopRequireDefault(_dereq_("superagent"));

var _constants = _interopRequireDefault(_dereq_("./constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CACHE_KEY = 'alias';

function _default(options) {
  var cache = {};

  function applyDefaultValue(videomail, name) {
    if (options.defaults[name] && !videomail[name]) {
      videomail[name] = options.defaults[name];
    }

    return videomail;
  }

  function applyDefaultValues(videomail) {
    if (options.defaults) {
      videomail = applyDefaultValue(videomail, 'from');
      videomail = applyDefaultValue(videomail, 'to');
      videomail = applyDefaultValue(videomail, 'subject');
      videomail = applyDefaultValue(videomail, 'body');
    }

    return videomail;
  }

  function packError(err, res) {
    if (res && res.body && res.body.error) {
      // use the server generated text instead of the superagent's default text
      err = res.body.error;

      if (!err.message && res.text) {
        err.message = res.text;
      }
    }

    return err;
  }

  function fetch(alias, cb) {
    _superagent.default.get('/videomail/' + alias + '/snapshot').set('Accept', 'application/json').set(_constants.default.SITE_NAME_LABEL, options.siteName).timeout(options.timeouts.connection).end(function (err, res) {
      err = packError(err, res);

      if (err) {
        cb(err);
      } else {
        var videomail = res.body ? res.body : null;

        if (options.cache) {
          cache[CACHE_KEY] = videomail;
        }

        cb(null, videomail);
      }
    });
  }

  function write(method, videomail, identifier, cb) {
    if (!cb) {
      cb = identifier;
      identifier = null;
    }

    var queryParams = {};
    var url = options.baseUrl + '/videomail/';
    var request;

    if (identifier) {
      url += identifier;
    }

    request = (0, _superagent.default)(method, url);
    queryParams[_constants.default.SITE_NAME_LABEL] = options.siteName;
    request.query(queryParams).send(videomail).timeout(options.timeout).end(function (err, res) {
      err = packError(err, res);

      if (err) {
        cb(err);
      } else {
        if (options.cache && videomail[CACHE_KEY]) {
          cache[videomail[CACHE_KEY]] = res.body.videomail;
        }

        cb(null, res.body.videomail, res.body);
      }
    });
  }

  this.get = function (alias, cb) {
    if (options.cache && cache[alias]) {
      // keep all callbacks async
      setTimeout(function () {
        cb(null, cache[alias]);
      }, 0);
    } else {
      fetch(alias, cb);
    }
  };

  this.reportError = function (err, cb) {
    var queryParams = {};
    var url = options.baseUrl + '/client-error/';
    var request = (0, _superagent.default)('post', url);
    queryParams[_constants.default.SITE_NAME_LABEL] = options.siteName;
    request.query(queryParams).send(err).timeout(options.timeout).end(function (err, res) {
      err = packError(err, res);

      if (err) {
        cb && cb(err);
      } else {
        cb && cb();
      }
    });
  };

  this.post = function (videomail, cb) {
    videomail = applyDefaultValues(videomail); // always good to know the version of the client
    // the videomail was submitted with

    videomail[_constants.default.VERSION_LABEL] = options.version;

    if (options.callbacks.adjustFormDataBeforePosting) {
      options.callbacks.adjustFormDataBeforePosting(videomail, function (err, adjustedVideomail) {
        if (err) {
          cb(err);
        } else {
          write('post', adjustedVideomail, cb);
        }
      });
    } else {
      write('post', videomail, cb);
    }
  };

  this.put = function (videomail, cb) {
    write('put', videomail, videomail.key, cb);
  };

  this.form = function (formData, url, cb) {
    var formType;

    switch (options.enctype) {
      case _constants.default.public.ENC_TYPE_APP_JSON:
        formType = 'json';
        break;

      case _constants.default.public.ENC_TYPE_FORM:
        formType = 'form';
        break;

      default:
        // keep all callbacks async
        setTimeout(function () {
          cb(new Error('Invalid enctype given: ' + options.enctype));
        }, 0);
    }

    if (formType) {
      _superagent.default.post(url).type(formType).send(formData).timeout(options.timeout).end(function (err, res) {
        err = packError(err, res);

        if (err) {
          cb(err);
        } else {
          cb(null, res);
        }
      });
    }
  };
}

},{"./constants":87,"superagent":70}],91:[function(_dereq_,module,exports){
"use strict";

module.exports = '@keyframes a{0%{opacity:.9}35%{opacity:.9}50%{opacity:.1}85%{opacity:.1}to{opacity:.9}}.IIV::-webkit-media-controls-play-button,.IIV::-webkit-media-controls-start-playback-button{opacity:0;pointer-events:none;width:5px}.videomail .visuals{position:relative}.videomail .visuals video.replay{width:100%;height:100%}.videomail .countdown,.videomail .pausedHeader,.videomail .pausedHint,.videomail .recordNote,.videomail .recordTimer{margin:0;height:auto}.videomail .countdown,.videomail .paused,.videomail .recordNote,.videomail .recordTimer,.videomail noscript{position:absolute}.videomail .countdown,.videomail .pausedHeader,.videomail .pausedHint,.videomail .recordNote,.videomail .recordTimer,.videomail noscript{font-weight:700}.videomail .countdown,.videomail .paused,.videomail noscript{width:100%;top:50%;transform:translateY(-50%)}.videomail .countdown,.videomail .pausedHeader,.videomail .pausedHint{text-align:center;text-shadow:0 0 2px #fff}.videomail .countdown,.videomail .pausedHeader{opacity:.85;font-size:440%}.videomail .pausedHint{font-size:150%}.videomail .recordNote,.videomail .recordTimer{right:.7em;background:hsla(0,0%,4%,.8);padding:.4em .4em .3em;transition:all 1s ease;color:#00d814;font-family:monospace;opacity:.9}.videomail .recordNote.near,.videomail .recordTimer.near{color:#eb9369}.videomail .recordNote.nigh,.videomail .recordTimer.nigh{color:#ea4b2a}.videomail .recordTimer{top:.7em}.videomail .recordNote{top:3.6em}.videomail .recordNote:before{content:"REC";animation:a 1s infinite}.videomail .notifier{overflow:hidden;box-sizing:border-box;height:100%}.videomail .radioGroup{display:block}.videomail video{margin-bottom:0}';

},{}],92:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _isPowerOfTwo = _interopRequireDefault(_dereq_("is-power-of-two"));

var _audioSample = _interopRequireDefault(_dereq_("audio-sample"));

var _videomailError = _interopRequireDefault(_dereq_("./videomailError"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CHANNELS = 1; // for inspiration see
// https://github.com/saebekassebil/microphone-stream
// todo code needs rewrite

function _default(userMedia, options) {
  var scriptProcessor;
  var audioInput;
  var vcAudioContext;

  function getAudioContextClass() {
    return window.AudioContext || window.webkitAudioContext;
  }

  function hasAudioContext() {
    return !!getAudioContextClass() && !!getAudioContext();
  }

  function getAudioContext() {
    // instantiate only once
    if (!vcAudioContext) {
      var AudioContext = getAudioContextClass();
      vcAudioContext = new AudioContext();
    }

    return vcAudioContext;
  }

  function onAudioProcess(e, cb) {
    if (!userMedia.isRecording() || userMedia.isPaused()) {
      return;
    } // Returns a Float32Array containing the PCM data associated with the channel,
    // defined by the channel parameter (with 0 representing the first channel)


    var float32Array = e.inputBuffer.getChannelData(0);
    cb(new _audioSample.default(float32Array));
  }

  this.init = function (localMediaStream) {
    options.debug('AudioRecorder: init()'); // creates an audio node from the microphone incoming stream

    var volume = getAudioContext().createGain();

    try {
      audioInput = getAudioContext().createMediaStreamSource(localMediaStream);
    } catch (exc) {
      throw _videomailError.default.create('Webcam has no audio', exc.toString(), options);
    }

    if (!(0, _isPowerOfTwo.default)(options.audio.bufferSize)) {
      throw _videomailError.default.create('Audio buffer size must be a power of two.', options);
    } else if (!options.audio.volume || options.audio.volume > 1) {
      throw _videomailError.default.create('Audio volume must be between zero and one.', options);
    }

    volume.gain.value = options.audio.volume; // Create a ScriptProcessorNode with the given bufferSize and
    // a single input and output channel

    scriptProcessor = getAudioContext().createScriptProcessor(options.audio.bufferSize, CHANNELS, CHANNELS); // connect stream to our scriptProcessor

    audioInput.connect(scriptProcessor); // connect our scriptProcessor to the previous destination

    scriptProcessor.connect(getAudioContext().destination); // connect volume

    audioInput.connect(volume);
    volume.connect(scriptProcessor);
  };

  this.record = function (cb) {
    options.debug('AudioRecorder: record()');

    scriptProcessor.onaudioprocess = function (e) {
      onAudioProcess(e, cb);
    };
  };

  this.stop = function () {
    options.debug('AudioRecorder: stop()');

    if (scriptProcessor) {
      scriptProcessor.onaudioprocess = undefined;
    }

    if (audioInput) {
      audioInput.disconnect();
    } // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/close


    if (hasAudioContext()) {
      if (getAudioContext().close) {
        getAudioContext().close().then(function () {
          options.debug('AudioRecorder: audio context is closed');
          vcAudioContext = null;
        }).catch(function (err) {
          throw _videomailError.default.create(err, options);
        });
      } else {
        vcAudioContext = null;
      }
    }
  };

  this.getSampleRate = function () {
    if (hasAudioContext()) {
      return getAudioContext().sampleRate;
    } else {
      return -1;
    }
  };
}

},{"./videomailError":100,"audio-sample":4,"is-power-of-two":42}],93:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _uaParserJs = _interopRequireDefault(_dereq_("ua-parser-js"));

var _defined = _interopRequireDefault(_dereq_("defined"));

var _videomailError = _interopRequireDefault(_dereq_("./videomailError"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Browser = function Browser(options) {
  options = options || {};
  var firefoxDownload = 'http://www.mozilla.org/firefox/update/';
  var edgeDownload = 'https://www.microsoft.com/en-us/download/details.aspx?id=48126';
  var chromeDownload = 'http://www.google.com/chrome/';
  var chromiumDownload = 'http://www.chromium.org/getting-involved/download-chromium';
  var browseHappyLink = 'http://browsehappy.com';
  var ua = (0, _defined.default)(options.fakeUaString, typeof window !== 'undefined' && window.navigator && window.navigator.userAgent, '');
  var uaParser = new _uaParserJs.default(ua).getResult();
  var isIOS = uaParser.os.name === 'iOS';
  var browserVersion = parseFloat(uaParser.browser.version);
  var isChrome = uaParser.browser.name === 'Chrome';
  var isChromium = uaParser.browser.name === 'Chromium';
  var firefox = uaParser.browser.name === 'Firefox';
  var osVersion = parseFloat(uaParser.os.version);
  var isWindows = uaParser.os.name === 'Windows';
  var isEdge = uaParser.browser.name === 'Edge' || isWindows && osVersion >= 10;
  var isIE = /IE/.test(uaParser.browser.name);
  var isSafari = /Safari/.test(uaParser.browser.name);
  var isOpera = /Opera/.test(uaParser.browser.name);
  var isAndroid = /Android/.test(uaParser.os.name);
  var chromeBased = isChrome || isChromium;
  var isMobile = isIOS || isAndroid;
  var isOkSafari = isSafari && browserVersion >= 11;
  var isOkIOS = isIOS && osVersion >= 11;
  var isBadIOS = isIOS && osVersion < 11;
  var okBrowser = chromeBased || firefox || isAndroid || isOpera || isEdge || isOkSafari || isOkIOS;
  var self = this;
  var videoType;

  function getRecommendation() {
    var warning;

    if (firefox) {
      if (isIOS) {
        warning = 'Firefox on iOS is not ready for cameras yet. Hopefully in near future ...';
      } else {
        warning = 'Probably you need to <a href="' + firefoxDownload + '" target="_blank">' + 'upgrade Firefox</a> to fix this.';
      }
    } else if (isChrome) {
      if (isIOS) {
        warning = 'Chrome on iOS is not ready for cameras yet. Hopefully in near future ...';
      } else {
        warning = 'Probably you need to <a href="' + chromeDownload + '" target="_blank">' + 'upgrade Chrome</a> to fix this.';
      }
    } else if (isChromium) {
      warning = 'Probably you need to <a href="' + chromiumDownload + '" target="_blank">' + 'upgrade Chromium</a> to fix this.';
    } else if (isIE) {
      warning = 'Instead of Internet Explorer you need to upgrade to' + ' <a href="' + edgeDownload + '" target="_blank">Edge</a>.';
    } else if (isOkSafari) {
      warning = 'Probably you need to shut down Safari and restart it, this for correct webcam access.';
    } else if (isSafari) {
      warning = 'Safari below version 11 has no webcam support.<br/>Better upgrade Safari or pick' + ' <a href="' + chromeDownload + '" target="_blank">Chrome</a>,' + ' <a href="' + firefoxDownload + '" target="_blank">Firefox</a> or Android.';
    }

    return warning;
  }

  function getUserMediaWarning() {
    var warning;

    if (isBadIOS) {
      warning = 'On iPads/iPhones below iOS v11 this camera feature is missing.<br/><br/>' + 'For now, we recommend you to upgrade iOS or to use an Android device.';
    } else {
      warning = getRecommendation();
    }

    if (!warning) {
      if (self.isChromeBased() || self.isFirefox() || isSafari) {
        warning = 'For the webcam feature, your browser needs an upgrade.';
      } else {
        warning = 'Hence we recommend you to use either ' + '<a href="' + chromeDownload + '" target="_blank">Chrome</a>, ' + '<a href="' + firefoxDownload + '" target="_blank">Firefox</a>, ' + '<a href="' + edgeDownload + '" target="_blank">Edge</a> or Android.';
      }
    }

    return warning;
  }

  function getPlaybackWarning() {
    var warning = getRecommendation();

    if (!warning) {
      warning = '<a href="' + browseHappyLink + '" target="_blank">Upgrading your browser</a> might help.';
    }

    return warning;
  }

  function canPlayType(video, type) {
    var canPlayType;

    if (video && video.canPlayType) {
      canPlayType = video.canPlayType('video/' + type);
    }

    return canPlayType;
  } // just temporary


  this.canRecord = function () {
    var hasNavigator = typeof navigator !== 'undefined';
    var canRecord = false;

    if (hasNavigator && navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
      canRecord = true;
    } else {
      var getUserMediaType = hasNavigator && _typeof(navigator.getUserMedia_);

      canRecord = getUserMediaType === 'function';
    }

    return canRecord;
  };

  this.checkRecordingCapabilities = function () {
    var err;

    if (!okBrowser || !this.canRecord()) {
      var classList = [];

      if (isBadIOS) {
        classList.push(_videomailError.default.IOS_PROBLEM);
      } else {
        classList.push(_videomailError.default.BROWSER_PROBLEM);
      }

      var message; // good to be able to distinguish between two reasons why and what sort of camera it is

      if (!okBrowser) {
        if (isMobile) {
          message = 'Sorry, your browser is unable to use your mobile camera';
        } else {
          message = 'Sorry, your browser is unable to use webcams';
        }
      } else {
        if (isMobile) {
          message = 'Sorry, your browser cannot record from your mobile camera';
        } else {
          message = 'Sorry, your browser cannot record from webcams';
        }
      }

      err = _videomailError.default.create({
        message: message
      }, getUserMediaWarning(), options, {
        classList: classList
      });
    }

    return err;
  };

  this.checkPlaybackCapabilities = function (video) {
    options.debug('Browser: checkPlaybackCapabilities()');
    var err;
    var message;

    if (!video) {
      message = 'No HTML5 support for video tag!';
    } else if (!this.getVideoType(video)) {
      message = 'Your old browser cannot support modern video codecs';
    } else if (!video.setAttribute) {
      // fixes "Not implemented" error on older browsers
      message = 'Unable to set video attributes in your old browser';
    }

    if (message) {
      err = _videomailError.default.create(message, getPlaybackWarning(), options);
    }

    return err;
  };

  this.checkBufferTypes = function () {
    var err;

    if (typeof window === 'undefined' || typeof window.atob === 'undefined') {
      err = _videomailError.default.create('atob is not supported', options);
    } else if (typeof window.ArrayBuffer === 'undefined') {
      err = _videomailError.default.create('ArrayBuffers are not supported', options);
    } else if (typeof window.Uint8Array === 'undefined') {
      err = _videomailError.default.create('Uint8Arrays are not supported', options);
    }

    return err;
  };

  this.getVideoType = function (video) {
    if (!videoType) {
      // there is a bug in canPlayType within chrome for mp4
      if (canPlayType(video, 'mp4') && !chromeBased) {
        videoType = 'mp4';
      } else if (canPlayType(video, 'webm')) {
        videoType = 'webm';
      }
    }

    return videoType;
  };

  this.getNoAccessIssue = function () {
    var message = 'Unable to access webcam';
    var explanation;

    if (this.isChromeBased()) {
      explanation = 'Click on the allow button to grant access to your webcam.';
    } else if (this.isFirefox()) {
      explanation = 'Please grant Firefox access to your webcam.';
    } else {
      explanation = 'Your system does not let your browser access your webcam.';
    }

    return _videomailError.default.create(message, explanation, options);
  };

  this.isChromeBased = function () {
    return chromeBased;
  };

  this.isFirefox = function () {
    return firefox;
  };

  this.isEdge = function () {
    return isEdge;
  };

  this.isAndroid = function () {
    return isAndroid;
  };

  this.isMobile = function () {
    return uaParser.device.type === 'mobile';
  };

  this.isOkSafari = function () {
    return isOkSafari;
  };

  this.getUsefulData = function () {
    return {
      browser: uaParser.browser,
      device: uaParser.device,
      os: uaParser.os,
      engine: uaParser.engine,
      userAgent: ua
    };
  };
};

var _default = Browser; // so that we also can require() it from videomailError.js within

exports.default = _default;
module.exports = Browser;

},{"./videomailError":100,"defined":17,"ua-parser-js":76}],94:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _util = _interopRequireDefault(_dereq_("util"));

var _browser = _interopRequireDefault(_dereq_("./browser"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var localOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var browser = new _browser.default(localOptions);
  var logger = localOptions.logger || console;
  var containerId = localOptions.selectors && localOptions.selectors.containerId || 'undefined container id';
  var stack = [];

  function lifo(level, parameters) {
    var line = _util.default.format.apply(_util.default, parameters);

    if (stack.length > localOptions.logStackSize) {
      stack.pop();
    }

    stack.push('[' + level + '] ' + line);
    return line;
  }

  function addContainerId(firstArgument) {
    return '#' + containerId + ' [' + new Date().toLocaleTimeString() + '] > ' + firstArgument;
  } // workaround: since we cannot overwrite console.log without having the correct file and line number
  // we'll use groupCollapsed() and trace() instead to get these.


  this.debug = function () {
    // always add it for better client error reports
    var args = [].slice.call(arguments, 0);
    args[0] = addContainerId(args[0]);
    var output = lifo('debug', args);

    if (localOptions.verbose) {
      if (browser.isFirefox()) {
        logger.debug(output);
      } else if (logger.groupCollapsed) {
        logger.groupCollapsed(output);
        logger.trace('Trace');
        logger.groupEnd();
      } else if (logger.debug) {
        logger.debug(output);
      } else {
        // last resort if everything else fails for any weird reasons
        console.log(output);
      }
    }
  };

  this.error = function () {
    var args = [].slice.call(arguments, 0);
    args[0] = addContainerId(args[0]);
    logger.error(lifo('error', args));
  };

  this.warn = function () {
    var args = [].slice.call(arguments, 0);
    args[0] = addContainerId(args[0]);
    logger.warn(lifo('warn', args));
  };

  this.getLines = function () {
    return stack;
  };
}

},{"./browser":93,"util":80}],95:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _despot = _interopRequireDefault(_dereq_("despot"));

var _videomailError = _interopRequireDefault(_dereq_("./videomailError"));

var _events = _interopRequireDefault(_dereq_("./../events"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO: MAKE EVENT EMITTING IN DESPOT NOT GLOBAL BUT BY CONTAINER ID INSTEAD
function _default(options, name) {
  this.emit = function (event) {
    var args = Array.prototype.slice.call(arguments, 0);

    if (!event) {
      throw _videomailError.default.create('You cannot emit without an event.', options);
    } // Automatically convert errors to videomail errors


    if (event === _events.default.ERROR) {
      var err = args[1];
      err = _videomailError.default.create(err, options);
      args[1] = err;
    }

    if (options.debug) {
      if (event !== 'removeListener' && event !== 'newListener') {
        var moreArguments;

        if (args[1]) {
          moreArguments = args.slice(1);
        }

        if (moreArguments) {
          options.debug('%s emits: %s', name, event, moreArguments);
        } else {
          options.debug('%s emits: %s', name, event);
        }
      }
    }

    var result = _despot.default.emit.apply(_despot.default, args); // Todo: have this emitted through a configuration because it is pretty noisy
    // if (event !== Events.EVENT_EMITTED)
    //     this.emit(Events.EVENT_EMITTED, event)


    return result;
  };

  this.on = function (eventName, cb) {
    return _despot.default.on(eventName, cb);
  };

  this.once = function (eventName, cb) {
    return _despot.default.once(eventName, cb);
  };

  this.listeners = function (eventName) {
    return _despot.default.listeners(eventName);
  };

  this.removeListener = function (eventName, cb) {
    return _despot.default.removeListener(eventName, cb);
  };

  this.removeAllListeners = function () {
    _despot.default.removeAllListeners();
  };
}

},{"./../events":88,"./videomailError":100,"despot":18}],96:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _filesize2 = _interopRequireDefault(_dereq_("filesize"));

var _humanizeDuration = _interopRequireDefault(_dereq_("humanize-duration"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// todo get rid of this class and use those imports directly
var _default = {
  filesize: function filesize(bytes, round) {
    return (0, _filesize2.default)(bytes, {
      round: round
    });
  },
  toTime: function toTime(t) {
    return (0, _humanizeDuration.default)(t);
  }
};
exports.default = _default;

},{"filesize":25,"humanize-duration":32}],97:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// taken from
// https://bbc.github.io/tal/jsdoc/events_mediaevent.js.html
var _default = [// The user agent begins looking for media data, as part of
// the resource selection algorithm.
'loadstart', // The user agent is intentionally not currently fetching media data,
// but does not have the entire media resource downloaded. networkState equals NETWORK_IDLE
'suspend', // Playback has begun. Fired after the play() method has returned,
// or when the autoplay attribute has caused playback to begin.
// paused is newly false.
// 'play', commented out since it has special treatment
// The user agent has just determined the duration and dimensions of the
// media resource and the timed tracks are ready.
// readyState is newly equal to HAVE_METADATA or greater for the first time.
// 'loadedmetadata', commented out since it has special treatment
// The user agent is fetching media data.
'progress', // The user agent is intentionally not currently fetching media data,
// but does not have the entire media resource downloaded.
// 'suspend', // commented out, we are already listening to it in code
// Event The user agent stops fetching the media data before it is completely downloaded,
// but not due to an error.  error is an object with the code MEDIA_ERR_ABORTED.
'abort', // A media element whose networkState was previously not in the NETWORK_EMPTY
// state has just switched to that state (either because of a fatal error
// during load that's about to be reported, or because the load() method was
// invoked while the resource selection algorithm was already running).
'emptied', // The user agent is trying to fetch media data, but data is
// unexpectedly not forthcoming
'stalled', // Playback has been paused. Fired after the pause() method has returned.
// paused is newly true.
'pause', // The user agent can render the media data at the current playback position
// for the first time.
// readyState newly increased to HAVE_CURRENT_DATA or greater for the first time.
'loadeddata', // Playback has stopped because the next frame is not available, but the user
// agent expects that frame to become available in due course.
// readyState is newly equal to or less than HAVE_CURRENT_DATA,
// and paused is false. Either seeking is true, or the current playback
// position is not contained in any of the ranges in buffered.
// It is possible for playback to stop for two other reasons without
// paused being false, but those two reasons do not fire this event:
// maybe playback ended, or playback stopped due to errors.
'waiting', // Playback has started. readyState is newly equal to or greater than
// HAVE_FUTURE_DATA, paused is false, seeking is false,
// or the current playback position is contained in one of the ranges in buffered.
'playing', // The user agent can resume playback of the media data,
// but estimates that if playback were to be started now, the media resource
// could not be rendered at the current playback rate up to its end without
// having to stop for further buffering of content.
// readyState newly increased to HAVE_FUTURE_DATA or greater.
'canplay', // The user agent estimates that if playback were to be started now,
// the media resource could be rendered at the current playback rate
// all the way to its end without having to stop for further buffering.
// readyState is newly equal to HAVE_ENOUGH_DATA.
'canplaythrough', // The seeking IDL attribute changed to true and the seek operation is
// taking long enough that the user agent has time to fire the event.
'seeking', // The seeking IDL attribute changed to false.
'seeked', // Playback has stopped because the end of the media resource was reached.
// currentTime equals the end of the media resource; ended is true.
'ended', // Either the defaultPlaybackRate or the playbackRate attribute
// has just been updated.
'ratechange', // The duration attribute has just been updated.
'durationchange', // Either the volume attribute or the muted attribute has changed.
// Fired after the relevant attribute's setter has returned.
'volumechange' // commented out, happen too often
// The current playback position changed as part of normal playback or in
// an especially interesting way, for example discontinuously.
// 'timeupdate'
];
exports.default = _default;

},{}],98:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _safeJsonStringify = _interopRequireDefault(_dereq_("safe-json-stringify"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var DASH = '- ';
var SEPARATOR = '<br/>' + DASH;

function arrayToString(array) {
  if (array.length > 0) {
    var lines = [];
    array.forEach(function (element) {
      if (element) {
        lines.push((0, _safeJsonStringify.default)(element));
      }
    });
    return DASH + lines.join(SEPARATOR);
  }
}

function objectToString(object, options) {
  var propertyNames = Object.getOwnPropertyNames(object);
  var excludes = options && options.excludes || [];
  var lines = [];
  var sLines; // always ignore these

  excludes.push('stack');

  if (propertyNames.length > 0) {
    var exclude = false;
    propertyNames.forEach(function (name) {
      if (excludes) {
        exclude = excludes.indexOf(name) >= 0;
      }

      if (!exclude && object[name]) {
        // this to cover this problem:
        // https://github.com/binarykitchen/videomail-client/issues/157
        lines.push((0, _safeJsonStringify.default)(object[name]));
      }
    });
  }

  if (lines.length === 1) {
    sLines = lines.join();
  } else if (lines.length > 1) {
    sLines = DASH + lines.join(SEPARATOR);
  }

  return sLines;
}

function _default(anything, options) {
  if (anything === null) {
    return 'null';
  } else if (typeof anything === 'undefined') {
    return 'undefined';
  } else if (typeof anything === 'string') {
    return anything;
  } else if (Array.isArray(anything)) {
    return arrayToString(anything);
  } else if (_typeof(anything) === 'object') {
    return objectToString(anything, options);
  } else {
    return anything.toString();
  }
}

},{"safe-json-stringify":67}],99:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

_dereq_("classlist.js");

_dereq_("element-closest");

var _requestFrame = _interopRequireDefault(_dereq_("request-frame"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// needed for IE 11
// https://github.com/julienetie/request-frame
// use those default params for unit tests
function _default() {
  var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var navigator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // https://github.com/julienetie/request-frame/issues/6
  if (!window.screen) {
    window.screen = {};
  }

  (0, _requestFrame.default)('native'); // avoids warning "navigator.mozGetUserMedia has been replaced by navigator.mediaDevices.getUserMedia",
  // see https://github.com/binarykitchen/videomail-client/issues/79

  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {// do not shim
  } else {
    navigator.getUserMedia_ = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
  }

  if (!window.AudioContext && window.webkitAudioContext) {
    window.AudioContext = window.webkitAudioContext;
  }

  if (!window.URL) {
    window.URL = window.webkitURL || window.mozURL || window.msURL;
  }

  var methods = ['debug', 'groupCollapsed', 'groupEnd', 'error', 'exception', 'info', 'log', 'trace', 'warn'];
  var console = {};

  if (window.console) {
    console = window.console;
  } else {
    window.console = function () {};
  }

  var method;
  var length = methods.length;

  while (length--) {
    method = methods[length];

    if (!console[method]) {
      console[method] = function () {};
    }
  }
}

},{"classlist.js":11,"element-closest":22,"request-frame":65}],100:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _createError = _interopRequireDefault(_dereq_("create-error"));

var _util = _interopRequireDefault(_dereq_("util"));

var _pretty = _interopRequireDefault(_dereq_("./pretty"));

var _resource = _interopRequireDefault(_dereq_("./../resource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var VIDEOMAIL_ERR_NAME = 'Videomail Error';
var VideomailError = (0, _createError.default)(Error, VIDEOMAIL_ERR_NAME, {
  'explanation': undefined,
  'logLines': undefined,
  'useragent': undefined,
  'url': undefined,
  'stack': undefined
}); // shim pretty to exclude stack always

var pretty = function pretty(anything) {
  return (0, _pretty.default)(anything, {
    excludes: ['stack']
  });
}; // static and public attribute of this class


VideomailError.PERMISSION_DENIED = 'PERMISSION_DENIED';
VideomailError.NOT_ALLOWED_ERROR = 'NotAllowedError';
VideomailError.NOT_CONNECTED = 'Not connected';
VideomailError.DOM_EXCEPTION = 'DOMException';
VideomailError.STARTING_FAILED = 'Starting video failed';
VideomailError.MEDIA_DEVICE_NOT_SUPPORTED = 'MediaDeviceNotSupported';
VideomailError.BROWSER_PROBLEM = 'browser-problem';
VideomailError.WEBCAM_PROBLEM = 'webcam-problem';
VideomailError.IOS_PROBLEM = 'ios-problem';
VideomailError.OVERCONSTRAINED = 'OverconstrainedError';
VideomailError.NOT_FOUND_ERROR = 'NotFoundError';
VideomailError.NOT_READABLE_ERROR = 'NotReadableError';
VideomailError.SECURITY_ERROR = 'SecurityError';
VideomailError.TRACK_START_ERROR = 'TrackStartError';
VideomailError.INVALID_STATE_ERROR = 'InvalidStateError'; // static function to convert an error into a videomail error

VideomailError.create = function (err, explanation, options, parameters) {
  if (err && err.name === VIDEOMAIL_ERR_NAME) {
    return err;
  }

  if (!options && explanation) {
    options = explanation;
    explanation = undefined;
  }

  options = options || {};
  parameters = parameters || {}; // be super robust

  var debug = options && options.debug || console.log;
  var audioEnabled = options && options.isAudioEnabled && options.isAudioEnabled();
  debug('VideomailError: create()', err, explanation);
  var classList = parameters.classList || []; // Require Browser here, not at the top of the file to avoid
  // recursion. Because the Browser class is requiring this file as well.

  var Browser = _dereq_('./browser');

  var browser = new Browser(options);
  var errType;
  var message;
  var stack; // whole code is ugly because all browsers behave so differently :(

  if (_typeof(err) === 'object') {
    if (err.name === VideomailError.TRACK_START_ERROR) {
      errType = VideomailError.TRACK_START_ERROR;
    } else if (err.name === VideomailError.SECURITY_ERROR) {
      errType = VideomailError.SECURITY_ERROR;
    } else if (err.code === 8 && err.name === VideomailError.NotFoundError) {
      errType = VideomailError.NotFoundError;
    } else if (err.code === 35 || err.name === VideomailError.NOT_ALLOWED_ERROR) {
      // https://github.com/binarykitchen/videomail.io/issues/411
      errType = VideomailError.NOT_ALLOWED_ERROR;
    } else if (err.code === 1 && err.PERMISSION_DENIED === 1) {
      errType = VideomailError.PERMISSION_DENIED;
    } else if (err.constructor && err.constructor.name === VideomailError.DOM_EXCEPTION) {
      if (err.name === VideomailError.NOT_READABLE_ERROR) {
        errType = VideomailError.NOT_READABLE_ERROR;
      } else {
        errType = VideomailError.DOM_EXCEPTION;
      }
    } else if (err.constructor && err.constructor.name === VideomailError.OVERCONSTRAINED) {
      errType = VideomailError.OVERCONSTRAINED;
    } else if (err.message === VideomailError.STARTING_FAILED) {
      errType = err.message;
    } else if (err.name) {
      errType = err.name;
    } else if (err.type === 'error' && err.target.bufferedAmount === 0) {
      errType = VideomailError.NOT_CONNECTED;
    }
  } else if (err === VideomailError.NOT_CONNECTED) {
    errType = VideomailError.NOT_CONNECTED;
  } else {
    errType = err;
  }

  if (err && err.stack) {
    stack = err.stack;
  } else {
    stack = new Error().stack;
  }

  switch (errType) {
    case VideomailError.SECURITY_ERROR:
      message = 'The operation was insecure';
      explanation = 'Probably you have disallowed Cookies for this page?';
      classList.push(VideomailError.BROWSER_PROBLEM);
      break;

    case VideomailError.OVERCONSTRAINED:
      message = 'Invalid webcam constraints';

      if (err.constraint) {
        if (err.constraint === 'width') {
          explanation = 'Your webcam does not meet the width requirement.';
        } else {
          explanation = 'Unmet constraint: ' + err.constraint;
        }
      } else {
        explanation = ' Details: ' + err.toString();
      }

      break;

    case 'MediaDeviceFailedDueToShutdown':
      message = 'Webcam is shutting down';
      explanation = 'This happens your webcam is already switching off and not giving you permission to use it.';
      break;

    case 'SourceUnavailableError':
      message = 'Source of your webcam cannot be accessed';
      explanation = 'Probably it is locked from another process or has a hardware error.';

      if (err.message) {
        err.message += ' Details: ' + err.message;
      }

      break;

    case VideomailError.NOT_FOUND_ERROR:
    case 'NO_DEVICES_FOUND':
      if (audioEnabled) {
        message = 'No webcam nor microphone found';
        explanation = 'Your browser cannot find a webcam with microphone attached to your machine.';
      } else {
        message = 'No webcam found';
        explanation = 'Your browser cannot find a webcam attached to your machine.';
      }

      classList.push(VideomailError.WEBCAM_PROBLEM);
      break;

    case 'PermissionDismissedError':
      message = 'Ooops, you didn\'t give me any permissions?';
      explanation = 'Looks like you skipped the webcam permission dialogue.<br/>' + 'Please grant access next time the dialogue appears.';
      classList.push(VideomailError.WEBCAM_PROBLEM);
      break;

    case VideomailError.NOT_ALLOWED_ERROR:
    case VideomailError.PERMISSION_DENIED:
    case 'PermissionDeniedError':
      message = 'Permission denied';
      explanation = 'Cannot access your webcam. This can have two reasons:<br/>' + 'a) you blocked access to webcam; or<br/>' + 'b) your webcam is already in use.';
      classList.push(VideomailError.WEBCAM_PROBLEM);
      break;

    case 'HARDWARE_UNAVAILABLE':
      message = 'Webcam is unavailable';
      explanation = 'Maybe it is already busy in another window?';

      if (browser.isChromeBased()) {
        explanation += ' Or you have to allow access above?';
      }

      classList.push(VideomailError.WEBCAM_PROBLEM);
      break;

    case VideomailError.NOT_CONNECTED:
      message = 'Unable to connect';
      explanation = 'Either the videomail server or your connection is down. ' + 'Trying to reconnect every few seconds …';
      break;

    case 'NO_VIDEO_FEED':
      message = 'No video feed found!';
      explanation = 'Your webcam is already used in another browser.';
      classList.push(VideomailError.WEBCAM_PROBLEM);
      break;

    case VideomailError.STARTING_FAILED:
      message = 'Starting video failed';
      explanation = 'Most likely this happens when the webam is already active in another browser.';
      classList.push(VideomailError.WEBCAM_PROBLEM);
      break;

    case 'DevicesNotFoundError':
      message = 'No available webcam could be found';
      explanation = 'Looks like you do not have any webcam attached to your machine; or ' + 'the one you plugged in is already used.';
      classList.push(VideomailError.WEBCAM_PROBLEM);
      break;

    case VideomailError.NOT_READABLE_ERROR:
    case VideomailError.TRACK_START_ERROR:
      message = 'No access to webcam';
      explanation = 'A hardware error occurred which prevented access to your webcam.';
      classList.push(VideomailError.WEBCAM_PROBLEM);
      break;

    case VideomailError.INVALID_STATE_ERROR:
      message = 'Invalid state';
      explanation = 'Video recording stream from your webcam already has finished.';
      classList.push(VideomailError.WEBCAM_PROBLEM);
      break;

    case VideomailError.DOM_EXCEPTION:
      switch (err.code) {
        case 8:
          message = 'Requested webcam not found';
          explanation = 'A webcam is needed but could not be found.';
          classList.push(VideomailError.WEBCAM_PROBLEM);
          break;

        case 9:
          var newUrl = 'https:' + window.location.href.substring(window.location.protocol.length);
          message = 'Security upgrade needed';
          explanation = 'Click <a href="' + newUrl + '">here</a> to switch to HTTPs which is more safe ' + ' and enables encrypted videomail transfers.';
          classList.push(VideomailError.BROWSER_PROBLEM);
          break;

        case 11:
          message = 'Invalid State';
          explanation = 'The object is in an invalid, unusable state.';
          classList.push(VideomailError.BROWSER_PROBLEM);
          break;

        default:
          message = 'DOM Exception';
          explanation = pretty(err);
          classList.push(VideomailError.BROWSER_PROBLEM);
          break;
      }

      break;
    // Chrome has a weird problem where if you try to do a getUserMedia request too early, it
    // can return a MediaDeviceNotSupported error (even though nothing is wrong and permission
    // has been granted). Look at userMediaErrorCallback() in recorder, there we do not
    // emit those kind of errors further and just retry.
    //
    // but for whatever reasons, if it happens to reach this code, then investigate this further.

    case VideomailError.MEDIA_DEVICE_NOT_SUPPORTED:
      message = 'Media device not supported';
      explanation = pretty(err);
      break;

    default:
      var originalExplanation = explanation;

      if (explanation && _typeof(explanation) === 'object') {
        explanation = pretty(explanation);
      } // it can be that explanation itself is an error object
      // error objects can be prettified to undefined sometimes


      if (!explanation && originalExplanation) {
        if (originalExplanation.message) {
          explanation = originalExplanation.message;
        } else {
          // tried toString before but nah
          explanation = 'Inspected: ' + _util.default.inspect(originalExplanation, {
            showHidden: true
          });
        }
      }

      if (err && typeof err === 'string') {
        message = err;
      } else {
        if (err && err.message) {
          message = pretty(err.message);
        }

        if (err && err.explanation) {
          if (!explanation) {
            explanation = pretty(err.explanation);
          } else {
            explanation += ';<br/>' + pretty(err.explanation);
          }
        }

        if (err && err.details) {
          var details = pretty(err.details);

          if (!explanation) {
            explanation = details;
          } else {
            explanation += ';<br/>' + details;
          }
        }
      } // for weird, undefined cases


      if (!message) {
        if (errType) {
          message = errType;
        }

        if (!explanation && err) {
          explanation = pretty(err, {
            excludes: ['stack']
          });
        } // avoid dupes


        if (pretty(message) === explanation) {
          explanation = undefined;
        }
      }

      break;
  }

  var logLines = null;

  if (options.logger && options.logger.getLines) {
    logLines = options.logger.getLines();
  }

  if (stack) {
    message = new Error(message);
    message.stack = stack;
  }

  var errCode = 'none';

  if (err) {
    errCode = 'code=' + (err.code ? err.code : 'undefined');
    errCode += ', type=' + (err.type ? err.type : 'undefined');
    errCode += ', name=' + (err.name ? err.name : 'undefined');
    errCode += ', message=' + (err.message ? err.message : 'undefined');
  }

  var videomailError = new VideomailError(message, {
    explanation: explanation,
    logLines: logLines,
    client: browser.getUsefulData(),
    url: window.location.href,
    siteName: options.siteName,
    code: errCode,
    stack: stack // have to assign it manually again because it is kinda protected

  });
  var resource;
  var reportErrors = false;

  if (options.reportErrors) {
    if (typeof options.reportErrors === 'function') {
      reportErrors = options.reportErrors(videomailError);
    } else {
      reportErrors = options.reportErrors;
    }
  }

  if (reportErrors) {
    resource = new _resource.default(options);
  }

  if (resource) {
    resource.reportError(videomailError, function (err2) {
      if (err2) {
        console.error('Unable to report error', err2);
      }
    });
  }

  function hasClass(name) {
    return classList.indexOf(name) >= 0;
  }

  function isBrowserProblem() {
    return hasClass(VideomailError.BROWSER_PROBLEM) || parameters.browserProblem;
  } // add some public functions
  // this one is useful so that the notifier can have different css classes


  videomailError.getClassList = function () {
    return classList;
  };

  videomailError.removeDimensions = function () {
    return hasClass(VideomailError.IOS_PROBLEM) || browser.isMobile();
  };

  videomailError.hideButtons = function () {
    return isBrowserProblem() || hasClass(VideomailError.IOS_PROBLEM);
  };

  videomailError.hideForm = function () {
    return hasClass(VideomailError.IOS_PROBLEM);
  };

  return videomailError;
};

var _default = VideomailError;
exports.default = _default;

},{"./../resource":90,"./browser":93,"./pretty":98,"create-error":15,"util":80}],101:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = _interopRequireDefault(_dereq_("util"));

var _hyperscript = _interopRequireDefault(_dereq_("hyperscript"));

var _hidden = _interopRequireDefault(_dereq_("hidden"));

var _contains = _interopRequireDefault(_dereq_("contains"));

var _events = _interopRequireDefault(_dereq_("./../events"));

var _eventEmitter = _interopRequireDefault(_dereq_("./../util/eventEmitter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Buttons = function Buttons(container, options) {
  _eventEmitter.default.call(this, options, 'Buttons');

  var self = this;
  var debug = options.debug;
  var buttonsElement;
  var recordButton;
  var pauseButton;
  var resumeButton;
  var previewButton;
  var recordAgainButton;
  var submitButton;
  var audioOnRadioPair;
  var audioOffRadioPair;
  var built;

  function hide(elements) {
    if (elements && !Array.isArray(elements)) {
      elements = [elements];
    }

    elements && elements.forEach(function (element) {
      (0, _hidden.default)(element, true);
    });
  }

  function show(elements) {
    if (elements && !Array.isArray(elements)) {
      elements = [elements];
    }

    elements && elements.forEach(function (element) {
      (0, _hidden.default)(element, false);
    });
  }

  function isShown(elements) {
    var isShown = elements && true;

    if (elements && !Array.isArray(elements)) {
      elements = [elements];
    }

    elements && elements.forEach(function (element) {
      isShown = isShown && element && !(0, _hidden.default)(element);
    });
    return isShown;
  }

  function disable(elements) {
    if (elements && !Array.isArray(elements)) {
      elements = [elements];
    }

    elements && elements.forEach(function (element) {
      // https://github.com/binarykitchen/videomail-client/issues/148
      if (element) {
        if (element.tagName === 'INPUT' || element.tagName === 'BUTTON') {
          element.disabled = true;
        } else {
          element.classList.add('disabled');
        }
      }
    });
  }

  function enable(elements) {
    if (elements && !Array.isArray(elements)) {
      elements = [elements];
    }

    elements && elements.forEach(function (element) {
      // https://github.com/binarykitchen/videomail-client/issues/148
      if (element) {
        if (element.tagName === 'INPUT' || element.tagName === 'BUTTON') {
          element.disabled = false;
        } else {
          element.classList.remove('disabled');
        }
      }
    });
  }

  function adjustButton(buttonElement, show, type, disabled) {
    if (disabled) {
      disable(buttonElement);
    }

    if (type) {
      buttonElement.type = type;
    } else if (!buttonElement.type) {
      buttonElement.type = 'button';
    }

    !show && hide(buttonElement);
    return buttonElement;
  }

  function replaceClickHandler(element, clickHandler) {
    var wrappedClickHandler = function wrappedClickHandler(e) {
      e && e.preventDefault();

      try {
        clickHandler({
          event: e
        });
      } catch (exc) {
        self.emit(_events.default.ERROR, exc);
      }
    };

    element.onclick = wrappedClickHandler;
  }

  function makeRadioButtonPair(options) {
    var radioButtonElement;
    var radioButtonGroup;

    if (options.id) {
      radioButtonElement = document.getElementById(options.id);
    }

    if (!radioButtonElement) {
      radioButtonElement = (0, _hyperscript.default)('input#' + options.id, {
        type: 'radio',
        name: options.name,
        value: options.value,
        checked: options.checked
      });
      radioButtonGroup = (0, _hyperscript.default)('span.radioGroup', radioButtonElement, (0, _hyperscript.default)('label', {
        'htmlFor': options.id
      }, options.label)); // double check that submit button is already in the buttonsElement container as a child?

      if (submitButton && (0, _contains.default)(buttonsElement, submitButton)) {
        buttonsElement.insertBefore(radioButtonGroup, submitButton);
      } else {
        buttonsElement.appendChild(radioButtonGroup);
      }
    }

    if (options.changeHandler) {
      radioButtonElement.onchange = options.changeHandler;
    }

    disable(radioButtonElement);
    return [radioButtonElement, radioButtonGroup];
  }

  function makeButton(buttonClass, text, clickHandler, show, id, type, selector) {
    var disabled = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : true;
    var buttonElement;

    if (id) {
      buttonElement = document.getElementById(id);
    } else if (selector) {
      buttonElement = document.querySelector(selector);
    } else {
      buttonElement = buttonsElement.querySelector('.' + buttonClass);
    }

    if (!buttonElement) {
      if (options.selectors.buttonClass) {
        buttonClass += '.' + options.selectors.buttonClass;
      }

      buttonElement = (0, _hyperscript.default)('button.' + buttonClass);
      buttonElement = adjustButton(buttonElement, show, type, disabled);
      buttonElement.innerHTML = text; // double check that submit button is already in the buttonsElement container

      if (submitButton && (0, _contains.default)(buttonsElement, submitButton)) {
        buttonsElement.insertBefore(buttonElement, submitButton);
      } else {
        buttonsElement.appendChild(buttonElement);
      }
    } else {
      buttonElement = adjustButton(buttonElement, show, type, disabled);
    }

    if (clickHandler) {
      replaceClickHandler(buttonElement, clickHandler);
    }

    return buttonElement;
  }

  function buildButtons() {
    if (!options.disableSubmit) {
      if (!submitButton) {
        submitButton = makeButton(options.selectors.submitButtonClass, 'Submit', null, true, options.selectors.submitButtonId, 'submit', options.selectors.submitButtonSelector, options.enableAutoValidation);
      } else {
        disable(submitButton);
      } // no need to listen to the submit event when it's already listened
      // within the form element class


      if (!container.hasForm() && submitButton) {
        replaceClickHandler(submitButton, submit);
      }
    }

    recordButton = makeButton(options.selectors.recordButtonClass, options.text.buttons.record, record, false);

    if (options.enablePause) {
      pauseButton = makeButton(options.selectors.pauseButtonClass, options.text.buttons.pause, container.pause, false);
    }

    if (options.enablePause) {
      resumeButton = makeButton(options.selectors.resumeButtonClass, options.text.buttons.resume, container.resume, false);
    } // show stop only when pause is enabled - looks better that way otherwise button
    // move left and right between record and stop (preview)


    previewButton = makeButton(options.selectors.previewButtonClass, options.text.buttons.preview, container.stop, false);
    recordAgainButton = makeButton(options.selectors.recordAgainButtonClass, options.text.buttons.recordAgain, recordAgain, false);

    if (options.audio && options.audio.switch) {
      audioOffRadioPair = makeRadioButtonPair({
        id: 'audioOffOption',
        name: 'audio',
        value: 'off',
        label: 'Audio Off',
        checked: !options.isAudioEnabled(),
        changeHandler: function changeHandler() {
          container.disableAudio();
        }
      });
      audioOnRadioPair = makeRadioButtonPair({
        id: 'audioOnOption',
        name: 'audio',
        value: 'on',
        label: 'Audio On (Beta)',
        checked: options.isAudioEnabled(),
        changeHandler: function changeHandler() {
          container.enableAudio();
        }
      });
    }
  }

  function onFormReady(params) {
    // no need to show record button when doing a record again
    if (!isShown(recordAgainButton)) {
      if (!params.paused) {
        show(recordButton);
      }
    }

    if (!params.paused) {
      disable(previewButton);
      hide(previewButton);
    }

    if (!options.enableAutoValidation) {
      enable(submitButton);
    }
  }

  function onGoingBack() {
    hide(recordAgainButton);
    show(recordButton);
    show(submitButton);
  }

  function onReplayShown() {
    self.hide();
  }

  function onUserMediaReady(options) {
    onFormReady(options);

    if (isShown(recordButton)) {
      enable(recordButton);
    }

    if (isShown(audioOnRadioPair)) {
      enable(audioOnRadioPair);
    }

    if (isShown(audioOffRadioPair)) {
      enable(audioOffRadioPair);
    }

    if (options.enableAutoValidation) {
      disable(submitButton);
    }
  }

  function onResetting() {
    disable(submitButton);
    self.reset();
  }

  function onPreview() {
    hide(recordButton);
    hide(previewButton);
    disable(audioOnRadioPair);
    disable(audioOffRadioPair);
    show(recordAgainButton);
    enable(recordAgainButton);

    if (!options.enableAutoValidation) {
      enable(submitButton);
    }
  }

  this.enableSubmit = function () {
    enable(submitButton);
  };

  this.adjustButtonsForPause = function () {
    if (!self.isCountingDown()) {
      pauseButton && hide(pauseButton);
      show(resumeButton);
      enable(resumeButton);
      hide(recordButton);
      show(previewButton);
      enable(previewButton);
    }
  };

  function onFirstFrameSent() {
    hide(recordButton);
    hide(recordAgainButton);

    if (pauseButton) {
      show(pauseButton);
      enable(pauseButton);
    }

    enable(previewButton);
    show(previewButton);
  }

  function onRecording(framesCount) {
    // it is possible to hide while recording, hence
    // check framesCount first (coming from recorder)
    if (framesCount > 1) {
      onFirstFrameSent();
    } else {
      disable(audioOffRadioPair);
      disable(audioOnRadioPair);
      disable(recordAgainButton);
      disable(recordButton);
    }
  }

  function onResuming() {
    hide(resumeButton);
    hide(recordButton);

    if (pauseButton) {
      enable(pauseButton);
      show(pauseButton);
    }
  }

  function onStopping() {
    disable(previewButton);
    hide(pauseButton);
    hide(resumeButton);
  }

  function onCountdown() {
    disable(recordButton);
    disable(audioOffRadioPair);
    disable(audioOnRadioPair);
  }

  function onSubmitting() {
    disable(submitButton);
    disable(recordAgainButton);
  }

  function onSubmitted() {
    disable(previewButton);
    disable(recordAgainButton);
    disable(recordButton);
    disable(submitButton);
  }

  function onInvalid() {
    if (options.enableAutoValidation) {
      disable(submitButton);
    }
  }

  function onValid() {
    if (options.enableAutoValidation) {
      enable(submitButton);
    }
  }

  function onHidden() {
    hide(recordButton);
    hide(previewButton);
    hide(recordAgainButton);
    hide(resumeButton);
  }

  function onEnablingAudio() {
    disable(recordButton);
    disable(audioOnRadioPair);
    disable(audioOffRadioPair);
  }

  function onDisablingAudio() {
    disable(recordButton);
    disable(audioOnRadioPair);
    disable(audioOffRadioPair);
  }

  function recordAgain() {
    disable(recordAgainButton);
    container.beginWaiting();
    container.recordAgain();
  }

  function onStartingOver() {
    show(submitButton);
  }

  function submit() {
    container.submit();
  }

  function record(params) {
    disable(recordButton);
    container.record(params);
  }

  function initEvents() {
    debug('Buttons: initEvents()');
    self.on(_events.default.USER_MEDIA_READY, function (options) {
      onUserMediaReady(options);
    }).on(_events.default.PREVIEW, function () {
      onPreview();
    }).on(_events.default.PAUSED, function () {
      self.adjustButtonsForPause();
    }).on(_events.default.RECORDING, function (framesCount) {
      onRecording(framesCount);
    }).on(_events.default.FIRST_FRAME_SENT, function () {
      onFirstFrameSent();
    }).on(_events.default.RESUMING, function () {
      onResuming();
    }).on(_events.default.STOPPING, function () {
      onStopping();
    }).on(_events.default.COUNTDOWN, function () {
      onCountdown();
    }).on(_events.default.SUBMITTING, function () {
      onSubmitting();
    }).on(_events.default.RESETTING, function () {
      onResetting();
    }).on(_events.default.INVALID, function () {
      onInvalid();
    }).on(_events.default.VALID, function () {
      onValid();
    }).on(_events.default.SUBMITTED, function () {
      onSubmitted();
    }).on(_events.default.HIDE, function () {
      onHidden();
    }).on(_events.default.FORM_READY, function (options) {
      onFormReady(options);
    }).on(_events.default.REPLAY_SHOWN, function () {
      onReplayShown();
    }).on(_events.default.GOING_BACK, function () {
      onGoingBack();
    }).on(_events.default.ENABLING_AUDIO, function () {
      onEnablingAudio();
    }).on(_events.default.DISABLING_AUDIO, function () {
      onDisablingAudio();
    }).on(_events.default.STARTING_OVER, function () {
      onStartingOver();
    }).on(_events.default.ERROR, function (err) {
      // since https://github.com/binarykitchen/videomail-client/issues/60
      // we hide areas to make it easier for the user
      if (err.hideButtons && err.hideButtons() && options.adjustFormOnBrowserError) {
        self.hide();
      }
    });
  }

  this.reset = function () {
    options.debug('Buttons: reset()');
    disable(pauseButton);
    disable(resumeButton);
    disable(recordButton);
    disable(previewButton);
    disable(recordAgainButton);
  };

  this.isRecordAgainButtonEnabled = function () {
    return !recordAgainButton.disabled;
  };

  this.isRecordButtonEnabled = function () {
    return !recordButton.disabled;
  };

  this.setSubmitButton = function (newSubmitButton) {
    submitButton = newSubmitButton;
  };

  this.getSubmitButton = function () {
    return submitButton;
  };

  this.build = function () {
    buttonsElement = container.querySelector('.' + options.selectors.buttonsClass);

    if (!buttonsElement) {
      buttonsElement = (0, _hyperscript.default)('div.' + options.selectors.buttonsClass);
      container.appendChild(buttonsElement);
    }

    buildButtons();
    !built && initEvents();
    built = true;
  };

  this.unload = function () {
    built = false;
  };

  this.hide = function (params) {
    hide(buttonsElement);

    if (params && params.deep) {
      hide(recordButton);
      hide(pauseButton);
      hide(resumeButton);
      hide(previewButton);
      hide(recordAgainButton);
      hide(submitButton);
    }
  };

  this.show = function () {
    show(buttonsElement);
  };

  this.isCountingDown = function () {
    return container.isCountingDown();
  };
};

_util.default.inherits(Buttons, _eventEmitter.default);

var _default = Buttons;
exports.default = _default;

},{"./../events":88,"./../util/eventEmitter":95,"contains":13,"hidden":31,"hyperscript":33,"util":80}],102:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _insertCss = _interopRequireDefault(_dereq_("insert-css"));

var _hidden = _interopRequireDefault(_dereq_("hidden"));

var _util = _interopRequireDefault(_dereq_("util"));

var _documentVisibility = _interopRequireDefault(_dereq_("document-visibility"));

var _dimension = _interopRequireDefault(_dereq_("./dimension"));

var _visuals = _interopRequireDefault(_dereq_("./visuals"));

var _buttons = _interopRequireDefault(_dereq_("./buttons"));

var _form = _interopRequireDefault(_dereq_("./form"));

var _optionsWrapper = _interopRequireDefault(_dereq_("./optionsWrapper"));

var _resource = _interopRequireDefault(_dereq_("./../resource"));

var _events = _interopRequireDefault(_dereq_("./../events"));

var _eventEmitter = _interopRequireDefault(_dereq_("./../util/eventEmitter"));

var _videomailError = _interopRequireDefault(_dereq_("./../util/videomailError"));

var _mainMinCss = _interopRequireDefault(_dereq_("./../styles/css/main.min.css.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Container = function Container(options) {
  _eventEmitter.default.call(this, options, 'Container');

  var self = this;
  var visibility = (0, _documentVisibility.default)();
  var visuals = new _visuals.default(this, options);
  var buttons = new _buttons.default(this, options);
  var resource = new _resource.default(options);
  var htmlElement = document && document.querySelector && document.querySelector('html');
  var debug = options.debug;
  var hasError = false;
  var submitted = false;
  var lastValidation = false;
  var containerElement;
  var built;
  var form;

  function prependDefaultCss() {
    (0, _insertCss.default)(_mainMinCss.default, {
      prepend: true
    });
  } // since https://github.com/binarykitchen/videomail-client/issues/87


  function findParentFormElement() {
    return containerElement.closest('form');
  }

  function getFormElement() {
    var formElement;

    if (containerElement.tagName === 'FORM') {
      formElement = containerElement;
    } else if (options.selectors.formId) {
      formElement = document.getElementById(options.selectors.formId);
    } else {
      formElement = findParentFormElement();
    }

    return formElement;
  }

  function buildForm() {
    var formElement = getFormElement();

    if (formElement) {
      debug('Container: buildForm()');
      form = new _form.default(self, formElement, options);
      var submitButton = form.findSubmitButton();
      submitButton && buttons.setSubmitButton(submitButton);
      form.build();
    }
  }

  function buildChildren() {
    debug('Container: buildChildren()');

    if (!containerElement.classList) {
      self.emit(_events.default.ERROR, _videomailError.default.create('Sorry, your browser is too old!', options));
    } else {
      containerElement.classList.add('videomail');

      if (!options.playerOnly) {
        buttons.build();
      }

      visuals.build();
    }
  }

  function processError(err) {
    hasError = true;

    if (err.stack) {
      options.logger.error(err.stack);
    } else {
      options.logger.error(err);
    }

    if (options.displayErrors) {
      visuals.error(err);
    } else {
      visuals.reset();
    }
  }

  function initEvents() {
    debug('Container: initEvents()');
    window.addEventListener('beforeunload', function (e) {
      self.unload(e);
    });

    if (!options.playerOnly) {
      visibility.onChange(function (visible) {
        // built? see https://github.com/binarykitchen/videomail.io/issues/326
        if (built) {
          if (visible) {
            if (options.isAutoPauseEnabled() && self.isCountingDown()) {
              self.resume();
            }

            self.emit(_events.default.VISIBLE);
          } else {
            if (options.isAutoPauseEnabled() && (self.isCountingDown() || self.isRecording())) {
              self.pause('document invisible');
            }

            self.emit(_events.default.INVISIBLE);
          }
        }
      });
    }

    if (options.enableSpace) {
      if (!options.playerOnly) {
        window.addEventListener('keypress', function (e) {
          var tagName = e.target.tagName;
          var isEditable = e.target.isContentEditable || e.target.contentEditable === 'true' || e.target.contentEditable === true; // beware of rich text editors, hence the isEditable check (wordpress plugin issue)

          if (!isEditable && tagName !== 'INPUT' && tagName !== 'TEXTAREA') {
            var code = e.keyCode ? e.keyCode : e.which;

            if (code === 32) {
              e.preventDefault();

              if (options.enablePause) {
                visuals.pauseOrResume();
              } else {
                visuals.recordOrStop();
              }
            }
          }
        });
      }
    } // better to keep the one and only error listeners
    // at one spot, here, because unload() will do a removeAllListeners()


    self.on(_events.default.ERROR, function (err) {
      processError(err);
      unloadChildren(err);

      if (err.removeDimensions && err.removeDimensions()) {
        removeDimensions();
      }
    });

    if (!options.playerOnly) {
      self.on(_events.default.LOADED_META_DATA, function () {
        correctDimensions();
      });
    }
  }

  function validateOptions() {
    if (options.hasDefinedWidth() && options.video.width % 2 !== 0) {
      throw _videomailError.default.create('Width must be divisible by two.', options);
    }

    if (options.hasDefinedHeight() && options.video.height % 2 !== 0) {
      throw _videomailError.default.create('Height must be divisible by two.', options);
    }
  } // this will just set the width but not the height because
  // it can be a form with more inputs elements


  function correctDimensions() {
    var width = visuals.getRecorderWidth(true);

    if (width < 1) {
      throw _videomailError.default.create('Recorder width cannot be less than 1!', options);
    } else {
      containerElement.style.width = width + 'px';
    }
  }

  function removeDimensions() {
    containerElement.style.width = 'auto';
  }

  function unloadChildren(e) {
    visuals.unload(e);
    buttons.unload();
    self.endWaiting();
  }

  function hideMySelf() {
    (0, _hidden.default)(containerElement, true);
  } // fixes https://github.com/binarykitchen/videomail-client/issues/71


  function trimEmail(email) {
    return email.replace(/(^[,\s]+)|([,\s]+$)/g, '');
  }

  function submitVideomail(formData, method, cb) {
    var FORM_FIELDS = {
      'subject': options.selectors.subjectInputName,
      'from': options.selectors.fromInputName,
      'to': options.selectors.toInputName,
      'body': options.selectors.bodyInputName,
      'key': options.selectors.keyInputName,
      'parentKey': options.selectors.parentKeyInputName,
      'sendCopy': options.selectors.sendCopyInputName
    };
    var videomailFormData = {};
    Object.keys(FORM_FIELDS).forEach(function (key) {
      if (formData.hasOwnProperty(FORM_FIELDS[key])) {
        videomailFormData[key] = formData[FORM_FIELDS[key]];
      }
    });

    if (videomailFormData.from) {
      videomailFormData.from = trimEmail(videomailFormData.from);
    }

    if (videomailFormData.to) {
      videomailFormData.to = trimEmail(videomailFormData.to);
    } // when method is undefined, treat it as a post


    if (isPost(method) || !method) {
      videomailFormData.recordingStats = visuals.getRecordingStats();
      videomailFormData.width = visuals.getRecorderWidth(true);
      videomailFormData.height = visuals.getRecorderHeight(true);
      resource.post(videomailFormData, cb);
    } else if (isPut(method)) {
      resource.put(videomailFormData, cb);
    }
  }

  function submitForm(formData, videomailResponse, url, cb) {
    // for now, accept POSTs only which have an URL unlike null and
    // treat all other submissions as direct submissions
    if (!url || url === '') {
      // figure out URL automatically then
      url = document.baseURI;
    } // can be missing when no videomail was recorded and is not required


    if (videomailResponse) {
      formData[options.selectors.aliasInputName] = videomailResponse.videomail.alias;
    }

    resource.form(formData, url, cb);
  }

  function finalizeSubmissions(err, method, videomail, response, formResponse) {
    self.endWaiting();

    if (err) {
      self.emit(_events.default.ERROR, err);
    } else {
      submitted = true; // merge two json response bodies to fake as if it were only one request

      if (response && formResponse && formResponse.body) {
        Object.keys(formResponse.body).forEach(function (key) {
          response[key] = formResponse.body[key];
        });
      }

      self.emit(_events.default.SUBMITTED, videomail, response || formResponse);

      if (formResponse && formResponse.type === 'text/html' && formResponse.text) {
        // server replied with HTML contents - display these
        document.body.innerHTML = formResponse.text; // todo: figure out how to fire dom's onload event again
        // todo: or how to run all the scripts over again
      }
    }
  }

  this.addPlayerDimensions = function (videomail, element) {
    try {
      videomail.playerHeight = this.calculateHeight({
        responsive: true,
        videoWidth: videomail.width,
        ratio: videomail.height / videomail.width
      }, element);
      videomail.playerWidth = this.calculateWidth({
        responsive: true,
        videoHeight: videomail.playerHeight,
        ratio: videomail.height / videomail.width
      });
      return videomail;
    } catch (exc) {
      self.emit(_events.default.ERROR, exc);
    }
  };

  this.limitWidth = function (width) {
    return _dimension.default.limitWidth(containerElement, width, options);
  };

  this.limitHeight = function (height) {
    return _dimension.default.limitHeight(height, options);
  };

  this.calculateWidth = function (fnOptions) {
    return _dimension.default.calculateWidth(_optionsWrapper.default.merge(options, fnOptions, true));
  };

  this.calculateHeight = function (fnOptions, element) {
    if (!element) {
      if (containerElement) {
        element = containerElement;
      } else {
        // better than nothing
        element = document.body;
      }
    }

    return _dimension.default.calculateHeight(element, _optionsWrapper.default.merge(options, fnOptions, true));
  };

  this.areVisualsHidden = function () {
    return visuals.isHidden();
  };

  this.hasElement = function () {
    return !!containerElement;
  };

  this.build = function () {
    try {
      containerElement = document.getElementById(options.selectors.containerId); // only build when a container element hast been found, otherwise
      // be silent and do nothing

      if (containerElement) {
        options.insertCss && prependDefaultCss();
        !built && initEvents();
        validateOptions();
        correctDimensions();

        if (!options.playerOnly) {
          buildForm();
        }

        buildChildren();

        if (!hasError) {
          debug('Container: built.');
          built = true;
          self.emit(_events.default.BUILT);
        } else {
          debug('Container: building failed due to an error.');
        }
      } else {// commented out since it does too much noise on videomail's view page which is fine
        // debug('Container: no container element with ID ' + options.selectors.containerId + ' found. Do nothing.')
      }
    } catch (exc) {
      if (visuals.isNotifierBuilt()) {
        self.emit(_events.default.ERROR, exc);
      } else {
        throw exc;
      }
    }
  };

  this.getSubmitButton = function () {
    return buttons.getSubmitButton();
  };

  this.querySelector = function (selector) {
    return containerElement.querySelector(selector);
  };

  this.beginWaiting = function () {
    htmlElement.classList && htmlElement.classList.add('wait');
  };

  this.endWaiting = function () {
    htmlElement.classList && htmlElement.classList.remove('wait');
  };

  this.appendChild = function (child) {
    containerElement.appendChild(child);
  };

  this.insertBefore = function (child, reference) {
    containerElement.insertBefore(child, reference);
  };

  this.unload = function (e) {
    debug('Container: unload()', e);

    try {
      unloadChildren(e);
      this.removeAllListeners();
      built = submitted = false;
    } catch (exc) {
      self.emit(_events.default.ERROR, exc);
    }
  };

  this.show = function () {
    if (containerElement) {
      (0, _hidden.default)(containerElement, false);
      visuals.show();

      if (!hasError) {
        var paused = self.isPaused();

        if (paused) {
          buttons.adjustButtonsForPause();
        } // since https://github.com/binarykitchen/videomail-client/issues/60
        // we hide areas to make it easier for the user


        buttons.show();

        if (self.isReplayShown()) {
          self.emit(_events.default.PREVIEW);
        } else {
          self.emit(_events.default.FORM_READY, {
            paused: paused
          });
        }
      }
    }
  };

  this.hide = function () {
    debug('Container: hide()');
    hasError = false;
    this.isRecording() && this.pause();
    visuals.hide();

    if (submitted) {
      buttons.hide();
      hideMySelf();
    }
  };

  this.startOver = function (params) {
    try {
      self.emit(_events.default.STARTING_OVER);
      submitted = false;
      form.show();
      visuals.back(params, function () {
        if (params.keepHidden) {
          // just enable form, do nothing else.
          // see example contact_form.html when you submit without videomil
          // and go back
          self.enableForm();
        } else {
          self.show(params);
        }
      });
    } catch (exc) {
      self.emit(_events.default.ERROR, exc);
    }
  };

  this.showReplayOnly = function () {
    hasError = false;
    this.isRecording() && this.pause();
    visuals.showReplayOnly();
    submitted && buttons.hide();
  };

  this.isNotifying = function () {
    return visuals.isNotifying();
  };

  this.isPaused = function () {
    return visuals.isPaused();
  };

  this.pause = function (params) {
    visuals.pause(params);
  }; // this code needs a good rewrite :(


  this.validate = function (force) {
    var runValidation = true;
    var valid;

    if (!options.enableAutoValidation) {
      runValidation = false;
      lastValidation = true; // needed so that it can be submitted anyway, see submit()
    } else if (force) {
      runValidation = force;
    } else if (self.isNotifying()) {
      runValidation = false;
    } else if (visuals.isConnected()) {
      runValidation = visuals.isUserMediaLoaded() || visuals.isReplayShown();
    } else if (visuals.isConnecting()) {
      runValidation = false;
    }

    if (runValidation) {
      this.emit(_events.default.VALIDATING);
      var visualsValid = visuals.validate() && buttons.isRecordAgainButtonEnabled();
      var whyInvalid;

      if (form) {
        valid = form.validate();

        if (valid) {
          if (!this.areVisualsHidden() && !visualsValid) {
            if (submitted || this.isReady() || this.isRecording() || this.isPaused() || this.isCountingDown()) {
              valid = false;
            }

            if (!valid) {
              whyInvalid = 'Video is not recorded';
            }
          }
        } else {
          var invalidInput = form.getInvalidElement();

          if (invalidInput) {
            whyInvalid = 'Form input named ' + invalidInput.name + ' is invalid';
          } else {
            whyInvalid = 'Form input(s() are invalid';
          }
        }
      } else {
        valid = visualsValid;
      }

      if (valid) {
        this.emit(_events.default.VALID);
      } else {
        this.emit(_events.default.INVALID, whyInvalid);
      }

      lastValidation = valid;
    }

    return valid;
  };

  this.disableForm = function (buttonsToo) {
    form && form.disable(buttonsToo);
  };

  this.enableForm = function (buttonsToo) {
    form && form.enable(buttonsToo);
  };

  this.hasForm = function () {
    return !!form;
  };

  this.isReady = function () {
    return buttons.isRecordButtonEnabled();
  };

  function isPost(method) {
    return method && method.toUpperCase() === 'POST';
  }

  function isPut(method) {
    return method && method.toUpperCase() === 'PUT';
  }

  this.submitAll = function (formData, method, url) {
    var post = isPost(method);
    var hasVideomailKey = !!formData[options.selectors.keyInputName];

    function startSubmission() {
      self.beginWaiting();
      self.disableForm(true);
      self.emit(_events.default.SUBMITTING);
    } // a closure so that we can access method


    var submitVideomailCallback = function submitVideomailCallback(err1, videomail, videomailResponse) {
      if (err1) {
        finalizeSubmissions(err1, method, videomail, videomailResponse);
      } else if (post) {
        submitForm(formData, videomailResponse, url, function (err2, formResponse) {
          finalizeSubmissions(err2, method, videomail, videomailResponse, formResponse);
        });
      } else {
        // it's a direct submission
        finalizeSubmissions(null, method, videomail, videomailResponse);
      }
    }; // !hasVideomailKey makes it possible to submit form when videomail itself
    // is not optional.


    if (!hasVideomailKey) {
      if (options.enableAutoSubmission) {
        startSubmission();
        submitForm(formData, null, url, function (err2, formResponse) {
          finalizeSubmissions(err2, method, null, null, formResponse);
        });
      } // ... and when the enableAutoSubmission option is false,
      // then that can mean, leave it to the framework to process with the form
      // validation/handling/submission itself. for example the ninja form
      // will want to highlight which one input are wrong.

    } else {
      startSubmission();
      submitVideomail(formData, method, submitVideomailCallback);
    }
  };

  this.isBuilt = function () {
    return built;
  };

  this.isReplayShown = function () {
    return visuals.isReplayShown();
  };

  this.isDirty = function () {
    var isDirty = false;

    if (form) {
      if (visuals.isRecorderUnloaded()) {
        isDirty = false;
      } else if (this.isReplayShown() || this.isPaused()) {
        isDirty = true;
      }
    }

    return isDirty;
  };

  this.getReplay = function () {
    return visuals.getReplay();
  };

  this.isOutsideElementOf = function (element) {
    return element.parentNode !== containerElement && element !== containerElement;
  };

  this.hideForm = function (params) {
    // form check needed, see https://github.com/binarykitchen/videomail-client/issues/127
    form && form.hide();
    buttons && buttons.hide(params);
  };

  this.loadForm = function (videomail) {
    if (form) {
      form.loadVideomail(videomail);
      this.validate();
    }
  };

  this.enableAudio = function () {
    options.setAudioEnabled(true);
    this.emit(_events.default.ENABLING_AUDIO);
  };

  this.disableAudio = function () {
    options.setAudioEnabled(false);
    this.emit(_events.default.DISABLING_AUDIO);
  };

  this.submit = function () {
    lastValidation && form && form.doTheSubmit();
  };

  this.isCountingDown = visuals.isCountingDown.bind(visuals);
  this.isRecording = visuals.isRecording.bind(visuals);
  this.record = visuals.record.bind(visuals);
  this.resume = visuals.resume.bind(visuals);
  this.stop = visuals.stop.bind(visuals);
  this.recordAgain = visuals.recordAgain.bind(visuals);
};

_util.default.inherits(Container, _eventEmitter.default);

var _default = Container;
exports.default = _default;

},{"./../events":88,"./../resource":90,"./../styles/css/main.min.css.js":91,"./../util/eventEmitter":95,"./../util/videomailError":100,"./buttons":101,"./dimension":103,"./form":104,"./optionsWrapper":105,"./visuals":106,"document-visibility":19,"hidden":31,"insert-css":37,"util":80}],103:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _numberIsInteger = _interopRequireDefault(_dereq_("number-is-integer"));

var _videomailError = _interopRequireDefault(_dereq_("./../util/videomailError"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getOuterWidth(element) {
  var outerWidth = 0;
  var rect = element.getBoundingClientRect();

  if (rect) {
    outerWidth = rect.right - rect.left;
  }

  if (outerWidth < 1) {
    // last effort, can happen when replaying only
    rect = document.body.getBoundingClientRect();
    outerWidth = rect.right - rect.left;
  }

  return outerWidth;
}

function figureMinHeight(height, options) {
  if (options.hasDefinedHeight()) {
    if (!height) {
      height = options.video.height;
    } else {
      height = Math.min(options.video.height, height);
    }
  }

  if ((0, _numberIsInteger.default)(height) && height < 1) {
    throw _videomailError.default.create('Got a video height less than 1 (' + height + ') while figuring out the minimum!', options);
  } // just return it, can be "auto"


  return height;
}

var _default = {
  limitWidth: function limitWidth(element, width, options) {
    var limitedWidth;
    var outerWidth = getOuterWidth(element);

    if (width) {
      // only when that element has a defined width, apply this logic
      limitedWidth = outerWidth > 0 && outerWidth < width ? outerWidth : width;
    } else {
      // else apply the outer width when the element has no defined width yet
      limitedWidth = outerWidth;
    }

    if ((0, _numberIsInteger.default)(limitedWidth) && limitedWidth < 1) {
      throw _videomailError.default.create('Limited width cannot be less than 1!', options);
    } else {
      return limitedWidth;
    }
  },
  // this is difficult to compute and is not entirely correct.
  // but good enough for now to ensure some stability.
  limitHeight: function limitHeight(height, options) {
    if ((0, _numberIsInteger.default)(height) && height < 1) {
      throw _videomailError.default.create('Passed limit-height argument cannot be less than 1!', options);
    } else {
      var limitedHeight = Math.min(height, // document.body.scrollHeight,
      document.documentElement.clientHeight);

      if (limitedHeight < 1) {
        throw _videomailError.default.create('Limited height cannot be less than 1!', options);
      } else {
        return limitedHeight;
      }
    }
  },
  calculateWidth: function calculateWidth(options) {
    var height = options.videoHeight || null;
    var ratio = options.ratio || options.getRatio();
    height = figureMinHeight(height, options);

    if (options.responsive) {
      height = this.limitHeight(height, options);
    }

    if ((0, _numberIsInteger.default)(height) && height < 1) {
      throw _videomailError.default.create('Height cannot be smaller than 1 when calculating width.', options);
    } else {
      var calculatedWidth = parseInt(height / ratio);

      if (calculatedWidth < 1) {
        throw _videomailError.default.create('Calculated width cannot be smaller than 1!', options);
      } else {
        return calculatedWidth;
      }
    }
  },
  calculateHeight: function calculateHeight(element, options) {
    var width = options.videoWidth || null;
    var height;
    var ratio = options.ratio || options.getRatio();

    if (options.hasDefinedWidth()) {
      width = options.video.width;
    }

    if ((0, _numberIsInteger.default)(width) && width < 1) {
      throw _videomailError.default.create('Unable to calculate height when width is less than 1.', options);
    } else if (options.responsive) {
      width = this.limitWidth(element, width, options);
    }

    if (width) {
      height = parseInt(width * ratio);
    }

    if ((0, _numberIsInteger.default)(height) && height < 1) {
      throw _videomailError.default.create('Just calculated a height less than 1 which is wrong.', options);
    } else {
      return figureMinHeight(height, options);
    }
  }
};
exports.default = _default;

},{"./../util/videomailError":100,"number-is-integer":46}],104:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _hyperscript = _interopRequireDefault(_dereq_("hyperscript"));

var _util = _interopRequireDefault(_dereq_("util"));

var _hidden = _interopRequireDefault(_dereq_("hidden"));

var _getFormData = _interopRequireDefault(_dereq_("get-form-data"));

var _events = _interopRequireDefault(_dereq_("./../events"));

var _eventEmitter = _interopRequireDefault(_dereq_("./../util/eventEmitter"));

var _videomailError = _interopRequireDefault(_dereq_("./../util/videomailError"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Form = function Form(container, formElement, options) {
  _eventEmitter.default.call(this, options, 'Form');

  var self = this;
  var disableContainerValidation;
  var keyInput;

  function getData() {
    return (0, _getFormData.default)(formElement);
  }

  this.loadVideomail = function (videomail) {
    var limit = formElement.elements.length;
    var input;
    var name;

    for (var i = 0; i < limit; i++) {
      input = formElement.elements[i];
      name = input.name;

      if (videomail[name]) {
        input.value = videomail[name];
      }

      if (name === options.selectors.subjectInputName || name === options.selectors.bodyInputName) {
        input.disabled = true;
      }
    }

    formElement.setAttribute('method', 'put');
  };

  function isNotButton(element) {
    return element.tagName !== 'BUTTON' && element.type !== 'submit';
  }

  function setDisabled(disabled, buttonsToo) {
    var limit = formElement.elements.length;

    for (var i = 0; i < limit; i++) {
      if (buttonsToo || !buttonsToo && isNotButton(formElement.elements[i])) {
        formElement.elements[i].disabled = disabled;
      }
    }
  }

  function hideAll() {
    var limit = formElement.elements.length;

    for (var i = 0; i < limit; i++) {
      (0, _hidden.default)(formElement.elements[i], true);
    }

    (0, _hidden.default)(formElement, true);
  }

  function getInputElements() {
    return formElement.querySelectorAll('input, textarea');
  }

  function getSelectElements() {
    return formElement.querySelectorAll('select');
  }

  this.disable = function (buttonsToo) {
    setDisabled(true, buttonsToo);
  };

  this.enable = function (buttonsToo) {
    setDisabled(false, buttonsToo);
  };

  this.build = function () {
    if (options.enableAutoValidation) {
      var inputElements = getInputElements();
      var inputElement;

      for (var i = 0, len = inputElements.length; i < len; i++) {
        inputElement = inputElements[i];

        if (inputElement.type === 'radio') {
          inputElement.addEventListener('change', function () {
            container.validate();
          });
        } else {
          inputElement.addEventListener('input', function () {
            container.validate();
          });
        } // because of angular's digest cycle, validate again when it became invalid


        inputElement.addEventListener('invalid', function () {
          if (!disableContainerValidation) {
            container.validate();
          }
        });
      }

      var selectElements = getSelectElements();

      for (var j = 0, len2 = selectElements.length; j < len2; j++) {
        selectElements[j].addEventListener('change', function () {
          container.validate();
        });
      }
    }

    keyInput = formElement.querySelector('input[name="' + options.selectors.keyInputName + '"]');

    if (!keyInput) {
      keyInput = (0, _hyperscript.default)('input', {
        name: options.selectors.keyInputName,
        type: 'hidden'
      });
      formElement.appendChild(keyInput);
    }

    this.on(_events.default.PREVIEW, function (videomailKey) {
      // beware that preview doesn't always come with a key, i.E.
      // container.show() can emit PREVIEW without a key when a replay already exists
      // (can happen when showing - hiding - showing videomail over again)
      // only emit error if key is missing AND the input has no key (value) yet
      if (!videomailKey && !keyInput.value) {
        self.emit(_events.default.ERROR, _videomailError.default.create('Videomail key for preview is missing!', options));
      } else if (videomailKey) {
        keyInput.value = videomailKey;
      } // else
      // leave as it and use existing keyInput.value

    }); // fixes https://github.com/binarykitchen/videomail-client/issues/91

    this.on(_events.default.GOING_BACK, function () {
      keyInput.value = null;
    });
    this.on(_events.default.ERROR, function (err) {
      // since https://github.com/binarykitchen/videomail-client/issues/60
      // we hide areas to make it easier for the user to process an error
      // (= less distractions)
      if (err.hideForm && err.hideForm() && options.adjustFormOnBrowserError) {
        hideAll();
      } else if (err.hideButtons && err.hideButtons() && options.adjustFormOnBrowserError) {
        hideSubmitButton();
      }
    });
    this.on(_events.default.BUILT, function () {
      startListeningToSubmitEvents();
    });
  };

  function hideSubmitButton() {
    var submitButton = self.findSubmitButton();
    (0, _hidden.default)(submitButton, true);
  }

  function startListeningToSubmitEvents() {
    var submitButton = container.getSubmitButton();
    submitButton.addEventListener('click', self.doTheSubmit.bind(self));
  }

  this.doTheSubmit = function (e) {
    if (e) {
      e.preventDefault();
    } // only submit when there is a container,
    // otherwise do nothing and leave as it


    if (container.hasElement()) {
      container.submitAll(getData(), formElement.getAttribute('method'), formElement.getAttribute('action'));
    }

    return false; // important to stop submission
  };

  this.getInvalidElement = function () {
    var inputElements = getInputElements();

    for (var i = 0, len = inputElements.length; i < len; i++) {
      if (!inputElements[i].validity.valid) {
        return inputElements[i];
      }
    }

    var selectElements = getSelectElements();

    for (var j = 0, len2 = selectElements.length; j < len2; j++) {
      if (!selectElements[i].validity.valid) {
        return selectElements[j];
      }
    }

    return null;
  };

  this.validate = function () {
    // prevents endless validation loop
    disableContainerValidation = true;
    var formIsValid = formElement.checkValidity();
    disableContainerValidation = false;
    return formIsValid;
  };

  this.findSubmitButton = function () {
    return formElement.querySelector("[type='submit']");
  };

  this.hide = function () {
    formElement && (0, _hidden.default)(formElement, true);
  };

  this.show = function () {
    formElement && (0, _hidden.default)(formElement, false);
  };
};

_util.default.inherits(Form, _eventEmitter.default);

var _default = Form;
exports.default = _default;

},{"./../events":88,"./../util/eventEmitter":95,"./../util/videomailError":100,"get-form-data":26,"hidden":31,"hyperscript":33,"util":80}],105:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _deepmerge = _interopRequireDefault(_dereq_("deepmerge"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// enhances options with useful functions we can reuse everywhere
var _default = {
  addFunctions: function addFunctions(options) {
    var audioEnabled = options.audio && options.audio.enabled;

    options.hasDefinedHeight = function () {
      return this.video.height && this.video.height !== 'auto';
    };

    options.hasDefinedWidth = function () {
      return this.video.width && this.video.width !== 'auto';
    };

    options.hasDefinedDimension = function () {
      return this.hasDefinedWidth() || this.hasDefinedHeight();
    };

    options.hasDefinedDimensions = function () {
      return this.hasDefinedWidth() && this.hasDefinedHeight();
    };

    options.getRatio = function () {
      var ratio = 1; // just a default one when no computations are possible
      // todo fix this, it's not really an option

      var hasVideoDimensions = this.videoHeight && this.videoWidth;

      if (this.hasDefinedDimensions()) {
        if (hasVideoDimensions) {
          // figure out first which one to pick
          if (this.videoHeight < this.video.height || this.videoWidth < this.video.width) {
            ratio = this.videoHeight / this.videoWidth;
          } else {
            ratio = this.video.height / this.video.width;
          }
        } else {
          ratio = this.video.height / this.video.width;
        }
      } else if (hasVideoDimensions) {
        ratio = this.videoHeight / this.videoWidth;
      }

      return ratio;
    };

    options.isAudioEnabled = function () {
      return audioEnabled;
    };

    options.setAudioEnabled = function (enabled) {
      audioEnabled = enabled;
    };

    options.isAutoPauseEnabled = function () {
      return this.enableAutoPause && this.enablePause;
    };
  },
  // not very elegant but works! and if you here are reading this, and
  // start to doubt, rest assured, it's solid and run thousand times over
  // and over again each day. and other large sites out there have their own
  // tech debts. hope i have shattered your illusion on perfection?
  merge: function merge(defaultOptions, newOptions) {
    var options = (0, _deepmerge.default)(defaultOptions, newOptions, {
      arrayMerge: function arrayMerge(destination, source) {
        return source;
      }
    });
    this.addFunctions(options);
    return options;
  }
};
exports.default = _default;

},{"deepmerge":16}],106:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = _interopRequireDefault(_dereq_("util"));

var _hyperscript = _interopRequireDefault(_dereq_("hyperscript"));

var _hidden = _interopRequireDefault(_dereq_("hidden"));

var _replay = _interopRequireDefault(_dereq_("./visuals/replay"));

var _recorder = _interopRequireDefault(_dereq_("./visuals/recorder"));

var _notifier = _interopRequireDefault(_dereq_("./visuals/notifier"));

var _recorderInsides = _interopRequireDefault(_dereq_("./visuals/inside/recorderInsides"));

var _eventEmitter = _interopRequireDefault(_dereq_("./../util/eventEmitter"));

var _events = _interopRequireDefault(_dereq_("./../events"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Visuals = function Visuals(container, options) {
  _eventEmitter.default.call(this, options, 'Visuals');

  var self = this; // can be overwritten with setter fn

  var replay = new _replay.default(this, options);
  var recorder = new _recorder.default(this, replay, options);
  var recorderInsides = new _recorderInsides.default(this, options);
  var notifier = new _notifier.default(this, options);
  var debug = options.debug;
  var visualsElement;
  var built;

  function buildNoScriptTag() {
    var noScriptElement = container.querySelector('noscript');

    if (!noScriptElement) {
      noScriptElement = (0, _hyperscript.default)('noscript');
      noScriptElement.innerHTML = 'Please enable Javascript';
      visualsElement.appendChild(noScriptElement);
    }
  }

  function buildChildren() {
    debug('Visuals: buildChildren()');
    buildNoScriptTag();

    if (!options.playerOnly) {
      notifier.build();
      recorderInsides.build();
    }

    replay.build();
    debug('Visuals: built.');
  }

  function initEvents() {
    if (!options.playerOnly) {
      debug('Visuals: initEvents()');
      self.on(_events.default.USER_MEDIA_READY, function () {
        built = true;
        self.endWaiting();
        container.enableForm(false);
      }).on(_events.default.PREVIEW, function () {
        self.endWaiting();
      }).on(_events.default.BLOCKING, function (blockingOptions) {
        if (!blockingOptions.hideForm && !options.adjustFormOnBrowserError) {// do nothing, user still can enter form inputs
          // can be useful when you are on i.E. seeflow's contact page and
          // still want to tick off the webcam option
        } else {
          container.disableForm(true);
        }
      }).on(_events.default.PREVIEW_SHOWN, function () {
        container.validate(true);
      }).on(_events.default.LOADED_META_DATA, function () {
        correctDimensions();
      }).on(_events.default.ERROR, function (err) {
        if (err.removeDimensions && err.removeDimensions()) {
          removeDimensions();
        }
      });
    }
  }

  function correctDimensions() {
    visualsElement.style.width = self.getRecorderWidth(true) + 'px';
    visualsElement.style.height = self.getRecorderHeight(true) + 'px';
  }

  function removeDimensions() {
    visualsElement.style.width = 'auto';
    visualsElement.style.height = 'auto';
  }

  this.getRatio = function () {
    if (visualsElement.clientWidth) {
      // special case for safari, see getRatio() in recorder
      return visualsElement.clientHeight / visualsElement.clientWidth;
    } else {
      return 0;
    }
  };

  function isRecordable() {
    return !self.isNotifying() && !replay.isShown() && !self.isCountingDown();
  }

  this.isCountingDown = function () {
    return recorderInsides.isCountingDown();
  };

  this.build = function () {
    visualsElement = container.querySelector('.' + options.selectors.visualsClass);

    if (!visualsElement) {
      visualsElement = (0, _hyperscript.default)('div.' + options.selectors.visualsClass);
      var buttonsElement = container.querySelector('.' + options.selectors.buttonsClass); // make sure it's placed before the buttons, but only if it's a child
      // element of the container = inside the container

      if (buttonsElement && !container.isOutsideElementOf(buttonsElement)) {
        container.insertBefore(visualsElement, buttonsElement);
      } else {
        container.appendChild(visualsElement);
      }
    } // do not hide visuals element so that apps can give it a predefined
    // width or height through css but hide all children


    visualsElement.classList.add('visuals');
    correctDimensions();
    !built && initEvents();
    buildChildren(); // needed for replay handling and container.isOutsideElementOf()

    self.parentNode = visualsElement.parentNode;
    built = true;
  };

  this.querySelector = function (selector) {
    return visualsElement && visualsElement.querySelector(selector);
  };

  this.appendChild = function (child) {
    visualsElement && visualsElement.appendChild(child);
  };

  this.removeChild = function (child) {
    visualsElement.removeChild(child);
  };

  this.reset = function () {
    this.endWaiting();
    recorder.reset();
  };

  this.beginWaiting = function () {
    container.beginWaiting();
  };

  this.endWaiting = function () {
    container.endWaiting();
  };

  this.stop = function (params) {
    recorder.stop(params);
    recorderInsides.hidePause();
  };

  this.back = function (params, cb) {
    if (!cb && params) {
      cb = params;
      params = {};
    }

    replay.hide();
    notifier.hide();

    if (params.keepHidden) {
      recorder.hide();
      cb && cb();
    } else {
      recorder.back(cb);
    }
  };

  this.recordAgain = function () {
    this.back(function () {
      self.once(_events.default.USER_MEDIA_READY, function () {
        self.record();
      });
    });
  };

  this.unload = function (e) {
    try {
      recorder.unload(e);
      recorderInsides.unload(e);
      replay.unload(e);
      built = false;
    } catch (exc) {
      this.emit(_events.default.ERROR, exc);
    }
  };

  this.isNotifying = function () {
    return notifier.isVisible();
  };

  this.isReplayShown = function () {
    return replay.isShown();
  };

  this.pause = function (params) {
    recorder.pause(params);
    recorderInsides.showPause();
  };

  this.resume = function () {
    if (recorderInsides.isCountingDown()) {
      recorderInsides.resumeCountdown();
    } else {
      recorder.resume();
    }

    recorderInsides.hidePause();
  };

  this.pauseOrResume = function () {
    if (isRecordable.call(this)) {
      if (this.isRecording()) {
        this.pause();
      } else if (recorder.isPaused()) {
        this.resume();
      } else if (recorder.isReady()) {
        this.record();
      }
    }
  };

  this.recordOrStop = function () {
    if (isRecordable()) {
      if (this.isRecording()) {
        this.stop();
      } else if (recorder.isReady()) {
        this.record();
      }
    }
  };

  this.record = function () {
    if (options.video.countdown) {
      this.emit(_events.default.COUNTDOWN);
      recorderInsides.startCountdown(recorder.record.bind(recorder));
    } else {
      recorder.record();
    }
  };

  this.getRecorder = function () {
    return recorder;
  };

  this.getReplay = function () {
    return replay;
  };

  this.validate = function () {
    return recorder.validate() && this.isReplayShown();
  };

  this.getRecordingStats = function () {
    return recorder.getRecordingStats();
  };

  this.getAudioSampleRate = function () {
    return recorder.getAudioSampleRate();
  };

  this.isPaused = function () {
    return recorder.isPaused();
  };

  this.error = function (err) {
    notifier.error(err);
  };

  this.hide = function () {
    if (visualsElement) {
      (0, _hidden.default)(visualsElement, true);
      this.emit(_events.default.HIDE);
    }
  };

  this.isHidden = function () {
    if (!built) {
      return true;
    } else if (visualsElement) {
      return (0, _hidden.default)(visualsElement);
    }
  };

  this.showVisuals = function () {
    visualsElement && (0, _hidden.default)(visualsElement, false);
  };

  this.show = function () {
    !this.isReplayShown() && visualsElement && recorder.build();
    this.showVisuals();
  };

  this.showReplayOnly = function () {
    !this.isReplayShown() && replay.show();
    this.show();
    recorder.hide();
    notifier.hide();
  };

  this.isRecorderUnloaded = function () {
    return recorder.isUnloaded();
  };

  this.isConnecting = function () {
    return recorder.isConnecting();
  };

  this.getRecorderWidth = function (responsive) {
    return recorder.getRecorderWidth(responsive);
  };

  this.getRecorderHeight = function (responsive) {
    return recorder.getRecorderHeight(responsive);
  };

  this.limitWidth = function (width) {
    return container.limitWidth(width, options);
  };

  this.limitHeight = function (height) {
    return container.limitHeight(height);
  };

  this.calculateWidth = function (options) {
    return container.calculateWidth(options);
  };

  this.calculateHeight = function (options) {
    return container.calculateHeight(options);
  };

  this.getReplay = function () {
    return replay;
  };

  this.getBoundingClientRect = function () {
    // fixes https://github.com/binarykitchen/videomail-client/issues/126
    return visualsElement && visualsElement.getBoundingClientRect();
  };

  this.checkTimer = function (intervalSum) {
    recorderInsides.checkTimer(intervalSum);
  };

  this.isNotifierBuilt = function () {
    return notifier && notifier.isBuilt();
  };

  this.isReplayShown = replay.isShown.bind(replay);
  this.hideReplay = replay.hide.bind(replay);
  this.hideRecorder = recorder.hide.bind(recorder);
  this.isRecording = recorder.isRecording.bind(recorder);
  this.isUserMediaLoaded = recorder.isUserMediaLoaded.bind(recorder);
  this.isConnected = recorder.isConnected.bind(recorder);
};

_util.default.inherits(Visuals, _eventEmitter.default);

var _default = Visuals;
exports.default = _default;

},{"./../events":88,"./../util/eventEmitter":95,"./visuals/inside/recorderInsides":111,"./visuals/notifier":112,"./visuals/recorder":113,"./visuals/replay":114,"hidden":31,"hyperscript":33,"util":80}],107:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _hyperscript = _interopRequireDefault(_dereq_("hyperscript"));

var _hidden = _interopRequireDefault(_dereq_("hidden"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(visuals, options) {
  var self = this;
  var countdownElement;
  var intervalId;
  var countdown;
  var paused;

  function fire(cb) {
    self.unload();
    self.hide(); // keep all callbacks async

    setTimeout(function () {
      cb();
    }, 0);
  }

  function countBackward(cb) {
    if (!paused) {
      options.debug('Countdown', countdown);
      countdown--;

      if (countdown < 1) {
        fire(cb);
      } else {
        countdownElement.innerHTML = countdown;
      }
    }
  }

  this.start = function (cb) {
    countdownElement.innerHTML = countdown = options.video.countdown;
    this.show();
    intervalId = setInterval(countBackward.bind(this, cb), 950);
  };

  this.pause = function () {
    paused = true;
  };

  this.resume = function () {
    paused = false;
  };

  this.build = function () {
    countdownElement = visuals.querySelector('.countdown');

    if (!countdownElement) {
      countdownElement = (0, _hyperscript.default)('p.countdown');
      this.hide();
      visuals.appendChild(countdownElement);
    } else {
      this.hide();
    }
  };

  this.show = function () {
    (0, _hidden.default)(countdownElement, false);
  };

  this.isCountingDown = function () {
    return !!intervalId;
  };

  this.unload = function () {
    clearInterval(intervalId);
    paused = false;
    intervalId = null;
  };

  this.hide = function () {
    (0, _hidden.default)(countdownElement, true);
    this.unload();
  };
}

},{"hidden":31,"hyperscript":33}],108:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _hyperscript = _interopRequireDefault(_dereq_("hyperscript"));

var _hidden = _interopRequireDefault(_dereq_("hidden"));

var _videomailError = _interopRequireDefault(_dereq_("./../../../../util/videomailError"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(visuals, options) {
  if (!options.text.pausedHeader) {
    throw _videomailError.default.create('Paused header cannot be empty', options);
  }

  var pausedBlockElement;
  var pausedHeaderElement;
  var pausedHintElement;

  function hasPausedHint() {
    return options.text.pausedHint;
  }

  this.build = function () {
    pausedBlockElement = visuals.querySelector('.paused');
    pausedHeaderElement = visuals.querySelector('.pausedHeader');

    if (!pausedHeaderElement) {
      pausedBlockElement = (0, _hyperscript.default)('div.paused');
      pausedHeaderElement = (0, _hyperscript.default)('p.pausedHeader');
      this.hide();
      pausedHeaderElement.innerHTML = options.text.pausedHeader;
      pausedBlockElement.appendChild(pausedHeaderElement);

      if (hasPausedHint()) {
        pausedHintElement = visuals.querySelector('.pausedHint');
        pausedHintElement = (0, _hyperscript.default)('p.pausedHint');
        pausedHintElement.innerHTML = options.text.pausedHint;
        pausedBlockElement.appendChild(pausedHintElement);
      }

      visuals.appendChild(pausedBlockElement);
    } else {
      this.hide();
      pausedHeaderElement.innerHTML = options.text.pausedHeader;

      if (hasPausedHint()) {
        pausedHintElement.innerHTML = options.text.pausedHint;
      }
    }
  };

  this.hide = function () {
    (0, _hidden.default)(pausedBlockElement, true);
  };

  this.show = function () {
    (0, _hidden.default)(pausedBlockElement, false);
  };
}

},{"./../../../../util/videomailError":100,"hidden":31,"hyperscript":33}],109:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _hyperscript = _interopRequireDefault(_dereq_("hyperscript"));

var _hidden = _interopRequireDefault(_dereq_("hidden"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(visuals) {
  var recordNoteElement;

  this.build = function () {
    recordNoteElement = visuals.querySelector('.recordNote');

    if (!recordNoteElement) {
      recordNoteElement = (0, _hyperscript.default)('p.recordNote');
      this.hide();
      visuals.appendChild(recordNoteElement);
    } else {
      this.hide();
    }
  };

  this.stop = function () {
    this.hide();
    recordNoteElement.classList.remove('near');
    recordNoteElement.classList.remove('nigh');
  };

  this.setNear = function () {
    recordNoteElement.classList.add('near');
  };

  this.setNigh = function () {
    recordNoteElement.classList.add('nigh');
  };

  this.hide = function () {
    (0, _hidden.default)(recordNoteElement, true);
  };

  this.show = function () {
    (0, _hidden.default)(recordNoteElement, false);
  };
}

},{"hidden":31,"hyperscript":33}],110:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _hyperscript = _interopRequireDefault(_dereq_("hyperscript"));

var _hidden = _interopRequireDefault(_dereq_("hidden"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(visuals, recordNote, options) {
  var recordTimerElement;
  var nearComputed = false;
  var endNighComputed = false;
  var started;
  var countdown;

  function pad(n) {
    return n < 10 ? '0' + n : n;
  }

  function thresholdReached(secs, threshold) {
    return secs >= options.video.limitSeconds * threshold;
  }

  function isNear(secs) {
    if (!nearComputed && thresholdReached(secs, 0.6)) {
      nearComputed = true;
      return true;
    } else {
      return false;
    }
  }

  function endIsNigh(secs) {
    if (!endNighComputed && thresholdReached(secs, 0.8)) {
      endNighComputed = true;
      return true;
    } else {
      return false;
    }
  }

  function setNear() {
    recordTimerElement.classList.add('near');
  }

  function setNigh() {
    recordTimerElement.classList.add('nigh');
  }

  this.check = function (opts) {
    var newCountdown = getStartSeconds() - Math.floor(opts.intervalSum / 1e3); // performance optimisation (another reason we need react here!)

    if (newCountdown !== countdown) {
      countdown = newCountdown;
      update();
      countdown < 1 && visuals.stop(true);
    }
  };

  function update() {
    var mins = parseInt(countdown / 60, 10);
    var secs = countdown - mins * 60;

    if (!nearComputed || !endNighComputed) {
      var remainingSeconds = options.video.limitSeconds - countdown;

      if (isNear(remainingSeconds)) {
        recordNote.setNear();
        setNear();
        options.debug('End is near, ' + countdown + ' seconds to go');
      } else if (endIsNigh(remainingSeconds)) {
        recordNote.setNigh();
        setNigh();
        options.debug('End is nigh, ' + countdown + ' seconds to go');
      }
    }

    recordTimerElement.innerHTML = mins + ':' + pad(secs);
  }

  function hide() {
    (0, _hidden.default)(recordTimerElement, true);
  }

  function show() {
    recordTimerElement.classList.remove('near');
    recordTimerElement.classList.remove('nigh');
    (0, _hidden.default)(recordTimerElement, false);
  }

  function getSecondsRecorded() {
    return getStartSeconds() - countdown;
  }

  function getStartSeconds() {
    return options.video.limitSeconds;
  }

  this.start = function () {
    countdown = getStartSeconds();
    nearComputed = endNighComputed = false;
    started = true;
    update();
    show();
  };

  this.pause = function () {
    recordNote.hide();
  };

  this.resume = function () {
    recordNote.show();
  };

  function isStopped() {
    return countdown === null;
  }

  this.stop = function () {
    if (!isStopped() && started) {
      options.debug('Stopping record timer. Was recording for about ~' + getSecondsRecorded() + ' seconds.');
      hide();
      recordNote.stop();
      countdown = null;
      started = false;
    }
  };

  this.build = function () {
    recordTimerElement = visuals.querySelector('.recordTimer');

    if (!recordTimerElement) {
      recordTimerElement = (0, _hyperscript.default)('p.recordTimer');
      hide();
      visuals.appendChild(recordTimerElement);
    } else {
      hide();
    }
  };
}

},{"hidden":31,"hyperscript":33}],111:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = _interopRequireDefault(_dereq_("util"));

var _events = _interopRequireDefault(_dereq_("./../../../events"));

var _eventEmitter = _interopRequireDefault(_dereq_("./../../../util/eventEmitter"));

var _countdown = _interopRequireDefault(_dereq_("./recorder/countdown"));

var _pausedNote = _interopRequireDefault(_dereq_("./recorder/pausedNote"));

var _recordNote = _interopRequireDefault(_dereq_("./recorder/recordNote"));

var _recordTimer = _interopRequireDefault(_dereq_("./recorder/recordTimer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RecorderInsides = function RecorderInsides(visuals, options) {
  _eventEmitter.default.call(this, options, 'RecorderInsides');

  var self = this;
  var debug = options.debug;
  var recordNote = new _recordNote.default(visuals);
  var recordTimer = new _recordTimer.default(visuals, recordNote, options);
  var countdown;
  var pausedNote;
  var built;

  if (options.video.countdown) {
    countdown = new _countdown.default(visuals, options);
  }

  if (options.enablePause) {
    pausedNote = new _pausedNote.default(visuals, options);
  }

  function startRecording() {
    recordTimer.start();
  }

  function resumeRecording() {
    recordTimer.resume();
  }

  function stopRecording() {
    recordTimer.stop();
  }

  function pauseRecording() {
    if (self.isCountingDown()) {
      countdown.pause();
    } else {
      recordTimer.pause();
    }
  }

  function onResetting() {
    self.hidePause();
    self.hideCountdown();
    recordTimer.stop();
  }

  function initEvents() {
    debug('RecorderInsides: initEvents()');
    self.on(_events.default.RECORDING, function () {
      startRecording();
    }).on(_events.default.RESUMING, function () {
      resumeRecording();
    }).on(_events.default.STOPPING, function () {
      stopRecording();
    }).on(_events.default.PAUSED, function () {
      pauseRecording();
    }).on(_events.default.RESETTING, onResetting).on(_events.default.HIDE, function () {
      self.hideCountdown();
    });
  }

  this.build = function () {
    debug('RecorderInsides: build()');
    countdown && countdown.build();
    pausedNote && pausedNote.build();
    recordNote.build();
    recordTimer.build();
    !built && initEvents();
    built = true;
  };

  this.unload = function () {
    countdown && countdown.unload();
    built = false;
  };

  this.showPause = function () {
    pausedNote && pausedNote.show();
  };

  this.hidePause = function () {
    pausedNote && pausedNote.hide();
  };

  this.hideCountdown = function () {
    countdown && countdown.hide();
  };

  this.startCountdown = function (cb) {
    countdown && countdown.start(cb);
  };

  this.resumeCountdown = function () {
    countdown && countdown.resume();
  };

  this.isCountingDown = function () {
    return countdown && countdown.isCountingDown();
  };

  this.checkTimer = function (intervalSum) {
    recordTimer.check(intervalSum);
  };
};

_util.default.inherits(RecorderInsides, _eventEmitter.default);

var _default = RecorderInsides;
exports.default = _default;

},{"./../../../events":88,"./../../../util/eventEmitter":95,"./recorder/countdown":107,"./recorder/pausedNote":108,"./recorder/recordNote":109,"./recorder/recordTimer":110,"util":80}],112:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = _interopRequireDefault(_dereq_("util"));

var _hyperscript = _interopRequireDefault(_dereq_("hyperscript"));

var _hidden = _interopRequireDefault(_dereq_("hidden"));

var _eventEmitter = _interopRequireDefault(_dereq_("./../../util/eventEmitter"));

var _events = _interopRequireDefault(_dereq_("./../../events"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Notifier = function Notifier(visuals, options) {
  _eventEmitter.default.call(this, options, 'Notifier');

  var self = this;
  var debug = options && options.debug;
  var notifyElement;
  var messageElement;
  var explanationElement;
  var entertainTimeoutId;
  var entertaining;
  var built;

  function onStopping(limitReached) {
    var lead = '';
    visuals.beginWaiting();

    if (limitReached) {
      debug('Limit reached');
      lead += options.text.limitReached + '.<br/>';
    }

    lead += options.text.sending + ' …';
    self.notify(lead, null, {
      stillWait: true,
      entertain: options.notifier.entertain
    });
  }

  function onConnecting() {
    self.notify('Connecting …');
  }

  function onLoadingUserMedia() {
    self.notify('Loading webcam …');
  }

  function onProgress(frameProgress, sampleProgress) {
    var overallProgress;

    if (options.isAudioEnabled()) {
      overallProgress = 'Video: ' + frameProgress;

      if (sampleProgress) {
        overallProgress += ', Audio: ' + sampleProgress;
      }
    } else {
      overallProgress = frameProgress;
    }

    self.setExplanation(overallProgress);
  }

  function onBeginVideoEncoding() {
    visuals.beginWaiting();
    var lead = options.text.encoding + ' …';
    self.notify(lead, null, {
      stillWait: true,
      entertain: options.notifier.entertain
    });
    hideExplanation();
  }

  function initEvents() {
    debug('Notifier: initEvents()');
    self.on(_events.default.CONNECTING, function () {
      onConnecting();
    }).on(_events.default.LOADING_USER_MEDIA, function () {
      onLoadingUserMedia();
    }).on(_events.default.USER_MEDIA_READY, function () {
      self.hide();
    }).on(_events.default.LOADED_META_DATA, function () {
      correctDimensions();
    }).on(_events.default.PREVIEW, function () {
      self.hide();
    }).on(_events.default.STOPPING, function (limitReached) {
      onStopping(limitReached);
    }).on(_events.default.PROGRESS, function (frameProgress, sampleProgress) {
      onProgress(frameProgress, sampleProgress);
    }).on(_events.default.BEGIN_VIDEO_ENCODING, function () {
      onBeginVideoEncoding();
    });
  }

  function correctDimensions() {
    notifyElement.style.width = visuals.getRecorderWidth(true) + 'px';
    notifyElement.style.height = visuals.getRecorderHeight(true) + 'px';
  }

  function show() {
    notifyElement && (0, _hidden.default)(notifyElement, false);
  }

  function runEntertainment() {
    if (options.notifier.entertain) {
      if (!entertaining) {
        var randomBackgroundClass = Math.floor(Math.random() * options.notifier.entertainLimit + 1);
        notifyElement.className = 'notifier entertain ' + options.notifier.entertainClass + randomBackgroundClass;
        entertainTimeoutId = setTimeout(runEntertainment, options.notifier.entertainInterval);
        entertaining = true;
      }
    } else {
      cancelEntertainment();
    }
  }

  function cancelEntertainment() {
    if (notifyElement) {
      notifyElement.classList.remove('entertain');
    }

    clearTimeout(entertainTimeoutId);
    entertainTimeoutId = null;
    entertaining = false;
  }

  function setMessage(message, messageOptions) {
    var problem = messageOptions.problem ? messageOptions.problem : false;

    if (messageElement) {
      messageElement.innerHTML = (problem ? '&#x2639; ' : '') + message;
    } else {
      options.logger.warn('Unable to show following because messageElement is empty:', message);
    }
  }

  this.error = function (err) {
    var message = err.message ? err.message.toString() : err.toString();
    var explanation = err.explanation ? err.explanation.toString() : null;

    if (!message) {
      options.debug('Weird empty message generated for error', err);
    }

    self.notify(message, explanation, {
      blocking: true,
      problem: true,
      hideForm: err.hideForm && err.hideForm(),
      classList: err.getClassList && err.getClassList(),
      removeDimensions: err.removeDimensions && err.removeDimensions()
    });
  };

  this.setExplanation = function (explanation) {
    if (!explanationElement) {
      explanationElement = (0, _hyperscript.default)('p');

      if (notifyElement) {
        notifyElement.appendChild(explanationElement);
      } else {
        options.logger.warn('Unable to show explanation because notifyElement is empty:', explanation);
      }
    }

    explanationElement.innerHTML = explanation;
    (0, _hidden.default)(explanationElement, false);
  };

  this.build = function () {
    options.debug('Notifier: build()');
    notifyElement = visuals.querySelector('.notifier');

    if (!notifyElement) {
      notifyElement = (0, _hyperscript.default)('.notifier'); // defaults to div

      this.hide();
      visuals.appendChild(notifyElement);
    } else {
      this.hide();
    }

    !built && initEvents();
    built = true;
  };

  function hideExplanation() {
    if (explanationElement) {
      explanationElement.innerHTML = null;
      (0, _hidden.default)(explanationElement, true);
    }
  }

  this.hide = function () {
    cancelEntertainment();

    if (notifyElement) {
      (0, _hidden.default)(notifyElement, true);
      notifyElement.classList.remove('blocking');
    }

    if (messageElement) {
      messageElement.innerHTML = null;
    }

    hideExplanation();
  };

  this.isVisible = function () {
    if (!built) {
      return false;
    } else {
      return notifyElement && !(0, _hidden.default)(notifyElement);
    }
  };

  this.isBuilt = function () {
    return built;
  };

  this.notify = function (message, explanation, notifyOptions) {
    options.debug('Notifier: notify()');

    if (!notifyOptions) {
      notifyOptions = {};
    }

    var stillWait = notifyOptions.stillWait ? notifyOptions.stillWait : false;
    var entertain = notifyOptions.entertain ? notifyOptions.entertain : false;
    var blocking = notifyOptions.blocking ? notifyOptions.blocking : false;
    var hideForm = notifyOptions.hideForm ? notifyOptions.hideForm : false;
    var classList = notifyOptions.classList ? notifyOptions.classList : false;
    var removeDimensions = notifyOptions.removeDimensions ? notifyOptions.removeDimensions : false;

    if (!messageElement && notifyElement) {
      messageElement = (0, _hyperscript.default)('h2');

      if (explanationElement) {
        notifyElement.insertBefore(messageElement, explanationElement);
      } else {
        notifyElement.appendChild(messageElement);
      }
    }

    if (notifyElement) {
      // reset
      if (!entertain) {
        notifyElement.className = 'notifier';
      }

      if (classList) {
        classList.forEach(function (className) {
          notifyElement.classList.add(className);
        });
      }

      if (removeDimensions) {
        notifyElement.style.width = 'auto';
        notifyElement.style.height = 'auto';
      }
    }

    if (blocking) {
      notifyElement && notifyElement.classList.add('blocking');
      this.emit(_events.default.BLOCKING, {
        hideForm: hideForm
      });
    } else {
      this.emit(_events.default.NOTIFYING);
    }

    visuals.hideReplay();
    visuals.hideRecorder();
    setMessage(message, notifyOptions);

    if (explanation && explanation.length > 0) {
      this.setExplanation(explanation);
    }

    if (entertain) {
      runEntertainment();
    } else {
      cancelEntertainment();
    } // just as a safety in case if an error is thrown in the middle of the build process
    // and visuals aren't built/shown yet.


    visuals.showVisuals();
    show();
    !stillWait && visuals.endWaiting();
  };
};

_util.default.inherits(Notifier, _eventEmitter.default);

var _default = Notifier;
exports.default = _default;

},{"./../../events":88,"./../../util/eventEmitter":95,"hidden":31,"hyperscript":33,"util":80}],113:[function(_dereq_,module,exports){
(function (Buffer){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _websocketStream = _interopRequireDefault(_dereq_("websocket-stream"));

var _canvasToBuffer = _interopRequireDefault(_dereq_("canvas-to-buffer"));

var _util = _interopRequireDefault(_dereq_("util"));

var _hyperscript = _interopRequireDefault(_dereq_("hyperscript"));

var _hidden = _interopRequireDefault(_dereq_("hidden"));

var _animitter = _interopRequireDefault(_dereq_("animitter"));

var _safeJsonStringify = _interopRequireDefault(_dereq_("safe-json-stringify"));

var _userMedia = _interopRequireDefault(_dereq_("./userMedia"));

var _events = _interopRequireDefault(_dereq_("./../../events"));

var _constants = _interopRequireDefault(_dereq_("./../../constants"));

var _eventEmitter = _interopRequireDefault(_dereq_("./../../util/eventEmitter"));

var _browser = _interopRequireDefault(_dereq_("./../../util/browser"));

var _humanize = _interopRequireDefault(_dereq_("./../../util/humanize"));

var _pretty = _interopRequireDefault(_dereq_("./../../util/pretty"));

var _videomailError = _interopRequireDefault(_dereq_("./../../util/videomailError"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// credits http://1lineart.kulaone.com/#/
var PIPE_SYMBOL = '°º¤ø,¸¸,ø¤º°`°º¤ø,¸,ø¤°º¤ø,¸¸,ø¤º°`°º¤ø,¸ ';

var Recorder = function Recorder(visuals, replay, options) {
  _eventEmitter.default.call(this, options, 'Recorder'); // validate some options this class needs


  if (!options || !options.video || !options.video.fps) {
    throw _videomailError.default.create('FPS must be defined', options);
  }

  var self = this;
  var browser = new _browser.default(options);
  var debug = options.debug;
  var loop = null;
  var originalAnimationFrameObject;
  var samplesCount = 0;
  var framesCount = 0;
  var recordingStats = {};
  var confirmedFrameNumber = 0;
  var confirmedSampleNumber = 0;
  var recorderElement;
  var userMedia;
  var userMediaTimeout;
  var retryTimeout;
  var bytesSum;
  var frameProgress;
  var sampleProgress;
  var canvas;
  var ctx;
  var userMediaLoaded;
  var userMediaLoading;
  var submitting;
  var unloaded;
  var stopTime;
  var stream;
  var connecting;
  var connected;
  var blocking;
  var built;
  var key;
  var waitingTime;
  var pingInterval;
  var frame;
  var recordingBufferLength;
  var recordingBuffer;

  function writeStream(buffer, opts) {
    if (stream) {
      if (stream.destroyed) {
        // prevents https://github.com/binarykitchen/videomail.io/issues/393
        stopPings();
        self.emit(_events.default.ERROR, _videomailError.default.create('Already disconnected', 'Sorry, connection to the server has been destroyed. Please reload.', options));
      } else {
        var onFlushedCallback = opts && opts.onFlushedCallback;

        try {
          stream.write(buffer, function () {
            onFlushedCallback && onFlushedCallback(opts);
          });
        } catch (exc) {
          self.emit(_events.default.ERROR, _videomailError.default.create('Failed writing to server', 'stream.write() failed because of ' + (0, _pretty.default)(exc), options));
        }
      }
    }
  }

  function sendPings() {
    pingInterval = window.setInterval(function () {
      debug('Recorder: pinging...');
      writeStream(Buffer.from(''));
    }, options.timeouts.pingInterval);
  }

  function stopPings() {
    clearInterval(pingInterval);
  }

  function onAudioSample(audioSample) {
    samplesCount++;
    var audioBuffer = audioSample.toBuffer(); // if (options.verbose) {
    //     debug(
    //         'Sample #' + samplesCount + ' (' + audioBuffer.length + ' bytes):'
    //     )
    // }

    writeStream(audioBuffer);
  }

  function show() {
    recorderElement && (0, _hidden.default)(recorderElement, false);
  }

  function onUserMediaReady() {
    try {
      debug('Recorder: onUserMediaReady()');
      userMediaLoading = blocking = unloaded = submitting = false;
      userMediaLoaded = true;
      loop = createLoop();
      show();
      self.emit(_events.default.USER_MEDIA_READY, {
        paused: self.isPaused()
      });
    } catch (exc) {
      self.emit(_events.default.ERROR, exc);
    }
  }

  function clearRetryTimeout() {
    debug('Recorder: clearRetryTimeout()');
    retryTimeout && clearTimeout(retryTimeout);
    retryTimeout = null;
  }

  function clearUserMediaTimeout() {
    if (userMediaTimeout) {
      debug('Recorder: clearUserMediaTimeout()');
      userMediaTimeout && clearTimeout(userMediaTimeout);
      userMediaTimeout = null;
    }
  }

  function calculateFrameProgress() {
    return (confirmedFrameNumber / (framesCount || 1) * 100).toFixed(2) + '%';
  }

  function calculateSampleProgress() {
    return (confirmedSampleNumber / (samplesCount || 1) * 100).toFixed(2) + '%';
  }

  function updateOverallProgress() {
    // when progresses aren't initialized,
    // then do a first calculation to avoid `infinite` or `null` displays
    if (!frameProgress) {
      frameProgress = calculateFrameProgress();
    }

    if (!sampleProgress) {
      sampleProgress = calculateSampleProgress();
    }

    self.emit(_events.default.PROGRESS, frameProgress, sampleProgress);
  }

  function updateFrameProgress(args) {
    confirmedFrameNumber = args.frame ? args.frame : confirmedFrameNumber;
    frameProgress = calculateFrameProgress();
    updateOverallProgress();
  }

  function updateSampleProgress(args) {
    confirmedSampleNumber = args.sample ? args.sample : confirmedSampleNumber;
    sampleProgress = calculateSampleProgress();
    updateOverallProgress();
  }

  function preview(args) {
    confirmedFrameNumber = confirmedSampleNumber = samplesCount = framesCount = 0;
    sampleProgress = frameProgress = null;
    key = args.key;

    if (args.mp4) {
      replay.setMp4Source(args.mp4 + _constants.default.SITE_NAME_LABEL + '/' + options.siteName + '/videomail.mp4', true);
    }

    if (args.webm) {
      replay.setWebMSource(args.webm + _constants.default.SITE_NAME_LABEL + '/' + options.siteName + '/videomail.webm', true);
    }

    self.hide();
    var width = self.getRecorderWidth(true);
    var height = self.getRecorderHeight(true);
    self.emit(_events.default.PREVIEW, key, width, height); // keep it for recording stats

    waitingTime = Date.now() - stopTime;
    recordingStats.waitingTime = waitingTime;

    if (options.debug) {
      debug('While recording, %s have been transferred and waiting time was %s', _humanize.default.filesize(bytesSum, 2), _humanize.default.toTime(waitingTime));
    }
  }

  function initSocket(cb) {
    if (!connected) {
      connecting = true;
      debug('Recorder: initialising web socket to %s', options.socketUrl);
      self.emit(_events.default.CONNECTING); // https://github.com/maxogden/websocket-stream#binary-sockets
      // we use query parameters here because we cannot set custom headers in web sockets,
      // see https://github.com/websockets/ws/issues/467

      var url2Connect = options.socketUrl + '?' + encodeURIComponent(_constants.default.SITE_NAME_LABEL) + '=' + encodeURIComponent(options.siteName);

      try {
        // websocket options cannot be set on client side, only on server, see
        // https://github.com/maxogden/websocket-stream/issues/116#issuecomment-296421077
        stream = (0, _websocketStream.default)(url2Connect, {
          perMessageDeflate: false,
          // see https://github.com/maxogden/websocket-stream/issues/117#issuecomment-298826011
          objectMode: true
        });
      } catch (exc) {
        connecting = connected = false;
        var err;

        if (typeof _websocketStream.default === 'undefined') {
          err = _videomailError.default.create('There is no websocket', 'Cause: ' + (0, _pretty.default)(exc), options);
        } else {
          err = _videomailError.default.create('Failed to connect to server', 'Please upgrade your browser. Your current version does not seem to support websockets.', options, {
            browserProblem: true
          });
        }

        self.emit(_events.default.ERROR, err);
      }

      if (stream) {
        // // useful for debugging streams
        //
        // if (!stream.originalEmit) {
        //   stream.originalEmit = stream.emit
        // }
        //
        // stream.emit = function (type) {
        //   if (stream) {
        //     debug(PIPE_SYMBOL + 'Debugging stream event:', type)
        //     var args = Array.prototype.slice.call(arguments, 0)
        //     return stream.originalEmit.apply(stream, args)
        //   }
        // }
        stream.on('close', function (err) {
          debug(PIPE_SYMBOL + 'Stream has closed');
          connecting = connected = false;

          if (err) {
            self.emit(_events.default.ERROR, err || 'Unhandled websocket error');
          } else {
            self.emit(_events.default.DISCONNECTED); // prevents from https://github.com/binarykitchen/videomail.io/issues/297 happening

            cancelAnimationFrame();
          }
        });
        stream.on('connect', function () {
          debug(PIPE_SYMBOL + 'Stream *connect* event emitted');

          if (!connected) {
            connected = true;
            connecting = unloaded = false;
            self.emit(_events.default.CONNECTED);
            debug('Going to ask for webcam permissons now ...');
            cb && cb();
          }
        });
        stream.on('data', function (data) {
          debug(PIPE_SYMBOL + 'Stream *data* event emitted');
          var command;

          try {
            command = JSON.parse(data.toString());
          } catch (exc) {
            debug('Failed to parse command:', exc);
            self.emit(_events.default.ERROR, _videomailError.default.create('Invalid server command', // toString() since https://github.com/binarykitchen/videomail.io/issues/288
            'Contact us asap. Bad commmand was ' + data.toString() + '. ', options));
          } finally {
            executeCommand.call(self, command);
          }
        });
        stream.on('error', function (err) {
          debug(PIPE_SYMBOL + 'Stream *error* event emitted', err);
          connecting = connected = false; // setting custom text since that err object isn't really an error
          // on iphones when locked, and unlocked, this err is actually
          // an event object with stuff we can't use at all (an external bug)

          self.emit(_events.default.ERROR, _videomailError.default.create('Connection error', 'Data exchange has been interrupted. Please reload.', options));
        }); // just experimental

        stream.on('drain', function () {
          debug(PIPE_SYMBOL + 'Stream *drain* event emitted (should not happen!)');
        });
        stream.on('preend', function () {
          debug(PIPE_SYMBOL + 'Stream *preend* event emitted');
        });
        stream.on('end', function () {
          debug(PIPE_SYMBOL + 'Stream *end* event emitted');
        });
        stream.on('drain', function () {
          debug(PIPE_SYMBOL + 'Stream *drain* event emitted');
        });
        stream.on('pipe', function () {
          debug(PIPE_SYMBOL + 'Stream *pipe* event emitted');
        });
        stream.on('unpipe', function () {
          debug(PIPE_SYMBOL + 'Stream *unpipe* event emitted');
        });
        stream.on('resume', function () {
          debug(PIPE_SYMBOL + 'Stream *resume* event emitted');
        });
        stream.on('uncork', function () {
          debug(PIPE_SYMBOL + 'Stream *uncork* event emitted');
        });
        stream.on('readable', function () {
          debug(PIPE_SYMBOL + 'Stream *preend* event emitted');
        });
        stream.on('prefinish', function () {
          debug(PIPE_SYMBOL + 'Stream *preend* event emitted');
        });
        stream.on('finish', function () {
          debug(PIPE_SYMBOL + 'Stream *preend* event emitted');
        });
      }
    }
  }

  function showUserMedia() {
    // use connected flag to prevent this from happening
    // https://github.com/binarykitchen/videomail.io/issues/323
    return connected && (isNotifying() || !isHidden() || blocking);
  }

  function userMediaErrorCallback(err) {
    userMediaLoading = false;
    clearUserMediaTimeout();
    debug('Recorder: userMediaErrorCallback()', ', Webcam characteristics:', userMedia.getCharacteristics());
    var errorListeners = self.listeners(_events.default.ERROR);

    if (errorListeners.length) {
      if (err.name !== _videomailError.default.MEDIA_DEVICE_NOT_SUPPORTED) {
        self.emit(_events.default.ERROR, _videomailError.default.create(err, options));
      } else {
        // do not emit but retry since MEDIA_DEVICE_NOT_SUPPORTED can be a race condition
        debug('Recorder: ignore user media error', err);
      } // retry after a while


      retryTimeout = setTimeout(initSocket, options.timeouts.userMedia);
    } else {
      if (unloaded) {
        // can happen that container is unloaded but some user media related callbacks
        // are still in process. in that case ignore error.
        debug('Recorder: already unloaded. Not going to throw error', err);
      } else {
        debug('Recorder: no error listeners attached but throwing error', err); // weird situation, throw it instead of emitting since there are no error listeners

        throw _videomailError.default.create(err, 'Unable to process this error since there are no error listeners anymore.', options);
      }
    }
  }

  function getUserMediaCallback(localStream) {
    debug('Recorder: getUserMediaCallback()');

    if (showUserMedia()) {
      try {
        clearUserMediaTimeout();
        userMedia.init(localStream, onUserMediaReady.bind(self), onAudioSample.bind(self), function (err) {
          self.emit(_events.default.ERROR, err);
        });
      } catch (exc) {
        self.emit(_events.default.ERROR, exc);
      }
    }
  }

  function loadGenuineUserMedia() {
    if (!navigator) {
      throw new Error('Navigator is missing!');
    }

    debug('Recorder: loadGenuineUserMedia()');
    self.emit(_events.default.ASKING_WEBCAM_PERMISSION); // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia

    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
      // prefer the front camera (if one is available) over the rear one
      var constraints = {
        video: {
          facingMode: options.video.facingMode,
          // default is 'user'
          frameRate: {
            ideal: options.video.fps
          }
        },
        audio: options.isAudioEnabled()
      };

      if (browser.isOkSafari()) {// do not use those width/height constraints yet,
        // current safari would throw an error
        // todo in https://github.com/binarykitchen/videomail-client/issues/142
      } else {
        if (options.hasDefinedWidth()) {
          constraints.video.width = {
            ideal: options.video.width
          };
        } else {
          // otherwise try to apply the same width as the element is having
          // but there is no 100% guarantee that this will happen. not
          // all webcam drivers behave the same way
          constraints.video.width = {
            ideal: self.limitWidth()
          };
        }

        if (options.hasDefinedHeight()) {
          constraints.video.height = {
            ideal: options.video.height
          };
        }
      }

      debug('Recorder: navigator.mediaDevices.getUserMedia()', constraints);
      var genuineUserMediaRequest = navigator.mediaDevices.getUserMedia(constraints);

      if (genuineUserMediaRequest) {
        genuineUserMediaRequest.then(getUserMediaCallback).catch(userMediaErrorCallback);
      } else {
        // this to trap errors like these
        // Cannot read property 'then' of undefined
        // todo retry with navigator.getUserMedia_() maybe?
        throw _videomailError.default.create('Sorry, your browser is unable to use cameras.', 'Try a different browser with better user media functionalities.', options);
      }
    } else {
      debug('Recorder: navigator.getUserMedia()');
      navigator.getUserMedia_({
        video: true,
        audio: options.isAudioEnabled()
      }, getUserMediaCallback, userMediaErrorCallback);
    }
  }

  function loadUserMedia() {
    if (userMediaLoaded) {
      debug('Recorder: skipping loadUserMedia() because it is already loaded');
      onUserMediaReady();
      return false;
    } else if (userMediaLoading) {
      debug('Recorder: skipping loadUserMedia() because it is already asking for permission');
      return false;
    }

    debug('Recorder: loadUserMedia()');
    self.emit(_events.default.LOADING_USER_MEDIA);

    try {
      userMediaTimeout = setTimeout(function () {
        if (!self.isReady()) {
          self.emit(_events.default.ERROR, browser.getNoAccessIssue());
        }
      }, options.timeouts.userMedia);
      userMediaLoading = true;
      loadGenuineUserMedia();
    } catch (exc) {
      debug('Recorder: failed to load genuine user media');
      userMediaLoading = false;
      var errorListeners = self.listeners(_events.default.ERROR);

      if (errorListeners.length) {
        self.emit(_events.default.ERROR, exc);
      } else {
        debug('Recorder: no error listeners attached but throwing exception', exc);
        throw exc; // throw it further
      }
    }
  }

  function executeCommand(command) {
    try {
      debug('Server commanded: %s', command.command, command.args ? ', ' + (0, _safeJsonStringify.default)(command.args) : '');

      switch (command.command) {
        case 'ready':
          if (!userMediaTimeout) {
            loadUserMedia();
          }

          break;

        case 'preview':
          preview(command.args);
          break;

        case 'error':
          this.emit(_events.default.ERROR, _videomailError.default.create('Oh no, server error!', command.args.err.toString() || '(No explanation given)', options));
          break;

        case 'confirmFrame':
          updateFrameProgress(command.args);
          break;

        case 'confirmSample':
          updateSampleProgress(command.args);
          break;

        case 'beginAudioEncoding':
          this.emit(_events.default.BEGIN_AUDIO_ENCODING);
          break;

        case 'beginVideoEncoding':
          this.emit(_events.default.BEGIN_VIDEO_ENCODING);
          break;

        default:
          this.emit(_events.default.ERROR, 'Unknown server command: ' + command.command);
          break;
      }
    } catch (exc) {
      self.emit(_events.default.ERROR, exc);
    }
  }

  function isNotifying() {
    return visuals.isNotifying();
  }

  function isHidden() {
    return !recorderElement || (0, _hidden.default)(recorderElement);
  }

  function writeCommand(command, args, cb) {
    if (!cb && args && args.constructor === Function) {
      cb = args;
      args = null;
    }

    if (!connected) {
      debug('Reconnecting for the command', command, '…');
      initSocket(function () {
        writeCommand(command, args);
        cb && cb();
      });
    } else if (stream) {
      debug('$ %s', command, args ? (0, _safeJsonStringify.default)(args) : '');
      var commandObj = {
        command: command,
        args: args // todo commented out because for some reasons server does not accept such a long
        // array of many log lines. to examine later.
        //
        // add some useful debug info to examine weird stuff like this one
        // UnprocessableError: Unable to encode a video with FPS near zero.
        // todo consider removing this later or have it for debug=1 only?
        //
        // if (options.logger && options.logger.getLines) {
        //   commandObj.logLines = options.logger.getLines()
        // }

      };
      writeStream(Buffer.from((0, _safeJsonStringify.default)(commandObj)));

      if (cb) {
        // keep all callbacks async
        setTimeout(function () {
          cb();
        }, 0);
      }
    }
  }

  function disconnect() {
    if (connected) {
      debug('Recorder: disconnect()');

      if (userMedia) {
        // prevents https://github.com/binarykitchen/videomail-client/issues/114
        userMedia.unloadRemainingEventListeners();
      }

      if (submitting) {
        // server will disconnect socket automatically after submitting
        connecting = connected = false;
      } else if (stream) {
        // force to disconnect socket right now to clean temp files on server
        // event listeners will do the rest
        stream.end();
        stream = undefined;
      }
    }
  }

  function cancelAnimationFrame() {
    loop && loop.dispose();
  }

  function getIntervalSum() {
    return loop.getElapsedTime();
  }

  function getAvgInterval() {
    return getIntervalSum() / framesCount;
  }

  this.getRecordingStats = function () {
    return recordingStats;
  };

  this.getAudioSampleRate = function () {
    return userMedia.getAudioSampleRate();
  };

  this.stop = function (params) {
    debug('stop()', params);
    var limitReached = params.limitReached;
    this.emit(_events.default.STOPPING, limitReached);
    loop.complete();
    stopTime = Date.now();
    recordingStats = {
      avgFps: loop.getFPS(),
      wantedFps: options.video.fps,
      avgInterval: getAvgInterval(),
      wantedInterval: 1e3 / options.video.fps,
      intervalSum: getIntervalSum(),
      framesCount: framesCount,
      videoType: replay.getVideoType()
    };

    if (options.isAudioEnabled()) {
      recordingStats.samplesCount = samplesCount;
      recordingStats.sampleRate = userMedia.getAudioSampleRate();
    }

    writeCommand('stop', recordingStats); // beware, resetting will set framesCount to zero, so leave this here

    this.reset();
  };

  this.back = function (cb) {
    this.emit(_events.default.GOING_BACK);
    show();
    this.reset();
    writeCommand('back', cb);
  };

  function reInitialiseAudio() {
    debug('Recorder: reInitialiseAudio()');
    clearUserMediaTimeout(); // important to free memory

    userMedia && userMedia.stop();
    userMediaLoaded = key = canvas = ctx = null;
    loadUserMedia();
  }

  this.unload = function (e) {
    if (!unloaded) {
      var cause;

      if (e) {
        cause = e.name || e.statusText || e.toString();
      }

      debug('Recorder: unload()' + (cause ? ', cause: ' + cause : ''));
      this.reset();
      clearUserMediaTimeout();
      disconnect();
      unloaded = true;
      built = false;
    }
  };

  this.reset = function () {
    // no need to reset when already unloaded
    if (!unloaded) {
      debug('Recorder: reset()');
      this.emit(_events.default.RESETTING);
      cancelAnimationFrame(); // important to free memory

      userMedia && userMedia.stop();
      replay.reset();
      userMediaLoaded = key = canvas = ctx = waitingTime = null;
    }
  };

  this.validate = function () {
    return connected && framesCount > 0 && canvas === null;
  };

  this.isReady = function () {
    return userMedia.isReady();
  };

  this.pause = function (params) {
    var e = params && params.event;

    if (e instanceof window.Event) {
      params.eventType = e.type;
    }

    debug('pause()', params);
    userMedia.pause();
    loop.stop();
    this.emit(_events.default.PAUSED);
    sendPings();
  };

  this.isPaused = function () {
    return userMedia && userMedia.isPaused();
  };

  this.resume = function () {
    debug('Recorder: resume()');
    stopPings();
    this.emit(_events.default.RESUMING);
    userMedia.resume();
    loop.start();
  };

  function onFlushed(opts) {
    var frameNumber = opts && opts.frameNumber;

    if (frameNumber === 1) {
      self.emit(_events.default.FIRST_FRAME_SENT);
    }
  }

  function createLoop() {
    var newLoop = (0, _animitter.default)({
      fps: options.video.fps
    }, draw); // remember it first

    originalAnimationFrameObject = newLoop.getRequestAnimationFrameObject();
    return newLoop;
  }

  function draw(deltaTime, elapsedTime) {
    try {
      // ctx and stream might become null while unloading
      if (!self.isPaused() && stream && ctx) {
        if (framesCount === 0) {
          self.emit(_events.default.SENDING_FIRST_FRAME);
        }

        framesCount++;
        ctx.drawImage(userMedia.getRawVisuals(), 0, 0, canvas.width, canvas.height);
        recordingBuffer = frame.toBuffer();
        recordingBufferLength = recordingBuffer.length;

        if (recordingBufferLength < 1) {
          throw _videomailError.default.create('Failed to extract webcam data.', options);
        }

        bytesSum += recordingBufferLength;
        writeStream(recordingBuffer, {
          frameNumber: framesCount,
          onFlushedCallback: onFlushed
        }); // if (options.verbose) {
        //   debug(
        //     'Frame #' + framesCount + ' (' + recordingBufferLength + ' bytes):',
        //     ' delta=' + deltaTime + 'ms, ' +
        //     ' elapsed=' + elapsedTime + 'ms'
        //   )
        // }

        visuals.checkTimer({
          intervalSum: elapsedTime
        });
      }
    } catch (exc) {
      self.emit(_events.default.ERROR, exc);
    }
  }

  this.record = function () {
    if (unloaded) {
      return false;
    } // reconnect when needed


    if (!connected) {
      debug('Recorder: reconnecting before recording ...');
      initSocket(function () {
        self.once(_events.default.USER_MEDIA_READY, self.record);
      });
      return false;
    }

    try {
      canvas = userMedia.createCanvas();
    } catch (exc) {
      self.emit(_events.default.ERROR, _videomailError.default.create('Failed to create canvas.', exc, options));
      return false;
    }

    ctx = canvas.getContext('2d');

    if (!canvas.width) {
      self.emit(_events.default.ERROR, _videomailError.default.create('Canvas has an invalid width.', options));
      return false;
    }

    if (!canvas.height) {
      self.emit(_events.default.ERROR, _videomailError.default.create('Canvas has an invalid height.', options));
      return false;
    }

    bytesSum = 0;
    frame = new _canvasToBuffer.default(canvas, options);
    debug('Recorder: record()');
    userMedia.record();
    self.emit(_events.default.RECORDING, framesCount);
    loop.start();
  };

  function setAnimationFrameObject(newObj) {
    // must stop and then start to make it become effective, see
    // https://github.com/hapticdata/animitter/issues/5#issuecomment-292019168
    if (loop) {
      var isRecording = self.isRecording();
      loop.stop();
      loop.setRequestAnimationFrameObject(newObj);

      if (isRecording) {
        loop.start();
      }
    }
  }

  function restoreAnimationFrameObject() {
    debug('Recorder: restoreAnimationFrameObject()');
    setAnimationFrameObject(originalAnimationFrameObject);
  }

  function loopWithTimeouts() {
    debug('Recorder: loopWithTimeouts()');
    var wantedInterval = 1e3 / options.video.fps;
    var processingTime = 0;
    var start;

    function raf(fn) {
      return setTimeout(function () {
        start = Date.now();
        fn();
        processingTime = Date.now() - start;
      }, // reducing wanted interval by respecting the time it takes to
      // compute internally since this is not multi-threaded like
      // requestAnimationFrame
      wantedInterval - processingTime);
    }

    function cancel(id) {
      clearTimeout(id);
    }

    setAnimationFrameObject({
      requestAnimationFrame: raf,
      cancelAnimationFrame: cancel
    });
  }

  function buildElement() {
    recorderElement = (0, _hyperscript.default)('video.' + options.selectors.userMediaClass);
    visuals.appendChild(recorderElement);
  }

  function correctDimensions() {
    if (options.hasDefinedWidth()) {
      recorderElement.width = self.getRecorderWidth(true);
    }

    if (options.hasDefinedHeight()) {
      recorderElement.height = self.getRecorderHeight(true);
    }
  }

  function initEvents() {
    debug('Recorder: initEvents()');
    self.on(_events.default.SUBMITTING, function () {
      submitting = true;
    }).on(_events.default.SUBMITTED, function () {
      submitting = false;
      self.unload();
    }).on(_events.default.BLOCKING, function () {
      blocking = true;
      clearUserMediaTimeout();
    }).on(_events.default.HIDE, function () {
      self.hide();
    }).on(_events.default.LOADED_META_DATA, function () {
      correctDimensions();
    }).on(_events.default.DISABLING_AUDIO, function () {
      reInitialiseAudio();
    }).on(_events.default.ENABLING_AUDIO, function () {
      reInitialiseAudio();
    }).on(_events.default.INVISIBLE, function () {
      loopWithTimeouts();
    }).on(_events.default.VISIBLE, function () {
      restoreAnimationFrameObject();
    });
  }

  this.build = function () {
    var err = browser.checkRecordingCapabilities();

    if (!err) {
      err = browser.checkBufferTypes();
    }

    if (err) {
      this.emit(_events.default.ERROR, err);
    } else {
      recorderElement = visuals.querySelector('video.' + options.selectors.userMediaClass);

      if (!recorderElement) {
        buildElement();
      }

      correctDimensions(); // prevent audio feedback, see
      // https://github.com/binarykitchen/videomail-client/issues/35

      recorderElement.muted = true; // for iphones, see https://github.com/webrtc/samples/issues/929

      recorderElement.setAttribute('playsinline', true);
      recorderElement.setAttribute('webkit-playsinline', 'webkit-playsinline');

      if (!userMedia) {
        userMedia = new _userMedia.default(this, options);
      }

      show();

      if (!built) {
        initEvents();

        if (!connected) {
          initSocket();
        } else {
          loadUserMedia();
        }
      } else {
        loadUserMedia();
      }

      built = true;
    }
  };

  this.isPaused = function () {
    return userMedia && userMedia.isPaused() && !loop.isRunning();
  };

  this.isRecording = function () {
    // checking for stream.destroyed needed since
    // https://github.com/binarykitchen/videomail.io/issues/296
    return loop && loop.isRunning() && !this.isPaused() && !isNotifying() && stream && !stream.destroyed;
  };

  this.hide = function () {
    if (!isHidden()) {
      recorderElement && (0, _hidden.default)(recorderElement, true);
      clearUserMediaTimeout();
      clearRetryTimeout();
    }
  };

  this.isUnloaded = function () {
    return unloaded;
  }; // these two return the true dimensions of the webcam area.
  // needed because on mobiles they might be different.


  this.getRecorderWidth = function (responsive) {
    if (userMedia && userMedia.hasVideoWidth()) {
      return userMedia.getRawWidth(responsive);
    } else if (responsive && options.hasDefinedWidth()) {
      return this.limitWidth(options.video.width);
    }
  };

  this.getRecorderHeight = function (responsive) {
    if (userMedia) {
      return userMedia.getRawHeight(responsive);
    } else if (responsive && options.hasDefinedHeight()) {
      return this.calculateHeight(responsive);
    }
  };

  function getRatio() {
    var ratio;

    if (userMedia) {
      var userMediaVideoWidth = userMedia.getVideoWidth(); // avoid division by zero

      if (userMediaVideoWidth < 1) {
        // use as a last resort fallback computation (needed for safari 11)
        ratio = visuals.getRatio();
      } else {
        ratio = userMedia.getVideoHeight() / userMediaVideoWidth;
      }
    } else {
      ratio = options.getRatio();
    }

    return ratio;
  }

  this.calculateWidth = function (responsive) {
    var videoHeight;

    if (userMedia) {
      videoHeight = userMedia.getVideoHeight();
    } else if (recorderElement) {
      videoHeight = recorderElement.videoHeight || recorderElement.height;
    }

    return visuals.calculateWidth({
      responsive: responsive,
      ratio: getRatio(),
      videoHeight: videoHeight
    });
  };

  this.calculateHeight = function (responsive) {
    var videoWidth;

    if (userMedia) {
      videoWidth = userMedia.getVideoWidth();
    } else if (recorderElement) {
      videoWidth = recorderElement.videoWidth || recorderElement.width;
    }

    return visuals.calculateHeight({
      responsive: responsive,
      ratio: getRatio(),
      videoWidth: videoWidth
    });
  };

  this.getRawVisualUserMedia = function () {
    return recorderElement;
  };

  this.isConnected = function () {
    return connected;
  };

  this.isConnecting = function () {
    return connecting;
  };

  this.limitWidth = function (width) {
    return visuals.limitWidth(width);
  };

  this.limitHeight = function (height) {
    return visuals.limitHeight(height);
  };

  this.isUserMediaLoaded = function () {
    return userMediaLoaded;
  };
};

_util.default.inherits(Recorder, _eventEmitter.default);

var _default = Recorder;
exports.default = _default;

}).call(this,_dereq_("buffer").Buffer)

},{"./../../constants":87,"./../../events":88,"./../../util/browser":93,"./../../util/eventEmitter":95,"./../../util/humanize":96,"./../../util/pretty":98,"./../../util/videomailError":100,"./userMedia":115,"animitter":2,"buffer":8,"canvas-to-buffer":9,"hidden":31,"hyperscript":33,"safe-json-stringify":67,"util":80,"websocket-stream":82}],114:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = _interopRequireDefault(_dereq_("util"));

var _hyperscript = _interopRequireDefault(_dereq_("hyperscript"));

var _hidden = _interopRequireDefault(_dereq_("hidden"));

var _addEventlistenerWithOptions = _interopRequireDefault(_dereq_("add-eventlistener-with-options"));

var _events = _interopRequireDefault(_dereq_("./../../events"));

var _browser = _interopRequireDefault(_dereq_("./../../util/browser"));

var _eventEmitter = _interopRequireDefault(_dereq_("./../../util/eventEmitter"));

var _videomailError = _interopRequireDefault(_dereq_("./../../util/videomailError"));

var _iphoneInlineVideo = _interopRequireDefault(_dereq_("iphone-inline-video"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Replay = function Replay(parentElement, options) {
  _eventEmitter.default.call(this, options, 'Replay');

  var self = this;
  var browser = new _browser.default(options);
  var debug = options.debug;
  var built;
  var replayElement;
  var videomail;

  function buildElement() {
    debug('Replay: buildElement()');
    replayElement = (0, _hyperscript.default)('video.' + options.selectors.replayClass);

    if (!replayElement.setAttribute) {
      throw _videomailError.default.create('Please upgrade browser', options);
    }

    parentElement.appendChild(replayElement);
  }

  function isStandalone() {
    return parentElement.constructor.name === 'HTMLDivElement';
  }

  function copyAttributes(newVideomail) {
    var attributeContainer;
    Object.keys(newVideomail).forEach(function (attribute) {
      attributeContainer = parentElement.querySelector('.' + attribute);

      if (attributeContainer) {
        attributeContainer.innerHTML = newVideomail[attribute];
      }
    });
  }

  function correctDimensions(options) {
    var width, height;

    if (videomail && videomail.playerWidth) {
      width = videomail.playerWidth;
    } else if (parentElement.calculateWidth) {
      width = parentElement.calculateWidth(options);
    }

    if (videomail && videomail.playerHeight) {
      height = videomail.playerHeight;
    } else if (parentElement.calculateHeight) {
      height = parentElement.calculateHeight(options);
    }

    if (width > 0) {
      replayElement.style.width = width + 'px';
    } else {
      replayElement.style.width = 'auto';
    }

    if (height > 0) {
      replayElement.style.height = height + 'px';
    } else {
      replayElement.style.height = 'auto';
    }
  }

  this.setVideomail = function (newVideomail) {
    videomail = newVideomail;

    if (videomail) {
      if (videomail.webm) {
        this.setWebMSource(videomail.webm);
      }

      if (videomail.mp4) {
        this.setMp4Source(videomail.mp4);
      }

      if (videomail.poster) {
        replayElement.setAttribute('poster', videomail.poster);
      }

      copyAttributes(videomail);
    }

    var hasAudio = videomail && videomail.recordingStats && videomail.recordingStats.sampleRate > 0;
    this.show(videomail && videomail.width, videomail && videomail.height, hasAudio);
  };

  this.show = function (recorderWidth, recorderHeight, hasAudio) {
    if (videomail) {
      correctDimensions({
        responsive: true,
        // beware that recorderWidth and recorderHeight can be null sometimes
        videoWidth: recorderWidth || replayElement.videoWidth,
        videoHeight: recorderHeight || replayElement.videoHeight
      });
    }

    (0, _hidden.default)(replayElement, false); // parent element can be any object, be careful!

    if (parentElement) {
      if (parentElement.style) {
        (0, _hidden.default)(parentElement, false);
      } else if (parentElement.show) {
        parentElement.show();
      }
    }

    if (hasAudio) {
      // https://github.com/binarykitchen/videomail-client/issues/115
      // do not set mute to false as this will mess up. just do not mention this attribute at all
      replayElement.setAttribute('volume', 1);
    } else if (!options.isAudioEnabled()) {
      replayElement.setAttribute('muted', true);
    } // this must be called after setting the sources and when becoming visible
    // see https://github.com/bfred-it/iphone-inline-video/issues/16


    _iphoneInlineVideo.default && (0, _iphoneInlineVideo.default)(replayElement, {
      iPad: true
    }); // this forces to actually fetch the videos from the server

    replayElement.load();

    if (!videomail) {
      self.emit(_events.default.PREVIEW_SHOWN);
    } else {
      self.emit(_events.default.REPLAY_SHOWN);
    }
  };

  this.build = function () {
    debug('Replay: build()');
    replayElement = parentElement.querySelector('video.' + options.selectors.replayClass);

    if (!replayElement) {
      buildElement();
    }

    this.hide();
    replayElement.setAttribute('autoplay', true);
    replayElement.setAttribute('autostart', true);
    replayElement.setAttribute('autobuffer', true);
    replayElement.setAttribute('playsinline', true);
    replayElement.setAttribute('webkit-playsinline', 'webkit-playsinline');
    replayElement.setAttribute('controls', 'controls');
    replayElement.setAttribute('preload', 'auto');

    if (!built) {
      if (!isStandalone()) {
        this.on(_events.default.PREVIEW, function (key, recorderWidth, recorderHeight) {
          self.show(recorderWidth, recorderHeight);
        });
      } // makes use of passive option automatically for better performance
      // https://www.npmjs.com/package/add-eventlistener-with-options


      (0, _addEventlistenerWithOptions.default)(replayElement, 'touchstart', function (e) {
        try {
          e && e.preventDefault();
        } catch (exc) {// ignore errors like
          // Unable to preventDefault inside passive event listener invocation.
        }

        if (this.paused) {
          play();
        } else {
          pause();
        }
      });

      replayElement.onclick = function (e) {
        e && e.preventDefault();

        if (this.paused) {
          play();
        } else {
          pause();
        }
      };
    }

    built = true;
    debug('Replay: built.');
  };

  this.unload = function () {
    built = false;
  };

  this.getVideoSource = function (type) {
    var sources = replayElement.getElementsByTagName('source');
    var l = sources.length;
    var videoType = 'video/' + type;
    var source;

    if (l) {
      var i;

      for (i = 0; i < l && !source; i++) {
        if (sources[i].getAttribute('type') === videoType) {
          source = sources[i];
        }
      }
    }

    return source;
  };

  function setVideoSource(type, src, bustCache) {
    var source = self.getVideoSource(type);

    if (src && bustCache) {
      src += '?' + Date.now();
    }

    if (!source) {
      if (src) {
        source = (0, _hyperscript.default)('source', {
          src: src,
          type: 'video/' + type
        });
        replayElement.appendChild(source);
      }
    } else {
      if (src) {
        source.setAttribute('src', src);
      } else {
        replayElement.removeChild(source);
      }
    }
  }

  this.setMp4Source = function (src, bustCache) {
    setVideoSource('mp4', src, bustCache);
  };

  this.setWebMSource = function (src, bustCache) {
    setVideoSource('webm', src, bustCache);
  };

  this.getVideoType = function () {
    return browser.getVideoType(replayElement);
  };

  function pause(cb) {
    // avoids race condition, inspired by
    // http://stackoverflow.com/questions/36803176/how-to-prevent-the-play-request-was-interrupted-by-a-call-to-pause-error
    setTimeout(function () {
      try {
        replayElement.pause();
      } catch (exc) {
        // just ignore, see https://github.com/binarykitchen/videomail.io/issues/386
        options.logger.warn(exc);
      }

      cb && cb();
    }, 15);
  }

  function play() {
    if (replayElement && replayElement.play) {
      var p;

      try {
        p = replayElement.play();
      } catch (exc) {
        // this in the hope to catch InvalidStateError, see
        // https://github.com/binarykitchen/videomail-client/issues/149
        options.logger.warn('Caught replay exception:', exc);
      }

      if (p && typeof Promise !== 'undefined' && p instanceof Promise) {
        p.catch(function (reason) {
          options.logger.warn('Caught pending replay promise exception: %s', reason);
        });
      }
    }
  }

  this.reset = function (cb) {
    // pause video to make sure it won't consume any memory
    pause(function () {
      if (replayElement) {
        self.setMp4Source(null);
        self.setWebMSource(null);
      }

      cb && cb();
    });
  };

  this.hide = function () {
    if (isStandalone()) {
      (0, _hidden.default)(parentElement, true);
    } else {
      replayElement && (0, _hidden.default)(replayElement, true);
    }
  };

  this.isShown = function () {
    return replayElement && !(0, _hidden.default)(replayElement);
  };

  this.getParentElement = function () {
    return parentElement;
  };
};

_util.default.inherits(Replay, _eventEmitter.default);

var _default = Replay;
exports.default = _default;

},{"./../../events":88,"./../../util/browser":93,"./../../util/eventEmitter":95,"./../../util/videomailError":100,"add-eventlistener-with-options":1,"hidden":31,"hyperscript":33,"iphone-inline-video":39,"util":80}],115:[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _hyperscript = _interopRequireDefault(_dereq_("hyperscript"));

var _safeJsonStringify = _interopRequireDefault(_dereq_("safe-json-stringify"));

var _audioRecorder = _interopRequireDefault(_dereq_("./../../util/audioRecorder"));

var _videomailError = _interopRequireDefault(_dereq_("./../../util/videomailError"));

var _eventEmitter = _interopRequireDefault(_dereq_("./../../util/eventEmitter"));

var _mediaEvents = _interopRequireDefault(_dereq_("./../../util/mediaEvents"));

var _pretty = _interopRequireDefault(_dereq_("./../../util/pretty"));

var _browser = _interopRequireDefault(_dereq_("./../../util/browser"));

var _events = _interopRequireDefault(_dereq_("./../../events"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EVENT_ASCII = '|—O—|';

function _default(recorder, options) {
  _eventEmitter.default.call(this, options, 'UserMedia');

  var rawVisualUserMedia = recorder && recorder.getRawVisualUserMedia();
  var browser = new _browser.default(options);
  var self = this;
  var paused = false;
  var record = false;
  var audioRecorder;
  var currentVisualStream;

  function attachMediaStream(stream) {
    currentVisualStream = stream;

    if (typeof rawVisualUserMedia.srcObject !== 'undefined') {
      rawVisualUserMedia.srcObject = stream;
    } else if (typeof rawVisualUserMedia.src !== 'undefined') {
      var URL = window.URL || window.webkitURL;
      rawVisualUserMedia.src = URL.createObjectURL(stream) || stream;
    } else {
      throw _videomailError.default.create('Error attaching stream to element.', 'Contact the developer about this', options);
    }
  }

  function setVisualStream(localMediaStream) {
    if (localMediaStream) {
      attachMediaStream(localMediaStream);
    } else {
      rawVisualUserMedia.removeAttribute('srcObject');
      rawVisualUserMedia.removeAttribute('src');
      currentVisualStream = null;
    }
  }

  function getVisualStream() {
    if (rawVisualUserMedia.mozSrcObject) {
      return rawVisualUserMedia.mozSrcObject;
    } else if (rawVisualUserMedia.srcObject) {
      return rawVisualUserMedia.srcObject;
    } else {
      return currentVisualStream;
    }
  }

  function hasEnded() {
    if (rawVisualUserMedia.ended) {
      return rawVisualUserMedia.ended;
    } else {
      var visualStream = getVisualStream();
      return visualStream && visualStream.ended;
    }
  }

  function hasInvalidDimensions() {
    if (rawVisualUserMedia.videoWidth && rawVisualUserMedia.videoWidth < 3 || rawVisualUserMedia.height && rawVisualUserMedia.height < 3) {
      return true;
    }
  }

  function getTracks(localMediaStream) {
    var tracks;

    if (localMediaStream && localMediaStream.getTracks) {
      tracks = localMediaStream.getTracks();
    }

    return tracks;
  }

  function getVideoTracks(localMediaStream) {
    var videoTracks;

    if (localMediaStream && localMediaStream.getVideoTracks) {
      videoTracks = localMediaStream.getVideoTracks();
    }

    return videoTracks;
  }

  function getFirstVideoTrack(localMediaStream) {
    var videoTracks = getVideoTracks(localMediaStream);
    var videoTrack;

    if (videoTracks && videoTracks[0]) {
      videoTrack = videoTracks[0];
    }

    return videoTrack;
  }

  function logEvent(event, params) {
    options.debug('UserMedia: ...', EVENT_ASCII, 'event', event, (0, _safeJsonStringify.default)(params));
  }

  function isPromise(anything) {
    return anything && typeof Promise !== 'undefined' && anything instanceof Promise;
  }

  function outputEvent(e) {
    logEvent(e.type, {
      readyState: rawVisualUserMedia.readyState
    }); // remove myself

    rawVisualUserMedia.removeEventListener && rawVisualUserMedia.removeEventListener(e.type, outputEvent);
  }

  this.unloadRemainingEventListeners = function () {
    options.debug('UserMedia: unloadRemainingEventListeners()');

    _mediaEvents.default.forEach(function (eventName) {
      rawVisualUserMedia.removeEventListener(eventName, outputEvent);
    });
  };

  this.init = function (localMediaStream, videoCallback, audioCallback, endedEarlyCallback) {
    this.stop(localMediaStream, true);
    var onPlayReached = false;
    var onLoadedMetaDataReached = false;
    var playingPromiseReached = false;

    if (options && options.isAudioEnabled()) {
      audioRecorder = audioRecorder || new _audioRecorder.default(this, options);
    }

    function audioRecord() {
      self.removeListener(_events.default.SENDING_FIRST_FRAME, audioRecord);
      audioRecorder && audioRecorder.record(audioCallback);
    }

    function unloadAllEventListeners() {
      options.debug('UserMedia: unloadAllEventListeners()');
      self.removeListener(_events.default.SENDING_FIRST_FRAME, audioRecord);
      rawVisualUserMedia.removeEventListener && rawVisualUserMedia.removeEventListener('play', onPlay);
      rawVisualUserMedia.removeEventListener && rawVisualUserMedia.removeEventListener('loadedmetadata', onLoadedMetaData);
      self.unloadRemainingEventListeners();
    }

    function play() {
      // Resets the media element and restarts the media resource. Any pending events are discarded.
      try {
        rawVisualUserMedia.load(); // fixes https://github.com/binarykitchen/videomail.io/issues/401
        // see https://github.com/MicrosoftEdge/Demos/blob/master/photocapture/scripts/demo.js#L27

        if (rawVisualUserMedia.paused) {
          options.debug('UserMedia: play()', 'media.readyState=' + rawVisualUserMedia.readyState, 'media.paused=' + rawVisualUserMedia.paused, 'media.ended=' + rawVisualUserMedia.ended, 'media.played=' + (0, _pretty.default)(rawVisualUserMedia.played));
          var p;

          try {
            p = rawVisualUserMedia.play();
          } catch (exc) {
            // this in the hope to catch InvalidStateError, see
            // https://github.com/binarykitchen/videomail-client/issues/149
            options.logger.warn('Caught raw usermedia play exception:', exc);
          } // using the promise here just experimental for now
          // and this to catch any weird errors early if possible


          if (isPromise(p)) {
            p.then(function () {
              if (!playingPromiseReached) {
                options.debug('UserMedia: play promise successful. Playing now.');
                playingPromiseReached = true;
              }
            }).catch(function (reason) {
              // promise can be interrupted, i.E. when switching tabs
              // and promise can get resumed when switching back to tab, hence
              // do not treat this like an error
              options.logger.warn('Caught pending usermedia promise exception: %s', reason.toString());
            });
          }
        }
      } catch (exc) {
        unloadAllEventListeners();
        endedEarlyCallback(exc);
      }
    }

    function fireCallbacks() {
      var readyState = rawVisualUserMedia.readyState; // ready state, see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState

      options.debug('UserMedia: fireCallbacks(' + 'readyState=' + readyState + ', ' + 'onPlayReached=' + onPlayReached + ', ' + 'onLoadedMetaDataReached=' + onLoadedMetaDataReached + ')');

      if (onPlayReached && onLoadedMetaDataReached) {
        videoCallback();

        if (audioRecorder && audioCallback) {
          try {
            audioRecorder.init(localMediaStream);
            self.on(_events.default.SENDING_FIRST_FRAME, audioRecord);
          } catch (exc) {
            unloadAllEventListeners();
            endedEarlyCallback(exc);
          }
        }
      }
    }

    function onPlay() {
      try {
        logEvent('play', {
          readyState: rawVisualUserMedia.readyState,
          audio: options.isAudioEnabled(),
          width: rawVisualUserMedia.width,
          height: rawVisualUserMedia.height,
          videoWidth: rawVisualUserMedia.videoWidth,
          videoHeight: rawVisualUserMedia.videoHeight
        });
        rawVisualUserMedia.removeEventListener && rawVisualUserMedia.removeEventListener('play', onPlay);

        if (hasEnded() || hasInvalidDimensions()) {
          endedEarlyCallback(_videomailError.default.create('Already busy', 'Probably another browser window is using your webcam?', options));
        } else {
          onPlayReached = true;
          fireCallbacks();
        }
      } catch (exc) {
        unloadAllEventListeners();
        endedEarlyCallback(exc);
      }
    } // player modifications to perform that must wait until `loadedmetadata` has been triggered


    function onLoadedMetaData() {
      logEvent('loadedmetadata', {
        readyState: rawVisualUserMedia.readyState,
        paused: rawVisualUserMedia.paused,
        width: rawVisualUserMedia.width,
        height: rawVisualUserMedia.height,
        videoWidth: rawVisualUserMedia.videoWidth,
        videoHeight: rawVisualUserMedia.videoHeight
      });
      rawVisualUserMedia.removeEventListener && rawVisualUserMedia.removeEventListener('loadedmetadata', onLoadedMetaData);

      if (!hasEnded() && !hasInvalidDimensions()) {
        self.emit(_events.default.LOADED_META_DATA); // for android devices, we cannot call play() unless meta data has been loaded!
        // todo consider removing that if it's not the case anymore (for better performance)

        if (browser.isAndroid()) {
          play();
        }

        onLoadedMetaDataReached = true;
        fireCallbacks();
      }
    }

    try {
      var videoTrack = getFirstVideoTrack(localMediaStream);

      if (!videoTrack) {
        options.debug('UserMedia: detected (but no video tracks exist');
      } else if (!videoTrack.enabled) {
        throw _videomailError.default.create('Webcam is disabled', 'The video track seems to be disabled. Enable it in your system.', options);
      } else {
        var description;

        if (videoTrack.label && videoTrack.label.length > 0) {
          description = videoTrack.label;
        }

        description += ' with enabled=' + videoTrack.enabled;
        description += ', muted=' + videoTrack.muted;
        description += ', remote=' + videoTrack.remote;
        description += ', readyState=' + videoTrack.readyState;
        description += ', error=' + videoTrack.error;
        options.debug('UserMedia: ' + videoTrack.kind + ' detected.', description || '');
      } // very useful i think, so leave this and just use options.debug()


      var heavyDebugging = true;

      if (heavyDebugging) {
        _mediaEvents.default.forEach(function (eventName) {
          rawVisualUserMedia.addEventListener(eventName, outputEvent, false);
        });
      }

      rawVisualUserMedia.addEventListener('loadedmetadata', onLoadedMetaData);
      rawVisualUserMedia.addEventListener('play', onPlay); // experimental, not sure if this is ever needed/called? since 2 apr 2017
      // An error occurs while fetching the media data.
      // Error can be an object with the code MEDIA_ERR_NETWORK or higher.
      // networkState equals either NETWORK_EMPTY or NETWORK_IDLE, depending on when the download was aborted.

      rawVisualUserMedia.addEventListener('error', function (err) {
        options.logger.warn('Caught video element error event: %s', (0, _pretty.default)(err));
      });
      setVisualStream(localMediaStream);
      play();
    } catch (exc) {
      self.emit(_events.default.ERROR, exc);
    }
  };

  this.isReady = function () {
    return !!rawVisualUserMedia.src;
  };

  this.stop = function (visualStream, aboutToInitialize) {
    try {
      // do not stop "too much" when going to initialize anyway
      if (!aboutToInitialize) {
        if (!visualStream) {
          visualStream = getVisualStream();
        }

        var tracks = getTracks(visualStream);
        var newStopApiFound = false;

        if (tracks) {
          tracks.forEach(function (track) {
            if (track.stop) {
              newStopApiFound = true;
              track.stop();
            }
          });
        } // will probably become obsolete in one year (after june 2017)


        !newStopApiFound && visualStream && visualStream.stop && visualStream.stop();
        setVisualStream(null);
        audioRecorder && audioRecorder.stop();
        audioRecorder = null;
      }

      paused = record = false;
    } catch (exc) {
      self.emit(_events.default.ERROR, exc);
    }
  };

  this.createCanvas = function () {
    return (0, _hyperscript.default)('canvas', {
      width: this.getRawWidth(true),
      height: this.getRawHeight(true)
    });
  };

  this.getVideoHeight = function () {
    return rawVisualUserMedia.videoHeight;
  };

  this.getVideoWidth = function () {
    return rawVisualUserMedia.videoWidth;
  };

  this.hasVideoWidth = function () {
    return this.getVideoWidth() > 0;
  };

  this.getRawWidth = function (responsive) {
    var rawWidth = this.getVideoWidth();
    var widthDefined = options.hasDefinedWidth();

    if (widthDefined || options.hasDefinedHeight()) {
      if (!responsive && widthDefined) {
        rawWidth = options.video.width;
      } else {
        rawWidth = recorder.calculateWidth(responsive);
      }
    }

    if (responsive) {
      rawWidth = recorder.limitWidth(rawWidth);
    }

    return rawWidth;
  };

  this.getRawHeight = function (responsive) {
    var rawHeight;

    if (options.hasDefinedDimension()) {
      rawHeight = recorder.calculateHeight(responsive);

      if (rawHeight < 1) {
        throw _videomailError.default.create('Bad dimensions', 'Calculated raw height cannot be less than 1!', options);
      }
    } else {
      rawHeight = this.getVideoHeight();

      if (rawHeight < 1) {
        throw _videomailError.default.create('Bad dimensions', 'Raw video height from DOM element cannot be less than 1!', options);
      }
    }

    if (responsive) {
      rawHeight = recorder.limitHeight(rawHeight);
    }

    return rawHeight;
  };

  this.getRawVisuals = function () {
    return rawVisualUserMedia;
  };

  this.pause = function () {
    paused = true;
  };

  this.isPaused = function () {
    return paused;
  };

  this.resume = function () {
    paused = false;
  };

  this.record = function () {
    record = true;
  };

  this.isRecording = function () {
    return record;
  };

  this.getAudioSampleRate = function () {
    if (audioRecorder) {
      return audioRecorder.getSampleRate();
    } else {
      return -1;
    }
  };

  this.getCharacteristics = function () {
    return {
      audioSampleRate: this.getAudioSampleRate(),
      muted: rawVisualUserMedia && rawVisualUserMedia.muted,
      width: rawVisualUserMedia && rawVisualUserMedia.width,
      height: rawVisualUserMedia && rawVisualUserMedia.height,
      videoWidth: rawVisualUserMedia && rawVisualUserMedia.videoWidth,
      videoHeight: rawVisualUserMedia && rawVisualUserMedia.videoHeight
    };
  };
}

},{"./../../events":88,"./../../util/audioRecorder":92,"./../../util/browser":93,"./../../util/eventEmitter":95,"./../../util/mediaEvents":97,"./../../util/pretty":98,"./../../util/videomailError":100,"hyperscript":33,"safe-json-stringify":67}],"videomail-client":[function(_dereq_,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _standardize = _interopRequireDefault(_dereq_("./util/standardize"));

var _client = _interopRequireDefault(_dereq_("./client"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (!navigator) {
  throw new Error('Navigator is missing!');
} else {
  // Ensures Videomail functionality is not broken on exotic browsers with shims.
  (0, _standardize.default)(window, navigator);
}

var _default = _client.default; // also add that so that we can require() it the normal ES5 way

exports.default = _default;
module.exports = _client.default;

},{"./client":86,"./util/standardize":99}]},{},["videomail-client"])("videomail-client")
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYWRkLWV2ZW50bGlzdGVuZXItd2l0aC1vcHRpb25zL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2FuaW1pdHRlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9hdG9iL2Jyb3dzZXItYXRvYi5qcyIsIm5vZGVfbW9kdWxlcy9hdWRpby1zYW1wbGUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXItcmVzb2x2ZS9lbXB0eS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyLXNwbGl0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jYW52YXMtdG8tYnVmZmVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NsYXNzLWxpc3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2xhc3NsaXN0LmpzL2NsYXNzTGlzdC5qcyIsIm5vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb250YWlucy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLXV0aWwtaXMvbGliL3V0aWwuanMiLCJub2RlX21vZHVsZXMvY3JlYXRlLWVycm9yL2NyZWF0ZS1lcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9kZWVwbWVyZ2UvZGlzdC91bWQuanMiLCJub2RlX21vZHVsZXMvZGVmaW5lZC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9kZXNwb3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZG9jdW1lbnQtdmlzaWJpbGl0eS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9kb2N1bWVudC12aXNpYmlsaXR5L2tleXMuanMiLCJub2RlX21vZHVsZXMvZHVwbGV4aWZ5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2VsZW1lbnQtY2xvc2VzdC9lbGVtZW50LWNsb3Nlc3QuanMiLCJub2RlX21vZHVsZXMvZW5kLW9mLXN0cmVhbS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwibm9kZV9tb2R1bGVzL2ZpbGVzaXplL2xpYi9maWxlc2l6ZS5qcyIsIm5vZGVfbW9kdWxlcy9nZXQtZm9ybS1kYXRhL2xpYi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9nZXZhbC9ldmVudC5qcyIsIm5vZGVfbW9kdWxlcy9nZXZhbC9zb3VyY2UuanMiLCJub2RlX21vZHVsZXMvZ2xvYmFsL2RvY3VtZW50LmpzIiwibm9kZV9tb2R1bGVzL2dsb2JhbC93aW5kb3cuanMiLCJub2RlX21vZHVsZXMvaGlkZGVuL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2h1bWFuaXplLWR1cmF0aW9uL2h1bWFuaXplLWR1cmF0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2h5cGVyc2NyaXB0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaW5kZXhvZi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2luc2VydC1jc3MvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaW50ZXJ2YWxvbWV0ZXIvZGlzdC9pbnRlcnZhbG9tZXRlci5jb21tb24tanMuanMiLCJub2RlX21vZHVsZXMvaXBob25lLWlubGluZS12aWRlby9kaXN0L2lwaG9uZS1pbmxpbmUtdmlkZW8uY29tbW9uLWpzLmpzIiwibm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pcy1maW5pdGUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaXMtcG93ZXItb2YtdHdvL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2lzLXR5cGVkYXJyYXkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9rZXltaXJyb3IvaW5kZXguanMiLCJub2RlX21vZHVsZXMvbnVtYmVyLWlzLWludGVnZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvbnVtYmVyLWlzLW5hbi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9vbmNlL29uY2UuanMiLCJub2RlX21vZHVsZXMvcGVyZm9ybWFuY2Utbm93L2xpYi9wZXJmb3JtYW5jZS1ub3cuanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3JhZi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcmVhZGFibGUuanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fd3JpdGFibGUuanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QuanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kuanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9ub2RlX21vZHVsZXMvcHJvY2Vzcy1uZXh0aWNrLWFyZ3MvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLWJyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvcmVhZHlzdGF0ZS9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWR5c3RhdGUvcmVhZHlzdGF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9yZXF1ZXN0LWZyYW1lL2Rpc3QvcmVxdWVzdC1mcmFtZS5qcyIsIm5vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zYWZlLWpzb24tc3RyaW5naWZ5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3N0cmVhbS1zaGlmdC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zdXBlcmFnZW50L2xpYi9hZ2VudC1iYXNlLmpzIiwibm9kZV9tb2R1bGVzL3N1cGVyYWdlbnQvbGliL2NsaWVudC5qcyIsIm5vZGVfbW9kdWxlcy9zdXBlcmFnZW50L2xpYi9pcy1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9saWIvcmVxdWVzdC1iYXNlLmpzIiwibm9kZV9tb2R1bGVzL3N1cGVyYWdlbnQvbGliL3Jlc3BvbnNlLWJhc2UuanMiLCJub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9saWIvdXRpbHMuanMiLCJub2RlX21vZHVsZXMvdHlwZWRhcnJheS10by1idWZmZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvdWEtcGFyc2VyLWpzL3NyYy91YS1wYXJzZXIuanMiLCJub2RlX21vZHVsZXMvdXRpbC1kZXByZWNhdGUvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3V0aWwvdXRpbC5qcyIsIm5vZGVfbW9kdWxlcy92YWxpZGF0ZS5pby1mbG9hdDMyYXJyYXkvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3dlYnNvY2tldC1zdHJlYW0vc3RyZWFtLmpzIiwibm9kZV9tb2R1bGVzL3dlYnNvY2tldC1zdHJlYW0vd3MtZmFsbGJhY2suanMiLCJub2RlX21vZHVsZXMvd3JhcHB5L3dyYXBweS5qcyIsInBhY2thZ2UuanNvbiIsInNyYy9jbGllbnQuanMiLCJzcmMvY29uc3RhbnRzLmpzIiwic3JjL2V2ZW50cy5qcyIsInNyYy9vcHRpb25zLmpzIiwic3JjL3Jlc291cmNlLmpzIiwic3JjL3N0eWxlcy9jc3MvbWFpbi5taW4uY3NzLmpzIiwic3JjL3V0aWwvYXVkaW9SZWNvcmRlci5qcyIsInNyYy91dGlsL2Jyb3dzZXIuanMiLCJzcmMvdXRpbC9jb2xsZWN0TG9nZ2VyLmpzIiwic3JjL3V0aWwvZXZlbnRFbWl0dGVyLmpzIiwic3JjL3V0aWwvaHVtYW5pemUuanMiLCJzcmMvdXRpbC9tZWRpYUV2ZW50cy5qcyIsInNyYy91dGlsL3ByZXR0eS5qcyIsInNyYy91dGlsL3N0YW5kYXJkaXplLmpzIiwic3JjL3V0aWwvdmlkZW9tYWlsRXJyb3IuanMiLCJzcmMvd3JhcHBlcnMvYnV0dG9ucy5qcyIsInNyYy93cmFwcGVycy9jb250YWluZXIuanMiLCJzcmMvd3JhcHBlcnMvZGltZW5zaW9uLmpzIiwic3JjL3dyYXBwZXJzL2Zvcm0uanMiLCJzcmMvd3JhcHBlcnMvb3B0aW9uc1dyYXBwZXIuanMiLCJzcmMvd3JhcHBlcnMvdmlzdWFscy5qcyIsInNyYy93cmFwcGVycy92aXN1YWxzL2luc2lkZS9yZWNvcmRlci9jb3VudGRvd24uanMiLCJzcmMvd3JhcHBlcnMvdmlzdWFscy9pbnNpZGUvcmVjb3JkZXIvcGF1c2VkTm90ZS5qcyIsInNyYy93cmFwcGVycy92aXN1YWxzL2luc2lkZS9yZWNvcmRlci9yZWNvcmROb3RlLmpzIiwic3JjL3dyYXBwZXJzL3Zpc3VhbHMvaW5zaWRlL3JlY29yZGVyL3JlY29yZFRpbWVyLmpzIiwic3JjL3dyYXBwZXJzL3Zpc3VhbHMvaW5zaWRlL3JlY29yZGVySW5zaWRlcy5qcyIsInNyYy93cmFwcGVycy92aXN1YWxzL25vdGlmaWVyLmpzIiwic3JjL3dyYXBwZXJzL3Zpc3VhbHMvcmVjb3JkZXIuanMiLCJzcmMvd3JhcHBlcnMvdmlzdWFscy9yZXBsYXkuanMiLCJzcmMvd3JhcHBlcnMvdmlzdWFscy91c2VyTWVkaWEuanMiLCJzcmMvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNoYUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwSEE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hzREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4T0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25LQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMzR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDalBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3ZnQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDN0tBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5V0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDeExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDM0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN0L0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNyTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3BxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekVBO0FBQ0E7OztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzVDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9RQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4NUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdHJCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3ZFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNqa0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ25FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMxa0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3pLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ2xIQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7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Ozs7QUFFQSxJQUFJLENBQUMsU0FBTCxFQUFnQjtBQUNkLFFBQU0sSUFBSSxLQUFKLENBQVUsdUJBQVYsQ0FBTjtBQUNELENBRkQsTUFFTztBQUNMO0FBQ0EsNEJBQVksTUFBWixFQUFvQixTQUFwQjtBQUNEOztlQUVjLGUsRUFFZjs7O0FBQ0EsTUFBTSxDQUFDLE9BQVAsR0FBaUIsZUFBakIiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfXJldHVybiBlfSkoKSIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImFkZC1ldmVudGxpc3RlbmVyLXdpdGgtb3B0aW9uc1wiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJhZGQtZXZlbnRsaXN0ZW5lci13aXRoLW9wdGlvbnNcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuXG5cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuZGVmYXVsdCA9IGFkZEV2ZW50TGlzdGVuZXJXaXRoT3B0aW9ucztcblxuXHR2YXIgX2NoZWNrU3VwcG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblx0ZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuXHQvKipcblx0ICogQWRkIGV2ZW50IGxpc3RlbmVyIHdpdGggYWRkaXRpb25hbCBvcHRpb25zXG5cdCAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IHRhcmdldCAtIFRoZSBFdmVudFRhcmdldCBlbGVtZW50XG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIC0gVGhlIGV2ZW50IGxpc3RlbmVyIGNhbGxiYWNrXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZXhwbGljaXRseSBwYXNzZWQgZnJvbSBjYWxsZXJcblx0ICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbk5hbWUgLSBUaGUgYWRkaXRpb2FubCBvcHRpb24gdG8gYWRkIHRvIHRoZSBldmVudCBsaXN0ZW5lciBcblx0ICovXG5cdGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJXaXRoT3B0aW9ucyh0YXJnZXQsIG5hbWUsIGxpc3RlbmVyLCBvcHRpb25zKSB7XG5cdCAgICB2YXIgb3B0aW9uTmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogJ3Bhc3NpdmUnO1xuXG5cdCAgICBpZiAodGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIHZhciBsaXN0ZW5lck9wdGlvbnMgPSBfY2hlY2tTdXBwb3J0LlN1cHBvcnRNYXBbb3B0aW9uTmFtZV0gPyBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCBfZGVmaW5lUHJvcGVydHkoe30sIG9wdGlvbk5hbWUsIHRydWUpKSA6IG9wdGlvbnM7XG5cdCAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgbGlzdGVuZXIsIGxpc3RlbmVyT3B0aW9ucyk7XG5cdCAgICB9XG5cdH1cblxuLyoqKi8gfSxcbi8qIDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuU3VwcG9ydE1hcCA9IHVuZGVmaW5lZDtcblxuXHR2YXIgX09wdGlvbnNNYXA7XG5cblx0dmFyIF9jb25zdGFudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG5cdGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cblx0dmFyIE9wdGlvbnNNYXAgPSAoX09wdGlvbnNNYXAgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9PcHRpb25zTWFwLCBfY29uc3RhbnRzLlBBU1NJVkUsIGZhbHNlKSwgX2RlZmluZVByb3BlcnR5KF9PcHRpb25zTWFwLCBfY29uc3RhbnRzLkNBUFRVUkUsIGZhbHNlKSwgX2RlZmluZVByb3BlcnR5KF9PcHRpb25zTWFwLCBfY29uc3RhbnRzLk9OQ0UsIGZhbHNlKSwgX09wdGlvbnNNYXApO1xuXG5cdHZhciBnZXRPcHRpb25zTWFwID0gZnVuY3Rpb24gZ2V0T3B0aW9uc01hcCgpIHtcblx0ICAgIE9iamVjdC5rZXlzKE9wdGlvbnNNYXApLmZvckVhY2goZnVuY3Rpb24gKGssIGkpIHtcblx0ICAgICAgICBPcHRpb25zTWFwW2tdID0gY2hlY2tTdXBwb3J0Rm9yUHJvcGVydHkoayk7XG5cdCAgICB9KTtcblxuXHQgICAgcmV0dXJuIE9wdGlvbnNNYXA7XG5cdH07XG5cblx0ZnVuY3Rpb24gY2hlY2tTdXBwb3J0Rm9yUHJvcGVydHkocHJvcGVydHkpIHtcblx0ICAgIGlmICghIU9wdGlvbnNNYXBbcHJvcGVydHldKSB7XG5cdCAgICAgICAgcmV0dXJuIE9wdGlvbnNNYXBbcHJvcGVydHldO1xuXHQgICAgfVxuXG5cdCAgICB0cnkge1xuXHQgICAgICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCBwcm9wZXJ0eSwge1xuXHQgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgICAgIE9wdGlvbnNNYXBbcHJvcGVydHldID0gdHJ1ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLCBudWxsLCBvcHRzKTtcblx0ICAgICAgICB3aW5kb3cucmVtb3ZlTGlzdGVuZXIoXCJ0ZXN0XCIsIG51bGwpO1xuXHQgICAgfSBjYXRjaCAoZSkge31cblxuXHQgICAgcmV0dXJuIE9wdGlvbnNNYXBbcHJvcGVydHldO1xuXHR9XG5cblx0dmFyIFN1cHBvcnRNYXAgPSBleHBvcnRzLlN1cHBvcnRNYXAgPSBnZXRPcHRpb25zTWFwKCk7XG5cbi8qKiovIH0sXG4vKiAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdHZhciBQQVNTSVZFID0gZXhwb3J0cy5QQVNTSVZFID0gJ3Bhc3NpdmUnO1xuXHR2YXIgQ0FQVFVSRSA9IGV4cG9ydHMuQ0FQVFVSRSA9ICdjYXB0dXJlJztcblx0dmFyIE9OQ0UgPSBleHBvcnRzLk9OQ0UgPSAnb25jZSc7XG5cbi8qKiovIH1cbi8qKioqKiovIF0pXG59KTtcbjsiLCJ2YXIgRXZlbnRFbWl0dGVyICAgICAgICAgID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyLFxuICAgIGluaGVyaXRzICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2luaGVyaXRzJyksXG4gICAgcmFmICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgncmFmJyksXG4gICAgbWV0aG9kcztcblxuXG4vL3RoZSBzYW1lIGFzIG9mZiB3aW5kb3cgdW5sZXNzIHBvbHlmaWxsZWQgb3IgaW4gbm9kZVxudmFyIGRlZmF1bHRSQUZPYmplY3QgPSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lOiByYWYsXG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWU6IHJhZi5jYW5jZWxcbn07XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKXsgcmV0dXJuIHRydWU7IH1cblxuLy9tYW5hZ2UgRlBTIGlmIDwgNjAsIGVsc2UgcmV0dXJuIHRydWU7XG5mdW5jdGlvbiBtYWtlVGhyb3R0bGUoZnBzKXtcbiAgICB2YXIgZGVsYXkgPSAxMDAwL2ZwcztcbiAgICB2YXIgbGFzdFRpbWUgPSBEYXRlLm5vdygpO1xuXG5cbiAgICBpZiggZnBzPD0wIHx8IGZwcyA9PT0gSW5maW5pdHkgKXtcbiAgICAgICAgcmV0dXJuIHJldHVyblRydWU7XG4gICAgfVxuXG4gICAgLy9pZiBhbiBmcHMgdGhyb3R0bGUgaGFzIGJlZW4gc2V0IHRoZW4gd2UnbGwgYXNzdW1lXG4gICAgLy9pdCBuYXRpdmVseSBydW5zIGF0IDYwZnBzLFxuICAgIHZhciBoYWxmID0gTWF0aC5jZWlsKDEwMDAgLyA2MCkgLyAyO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vaWYgYSBjdXN0b20gZnBzIGlzIHJlcXVlc3RlZFxuICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgLy9pcyB0aGlzIGZyYW1lIHdpdGhpbiA4LjVtcyBvZiB0aGUgdGFyZ2V0P1xuICAgICAgICAvL2lmIHNvIHRoZW4gbmV4dCBmcmFtZSBpcyBnb25uYSBiZSB0b28gbGF0ZVxuICAgICAgICBpZihub3cgLSBsYXN0VGltZSA8IGRlbGF5IC0gaGFsZil7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFRpbWUgPSBub3c7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG59XG5cblxuLyoqXG4gKiBBbmltaXR0ZXIgcHJvdmlkZXMgZXZlbnQtYmFzZWQgbG9vcHMgZm9yIHRoZSBicm93c2VyIGFuZCBub2RlLFxuICogdXNpbmcgYHJlcXVlc3RBbmltYXRpb25GcmFtZWBcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0c11cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5mcHM9SW5maW5pdHldIHRoZSBmcmFtZXJhdGUgcmVxdWVzdGVkLCBkZWZhdWx0cyB0byBhcyBmYXN0IGFzIGl0IGNhbiAoNjBmcHMgb24gd2luZG93KVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmRlbGF5PTBdIG1pbGxpc2Vjb25kcyBkZWxheSBiZXR3ZWVuIGludm9raW5nIGBzdGFydGAgYW5kIGluaXRpYWxpemluZyB0aGUgbG9vcFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLnJlcXVlc3RBbmltYXRpb25GcmFtZU9iamVjdD1nbG9iYWxdIHRoZSBvYmplY3Qgb24gd2hpY2ggdG8gZmluZCBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCBhbmQgYGNhbmNlbEFuaW1hdGlvbkZyYW1lYCBtZXRob2RzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRzLmZpeGVkRGVsdGE9ZmFsc2VdIGlmIHRydWUsIHRpbWVzdGFtcHMgd2lsbCBwcmV0ZW5kIHRvIGJlIGV4ZWN1dGVkIGF0IGZpeGVkIGludGVydmFscyBhbHdheXNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBBbmltaXR0ZXIoIG9wdHMgKXtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICAgIHRoaXMuX19kZWxheSA9IG9wdHMuZGVsYXkgfHwgMDtcblxuICAgIC8qKiBAZXhwb3NlICovXG4gICAgdGhpcy5maXhlZERlbHRhID0gISFvcHRzLmZpeGVkRGVsdGE7XG5cbiAgICAvKiogQGV4cG9zZSAqL1xuICAgIHRoaXMuZnJhbWVDb3VudCA9IDA7XG4gICAgLyoqIEBleHBvc2UgKi9cbiAgICB0aGlzLmRlbHRhVGltZSA9IDA7XG4gICAgLyoqIEBleHBvc2UgKi9cbiAgICB0aGlzLmVsYXBzZWRUaW1lID0gMDtcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuX19ydW5uaW5nID0gZmFsc2U7XG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5fX2NvbXBsZXRlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5zZXRGUFMob3B0cy5mcHMgfHwgSW5maW5pdHkpO1xuICAgIHRoaXMuc2V0UmVxdWVzdEFuaW1hdGlvbkZyYW1lT2JqZWN0KG9wdHMucmVxdWVzdEFuaW1hdGlvbkZyYW1lT2JqZWN0IHx8IGRlZmF1bHRSQUZPYmplY3QpO1xufVxuXG5pbmhlcml0cyhBbmltaXR0ZXIsIEV2ZW50RW1pdHRlcik7XG5cbmZ1bmN0aW9uIG9uU3RhcnQoc2NvcGUpe1xuICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgIHZhciByQUZJRDtcbiAgICAvL2RvbnQgbGV0IGEgc2Vjb25kIGFuaW1hdGlvbiBzdGFydCBvbiB0aGUgc2FtZSBvYmplY3RcbiAgICAvL3VzZSAqLm9uKCd1cGRhdGUnLGZuKSogaW5zdGVhZFxuICAgIGlmKHNjb3BlLl9fcnVubmluZyl7XG4gICAgICAgIHJldHVybiBzY29wZTtcbiAgICB9XG5cbiAgICBleHBvcnRzLnJ1bm5pbmcgKz0gMTtcbiAgICBzY29wZS5fX3J1bm5pbmcgPSB0cnVlO1xuICAgIHNjb3BlLl9fbGFzdFRpbWUgPSBub3c7XG4gICAgc2NvcGUuZGVsdGFUaW1lID0gMDtcblxuICAgIC8vZW1pdCAqKnN0YXJ0Kiogb25jZSBhdCB0aGUgYmVnaW5uaW5nXG4gICAgc2NvcGUuZW1pdCgnc3RhcnQnLCBzY29wZS5kZWx0YVRpbWUsIDAsIHNjb3BlLmZyYW1lQ291bnQpO1xuXG4gICAgdmFyIGxhc3RSQUZPYmplY3QgPSBzY29wZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVPYmplY3Q7XG5cbiAgICB2YXIgZHJhd0ZyYW1lID0gZnVuY3Rpb24oKXtcbiAgICAgICAgaWYobGFzdFJBRk9iamVjdCAhPT0gc2NvcGUucmVxdWVzdEFuaW1hdGlvbkZyYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIC8vaWYgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZU9iamVjdCBzd2l0Y2hlZCBpbi1iZXR3ZWVuLFxuICAgICAgICAgICAgLy90aGVuIHJlLXJlcXVlc3Qgd2l0aCB0aGUgbmV3IG9uZSB0byBlbnN1cmUgcHJvcGVyIHVwZGF0ZSBleGVjdXRpb24gY29udGV4dFxuICAgICAgICAgICAgLy9pLmUuIFZSRGlzcGxheSNzdWJtaXRGcmFtZSgpIG1heSBvbmx5IGJlIHJlcXVlc3RlZCB0aHJvdWdoIFZSRGlzcGxheSNyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhd0ZyYW1lKVxuICAgICAgICAgICAgbGFzdFJBRk9iamVjdCA9IHNjb3BlLnJlcXVlc3RBbmltYXRpb25GcmFtZU9iamVjdDtcbiAgICAgICAgICAgIHNjb3BlLnJlcXVlc3RBbmltYXRpb25GcmFtZU9iamVjdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhd0ZyYW1lKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZihzY29wZS5fX2lzUmVhZHlGb3JVcGRhdGUoKSl7XG4gICAgICAgICAgICBzY29wZS51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZihzY29wZS5fX3J1bm5pbmcpe1xuICAgICAgICAgICAgckFGSUQgPSBzY29wZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVPYmplY3QucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXdGcmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzY29wZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVPYmplY3QuY2FuY2VsQW5pbWF0aW9uRnJhbWUockFGSUQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHNjb3BlLnJlcXVlc3RBbmltYXRpb25GcmFtZU9iamVjdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhd0ZyYW1lKTtcblxuICAgIHJldHVybiBzY29wZTtcbn1cblxubWV0aG9kcyA9IHtcbiAgICAvL0V2ZW50RW1pdHRlciBBbGlhc2VzXG4gICAgb2ZmICAgICA6IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIsXG4gICAgdHJpZ2dlciA6IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCxcblxuICAgIC8qKlxuICAgICAqIHN0b3BzIHRoZSBhbmltYXRpb24gYW5kIG1hcmtzIGl0IGFzIGNvbXBsZXRlZFxuICAgICAqIEBlbWl0IEFuaW1pdHRlciNjb21wbGV0ZVxuICAgICAqIEByZXR1cm5zIHtBbmltaXR0ZXJ9XG4gICAgICovXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB0aGlzLl9fY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5lbWl0KCdjb21wbGV0ZScsIHRoaXMuZnJhbWVDb3VudCwgdGhpcy5kZWx0YVRpbWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogc3RvcHMgdGhlIGFuaW1hdGlvbiBhbmQgcmVtb3ZlcyBhbGwgbGlzdGVuZXJzXG4gICAgICogQGVtaXQgQW5pbWl0dGVyI3N0b3BcbiAgICAgKiBAcmV0dXJucyB7QW5pbWl0dGVyfVxuICAgICAqL1xuICAgIGRpc3Bvc2U6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZ2V0IG1pbGxpc2Vjb25kcyBiZXR3ZWVuIHRoZSBsYXN0IDIgdXBkYXRlc1xuICAgICAqXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldERlbHRhVGltZTogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsdGFUaW1lO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIHRvdGFsIG1pbGxpc2Vjb25kcyB0aGF0IHRoZSBhbmltYXRpb24gaGFzIHJhbi5cbiAgICAgKiBUaGlzIGlzIHRoZSBjdW1sYXRpdmUgdmFsdWUgb2YgdGhlIGRlbHRhVGltZSBiZXR3ZWVuIGZyYW1lc1xuICAgICAqXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldEVsYXBzZWRUaW1lOiBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gdGhpcy5lbGFwc2VkVGltZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZ2V0IHRoZSBpbnN0YW5jZXMgZnJhbWVzIHBlciBzZWNvbmQgYXMgY2FsY3VsYXRlZCBieSB0aGUgbGFzdCBkZWx0YVxuICAgICAqXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldEZQUzogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsdGFUaW1lID4gMCA/IDEwMDAgLyB0aGlzLmRlbHRhVGltZSA6IDA7XG4gICAgICAgIGlmKHRoaXMuZGVsdGFUaW1lKXtcbiAgICAgICAgICAgIHJldHVybiAxMDAwIC8gdGhpcy5kZWx0YVRpbWU7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZ2V0IHRoZSBleHBsaWNpdCBGUFMgbGltaXQgc2V0IHZpYSBgQW5pbWl0dGVyI3NldEZQUyhmcHMpYCBvclxuICAgICAqIHZpYSB0aGUgaW5pdGlhbCBgb3B0aW9ucy5mcHNgIHByb3BlcnR5XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBlaXRoZXIgYXMgc2V0IG9yIEluZmluaXR5XG4gICAgICovXG4gICAgZ2V0RlBTTGltaXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZnBzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIG51bWJlciBvZiBmcmFtZXMgdGhhdCBoYXZlIG9jY3VycmVkXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZ2V0RnJhbWVDb3VudDogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJhbWVDb3VudDtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIG9iamVjdCBwcm92aWRpbmcgYHJlcXVlc3RBbmltYXRpb25GcmFtZWBcbiAgICAgKiBhbmQgYGNhbmNlbEFuaW1hdGlvbkZyYW1lYCBtZXRob2RzXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqL1xuICAgIGdldFJlcXVlc3RBbmltYXRpb25GcmFtZU9iamVjdDogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lT2JqZWN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBpcyB0aGUgYW5pbWF0aW9uIGxvb3AgYWN0aXZlXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAqL1xuICAgIGlzUnVubmluZzogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19ydW5uaW5nO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBpcyB0aGUgYW5pbWF0aW9uIG1hcmtlZCBhcyBjb21wbGV0ZWRcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgaXNDb21wbGV0ZWQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl9fY29tcGxldGVkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXNldCB0aGUgYW5pbWF0aW9uIGxvb3AsIG1hcmtzIGFzIGluY29tcGxldGUsXG4gICAgICogbGVhdmVzIGxpc3RlbmVycyBpbnRhY3RcbiAgICAgKlxuICAgICAqIEBlbWl0IEFuaW1pdHRlciNyZXNldFxuICAgICAqIEByZXR1cm4ge0FuaW1pdHRlcn1cbiAgICAgKi9cbiAgICByZXNldDogZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIHRoaXMuX19jb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fX2xhc3RUaW1lID0gMDtcbiAgICAgICAgdGhpcy5kZWx0YVRpbWUgPSAwO1xuICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gMDtcbiAgICAgICAgdGhpcy5mcmFtZUNvdW50ID0gMDtcblxuICAgICAgICB0aGlzLmVtaXQoJ3Jlc2V0JywgMCwgMCwgdGhpcy5mcmFtZUNvdW50KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHNldCB0aGUgZnJhbWVyYXRlIGZvciB0aGUgYW5pbWF0aW9uIGxvb3BcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBmcHNcbiAgICAgKiBAcmV0dXJuIHtBbmltaXR0ZXJ9XG4gICAgICovXG4gICAgc2V0RlBTOiBmdW5jdGlvbihmcHMpe1xuICAgICAgICB0aGlzLl9fZnBzID0gZnBzO1xuICAgICAgICB0aGlzLl9faXNSZWFkeUZvclVwZGF0ZSA9IG1ha2VUaHJvdHRsZShmcHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogc2V0IHRoZSBvYmplY3QgdGhhdCB3aWxsIHByb3ZpZGUgYHJlcXVlc3RBbmltYXRpb25GcmFtZWBcbiAgICAgKiBhbmQgYGNhbmNlbEFuaW1hdGlvbkZyYW1lYCBtZXRob2RzIHRvIHRoaXMgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAgICogQHJldHVybiB7QW5pbWl0dGVyfVxuICAgICAqL1xuICAgIHNldFJlcXVlc3RBbmltYXRpb25GcmFtZU9iamVjdDogZnVuY3Rpb24ob2JqZWN0KXtcbiAgICAgICAgaWYodHlwZW9mIG9iamVjdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIG9iamVjdC5jYW5jZWxBbmltYXRpb25GcmFtZSAhPT0gJ2Z1bmN0aW9uJyl7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIG9iamVjdCBwcm92aWRlIHRvIGBzZXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWVPYmplY3RgXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lT2JqZWN0ID0gb2JqZWN0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogc3RhcnQgYW4gYW5pbWF0aW9uIGxvb3BcbiAgICAgKiBAZW1pdCBBbmltaXR0ZXIjc3RhcnRcbiAgICAgKiBAcmV0dXJuIHtBbmltaXR0ZXJ9XG4gICAgICovXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgaWYodGhpcy5fX2RlbGF5KXtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBvblN0YXJ0KHNlbGYpO1xuICAgICAgICAgICAgfSwgdGhpcy5fX2RlbGF5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9uU3RhcnQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHN0b3BzIHRoZSBhbmltYXRpb24gbG9vcCwgZG9lcyBub3QgbWFyayBhcyBjb21wbGV0ZWRcbiAgICAgKlxuICAgICAqIEBlbWl0IEFuaW1pdHRlciNzdG9wXG4gICAgICogQHJldHVybiB7QW5pbWl0dGVyfVxuICAgICAqL1xuICAgIHN0b3A6IGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKCB0aGlzLl9fcnVubmluZyApe1xuICAgICAgICAgICAgdGhpcy5fX3J1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGV4cG9ydHMucnVubmluZyAtPSAxO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdzdG9wJywgdGhpcy5kZWx0YVRpbWUsIHRoaXMuZWxhcHNlZFRpbWUsIHRoaXMuZnJhbWVDb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHVwZGF0ZSB0aGUgYW5pbWF0aW9uIGxvb3Agb25jZVxuICAgICAqXG4gICAgICogQGVtaXQgQW5pbWl0dGVyI3VwZGF0ZVxuICAgICAqIEByZXR1cm4ge0FuaW1pdHRlcn1cbiAgICAgKi9cbiAgICB1cGRhdGU6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuZnJhbWVDb3VudCsrO1xuICAgICAgICAvKiogQHByaXZhdGUgKi9cbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMuX19sYXN0VGltZSA9IHRoaXMuX19sYXN0VGltZSB8fCBub3c7XG4gICAgICAgIHRoaXMuZGVsdGFUaW1lID0gKHRoaXMuZml4ZWREZWx0YSB8fCBleHBvcnRzLmdsb2JhbEZpeGVkRGVsdGEpID8gMTAwMC9NYXRoLm1pbig2MCwgdGhpcy5fX2ZwcykgOiBub3cgLSB0aGlzLl9fbGFzdFRpbWU7XG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgKz0gdGhpcy5kZWx0YVRpbWU7XG4gICAgICAgIHRoaXMuX19sYXN0VGltZSA9IG5vdztcblxuICAgICAgICB0aGlzLmVtaXQoJ3VwZGF0ZScsIHRoaXMuZGVsdGFUaW1lLCB0aGlzLmVsYXBzZWRUaW1lLCB0aGlzLmZyYW1lQ291bnQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59O1xuXG5cblxuZm9yKHZhciBtZXRob2QgaW4gbWV0aG9kcyl7XG4gICAgQW5pbWl0dGVyLnByb3RvdHlwZVttZXRob2RdID0gbWV0aG9kc1ttZXRob2RdO1xufVxuXG5cbi8qKlxuICogY3JlYXRlIGFuIGFuaW1pdHRlciBpbnN0YW5jZSxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuKCBkZWx0YVRpbWU6TnVtYmVyLCBlbGFwc2VkVGltZTpOdW1iZXIsIGZyYW1lQ291bnQ6TnVtYmVyIClcbiAqIEByZXR1cm5zIHtBbmltaXR0ZXJ9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFuaW1pdHRlcihvcHRpb25zLCBmbil7XG5cbiAgICBpZiggYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJyl7XG4gICAgICAgIGZuID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfaW5zdGFuY2UgPSBuZXcgQW5pbWl0dGVyKCBvcHRpb25zICk7XG5cbiAgICBpZiggZm4gKXtcbiAgICAgICAgX2luc3RhbmNlLm9uKCd1cGRhdGUnLCBmbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9pbnN0YW5jZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gY3JlYXRlQW5pbWl0dGVyO1xuXG4vKipcbiAqIGNyZWF0ZSBhbiBhbmltaXR0ZXIgaW5zdGFuY2UsXG4gKiB3aGVyZSB0aGUgc2NvcGUgaXMgYm91bmQgaW4gYWxsIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4oIGRlbHRhVGltZTpOdW1iZXIsIGVsYXBzZWRUaW1lOk51bWJlciwgZnJhbWVDb3VudDpOdW1iZXIgKVxuICogQHJldHVybnMge0FuaW1pdHRlcn1cbiAqL1xuZXhwb3J0cy5ib3VuZCA9IGZ1bmN0aW9uKG9wdGlvbnMsIGZuKXtcblxuICAgIHZhciBsb29wID0gY3JlYXRlQW5pbWl0dGVyKG9wdGlvbnMsIGZuKSxcbiAgICAgICAgZnVuY3Rpb25LZXlzID0gZnVuY3Rpb25zKEFuaW1pdHRlci5wcm90b3R5cGUpLFxuICAgICAgICBoYXNCaW5kID0gISFGdW5jdGlvbi5wcm90b3R5cGUuYmluZCxcbiAgICAgICAgZm5LZXk7XG5cbiAgICBmb3IodmFyIGk9MDsgaTxmdW5jdGlvbktleXMubGVuZ3RoOyBpKyspe1xuICAgICAgICBmbktleSA9IGZ1bmN0aW9uS2V5c1tpXTtcbiAgICAgICAgbG9vcFtmbktleV0gPSBoYXNCaW5kID8gbG9vcFtmbktleV0uYmluZChsb29wKSA6IGJpbmQobG9vcFtmbktleV0sIGxvb3ApO1xuICAgIH1cblxuICAgIHJldHVybiBsb29wO1xufTtcblxuXG5leHBvcnRzLkFuaW1pdHRlciA9IEFuaW1pdHRlcjtcblxuLyoqXG4gKiBpZiB0cnVlLCBhbGwgYEFuaW1pdHRlcmAgaW5zdGFuY2VzIHdpbGwgYmVoYXZlIGFzIGlmIGBvcHRpb25zLmZpeGVkRGVsdGEgPSB0cnVlYFxuICovXG5leHBvcnRzLmdsb2JhbEZpeGVkRGVsdGEgPSBmYWxzZTtcblxuLy9oZWxwZnVsIHRvIGluaGVyaXQgZnJvbSB3aGVuIHVzaW5nIGJ1bmRsZWRcbmV4cG9ydHMuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuLy9rZWVwIGEgZ2xvYmFsIGNvdW50ZXIgb2YgYWxsIGxvb3BzIHJ1bm5pbmcsIGhlbHBmdWwgdG8gd2F0Y2ggaW4gZGV2IHRvb2xzXG5leHBvcnRzLnJ1bm5pbmcgPSAwO1xuXG5mdW5jdGlvbiBiaW5kKGZuLCBzY29wZSl7XG4gICAgaWYodHlwZW9mIGZuLmJpbmQgPT09ICdmdW5jdGlvbicpe1xuICAgICAgICByZXR1cm4gZm4uYmluZChzY29wZSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoc2NvcGUsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZnVuY3Rpb25zKG9iail7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIHZhciBhcnIgPSBbXTtcbiAgICBmb3IodmFyIGk9MDsgaTxrZXlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgaWYodHlwZW9mIG9ialtrZXlzW2ldXSA9PT0gJ2Z1bmN0aW9uJyl7XG4gICAgICAgICAgICBhcnIucHVzaChrZXlzW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuXG5cblxuLy9wb2x5ZmlsbCBEYXRlLm5vdyBmb3IgcmVhbC1vbGQgYnJvd3NlcnNcbkRhdGUubm93ID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24gbm93KCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbn07XG4iLCIoZnVuY3Rpb24gKHcpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIGEyYiA9IHcuYXRvYjtcblxuICBmdW5jdGlvbiBhdG9iKHN0cikge1xuICAgIC8vIG5vcm1hbCB3aW5kb3dcbiAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGEyYikge1xuICAgICAgcmV0dXJuIGEyYihzdHIpO1xuICAgIH1cbiAgICAvLyBicm93c2VyaWZ5ICh3ZWIgd29ya2VyKVxuICAgIGVsc2UgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBCdWZmZXIpIHtcbiAgICAgIHJldHVybiBuZXcgQnVmZmVyKHN0ciwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCdiaW5hcnknKTtcbiAgICB9XG4gICAgLy8gaW9zIHdlYiB3b3JrZXIgd2l0aCBiYXNlNjRqc1xuICAgIGVsc2UgaWYgKCdvYmplY3QnID09PSB0eXBlb2Ygdy5iYXNlNjRqcykge1xuICAgICAgLy8gYnVmZmVyVG9CaW5hcnlTdHJpbmdcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jb29sYWo4Ni91bmliYWJlbC1qcy9ibG9iL21hc3Rlci9pbmRleC5qcyNMNTBcbiAgICAgIHZhciBidWYgPSB3LmJhc2U2NGpzLmI2NFRvQnl0ZUFycmF5KHN0cik7XG5cbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoYnVmLCBmdW5jdGlvbiAoY2gpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpO1xuICAgICAgfSkuam9pbignJyk7XG4gICAgfVxuICAgIC8vIGlvcyB3ZWIgd29ya2VyIHdpdGhvdXQgYmFzZTY0anNcbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInlvdSdyZSBwcm9iYWJseSBpbiBhbiBpb3Mgd2Vid29ya2VyLiBwbGVhc2UgaW5jbHVkZSB1c2UgYmVhdGdhbW1pdCdzIGJhc2U2NC1qc1wiKTtcbiAgICB9XG4gIH1cblxuICB3LmF0b2IgPSBhdG9iO1xuXG4gIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gYXRvYjtcbiAgfVxufSh3aW5kb3cpKTtcbiIsInZhciB0b0J1ZmZlciA9IHJlcXVpcmUoJ3R5cGVkYXJyYXktdG8tYnVmZmVyJylcbnZhciBpc0Zsb2F0MzJBcnJheSA9IHJlcXVpcmUoJ3ZhbGlkYXRlLmlvLWZsb2F0MzJhcnJheScpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZsb2F0MzJBcnJheSkge1xuICBpZiAoIWZsb2F0MzJBcnJheSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQSBGbG9hdDMyQXJyYXkgcGFyYW1ldGVyIGlzIG1pc3NpbmcuJylcbiAgfVxuXG4gIGlmICghaXNGbG9hdDMyQXJyYXkoZmxvYXQzMkFycmF5KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIHBhcmFtZXRlciBpcyBub3QgYSBGbG9hdDMyQXJyYXkuJylcbiAgfVxuXG4gIHRoaXMudG9CdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGwgPSBmbG9hdDMyQXJyYXkubGVuZ3RoXG4gICAgdmFyIGFyciA9IG5ldyBJbnQxNkFycmF5KGwpXG4gICAgdmFyIGlcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIGFycltpXSA9IE1hdGgubWluKDEsIGZsb2F0MzJBcnJheVtpXSkgKiAweDdGRkZcbiAgICB9XG5cbiAgICByZXR1cm4gdG9CdWZmZXIoYXJyKVxuICB9XG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBwbGFjZUhvbGRlcnNDb3VudCAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyB0aGUgbnVtYmVyIG9mIGVxdWFsIHNpZ25zIChwbGFjZSBob2xkZXJzKVxuICAvLyBpZiB0aGVyZSBhcmUgdHdvIHBsYWNlaG9sZGVycywgdGhhbiB0aGUgdHdvIGNoYXJhY3RlcnMgYmVmb3JlIGl0XG4gIC8vIHJlcHJlc2VudCBvbmUgYnl0ZVxuICAvLyBpZiB0aGVyZSBpcyBvbmx5IG9uZSwgdGhlbiB0aGUgdGhyZWUgY2hhcmFjdGVycyBiZWZvcmUgaXQgcmVwcmVzZW50IDIgYnl0ZXNcbiAgLy8gdGhpcyBpcyBqdXN0IGEgY2hlYXAgaGFjayB0byBub3QgZG8gaW5kZXhPZiB0d2ljZVxuICByZXR1cm4gYjY0W2xlbiAtIDJdID09PSAnPScgPyAyIDogYjY0W2xlbiAtIDFdID09PSAnPScgPyAxIDogMFxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG4gIHJldHVybiAoYjY0Lmxlbmd0aCAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0NvdW50KGI2NClcbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgaSwgbCwgdG1wLCBwbGFjZUhvbGRlcnMsIGFyclxuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuICBwbGFjZUhvbGRlcnMgPSBwbGFjZUhvbGRlcnNDb3VudChiNjQpXG5cbiAgYXJyID0gbmV3IEFycigobGVuICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzKVxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgbCA9IHBsYWNlSG9sZGVycyA+IDAgPyBsZW4gLSA0IDogbGVuXG5cbiAgdmFyIEwgPSAwXG5cbiAgZm9yIChpID0gMDsgaSA8IGw7IGkgKz0gNCkge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltMKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW0wrK10gPSB0bXAgJiAweEZGXG4gIH0gZWxzZSBpZiAocGxhY2VIb2xkZXJzID09PSAxKSB7XG4gICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICsgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICsgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gKyBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID0gKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgKyAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgKyAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIG91dHB1dCA9ICcnXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBvdXRwdXQgKz0gbG9va3VwW3RtcCA+PiAyXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9ICc9PSdcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgKHVpbnQ4W2xlbiAtIDFdKVxuICAgIG91dHB1dCArPSBsb29rdXBbdG1wID4+IDEwXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gJz0nXG4gIH1cblxuICBwYXJ0cy5wdXNoKG91dHB1dClcblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIiIsIi8qIVxuICogQ3Jvc3MtQnJvd3NlciBTcGxpdCAxLjEuMVxuICogQ29weXJpZ2h0IDIwMDctMjAxMiBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT5cbiAqIEF2YWlsYWJsZSB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIEVDTUFTY3JpcHQgY29tcGxpYW50LCB1bmlmb3JtIGNyb3NzLWJyb3dzZXIgc3BsaXQgbWV0aG9kXG4gKi9cblxuLyoqXG4gKiBTcGxpdHMgYSBzdHJpbmcgaW50byBhbiBhcnJheSBvZiBzdHJpbmdzIHVzaW5nIGEgcmVnZXggb3Igc3RyaW5nIHNlcGFyYXRvci4gTWF0Y2hlcyBvZiB0aGVcbiAqIHNlcGFyYXRvciBhcmUgbm90IGluY2x1ZGVkIGluIHRoZSByZXN1bHQgYXJyYXkuIEhvd2V2ZXIsIGlmIGBzZXBhcmF0b3JgIGlzIGEgcmVnZXggdGhhdCBjb250YWluc1xuICogY2FwdHVyaW5nIGdyb3VwcywgYmFja3JlZmVyZW5jZXMgYXJlIHNwbGljZWQgaW50byB0aGUgcmVzdWx0IGVhY2ggdGltZSBgc2VwYXJhdG9yYCBpcyBtYXRjaGVkLlxuICogRml4ZXMgYnJvd3NlciBidWdzIGNvbXBhcmVkIHRvIHRoZSBuYXRpdmUgYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIGFuZCBjYW4gYmUgdXNlZCByZWxpYWJseVxuICogY3Jvc3MtYnJvd3Nlci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgU3RyaW5nIHRvIHNwbGl0LlxuICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfSBzZXBhcmF0b3IgUmVnZXggb3Igc3RyaW5nIHRvIHVzZSBmb3Igc2VwYXJhdGluZyB0aGUgc3RyaW5nLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtsaW1pdF0gTWF4aW11bSBudW1iZXIgb2YgaXRlbXMgdG8gaW5jbHVkZSBpbiB0aGUgcmVzdWx0IGFycmF5LlxuICogQHJldHVybnMge0FycmF5fSBBcnJheSBvZiBzdWJzdHJpbmdzLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBCYXNpYyB1c2VcbiAqIHNwbGl0KCdhIGIgYyBkJywgJyAnKTtcbiAqIC8vIC0+IFsnYScsICdiJywgJ2MnLCAnZCddXG4gKlxuICogLy8gV2l0aCBsaW1pdFxuICogc3BsaXQoJ2EgYiBjIGQnLCAnICcsIDIpO1xuICogLy8gLT4gWydhJywgJ2InXVxuICpcbiAqIC8vIEJhY2tyZWZlcmVuY2VzIGluIHJlc3VsdCBhcnJheVxuICogc3BsaXQoJy4ud29yZDEgd29yZDIuLicsIC8oW2Etel0rKShcXGQrKS9pKTtcbiAqIC8vIC0+IFsnLi4nLCAnd29yZCcsICcxJywgJyAnLCAnd29yZCcsICcyJywgJy4uJ11cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gc3BsaXQodW5kZWYpIHtcblxuICB2YXIgbmF0aXZlU3BsaXQgPSBTdHJpbmcucHJvdG90eXBlLnNwbGl0LFxuICAgIGNvbXBsaWFudEV4ZWNOcGNnID0gLygpPz8vLmV4ZWMoXCJcIilbMV0gPT09IHVuZGVmLFxuICAgIC8vIE5QQ0c6IG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwXG4gICAgc2VsZjtcblxuICBzZWxmID0gZnVuY3Rpb24oc3RyLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBgbmF0aXZlU3BsaXRgXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzZXBhcmF0b3IpICE9PSBcIltvYmplY3QgUmVnRXhwXVwiKSB7XG4gICAgICByZXR1cm4gbmF0aXZlU3BsaXQuY2FsbChzdHIsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH1cbiAgICB2YXIgb3V0cHV0ID0gW10sXG4gICAgICBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/IFwiaVwiIDogXCJcIikgKyAoc2VwYXJhdG9yLm11bHRpbGluZSA/IFwibVwiIDogXCJcIikgKyAoc2VwYXJhdG9yLmV4dGVuZGVkID8gXCJ4XCIgOiBcIlwiKSArIC8vIFByb3Bvc2VkIGZvciBFUzZcbiAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gXCJ5XCIgOiBcIlwiKSxcbiAgICAgIC8vIEZpcmVmb3ggMytcbiAgICAgIGxhc3RMYXN0SW5kZXggPSAwLFxuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHNlcGFyYXRvciA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyBcImdcIiksXG4gICAgICBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgIHN0ciArPSBcIlwiOyAvLyBUeXBlLWNvbnZlcnRcbiAgICBpZiAoIWNvbXBsaWFudEV4ZWNOcGNnKSB7XG4gICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgIHNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKFwiXlwiICsgc2VwYXJhdG9yLnNvdXJjZSArIFwiJCg/IVxcXFxzKVwiLCBmbGFncyk7XG4gICAgfVxuICAgIC8qIFZhbHVlcyBmb3IgYGxpbWl0YCwgcGVyIHRoZSBzcGVjOlxuICAgICAqIElmIHVuZGVmaW5lZDogNDI5NDk2NzI5NSAvLyBNYXRoLnBvdygyLCAzMikgLSAxXG4gICAgICogSWYgMCwgSW5maW5pdHksIG9yIE5hTjogMFxuICAgICAqIElmIHBvc2l0aXZlIG51bWJlcjogbGltaXQgPSBNYXRoLmZsb29yKGxpbWl0KTsgaWYgKGxpbWl0ID4gNDI5NDk2NzI5NSkgbGltaXQgLT0gNDI5NDk2NzI5NjtcbiAgICAgKiBJZiBuZWdhdGl2ZSBudW1iZXI6IDQyOTQ5NjcyOTYgLSBNYXRoLmZsb29yKE1hdGguYWJzKGxpbWl0KSlcbiAgICAgKiBJZiBvdGhlcjogVHlwZS1jb252ZXJ0LCB0aGVuIHVzZSB0aGUgYWJvdmUgcnVsZXNcbiAgICAgKi9cbiAgICBsaW1pdCA9IGxpbWl0ID09PSB1bmRlZiA/IC0xID4+PiAwIDogLy8gTWF0aC5wb3coMiwgMzIpIC0gMVxuICAgIGxpbWl0ID4+PiAwOyAvLyBUb1VpbnQzMihsaW1pdClcbiAgICB3aGlsZSAobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdHIpKSB7XG4gICAgICAvLyBgc2VwYXJhdG9yLmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goc3RyLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvclxuICAgICAgICAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cHNcbiAgICAgICAgaWYgKCFjb21wbGlhbnRFeGVjTnBjZyAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZikge1xuICAgICAgICAgICAgICAgIG1hdGNoW2ldID0gdW5kZWY7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICBpZiAob3V0cHV0Lmxlbmd0aCA+PSBsaW1pdCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2VwYXJhdG9yLmxhc3RJbmRleCA9PT0gbWF0Y2guaW5kZXgpIHtcbiAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yLnRlc3QoXCJcIikpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goXCJcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKHN0ci5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gbGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgbGltaXQpIDogb3V0cHV0O1xuICB9O1xuXG4gIHJldHVybiBzZWxmO1xufSkoKTtcbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG52YXIgS19NQVhfTEVOR1RIID0gMHg3ZmZmZmZmZlxuZXhwb3J0cy5rTWF4TGVuZ3RoID0gS19NQVhfTEVOR1RIXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFByaW50IHdhcm5pbmcgYW5kIHJlY29tbWVuZCB1c2luZyBgYnVmZmVyYCB2NC54IHdoaWNoIGhhcyBhbiBPYmplY3RcbiAqICAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIFdlIHJlcG9ydCB0aGF0IHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGlmIHRoZSBhcmUgbm90IHN1YmNsYXNzYWJsZVxuICogdXNpbmcgX19wcm90b19fLiBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YFxuICogKFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4KS4gSUUgMTAgbGFja3Mgc3VwcG9ydFxuICogZm9yIF9fcHJvdG9fXyBhbmQgaGFzIGEgYnVnZ3kgdHlwZWQgYXJyYXkgaW1wbGVtZW50YXRpb24uXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gdHlwZWRBcnJheVN1cHBvcnQoKVxuXG5pZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gIGNvbnNvbGUuZXJyb3IoXG4gICAgJ1RoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VwcG9ydCB3aGljaCBpcyByZXF1aXJlZCBieSAnICtcbiAgICAnYGJ1ZmZlcmAgdjUueC4gVXNlIGBidWZmZXJgIHY0LnggaWYgeW91IHJlcXVpcmUgb2xkIGJyb3dzZXIgc3VwcG9ydC4nXG4gIClcbn1cblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICAvLyBDYW4gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWQ/XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDJcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAncGFyZW50Jywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5idWZmZXJcbiAgfVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdvZmZzZXQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuICAgIHJldHVybiB0aGlzLmJ5dGVPZmZzZXRcbiAgfVxufSlcblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKGxlbmd0aCA+IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgdmFyIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgYnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGJ1ZlxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUoYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgdmFsdWU6IG51bGwsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuZnVuY3Rpb24gZnJvbSAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoaXNBcnJheUJ1ZmZlcih2YWx1ZSkgfHwgKHZhbHVlICYmIGlzQXJyYXlCdWZmZXIodmFsdWUuYnVmZmVyKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gTm90ZTogQ2hhbmdlIHByb3RvdHlwZSAqYWZ0ZXIqIEJ1ZmZlci5mcm9tIGlzIGRlZmluZWQgdG8gd29ya2Fyb3VuZCBDaHJvbWUgYnVnOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC8xNDhcbkJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbkJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2Moc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlIChzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gYnVmLndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICBidWYgPSBidWYuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlIChhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgYnVmW2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcImxlbmd0aFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICB2YXIgYnVmXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBidWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbilcblxuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuXG4gICAgb2JqLmNvcHkoYnVmLCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcob2JqKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgbnVtYmVySXNOYU4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcigwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgQXJyYXkuaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIEFycmF5LWxpa2UgT2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBLX01BWF9MRU5HVEhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuIGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlciA9PT0gdHJ1ZVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhidWYpKSB7XG4gICAgICBidWYgPSBCdWZmZXIuZnJvbShidWYpXG4gICAgfVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IGlzQXJyYXlCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCAoYW5kIHRoZSBgaXMtYnVmZmVyYCBucG0gcGFja2FnZSlcbi8vIHRvIGRldGVjdCBhIEJ1ZmZlciBpbnN0YW5jZS4gSXQncyBub3QgcG9zc2libGUgdG8gdXNlIGBpbnN0YW5jZW9mIEJ1ZmZlcmBcbi8vIHJlbGlhYmx5IGluIGEgYnJvd3NlcmlmeSBjb250ZXh0IGJlY2F1c2UgdGhlcmUgY291bGQgYmUgbXVsdGlwbGUgZGlmZmVyZW50XG4vLyBjb3BpZXMgb2YgdGhlICdidWZmZXInIHBhY2thZ2UgaW4gdXNlLiBUaGlzIG1ldGhvZCB3b3JrcyBldmVuIGZvciBCdWZmZXJcbi8vIGluc3RhbmNlcyB0aGF0IHdlcmUgY3JlYXRlZCBmcm9tIGFub3RoZXIgY29weSBvZiB0aGUgYGJ1ZmZlcmAgcGFja2FnZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE1NFxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZyA9IEJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmdcblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChudW1iZXJJc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChudW1iZXJJc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA+Pj4gMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIChieXRlc1tpICsgMV0gKiAyNTYpKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXInKVxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFVzZSBidWlsdC1pbiB3aGVuIGF2YWlsYWJsZSwgbWlzc2luZyBmcm9tIElFMTFcbiAgICB0aGlzLmNvcHlXaXRoaW4odGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpXG4gIH0gZWxzZSBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKHZhciBpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyAmJiBjb2RlIDwgMTI4KSB8fFxuICAgICAgICAgIGVuY29kaW5nID09PSAnbGF0aW4xJykge1xuICAgICAgICAvLyBGYXN0IHBhdGg6IElmIGB2YWxgIGZpdHMgaW50byBhIHNpbmdsZSBieXRlLCB1c2UgdGhhdCBudW1lcmljIHZhbHVlLlxuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogbmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgdmFsdWUgXCInICsgdmFsICtcbiAgICAgICAgJ1wiIGlzIGludmFsaWQgZm9yIGFyZ3VtZW50IFwidmFsdWVcIicpXG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teKy8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgdGFrZXMgZXF1YWwgc2lnbnMgYXMgZW5kIG9mIHRoZSBCYXNlNjQgZW5jb2RpbmdcbiAgc3RyID0gc3RyLnNwbGl0KCc9JylbMF1cbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0ci50cmltKCkucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG4vLyBBcnJheUJ1ZmZlcnMgZnJvbSBhbm90aGVyIGNvbnRleHQgKGkuZS4gYW4gaWZyYW1lKSBkbyBub3QgcGFzcyB0aGUgYGluc3RhbmNlb2ZgIGNoZWNrXG4vLyBidXQgdGhleSBzaG91bGQgYmUgdHJlYXRlZCBhcyB2YWxpZC4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTY2XG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8XG4gICAgKG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSAnQXJyYXlCdWZmZXInICYmXG4gICAgICB0eXBlb2Ygb2JqLmJ5dGVMZW5ndGggPT09ICdudW1iZXInKVxufVxuXG5mdW5jdGlvbiBudW1iZXJJc05hTiAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG9iaiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwidmFyIHRvQnVmZmVyID0gcmVxdWlyZSgndHlwZWRhcnJheS10by1idWZmZXInKVxudmFyIGF0b2IgPSByZXF1aXJlKCdhdG9iJylcbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50ID09PSAnZnVuY3Rpb24nXG5cbi8vIGNhY2hlZCwgdXNlZCBvbmx5IG9uY2UgZm9yIGJyb3dzZXIgZW52aXJvbm1lbnRzXG52YXIgdmVyaWZpZWRJbWFnZVR5cGVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY2FudmFzLCBvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIG9wdGlvbnMuaW1hZ2UgPSBvcHRpb25zLmltYWdlID8gb3B0aW9ucy5pbWFnZSA6IHt9XG4gIG9wdGlvbnMuaW1hZ2UudHlwZXMgPSBvcHRpb25zLmltYWdlLnR5cGVzID8gb3B0aW9ucy5pbWFnZS50eXBlcyA6IFtdXG5cbiAgLy8gdmFsaWRhdGUgc29tZSBvcHRpb25zIHRoaXMgY2xhc3MgbmVlZHNcbiAgaWYgKG9wdGlvbnMuaW1hZ2UudHlwZXMubGVuZ3RoID4gMikge1xuICAgIHRocm93IG5ldyBFcnJvcignVG9vIG1hbnkgaW1hZ2UgdHlwZXMgYXJlIHNwZWNpZmllZCEnKVxuICB9IGVsc2UgaWYgKG9wdGlvbnMuaW1hZ2UudHlwZXMubGVuZ3RoIDwgMSkge1xuICAgIC8vIFNldCBhIGRlZmF1bHQgaW1hZ2UgdHlwZSwganVzdCB0byBiZSByb2J1c3RcbiAgICBvcHRpb25zLmltYWdlLnR5cGVzID0gaXNCcm93c2VyID8gWyd3ZWJwJywgJ2pwZWcnXSA6IFsncG5nJ11cbiAgfVxuXG4gIGlmICghb3B0aW9ucy5pbWFnZS5xdWFsaXR5KSB7XG4gICAgb3B0aW9ucy5pbWFnZS5xdWFsaXR5ID0gMC41IC8vIGRlZmF1bHRcbiAgfVxuXG4gIHZhciBxdWFsaXR5ID0gcGFyc2VGbG9hdChvcHRpb25zLmltYWdlLnF1YWxpdHkpXG5cbiAgZnVuY3Rpb24gY29tcG9zZUltYWdlVHlwZSAoaW5kZXgpIHtcbiAgICB2YXIgaW1hZ2VUeXBlXG5cbiAgICBpZiAob3B0aW9ucy5pbWFnZS50eXBlc1tpbmRleF0pIHtcbiAgICAgIGltYWdlVHlwZSA9ICdpbWFnZS8nICsgb3B0aW9ucy5pbWFnZS50eXBlc1tpbmRleF1cbiAgICB9XG5cbiAgICByZXR1cm4gaW1hZ2VUeXBlXG4gIH1cblxuICBmdW5jdGlvbiBpc01hdGNoICh1cmksIGltYWdlVHlwZSkge1xuICAgIHZhciBtYXRjaCA9IHVyaSAmJiB1cmkubWF0Y2goaW1hZ2VUeXBlKVxuXG4gICAgbWF0Y2ggJiYgb3B0aW9ucy5kZWJ1ZyAmJiBvcHRpb25zLmRlYnVnKCdJbWFnZSB0eXBlICVzIHZlcmlmaWVkJywgaW1hZ2VUeXBlKVxuXG4gICAgcmV0dXJuIG1hdGNoXG4gIH1cblxuICAvLyBQZXJmb3JtYW5jZSB0d2Vhaywgd2UgZG8gbm90IG5lZWQgYSBiaWcgY2FudmFzIGZvciBmaW5kaW5nIG91dCB0aGUgc3VwcG9ydGVkIGltYWdlIHR5cGVcbiAgZnVuY3Rpb24gZ2V0VGVzdENhbnZhcyAoKSB7XG4gICAgdmFyIHRlc3RDYW52YXNcblxuICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgIHRlc3RDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuICAgICAgdGVzdENhbnZhcy53aWR0aCA9IHRlc3RDYW52YXMuaGVpZ2h0ID0gMVxuICAgIH0gZWxzZSB7XG4gICAgICB0ZXN0Q2FudmFzID0gY2FudmFzXG4gICAgfVxuXG4gICAgcmV0dXJuIHRlc3RDYW52YXNcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbnZhc1N1cHBvcnRzSW1hZ2VUeXBlQXN5bmMgKGltYWdlVHlwZSwgY2IpIHtcbiAgICB0cnkge1xuICAgICAgZ2V0VGVzdENhbnZhcygpLnRvRGF0YVVSTChpbWFnZVR5cGUsIGZ1bmN0aW9uIChlcnIsIHVyaSkge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgY2IoZXJyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNiKG51bGwsIGlzTWF0Y2godXJpLCBpbWFnZVR5cGUpKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgY2IobnVsbCwgZmFsc2UpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FudmFzU3VwcG9ydHNJbWFnZVR5cGVTeW5jIChpbWFnZVR5cGUpIHtcbiAgICB2YXIgbWF0Y2hcblxuICAgIHRyeSB7XG4gICAgICB2YXIgdGVzdENhbnZhcyA9IGdldFRlc3RDYW52YXMoKVxuICAgICAgdmFyIHVyaSA9IHRlc3RDYW52YXMudG9EYXRhVVJMICYmIHRlc3RDYW52YXMudG9EYXRhVVJMKGltYWdlVHlwZSlcblxuICAgICAgbWF0Y2ggPSBpc01hdGNoKHVyaSwgaW1hZ2VUeXBlKVxuICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgLy8gQ2FuIGhhcHBlbiB3aGVuIGkuRS4gYSBzcGlkZXIgaXMgY29taW5nLiBKdXN0IGJlIHJvYnVzdCBoZXJlIGFuZCBjb250aW51ZS5cbiAgICAgIG9wdGlvbnMuZGVidWcgJiZcbiAgICAgIG9wdGlvbnMubG9nZ2VyLmRlYnVnKCdGYWlsZWQgdG8gY2FsbCB0b0RhdGFVUkwoKSBvbiBjYW52YXMgZm9yIGltYWdlIHR5cGUgJXMnLCBpbWFnZVR5cGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoXG4gIH1cblxuICBmdW5jdGlvbiB2ZXJpZnlJbWFnZVR5cGVBc3luYyAoaW1hZ2VUeXBlLCBjYikge1xuICAgIGNhbnZhc1N1cHBvcnRzSW1hZ2VUeXBlQXN5bmMoaW1hZ2VUeXBlLCBmdW5jdGlvbiAoZXJyLCBtYXRjaCkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYihlcnIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICBjYihudWxsLCBpbWFnZVR5cGUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW1hZ2VUeXBlID0gY29tcG9zZUltYWdlVHlwZSgxKVxuXG4gICAgICAgICAgY2FudmFzU3VwcG9ydHNJbWFnZVR5cGVBc3luYyhpbWFnZVR5cGUsIGZ1bmN0aW9uIChlcnIsIG1hdGNoKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIGNiKGVycilcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNiKG51bGwsIG1hdGNoID8gaW1hZ2VUeXBlIDogbnVsbClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHZlcmlmeUltYWdlVHlwZVN5bmMgKGltYWdlVHlwZSkge1xuICAgIGlmICghY2FudmFzU3VwcG9ydHNJbWFnZVR5cGVTeW5jKGltYWdlVHlwZSkpIHtcbiAgICAgIGlmIChvcHRpb25zLmltYWdlLnR5cGVzWzFdKSB7XG4gICAgICAgIGltYWdlVHlwZSA9IGNvbXBvc2VJbWFnZVR5cGUoMSlcblxuICAgICAgICBpZiAoIWNhbnZhc1N1cHBvcnRzSW1hZ2VUeXBlU3luYyhpbWFnZVR5cGUpKSB7XG4gICAgICAgICAgaW1hZ2VUeXBlID0gbnVsbFxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbWFnZVR5cGUgPSBudWxsXG4gICAgICB9XG4gICAgfVxuXG4gICAgIWltYWdlVHlwZSAmJiBvcHRpb25zLmRlYnVnICYmIG9wdGlvbnMubG9nZ2VyLmRlYnVnKCdVbmFibGUgdG8gdmVyaWZ5IGltYWdlIHR5cGUnKVxuXG4gICAgcmV0dXJuIGltYWdlVHlwZVxuICB9XG5cbiAgLy8gY2FsbGJhY2tzIGFyZSBuZWVkZWQgZm9yIHNlcnZlciBzaWRlIHRlc3RzXG4gIGZ1bmN0aW9uIHZlcmlmeUltYWdlVHlwZSAoY2IpIHtcbiAgICB2YXIgaW1hZ2VUeXBlID0gY29tcG9zZUltYWdlVHlwZSgwKVxuXG4gICAgaWYgKGNiKSB7XG4gICAgICB2ZXJpZnlJbWFnZVR5cGVBc3luYyhpbWFnZVR5cGUsIGNiKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdmVyaWZ5SW1hZ2VUeXBlU3luYyhpbWFnZVR5cGUpXG4gICAgfVxuICB9XG5cbiAgLy8gdGhpcyBtZXRob2QgaXMgcHJvdmVuIHRvIGJlIGZhc3QsIHNlZVxuICAvLyBodHRwOi8vanNwZXJmLmNvbS9kYXRhLXVyaS10by1idWZmZXItcGVyZm9ybWFuY2UvM1xuICBmdW5jdGlvbiB1cmlUb0J1ZmZlciAodXJpKSB7XG4gICAgdmFyIHVyaVNwbGl0dGVkID0gdXJpLnNwbGl0KCcsJylbMV1cbiAgICB2YXIgYnl0ZXNcblxuICAgIC8vIEJld2FyZSB0aGF0IHRoZSBhdG9iIGZ1bmN0aW9uIG1pZ2h0IGJlIGEgc3RhdGljIG9uZSBmb3Igc2VydmVyIHNpZGUgdGVzdHNcbiAgICBpZiAodHlwZW9mIChhdG9iKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYnl0ZXMgPSBhdG9iKHVyaVNwbGl0dGVkKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIChzZWxmLmNvbnN0cnVjdG9yLmF0b2IpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBieXRlcyA9IHNlbGYuY29uc3RydWN0b3IuYXRvYih1cmlTcGxpdHRlZClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdhdG9iIGZ1bmN0aW9uIGlzIG1pc3NpbmcnKVxuICAgIH1cblxuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShieXRlcy5sZW5ndGgpXG5cbiAgICAvLyBodHRwOi8vbXJhbGUucGgvYmxvZy8yMDE0LzEyLzI0L2FycmF5LWxlbmd0aC1jYWNoaW5nLmh0bWxcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGJ5dGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgYXJyW2ldID0gYnl0ZXMuY2hhckNvZGVBdChpKVxuICAgIH1cblxuICAgIHJldHVybiB0b0J1ZmZlcihhcnIpXG4gIH1cblxuICBmdW5jdGlvbiB0b0J1ZmZlclN5bmMgKCkge1xuICAgIHZhciBpbWFnZVR5cGUgPSBzZWxmLmdldEltYWdlVHlwZSgpXG4gICAgdmFyIGJ1ZmZlclxuXG4gICAgaWYgKGltYWdlVHlwZSkge1xuICAgICAgdmFyIHVyaSA9IGNhbnZhcy50b0RhdGFVUkwoaW1hZ2VUeXBlLCBxdWFsaXR5KVxuICAgICAgYnVmZmVyID0gdXJpVG9CdWZmZXIodXJpKVxuICAgIH1cblxuICAgIHJldHVybiBidWZmZXJcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvQnVmZmVyQXN5bmMgKGNiKSB7XG4gICAgc2VsZi5nZXRJbWFnZVR5cGUoZnVuY3Rpb24gKGVyciwgaW1hZ2VUeXBlKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNiKGVycilcbiAgICAgIH0gZWxzZSBpZiAoIWltYWdlVHlwZSkge1xuICAgICAgICBjYigpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYW52YXMudG9EYXRhVVJMKGltYWdlVHlwZSwgZnVuY3Rpb24gKGVyciwgdXJpKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgY2IoZXJyKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYihudWxsLCB1cmlUb0J1ZmZlcih1cmkpKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgdGhpcy50b0J1ZmZlciA9IGZ1bmN0aW9uIChjYikge1xuICAgIGlmIChjYikge1xuICAgICAgdG9CdWZmZXJBc3luYyhjYilcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRvQnVmZmVyU3luYygpXG4gICAgfVxuICB9XG5cbiAgLy8gYnJvd3NlcnMgZG8gbm90IG5lZWQgYSBjYWxsYmFjaywgYnV0IHRlc3RzIGRvXG4gIHRoaXMuZ2V0SW1hZ2VUeXBlID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgLy8gb25seSBydW4gZm9yIHRoZSBmaXJzdCB0aW1lIHRoaXMgY29uc3RydWN0b3IgaXMgY2FsbGVkIGFuZFxuICAgIC8vIGNhY2hlIHJlc3VsdCBmb3IgdGhlIG5leHQgY2FsbHNcbiAgICBpZiAoY2IpIHtcbiAgICAgIGlmICghdmVyaWZpZWRJbWFnZVR5cGUgfHwgIWlzQnJvd3Nlcikge1xuICAgICAgICB2ZXJpZnlJbWFnZVR5cGUoZnVuY3Rpb24gKGVyciwgbmV3VmVyaWZpZWRJbWFnZVR5cGUpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBjYihlcnIpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZlcmlmaWVkSW1hZ2VUeXBlID0gbmV3VmVyaWZpZWRJbWFnZVR5cGVcbiAgICAgICAgICAgIGNiKG51bGwsIHZlcmlmaWVkSW1hZ2VUeXBlKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNiKG51bGwsIHZlcmlmaWVkSW1hZ2VUeXBlKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBvbiB0aGUgYnJvd3NlciBzaWRlIHdlIGRvIGNhY2hlIGl0IGZvciBzcGVlZFxuICAgICAgaWYgKCF2ZXJpZmllZEltYWdlVHlwZSB8fCAhaXNCcm93c2VyKSB7XG4gICAgICAgIHZlcmlmaWVkSW1hZ2VUeXBlID0gdmVyaWZ5SW1hZ2VUeXBlKClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZlcmlmaWVkSW1hZ2VUeXBlXG4gICAgfVxuICB9XG59XG4iLCIvLyBjb250YWlucywgYWRkLCByZW1vdmUsIHRvZ2dsZVxudmFyIGluZGV4b2YgPSByZXF1aXJlKCdpbmRleG9mJylcblxubW9kdWxlLmV4cG9ydHMgPSBDbGFzc0xpc3RcblxuZnVuY3Rpb24gQ2xhc3NMaXN0KGVsZW0pIHtcbiAgICB2YXIgY2wgPSBlbGVtLmNsYXNzTGlzdFxuXG4gICAgaWYgKGNsKSB7XG4gICAgICAgIHJldHVybiBjbFxuICAgIH1cblxuICAgIHZhciBjbGFzc0xpc3QgPSB7XG4gICAgICAgIGFkZDogYWRkXG4gICAgICAgICwgcmVtb3ZlOiByZW1vdmVcbiAgICAgICAgLCBjb250YWluczogY29udGFpbnNcbiAgICAgICAgLCB0b2dnbGU6IHRvZ2dsZVxuICAgICAgICAsIHRvU3RyaW5nOiAkdG9TdHJpbmdcbiAgICAgICAgLCBsZW5ndGg6IDBcbiAgICAgICAgLCBpdGVtOiBpdGVtXG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzTGlzdFxuXG4gICAgZnVuY3Rpb24gYWRkKHRva2VuKSB7XG4gICAgICAgIHZhciBsaXN0ID0gZ2V0VG9rZW5zKClcbiAgICAgICAgaWYgKGluZGV4b2YobGlzdCwgdG9rZW4pID4gLTEpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGxpc3QucHVzaCh0b2tlbilcbiAgICAgICAgc2V0VG9rZW5zKGxpc3QpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlKHRva2VuKSB7XG4gICAgICAgIHZhciBsaXN0ID0gZ2V0VG9rZW5zKClcbiAgICAgICAgICAgICwgaW5kZXggPSBpbmRleG9mKGxpc3QsIHRva2VuKVxuXG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgbGlzdC5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgIHNldFRva2VucyhsaXN0KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnRhaW5zKHRva2VuKSB7XG4gICAgICAgIHJldHVybiBpbmRleG9mKGdldFRva2VucygpLCB0b2tlbikgPiAtMVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvZ2dsZSh0b2tlbikge1xuICAgICAgICBpZiAoY29udGFpbnModG9rZW4pKSB7XG4gICAgICAgICAgICByZW1vdmUodG9rZW4pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFkZCh0b2tlbilcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiAkdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBlbGVtLmNsYXNzTmFtZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGl0ZW0oaW5kZXgpIHtcbiAgICAgICAgdmFyIHRva2VucyA9IGdldFRva2VucygpXG4gICAgICAgIHJldHVybiB0b2tlbnNbaW5kZXhdIHx8IG51bGxcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRUb2tlbnMoKSB7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZVxuXG4gICAgICAgIHJldHVybiBmaWx0ZXIoY2xhc3NOYW1lLnNwbGl0KFwiIFwiKSwgaXNUcnV0aHkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0VG9rZW5zKGxpc3QpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoXG5cbiAgICAgICAgZWxlbS5jbGFzc05hbWUgPSBsaXN0LmpvaW4oXCIgXCIpXG4gICAgICAgIGNsYXNzTGlzdC5sZW5ndGggPSBsZW5ndGhcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNsYXNzTGlzdFtpXSA9IGxpc3RbaV1cbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBsaXN0W2xlbmd0aF1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlciAoYXJyLCBmbikge1xuICAgIHZhciByZXQgPSBbXVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmbihhcnJbaV0pKSByZXQucHVzaChhcnJbaV0pXG4gICAgfVxuICAgIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaXNUcnV0aHkodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZVxufVxuIiwiLypcbiAqIGNsYXNzTGlzdC5qczogQ3Jvc3MtYnJvd3NlciBmdWxsIGVsZW1lbnQuY2xhc3NMaXN0IGltcGxlbWVudGF0aW9uLlxuICogMS4xLjIwMTUwMzEyXG4gKlxuICogQnkgRWxpIEdyZXksIGh0dHA6Ly9lbGlncmV5LmNvbVxuICogTGljZW5zZTogRGVkaWNhdGVkIHRvIHRoZSBwdWJsaWMgZG9tYWluLlxuICogICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VsaWdyZXkvY2xhc3NMaXN0LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWRcbiAqL1xuXG4vKmdsb2JhbCBzZWxmLCBkb2N1bWVudCwgRE9NRXhjZXB0aW9uICovXG5cbi8qISBAc291cmNlIGh0dHA6Ly9wdXJsLmVsaWdyZXkuY29tL2dpdGh1Yi9jbGFzc0xpc3QuanMvYmxvYi9tYXN0ZXIvY2xhc3NMaXN0LmpzICovXG5cbmlmIChcImRvY3VtZW50XCIgaW4gc2VsZikge1xuXG4vLyBGdWxsIHBvbHlmaWxsIGZvciBicm93c2VycyB3aXRoIG5vIGNsYXNzTGlzdCBzdXBwb3J0XG4vLyBJbmNsdWRpbmcgSUUgPCBFZGdlIG1pc3NpbmcgU1ZHRWxlbWVudC5jbGFzc0xpc3RcbmlmICghKFwiY2xhc3NMaXN0XCIgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIl9cIikpIFxuXHR8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMgJiYgIShcImNsYXNzTGlzdFwiIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXCJnXCIpKSkge1xuXG4oZnVuY3Rpb24gKHZpZXcpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmICghKCdFbGVtZW50JyBpbiB2aWV3KSkgcmV0dXJuO1xuXG52YXJcblx0ICBjbGFzc0xpc3RQcm9wID0gXCJjbGFzc0xpc3RcIlxuXHQsIHByb3RvUHJvcCA9IFwicHJvdG90eXBlXCJcblx0LCBlbGVtQ3RyUHJvdG8gPSB2aWV3LkVsZW1lbnRbcHJvdG9Qcm9wXVxuXHQsIG9iakN0ciA9IE9iamVjdFxuXHQsIHN0clRyaW0gPSBTdHJpbmdbcHJvdG9Qcm9wXS50cmltIHx8IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCBcIlwiKTtcblx0fVxuXHQsIGFyckluZGV4T2YgPSBBcnJheVtwcm90b1Byb3BdLmluZGV4T2YgfHwgZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHR2YXJcblx0XHRcdCAgaSA9IDBcblx0XHRcdCwgbGVuID0gdGhpcy5sZW5ndGhcblx0XHQ7XG5cdFx0Zm9yICg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGkgaW4gdGhpcyAmJiB0aGlzW2ldID09PSBpdGVtKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH1cblx0Ly8gVmVuZG9yczogcGxlYXNlIGFsbG93IGNvbnRlbnQgY29kZSB0byBpbnN0YW50aWF0ZSBET01FeGNlcHRpb25zXG5cdCwgRE9NRXggPSBmdW5jdGlvbiAodHlwZSwgbWVzc2FnZSkge1xuXHRcdHRoaXMubmFtZSA9IHR5cGU7XG5cdFx0dGhpcy5jb2RlID0gRE9NRXhjZXB0aW9uW3R5cGVdO1xuXHRcdHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG5cdH1cblx0LCBjaGVja1Rva2VuQW5kR2V0SW5kZXggPSBmdW5jdGlvbiAoY2xhc3NMaXN0LCB0b2tlbikge1xuXHRcdGlmICh0b2tlbiA9PT0gXCJcIikge1xuXHRcdFx0dGhyb3cgbmV3IERPTUV4KFxuXHRcdFx0XHQgIFwiU1lOVEFYX0VSUlwiXG5cdFx0XHRcdCwgXCJBbiBpbnZhbGlkIG9yIGlsbGVnYWwgc3RyaW5nIHdhcyBzcGVjaWZpZWRcIlxuXHRcdFx0KTtcblx0XHR9XG5cdFx0aWYgKC9cXHMvLnRlc3QodG9rZW4pKSB7XG5cdFx0XHR0aHJvdyBuZXcgRE9NRXgoXG5cdFx0XHRcdCAgXCJJTlZBTElEX0NIQVJBQ1RFUl9FUlJcIlxuXHRcdFx0XHQsIFwiU3RyaW5nIGNvbnRhaW5zIGFuIGludmFsaWQgY2hhcmFjdGVyXCJcblx0XHRcdCk7XG5cdFx0fVxuXHRcdHJldHVybiBhcnJJbmRleE9mLmNhbGwoY2xhc3NMaXN0LCB0b2tlbik7XG5cdH1cblx0LCBDbGFzc0xpc3QgPSBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdHZhclxuXHRcdFx0ICB0cmltbWVkQ2xhc3NlcyA9IHN0clRyaW0uY2FsbChlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpXG5cdFx0XHQsIGNsYXNzZXMgPSB0cmltbWVkQ2xhc3NlcyA/IHRyaW1tZWRDbGFzc2VzLnNwbGl0KC9cXHMrLykgOiBbXVxuXHRcdFx0LCBpID0gMFxuXHRcdFx0LCBsZW4gPSBjbGFzc2VzLmxlbmd0aFxuXHRcdDtcblx0XHRmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHR0aGlzLnB1c2goY2xhc3Nlc1tpXSk7XG5cdFx0fVxuXHRcdHRoaXMuX3VwZGF0ZUNsYXNzTmFtZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy50b1N0cmluZygpKTtcblx0XHR9O1xuXHR9XG5cdCwgY2xhc3NMaXN0UHJvdG8gPSBDbGFzc0xpc3RbcHJvdG9Qcm9wXSA9IFtdXG5cdCwgY2xhc3NMaXN0R2V0dGVyID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBuZXcgQ2xhc3NMaXN0KHRoaXMpO1xuXHR9XG47XG4vLyBNb3N0IERPTUV4Y2VwdGlvbiBpbXBsZW1lbnRhdGlvbnMgZG9uJ3QgYWxsb3cgY2FsbGluZyBET01FeGNlcHRpb24ncyB0b1N0cmluZygpXG4vLyBvbiBub24tRE9NRXhjZXB0aW9ucy4gRXJyb3IncyB0b1N0cmluZygpIGlzIHN1ZmZpY2llbnQgaGVyZS5cbkRPTUV4W3Byb3RvUHJvcF0gPSBFcnJvcltwcm90b1Byb3BdO1xuY2xhc3NMaXN0UHJvdG8uaXRlbSA9IGZ1bmN0aW9uIChpKSB7XG5cdHJldHVybiB0aGlzW2ldIHx8IG51bGw7XG59O1xuY2xhc3NMaXN0UHJvdG8uY29udGFpbnMgPSBmdW5jdGlvbiAodG9rZW4pIHtcblx0dG9rZW4gKz0gXCJcIjtcblx0cmV0dXJuIGNoZWNrVG9rZW5BbmRHZXRJbmRleCh0aGlzLCB0b2tlbikgIT09IC0xO1xufTtcbmNsYXNzTGlzdFByb3RvLmFkZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyXG5cdFx0ICB0b2tlbnMgPSBhcmd1bWVudHNcblx0XHQsIGkgPSAwXG5cdFx0LCBsID0gdG9rZW5zLmxlbmd0aFxuXHRcdCwgdG9rZW5cblx0XHQsIHVwZGF0ZWQgPSBmYWxzZVxuXHQ7XG5cdGRvIHtcblx0XHR0b2tlbiA9IHRva2Vuc1tpXSArIFwiXCI7XG5cdFx0aWYgKGNoZWNrVG9rZW5BbmRHZXRJbmRleCh0aGlzLCB0b2tlbikgPT09IC0xKSB7XG5cdFx0XHR0aGlzLnB1c2godG9rZW4pO1xuXHRcdFx0dXBkYXRlZCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdHdoaWxlICgrK2kgPCBsKTtcblxuXHRpZiAodXBkYXRlZCkge1xuXHRcdHRoaXMuX3VwZGF0ZUNsYXNzTmFtZSgpO1xuXHR9XG59O1xuY2xhc3NMaXN0UHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHR2YXJcblx0XHQgIHRva2VucyA9IGFyZ3VtZW50c1xuXHRcdCwgaSA9IDBcblx0XHQsIGwgPSB0b2tlbnMubGVuZ3RoXG5cdFx0LCB0b2tlblxuXHRcdCwgdXBkYXRlZCA9IGZhbHNlXG5cdFx0LCBpbmRleFxuXHQ7XG5cdGRvIHtcblx0XHR0b2tlbiA9IHRva2Vuc1tpXSArIFwiXCI7XG5cdFx0aW5kZXggPSBjaGVja1Rva2VuQW5kR2V0SW5kZXgodGhpcywgdG9rZW4pO1xuXHRcdHdoaWxlIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdHVwZGF0ZWQgPSB0cnVlO1xuXHRcdFx0aW5kZXggPSBjaGVja1Rva2VuQW5kR2V0SW5kZXgodGhpcywgdG9rZW4pO1xuXHRcdH1cblx0fVxuXHR3aGlsZSAoKytpIDwgbCk7XG5cblx0aWYgKHVwZGF0ZWQpIHtcblx0XHR0aGlzLl91cGRhdGVDbGFzc05hbWUoKTtcblx0fVxufTtcbmNsYXNzTGlzdFByb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uICh0b2tlbiwgZm9yY2UpIHtcblx0dG9rZW4gKz0gXCJcIjtcblxuXHR2YXJcblx0XHQgIHJlc3VsdCA9IHRoaXMuY29udGFpbnModG9rZW4pXG5cdFx0LCBtZXRob2QgPSByZXN1bHQgP1xuXHRcdFx0Zm9yY2UgIT09IHRydWUgJiYgXCJyZW1vdmVcIlxuXHRcdDpcblx0XHRcdGZvcmNlICE9PSBmYWxzZSAmJiBcImFkZFwiXG5cdDtcblxuXHRpZiAobWV0aG9kKSB7XG5cdFx0dGhpc1ttZXRob2RdKHRva2VuKTtcblx0fVxuXG5cdGlmIChmb3JjZSA9PT0gdHJ1ZSB8fCBmb3JjZSA9PT0gZmFsc2UpIHtcblx0XHRyZXR1cm4gZm9yY2U7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuICFyZXN1bHQ7XG5cdH1cbn07XG5jbGFzc0xpc3RQcm90by50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHRoaXMuam9pbihcIiBcIik7XG59O1xuXG5pZiAob2JqQ3RyLmRlZmluZVByb3BlcnR5KSB7XG5cdHZhciBjbGFzc0xpc3RQcm9wRGVzYyA9IHtcblx0XHQgIGdldDogY2xhc3NMaXN0R2V0dGVyXG5cdFx0LCBlbnVtZXJhYmxlOiB0cnVlXG5cdFx0LCBjb25maWd1cmFibGU6IHRydWVcblx0fTtcblx0dHJ5IHtcblx0XHRvYmpDdHIuZGVmaW5lUHJvcGVydHkoZWxlbUN0clByb3RvLCBjbGFzc0xpc3RQcm9wLCBjbGFzc0xpc3RQcm9wRGVzYyk7XG5cdH0gY2F0Y2ggKGV4KSB7IC8vIElFIDggZG9lc24ndCBzdXBwb3J0IGVudW1lcmFibGU6dHJ1ZVxuXHRcdGlmIChleC5udW1iZXIgPT09IC0weDdGRjVFQzU0KSB7XG5cdFx0XHRjbGFzc0xpc3RQcm9wRGVzYy5lbnVtZXJhYmxlID0gZmFsc2U7XG5cdFx0XHRvYmpDdHIuZGVmaW5lUHJvcGVydHkoZWxlbUN0clByb3RvLCBjbGFzc0xpc3RQcm9wLCBjbGFzc0xpc3RQcm9wRGVzYyk7XG5cdFx0fVxuXHR9XG59IGVsc2UgaWYgKG9iakN0cltwcm90b1Byb3BdLl9fZGVmaW5lR2V0dGVyX18pIHtcblx0ZWxlbUN0clByb3RvLl9fZGVmaW5lR2V0dGVyX18oY2xhc3NMaXN0UHJvcCwgY2xhc3NMaXN0R2V0dGVyKTtcbn1cblxufShzZWxmKSk7XG5cbn0gZWxzZSB7XG4vLyBUaGVyZSBpcyBmdWxsIG9yIHBhcnRpYWwgbmF0aXZlIGNsYXNzTGlzdCBzdXBwb3J0LCBzbyBqdXN0IGNoZWNrIGlmIHdlIG5lZWRcbi8vIHRvIG5vcm1hbGl6ZSB0aGUgYWRkL3JlbW92ZSBhbmQgdG9nZ2xlIEFQSXMuXG5cbihmdW5jdGlvbiAoKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciB0ZXN0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJfXCIpO1xuXG5cdHRlc3RFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjMVwiLCBcImMyXCIpO1xuXG5cdC8vIFBvbHlmaWxsIGZvciBJRSAxMC8xMSBhbmQgRmlyZWZveCA8MjYsIHdoZXJlIGNsYXNzTGlzdC5hZGQgYW5kXG5cdC8vIGNsYXNzTGlzdC5yZW1vdmUgZXhpc3QgYnV0IHN1cHBvcnQgb25seSBvbmUgYXJndW1lbnQgYXQgYSB0aW1lLlxuXHRpZiAoIXRlc3RFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImMyXCIpKSB7XG5cdFx0dmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uKG1ldGhvZCkge1xuXHRcdFx0dmFyIG9yaWdpbmFsID0gRE9NVG9rZW5MaXN0LnByb3RvdHlwZVttZXRob2RdO1xuXG5cdFx0XHRET01Ub2tlbkxpc3QucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih0b2tlbikge1xuXHRcdFx0XHR2YXIgaSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0XHR0b2tlbiA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdFx0XHRvcmlnaW5hbC5jYWxsKHRoaXMsIHRva2VuKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9O1xuXHRcdGNyZWF0ZU1ldGhvZCgnYWRkJyk7XG5cdFx0Y3JlYXRlTWV0aG9kKCdyZW1vdmUnKTtcblx0fVxuXG5cdHRlc3RFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoXCJjM1wiLCBmYWxzZSk7XG5cblx0Ly8gUG9seWZpbGwgZm9yIElFIDEwIGFuZCBGaXJlZm94IDwyNCwgd2hlcmUgY2xhc3NMaXN0LnRvZ2dsZSBkb2VzIG5vdFxuXHQvLyBzdXBwb3J0IHRoZSBzZWNvbmQgYXJndW1lbnQuXG5cdGlmICh0ZXN0RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJjM1wiKSkge1xuXHRcdHZhciBfdG9nZ2xlID0gRE9NVG9rZW5MaXN0LnByb3RvdHlwZS50b2dnbGU7XG5cblx0XHRET01Ub2tlbkxpc3QucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uKHRva2VuLCBmb3JjZSkge1xuXHRcdFx0aWYgKDEgaW4gYXJndW1lbnRzICYmICF0aGlzLmNvbnRhaW5zKHRva2VuKSA9PT0gIWZvcmNlKSB7XG5cdFx0XHRcdHJldHVybiBmb3JjZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBfdG9nZ2xlLmNhbGwodGhpcywgdG9rZW4pO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0fVxuXG5cdHRlc3RFbGVtZW50ID0gbnVsbDtcbn0oKSk7XG5cbn1cblxufVxuXG4iLCJcclxuLyoqXHJcbiAqIEV4cG9zZSBgRW1pdHRlcmAuXHJcbiAqL1xyXG5cclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRW1pdHRlcihvYmopIHtcclxuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XHJcbiAgZm9yICh2YXIga2V5IGluIEVtaXR0ZXIucHJvdG90eXBlKSB7XHJcbiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICAodGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW10pXHJcbiAgICAucHVzaChmbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBhbiBgZXZlbnRgIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIGEgc2luZ2xlXHJcbiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIGZ1bmN0aW9uIG9uKCkge1xyXG4gICAgdGhpcy5vZmYoZXZlbnQsIG9uKTtcclxuICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICBvbi5mbiA9IGZuO1xyXG4gIHRoaXMub24oZXZlbnQsIG9uKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBgZXZlbnRgIG9yIGFsbFxyXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub2ZmID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcblxyXG4gIC8vIGFsbFxyXG4gIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyBzcGVjaWZpYyBldmVudFxyXG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpcztcclxuXHJcbiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xyXG4gIGlmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxyXG4gIHZhciBjYjtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgY2IgPSBjYWxsYmFja3NbaV07XHJcbiAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xyXG4gICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRW1pdCBgZXZlbnRgIHdpdGggdGhlIGdpdmVuIGFyZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge01peGVkfSAuLi5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxyXG4gICAgLCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG5cclxuICBpZiAoY2FsbGJhY2tzKSB7XHJcbiAgICBjYWxsYmFja3MgPSBjYWxsYmFja3Muc2xpY2UoMCk7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgIGNhbGxiYWNrc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybiBhcnJheSBvZiBjYWxsYmFja3MgZm9yIGBldmVudGAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHJldHVybiB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHRoaXMgZW1pdHRlciBoYXMgYGV2ZW50YCBoYW5kbGVycy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHJldHVybiAhISB0aGlzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoO1xyXG59O1xyXG4iLCJ2YXIgRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTkVEX0JZID0gMTZcblxubW9kdWxlLmV4cG9ydHMgPSBjb250YWluc1xuXG5mdW5jdGlvbiBjb250YWlucyhjb250YWluZXIsIGVsZW0pIHtcbiAgICBpZiAoY29udGFpbmVyLmNvbnRhaW5zKSB7XG4gICAgICAgIHJldHVybiBjb250YWluZXIuY29udGFpbnMoZWxlbSlcbiAgICB9XG5cbiAgICB2YXIgY29tcGFyaXNvbiA9IGNvbnRhaW5lci5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtKVxuXG4gICAgcmV0dXJuIGNvbXBhcmlzb24gPT09IDAgfHwgY29tcGFyaXNvbiAmIERPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5FRF9CWVxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5cbmZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTtcbiAgfVxuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IEJ1ZmZlci5pc0J1ZmZlcjtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuIiwiLy8gICAgIGNyZWF0ZS1lcnJvci5qcyAwLjMuMVxuLy8gICAgIChjKSAyMDEzIFRpbSBHcmllc3NlclxuLy8gICAgIFRoaXMgc291cmNlIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEEgc2ltcGxlIHV0aWxpdHkgZm9yIHN1YmNsYXNzaW5nIHRoZSBcIkVycm9yXCJcbi8vIG9iamVjdCBpbiBtdWx0aXBsZSBlbnZpcm9ubWVudHMsIHdoaWxlIG1haW50YWluaW5nXG4vLyByZWxldmFudCBzdGFjayB0cmFjZXMsIG1lc3NhZ2VzLCBhbmQgcHJvdG90eXBlcy5cbmZhY3RvcnkoZnVuY3Rpb24oKSB7XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8vIENyZWF0ZXMgYW4gbmV3IGVycm9yIHR5cGUgd2l0aCBhIFwibmFtZVwiLFxuLy8gYW5kIGFueSBhZGRpdGlvbmFsIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgYmUgc2V0XG4vLyBvbiB0aGUgZXJyb3IgaW5zdGFuY2UuXG5yZXR1cm4gZnVuY3Rpb24oKSB7XG4gIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICB9XG4gIHZhciBuYW1lICAgICAgID0gZ2V0TmFtZShhcmdzKTtcbiAgdmFyIHRhcmdldCAgICAgPSBnZXRUYXJnZXQoYXJncyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gZ2V0UHJvcHMoYXJncyk7XG4gIGZ1bmN0aW9uIEVycm9yQ3RvcihtZXNzYWdlLCBvYmopIHtcbiAgICBhdHRhY2hQcm9wcyh0aGlzLCBwcm9wZXJ0aWVzKTtcbiAgICBhdHRhY2hQcm9wcyh0aGlzLCBvYmopO1xuICAgIHRoaXMubWVzc2FnZSA9IChtZXNzYWdlIHx8IHRoaXMubWVzc2FnZSk7XG4gICAgaWYgKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZS5tZXNzYWdlO1xuICAgICAgdGhpcy5zdGFjayA9IG1lc3NhZ2Uuc3RhY2s7XG4gICAgfSBlbHNlIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIEVycigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IEVycm9yQ3RvcjsgfVxuICBFcnIucHJvdG90eXBlID0gdGFyZ2V0Wydwcm90b3R5cGUnXTtcbiAgRXJyb3JDdG9yLnByb3RvdHlwZSA9IG5ldyBFcnIoKTtcbiAgRXJyb3JDdG9yLnByb3RvdHlwZS5uYW1lID0gKCcnICsgbmFtZSkgfHwgJ0N1c3RvbUVycm9yJztcbiAgcmV0dXJuIEVycm9yQ3Rvcjtcbn07XG5cbi8vIEp1c3QgYSBmZXcgaGVscGVycyB0byBjbGVhbiB1cCB0aGUgZnVuY3Rpb24gYWJvdmVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wZXRrYWFudG9ub3YvYmx1ZWJpcmQvd2lraS9PcHRpbWl6YXRpb24ta2lsbGVyc1xuZnVuY3Rpb24gZ2V0TmFtZShhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICByZXR1cm4gaXNFcnJvcihhcmdzWzBdKSA/IChhcmdzWzFdIHx8ICcnKSA6IGFyZ3NbMF07XG59XG5mdW5jdGlvbiBnZXRUYXJnZXQoYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDApIHJldHVybiBFcnJvcjtcbiAgcmV0dXJuIGlzRXJyb3IoYXJnc1swXSkgPyBhcmdzWzBdIDogRXJyb3I7XG59XG5mdW5jdGlvbiBnZXRQcm9wcyhhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG4gIHJldHVybiBpc0Vycm9yKGFyZ3NbMF0pID8gYXJnc1syXSA6IGFyZ3NbMV07XG59XG5mdW5jdGlvbiBpbmhlcml0ZWRLZXlzKG9iaikge1xuICB2YXIgcmV0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICByZXQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIFJpZ2h0IG5vdyB3ZSdyZSBqdXN0IGFzc3VtaW5nIHRoYXQgYSBmdW5jdGlvbiBpbiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgYW4gZXJyb3IuXG5mdW5jdGlvbiBpc0Vycm9yKG9iaikge1xuICByZXR1cm4gKHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIik7XG59XG5cbi8vIFdlIGRvbid0IG5lZWQgdGhlIGZ1bGwgdW5kZXJzY29yZSBjaGVjayBoZXJlLCBzaW5jZSBpdCBzaG91bGQgZWl0aGVyIGJlXG4vLyBhbiBvYmplY3QtbGl0ZXJhbCwgb3Igbm90aGluZyBhdCBhbGwuXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuIChvYmogJiYgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiB0b1N0cmluZy5jYWxsKG9iaikgPT09IFwiW29iamVjdCBPYmplY3RdXCIpO1xufVxuXG4vLyBVc2VkIHRvIGF0dGFjaCBhdHRyaWJ1dGVzIHRvIHRoZSBlcnJvciBvYmplY3QgaW4gdGhlIGNvbnN0cnVjdG9yLlxuZnVuY3Rpb24gYXR0YWNoUHJvcHMoY29udGV4dCwgdGFyZ2V0KSB7XG4gIGlmIChpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgdmFyIGtleXMgPSBpbmhlcml0ZWRLZXlzKHRhcmdldCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgY29udGV4dFtrZXlzW2ldXSA9IGNsb25lKHRhcmdldFtrZXlzW2ldXSk7XG4gICAgfVxuICB9XG59XG5cbi8vIERvbid0IG5lZWQgdGhlIGZ1bGwtb3V0IFwiY2xvbmVcIiBtZWNoYW5pc20gaGVyZSwgc2luY2UgaWYgeW91J3JlXG4vLyB0cnlpbmcgdG8gc2V0IHRoaW5ncyBvdGhlciB0aGFuIGVtcHR5IGFycmF5cy9vYmplY3RzIG9uIHlvdXJcbi8vIHN1Yi1jbGFzc2VkIGBFcnJvcmAgb2JqZWN0LCB5b3UncmUgcHJvYmFibHkgZG9pbmcgaXQgd3JvbmcuXG5mdW5jdGlvbiBjbG9uZSh0YXJnZXQpIHtcbiAgaWYgKHRhcmdldCA9PSBudWxsIHx8IHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIpIHJldHVybiB0YXJnZXQ7XG4gIHZhciBjbG9uZWQgPSB0YXJnZXQuY29uc3RydWN0b3IgPyB0YXJnZXQuY29uc3RydWN0b3IoKSA6IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGZvciAodmFyIGF0dHIgaW4gdGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldC5oYXNPd25Qcm9wZXJ0eShhdHRyKSkge1xuICAgICAgY2xvbmVkW2F0dHJdID0gdGFyZ2V0W2F0dHJdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2xvbmVkO1xufVxuXG59KTtcblxuLy8gQm9pbGVycGxhdGUgVU1EIGRlZmluaXRpb24gYmxvY2suLi5cbn0pKGZ1bmN0aW9uKGNyZWF0ZUVycm9yTGliKSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShjcmVhdGVFcnJvckxpYik7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVFcnJvckxpYigpO1xuICB9IGVsc2Uge1xuICAgIHZhciByb290ID0gdGhpcztcbiAgICB2YXIgbGFzdGNyZWF0ZUVycm9yID0gcm9vdC5jcmVhdGVFcnJvcjtcbiAgICB2YXIgY3JlYXRlRXJyb3IgPSByb290LmNyZWF0ZUVycm9yID0gY3JlYXRlRXJyb3JMaWIoKTtcbiAgICBjcmVhdGVFcnJvci5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByb290LmNyZWF0ZUVycm9yID0gbGFzdGNyZWF0ZUVycm9yO1xuICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yO1xuICAgIH07XG4gIH1cbn0pO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsLmRlZXBtZXJnZSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIGlzTWVyZ2VhYmxlT2JqZWN0ID0gZnVuY3Rpb24gaXNNZXJnZWFibGVPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSlcblx0XHQmJiAhaXNTcGVjaWFsKHZhbHVlKVxufTtcblxuZnVuY3Rpb24gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNTcGVjaWFsKHZhbHVlKSB7XG5cdHZhciBzdHJpbmdWYWx1ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cblx0cmV0dXJuIHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBSZWdFeHBdJ1xuXHRcdHx8IHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBEYXRlXSdcblx0XHR8fCBpc1JlYWN0RWxlbWVudCh2YWx1ZSlcbn1cblxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2I1YWM5NjNmYjc5MWQxMjk4ZTdmMzk2MjM2MzgzYmM5NTVmOTE2YzEvc3JjL2lzb21vcnBoaWMvY2xhc3NpYy9lbGVtZW50L1JlYWN0RWxlbWVudC5qcyNMMjEtTDI1XG52YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGNhblVzZVN5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcblxuZnVuY3Rpb24gaXNSZWFjdEVsZW1lbnQodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcbn1cblxuZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9XG59XG5cbmZ1bmN0aW9uIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHZhbHVlLCBvcHRpb25zKSB7XG5cdHJldHVybiAob3B0aW9ucy5jbG9uZSAhPT0gZmFsc2UgJiYgb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkpXG5cdFx0PyBkZWVwbWVyZ2UoZW1wdHlUYXJnZXQodmFsdWUpLCB2YWx1ZSwgb3B0aW9ucylcblx0XHQ6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHJldHVybiB0YXJnZXQuY29uY2F0KHNvdXJjZSkubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoZWxlbWVudCwgb3B0aW9ucylcblx0fSlcbn1cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0dmFyIGRlc3RpbmF0aW9uID0ge307XG5cdGlmIChvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcblx0XHRPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQodGFyZ2V0W2tleV0sIG9wdGlvbnMpO1xuXHRcdH0pO1xuXHR9XG5cdE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRpZiAoIW9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3Qoc291cmNlW2tleV0pIHx8ICF0YXJnZXRba2V5XSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdG9wdGlvbnMuYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcblx0b3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCA9IG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgfHwgaXNNZXJnZWFibGVPYmplY3Q7XG5cblx0dmFyIHNvdXJjZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG5cdHZhciB0YXJnZXRJc0FycmF5ID0gQXJyYXkuaXNBcnJheSh0YXJnZXQpO1xuXHR2YXIgc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCA9IHNvdXJjZUlzQXJyYXkgPT09IHRhcmdldElzQXJyYXk7XG5cblx0aWYgKCFzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoKSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIGlmIChzb3VyY2VJc0FycmF5KSB7XG5cdFx0cmV0dXJuIG9wdGlvbnMuYXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH1cbn1cblxuZGVlcG1lcmdlLmFsbCA9IGZ1bmN0aW9uIGRlZXBtZXJnZUFsbChhcnJheSwgb3B0aW9ucykge1xuXHRpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXknKVxuXHR9XG5cblx0cmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihwcmV2LCBuZXh0KSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZShwcmV2LCBuZXh0LCBvcHRpb25zKVxuXHR9LCB7fSlcbn07XG5cbnZhciBkZWVwbWVyZ2VfMSA9IGRlZXBtZXJnZTtcblxucmV0dXJuIGRlZXBtZXJnZV8xO1xuXG59KSkpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gYXJndW1lbnRzW2ldO1xuICAgIH1cbn07XG4iLCJ2YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJ2dsb2JhbCcpXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJylcblxudmFyIG1ha2VEZXNwb3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBEZXNwb3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGdsb2JhbC5fc2luZ2xldG9uRGVzcG90SW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBnbG9iYWwuX3NpbmdsZXRvbkRlc3BvdEluc3RhbmNlXG4gICAgfSBlbHNlIHtcbiAgICAgIGdsb2JhbC5fc2luZ2xldG9uRGVzcG90SW5zdGFuY2UgPSB0aGlzXG4gICAgICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKVxuICAgIH1cbiAgfVxuXG4gIHV0aWwuaW5oZXJpdHMoRGVzcG90LCBFdmVudEVtaXR0ZXIpXG5cbiAgcmV0dXJuIG5ldyBEZXNwb3QoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1ha2VEZXNwb3QoKVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJ2dsb2JhbC9kb2N1bWVudCcpXG52YXIgRXZlbnQgPSByZXF1aXJlKCdnZXZhbCcpXG52YXIgS2V5cyA9IHJlcXVpcmUoJy4va2V5cycpXG5cbm1vZHVsZS5leHBvcnRzID0gVmlzaWJpbGl0eVxuXG5mdW5jdGlvbiBWaXNpYmlsaXR5ICgpIHtcbiAgdmFyIGtleXMgPSBLZXlzKGRvY3VtZW50KVxuICBpZiAoIWtleXMpIHJldHVybiBub29wU2hpbSgpXG5cbiAgcmV0dXJuIHtcbiAgICB2aXNpYmxlOiB2aXNpYmxlLFxuICAgIG9uQ2hhbmdlOiBFdmVudChsaXN0ZW4pXG4gIH1cblxuICBmdW5jdGlvbiB2aXNpYmxlICgpIHtcbiAgICByZXR1cm4gIWRvY3VtZW50W2tleXMuaGlkZGVuXVxuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuIChicm9hZGNhc3QpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGtleXMuZXZlbnQsIGZ1bmN0aW9uIG9uVmlzaWJpbGl0eUNoYW5nZSAoKSB7XG4gICAgICBicm9hZGNhc3QodmlzaWJsZSgpKVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gbm9vcFNoaW0gKCkge1xuICByZXR1cm4ge1xuICAgIHZpc2libGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcbiAgICBvbkNoYW5nZTogbm9vcFxuICB9XG59XG5cbmZ1bmN0aW9uIG5vb3AgKCkge31cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNcblxuZnVuY3Rpb24ga2V5cyAoZG9jdW1lbnQpIHtcbiAgdmFyIHByZWZpeCA9IGRldGVjdFByZWZpeChkb2N1bWVudClcbiAgaWYgKHByZWZpeCA9PSBudWxsKSByZXR1cm5cbiAgcmV0dXJuIHtcbiAgICBoaWRkZW46IGxvd2VyY2FzZUZpcnN0KHByZWZpeCArICdIaWRkZW4nKSxcbiAgICBldmVudDogcHJlZml4ICsgJ3Zpc2liaWxpdHljaGFuZ2UnXG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0ZWN0UHJlZml4IChkb2N1bWVudCkge1xuICBpZiAoZG9jdW1lbnQuaGlkZGVuICE9IG51bGwpIHJldHVybiAnJ1xuICBpZiAoZG9jdW1lbnQubW96SGlkZGVuICE9IG51bGwpIHJldHVybiAnbW96J1xuICBpZiAoZG9jdW1lbnQubXNIaWRkZW4gIT0gbnVsbCkgcmV0dXJuICdtcydcbiAgaWYgKGRvY3VtZW50LndlYmtpdEhpZGRlbiAhPSBudWxsKSByZXR1cm4gJ3dlYmtpdCdcbn1cblxuZnVuY3Rpb24gbG93ZXJjYXNlRmlyc3QgKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnN1YnN0cmluZygwLCAxKS50b0xvd2VyQ2FzZSgpICsgc3RyaW5nLnN1YnN0cmluZygxKVxufVxuIiwidmFyIHN0cmVhbSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpXG52YXIgZW9zID0gcmVxdWlyZSgnZW5kLW9mLXN0cmVhbScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgc2hpZnQgPSByZXF1aXJlKCdzdHJlYW0tc2hpZnQnKVxuXG52YXIgU0lHTkFMX0ZMVVNIID0gKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5mcm9tICE9PSBVaW50OEFycmF5LmZyb20pXG4gID8gQnVmZmVyLmZyb20oWzBdKVxuICA6IG5ldyBCdWZmZXIoWzBdKVxuXG52YXIgb251bmNvcmsgPSBmdW5jdGlvbihzZWxmLCBmbikge1xuICBpZiAoc2VsZi5fY29ya2VkKSBzZWxmLm9uY2UoJ3VuY29yaycsIGZuKVxuICBlbHNlIGZuKClcbn1cblxudmFyIGRlc3Ryb3llciA9IGZ1bmN0aW9uKHNlbGYsIGVuZCkge1xuICByZXR1cm4gZnVuY3Rpb24oZXJyKSB7XG4gICAgaWYgKGVycikgc2VsZi5fZGVzdHJveUludGVydmFsKGVycilcbiAgICBlbHNlIGlmIChlbmQgJiYgIXNlbGYuX2VuZGVkKSBzZWxmLmVuZCgpXG4gIH1cbn1cblxudmFyIGVuZCA9IGZ1bmN0aW9uKHdzLCBmbikge1xuICBpZiAoIXdzKSByZXR1cm4gZm4oKVxuICBpZiAod3MuX3dyaXRhYmxlU3RhdGUgJiYgd3MuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQpIHJldHVybiBmbigpXG4gIGlmICh3cy5fd3JpdGFibGVTdGF0ZSkgcmV0dXJuIHdzLmVuZChmbilcbiAgd3MuZW5kKClcbiAgZm4oKVxufVxuXG52YXIgdG9TdHJlYW1zMiA9IGZ1bmN0aW9uKHJzKSB7XG4gIHJldHVybiBuZXcgKHN0cmVhbS5SZWFkYWJsZSkoe29iamVjdE1vZGU6dHJ1ZSwgaGlnaFdhdGVyTWFyazoxNn0pLndyYXAocnMpXG59XG5cbnZhciBEdXBsZXhpZnkgPSBmdW5jdGlvbih3cml0YWJsZSwgcmVhZGFibGUsIG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleGlmeSkpIHJldHVybiBuZXcgRHVwbGV4aWZ5KHdyaXRhYmxlLCByZWFkYWJsZSwgb3B0cylcbiAgc3RyZWFtLkR1cGxleC5jYWxsKHRoaXMsIG9wdHMpXG5cbiAgdGhpcy5fd3JpdGFibGUgPSBudWxsXG4gIHRoaXMuX3JlYWRhYmxlID0gbnVsbFxuICB0aGlzLl9yZWFkYWJsZTIgPSBudWxsXG5cbiAgdGhpcy5fZm9yd2FyZERlc3Ryb3kgPSAhb3B0cyB8fCBvcHRzLmRlc3Ryb3kgIT09IGZhbHNlXG4gIHRoaXMuX2ZvcndhcmRFbmQgPSAhb3B0cyB8fCBvcHRzLmVuZCAhPT0gZmFsc2VcbiAgdGhpcy5fY29ya2VkID0gMSAvLyBzdGFydCBjb3JrZWRcbiAgdGhpcy5fb25kcmFpbiA9IG51bGxcbiAgdGhpcy5fZHJhaW5lZCA9IGZhbHNlXG4gIHRoaXMuX2ZvcndhcmRpbmcgPSBmYWxzZVxuICB0aGlzLl91bndyaXRlID0gbnVsbFxuICB0aGlzLl91bnJlYWQgPSBudWxsXG4gIHRoaXMuX2VuZGVkID0gZmFsc2VcbiAgdGhpcy5fZXJyb3IgPSBudWxsXG4gIHRoaXMuX3ByZWZlckVycm9yID0gZmFsc2VcblxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlXG5cbiAgaWYgKHdyaXRhYmxlKSB0aGlzLnNldFdyaXRhYmxlKHdyaXRhYmxlKVxuICBpZiAocmVhZGFibGUpIHRoaXMuc2V0UmVhZGFibGUocmVhZGFibGUpXG59XG5cbmluaGVyaXRzKER1cGxleGlmeSwgc3RyZWFtLkR1cGxleClcblxuRHVwbGV4aWZ5Lm9iaiA9IGZ1bmN0aW9uKHdyaXRhYmxlLCByZWFkYWJsZSwgb3B0cykge1xuICBpZiAoIW9wdHMpIG9wdHMgPSB7fVxuICBvcHRzLm9iamVjdE1vZGUgPSB0cnVlXG4gIG9wdHMuaGlnaFdhdGVyTWFyayA9IDE2XG4gIHJldHVybiBuZXcgRHVwbGV4aWZ5KHdyaXRhYmxlLCByZWFkYWJsZSwgb3B0cylcbn1cblxuRHVwbGV4aWZ5LnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24oKSB7XG4gIGlmICgrK3RoaXMuX2NvcmtlZCA9PT0gMSkgdGhpcy5lbWl0KCdjb3JrJylcbn1cblxuRHVwbGV4aWZ5LnByb3RvdHlwZS51bmNvcmsgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuX2NvcmtlZCAmJiAtLXRoaXMuX2NvcmtlZCA9PT0gMCkgdGhpcy5lbWl0KCd1bmNvcmsnKVxufVxuXG5EdXBsZXhpZnkucHJvdG90eXBlLnNldFdyaXRhYmxlID0gZnVuY3Rpb24od3JpdGFibGUpIHtcbiAgaWYgKHRoaXMuX3Vud3JpdGUpIHRoaXMuX3Vud3JpdGUoKVxuXG4gIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgIGlmICh3cml0YWJsZSAmJiB3cml0YWJsZS5kZXN0cm95KSB3cml0YWJsZS5kZXN0cm95KClcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmICh3cml0YWJsZSA9PT0gbnVsbCB8fCB3cml0YWJsZSA9PT0gZmFsc2UpIHtcbiAgICB0aGlzLmVuZCgpXG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIHVuZW5kID0gZW9zKHdyaXRhYmxlLCB7d3JpdGFibGU6dHJ1ZSwgcmVhZGFibGU6ZmFsc2V9LCBkZXN0cm95ZXIodGhpcywgdGhpcy5fZm9yd2FyZEVuZCkpXG5cbiAgdmFyIG9uZHJhaW4gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgb25kcmFpbiA9IHNlbGYuX29uZHJhaW5cbiAgICBzZWxmLl9vbmRyYWluID0gbnVsbFxuICAgIGlmIChvbmRyYWluKSBvbmRyYWluKClcbiAgfVxuXG4gIHZhciBjbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuX3dyaXRhYmxlLnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pXG4gICAgdW5lbmQoKVxuICB9XG5cbiAgaWYgKHRoaXMuX3Vud3JpdGUpIHByb2Nlc3MubmV4dFRpY2sob25kcmFpbikgLy8gZm9yY2UgYSBkcmFpbiBvbiBzdHJlYW0gcmVzZXQgdG8gYXZvaWQgbGl2ZWxvY2tzXG5cbiAgdGhpcy5fd3JpdGFibGUgPSB3cml0YWJsZVxuICB0aGlzLl93cml0YWJsZS5vbignZHJhaW4nLCBvbmRyYWluKVxuICB0aGlzLl91bndyaXRlID0gY2xlYXJcblxuICB0aGlzLnVuY29yaygpIC8vIGFsd2F5cyB1bmNvcmsgc2V0V3JpdGFibGVcbn1cblxuRHVwbGV4aWZ5LnByb3RvdHlwZS5zZXRSZWFkYWJsZSA9IGZ1bmN0aW9uKHJlYWRhYmxlKSB7XG4gIGlmICh0aGlzLl91bnJlYWQpIHRoaXMuX3VucmVhZCgpXG5cbiAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgaWYgKHJlYWRhYmxlICYmIHJlYWRhYmxlLmRlc3Ryb3kpIHJlYWRhYmxlLmRlc3Ryb3koKVxuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHJlYWRhYmxlID09PSBudWxsIHx8IHJlYWRhYmxlID09PSBmYWxzZSkge1xuICAgIHRoaXMucHVzaChudWxsKVxuICAgIHRoaXMucmVzdW1lKClcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgdW5lbmQgPSBlb3MocmVhZGFibGUsIHt3cml0YWJsZTpmYWxzZSwgcmVhZGFibGU6dHJ1ZX0sIGRlc3Ryb3llcih0aGlzKSlcblxuICB2YXIgb25yZWFkYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuX2ZvcndhcmQoKVxuICB9XG5cbiAgdmFyIG9uZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5wdXNoKG51bGwpXG4gIH1cblxuICB2YXIgY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICBzZWxmLl9yZWFkYWJsZTIucmVtb3ZlTGlzdGVuZXIoJ3JlYWRhYmxlJywgb25yZWFkYWJsZSlcbiAgICBzZWxmLl9yZWFkYWJsZTIucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKVxuICAgIHVuZW5kKClcbiAgfVxuXG4gIHRoaXMuX2RyYWluZWQgPSB0cnVlXG4gIHRoaXMuX3JlYWRhYmxlID0gcmVhZGFibGVcbiAgdGhpcy5fcmVhZGFibGUyID0gcmVhZGFibGUuX3JlYWRhYmxlU3RhdGUgPyByZWFkYWJsZSA6IHRvU3RyZWFtczIocmVhZGFibGUpXG4gIHRoaXMuX3JlYWRhYmxlMi5vbigncmVhZGFibGUnLCBvbnJlYWRhYmxlKVxuICB0aGlzLl9yZWFkYWJsZTIub24oJ2VuZCcsIG9uZW5kKVxuICB0aGlzLl91bnJlYWQgPSBjbGVhclxuXG4gIHRoaXMuX2ZvcndhcmQoKVxufVxuXG5EdXBsZXhpZnkucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2RyYWluZWQgPSB0cnVlXG4gIHRoaXMuX2ZvcndhcmQoKVxufVxuXG5EdXBsZXhpZnkucHJvdG90eXBlLl9mb3J3YXJkID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLl9mb3J3YXJkaW5nIHx8ICF0aGlzLl9yZWFkYWJsZTIgfHwgIXRoaXMuX2RyYWluZWQpIHJldHVyblxuICB0aGlzLl9mb3J3YXJkaW5nID0gdHJ1ZVxuXG4gIHZhciBkYXRhXG5cbiAgd2hpbGUgKHRoaXMuX2RyYWluZWQgJiYgKGRhdGEgPSBzaGlmdCh0aGlzLl9yZWFkYWJsZTIpKSAhPT0gbnVsbCkge1xuICAgIGlmICh0aGlzLmRlc3Ryb3llZCkgY29udGludWVcbiAgICB0aGlzLl9kcmFpbmVkID0gdGhpcy5wdXNoKGRhdGEpXG4gIH1cblxuICB0aGlzLl9mb3J3YXJkaW5nID0gZmFsc2Vcbn1cblxuRHVwbGV4aWZ5LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oZXJyKSB7XG4gIGlmICh0aGlzLl9wcmVmZXJFcnJvciAmJiAhdGhpcy5fZXJyb3IgJiYgZXJyKSB0aGlzLl9lcnJvciA9IGVyclxuXG4gIGlmICh0aGlzLmRlc3Ryb3llZCkgcmV0dXJuXG4gIHRoaXMuZGVzdHJveWVkID0gdHJ1ZVxuXG4gIHZhciBzZWxmID0gdGhpc1xuICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuX2Rlc3Ryb3koc2VsZi5fcHJlZmVyRXJyb3IgPyBzZWxmLl9lcnJvciA6IGVycilcbiAgfSlcbn1cblxuRHVwbGV4aWZ5LnByb3RvdHlwZS5fZGVzdHJveUludGVydmFsID0gZnVuY3Rpb24oZXJyKSB7XG4gIGlmICh0aGlzLmRlc3Ryb3llZCkgcmV0dXJuXG4gIGlmIChlcnIubWVzc2FnZSAhPT0gJ3ByZW1hdHVyZSBjbG9zZScpIHJldHVybiB0aGlzLmRlc3Ryb3koZXJyKVxuICB0aGlzLl9wcmVmZXJFcnJvciA9IHRydWVcbiAgdGhpcy5kZXN0cm95KG51bGwpXG59XG5cbkR1cGxleGlmeS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbihlcnIpIHtcbiAgaWYgKGVycikge1xuICAgIHZhciBvbmRyYWluID0gdGhpcy5fb25kcmFpblxuICAgIHRoaXMuX29uZHJhaW4gPSBudWxsXG4gICAgaWYgKG9uZHJhaW4pIG9uZHJhaW4oZXJyKVxuICAgIGVsc2UgdGhpcy5lbWl0KCdlcnJvcicsIGVycilcbiAgfVxuXG4gIGlmICh0aGlzLl9mb3J3YXJkRGVzdHJveSkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZSAmJiB0aGlzLl9yZWFkYWJsZS5kZXN0cm95KSB0aGlzLl9yZWFkYWJsZS5kZXN0cm95KClcbiAgICBpZiAodGhpcy5fd3JpdGFibGUgJiYgdGhpcy5fd3JpdGFibGUuZGVzdHJveSkgdGhpcy5fd3JpdGFibGUuZGVzdHJveSgpXG4gIH1cblxuICB0aGlzLmVtaXQoJ2Nsb3NlJylcbn1cblxuRHVwbGV4aWZ5LnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbihkYXRhLCBlbmMsIGNiKSB7XG4gIGlmICh0aGlzLmRlc3Ryb3llZCkgcmV0dXJuIGNiKClcbiAgaWYgKHRoaXMuX2NvcmtlZCkgcmV0dXJuIG9udW5jb3JrKHRoaXMsIHRoaXMuX3dyaXRlLmJpbmQodGhpcywgZGF0YSwgZW5jLCBjYikpXG4gIGlmIChkYXRhID09PSBTSUdOQUxfRkxVU0gpIHJldHVybiB0aGlzLl9maW5pc2goY2IpXG4gIGlmICghdGhpcy5fd3JpdGFibGUpIHJldHVybiBjYigpXG5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlLndyaXRlKGRhdGEpID09PSBmYWxzZSkgdGhpcy5fb25kcmFpbiA9IGNiXG4gIGVsc2UgY2IoKVxufVxuXG5cbkR1cGxleGlmeS5wcm90b3R5cGUuX2ZpbmlzaCA9IGZ1bmN0aW9uKGNiKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB0aGlzLmVtaXQoJ3ByZWVuZCcpXG4gIG9udW5jb3JrKHRoaXMsIGZ1bmN0aW9uKCkge1xuICAgIGVuZChzZWxmLl9mb3J3YXJkRW5kICYmIHNlbGYuX3dyaXRhYmxlLCBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGhheHggdG8gbm90IGVtaXQgcHJlZmluaXNoIHR3aWNlXG4gICAgICBpZiAoc2VsZi5fd3JpdGFibGVTdGF0ZS5wcmVmaW5pc2hlZCA9PT0gZmFsc2UpIHNlbGYuX3dyaXRhYmxlU3RhdGUucHJlZmluaXNoZWQgPSB0cnVlXG4gICAgICBzZWxmLmVtaXQoJ3ByZWZpbmlzaCcpXG4gICAgICBvbnVuY29yayhzZWxmLCBjYilcbiAgICB9KVxuICB9KVxufVxuXG5EdXBsZXhpZnkucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGRhdGEsIGVuYywgY2IpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdGhpcy5lbmQobnVsbCwgbnVsbCwgZGF0YSlcbiAgaWYgKHR5cGVvZiBlbmMgPT09ICdmdW5jdGlvbicpIHJldHVybiB0aGlzLmVuZChkYXRhLCBudWxsLCBlbmMpXG4gIHRoaXMuX2VuZGVkID0gdHJ1ZVxuICBpZiAoZGF0YSkgdGhpcy53cml0ZShkYXRhKVxuICBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nKSB0aGlzLndyaXRlKFNJR05BTF9GTFVTSClcbiAgcmV0dXJuIHN0cmVhbS5Xcml0YWJsZS5wcm90b3R5cGUuZW5kLmNhbGwodGhpcywgY2IpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gRHVwbGV4aWZ5XG4iLCIvLyBlbGVtZW50LWNsb3Nlc3QgfCBDQzAtMS4wIHwgZ2l0aHViLmNvbS9qb25hdGhhbnRuZWFsL2Nsb3Nlc3RcblxuKGZ1bmN0aW9uIChFbGVtZW50UHJvdG8pIHtcblx0aWYgKHR5cGVvZiBFbGVtZW50UHJvdG8ubWF0Y2hlcyAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdEVsZW1lbnRQcm90by5tYXRjaGVzID0gRWxlbWVudFByb3RvLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnRQcm90by5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudFByb3RvLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBmdW5jdGlvbiBtYXRjaGVzKHNlbGVjdG9yKSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9IHRoaXM7XG5cdFx0XHR2YXIgZWxlbWVudHMgPSAoZWxlbWVudC5kb2N1bWVudCB8fCBlbGVtZW50Lm93bmVyRG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXHRcdFx0dmFyIGluZGV4ID0gMDtcblxuXHRcdFx0d2hpbGUgKGVsZW1lbnRzW2luZGV4XSAmJiBlbGVtZW50c1tpbmRleF0gIT09IGVsZW1lbnQpIHtcblx0XHRcdFx0KytpbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIEJvb2xlYW4oZWxlbWVudHNbaW5kZXhdKTtcblx0XHR9O1xuXHR9XG5cblx0aWYgKHR5cGVvZiBFbGVtZW50UHJvdG8uY2xvc2VzdCAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdEVsZW1lbnRQcm90by5jbG9zZXN0ID0gZnVuY3Rpb24gY2xvc2VzdChzZWxlY3Rvcikge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSB0aGlzO1xuXG5cdFx0XHR3aGlsZSAoZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAxKSB7XG5cdFx0XHRcdGlmIChlbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW1lbnQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9O1xuXHR9XG59KSh3aW5kb3cuRWxlbWVudC5wcm90b3R5cGUpO1xuIiwidmFyIG9uY2UgPSByZXF1aXJlKCdvbmNlJyk7XG5cbnZhciBub29wID0gZnVuY3Rpb24oKSB7fTtcblxudmFyIGlzUmVxdWVzdCA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuXHRyZXR1cm4gc3RyZWFtLnNldEhlYWRlciAmJiB0eXBlb2Ygc3RyZWFtLmFib3J0ID09PSAnZnVuY3Rpb24nO1xufTtcblxudmFyIGlzQ2hpbGRQcm9jZXNzID0gZnVuY3Rpb24oc3RyZWFtKSB7XG5cdHJldHVybiBzdHJlYW0uc3RkaW8gJiYgQXJyYXkuaXNBcnJheShzdHJlYW0uc3RkaW8pICYmIHN0cmVhbS5zdGRpby5sZW5ndGggPT09IDNcbn07XG5cbnZhciBlb3MgPSBmdW5jdGlvbihzdHJlYW0sIG9wdHMsIGNhbGxiYWNrKSB7XG5cdGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVvcyhzdHJlYW0sIG51bGwsIG9wdHMpO1xuXHRpZiAoIW9wdHMpIG9wdHMgPSB7fTtcblxuXHRjYWxsYmFjayA9IG9uY2UoY2FsbGJhY2sgfHwgbm9vcCk7XG5cblx0dmFyIHdzID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuXHR2YXIgcnMgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cdHZhciByZWFkYWJsZSA9IG9wdHMucmVhZGFibGUgfHwgKG9wdHMucmVhZGFibGUgIT09IGZhbHNlICYmIHN0cmVhbS5yZWFkYWJsZSk7XG5cdHZhciB3cml0YWJsZSA9IG9wdHMud3JpdGFibGUgfHwgKG9wdHMud3JpdGFibGUgIT09IGZhbHNlICYmIHN0cmVhbS53cml0YWJsZSk7XG5cblx0dmFyIG9ubGVnYWN5ZmluaXNoID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCFzdHJlYW0ud3JpdGFibGUpIG9uZmluaXNoKCk7XG5cdH07XG5cblx0dmFyIG9uZmluaXNoID0gZnVuY3Rpb24oKSB7XG5cdFx0d3JpdGFibGUgPSBmYWxzZTtcblx0XHRpZiAoIXJlYWRhYmxlKSBjYWxsYmFjay5jYWxsKHN0cmVhbSk7XG5cdH07XG5cblx0dmFyIG9uZW5kID0gZnVuY3Rpb24oKSB7XG5cdFx0cmVhZGFibGUgPSBmYWxzZTtcblx0XHRpZiAoIXdyaXRhYmxlKSBjYWxsYmFjay5jYWxsKHN0cmVhbSk7XG5cdH07XG5cblx0dmFyIG9uZXhpdCA9IGZ1bmN0aW9uKGV4aXRDb2RlKSB7XG5cdFx0Y2FsbGJhY2suY2FsbChzdHJlYW0sIGV4aXRDb2RlID8gbmV3IEVycm9yKCdleGl0ZWQgd2l0aCBlcnJvciBjb2RlOiAnICsgZXhpdENvZGUpIDogbnVsbCk7XG5cdH07XG5cblx0dmFyIG9uZXJyb3IgPSBmdW5jdGlvbihlcnIpIHtcblx0XHRjYWxsYmFjay5jYWxsKHN0cmVhbSwgZXJyKTtcblx0fTtcblxuXHR2YXIgb25jbG9zZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmIChyZWFkYWJsZSAmJiAhKHJzICYmIHJzLmVuZGVkKSkgcmV0dXJuIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBuZXcgRXJyb3IoJ3ByZW1hdHVyZSBjbG9zZScpKTtcblx0XHRpZiAod3JpdGFibGUgJiYgISh3cyAmJiB3cy5lbmRlZCkpIHJldHVybiBjYWxsYmFjay5jYWxsKHN0cmVhbSwgbmV3IEVycm9yKCdwcmVtYXR1cmUgY2xvc2UnKSk7XG5cdH07XG5cblx0dmFyIG9ucmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xuXHRcdHN0cmVhbS5yZXEub24oJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblx0fTtcblxuXHRpZiAoaXNSZXF1ZXN0KHN0cmVhbSkpIHtcblx0XHRzdHJlYW0ub24oJ2NvbXBsZXRlJywgb25maW5pc2gpO1xuXHRcdHN0cmVhbS5vbignYWJvcnQnLCBvbmNsb3NlKTtcblx0XHRpZiAoc3RyZWFtLnJlcSkgb25yZXF1ZXN0KCk7XG5cdFx0ZWxzZSBzdHJlYW0ub24oJ3JlcXVlc3QnLCBvbnJlcXVlc3QpO1xuXHR9IGVsc2UgaWYgKHdyaXRhYmxlICYmICF3cykgeyAvLyBsZWdhY3kgc3RyZWFtc1xuXHRcdHN0cmVhbS5vbignZW5kJywgb25sZWdhY3lmaW5pc2gpO1xuXHRcdHN0cmVhbS5vbignY2xvc2UnLCBvbmxlZ2FjeWZpbmlzaCk7XG5cdH1cblxuXHRpZiAoaXNDaGlsZFByb2Nlc3Moc3RyZWFtKSkgc3RyZWFtLm9uKCdleGl0Jywgb25leGl0KTtcblxuXHRzdHJlYW0ub24oJ2VuZCcsIG9uZW5kKTtcblx0c3RyZWFtLm9uKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cdGlmIChvcHRzLmVycm9yICE9PSBmYWxzZSkgc3RyZWFtLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuXHRzdHJlYW0ub24oJ2Nsb3NlJywgb25jbG9zZSk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY29tcGxldGUnLCBvbmZpbmlzaCk7XG5cdFx0c3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdhYm9ydCcsIG9uY2xvc2UpO1xuXHRcdHN0cmVhbS5yZW1vdmVMaXN0ZW5lcigncmVxdWVzdCcsIG9ucmVxdWVzdCk7XG5cdFx0aWYgKHN0cmVhbS5yZXEpIHN0cmVhbS5yZXEucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblx0XHRzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9ubGVnYWN5ZmluaXNoKTtcblx0XHRzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25sZWdhY3lmaW5pc2gpO1xuXHRcdHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuXHRcdHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZXhpdCcsIG9uZXhpdCk7XG5cdFx0c3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG5cdFx0c3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuXHRcdHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcblx0fTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW9zO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlIHx8IG9iamVjdENyZWF0ZVBvbHlmaWxsXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IG9iamVjdEtleXNQb2x5ZmlsbFxudmFyIGJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCB8fCBmdW5jdGlvbkJpbmRQb2x5ZmlsbFxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcywgJ19ldmVudHMnKSkge1xuICAgIHRoaXMuX2V2ZW50cyA9IG9iamVjdENyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG52YXIgaGFzRGVmaW5lUHJvcGVydHk7XG50cnkge1xuICB2YXIgbyA9IHt9O1xuICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgJ3gnLCB7IHZhbHVlOiAwIH0pO1xuICBoYXNEZWZpbmVQcm9wZXJ0eSA9IG8ueCA9PT0gMDtcbn0gY2F0Y2ggKGVycikgeyBoYXNEZWZpbmVQcm9wZXJ0eSA9IGZhbHNlIH1cbmlmIChoYXNEZWZpbmVQcm9wZXJ0eSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgICAvLyBjaGVjayB3aGV0aGVyIHRoZSBpbnB1dCBpcyBhIHBvc2l0aXZlIG51bWJlciAod2hvc2UgdmFsdWUgaXMgemVybyBvclxuICAgICAgLy8gZ3JlYXRlciBhbmQgbm90IGEgTmFOKS5cbiAgICAgIGlmICh0eXBlb2YgYXJnICE9PSAnbnVtYmVyJyB8fCBhcmcgPCAwIHx8IGFyZyAhPT0gYXJnKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gICAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG59XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgbiA8IDAgfHwgaXNOYU4obikpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJuXCIgYXJndW1lbnQgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uICRnZXRNYXhMaXN0ZW5lcnModGhhdCkge1xuICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuICRnZXRNYXhMaXN0ZW5lcnModGhpcyk7XG59O1xuXG4vLyBUaGVzZSBzdGFuZGFsb25lIGVtaXQqIGZ1bmN0aW9ucyBhcmUgdXNlZCB0byBvcHRpbWl6ZSBjYWxsaW5nIG9mIGV2ZW50XG4vLyBoYW5kbGVycyBmb3IgZmFzdCBjYXNlcyBiZWNhdXNlIGVtaXQoKSBpdHNlbGYgb2Z0ZW4gaGFzIGEgdmFyaWFibGUgbnVtYmVyIG9mXG4vLyBhcmd1bWVudHMgYW5kIGNhbiBiZSBkZW9wdGltaXplZCBiZWNhdXNlIG9mIHRoYXQuIFRoZXNlIGZ1bmN0aW9ucyBhbHdheXMgaGF2ZVxuLy8gdGhlIHNhbWUgbnVtYmVyIG9mIGFyZ3VtZW50cyBhbmQgdGh1cyBkbyBub3QgZ2V0IGRlb3B0aW1pemVkLCBzbyB0aGUgY29kZVxuLy8gaW5zaWRlIHRoZW0gY2FuIGV4ZWN1dGUgZmFzdGVyLlxuZnVuY3Rpb24gZW1pdE5vbmUoaGFuZGxlciwgaXNGbiwgc2VsZikge1xuICBpZiAoaXNGbilcbiAgICBoYW5kbGVyLmNhbGwoc2VsZik7XG4gIGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBsaXN0ZW5lcnNbaV0uY2FsbChzZWxmKTtcbiAgfVxufVxuZnVuY3Rpb24gZW1pdE9uZShoYW5kbGVyLCBpc0ZuLCBzZWxmLCBhcmcxKSB7XG4gIGlmIChpc0ZuKVxuICAgIGhhbmRsZXIuY2FsbChzZWxmLCBhcmcxKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHNlbGYsIGFyZzEpO1xuICB9XG59XG5mdW5jdGlvbiBlbWl0VHdvKGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZzEsIGFyZzIpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5jYWxsKHNlbGYsIGFyZzEsIGFyZzIpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZiwgYXJnMSwgYXJnMik7XG4gIH1cbn1cbmZ1bmN0aW9uIGVtaXRUaHJlZShoYW5kbGVyLCBpc0ZuLCBzZWxmLCBhcmcxLCBhcmcyLCBhcmczKSB7XG4gIGlmIChpc0ZuKVxuICAgIGhhbmRsZXIuY2FsbChzZWxmLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHNlbGYsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRNYW55KGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZ3MpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGV2ZW50cztcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT0gbnVsbCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKVxuICAgICAgZXIgPSBhcmd1bWVudHNbMV07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmhhbmRsZWQgXCJlcnJvclwiIGV2ZW50LiAoJyArIGVyICsgJyknKTtcbiAgICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKCFoYW5kbGVyKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB2YXIgaXNGbiA9IHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nO1xuICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICBzd2l0Y2ggKGxlbikge1xuICAgICAgLy8gZmFzdCBjYXNlc1xuICAgIGNhc2UgMTpcbiAgICAgIGVtaXROb25lKGhhbmRsZXIsIGlzRm4sIHRoaXMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgZW1pdE9uZShoYW5kbGVyLCBpc0ZuLCB0aGlzLCBhcmd1bWVudHNbMV0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgZW1pdFR3byhoYW5kbGVyLCBpc0ZuLCB0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBlbWl0VGhyZWUoaGFuZGxlciwgaXNGbiwgdGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0sIGFyZ3VtZW50c1szXSk7XG4gICAgICBicmVhaztcbiAgICAgIC8vIHNsb3dlclxuICAgIGRlZmF1bHQ6XG4gICAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKVxuICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGVtaXRNYW55KGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoIWV2ZW50cykge1xuICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gb2JqZWN0Q3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIpIHtcbiAgICAgIHRhcmdldC5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKCFleGlzdGluZykge1xuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPVxuICAgICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgICBpZiAocHJlcGVuZCkge1xuICAgICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgaWYgKCFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIG0gPSAkZ2V0TWF4TGlzdGVuZXJzKHRhcmdldCk7XG4gICAgICBpZiAobSAmJiBtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtKSB7XG4gICAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAgIHZhciB3ID0gbmV3IEVycm9yKCdQb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuICcgK1xuICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyBcIicgKyBTdHJpbmcodHlwZSkgKyAnXCIgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgJ2FkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byAnICtcbiAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdC4nKTtcbiAgICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcbiAgICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSAnb2JqZWN0JyAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJyVzOiAlcycsIHcubmFtZSwgdy5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgdHJ1ZSk7XG4gICAgfTtcblxuZnVuY3Rpb24gb25jZVdyYXBwZXIoKSB7XG4gIGlmICghdGhpcy5maXJlZCkge1xuICAgIHRoaXMudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSwgdGhpcy53cmFwRm4pO1xuICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCwgYXJndW1lbnRzWzBdKTtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCwgYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pO1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0LCBhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSxcbiAgICAgICAgICAgIGFyZ3VtZW50c1syXSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKVxuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIHRoaXMubGlzdGVuZXIuYXBwbHkodGhpcy50YXJnZXQsIGFyZ3MpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBiaW5kLmNhbGwob25jZVdyYXBwZXIsIHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuLy8gRW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmIGFuZCBvbmx5IGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGlzdCwgZXZlbnRzLCBwb3NpdGlvbiwgaSwgb3JpZ2luYWxMaXN0ZW5lcjtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoIWV2ZW50cylcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGxpc3QgPSBldmVudHNbdHlwZV07XG4gICAgICBpZiAoIWxpc3QpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gb2JqZWN0Q3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG5cbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKVxuICAgICAgICAgIGV2ZW50c1t0eXBlXSA9IGxpc3RbMF07XG5cbiAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoIWV2ZW50cylcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmICghZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gb2JqZWN0Q3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0pIHtcbiAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IG9iamVjdENyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gb2JqZWN0S2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gb2JqZWN0Q3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBsaXN0ZW5lcnMgPSBldmVudHNbdHlwZV07XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXJzKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgdmFyIGV2bGlzdGVuZXI7XG4gIHZhciByZXQ7XG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG5cbiAgaWYgKCFldmVudHMpXG4gICAgcmV0ID0gW107XG4gIGVsc2Uge1xuICAgIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gICAgaWYgKCFldmxpc3RlbmVyKVxuICAgICAgcmV0ID0gW107XG4gICAgZWxzZSBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgICByZXQgPSBbZXZsaXN0ZW5lci5saXN0ZW5lciB8fCBldmxpc3RlbmVyXTtcbiAgICBlbHNlXG4gICAgICByZXQgPSB1bndyYXBMaXN0ZW5lcnMoZXZsaXN0ZW5lcik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5saXN0ZW5lckNvdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGlzdGVuZXJDb3VudC5jYWxsKGVtaXR0ZXIsIHR5cGUpO1xuICB9XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBsaXN0ZW5lckNvdW50O1xuZnVuY3Rpb24gbGlzdGVuZXJDb3VudCh0eXBlKSB7XG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cykge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3Qub3duS2V5cyh0aGlzLl9ldmVudHMpIDogW107XG59O1xuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKCkuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKVxuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiBhcnJheUNsb25lKGFyciwgbikge1xuICB2YXIgY29weSA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpXG4gICAgY29weVtpXSA9IGFycltpXTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHtcbiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIG9iamVjdENyZWF0ZVBvbHlmaWxsKHByb3RvKSB7XG4gIHZhciBGID0gZnVuY3Rpb24oKSB7fTtcbiAgRi5wcm90b3R5cGUgPSBwcm90bztcbiAgcmV0dXJuIG5ldyBGO1xufVxuZnVuY3Rpb24gb2JqZWN0S2V5c1BvbHlmaWxsKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrIGluIG9iaikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGspKSB7XG4gICAga2V5cy5wdXNoKGspO1xuICB9XG4gIHJldHVybiBrO1xufVxuZnVuY3Rpb24gZnVuY3Rpb25CaW5kUG9seWZpbGwoY29udGV4dCkge1xuICB2YXIgZm4gPSB0aGlzO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmbi5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpO1xuICB9O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxyXG4gKiBmaWxlc2l6ZVxyXG4gKlxyXG4gKiBAY29weXJpZ2h0IDIwMTggSmFzb24gTXVsbGlnYW4gPGphc29uLm11bGxpZ2FuQGF2b2lkd29yay5jb20+XHJcbiAqIEBsaWNlbnNlIEJTRC0zLUNsYXVzZVxyXG4gKiBAdmVyc2lvbiAzLjYuMVxyXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsKSB7XG5cdHZhciBiID0gL14oYnxCKSQvLFxuXHQgICAgc3ltYm9sID0ge1xuXHRcdGllYzoge1xuXHRcdFx0Yml0czogW1wiYlwiLCBcIktpYlwiLCBcIk1pYlwiLCBcIkdpYlwiLCBcIlRpYlwiLCBcIlBpYlwiLCBcIkVpYlwiLCBcIlppYlwiLCBcIllpYlwiXSxcblx0XHRcdGJ5dGVzOiBbXCJCXCIsIFwiS2lCXCIsIFwiTWlCXCIsIFwiR2lCXCIsIFwiVGlCXCIsIFwiUGlCXCIsIFwiRWlCXCIsIFwiWmlCXCIsIFwiWWlCXCJdXG5cdFx0fSxcblx0XHRqZWRlYzoge1xuXHRcdFx0Yml0czogW1wiYlwiLCBcIktiXCIsIFwiTWJcIiwgXCJHYlwiLCBcIlRiXCIsIFwiUGJcIiwgXCJFYlwiLCBcIlpiXCIsIFwiWWJcIl0sXG5cdFx0XHRieXRlczogW1wiQlwiLCBcIktCXCIsIFwiTUJcIiwgXCJHQlwiLCBcIlRCXCIsIFwiUEJcIiwgXCJFQlwiLCBcIlpCXCIsIFwiWUJcIl1cblx0XHR9XG5cdH0sXG5cdCAgICBmdWxsZm9ybSA9IHtcblx0XHRpZWM6IFtcIlwiLCBcImtpYmlcIiwgXCJtZWJpXCIsIFwiZ2liaVwiLCBcInRlYmlcIiwgXCJwZWJpXCIsIFwiZXhiaVwiLCBcInplYmlcIiwgXCJ5b2JpXCJdLFxuXHRcdGplZGVjOiBbXCJcIiwgXCJraWxvXCIsIFwibWVnYVwiLCBcImdpZ2FcIiwgXCJ0ZXJhXCIsIFwicGV0YVwiLCBcImV4YVwiLCBcInpldHRhXCIsIFwieW90dGFcIl1cblx0fTtcblxuXHQvKipcclxuICAqIGZpbGVzaXplXHJcbiAgKlxyXG4gICogQG1ldGhvZCBmaWxlc2l6ZVxyXG4gICogQHBhcmFtICB7TWl4ZWR9ICAgYXJnICAgICAgICBTdHJpbmcsIEludCBvciBGbG9hdCB0byB0cmFuc2Zvcm1cclxuICAqIEBwYXJhbSAge09iamVjdH0gIGRlc2NyaXB0b3IgW09wdGlvbmFsXSBGbGFnc1xyXG4gICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgICAgICBSZWFkYWJsZSBmaWxlIHNpemUgU3RyaW5nXHJcbiAgKi9cblx0ZnVuY3Rpb24gZmlsZXNpemUoYXJnKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG5cdFx0dmFyIHJlc3VsdCA9IFtdLFxuXHRcdCAgICB2YWwgPSAwLFxuXHRcdCAgICBlID0gdm9pZCAwLFxuXHRcdCAgICBiYXNlID0gdm9pZCAwLFxuXHRcdCAgICBiaXRzID0gdm9pZCAwLFxuXHRcdCAgICBjZWlsID0gdm9pZCAwLFxuXHRcdCAgICBmdWxsID0gdm9pZCAwLFxuXHRcdCAgICBmdWxsZm9ybXMgPSB2b2lkIDAsXG5cdFx0ICAgIG5lZyA9IHZvaWQgMCxcblx0XHQgICAgbnVtID0gdm9pZCAwLFxuXHRcdCAgICBvdXRwdXQgPSB2b2lkIDAsXG5cdFx0ICAgIHJvdW5kID0gdm9pZCAwLFxuXHRcdCAgICB1bml4ID0gdm9pZCAwLFxuXHRcdCAgICBzZXBhcmF0b3IgPSB2b2lkIDAsXG5cdFx0ICAgIHNwYWNlciA9IHZvaWQgMCxcblx0XHQgICAgc3RhbmRhcmQgPSB2b2lkIDAsXG5cdFx0ICAgIHN5bWJvbHMgPSB2b2lkIDA7XG5cblx0XHRpZiAoaXNOYU4oYXJnKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHNcIik7XG5cdFx0fVxuXG5cdFx0Yml0cyA9IGRlc2NyaXB0b3IuYml0cyA9PT0gdHJ1ZTtcblx0XHR1bml4ID0gZGVzY3JpcHRvci51bml4ID09PSB0cnVlO1xuXHRcdGJhc2UgPSBkZXNjcmlwdG9yLmJhc2UgfHwgMjtcblx0XHRyb3VuZCA9IGRlc2NyaXB0b3Iucm91bmQgIT09IHZvaWQgMCA/IGRlc2NyaXB0b3Iucm91bmQgOiB1bml4ID8gMSA6IDI7XG5cdFx0c2VwYXJhdG9yID0gZGVzY3JpcHRvci5zZXBhcmF0b3IgIT09IHZvaWQgMCA/IGRlc2NyaXB0b3Iuc2VwYXJhdG9yIHx8IFwiXCIgOiBcIlwiO1xuXHRcdHNwYWNlciA9IGRlc2NyaXB0b3Iuc3BhY2VyICE9PSB2b2lkIDAgPyBkZXNjcmlwdG9yLnNwYWNlciA6IHVuaXggPyBcIlwiIDogXCIgXCI7XG5cdFx0c3ltYm9scyA9IGRlc2NyaXB0b3Iuc3ltYm9scyB8fCBkZXNjcmlwdG9yLnN1ZmZpeGVzIHx8IHt9O1xuXHRcdHN0YW5kYXJkID0gYmFzZSA9PT0gMiA/IGRlc2NyaXB0b3Iuc3RhbmRhcmQgfHwgXCJqZWRlY1wiIDogXCJqZWRlY1wiO1xuXHRcdG91dHB1dCA9IGRlc2NyaXB0b3Iub3V0cHV0IHx8IFwic3RyaW5nXCI7XG5cdFx0ZnVsbCA9IGRlc2NyaXB0b3IuZnVsbGZvcm0gPT09IHRydWU7XG5cdFx0ZnVsbGZvcm1zID0gZGVzY3JpcHRvci5mdWxsZm9ybXMgaW5zdGFuY2VvZiBBcnJheSA/IGRlc2NyaXB0b3IuZnVsbGZvcm1zIDogW107XG5cdFx0ZSA9IGRlc2NyaXB0b3IuZXhwb25lbnQgIT09IHZvaWQgMCA/IGRlc2NyaXB0b3IuZXhwb25lbnQgOiAtMTtcblx0XHRudW0gPSBOdW1iZXIoYXJnKTtcblx0XHRuZWcgPSBudW0gPCAwO1xuXHRcdGNlaWwgPSBiYXNlID4gMiA/IDEwMDAgOiAxMDI0O1xuXG5cdFx0Ly8gRmxpcHBpbmcgYSBuZWdhdGl2ZSBudW1iZXIgdG8gZGV0ZXJtaW5lIHRoZSBzaXplXG5cdFx0aWYgKG5lZykge1xuXHRcdFx0bnVtID0gLW51bTtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmluZyB0aGUgZXhwb25lbnRcblx0XHRpZiAoZSA9PT0gLTEgfHwgaXNOYU4oZSkpIHtcblx0XHRcdGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKG51bSkgLyBNYXRoLmxvZyhjZWlsKSk7XG5cblx0XHRcdGlmIChlIDwgMCkge1xuXHRcdFx0XHRlID0gMDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBFeGNlZWRpbmcgc3VwcG9ydGVkIGxlbmd0aCwgdGltZSB0byByZWR1Y2UgJiBtdWx0aXBseVxuXHRcdGlmIChlID4gOCkge1xuXHRcdFx0ZSA9IDg7XG5cdFx0fVxuXG5cdFx0Ly8gWmVybyBpcyBub3cgYSBzcGVjaWFsIGNhc2UgYmVjYXVzZSBieXRlcyBkaXZpZGUgYnkgMVxuXHRcdGlmIChudW0gPT09IDApIHtcblx0XHRcdHJlc3VsdFswXSA9IDA7XG5cdFx0XHRyZXN1bHRbMV0gPSB1bml4ID8gXCJcIiA6IHN5bWJvbFtzdGFuZGFyZF1bYml0cyA/IFwiYml0c1wiIDogXCJieXRlc1wiXVtlXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFsID0gbnVtIC8gKGJhc2UgPT09IDIgPyBNYXRoLnBvdygyLCBlICogMTApIDogTWF0aC5wb3coMTAwMCwgZSkpO1xuXG5cdFx0XHRpZiAoYml0cykge1xuXHRcdFx0XHR2YWwgPSB2YWwgKiA4O1xuXG5cdFx0XHRcdGlmICh2YWwgPj0gY2VpbCAmJiBlIDwgOCkge1xuXHRcdFx0XHRcdHZhbCA9IHZhbCAvIGNlaWw7XG5cdFx0XHRcdFx0ZSsrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJlc3VsdFswXSA9IE51bWJlcih2YWwudG9GaXhlZChlID4gMCA/IHJvdW5kIDogMCkpO1xuXHRcdFx0cmVzdWx0WzFdID0gYmFzZSA9PT0gMTAgJiYgZSA9PT0gMSA/IGJpdHMgPyBcImtiXCIgOiBcImtCXCIgOiBzeW1ib2xbc3RhbmRhcmRdW2JpdHMgPyBcImJpdHNcIiA6IFwiYnl0ZXNcIl1bZV07XG5cblx0XHRcdGlmICh1bml4KSB7XG5cdFx0XHRcdHJlc3VsdFsxXSA9IHN0YW5kYXJkID09PSBcImplZGVjXCIgPyByZXN1bHRbMV0uY2hhckF0KDApIDogZSA+IDAgPyByZXN1bHRbMV0ucmVwbGFjZSgvQiQvLCBcIlwiKSA6IHJlc3VsdFsxXTtcblxuXHRcdFx0XHRpZiAoYi50ZXN0KHJlc3VsdFsxXSkpIHtcblx0XHRcdFx0XHRyZXN1bHRbMF0gPSBNYXRoLmZsb29yKHJlc3VsdFswXSk7XG5cdFx0XHRcdFx0cmVzdWx0WzFdID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIERlY29yYXRpbmcgYSAnZGlmZidcblx0XHRpZiAobmVnKSB7XG5cdFx0XHRyZXN1bHRbMF0gPSAtcmVzdWx0WzBdO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5aW5nIGN1c3RvbSBzeW1ib2xcblx0XHRyZXN1bHRbMV0gPSBzeW1ib2xzW3Jlc3VsdFsxXV0gfHwgcmVzdWx0WzFdO1xuXG5cdFx0Ly8gUmV0dXJuaW5nIEFycmF5LCBPYmplY3QsIG9yIFN0cmluZyAoZGVmYXVsdClcblx0XHRpZiAob3V0cHV0ID09PSBcImFycmF5XCIpIHtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXG5cdFx0aWYgKG91dHB1dCA9PT0gXCJleHBvbmVudFwiKSB7XG5cdFx0XHRyZXR1cm4gZTtcblx0XHR9XG5cblx0XHRpZiAob3V0cHV0ID09PSBcIm9iamVjdFwiKSB7XG5cdFx0XHRyZXR1cm4geyB2YWx1ZTogcmVzdWx0WzBdLCBzdWZmaXg6IHJlc3VsdFsxXSwgc3ltYm9sOiByZXN1bHRbMV0gfTtcblx0XHR9XG5cblx0XHRpZiAoZnVsbCkge1xuXHRcdFx0cmVzdWx0WzFdID0gZnVsbGZvcm1zW2VdID8gZnVsbGZvcm1zW2VdIDogZnVsbGZvcm1bc3RhbmRhcmRdW2VdICsgKGJpdHMgPyBcImJpdFwiIDogXCJieXRlXCIpICsgKHJlc3VsdFswXSA9PT0gMSA/IFwiXCIgOiBcInNcIik7XG5cdFx0fVxuXG5cdFx0aWYgKHNlcGFyYXRvci5sZW5ndGggPiAwKSB7XG5cdFx0XHRyZXN1bHRbMF0gPSByZXN1bHRbMF0udG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCBzZXBhcmF0b3IpO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQuam9pbihzcGFjZXIpO1xuXHR9XG5cblx0Ly8gUGFydGlhbCBhcHBsaWNhdGlvbiBmb3IgZnVuY3Rpb25hbCBwcm9ncmFtbWluZ1xuXHRmaWxlc2l6ZS5wYXJ0aWFsID0gZnVuY3Rpb24gKG9wdCkge1xuXHRcdHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG5cdFx0XHRyZXR1cm4gZmlsZXNpemUoYXJnLCBvcHQpO1xuXHRcdH07XG5cdH07XG5cblx0Ly8gQ29tbW9uSlMsIEFNRCwgc2NyaXB0IHRhZ1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZpbGVzaXplO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0ZGVmaW5lKGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBmaWxlc2l6ZTtcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRnbG9iYWwuZmlsZXNpemUgPSBmaWxlc2l6ZTtcblx0fVxufSkodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IGdsb2JhbCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRGb3JtRGF0YTtcbmV4cG9ydHMuZ2V0RmllbGREYXRhID0gZ2V0RmllbGREYXRhO1xudmFyIE5PREVfTElTVF9DTEFTU0VTID0ge1xuICAnW29iamVjdCBIVE1MQ29sbGVjdGlvbl0nOiB0cnVlLFxuICAnW29iamVjdCBOb2RlTGlzdF0nOiB0cnVlLFxuICAnW29iamVjdCBSYWRpb05vZGVMaXN0XSc6IHRydWVcblxuICAvLyAudHlwZSB2YWx1ZXMgZm9yIGVsZW1lbnRzIHdoaWNoIGNhbiBhcHBlYXIgaW4gLmVsZW1lbnRzIGFuZCBzaG91bGQgYmUgaWdub3JlZFxufTt2YXIgSUdOT1JFRF9FTEVNRU5UX1RZUEVTID0ge1xuICAnYnV0dG9uJzogdHJ1ZSxcbiAgJ2ZpZWxkc2V0JzogdHJ1ZSxcbiAgJ3Jlc2V0JzogdHJ1ZSxcbiAgJ3N1Ym1pdCc6IHRydWVcbn07XG5cbnZhciBDSEVDS0VEX0lOUFVUX1RZUEVTID0ge1xuICAnY2hlY2tib3gnOiB0cnVlLFxuICAncmFkaW8nOiB0cnVlXG59O1xuXG52YXIgVFJJTV9SRSA9IC9eXFxzK3xcXHMrJC9nO1xuXG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEZvcm1FbGVtZW50fSBmb3JtXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7T2JqZWN0LjxzdHJpbmcsKHN0cmluZ3xBcnJheS48c3RyaW5nPik+fSBhbiBvYmplY3QgY29udGFpbmluZ1xuICogICBzdWJtaXR0YWJsZSB2YWx1ZShzKSBoZWxkIGluIHRoZSBmb3JtJ3MgLmVsZW1lbnRzIGNvbGxlY3Rpb24sIHdpdGhcbiAqICAgcHJvcGVydGllcyBuYW1lZCBhcyBwZXIgZWxlbWVudCBuYW1lcyBvciBpZHMuXG4gKi9cblxuZnVuY3Rpb24gZ2V0Rm9ybURhdGEoZm9ybSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogeyB0cmltOiBmYWxzZSB9O1xuXG4gIGlmICghZm9ybSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQSBmb3JtIGlzIHJlcXVpcmVkIGJ5IGdldEZvcm1EYXRhLCB3YXMgZ2l2ZW4gZm9ybT0nICsgZm9ybSk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgZWxlbWVudE5hbWUgPSB2b2lkIDA7XG4gIHZhciBlbGVtZW50TmFtZXMgPSBbXTtcbiAgdmFyIGVsZW1lbnROYW1lTG9va3VwID0ge307XG5cbiAgLy8gR2V0IHVuaXF1ZSBzdWJtaXR0YWJsZSBlbGVtZW50IG5hbWVzIGZvciB0aGUgZm9ybVxuICBmb3IgKHZhciBpID0gMCwgbCA9IGZvcm0uZWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBmb3JtLmVsZW1lbnRzW2ldO1xuICAgIGlmIChJR05PUkVEX0VMRU1FTlRfVFlQRVNbZWxlbWVudC50eXBlXSB8fCBlbGVtZW50LmRpc2FibGVkKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgZWxlbWVudE5hbWUgPSBlbGVtZW50Lm5hbWUgfHwgZWxlbWVudC5pZDtcbiAgICBpZiAoZWxlbWVudE5hbWUgJiYgIWVsZW1lbnROYW1lTG9va3VwW2VsZW1lbnROYW1lXSkge1xuICAgICAgZWxlbWVudE5hbWVzLnB1c2goZWxlbWVudE5hbWUpO1xuICAgICAgZWxlbWVudE5hbWVMb29rdXBbZWxlbWVudE5hbWVdID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBFeHRyYWN0IGVsZW1lbnQgZGF0YSBuYW1lLWJ5LW5hbWUgZm9yIGNvbnNpc3RlbnQgaGFuZGxpbmcgb2Ygc3BlY2lhbCBjYXNlc1xuICAvLyBhcm91bmQgZWxlbWVudHMgd2hpY2ggY29udGFpbiBtdWx0aXBsZSBpbnB1dHMuXG4gIGZvciAodmFyIF9pID0gMCwgX2wgPSBlbGVtZW50TmFtZXMubGVuZ3RoOyBfaSA8IF9sOyBfaSsrKSB7XG4gICAgZWxlbWVudE5hbWUgPSBlbGVtZW50TmFtZXNbX2ldO1xuICAgIHZhciB2YWx1ZSA9IGdldEZpZWxkRGF0YShmb3JtLCBlbGVtZW50TmFtZSwgb3B0aW9ucyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIGRhdGFbZWxlbWVudE5hbWVdID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRm9ybUVsZW1lbnR9IGZvcm1cbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZE5hbWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHsoc3RyaW5nfEFycmF5LjxzdHJpbmc+KX0gc3VibWl0dGFibGUgdmFsdWUocykgaW4gdGhlIGZvcm0gZm9yIGFcbiAqICAgbmFtZWQgZWxlbWVudCBmcm9tIGl0cyAuZWxlbWVudHMgY29sbGVjdGlvbiwgb3IgbnVsbCBpZiB0aGVyZSB3YXMgbm9cbiAqICAgZWxlbWVudCB3aXRoIHRoYXQgbmFtZSBvciB0aGUgZWxlbWVudCBoYWQgbm8gc3VibWl0dGFibGUgdmFsdWUocykuXG4gKi9cbmZ1bmN0aW9uIGdldEZpZWxkRGF0YShmb3JtLCBmaWVsZE5hbWUpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHsgdHJpbTogZmFsc2UgfTtcblxuICBpZiAoIWZvcm0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgZm9ybSBpcyByZXF1aXJlZCBieSBnZXRGaWVsZERhdGEsIHdhcyBnaXZlbiBmb3JtPScgKyBmb3JtKTtcbiAgfVxuICBpZiAoIWZpZWxkTmFtZSAmJiB0b1N0cmluZy5jYWxsKGZpZWxkTmFtZSkgIT09ICdbb2JqZWN0IFN0cmluZ10nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBIGZpZWxkIG5hbWUgaXMgcmVxdWlyZWQgYnkgZ2V0RmllbGREYXRhLCB3YXMgZ2l2ZW4gZmllbGROYW1lPScgKyBmaWVsZE5hbWUpO1xuICB9XG5cbiAgdmFyIGVsZW1lbnQgPSBmb3JtLmVsZW1lbnRzW2ZpZWxkTmFtZV07XG4gIGlmICghZWxlbWVudCB8fCBlbGVtZW50LmRpc2FibGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoIU5PREVfTElTVF9DTEFTU0VTW3RvU3RyaW5nLmNhbGwoZWxlbWVudCldKSB7XG4gICAgcmV0dXJuIGdldEZvcm1FbGVtZW50VmFsdWUoZWxlbWVudCwgb3B0aW9ucy50cmltKTtcbiAgfVxuXG4gIC8vIERlYWwgd2l0aCBtdWx0aXBsZSBmb3JtIGNvbnRyb2xzIHdoaWNoIGhhdmUgdGhlIHNhbWUgbmFtZVxuICB2YXIgZGF0YSA9IFtdO1xuICB2YXIgYWxsUmFkaW9zID0gdHJ1ZTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbGVtZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChlbGVtZW50W2ldLmRpc2FibGVkKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbFJhZGlvcyAmJiBlbGVtZW50W2ldLnR5cGUgIT09ICdyYWRpbycpIHtcbiAgICAgIGFsbFJhZGlvcyA9IGZhbHNlO1xuICAgIH1cbiAgICB2YXIgdmFsdWUgPSBnZXRGb3JtRWxlbWVudFZhbHVlKGVsZW1lbnRbaV0sIG9wdGlvbnMudHJpbSk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIGRhdGEgPSBkYXRhLmNvbmNhdCh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gU3BlY2lhbCBjYXNlIGZvciBhbiBlbGVtZW50IHdpdGggbXVsdGlwbGUgc2FtZS1uYW1lZCBpbnB1dHMgd2hpY2ggd2VyZSBhbGxcbiAgLy8gcmFkaW8gYnV0dG9uczogaWYgdGhlcmUgd2FzIGEgc2VsZWN0ZWQgdmFsdWUsIG9ubHkgcmV0dXJuIHRoZSB2YWx1ZS5cbiAgaWYgKGFsbFJhZGlvcyAmJiBkYXRhLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBkYXRhWzBdO1xuICB9XG5cbiAgcmV0dXJuIGRhdGEubGVuZ3RoID4gMCA/IGRhdGEgOiBudWxsO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgYSBmb3JtIGVsZW1lbnQuXG4gKiBAcGFyYW0ge2Jvb2xlYW19IHRyaW0gc2hvdWxkIHZhbHVlcyBmb3IgdGV4dCBlbnRyeSBpbnB1dHMgYmUgdHJpbW1lZD9cbiAqIEByZXR1cm4geyhzdHJpbmd8QXJyYXkuPHN0cmluZz58RmlsZXxBcnJheS48RmlsZT4pfSB0aGUgZWxlbWVudCdzIHN1Ym1pdHRhYmxlXG4gKiAgIHZhbHVlKHMpLCBvciBudWxsIGlmIGl0IGhhZCBub25lLlxuICovXG5mdW5jdGlvbiBnZXRGb3JtRWxlbWVudFZhbHVlKGVsZW1lbnQsIHRyaW0pIHtcbiAgdmFyIHZhbHVlID0gbnVsbDtcbiAgdmFyIHR5cGUgPSBlbGVtZW50LnR5cGU7XG5cblxuICBpZiAodHlwZSA9PT0gJ3NlbGVjdC1vbmUnKSB7XG4gICAgaWYgKGVsZW1lbnQub3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHZhbHVlID0gZWxlbWVudC5vcHRpb25zW2VsZW1lbnQuc2VsZWN0ZWRJbmRleF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmICh0eXBlID09PSAnc2VsZWN0LW11bHRpcGxlJykge1xuICAgIHZhbHVlID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbGVtZW50Lm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoZWxlbWVudC5vcHRpb25zW2ldLnNlbGVjdGVkKSB7XG4gICAgICAgIHZhbHVlLnB1c2goZWxlbWVudC5vcHRpb25zW2ldLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdmFsdWUgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvLyBJZiBhIGZpbGUgaW5wdXQgZG9lc24ndCBoYXZlIGEgZmlsZXMgYXR0cmlidXRlLCBmYWxsIHRocm91Z2ggdG8gdXNpbmcgaXRzXG4gIC8vIHZhbHVlIGF0dHJpYnV0ZS5cbiAgaWYgKHR5cGUgPT09ICdmaWxlJyAmJiAnZmlsZXMnIGluIGVsZW1lbnQpIHtcbiAgICBpZiAoZWxlbWVudC5tdWx0aXBsZSkge1xuICAgICAgdmFsdWUgPSBzbGljZS5jYWxsKGVsZW1lbnQuZmlsZXMpO1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNob3VsZCBiZSBudWxsIGlmIG5vdCBwcmVzZW50LCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNcbiAgICAgIHZhbHVlID0gZWxlbWVudC5maWxlc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgaWYgKCFDSEVDS0VEX0lOUFVUX1RZUEVTW3R5cGVdKSB7XG4gICAgdmFsdWUgPSB0cmltID8gZWxlbWVudC52YWx1ZS5yZXBsYWNlKFRSSU1fUkUsICcnKSA6IGVsZW1lbnQudmFsdWU7XG4gIH0gZWxzZSBpZiAoZWxlbWVudC5jaGVja2VkKSB7XG4gICAgdmFsdWUgPSBlbGVtZW50LnZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vLyBGb3IgVU1EIGJ1aWxkIGFjY2VzcyB0byBnZXRGaWVsZERhdGFcbmdldEZvcm1EYXRhLmdldEZpZWxkRGF0YSA9IGdldEZpZWxkRGF0YTsiLCJtb2R1bGUuZXhwb3J0cyA9IEV2ZW50XG5cbmZ1bmN0aW9uIEV2ZW50KCkge1xuICAgIHZhciBsaXN0ZW5lcnMgPSBbXVxuXG4gICAgcmV0dXJuIHsgYnJvYWRjYXN0OiBicm9hZGNhc3QsIGxpc3RlbjogZXZlbnQgfVxuXG4gICAgZnVuY3Rpb24gYnJvYWRjYXN0KHZhbHVlKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnNbaV0odmFsdWUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBldmVudChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcilcblxuICAgICAgICByZXR1cm4gcmVtb3ZlTGlzdGVuZXJcblxuICAgICAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcigpIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKVxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJ2YXIgRXZlbnQgPSByZXF1aXJlKCcuL2V2ZW50LmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSBTb3VyY2VcblxuZnVuY3Rpb24gU291cmNlKGJyb2FkY2FzdGVyKSB7XG4gICAgdmFyIHR1cGxlID0gRXZlbnQoKVxuXG4gICAgYnJvYWRjYXN0ZXIodHVwbGUuYnJvYWRjYXN0KVxuXG4gICAgcmV0dXJuIHR1cGxlLmxpc3RlblxufVxuIiwidmFyIHRvcExldmVsID0gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOlxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge31cbnZhciBtaW5Eb2MgPSByZXF1aXJlKCdtaW4tZG9jdW1lbnQnKTtcblxudmFyIGRvY2N5O1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGRvY2N5ID0gZG9jdW1lbnQ7XG59IGVsc2Uge1xuICAgIGRvY2N5ID0gdG9wTGV2ZWxbJ19fR0xPQkFMX0RPQ1VNRU5UX0NBQ0hFQDQnXTtcblxuICAgIGlmICghZG9jY3kpIHtcbiAgICAgICAgZG9jY3kgPSB0b3BMZXZlbFsnX19HTE9CQUxfRE9DVU1FTlRfQ0FDSEVANCddID0gbWluRG9jO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb2NjeTtcbiIsInZhciB3aW47XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgd2luID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgd2luID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIil7XG4gICAgd2luID0gc2VsZjtcbn0gZWxzZSB7XG4gICAgd2luID0ge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2luO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBzaGltXG5cbmZ1bmN0aW9uIHNoaW0gKGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnXG4gICAgfVxuXG4gICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyAnbm9uZScgOiAnJ1xufVxuIiwiLy8gSHVtYW5pemVEdXJhdGlvbi5qcyAtIGh0dHBzOi8vZ2l0LmlvL2owSGdtUVxuXG47KGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhpcyBoYXMgdG8gYmUgZGVmaW5lZCBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgYSBidWc6IHdlIHdhbnQgdG8gYWxpYXNcbiAgLy8gYGdyYCBhbmQgYGVsYCBmb3IgYmFja3dhcmRzLWNvbXBhdGlibGl0eS4gSW4gYSBicmVha2luZyBjaGFuZ2UsIHdlIGNhblxuICAvLyByZW1vdmUgYGdyYCBlbnRpcmVseS5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9FdmFuSGFobi9IdW1hbml6ZUR1cmF0aW9uLmpzL2lzc3Vlcy8xNDMgZm9yIG1vcmUuXG4gIHZhciBncmVlayA9IHtcbiAgICB5OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICfPh8+Bz4zOvc6/z4InIDogJ8+Hz4HPjM69zrnOsScgfSxcbiAgICBtbzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMgPT09IDEgPyAnzrzOrs69zrHPgicgOiAnzrzOrs69zrXPgicgfSxcbiAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICfOtc6yzrTOv868zqzOtM6xJyA6ICfOtc6yzrTOv868zqzOtM61z4InIH0sXG4gICAgZDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMgPT09IDEgPyAnzrzOrc+BzrEnIDogJ868zq3Pgc61z4InIH0sXG4gICAgaDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMgPT09IDEgPyAnz47Pgc6xJyA6ICfPjs+BzrXPgicgfSxcbiAgICBtOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICfOu861z4DPhM+MJyA6ICfOu861z4DPhM6sJyB9LFxuICAgIHM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjID09PSAxID8gJ860zrXPhc+EzrXPgc+MzrvOtc+Az4TOvycgOiAnzrTOtc+Fz4TOtc+Bz4zOu861z4DPhM6xJyB9LFxuICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICfPh865zrvOuc6/z4PPhM+MIM+Ezr/PhSDOtM61z4XPhM61z4HOv867zq3PgM+Ezr/PhScgOiAnz4fOuc67zrnOv8+Dz4TOrCDPhM6/z4UgzrTOtc+Fz4TOtc+Bzr/Ou86tz4DPhM6/z4UnIH0sXG4gICAgZGVjaW1hbDogJywnXG4gIH1cblxuICB2YXIgbGFuZ3VhZ2VzID0ge1xuICAgIGFyOiB7XG4gICAgICB5OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICfYs9mG2KknIDogJ9iz2YbZiNin2KonIH0sXG4gICAgICBtbzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMgPT09IDEgPyAn2LTZh9ixJyA6ICfYo9i02YfYsScgfSxcbiAgICAgIHc6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjID09PSAxID8gJ9ij2LPYqNmI2LknIDogJ9ij2LPYp9io2YrYuScgfSxcbiAgICAgIGQ6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjID09PSAxID8gJ9mK2YjZhScgOiAn2KPZitin2YUnIH0sXG4gICAgICBoOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICfYs9in2LnYqScgOiAn2LPYp9i52KfYqicgfSxcbiAgICAgIG06IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHJldHVybiBbJ9iv2YLZitmC2KknLCAn2K/Zgtin2KbZgiddW2dldEFyYWJpY0Zvcm0oYyldXG4gICAgICB9LFxuICAgICAgczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMgPT09IDEgPyAn2KvYp9mG2YrYqScgOiAn2KvZiNin2YbZiicgfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICfYrNiy2KEg2YXZhiDYp9mE2KvYp9mG2YrYqScgOiAn2KPYrNiy2KfYoSDZhdmGINin2YTYq9in2YbZitipJyB9LFxuICAgICAgZGVjaW1hbDogJywnXG4gICAgfSxcbiAgICBiZzoge1xuICAgICAgeTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsn0LPQvtC00LjQvdC4JywgJ9Cz0L7QtNC40L3QsCcsICfQs9C+0LTQuNC90LgnXVtnZXRTbGF2aWNGb3JtKGMpXSB9LFxuICAgICAgbW86IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ9C80LXRgdC10YbQsCcsICfQvNC10YHQtdGGJywgJ9C80LXRgdC10YbQsCddW2dldFNsYXZpY0Zvcm0oYyldIH0sXG4gICAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWyfRgdC10LTQvNC40YbQuCcsICfRgdC10LTQvNC40YbQsCcsICfRgdC10LTQvNC40YbQuCddW2dldFNsYXZpY0Zvcm0oYyldIH0sXG4gICAgICBkOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWyfQtNC90LgnLCAn0LTQtdC9JywgJ9C00L3QuCddW2dldFNsYXZpY0Zvcm0oYyldIH0sXG4gICAgICBoOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWyfRh9Cw0YHQsCcsICfRh9Cw0YEnLCAn0YfQsNGB0LAnXVtnZXRTbGF2aWNGb3JtKGMpXSB9LFxuICAgICAgbTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsn0LzQuNC90YPRgtC4JywgJ9C80LjQvdGD0YLQsCcsICfQvNC40L3Rg9GC0LgnXVtnZXRTbGF2aWNGb3JtKGMpXSB9LFxuICAgICAgczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsn0YHQtdC60YPQvdC00LgnLCAn0YHQtdC60YPQvdC00LAnLCAn0YHQtdC60YPQvdC00LgnXVtnZXRTbGF2aWNGb3JtKGMpXSB9LFxuICAgICAgbXM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ9C80LjQu9C40YHQtdC60YPQvdC00LgnLCAn0LzQuNC70LjRgdC10LrRg9C90LTQsCcsICfQvNC40LvQuNGB0LXQutGD0L3QtNC4J11bZ2V0U2xhdmljRm9ybShjKV0gfSxcbiAgICAgIGRlY2ltYWw6ICcsJ1xuICAgIH0sXG4gICAgY2E6IHtcbiAgICAgIHk6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnYW55JyArIChjID09PSAxID8gJycgOiAncycpIH0sXG4gICAgICBtbzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtZXMnICsgKGMgPT09IDEgPyAnJyA6ICdvcycpIH0sXG4gICAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ3NldG1hbicgKyAoYyA9PT0gMSA/ICdhJyA6ICdlcycpIH0sXG4gICAgICBkOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ2RpJyArIChjID09PSAxID8gJ2EnIDogJ2VzJykgfSxcbiAgICAgIGg6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnaG9yJyArIChjID09PSAxID8gJ2EnIDogJ2VzJykgfSxcbiAgICAgIG06IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbWludXQnICsgKGMgPT09IDEgPyAnJyA6ICdzJykgfSxcbiAgICAgIHM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnc2Vnb24nICsgKGMgPT09IDEgPyAnJyA6ICdzJykgfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ21pbGlzZWdvbicgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgZGVjaW1hbDogJywnXG4gICAgfSxcbiAgICBjczoge1xuICAgICAgeTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsncm9rJywgJ3Jva3UnLCAncm9reScsICdsZXQnXVtnZXRDemVjaE9yU2xvdmFrRm9ybShjKV0gfSxcbiAgICAgIG1vOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydtxJtzw61jJywgJ23Em3PDrWNlJywgJ23Em3PDrWNlJywgJ23Em3PDrWPFryddW2dldEN6ZWNoT3JTbG92YWtGb3JtKGMpXSB9LFxuICAgICAgdzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsndMO9ZGVuJywgJ3TDvWRuZScsICd0w71kbnknLCAndMO9ZG7FryddW2dldEN6ZWNoT3JTbG92YWtGb3JtKGMpXSB9LFxuICAgICAgZDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsnZGVuJywgJ2RuZScsICdkbnknLCAnZG7DrSddW2dldEN6ZWNoT3JTbG92YWtGb3JtKGMpXSB9LFxuICAgICAgaDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsnaG9kaW5hJywgJ2hvZGlueScsICdob2RpbnknLCAnaG9kaW4nXVtnZXRDemVjaE9yU2xvdmFrRm9ybShjKV0gfSxcbiAgICAgIG06IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ21pbnV0YScsICdtaW51dHknLCAnbWludXR5JywgJ21pbnV0J11bZ2V0Q3plY2hPclNsb3Zha0Zvcm0oYyldIH0sXG4gICAgICBzOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydzZWt1bmRhJywgJ3Nla3VuZHknLCAnc2VrdW5keScsICdzZWt1bmQnXVtnZXRDemVjaE9yU2xvdmFrRm9ybShjKV0gfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydtaWxpc2VrdW5kYScsICdtaWxpc2VrdW5keScsICdtaWxpc2VrdW5keScsICdtaWxpc2VrdW5kJ11bZ2V0Q3plY2hPclNsb3Zha0Zvcm0oYyldIH0sXG4gICAgICBkZWNpbWFsOiAnLCdcbiAgICB9LFxuICAgIGRhOiB7XG4gICAgICB5OiAnw6VyJyxcbiAgICAgIG1vOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ23DpW5lZCcgKyAoYyA9PT0gMSA/ICcnIDogJ2VyJykgfSxcbiAgICAgIHc6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAndWdlJyArIChjID09PSAxID8gJycgOiAncicpIH0sXG4gICAgICBkOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ2RhZycgKyAoYyA9PT0gMSA/ICcnIDogJ2UnKSB9LFxuICAgICAgaDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICd0aW1lJyArIChjID09PSAxID8gJycgOiAncicpIH0sXG4gICAgICBtOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ21pbnV0JyArIChjID09PSAxID8gJycgOiAndGVyJykgfSxcbiAgICAgIHM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnc2VrdW5kJyArIChjID09PSAxID8gJycgOiAnZXInKSB9LFxuICAgICAgbXM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbWlsbGlzZWt1bmQnICsgKGMgPT09IDEgPyAnJyA6ICdlcicpIH0sXG4gICAgICBkZWNpbWFsOiAnLCdcbiAgICB9LFxuICAgIGRlOiB7XG4gICAgICB5OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ0phaHInICsgKGMgPT09IDEgPyAnJyA6ICdlJykgfSxcbiAgICAgIG1vOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ01vbmF0JyArIChjID09PSAxID8gJycgOiAnZScpIH0sXG4gICAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ1dvY2hlJyArIChjID09PSAxID8gJycgOiAnbicpIH0sXG4gICAgICBkOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ1RhZycgKyAoYyA9PT0gMSA/ICcnIDogJ2UnKSB9LFxuICAgICAgaDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdTdHVuZGUnICsgKGMgPT09IDEgPyAnJyA6ICduJykgfSxcbiAgICAgIG06IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnTWludXRlJyArIChjID09PSAxID8gJycgOiAnbicpIH0sXG4gICAgICBzOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ1Nla3VuZGUnICsgKGMgPT09IDEgPyAnJyA6ICduJykgfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ01pbGxpc2VrdW5kZScgKyAoYyA9PT0gMSA/ICcnIDogJ24nKSB9LFxuICAgICAgZGVjaW1hbDogJywnXG4gICAgfSxcbiAgICBlbDogZ3JlZWssXG4gICAgZW46IHtcbiAgICAgIHk6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAneWVhcicgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgbW86IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbW9udGgnICsgKGMgPT09IDEgPyAnJyA6ICdzJykgfSxcbiAgICAgIHc6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnd2VlaycgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgZDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdkYXknICsgKGMgPT09IDEgPyAnJyA6ICdzJykgfSxcbiAgICAgIGg6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnaG91cicgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgbTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtaW51dGUnICsgKGMgPT09IDEgPyAnJyA6ICdzJykgfSxcbiAgICAgIHM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnc2Vjb25kJyArIChjID09PSAxID8gJycgOiAncycpIH0sXG4gICAgICBtczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtaWxsaXNlY29uZCcgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgZGVjaW1hbDogJy4nXG4gICAgfSxcbiAgICBlczoge1xuICAgICAgeTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdhw7FvJyArIChjID09PSAxID8gJycgOiAncycpIH0sXG4gICAgICBtbzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtZXMnICsgKGMgPT09IDEgPyAnJyA6ICdlcycpIH0sXG4gICAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ3NlbWFuYScgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgZDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdkw61hJyArIChjID09PSAxID8gJycgOiAncycpIH0sXG4gICAgICBoOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ2hvcmEnICsgKGMgPT09IDEgPyAnJyA6ICdzJykgfSxcbiAgICAgIG06IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbWludXRvJyArIChjID09PSAxID8gJycgOiAncycpIH0sXG4gICAgICBzOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ3NlZ3VuZG8nICsgKGMgPT09IDEgPyAnJyA6ICdzJykgfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ21pbGlzZWd1bmRvJyArIChjID09PSAxID8gJycgOiAncycpIH0sXG4gICAgICBkZWNpbWFsOiAnLCdcbiAgICB9LFxuICAgIGZhOiB7XG4gICAgICB5OiAn2LPYp9mEJyxcbiAgICAgIG1vOiAn2YXYp9mHJyxcbiAgICAgIHc6ICfZh9mB2KrZhycsXG4gICAgICBkOiAn2LHZiNiyJyxcbiAgICAgIGg6ICfYs9in2LnYqicsXG4gICAgICBtOiAn2K/ZgtuM2YLZhycsXG4gICAgICBzOiAn2KvYp9mG24zZhycsXG4gICAgICBtczogJ9mF24zZhNuMINir2KfZhtuM2YcnLFxuICAgICAgZGVjaW1hbDogJy4nXG4gICAgfSxcbiAgICBmaToge1xuICAgICAgeTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMgPT09IDEgPyAndnVvc2knIDogJ3Z1b3R0YScgfSxcbiAgICAgIG1vOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICdrdXVrYXVzaScgOiAna3V1a2F1dHRhJyB9LFxuICAgICAgdzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICd2aWlra28nICsgKGMgPT09IDEgPyAnJyA6ICdhJykgfSxcbiAgICAgIGQ6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAncMOkaXbDpCcgKyAoYyA9PT0gMSA/ICcnIDogJ8OkJykgfSxcbiAgICAgIGg6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAndHVudGknICsgKGMgPT09IDEgPyAnJyA6ICdhJykgfSxcbiAgICAgIG06IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbWludXV0dGknICsgKGMgPT09IDEgPyAnJyA6ICdhJykgfSxcbiAgICAgIHM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnc2VrdW50aScgKyAoYyA9PT0gMSA/ICcnIDogJ2EnKSB9LFxuICAgICAgbXM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbWlsbGlzZWt1bnRpJyArIChjID09PSAxID8gJycgOiAnYScpIH0sXG4gICAgICBkZWNpbWFsOiAnLCdcbiAgICB9LFxuICAgIGZyOiB7XG4gICAgICB5OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ2FuJyArIChjID49IDIgPyAncycgOiAnJykgfSxcbiAgICAgIG1vOiAnbW9pcycsXG4gICAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ3NlbWFpbmUnICsgKGMgPj0gMiA/ICdzJyA6ICcnKSB9LFxuICAgICAgZDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdqb3VyJyArIChjID49IDIgPyAncycgOiAnJykgfSxcbiAgICAgIGg6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnaGV1cmUnICsgKGMgPj0gMiA/ICdzJyA6ICcnKSB9LFxuICAgICAgbTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtaW51dGUnICsgKGMgPj0gMiA/ICdzJyA6ICcnKSB9LFxuICAgICAgczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdzZWNvbmRlJyArIChjID49IDIgPyAncycgOiAnJykgfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ21pbGxpc2Vjb25kZScgKyAoYyA+PSAyID8gJ3MnIDogJycpIH0sXG4gICAgICBkZWNpbWFsOiAnLCdcbiAgICB9LFxuICAgIGdyOiBncmVlayxcbiAgICBocjoge1xuICAgICAgeTogZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgJSAxMCA9PT0gMiB8fCBjICUgMTAgPT09IDMgfHwgYyAlIDEwID09PSA0KSB7XG4gICAgICAgICAgcmV0dXJuICdnb2RpbmUnXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdnb2RpbmEnXG4gICAgICB9LFxuICAgICAgbW86IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSAxKSB7XG4gICAgICAgICAgcmV0dXJuICdtamVzZWMnXG4gICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gMiB8fCBjID09PSAzIHx8IGMgPT09IDQpIHtcbiAgICAgICAgICByZXR1cm4gJ21qZXNlY2EnXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdtamVzZWNpJ1xuICAgICAgfSxcbiAgICAgIHc6IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjICUgMTAgPT09IDEgJiYgYyAhPT0gMTEpIHtcbiAgICAgICAgICByZXR1cm4gJ3RqZWRhbidcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ3RqZWRuYSdcbiAgICAgIH0sXG4gICAgICBkOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICdkYW4nIDogJ2RhbmEnIH0sXG4gICAgICBoOiBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gMSkge1xuICAgICAgICAgIHJldHVybiAnc2F0J1xuICAgICAgICB9IGVsc2UgaWYgKGMgPT09IDIgfHwgYyA9PT0gMyB8fCBjID09PSA0KSB7XG4gICAgICAgICAgcmV0dXJuICdzYXRhJ1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnc2F0aSdcbiAgICAgIH0sXG4gICAgICBtOiBmdW5jdGlvbiAoYykge1xuICAgICAgICB2YXIgbW9kMTAgPSBjICUgMTBcbiAgICAgICAgaWYgKChtb2QxMCA9PT0gMiB8fCBtb2QxMCA9PT0gMyB8fCBtb2QxMCA9PT0gNCkgJiYgKGMgPCAxMCB8fCBjID4gMTQpKSB7XG4gICAgICAgICAgcmV0dXJuICdtaW51dGUnXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdtaW51dGEnXG4gICAgICB9LFxuICAgICAgczogZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKChjID09PSAxMCB8fCBjID09PSAxMSB8fCBjID09PSAxMiB8fCBjID09PSAxMyB8fCBjID09PSAxNCB8fCBjID09PSAxNiB8fCBjID09PSAxNyB8fCBjID09PSAxOCB8fCBjID09PSAxOSkgfHwgKGMgJSAxMCA9PT0gNSkpIHtcbiAgICAgICAgICByZXR1cm4gJ3Nla3VuZGknXG4gICAgICAgIH0gZWxzZSBpZiAoYyAlIDEwID09PSAxKSB7XG4gICAgICAgICAgcmV0dXJuICdzZWt1bmRhJ1xuICAgICAgICB9IGVsc2UgaWYgKGMgJSAxMCA9PT0gMiB8fCBjICUgMTAgPT09IDMgfHwgYyAlIDEwID09PSA0KSB7XG4gICAgICAgICAgcmV0dXJuICdzZWt1bmRlJ1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnc2VrdW5kaSdcbiAgICAgIH0sXG4gICAgICBtczogZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IDEpIHtcbiAgICAgICAgICByZXR1cm4gJ21pbGlzZWt1bmRhJ1xuICAgICAgICB9IGVsc2UgaWYgKGMgJSAxMCA9PT0gMiB8fCBjICUgMTAgPT09IDMgfHwgYyAlIDEwID09PSA0KSB7XG4gICAgICAgICAgcmV0dXJuICdtaWxpc2VrdW5kZSdcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ21pbGlzZWt1bmRpJ1xuICAgICAgfSxcbiAgICAgIGRlY2ltYWw6ICcsJ1xuICAgIH0sXG4gICAgaHU6IHtcbiAgICAgIHk6ICfDqXYnLFxuICAgICAgbW86ICdow7NuYXAnLFxuICAgICAgdzogJ2jDqXQnLFxuICAgICAgZDogJ25hcCcsXG4gICAgICBoOiAnw7NyYScsXG4gICAgICBtOiAncGVyYycsXG4gICAgICBzOiAnbcOhc29kcGVyYycsXG4gICAgICBtczogJ2V6cmVkbcOhc29kcGVyYycsXG4gICAgICBkZWNpbWFsOiAnLCdcbiAgICB9LFxuICAgIGlkOiB7XG4gICAgICB5OiAndGFodW4nLFxuICAgICAgbW86ICdidWxhbicsXG4gICAgICB3OiAnbWluZ2d1JyxcbiAgICAgIGQ6ICdoYXJpJyxcbiAgICAgIGg6ICdqYW0nLFxuICAgICAgbTogJ21lbml0JyxcbiAgICAgIHM6ICdkZXRpaycsXG4gICAgICBtczogJ21pbGlkZXRpaycsXG4gICAgICBkZWNpbWFsOiAnLidcbiAgICB9LFxuICAgIGlzOiB7XG4gICAgICB5OiAnw6FyJyxcbiAgICAgIG1vOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ23DoW51w7AnICsgKGMgPT09IDEgPyAndXInIDogJ2lyJykgfSxcbiAgICAgIHc6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAndmlrJyArIChjID09PSAxID8gJ2EnIDogJ3VyJykgfSxcbiAgICAgIGQ6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnZGFnJyArIChjID09PSAxID8gJ3VyJyA6ICdhcicpIH0sXG4gICAgICBoOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ2tsdWtrdXTDrW0nICsgKGMgPT09IDEgPyAnaScgOiAnYXInKSB9LFxuICAgICAgbTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtw61uw7p0JyArIChjID09PSAxID8gJ2EnIDogJ3VyJykgfSxcbiAgICAgIHM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnc2Vrw7puZCcgKyAoYyA9PT0gMSA/ICdhJyA6ICd1cicpIH0sXG4gICAgICBtczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtaWxsaXNla8O6bmQnICsgKGMgPT09IDEgPyAnYScgOiAndXInKSB9LFxuICAgICAgZGVjaW1hbDogJy4nXG4gICAgfSxcbiAgICBpdDoge1xuICAgICAgeTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdhbm4nICsgKGMgPT09IDEgPyAnbycgOiAnaScpIH0sXG4gICAgICBtbzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtZXMnICsgKGMgPT09IDEgPyAnZScgOiAnaScpIH0sXG4gICAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ3NldHRpbWFuJyArIChjID09PSAxID8gJ2EnIDogJ2UnKSB9LFxuICAgICAgZDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdnaW9ybicgKyAoYyA9PT0gMSA/ICdvJyA6ICdpJykgfSxcbiAgICAgIGg6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnb3InICsgKGMgPT09IDEgPyAnYScgOiAnZScpIH0sXG4gICAgICBtOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ21pbnV0JyArIChjID09PSAxID8gJ28nIDogJ2knKSB9LFxuICAgICAgczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdzZWNvbmQnICsgKGMgPT09IDEgPyAnbycgOiAnaScpIH0sXG4gICAgICBtczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtaWxsaXNlY29uZCcgKyAoYyA9PT0gMSA/ICdvJyA6ICdpJykgfSxcbiAgICAgIGRlY2ltYWw6ICcsJ1xuICAgIH0sXG4gICAgamE6IHtcbiAgICAgIHk6ICflubQnLFxuICAgICAgbW86ICfmnIgnLFxuICAgICAgdzogJ+mAsScsXG4gICAgICBkOiAn5pelJyxcbiAgICAgIGg6ICfmmYLplpMnLFxuICAgICAgbTogJ+WIhicsXG4gICAgICBzOiAn56eSJyxcbiAgICAgIG1zOiAn44Of44Oq56eSJyxcbiAgICAgIGRlY2ltYWw6ICcuJ1xuICAgIH0sXG4gICAga286IHtcbiAgICAgIHk6ICfrhYQnLFxuICAgICAgbW86ICfqsJzsm5QnLFxuICAgICAgdzogJ+yjvOydvCcsXG4gICAgICBkOiAn7J28JyxcbiAgICAgIGg6ICfsi5zqsIQnLFxuICAgICAgbTogJ+u2hCcsXG4gICAgICBzOiAn7LSIJyxcbiAgICAgIG1zOiAn67CA66asIOy0iCcsXG4gICAgICBkZWNpbWFsOiAnLidcbiAgICB9LFxuICAgIGxvOiB7XG4gICAgICB5OiAn4Lqb4Lq1JyxcbiAgICAgIG1vOiAn4LuA4LqU4Lq34Lqt4LqZJyxcbiAgICAgIHc6ICfguq3gurLgupfgurTgupQnLFxuICAgICAgZDogJ+C6oeC6t+C7iScsXG4gICAgICBoOiAn4LqK4Lq74LuI4Lqn4LuC4Lqh4LqHJyxcbiAgICAgIG06ICfgupngurLgupfgurUnLFxuICAgICAgczogJ+C6p+C6tOC6meC6suC6l+C6tScsXG4gICAgICBtczogJ+C6oeC6tOC6meC6peC6tOC6p+C6tOC6meC6suC6l+C6tScsXG4gICAgICBkZWNpbWFsOiAnLCdcbiAgICB9LFxuICAgIGx0OiB7XG4gICAgICB5OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gKChjICUgMTAgPT09IDApIHx8IChjICUgMTAwID49IDEwICYmIGMgJSAxMDAgPD0gMjApKSA/ICdtZXTFsycgOiAnbWV0YWknIH0sXG4gICAgICBtbzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsnbcSXbnVvJywgJ23El25lc2lhaScsICdtxJduZXNpxbMnXVtnZXRMaXRodWFuaWFuRm9ybShjKV0gfSxcbiAgICAgIHc6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ3NhdmFpdMSXJywgJ3NhdmFpdMSXcycsICdzYXZhacSNacWzJ11bZ2V0TGl0aHVhbmlhbkZvcm0oYyldIH0sXG4gICAgICBkOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydkaWVuYScsICdkaWVub3MnLCAnZGllbsWzJ11bZ2V0TGl0aHVhbmlhbkZvcm0oYyldIH0sXG4gICAgICBoOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWyd2YWxhbmRhJywgJ3ZhbGFuZG9zJywgJ3ZhbGFuZMWzJ11bZ2V0TGl0aHVhbmlhbkZvcm0oYyldIH0sXG4gICAgICBtOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydtaW51dMSXJywgJ21pbnV0xJdzJywgJ21pbnXEjWnFsyddW2dldExpdGh1YW5pYW5Gb3JtKGMpXSB9LFxuICAgICAgczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsnc2VrdW5kxJcnLCAnc2VrdW5kxJdzJywgJ3Nla3VuZMW+acWzJ11bZ2V0TGl0aHVhbmlhbkZvcm0oYyldIH0sXG4gICAgICBtczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsnbWlsaXNla3VuZMSXJywgJ21pbGlzZWt1bmTEl3MnLCAnbWlsaXNla3VuZMW+acWzJ11bZ2V0TGl0aHVhbmlhbkZvcm0oYyldIH0sXG4gICAgICBkZWNpbWFsOiAnLCdcbiAgICB9LFxuICAgIG1zOiB7XG4gICAgICB5OiAndGFodW4nLFxuICAgICAgbW86ICdidWxhbicsXG4gICAgICB3OiAnbWluZ2d1JyxcbiAgICAgIGQ6ICdoYXJpJyxcbiAgICAgIGg6ICdqYW0nLFxuICAgICAgbTogJ21pbml0JyxcbiAgICAgIHM6ICdzYWF0JyxcbiAgICAgIG1zOiAnbWlsaXNhYXQnLFxuICAgICAgZGVjaW1hbDogJy4nXG4gICAgfSxcbiAgICBubDoge1xuICAgICAgeTogJ2phYXInLFxuICAgICAgbW86IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjID09PSAxID8gJ21hYW5kJyA6ICdtYWFuZGVuJyB9LFxuICAgICAgdzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMgPT09IDEgPyAnd2VlaycgOiAnd2VrZW4nIH0sXG4gICAgICBkOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICdkYWcnIDogJ2RhZ2VuJyB9LFxuICAgICAgaDogJ3V1cicsXG4gICAgICBtOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICdtaW51dXQnIDogJ21pbnV0ZW4nIH0sXG4gICAgICBzOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICdzZWNvbmRlJyA6ICdzZWNvbmRlbicgfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICdtaWxsaXNlY29uZGUnIDogJ21pbGxpc2Vjb25kZW4nIH0sXG4gICAgICBkZWNpbWFsOiAnLCdcbiAgICB9LFxuICAgIG5vOiB7XG4gICAgICB5OiAnw6VyJyxcbiAgICAgIG1vOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ23DpW5lZCcgKyAoYyA9PT0gMSA/ICcnIDogJ2VyJykgfSxcbiAgICAgIHc6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAndWtlJyArIChjID09PSAxID8gJycgOiAncicpIH0sXG4gICAgICBkOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ2RhZycgKyAoYyA9PT0gMSA/ICcnIDogJ2VyJykgfSxcbiAgICAgIGg6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAndGltZScgKyAoYyA9PT0gMSA/ICcnIDogJ3InKSB9LFxuICAgICAgbTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtaW51dHQnICsgKGMgPT09IDEgPyAnJyA6ICdlcicpIH0sXG4gICAgICBzOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ3Nla3VuZCcgKyAoYyA9PT0gMSA/ICcnIDogJ2VyJykgfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ21pbGxpc2VrdW5kJyArIChjID09PSAxID8gJycgOiAnZXInKSB9LFxuICAgICAgZGVjaW1hbDogJywnXG4gICAgfSxcbiAgICBwbDoge1xuICAgICAgeTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsncm9rJywgJ3Jva3UnLCAnbGF0YScsICdsYXQnXVtnZXRQb2xpc2hGb3JtKGMpXSB9LFxuICAgICAgbW86IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ21pZXNpxIVjJywgJ21pZXNpxIVjYScsICdtaWVzacSFY2UnLCAnbWllc2nEmWN5J11bZ2V0UG9saXNoRm9ybShjKV0gfSxcbiAgICAgIHc6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ3R5ZHppZcWEJywgJ3R5Z29kbmlhJywgJ3R5Z29kbmllJywgJ3R5Z29kbmknXVtnZXRQb2xpc2hGb3JtKGMpXSB9LFxuICAgICAgZDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsnZHppZcWEJywgJ2RuaWEnLCAnZG5pJywgJ2RuaSddW2dldFBvbGlzaEZvcm0oYyldIH0sXG4gICAgICBoOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydnb2R6aW5hJywgJ2dvZHppbnknLCAnZ29kemlueScsICdnb2R6aW4nXVtnZXRQb2xpc2hGb3JtKGMpXSB9LFxuICAgICAgbTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsnbWludXRhJywgJ21pbnV0eScsICdtaW51dHknLCAnbWludXQnXVtnZXRQb2xpc2hGb3JtKGMpXSB9LFxuICAgICAgczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsnc2VrdW5kYScsICdzZWt1bmR5JywgJ3Nla3VuZHknLCAnc2VrdW5kJ11bZ2V0UG9saXNoRm9ybShjKV0gfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydtaWxpc2VrdW5kYScsICdtaWxpc2VrdW5keScsICdtaWxpc2VrdW5keScsICdtaWxpc2VrdW5kJ11bZ2V0UG9saXNoRm9ybShjKV0gfSxcbiAgICAgIGRlY2ltYWw6ICcsJ1xuICAgIH0sXG4gICAgcHQ6IHtcbiAgICAgIHk6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnYW5vJyArIChjID09PSAxID8gJycgOiAncycpIH0sXG4gICAgICBtbzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMgPT09IDEgPyAnbcOqcycgOiAnbWVzZXMnIH0sXG4gICAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ3NlbWFuYScgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgZDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdkaWEnICsgKGMgPT09IDEgPyAnJyA6ICdzJykgfSxcbiAgICAgIGg6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnaG9yYScgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgbTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtaW51dG8nICsgKGMgPT09IDEgPyAnJyA6ICdzJykgfSxcbiAgICAgIHM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnc2VndW5kbycgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgbXM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbWlsaXNzZWd1bmRvJyArIChjID09PSAxID8gJycgOiAncycpIH0sXG4gICAgICBkZWNpbWFsOiAnLCdcbiAgICB9LFxuICAgIHJ1OiB7XG4gICAgICB5OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWyfQu9C10YInLCAn0LPQvtC0JywgJ9Cz0L7QtNCwJ11bZ2V0U2xhdmljRm9ybShjKV0gfSxcbiAgICAgIG1vOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWyfQvNC10YHRj9GG0LXQsicsICfQvNC10YHRj9GGJywgJ9C80LXRgdGP0YbQsCddW2dldFNsYXZpY0Zvcm0oYyldIH0sXG4gICAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWyfQvdC10LTQtdC70YwnLCAn0L3QtdC00LXQu9GPJywgJ9C90LXQtNC10LvQuCddW2dldFNsYXZpY0Zvcm0oYyldIH0sXG4gICAgICBkOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWyfQtNC90LXQuScsICfQtNC10L3RjCcsICfQtNC90Y8nXVtnZXRTbGF2aWNGb3JtKGMpXSB9LFxuICAgICAgaDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsn0YfQsNGB0L7QsicsICfRh9Cw0YEnLCAn0YfQsNGB0LAnXVtnZXRTbGF2aWNGb3JtKGMpXSB9LFxuICAgICAgbTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsn0LzQuNC90YPRgicsICfQvNC40L3Rg9GC0LAnLCAn0LzQuNC90YPRgtGLJ11bZ2V0U2xhdmljRm9ybShjKV0gfSxcbiAgICAgIHM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ9GB0LXQutGD0L3QtCcsICfRgdC10LrRg9C90LTQsCcsICfRgdC10LrRg9C90LTRiyddW2dldFNsYXZpY0Zvcm0oYyldIH0sXG4gICAgICBtczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsn0LzQuNC70LvQuNGB0LXQutGD0L3QtCcsICfQvNC40LvQu9C40YHQtdC60YPQvdC00LAnLCAn0LzQuNC70LvQuNGB0LXQutGD0L3QtNGLJ11bZ2V0U2xhdmljRm9ybShjKV0gfSxcbiAgICAgIGRlY2ltYWw6ICcsJ1xuICAgIH0sXG4gICAgdWs6IHtcbiAgICAgIHk6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ9GA0L7QutGW0LInLCAn0YDRltC6JywgJ9GA0L7QutC4J11bZ2V0U2xhdmljRm9ybShjKV0gfSxcbiAgICAgIG1vOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWyfQvNGW0YHRj9GG0ZbQsicsICfQvNGW0YHRj9GG0YwnLCAn0LzRltGB0Y/RhtGWJ11bZ2V0U2xhdmljRm9ybShjKV0gfSxcbiAgICAgIHc6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ9GC0LjQttC90ZbQsicsICfRgtC40LbQtNC10L3RjCcsICfRgtC40LbQvdGWJ11bZ2V0U2xhdmljRm9ybShjKV0gfSxcbiAgICAgIGQ6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ9C00L3RltCyJywgJ9C00LXQvdGMJywgJ9C00L3RliddW2dldFNsYXZpY0Zvcm0oYyldIH0sXG4gICAgICBoOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWyfQs9C+0LTQuNC9JywgJ9Cz0L7QtNC40L3QsCcsICfQs9C+0LTQuNC90LgnXVtnZXRTbGF2aWNGb3JtKGMpXSB9LFxuICAgICAgbTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsn0YXQstC40LvQuNC9JywgJ9GF0LLQuNC70LjQvdCwJywgJ9GF0LLQuNC70LjQvdC4J11bZ2V0U2xhdmljRm9ybShjKV0gfSxcbiAgICAgIHM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ9GB0LXQutGD0L3QtCcsICfRgdC10LrRg9C90LTQsCcsICfRgdC10LrRg9C90LTQuCddW2dldFNsYXZpY0Zvcm0oYyldIH0sXG4gICAgICBtczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsn0LzRltC70ZbRgdC10LrRg9C90LQnLCAn0LzRltC70ZbRgdC10LrRg9C90LTQsCcsICfQvNGW0LvRltGB0LXQutGD0L3QtNC4J11bZ2V0U2xhdmljRm9ybShjKV0gfSxcbiAgICAgIGRlY2ltYWw6ICcsJ1xuICAgIH0sXG4gICAgdXI6IHtcbiAgICAgIHk6ICfYs9in2YQnLFxuICAgICAgbW86IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjID09PSAxID8gJ9mF24HbjNmG24EnIDogJ9mF24HbjNmG25InIH0sXG4gICAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICfbgdmB2KrbgScgOiAn24HZgdiq25InIH0sXG4gICAgICBkOiAn2K/ZhicsXG4gICAgICBoOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICfar9q+2YbZuduBJyA6ICfar9q+2YbZuduSJyB9LFxuICAgICAgbTogJ9mF2YbZuScsXG4gICAgICBzOiAn2LPbjNqp2YbaiCcsXG4gICAgICBtczogJ9mF2YTbjCDYs9uM2qnZhtqIJyxcbiAgICAgIGRlY2ltYWw6ICcuJ1xuICAgIH0sXG4gICAgc2s6IHtcbiAgICAgIHk6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ3JvaycsICdyb2t5JywgJ3Jva3knLCAncm9rb3YnXVtnZXRDemVjaE9yU2xvdmFrRm9ybShjKV0gfSxcbiAgICAgIG1vOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydtZXNpYWMnLCAnbWVzaWFjZScsICdtZXNpYWNlJywgJ21lc2lhY292J11bZ2V0Q3plY2hPclNsb3Zha0Zvcm0oYyldIH0sXG4gICAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWyd0w73FvmRlxYgnLCAndMO9xb5kbmUnLCAndMO9xb5kbmUnLCAndMO9xb5kxYhvdiddW2dldEN6ZWNoT3JTbG92YWtGb3JtKGMpXSB9LFxuICAgICAgZDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsnZGXFiCcsICdkbmknLCAnZG5pJywgJ2Ruw60nXVtnZXRDemVjaE9yU2xvdmFrRm9ybShjKV0gfSxcbiAgICAgIGg6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ2hvZGluYScsICdob2RpbnknLCAnaG9kaW55JywgJ2hvZMOtbiddW2dldEN6ZWNoT3JTbG92YWtGb3JtKGMpXSB9LFxuICAgICAgbTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsnbWluw7p0YScsICdtaW7DunR5JywgJ21pbsO6dHknLCAnbWluw7p0J11bZ2V0Q3plY2hPclNsb3Zha0Zvcm0oYyldIH0sXG4gICAgICBzOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydzZWt1bmRhJywgJ3Nla3VuZHknLCAnc2VrdW5keScsICdzZWvDum5kJ11bZ2V0Q3plY2hPclNsb3Zha0Zvcm0oYyldIH0sXG4gICAgICBtczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsnbWlsaXNla3VuZGEnLCAnbWlsaXNla3VuZHknLCAnbWlsaXNla3VuZHknLCAnbWlsaXNla8O6bmQnXVtnZXRDemVjaE9yU2xvdmFrRm9ybShjKV0gfSxcbiAgICAgIGRlY2ltYWw6ICcsJ1xuICAgIH0sXG4gICAgc3Y6IHtcbiAgICAgIHk6ICfDpXInLFxuICAgICAgbW86IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbcOlbmFkJyArIChjID09PSAxID8gJycgOiAnZXInKSB9LFxuICAgICAgdzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICd2ZWNrJyArIChjID09PSAxID8gJ2EnIDogJ29yJykgfSxcbiAgICAgIGQ6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnZGFnJyArIChjID09PSAxID8gJycgOiAnYXInKSB9LFxuICAgICAgaDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICd0aW1tJyArIChjID09PSAxID8gJ2UnIDogJ2FyJykgfSxcbiAgICAgIG06IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbWludXQnICsgKGMgPT09IDEgPyAnJyA6ICdlcicpIH0sXG4gICAgICBzOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ3Nla3VuZCcgKyAoYyA9PT0gMSA/ICcnIDogJ2VyJykgfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ21pbGxpc2VrdW5kJyArIChjID09PSAxID8gJycgOiAnZXInKSB9LFxuICAgICAgZGVjaW1hbDogJywnXG4gICAgfSxcbiAgICB0cjoge1xuICAgICAgeTogJ3nEsWwnLFxuICAgICAgbW86ICdheScsXG4gICAgICB3OiAnaGFmdGEnLFxuICAgICAgZDogJ2fDvG4nLFxuICAgICAgaDogJ3NhYXQnLFxuICAgICAgbTogJ2Rha2lrYScsXG4gICAgICBzOiAnc2FuaXllJyxcbiAgICAgIG1zOiAnbWlsaXNhbml5ZScsXG4gICAgICBkZWNpbWFsOiAnLCdcbiAgICB9LFxuICAgIHZpOiB7XG4gICAgICB5OiAnbsSDbScsXG4gICAgICBtbzogJ3Row6FuZycsXG4gICAgICB3OiAndHXhuqduJyxcbiAgICAgIGQ6ICduZ8OgeScsXG4gICAgICBoOiAnZ2nhu50nLFxuICAgICAgbTogJ3Bow7p0JyxcbiAgICAgIHM6ICdnacOieScsXG4gICAgICBtczogJ21pbGkgZ2nDonknLFxuICAgICAgZGVjaW1hbDogJywnXG4gICAgfSxcbiAgICB6aF9DTjoge1xuICAgICAgeTogJ+W5tCcsXG4gICAgICBtbzogJ+S4quaciCcsXG4gICAgICB3OiAn5ZGoJyxcbiAgICAgIGQ6ICflpKknLFxuICAgICAgaDogJ+Wwj+aXticsXG4gICAgICBtOiAn5YiG6ZKfJyxcbiAgICAgIHM6ICfnp5InLFxuICAgICAgbXM6ICfmr6vnp5InLFxuICAgICAgZGVjaW1hbDogJy4nXG4gICAgfSxcbiAgICB6aF9UVzoge1xuICAgICAgeTogJ+W5tCcsXG4gICAgICBtbzogJ+WAi+aciCcsXG4gICAgICB3OiAn5ZGoJyxcbiAgICAgIGQ6ICflpKknLFxuICAgICAgaDogJ+Wwj+aZgicsXG4gICAgICBtOiAn5YiG6ZCYJyxcbiAgICAgIHM6ICfnp5InLFxuICAgICAgbXM6ICfmr6vnp5InLFxuICAgICAgZGVjaW1hbDogJy4nXG4gICAgfVxuICB9XG5cbiAgLy8gWW91IGNhbiBjcmVhdGUgYSBodW1hbml6ZXIsIHdoaWNoIHJldHVybnMgYSBmdW5jdGlvbiB3aXRoIGRlZmF1bHRcbiAgLy8gcGFyYW1ldGVycy5cbiAgZnVuY3Rpb24gaHVtYW5pemVyIChwYXNzZWRPcHRpb25zKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uIGh1bWFuaXplciAobXMsIGh1bWFuaXplck9wdGlvbnMpIHtcbiAgICAgIHZhciBvcHRpb25zID0gZXh0ZW5kKHt9LCByZXN1bHQsIGh1bWFuaXplck9wdGlvbnMgfHwge30pXG4gICAgICByZXR1cm4gZG9IdW1hbml6YXRpb24obXMsIG9wdGlvbnMpXG4gICAgfVxuXG4gICAgcmV0dXJuIGV4dGVuZChyZXN1bHQsIHtcbiAgICAgIGxhbmd1YWdlOiAnZW4nLFxuICAgICAgZGVsaW1pdGVyOiAnLCAnLFxuICAgICAgc3BhY2VyOiAnICcsXG4gICAgICBjb25qdW5jdGlvbjogJycsXG4gICAgICBzZXJpYWxDb21tYTogdHJ1ZSxcbiAgICAgIHVuaXRzOiBbJ3knLCAnbW8nLCAndycsICdkJywgJ2gnLCAnbScsICdzJ10sXG4gICAgICBsYW5ndWFnZXM6IHt9LFxuICAgICAgcm91bmQ6IGZhbHNlLFxuICAgICAgdW5pdE1lYXN1cmVzOiB7XG4gICAgICAgIHk6IDMxNTU3NjAwMDAwLFxuICAgICAgICBtbzogMjYyOTgwMDAwMCxcbiAgICAgICAgdzogNjA0ODAwMDAwLFxuICAgICAgICBkOiA4NjQwMDAwMCxcbiAgICAgICAgaDogMzYwMDAwMCxcbiAgICAgICAgbTogNjAwMDAsXG4gICAgICAgIHM6IDEwMDAsXG4gICAgICAgIG1zOiAxXG4gICAgICB9XG4gICAgfSwgcGFzc2VkT3B0aW9ucylcbiAgfVxuXG4gIC8vIFRoZSBtYWluIGZ1bmN0aW9uIGlzIGp1c3QgYSB3cmFwcGVyIGFyb3VuZCBhIGRlZmF1bHQgaHVtYW5pemVyLlxuICB2YXIgaHVtYW5pemVEdXJhdGlvbiA9IGh1bWFuaXplcih7fSlcblxuICAvLyBkb0h1bWFuaXphdGlvbiBkb2VzIHRoZSBidWxrIG9mIHRoZSB3b3JrLlxuICBmdW5jdGlvbiBkb0h1bWFuaXphdGlvbiAobXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgaSwgbGVuLCBwaWVjZVxuXG4gICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgYSBwb3NpdGl2ZSBudW1iZXIuXG4gICAgLy8gSGFzIHRoZSBuaWNlIHNpZGVmZmVjdCBvZiB0dXJuaW5nIE51bWJlciBvYmplY3RzIGludG8gcHJpbWl0aXZlcy5cbiAgICBtcyA9IE1hdGguYWJzKG1zKVxuXG4gICAgdmFyIGRpY3Rpb25hcnkgPSBvcHRpb25zLmxhbmd1YWdlc1tvcHRpb25zLmxhbmd1YWdlXSB8fCBsYW5ndWFnZXNbb3B0aW9ucy5sYW5ndWFnZV1cbiAgICBpZiAoIWRpY3Rpb25hcnkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbGFuZ3VhZ2UgJyArIGRpY3Rpb25hcnkgKyAnLicpXG4gICAgfVxuXG4gICAgdmFyIHBpZWNlcyA9IFtdXG5cbiAgICAvLyBTdGFydCBhdCB0aGUgdG9wIGFuZCBrZWVwIHJlbW92aW5nIHVuaXRzLCBiaXQgYnkgYml0LlxuICAgIHZhciB1bml0TmFtZSwgdW5pdE1TLCB1bml0Q291bnRcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBvcHRpb25zLnVuaXRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB1bml0TmFtZSA9IG9wdGlvbnMudW5pdHNbaV1cbiAgICAgIHVuaXRNUyA9IG9wdGlvbnMudW5pdE1lYXN1cmVzW3VuaXROYW1lXVxuXG4gICAgICAvLyBXaGF0J3MgdGhlIG51bWJlciBvZiBmdWxsIHVuaXRzIHdlIGNhbiBmaXQ/XG4gICAgICBpZiAoaSArIDEgPT09IGxlbikge1xuICAgICAgICB1bml0Q291bnQgPSBtcyAvIHVuaXRNU1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdW5pdENvdW50ID0gTWF0aC5mbG9vcihtcyAvIHVuaXRNUylcbiAgICAgIH1cblxuICAgICAgLy8gQWRkIHRoZSBzdHJpbmcuXG4gICAgICBwaWVjZXMucHVzaCh7XG4gICAgICAgIHVuaXRDb3VudDogdW5pdENvdW50LFxuICAgICAgICB1bml0TmFtZTogdW5pdE5hbWVcbiAgICAgIH0pXG5cbiAgICAgIC8vIFJlbW92ZSB3aGF0IHdlIGp1c3QgZmlndXJlZCBvdXQuXG4gICAgICBtcyAtPSB1bml0Q291bnQgKiB1bml0TVNcbiAgICB9XG5cbiAgICB2YXIgZmlyc3RPY2N1cGllZFVuaXRJbmRleCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgcGllY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocGllY2VzW2ldLnVuaXRDb3VudCkge1xuICAgICAgICBmaXJzdE9jY3VwaWVkVW5pdEluZGV4ID0gaVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnJvdW5kKSB7XG4gICAgICB2YXIgcmF0aW9Ub0xhcmdlclVuaXQsIHByZXZpb3VzUGllY2VcbiAgICAgIGZvciAoaSA9IHBpZWNlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBwaWVjZSA9IHBpZWNlc1tpXVxuICAgICAgICBwaWVjZS51bml0Q291bnQgPSBNYXRoLnJvdW5kKHBpZWNlLnVuaXRDb3VudClcblxuICAgICAgICBpZiAoaSA9PT0gMCkgeyBicmVhayB9XG5cbiAgICAgICAgcHJldmlvdXNQaWVjZSA9IHBpZWNlc1tpIC0gMV1cblxuICAgICAgICByYXRpb1RvTGFyZ2VyVW5pdCA9IG9wdGlvbnMudW5pdE1lYXN1cmVzW3ByZXZpb3VzUGllY2UudW5pdE5hbWVdIC8gb3B0aW9ucy51bml0TWVhc3VyZXNbcGllY2UudW5pdE5hbWVdXG4gICAgICAgIGlmICgocGllY2UudW5pdENvdW50ICUgcmF0aW9Ub0xhcmdlclVuaXQpID09PSAwIHx8IChvcHRpb25zLmxhcmdlc3QgJiYgKChvcHRpb25zLmxhcmdlc3QgLSAxKSA8IChpIC0gZmlyc3RPY2N1cGllZFVuaXRJbmRleCkpKSkge1xuICAgICAgICAgIHByZXZpb3VzUGllY2UudW5pdENvdW50ICs9IHBpZWNlLnVuaXRDb3VudCAvIHJhdGlvVG9MYXJnZXJVbml0XG4gICAgICAgICAgcGllY2UudW5pdENvdW50ID0gMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IFtdXG4gICAgZm9yIChpID0gMCwgcGllY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBwaWVjZSA9IHBpZWNlc1tpXVxuICAgICAgaWYgKHBpZWNlLnVuaXRDb3VudCkge1xuICAgICAgICByZXN1bHQucHVzaChyZW5kZXIocGllY2UudW5pdENvdW50LCBwaWVjZS51bml0TmFtZSwgZGljdGlvbmFyeSwgb3B0aW9ucykpXG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHQubGVuZ3RoID09PSBvcHRpb25zLmxhcmdlc3QpIHsgYnJlYWsgfVxuICAgIH1cblxuICAgIGlmIChyZXN1bHQubGVuZ3RoKSB7XG4gICAgICBpZiAoIW9wdGlvbnMuY29uanVuY3Rpb24gfHwgcmVzdWx0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0LmpvaW4ob3B0aW9ucy5kZWxpbWl0ZXIpXG4gICAgICB9IGVsc2UgaWYgKHJlc3VsdC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKG9wdGlvbnMuY29uanVuY3Rpb24pXG4gICAgICB9IGVsc2UgaWYgKHJlc3VsdC5sZW5ndGggPiAyKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQuc2xpY2UoMCwgLTEpLmpvaW4ob3B0aW9ucy5kZWxpbWl0ZXIpICsgKG9wdGlvbnMuc2VyaWFsQ29tbWEgPyAnLCcgOiAnJykgKyBvcHRpb25zLmNvbmp1bmN0aW9uICsgcmVzdWx0LnNsaWNlKC0xKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVuZGVyKDAsIG9wdGlvbnMudW5pdHNbb3B0aW9ucy51bml0cy5sZW5ndGggLSAxXSwgZGljdGlvbmFyeSwgb3B0aW9ucylcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW5kZXIgKGNvdW50LCB0eXBlLCBkaWN0aW9uYXJ5LCBvcHRpb25zKSB7XG4gICAgdmFyIGRlY2ltYWxcbiAgICBpZiAob3B0aW9ucy5kZWNpbWFsID09PSB2b2lkIDApIHtcbiAgICAgIGRlY2ltYWwgPSBkaWN0aW9uYXJ5LmRlY2ltYWxcbiAgICB9IGVsc2Uge1xuICAgICAgZGVjaW1hbCA9IG9wdGlvbnMuZGVjaW1hbFxuICAgIH1cblxuICAgIHZhciBjb3VudFN0ciA9IGNvdW50LnRvU3RyaW5nKCkucmVwbGFjZSgnLicsIGRlY2ltYWwpXG5cbiAgICB2YXIgZGljdGlvbmFyeVZhbHVlID0gZGljdGlvbmFyeVt0eXBlXVxuICAgIHZhciB3b3JkXG4gICAgaWYgKHR5cGVvZiBkaWN0aW9uYXJ5VmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHdvcmQgPSBkaWN0aW9uYXJ5VmFsdWUoY291bnQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHdvcmQgPSBkaWN0aW9uYXJ5VmFsdWVcbiAgICB9XG5cbiAgICByZXR1cm4gY291bnRTdHIgKyBvcHRpb25zLnNwYWNlciArIHdvcmRcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZCAoZGVzdGluYXRpb24pIHtcbiAgICB2YXIgc291cmNlXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHNvdXJjZSA9IGFyZ3VtZW50c1tpXVxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgIGRlc3RpbmF0aW9uW3Byb3BdID0gc291cmNlW3Byb3BdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uXG4gIH1cblxuICAvLyBJbnRlcm5hbCBoZWxwZXIgZnVuY3Rpb24gZm9yIFBvbGlzaCBsYW5ndWFnZS5cbiAgZnVuY3Rpb24gZ2V0UG9saXNoRm9ybSAoYykge1xuICAgIGlmIChjID09PSAxKSB7XG4gICAgICByZXR1cm4gMFxuICAgIH0gZWxzZSBpZiAoTWF0aC5mbG9vcihjKSAhPT0gYykge1xuICAgICAgcmV0dXJuIDFcbiAgICB9IGVsc2UgaWYgKGMgJSAxMCA+PSAyICYmIGMgJSAxMCA8PSA0ICYmICEoYyAlIDEwMCA+IDEwICYmIGMgJSAxMDAgPCAyMCkpIHtcbiAgICAgIHJldHVybiAyXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAzXG4gICAgfVxuICB9XG5cbiAgLy8gSW50ZXJuYWwgaGVscGVyIGZ1bmN0aW9uIGZvciBSdXNzaWFuIGFuZCBVa3JhbmlhbiBsYW5ndWFnZXMuXG4gIGZ1bmN0aW9uIGdldFNsYXZpY0Zvcm0gKGMpIHtcbiAgICBpZiAoTWF0aC5mbG9vcihjKSAhPT0gYykge1xuICAgICAgcmV0dXJuIDJcbiAgICB9IGVsc2UgaWYgKChjICUgMTAwID49IDUgJiYgYyAlIDEwMCA8PSAyMCkgfHwgKGMgJSAxMCA+PSA1ICYmIGMgJSAxMCA8PSA5KSB8fCBjICUgMTAgPT09IDApIHtcbiAgICAgIHJldHVybiAwXG4gICAgfSBlbHNlIGlmIChjICUgMTAgPT09IDEpIHtcbiAgICAgIHJldHVybiAxXG4gICAgfSBlbHNlIGlmIChjID4gMSkge1xuICAgICAgcmV0dXJuIDJcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDBcbiAgICB9XG4gIH1cblxuICAvLyBJbnRlcm5hbCBoZWxwZXIgZnVuY3Rpb24gZm9yIFNsb3ZhayBsYW5ndWFnZS5cbiAgZnVuY3Rpb24gZ2V0Q3plY2hPclNsb3Zha0Zvcm0gKGMpIHtcbiAgICBpZiAoYyA9PT0gMSkge1xuICAgICAgcmV0dXJuIDBcbiAgICB9IGVsc2UgaWYgKE1hdGguZmxvb3IoYykgIT09IGMpIHtcbiAgICAgIHJldHVybiAxXG4gICAgfSBlbHNlIGlmIChjICUgMTAgPj0gMiAmJiBjICUgMTAgPD0gNCAmJiBjICUgMTAwIDwgMTApIHtcbiAgICAgIHJldHVybiAyXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAzXG4gICAgfVxuICB9XG5cbiAgLy8gSW50ZXJuYWwgaGVscGVyIGZ1bmN0aW9uIGZvciBMaXRodWFuaWFuIGxhbmd1YWdlLlxuICBmdW5jdGlvbiBnZXRMaXRodWFuaWFuRm9ybSAoYykge1xuICAgIGlmIChjID09PSAxIHx8IChjICUgMTAgPT09IDEgJiYgYyAlIDEwMCA+IDIwKSkge1xuICAgICAgcmV0dXJuIDBcbiAgICB9IGVsc2UgaWYgKE1hdGguZmxvb3IoYykgIT09IGMgfHwgKGMgJSAxMCA+PSAyICYmIGMgJSAxMDAgPiAyMCkgfHwgKGMgJSAxMCA+PSAyICYmIGMgJSAxMDAgPCAxMCkpIHtcbiAgICAgIHJldHVybiAxXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAyXG4gICAgfVxuICB9XG5cbiAgLy8gSW50ZXJuYWwgaGVscGVyIGZ1bmN0aW9uIGZvciBBcmFiaWMgbGFuZ3VhZ2UuXG4gIGZ1bmN0aW9uIGdldEFyYWJpY0Zvcm0gKGMpIHtcbiAgICBpZiAoYyA8PSAyKSB7IHJldHVybiAwIH1cbiAgICBpZiAoYyA+IDIgJiYgYyA8IDExKSB7IHJldHVybiAxIH1cbiAgICByZXR1cm4gMFxuICB9XG5cbiAgaHVtYW5pemVEdXJhdGlvbi5nZXRTdXBwb3J0ZWRMYW5ndWFnZXMgPSBmdW5jdGlvbiBnZXRTdXBwb3J0ZWRMYW5ndWFnZXMgKCkge1xuICAgIHZhciByZXN1bHQgPSBbXVxuICAgIGZvciAodmFyIGxhbmd1YWdlIGluIGxhbmd1YWdlcykge1xuICAgICAgaWYgKGxhbmd1YWdlcy5oYXNPd25Qcm9wZXJ0eShsYW5ndWFnZSkgJiYgbGFuZ3VhZ2UgIT09ICdncicpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gobGFuZ3VhZ2UpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGh1bWFuaXplRHVyYXRpb24uaHVtYW5pemVyID0gaHVtYW5pemVyXG5cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gaHVtYW5pemVEdXJhdGlvblxuICAgIH0pXG4gIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGh1bWFuaXplRHVyYXRpb25cbiAgfSBlbHNlIHtcbiAgICB0aGlzLmh1bWFuaXplRHVyYXRpb24gPSBodW1hbml6ZUR1cmF0aW9uXG4gIH1cbn0pKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgc2VtaVxuIiwidmFyIHNwbGl0ID0gcmVxdWlyZSgnYnJvd3Nlci1zcGxpdCcpXG52YXIgQ2xhc3NMaXN0ID0gcmVxdWlyZSgnY2xhc3MtbGlzdCcpXG5cbnZhciB3ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyByZXF1aXJlKCdodG1sLWVsZW1lbnQnKSA6IHdpbmRvd1xudmFyIGRvY3VtZW50ID0gdy5kb2N1bWVudFxudmFyIFRleHQgPSB3LlRleHRcblxuZnVuY3Rpb24gY29udGV4dCAoKSB7XG5cbiAgdmFyIGNsZWFudXBGdW5jcyA9IFtdXG5cbiAgZnVuY3Rpb24gaCgpIHtcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSwgZSA9IG51bGxcbiAgICBmdW5jdGlvbiBpdGVtIChsKSB7XG4gICAgICB2YXIgclxuICAgICAgZnVuY3Rpb24gcGFyc2VDbGFzcyAoc3RyaW5nKSB7XG4gICAgICAgIC8vIE91ciBtaW5pbWFsIHBhcnNlciBkb2VzbuKAmXQgdW5kZXJzdGFuZCBlc2NhcGluZyBDU1Mgc3BlY2lhbFxuICAgICAgICAvLyBjaGFyYWN0ZXJzIGxpa2UgYCNgLiBEb27igJl0IHVzZSB0aGVtLiBNb3JlIHJlYWRpbmc6XG4gICAgICAgIC8vIGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9jc3MtZXNjYXBlcyAuXG5cbiAgICAgICAgdmFyIG0gPSBzcGxpdChzdHJpbmcsIC8oW1xcLiNdP1teXFxzIy5dKykvKVxuICAgICAgICBpZigvXlxcLnwjLy50ZXN0KG1bMV0pKVxuICAgICAgICAgIGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICBmb3JFYWNoKG0sIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgdmFyIHMgPSB2LnN1YnN0cmluZygxLHYubGVuZ3RoKVxuICAgICAgICAgIGlmKCF2KSByZXR1cm5cbiAgICAgICAgICBpZighZSlcbiAgICAgICAgICAgIGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHYpXG4gICAgICAgICAgZWxzZSBpZiAodlswXSA9PT0gJy4nKVxuICAgICAgICAgICAgQ2xhc3NMaXN0KGUpLmFkZChzKVxuICAgICAgICAgIGVsc2UgaWYgKHZbMF0gPT09ICcjJylcbiAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKCdpZCcsIHMpXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmKGwgPT0gbnVsbClcbiAgICAgICAgO1xuICAgICAgZWxzZSBpZignc3RyaW5nJyA9PT0gdHlwZW9mIGwpIHtcbiAgICAgICAgaWYoIWUpXG4gICAgICAgICAgcGFyc2VDbGFzcyhsKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgZS5hcHBlbmRDaGlsZChyID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobCkpXG4gICAgICB9XG4gICAgICBlbHNlIGlmKCdudW1iZXInID09PSB0eXBlb2YgbFxuICAgICAgICB8fCAnYm9vbGVhbicgPT09IHR5cGVvZiBsXG4gICAgICAgIHx8IGwgaW5zdGFuY2VvZiBEYXRlXG4gICAgICAgIHx8IGwgaW5zdGFuY2VvZiBSZWdFeHAgKSB7XG4gICAgICAgICAgZS5hcHBlbmRDaGlsZChyID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobC50b1N0cmluZygpKSlcbiAgICAgIH1cbiAgICAgIC8vdGhlcmUgbWlnaHQgYmUgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzLi4uXG4gICAgICBlbHNlIGlmIChpc0FycmF5KGwpKVxuICAgICAgICBmb3JFYWNoKGwsIGl0ZW0pXG4gICAgICBlbHNlIGlmKGlzTm9kZShsKSlcbiAgICAgICAgZS5hcHBlbmRDaGlsZChyID0gbClcbiAgICAgIGVsc2UgaWYobCBpbnN0YW5jZW9mIFRleHQpXG4gICAgICAgIGUuYXBwZW5kQ2hpbGQociA9IGwpXG4gICAgICBlbHNlIGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIGwpIHtcbiAgICAgICAgZm9yICh2YXIgayBpbiBsKSB7XG4gICAgICAgICAgaWYoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGxba10pIHtcbiAgICAgICAgICAgIGlmKC9eb25cXHcrLy50ZXN0KGspKSB7XG4gICAgICAgICAgICAgIChmdW5jdGlvbiAoaywgbCkgeyAvLyBjYXB0dXJlIGssIGwgaW4gdGhlIGNsb3N1cmVcbiAgICAgICAgICAgICAgICBpZiAoZS5hZGRFdmVudExpc3RlbmVyKXtcbiAgICAgICAgICAgICAgICAgIGUuYWRkRXZlbnRMaXN0ZW5lcihrLnN1YnN0cmluZygyKSwgbFtrXSwgZmFsc2UpXG4gICAgICAgICAgICAgICAgICBjbGVhbnVwRnVuY3MucHVzaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBlLnJlbW92ZUV2ZW50TGlzdGVuZXIoay5zdWJzdHJpbmcoMiksIGxba10sIGZhbHNlKVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgIGUuYXR0YWNoRXZlbnQoaywgbFtrXSlcbiAgICAgICAgICAgICAgICAgIGNsZWFudXBGdW5jcy5wdXNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGUuZGV0YWNoRXZlbnQoaywgbFtrXSlcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KShrLCBsKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gb2JzZXJ2YWJsZVxuICAgICAgICAgICAgICBlW2tdID0gbFtrXSgpXG4gICAgICAgICAgICAgIGNsZWFudXBGdW5jcy5wdXNoKGxba10oZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICBlW2tdID0gdlxuICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZihrID09PSAnc3R5bGUnKSB7XG4gICAgICAgICAgICBpZignc3RyaW5nJyA9PT0gdHlwZW9mIGxba10pIHtcbiAgICAgICAgICAgICAgZS5zdHlsZS5jc3NUZXh0ID0gbFtrXVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgIGZvciAodmFyIHMgaW4gbFtrXSkgKGZ1bmN0aW9uKHMsIHYpIHtcbiAgICAgICAgICAgICAgICBpZignZnVuY3Rpb24nID09PSB0eXBlb2Ygdikge1xuICAgICAgICAgICAgICAgICAgLy8gb2JzZXJ2YWJsZVxuICAgICAgICAgICAgICAgICAgZS5zdHlsZS5zZXRQcm9wZXJ0eShzLCB2KCkpXG4gICAgICAgICAgICAgICAgICBjbGVhbnVwRnVuY3MucHVzaCh2KGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5zdHlsZS5zZXRQcm9wZXJ0eShzLCB2YWwpXG4gICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IGxba11bc10ubWF0Y2goLyguKilcXFcrIWltcG9ydGFudFxcVyokLyk7XG4gICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5zdHlsZS5zZXRQcm9wZXJ0eShzLCBtYXRjaFsxXSwgJ2ltcG9ydGFudCcpXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlLnN0eWxlLnNldFByb3BlcnR5KHMsIGxba11bc10pXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pKHMsIGxba11bc10pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmKGsgPT09ICdhdHRycycpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHYgaW4gbFtrXSkge1xuICAgICAgICAgICAgICBlLnNldEF0dHJpYnV0ZSh2LCBsW2tdW3ZdKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChrLnN1YnN0cigwLCA1KSA9PT0gXCJkYXRhLVwiKSB7XG4gICAgICAgICAgICBlLnNldEF0dHJpYnV0ZShrLCBsW2tdKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlW2tdID0gbFtrXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgbCkge1xuICAgICAgICAvL2Fzc3VtZSBpdCdzIGFuIG9ic2VydmFibGUhXG4gICAgICAgIHZhciB2ID0gbCgpXG4gICAgICAgIGUuYXBwZW5kQ2hpbGQociA9IGlzTm9kZSh2KSA/IHYgOiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2KSlcblxuICAgICAgICBjbGVhbnVwRnVuY3MucHVzaChsKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgaWYoaXNOb2RlKHYpICYmIHIucGFyZW50RWxlbWVudClcbiAgICAgICAgICAgIHIucGFyZW50RWxlbWVudC5yZXBsYWNlQ2hpbGQodiwgciksIHIgPSB2XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgci50ZXh0Q29udGVudCA9IHZcbiAgICAgICAgfSkpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiByXG4gICAgfVxuICAgIHdoaWxlKGFyZ3MubGVuZ3RoKVxuICAgICAgaXRlbShhcmdzLnNoaWZ0KCkpXG5cbiAgICByZXR1cm4gZVxuICB9XG5cbiAgaC5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xlYW51cEZ1bmNzLmxlbmd0aDsgaSsrKXtcbiAgICAgIGNsZWFudXBGdW5jc1tpXSgpXG4gICAgfVxuICAgIGNsZWFudXBGdW5jcy5sZW5ndGggPSAwXG4gIH1cblxuICByZXR1cm4gaFxufVxuXG52YXIgaCA9IG1vZHVsZS5leHBvcnRzID0gY29udGV4dCgpXG5oLmNvbnRleHQgPSBjb250ZXh0XG5cbmZ1bmN0aW9uIGlzTm9kZSAoZWwpIHtcbiAgcmV0dXJuIGVsICYmIGVsLm5vZGVOYW1lICYmIGVsLm5vZGVUeXBlXG59XG5cbmZ1bmN0aW9uIGZvckVhY2ggKGFyciwgZm4pIHtcbiAgaWYgKGFyci5mb3JFYWNoKSByZXR1cm4gYXJyLmZvckVhY2goZm4pXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSBmbihhcnJbaV0sIGkpXG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkgKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJ1xufVxuXG5cbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiXG52YXIgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyLCBvYmope1xuICBpZiAoaW5kZXhPZikgcmV0dXJuIGFyci5pbmRleE9mKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGFycltpXSA9PT0gb2JqKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59OyIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuIiwidmFyIGNvbnRhaW5lcnMgPSBbXTsgLy8gd2lsbCBzdG9yZSBjb250YWluZXIgSFRNTEVsZW1lbnQgcmVmZXJlbmNlc1xudmFyIHN0eWxlRWxlbWVudHMgPSBbXTsgLy8gd2lsbCBzdG9yZSB7cHJlcGVuZDogSFRNTEVsZW1lbnQsIGFwcGVuZDogSFRNTEVsZW1lbnR9XG5cbnZhciB1c2FnZSA9ICdpbnNlcnQtY3NzOiBZb3UgbmVlZCB0byBwcm92aWRlIGEgQ1NTIHN0cmluZy4gVXNhZ2U6IGluc2VydENzcyhjc3NTdHJpbmdbLCBvcHRpb25zXSkuJztcblxuZnVuY3Rpb24gaW5zZXJ0Q3NzKGNzcywgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKGNzcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcih1c2FnZSk7XG4gICAgfVxuXG4gICAgdmFyIHBvc2l0aW9uID0gb3B0aW9ucy5wcmVwZW5kID09PSB0cnVlID8gJ3ByZXBlbmQnIDogJ2FwcGVuZCc7XG4gICAgdmFyIGNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNvbnRhaW5lciA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKTtcbiAgICB2YXIgY29udGFpbmVySWQgPSBjb250YWluZXJzLmluZGV4T2YoY29udGFpbmVyKTtcblxuICAgIC8vIGZpcnN0IHRpbWUgd2Ugc2VlIHRoaXMgY29udGFpbmVyLCBjcmVhdGUgdGhlIG5lY2Vzc2FyeSBlbnRyaWVzXG4gICAgaWYgKGNvbnRhaW5lcklkID09PSAtMSkge1xuICAgICAgICBjb250YWluZXJJZCA9IGNvbnRhaW5lcnMucHVzaChjb250YWluZXIpIC0gMTtcbiAgICAgICAgc3R5bGVFbGVtZW50c1tjb250YWluZXJJZF0gPSB7fTtcbiAgICB9XG5cbiAgICAvLyB0cnkgdG8gZ2V0IHRoZSBjb3JyZXBvbmRpbmcgY29udGFpbmVyICsgcG9zaXRpb24gc3R5bGVFbGVtZW50LCBjcmVhdGUgaXQgb3RoZXJ3aXNlXG4gICAgdmFyIHN0eWxlRWxlbWVudDtcblxuICAgIGlmIChzdHlsZUVsZW1lbnRzW2NvbnRhaW5lcklkXSAhPT0gdW5kZWZpbmVkICYmIHN0eWxlRWxlbWVudHNbY29udGFpbmVySWRdW3Bvc2l0aW9uXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN0eWxlRWxlbWVudCA9IHN0eWxlRWxlbWVudHNbY29udGFpbmVySWRdW3Bvc2l0aW9uXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdHlsZUVsZW1lbnQgPSBzdHlsZUVsZW1lbnRzW2NvbnRhaW5lcklkXVtwb3NpdGlvbl0gPSBjcmVhdGVTdHlsZUVsZW1lbnQoKTtcblxuICAgICAgICBpZiAocG9zaXRpb24gPT09ICdwcmVwZW5kJykge1xuICAgICAgICAgICAgY29udGFpbmVyLmluc2VydEJlZm9yZShzdHlsZUVsZW1lbnQsIGNvbnRhaW5lci5jaGlsZE5vZGVzWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gc3RyaXAgcG90ZW50aWFsIFVURi04IEJPTSBpZiBjc3Mgd2FzIHJlYWQgZnJvbSBhIGZpbGVcbiAgICBpZiAoY3NzLmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikgeyBjc3MgPSBjc3Muc3Vic3RyKDEsIGNzcy5sZW5ndGgpOyB9XG5cbiAgICAvLyBhY3R1YWxseSBhZGQgdGhlIHN0eWxlc2hlZXRcbiAgICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICAgICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCArPSBjc3NcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdHlsZUVsZW1lbnQudGV4dENvbnRlbnQgKz0gY3NzO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZUVsZW1lbnQ7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQoKSB7XG4gICAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2NzcycpO1xuICAgIHJldHVybiBzdHlsZUVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0Q3NzO1xubW9kdWxlLmV4cG9ydHMuaW5zZXJ0Q3NzID0gaW5zZXJ0Q3NzO1xuIiwiLyohIG5wbS5pbS9pbnRlcnZhbG9tZXRlciAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBpbnRlcnZhbG9tZXRlcihjYiwgcmVxdWVzdCwgY2FuY2VsLCByZXF1ZXN0UGFyYW1ldGVyKSB7XG5cdHZhciByZXF1ZXN0SWQ7XG5cdHZhciBwcmV2aW91c0xvb3BUaW1lO1xuXHRmdW5jdGlvbiBsb29wKG5vdykge1xuXHRcdC8vIG11c3QgYmUgcmVxdWVzdGVkIGJlZm9yZSBjYigpIGJlY2F1c2UgdGhhdCBtaWdodCBjYWxsIC5zdG9wKClcblx0XHRyZXF1ZXN0SWQgPSByZXF1ZXN0KGxvb3AsIHJlcXVlc3RQYXJhbWV0ZXIpO1xuXG5cdFx0Ly8gY2FsbGVkIHdpdGggXCJtcyBzaW5jZSBsYXN0IGNhbGxcIi4gMCBvbiBzdGFydCgpXG5cdFx0Y2Iobm93IC0gKHByZXZpb3VzTG9vcFRpbWUgfHwgbm93KSk7XG5cblx0XHRwcmV2aW91c0xvb3BUaW1lID0gbm93O1xuXHR9XG5cdHJldHVybiB7XG5cdFx0c3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KCkge1xuXHRcdFx0aWYgKCFyZXF1ZXN0SWQpIHsgLy8gcHJldmVudCBkb3VibGUgc3RhcnRzXG5cdFx0XHRcdGxvb3AoMCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuXHRcdFx0Y2FuY2VsKHJlcXVlc3RJZCk7XG5cdFx0XHRyZXF1ZXN0SWQgPSBudWxsO1xuXHRcdFx0cHJldmlvdXNMb29wVGltZSA9IDA7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBmcmFtZUludGVydmFsb21ldGVyKGNiKSB7XG5cdHJldHVybiBpbnRlcnZhbG9tZXRlcihjYiwgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLCBjYW5jZWxBbmltYXRpb25GcmFtZSk7XG59XG5cbmZ1bmN0aW9uIHRpbWVySW50ZXJ2YWxvbWV0ZXIoY2IsIGRlbGF5KSB7XG5cdHJldHVybiBpbnRlcnZhbG9tZXRlcihjYiwgc2V0VGltZW91dCwgY2xlYXJUaW1lb3V0LCBkZWxheSk7XG59XG5cbmV4cG9ydHMuaW50ZXJ2YWxvbWV0ZXIgPSBpbnRlcnZhbG9tZXRlcjtcbmV4cG9ydHMuZnJhbWVJbnRlcnZhbG9tZXRlciA9IGZyYW1lSW50ZXJ2YWxvbWV0ZXI7XG5leHBvcnRzLnRpbWVySW50ZXJ2YWxvbWV0ZXIgPSB0aW1lckludGVydmFsb21ldGVyOyIsIi8qISBucG0uaW0vaXBob25lLWlubGluZS12aWRlbyAyLjIuMiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW50ZXJ2YWxvbWV0ZXIgPSByZXF1aXJlKCdpbnRlcnZhbG9tZXRlcicpO1xuXG5mdW5jdGlvbiBwcmV2ZW50RXZlbnQoZWxlbWVudCwgZXZlbnROYW1lLCB0ZXN0KSB7XG5cdGZ1bmN0aW9uIGhhbmRsZXIoZSkge1xuXHRcdGlmICghdGVzdCB8fCB0ZXN0KGVsZW1lbnQsIGV2ZW50TmFtZSkpIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHQvLyAvLyBjb25zb2xlLmxvZyhldmVudE5hbWUsICdwcmV2ZW50ZWQgb24nLCBlbGVtZW50KTtcblx0XHR9XG5cdH1cblx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcik7XG5cblx0Ly8gUmV0dXJuIGhhbmRsZXIgdG8gYWxsb3cgdG8gZGlzYWJsZSB0aGUgcHJldmVudGlvbi4gVXNhZ2U6XG5cdC8vIGNvbnN0IHByZXZlbnRpb25IYW5kbGVyID0gcHJldmVudEV2ZW50KGVsLCAnY2xpY2snKTtcblx0Ly8gZWwucmVtb3ZlRXZlbnRIYW5kbGVyKCdjbGljaycsIHByZXZlbnRpb25IYW5kbGVyKTtcblx0cmV0dXJuIGhhbmRsZXI7XG59XG5cbmZ1bmN0aW9uIHByb3h5UHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eU5hbWUsIHNvdXJjZU9iamVjdCwgY29weUZpcnN0KSB7XG5cdGZ1bmN0aW9uIGdldCgpIHtcblx0XHRyZXR1cm4gc291cmNlT2JqZWN0W3Byb3BlcnR5TmFtZV07XG5cdH1cblx0ZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG5cdFx0c291cmNlT2JqZWN0W3Byb3BlcnR5TmFtZV0gPSB2YWx1ZTtcblx0fVxuXG5cdGlmIChjb3B5Rmlyc3QpIHtcblx0XHRzZXQob2JqZWN0W3Byb3BlcnR5TmFtZV0pO1xuXHR9XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHlOYW1lLCB7Z2V0OiBnZXQsIHNldDogc2V0fSk7XG59XG5cbmZ1bmN0aW9uIHByb3h5RXZlbnQob2JqZWN0LCBldmVudE5hbWUsIHNvdXJjZU9iamVjdCkge1xuXHRzb3VyY2VPYmplY3QuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9iamVjdC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChldmVudE5hbWUpKTsgfSk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnRBc3luYyhlbGVtZW50LCB0eXBlKSB7XG5cdFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdGVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQodHlwZSkpO1xuXHR9KTtcbn1cblxudmFyIGlPUzhvcjkgPSB0eXBlb2YgZG9jdW1lbnQgPT09ICdvYmplY3QnICYmICdvYmplY3QtZml0JyBpbiBkb2N1bWVudC5oZWFkLnN0eWxlICYmICFtYXRjaE1lZGlhKCcoLXdlYmtpdC12aWRlby1wbGF5YWJsZS1pbmxpbmUpJykubWF0Y2hlcztcblxudmFyIElJViA9ICdiZnJlZC1pdDppcGhvbmUtaW5saW5lLXZpZGVvJztcbnZhciBJSVZFdmVudCA9ICdiZnJlZC1pdDppcGhvbmUtaW5saW5lLXZpZGVvOmV2ZW50JztcbnZhciBJSVZQbGF5ID0gJ2JmcmVkLWl0OmlwaG9uZS1pbmxpbmUtdmlkZW86bmF0aXZlcGxheSc7XG52YXIgSUlWUGF1c2UgPSAnYmZyZWQtaXQ6aXBob25lLWlubGluZS12aWRlbzpuYXRpdmVwYXVzZSc7XG5cbi8qKlxuICogVVRJTFNcbiAqL1xuXG5mdW5jdGlvbiBnZXRBdWRpb0Zyb21WaWRlbyh2aWRlbykge1xuXHR2YXIgYXVkaW8gPSBuZXcgQXVkaW8oKTtcblx0cHJveHlFdmVudCh2aWRlbywgJ3BsYXknLCBhdWRpbyk7XG5cdHByb3h5RXZlbnQodmlkZW8sICdwbGF5aW5nJywgYXVkaW8pO1xuXHRwcm94eUV2ZW50KHZpZGVvLCAncGF1c2UnLCBhdWRpbyk7XG5cdGF1ZGlvLmNyb3NzT3JpZ2luID0gdmlkZW8uY3Jvc3NPcmlnaW47XG5cblx0Ly8gJ2RhdGE6JyBjYXVzZXMgYXVkaW8ubmV0d29ya1N0YXRlID4gMFxuXHQvLyB3aGljaCB0aGVuIGFsbG93cyB0byBrZWVwIDxhdWRpbz4gaW4gYSByZXN1bWFibGUgcGxheWluZyBzdGF0ZVxuXHQvLyBpLmUuIG9uY2UgeW91IHNldCBhIHJlYWwgc3JjIGl0IHdpbGwga2VlcCBwbGF5aW5nIGlmIGl0IHdhcyBpZiAucGxheSgpIHdhcyBjYWxsZWRcblx0YXVkaW8uc3JjID0gdmlkZW8uc3JjIHx8IHZpZGVvLmN1cnJlbnRTcmMgfHwgJ2RhdGE6JztcblxuXHQvLyAvLyBpZiAoYXVkaW8uc3JjID09PSAnZGF0YTonKSB7XG5cdC8vICAgVE9ETzogd2FpdCBmb3IgdmlkZW8gdG8gYmUgc2VsZWN0ZWRcblx0Ly8gLy8gfVxuXHRyZXR1cm4gYXVkaW87XG59XG5cbnZhciBsYXN0UmVxdWVzdHMgPSBbXTtcbnZhciByZXF1ZXN0SW5kZXggPSAwO1xudmFyIGxhc3RUaW1ldXBkYXRlRXZlbnQ7XG5cbmZ1bmN0aW9uIHNldFRpbWUodmlkZW8sIHRpbWUsIHJlbWVtYmVyT25seSkge1xuXHQvLyBBbGxvdyBvbmUgdGltZXVwZGF0ZSBldmVudCBldmVyeSAyMDArIG1zXG5cdGlmICgobGFzdFRpbWV1cGRhdGVFdmVudCB8fCAwKSArIDIwMCA8IERhdGUubm93KCkpIHtcblx0XHR2aWRlb1tJSVZFdmVudF0gPSB0cnVlO1xuXHRcdGxhc3RUaW1ldXBkYXRlRXZlbnQgPSBEYXRlLm5vdygpO1xuXHR9XG5cdGlmICghcmVtZW1iZXJPbmx5KSB7XG5cdFx0dmlkZW8uY3VycmVudFRpbWUgPSB0aW1lO1xuXHR9XG5cdGxhc3RSZXF1ZXN0c1srK3JlcXVlc3RJbmRleCAlIDNdID0gdGltZSAqIDEwMCB8IDAgLyAxMDA7XG59XG5cbmZ1bmN0aW9uIGlzUGxheWVyRW5kZWQocGxheWVyKSB7XG5cdHJldHVybiBwbGF5ZXIuZHJpdmVyLmN1cnJlbnRUaW1lID49IHBsYXllci52aWRlby5kdXJhdGlvbjtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKHRpbWVEaWZmKSB7XG5cdHZhciBwbGF5ZXIgPSB0aGlzO1xuXHQvLyAvLyBjb25zb2xlLmxvZygndXBkYXRlJywgcGxheWVyLnZpZGVvLnJlYWR5U3RhdGUsIHBsYXllci52aWRlby5uZXR3b3JrU3RhdGUsIHBsYXllci5kcml2ZXIucmVhZHlTdGF0ZSwgcGxheWVyLmRyaXZlci5uZXR3b3JrU3RhdGUsIHBsYXllci5kcml2ZXIucGF1c2VkKTtcblx0aWYgKHBsYXllci52aWRlby5yZWFkeVN0YXRlID49IHBsYXllci52aWRlby5IQVZFX0ZVVFVSRV9EQVRBKSB7XG5cdFx0aWYgKCFwbGF5ZXIuaGFzQXVkaW8pIHtcblx0XHRcdHBsYXllci5kcml2ZXIuY3VycmVudFRpbWUgPSBwbGF5ZXIudmlkZW8uY3VycmVudFRpbWUgKyAoKHRpbWVEaWZmICogcGxheWVyLnZpZGVvLnBsYXliYWNrUmF0ZSkgLyAxMDAwKTtcblx0XHRcdGlmIChwbGF5ZXIudmlkZW8ubG9vcCAmJiBpc1BsYXllckVuZGVkKHBsYXllcikpIHtcblx0XHRcdFx0cGxheWVyLmRyaXZlci5jdXJyZW50VGltZSA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHNldFRpbWUocGxheWVyLnZpZGVvLCBwbGF5ZXIuZHJpdmVyLmN1cnJlbnRUaW1lKTtcblx0fSBlbHNlIGlmIChwbGF5ZXIudmlkZW8ubmV0d29ya1N0YXRlID09PSBwbGF5ZXIudmlkZW8uTkVUV09SS19JRExFICYmIHBsYXllci52aWRlby5idWZmZXJlZC5sZW5ndGggPT09IDApIHtcblx0XHQvLyBUaGlzIHNob3VsZCBoYXBwZW4gd2hlbiB0aGUgc291cmNlIGlzIGF2YWlsYWJsZSBidXQ6XG5cdFx0Ly8gLSBpdCdzIHBvdGVudGlhbGx5IHBsYXlpbmcgKC5wYXVzZWQgPT09IGZhbHNlKVxuXHRcdC8vIC0gaXQncyBub3QgcmVhZHkgdG8gcGxheVxuXHRcdC8vIC0gaXQncyBub3QgbG9hZGluZ1xuXHRcdC8vIElmIGl0IGhhc0F1ZGlvLCB0aGF0IHdpbGwgYmUgbG9hZGVkIGluIHRoZSAnZW1wdGllZCcgaGFuZGxlciBiZWxvd1xuXHRcdHBsYXllci52aWRlby5sb2FkKCk7XG5cdFx0Ly8gLy8gY29uc29sZS5sb2coJ1dpbGwgbG9hZCcpO1xuXHR9XG5cblx0Ly8gLy8gY29uc29sZS5hc3NlcnQocGxheWVyLnZpZGVvLmN1cnJlbnRUaW1lID09PSBwbGF5ZXIuZHJpdmVyLmN1cnJlbnRUaW1lLCAnVmlkZW8gbm90IHVwZGF0aW5nIScpO1xuXG5cdGlmIChwbGF5ZXIudmlkZW8uZW5kZWQpIHtcblx0XHRkZWxldGUgcGxheWVyLnZpZGVvW0lJVkV2ZW50XTsgLy8gQWxsb3cgdGltZXVwZGF0ZSBldmVudFxuXHRcdHBsYXllci52aWRlby5wYXVzZSh0cnVlKTtcblx0fVxufVxuXG4vKipcbiAqIE1FVEhPRFNcbiAqL1xuXG5mdW5jdGlvbiBwbGF5KCkge1xuXHQvLyAvLyBjb25zb2xlLmxvZygncGxheScpO1xuXHR2YXIgdmlkZW8gPSB0aGlzO1xuXHR2YXIgcGxheWVyID0gdmlkZW9bSUlWXTtcblxuXHQvLyBJZiBpdCdzIGZ1bGxzY3JlZW4sIHVzZSB0aGUgbmF0aXZlIHBsYXllclxuXHRpZiAodmlkZW8ud2Via2l0RGlzcGxheWluZ0Z1bGxzY3JlZW4pIHtcblx0XHR2aWRlb1tJSVZQbGF5XSgpO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmIChwbGF5ZXIuZHJpdmVyLnNyYyAhPT0gJ2RhdGE6JyAmJiBwbGF5ZXIuZHJpdmVyLnNyYyAhPT0gdmlkZW8uc3JjKSB7XG5cdFx0Ly8gLy8gY29uc29sZS5sb2coJ3NyYyBjaGFuZ2VkIG9uIHBsYXknLCB2aWRlby5zcmMpO1xuXHRcdHNldFRpbWUodmlkZW8sIDAsIHRydWUpO1xuXHRcdHBsYXllci5kcml2ZXIuc3JjID0gdmlkZW8uc3JjO1xuXHR9XG5cblx0aWYgKCF2aWRlby5wYXVzZWQpIHtcblx0XHRyZXR1cm47XG5cdH1cblx0cGxheWVyLnBhdXNlZCA9IGZhbHNlO1xuXG5cdGlmICh2aWRlby5idWZmZXJlZC5sZW5ndGggPT09IDApIHtcblx0XHQvLyAubG9hZCgpIGNhdXNlcyB0aGUgZW1wdGllZCBldmVudFxuXHRcdC8vIHRoZSBhbHRlcm5hdGl2ZSBpcyAucGxheSgpKy5wYXVzZSgpIGJ1dCB0aGF0IHRyaWdnZXJzIHBsYXkvcGF1c2UgZXZlbnRzLCBldmVuIHdvcnNlXG5cdFx0Ly8gcG9zc2libHkgdGhlIGFsdGVybmF0aXZlIGlzIHByZXZlbnRpbmcgdGhpcyBldmVudCBvbmx5IG9uY2Vcblx0XHR2aWRlby5sb2FkKCk7XG5cdH1cblxuXHRwbGF5ZXIuZHJpdmVyLnBsYXkoKTtcblx0cGxheWVyLnVwZGF0ZXIuc3RhcnQoKTtcblxuXHRpZiAoIXBsYXllci5oYXNBdWRpbykge1xuXHRcdGRpc3BhdGNoRXZlbnRBc3luYyh2aWRlbywgJ3BsYXknKTtcblx0XHRpZiAocGxheWVyLnZpZGVvLnJlYWR5U3RhdGUgPj0gcGxheWVyLnZpZGVvLkhBVkVfRU5PVUdIX0RBVEEpIHtcblx0XHRcdC8vIC8vIGNvbnNvbGUubG9nKCdvbnBsYXknKTtcblx0XHRcdGRpc3BhdGNoRXZlbnRBc3luYyh2aWRlbywgJ3BsYXlpbmcnKTtcblx0XHR9XG5cdH1cbn1cbmZ1bmN0aW9uIHBhdXNlKGZvcmNlRXZlbnRzKSB7XG5cdC8vIC8vIGNvbnNvbGUubG9nKCdwYXVzZScpO1xuXHR2YXIgdmlkZW8gPSB0aGlzO1xuXHR2YXIgcGxheWVyID0gdmlkZW9bSUlWXTtcblxuXHRwbGF5ZXIuZHJpdmVyLnBhdXNlKCk7XG5cdHBsYXllci51cGRhdGVyLnN0b3AoKTtcblxuXHQvLyBJZiBpdCdzIGZ1bGxzY3JlZW4sIHRoZSBkZXZlbG9wZXIgdGhlIG5hdGl2ZSBwbGF5ZXIucGF1c2UoKVxuXHQvLyBUaGlzIGlzIGF0IHRoZSBlbmQgb2YgcGF1c2UoKSBiZWNhdXNlIGl0IGFsc29cblx0Ly8gbmVlZHMgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIHNpbXVsYXRpb24gaXMgcGF1c2VkXG5cdGlmICh2aWRlby53ZWJraXREaXNwbGF5aW5nRnVsbHNjcmVlbikge1xuXHRcdHZpZGVvW0lJVlBhdXNlXSgpO1xuXHR9XG5cblx0aWYgKHBsYXllci5wYXVzZWQgJiYgIWZvcmNlRXZlbnRzKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0cGxheWVyLnBhdXNlZCA9IHRydWU7XG5cdGlmICghcGxheWVyLmhhc0F1ZGlvKSB7XG5cdFx0ZGlzcGF0Y2hFdmVudEFzeW5jKHZpZGVvLCAncGF1c2UnKTtcblx0fVxuXG5cdC8vIEhhbmRsZSB0aGUgJ2VuZGVkJyBldmVudCBvbmx5IGlmIGl0J3Mgbm90IGZ1bGxzY3JlZW5cblx0aWYgKHZpZGVvLmVuZGVkICYmICF2aWRlby53ZWJraXREaXNwbGF5aW5nRnVsbHNjcmVlbikge1xuXHRcdHZpZGVvW0lJVkV2ZW50XSA9IHRydWU7XG5cdFx0ZGlzcGF0Y2hFdmVudEFzeW5jKHZpZGVvLCAnZW5kZWQnKTtcblx0fVxufVxuXG4vKipcbiAqIFNFVFVQXG4gKi9cblxuZnVuY3Rpb24gYWRkUGxheWVyKHZpZGVvLCBoYXNBdWRpbykge1xuXHR2YXIgcGxheWVyID0ge307XG5cdHZpZGVvW0lJVl0gPSBwbGF5ZXI7XG5cdHBsYXllci5wYXVzZWQgPSB0cnVlOyAvLyBUcmFjayB3aGV0aGVyICdwYXVzZScgZXZlbnRzIGhhdmUgYmVlbiBmaXJlZFxuXHRwbGF5ZXIuaGFzQXVkaW8gPSBoYXNBdWRpbztcblx0cGxheWVyLnZpZGVvID0gdmlkZW87XG5cdHBsYXllci51cGRhdGVyID0gaW50ZXJ2YWxvbWV0ZXIuZnJhbWVJbnRlcnZhbG9tZXRlcih1cGRhdGUuYmluZChwbGF5ZXIpKTtcblxuXHRpZiAoaGFzQXVkaW8pIHtcblx0XHRwbGF5ZXIuZHJpdmVyID0gZ2V0QXVkaW9Gcm9tVmlkZW8odmlkZW8pO1xuXHR9IGVsc2Uge1xuXHRcdHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbnBsYXknLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAoIXZpZGVvLnBhdXNlZCkge1xuXHRcdFx0XHQvLyAvLyBjb25zb2xlLmxvZygnb25jYW5wbGF5Jyk7XG5cdFx0XHRcdGRpc3BhdGNoRXZlbnRBc3luYyh2aWRlbywgJ3BsYXlpbmcnKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRwbGF5ZXIuZHJpdmVyID0ge1xuXHRcdFx0c3JjOiB2aWRlby5zcmMgfHwgdmlkZW8uY3VycmVudFNyYyB8fCAnZGF0YTonLFxuXHRcdFx0bXV0ZWQ6IHRydWUsXG5cdFx0XHRwYXVzZWQ6IHRydWUsXG5cdFx0XHRwYXVzZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRwbGF5ZXIuZHJpdmVyLnBhdXNlZCA9IHRydWU7XG5cdFx0XHR9LFxuXHRcdFx0cGxheTogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRwbGF5ZXIuZHJpdmVyLnBhdXNlZCA9IGZhbHNlO1xuXHRcdFx0XHQvLyBNZWRpYSBhdXRvbWF0aWNhbGx5IGdvZXMgdG8gMCBpZiAucGxheSgpIGlzIGNhbGxlZCB3aGVuIGl0J3MgZG9uZVxuXHRcdFx0XHRpZiAoaXNQbGF5ZXJFbmRlZChwbGF5ZXIpKSB7XG5cdFx0XHRcdFx0c2V0VGltZSh2aWRlbywgMCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRnZXQgZW5kZWQoKSB7XG5cdFx0XHRcdHJldHVybiBpc1BsYXllckVuZGVkKHBsYXllcik7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIC5sb2FkKCkgY2F1c2VzIHRoZSBlbXB0aWVkIGV2ZW50XG5cdHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2VtcHRpZWQnLCBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gLy8gY29uc29sZS5sb2coJ2RyaXZlciBzcmMgaXMnLCBwbGF5ZXIuZHJpdmVyLnNyYyk7XG5cdFx0dmFyIHdhc0VtcHR5ID0gIXBsYXllci5kcml2ZXIuc3JjIHx8IHBsYXllci5kcml2ZXIuc3JjID09PSAnZGF0YTonO1xuXHRcdGlmIChwbGF5ZXIuZHJpdmVyLnNyYyAmJiBwbGF5ZXIuZHJpdmVyLnNyYyAhPT0gdmlkZW8uc3JjKSB7XG5cdFx0XHQvLyAvLyBjb25zb2xlLmxvZygnc3JjIGNoYW5nZWQgdG8nLCB2aWRlby5zcmMpO1xuXHRcdFx0c2V0VGltZSh2aWRlbywgMCwgdHJ1ZSk7XG5cdFx0XHRwbGF5ZXIuZHJpdmVyLnNyYyA9IHZpZGVvLnNyYztcblx0XHRcdC8vIFBsYXlpbmcgdmlkZW9zIHdpbGwgb25seSBrZWVwIHBsYXlpbmcgaWYgbm8gc3JjIHdhcyBwcmVzZW50IHdoZW4gLnBsYXkoKeKAmWVkXG5cdFx0XHRpZiAod2FzRW1wdHkgfHwgKCFoYXNBdWRpbyAmJiB2aWRlby5hdXRvcGxheSkpIHtcblx0XHRcdFx0cGxheWVyLmRyaXZlci5wbGF5KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwbGF5ZXIudXBkYXRlci5zdG9wKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LCBmYWxzZSk7XG5cblx0Ly8gU3RvcCBwcm9ncmFtbWF0aWMgcGxheWVyIHdoZW4gT1MgdGFrZXMgb3ZlclxuXHR2aWRlby5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRiZWdpbmZ1bGxzY3JlZW4nLCBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKCF2aWRlby5wYXVzZWQpIHtcblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSA8YXVkaW8+IGFuZCB0aGUgc3luY2VyL3VwZGF0ZXIgYXJlIHN0b3BwZWRcblx0XHRcdHZpZGVvLnBhdXNlKCk7XG5cblx0XHRcdC8vIFBsYXkgdmlkZW8gbmF0aXZlbHlcblx0XHRcdHZpZGVvW0lJVlBsYXldKCk7XG5cdFx0fSBlbHNlIGlmIChoYXNBdWRpbyAmJiBwbGF5ZXIuZHJpdmVyLmJ1ZmZlcmVkLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0Ly8gSWYgdGhlIGZpcnN0IHBsYXkgaXMgbmF0aXZlLFxuXHRcdFx0Ly8gdGhlIDxhdWRpbz4gbmVlZHMgdG8gYmUgYnVmZmVyZWQgbWFudWFsbHlcblx0XHRcdC8vIHNvIHdoZW4gdGhlIGZ1bGxzY3JlZW4gZW5kcywgaXQgY2FuIGJlIHNldCB0byB0aGUgc2FtZSBjdXJyZW50IHRpbWVcblx0XHRcdHBsYXllci5kcml2ZXIubG9hZCgpO1xuXHRcdH1cblx0fSk7XG5cdGlmIChoYXNBdWRpbykge1xuXHRcdHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdGVuZGZ1bGxzY3JlZW4nLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHQvLyBTeW5jIGF1ZGlvIHRvIG5ldyB2aWRlbyBwb3NpdGlvblxuXHRcdFx0cGxheWVyLmRyaXZlci5jdXJyZW50VGltZSA9IHZpZGVvLmN1cnJlbnRUaW1lO1xuXHRcdFx0Ly8gLy8gY29uc29sZS5hc3NlcnQocGxheWVyLmRyaXZlci5jdXJyZW50VGltZSA9PT0gdmlkZW8uY3VycmVudFRpbWUsICdBdWRpbyBub3Qgc3luY2VkJyk7XG5cdFx0fSk7XG5cblx0XHQvLyBBbGxvdyBzZWVraW5nXG5cdFx0dmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignc2Vla2luZycsIGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChsYXN0UmVxdWVzdHMuaW5kZXhPZih2aWRlby5jdXJyZW50VGltZSAqIDEwMCB8IDAgLyAxMDApIDwgMCkge1xuXHRcdFx0XHQvLyAvLyBjb25zb2xlLmxvZygnVXNlci1yZXF1ZXN0ZWQgc2Vla2luZycpO1xuXHRcdFx0XHRwbGF5ZXIuZHJpdmVyLmN1cnJlbnRUaW1lID0gdmlkZW8uY3VycmVudFRpbWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJldmVudFdpdGhQcm9wT3JGdWxsc2NyZWVuKGVsKSB7XG5cdHZhciBpc0FsbG93ZWQgPSBlbFtJSVZFdmVudF07XG5cdGRlbGV0ZSBlbFtJSVZFdmVudF07XG5cdHJldHVybiAhZWwud2Via2l0RGlzcGxheWluZ0Z1bGxzY3JlZW4gJiYgIWlzQWxsb3dlZDtcbn1cblxuZnVuY3Rpb24gb3ZlcmxvYWRBUEkodmlkZW8pIHtcblx0dmFyIHBsYXllciA9IHZpZGVvW0lJVl07XG5cdHZpZGVvW0lJVlBsYXldID0gdmlkZW8ucGxheTtcblx0dmlkZW9bSUlWUGF1c2VdID0gdmlkZW8ucGF1c2U7XG5cdHZpZGVvLnBsYXkgPSBwbGF5O1xuXHR2aWRlby5wYXVzZSA9IHBhdXNlO1xuXHRwcm94eVByb3BlcnR5KHZpZGVvLCAncGF1c2VkJywgcGxheWVyLmRyaXZlcik7XG5cdHByb3h5UHJvcGVydHkodmlkZW8sICdtdXRlZCcsIHBsYXllci5kcml2ZXIsIHRydWUpO1xuXHRwcm94eVByb3BlcnR5KHZpZGVvLCAncGxheWJhY2tSYXRlJywgcGxheWVyLmRyaXZlciwgdHJ1ZSk7XG5cdHByb3h5UHJvcGVydHkodmlkZW8sICdlbmRlZCcsIHBsYXllci5kcml2ZXIpO1xuXHRwcm94eVByb3BlcnR5KHZpZGVvLCAnbG9vcCcsIHBsYXllci5kcml2ZXIsIHRydWUpO1xuXG5cdC8vIElJViB3b3JrcyBieSBzZWVraW5nIDYwIHRpbWVzIHBlciBzZWNvbmQuXG5cdC8vIFRoZXNlIGV2ZW50cyBhcmUgbm93IHVzZWxlc3MuXG5cdHByZXZlbnRFdmVudCh2aWRlbywgJ3NlZWtpbmcnLCBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICFlbC53ZWJraXREaXNwbGF5aW5nRnVsbHNjcmVlbjsgfSk7XG5cdHByZXZlbnRFdmVudCh2aWRlbywgJ3NlZWtlZCcsIGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gIWVsLndlYmtpdERpc3BsYXlpbmdGdWxsc2NyZWVuOyB9KTtcblxuXHQvLyBMaW1pdCB0aW1ldXBkYXRlIGV2ZW50c1xuXHRwcmV2ZW50RXZlbnQodmlkZW8sICd0aW1ldXBkYXRlJywgcHJldmVudFdpdGhQcm9wT3JGdWxsc2NyZWVuKTtcblxuXHQvLyBQcmV2ZW50IG9jY2FzaW9uYWwgbmF0aXZlIGVuZGVkIGV2ZW50c1xuXHRwcmV2ZW50RXZlbnQodmlkZW8sICdlbmRlZCcsIHByZXZlbnRXaXRoUHJvcE9yRnVsbHNjcmVlbik7XG59XG5cbmZ1bmN0aW9uIGVuYWJsZUlubGluZVZpZGVvKHZpZGVvLCBvcHRzKSB7XG5cdGlmICggb3B0cyA9PT0gdm9pZCAwICkgb3B0cyA9IHt9O1xuXG5cdC8vIFN0b3AgaWYgYWxyZWFkeSBlbmFibGVkXG5cdGlmICh2aWRlb1tJSVZdKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gQWxsb3cgdGhlIHVzZXIgdG8gc2tpcCBkZXRlY3Rpb25cblx0aWYgKCFvcHRzLmV2ZXJ5d2hlcmUpIHtcblx0XHQvLyBPbmx5IGlPUzggYW5kIDkgYXJlIHN1cHBvcnRlZFxuXHRcdGlmICghaU9TOG9yOSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFN0b3AgaWYgaXQncyBub3QgYW4gYWxsb3dlZCBkZXZpY2Vcblx0XHRpZiAoIShvcHRzLmlQYWQgfHwgb3B0cy5pcGFkID8gL2lQaG9uZXxpUG9kfGlQYWQvIDogL2lQaG9uZXxpUG9kLykudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXG5cdC8vIFRyeSB0byBwYXVzZVxuXHR2aWRlby5wYXVzZSgpO1xuXG5cdC8vIFByZXZlbnQgYXV0b3BsYXkuXG5cdC8vIEFuIG5vbi1zdGFydGVkIGF1dG9wbGF5aW5nIHZpZGVvIGNhbid0IGJlIC5wYXVzZSgpJ2Rcblx0dmFyIHdpbGxBdXRvcGxheSA9IHZpZGVvLmF1dG9wbGF5O1xuXHR2aWRlby5hdXRvcGxheSA9IGZhbHNlO1xuXG5cdGFkZFBsYXllcih2aWRlbywgIXZpZGVvLm11dGVkKTtcblx0b3ZlcmxvYWRBUEkodmlkZW8pO1xuXHR2aWRlby5jbGFzc0xpc3QuYWRkKCdJSVYnKTtcblxuXHQvLyBBdXRvcGxheVxuXHRpZiAodmlkZW8ubXV0ZWQgJiYgd2lsbEF1dG9wbGF5KSB7XG5cdFx0dmlkZW8ucGxheSgpO1xuXHRcdHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXlpbmcnLCBmdW5jdGlvbiByZXN0b3JlQXV0b3BsYXkoKSB7XG5cdFx0XHR2aWRlby5hdXRvcGxheSA9IHRydWU7XG5cdFx0XHR2aWRlby5yZW1vdmVFdmVudExpc3RlbmVyKCdwbGF5aW5nJywgcmVzdG9yZUF1dG9wbGF5KTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICghL2lQaG9uZXxpUG9kfGlQYWQvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSkge1xuXHRcdGNvbnNvbGUud2FybignaXBob25lLWlubGluZS12aWRlbyBpcyBub3QgZ3VhcmFudGVlZCB0byB3b3JrIGluIGVtdWxhdGVkIGVudmlyb25tZW50cycpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW5hYmxlSW5saW5lVmlkZW87XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBudW1iZXJJc05hbiA9IHJlcXVpcmUoJ251bWJlci1pcy1uYW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNGaW5pdGUgfHwgZnVuY3Rpb24gKHZhbCkge1xuXHRyZXR1cm4gISh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJyB8fCBudW1iZXJJc05hbih2YWwpIHx8IHZhbCA9PT0gSW5maW5pdHkgfHwgdmFsID09PSAtSW5maW5pdHkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gaXNQb3dlck9mVHdvXG5cbmZ1bmN0aW9uIGlzUG93ZXJPZlR3byhuKSB7XG4gIHJldHVybiBuICE9PSAwICYmIChuICYgKG4gLSAxKSkgPT09IDBcbn0iLCJtb2R1bGUuZXhwb3J0cyAgICAgID0gaXNUeXBlZEFycmF5XG5pc1R5cGVkQXJyYXkuc3RyaWN0ID0gaXNTdHJpY3RUeXBlZEFycmF5XG5pc1R5cGVkQXJyYXkubG9vc2UgID0gaXNMb29zZVR5cGVkQXJyYXlcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xudmFyIG5hbWVzID0ge1xuICAgICdbb2JqZWN0IEludDhBcnJheV0nOiB0cnVlXG4gICwgJ1tvYmplY3QgSW50MTZBcnJheV0nOiB0cnVlXG4gICwgJ1tvYmplY3QgSW50MzJBcnJheV0nOiB0cnVlXG4gICwgJ1tvYmplY3QgVWludDhBcnJheV0nOiB0cnVlXG4gICwgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IFVpbnQxNkFycmF5XSc6IHRydWVcbiAgLCAnW29iamVjdCBVaW50MzJBcnJheV0nOiB0cnVlXG4gICwgJ1tvYmplY3QgRmxvYXQzMkFycmF5XSc6IHRydWVcbiAgLCAnW29iamVjdCBGbG9hdDY0QXJyYXldJzogdHJ1ZVxufVxuXG5mdW5jdGlvbiBpc1R5cGVkQXJyYXkoYXJyKSB7XG4gIHJldHVybiAoXG4gICAgICAgaXNTdHJpY3RUeXBlZEFycmF5KGFycilcbiAgICB8fCBpc0xvb3NlVHlwZWRBcnJheShhcnIpXG4gIClcbn1cblxuZnVuY3Rpb24gaXNTdHJpY3RUeXBlZEFycmF5KGFycikge1xuICByZXR1cm4gKFxuICAgICAgIGFyciBpbnN0YW5jZW9mIEludDhBcnJheVxuICAgIHx8IGFyciBpbnN0YW5jZW9mIEludDE2QXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBJbnQzMkFycmF5XG4gICAgfHwgYXJyIGluc3RhbmNlb2YgVWludDhBcnJheVxuICAgIHx8IGFyciBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5XG4gICAgfHwgYXJyIGluc3RhbmNlb2YgVWludDE2QXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBVaW50MzJBcnJheVxuICAgIHx8IGFyciBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheVxuICAgIHx8IGFyciBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheVxuICApXG59XG5cbmZ1bmN0aW9uIGlzTG9vc2VUeXBlZEFycmF5KGFycikge1xuICByZXR1cm4gbmFtZXNbdG9TdHJpbmcuY2FsbChhcnIpXVxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhbiBlbnVtZXJhdGlvbiB3aXRoIGtleXMgZXF1YWwgdG8gdGhlaXIgdmFsdWUuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKlxuICogICB2YXIgQ09MT1JTID0ga2V5TWlycm9yKHtibHVlOiBudWxsLCByZWQ6IG51bGx9KTtcbiAqICAgdmFyIG15Q29sb3IgPSBDT0xPUlMuYmx1ZTtcbiAqICAgdmFyIGlzQ29sb3JWYWxpZCA9ICEhQ09MT1JTW215Q29sb3JdO1xuICpcbiAqIFRoZSBsYXN0IGxpbmUgY291bGQgbm90IGJlIHBlcmZvcm1lZCBpZiB0aGUgdmFsdWVzIG9mIHRoZSBnZW5lcmF0ZWQgZW51bSB3ZXJlXG4gKiBub3QgZXF1YWwgdG8gdGhlaXIga2V5cy5cbiAqXG4gKiAgIElucHV0OiAge2tleTE6IHZhbDEsIGtleTI6IHZhbDJ9XG4gKiAgIE91dHB1dDoge2tleTE6IGtleTEsIGtleTI6IGtleTJ9XG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9ialxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG52YXIga2V5TWlycm9yID0gZnVuY3Rpb24ob2JqKSB7XG4gIHZhciByZXQgPSB7fTtcbiAgdmFyIGtleTtcbiAgaWYgKCEob2JqIGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KG9iaikpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdrZXlNaXJyb3IoLi4uKTogQXJndW1lbnQgbXVzdCBiZSBhbiBvYmplY3QuJyk7XG4gIH1cbiAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgaWYgKCFvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHJldFtrZXldID0ga2V5O1xuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleU1pcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBudW1iZXJJc0Zpbml0ZSA9IHJlcXVpcmUoJ2lzLWZpbml0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE51bWJlci5pc0ludGVnZXIgfHwgZnVuY3Rpb24gKHgpIHtcblx0cmV0dXJuIG51bWJlcklzRmluaXRlKHgpICYmIE1hdGguZmxvb3IoeCkgPT09IHg7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gKHgpIHtcblx0cmV0dXJuIHggIT09IHg7XG59O1xuIiwidmFyIHdyYXBweSA9IHJlcXVpcmUoJ3dyYXBweScpXG5tb2R1bGUuZXhwb3J0cyA9IHdyYXBweShvbmNlKVxubW9kdWxlLmV4cG9ydHMuc3RyaWN0ID0gd3JhcHB5KG9uY2VTdHJpY3QpXG5cbm9uY2UucHJvdG8gPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bmN0aW9uLnByb3RvdHlwZSwgJ29uY2UnLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBvbmNlKHRoaXMpXG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSlcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVuY3Rpb24ucHJvdG90eXBlLCAnb25jZVN0cmljdCcsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG9uY2VTdHJpY3QodGhpcylcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KVxufSlcblxuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGYgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGYuY2FsbGVkKSByZXR1cm4gZi52YWx1ZVxuICAgIGYuY2FsbGVkID0gdHJ1ZVxuICAgIHJldHVybiBmLnZhbHVlID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICB9XG4gIGYuY2FsbGVkID0gZmFsc2VcbiAgcmV0dXJuIGZcbn1cblxuZnVuY3Rpb24gb25jZVN0cmljdCAoZm4pIHtcbiAgdmFyIGYgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGYuY2FsbGVkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGYub25jZUVycm9yKVxuICAgIGYuY2FsbGVkID0gdHJ1ZVxuICAgIHJldHVybiBmLnZhbHVlID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICB9XG4gIHZhciBuYW1lID0gZm4ubmFtZSB8fCAnRnVuY3Rpb24gd3JhcHBlZCB3aXRoIGBvbmNlYCdcbiAgZi5vbmNlRXJyb3IgPSBuYW1lICsgXCIgc2hvdWxkbid0IGJlIGNhbGxlZCBtb3JlIHRoYW4gb25jZVwiXG4gIGYuY2FsbGVkID0gZmFsc2VcbiAgcmV0dXJuIGZcbn1cbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi4yXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBnZXROYW5vU2Vjb25kcywgaHJ0aW1lLCBsb2FkVGltZSwgbW9kdWxlTG9hZFRpbWUsIG5vZGVMb2FkVGltZSwgdXBUaW1lO1xuXG4gIGlmICgodHlwZW9mIHBlcmZvcm1hbmNlICE9PSBcInVuZGVmaW5lZFwiICYmIHBlcmZvcm1hbmNlICE9PSBudWxsKSAmJiBwZXJmb3JtYW5jZS5ub3cpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MgIT09IG51bGwpICYmIHByb2Nlc3MuaHJ0aW1lKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAoZ2V0TmFub1NlY29uZHMoKSAtIG5vZGVMb2FkVGltZSkgLyAxZTY7XG4gICAgfTtcbiAgICBocnRpbWUgPSBwcm9jZXNzLmhydGltZTtcbiAgICBnZXROYW5vU2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhyO1xuICAgICAgaHIgPSBocnRpbWUoKTtcbiAgICAgIHJldHVybiBoclswXSAqIDFlOSArIGhyWzFdO1xuICAgIH07XG4gICAgbW9kdWxlTG9hZFRpbWUgPSBnZXROYW5vU2Vjb25kcygpO1xuICAgIHVwVGltZSA9IHByb2Nlc3MudXB0aW1lKCkgKiAxZTk7XG4gICAgbm9kZUxvYWRUaW1lID0gbW9kdWxlTG9hZFRpbWUgLSB1cFRpbWU7XG4gIH0gZWxzZSBpZiAoRGF0ZS5ub3cpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIERhdGUubm93KCkgLSBsb2FkVGltZTtcbiAgICB9O1xuICAgIGxvYWRUaW1lID0gRGF0ZS5ub3coKTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gbG9hZFRpbWU7XG4gICAgfTtcbiAgICBsb2FkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9XG5cbn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlcmZvcm1hbmNlLW5vdy5qcy5tYXBcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJ2YXIgbm93ID0gcmVxdWlyZSgncGVyZm9ybWFuY2Utbm93JylcbiAgLCByb290ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB3aW5kb3dcbiAgLCB2ZW5kb3JzID0gWydtb3onLCAnd2Via2l0J11cbiAgLCBzdWZmaXggPSAnQW5pbWF0aW9uRnJhbWUnXG4gICwgcmFmID0gcm9vdFsncmVxdWVzdCcgKyBzdWZmaXhdXG4gICwgY2FmID0gcm9vdFsnY2FuY2VsJyArIHN1ZmZpeF0gfHwgcm9vdFsnY2FuY2VsUmVxdWVzdCcgKyBzdWZmaXhdXG5cbmZvcih2YXIgaSA9IDA7ICFyYWYgJiYgaSA8IHZlbmRvcnMubGVuZ3RoOyBpKyspIHtcbiAgcmFmID0gcm9vdFt2ZW5kb3JzW2ldICsgJ1JlcXVlc3QnICsgc3VmZml4XVxuICBjYWYgPSByb290W3ZlbmRvcnNbaV0gKyAnQ2FuY2VsJyArIHN1ZmZpeF1cbiAgICAgIHx8IHJvb3RbdmVuZG9yc1tpXSArICdDYW5jZWxSZXF1ZXN0JyArIHN1ZmZpeF1cbn1cblxuLy8gU29tZSB2ZXJzaW9ucyBvZiBGRiBoYXZlIHJBRiBidXQgbm90IGNBRlxuaWYoIXJhZiB8fCAhY2FmKSB7XG4gIHZhciBsYXN0ID0gMFxuICAgICwgaWQgPSAwXG4gICAgLCBxdWV1ZSA9IFtdXG4gICAgLCBmcmFtZUR1cmF0aW9uID0gMTAwMCAvIDYwXG5cbiAgcmFmID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBpZihxdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHZhciBfbm93ID0gbm93KClcbiAgICAgICAgLCBuZXh0ID0gTWF0aC5tYXgoMCwgZnJhbWVEdXJhdGlvbiAtIChfbm93IC0gbGFzdCkpXG4gICAgICBsYXN0ID0gbmV4dCArIF9ub3dcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjcCA9IHF1ZXVlLnNsaWNlKDApXG4gICAgICAgIC8vIENsZWFyIHF1ZXVlIGhlcmUgdG8gcHJldmVudFxuICAgICAgICAvLyBjYWxsYmFja3MgZnJvbSBhcHBlbmRpbmcgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRvIHRoZSBjdXJyZW50IGZyYW1lJ3MgcXVldWVcbiAgICAgICAgcXVldWUubGVuZ3RoID0gMFxuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgY3AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZighY3BbaV0uY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICAgIGNwW2ldLmNhbGxiYWNrKGxhc3QpXG4gICAgICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgdGhyb3cgZSB9LCAwKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgTWF0aC5yb3VuZChuZXh0KSlcbiAgICB9XG4gICAgcXVldWUucHVzaCh7XG4gICAgICBoYW5kbGU6ICsraWQsXG4gICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICBjYW5jZWxsZWQ6IGZhbHNlXG4gICAgfSlcbiAgICByZXR1cm4gaWRcbiAgfVxuXG4gIGNhZiA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYocXVldWVbaV0uaGFuZGxlID09PSBoYW5kbGUpIHtcbiAgICAgICAgcXVldWVbaV0uY2FuY2VsbGVkID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuKSB7XG4gIC8vIFdyYXAgaW4gYSBuZXcgZnVuY3Rpb24gdG8gcHJldmVudFxuICAvLyBgY2FuY2VsYCBwb3RlbnRpYWxseSBiZWluZyBhc3NpZ25lZFxuICAvLyB0byB0aGUgbmF0aXZlIHJBRiBmdW5jdGlvblxuICByZXR1cm4gcmFmLmNhbGwocm9vdCwgZm4pXG59XG5tb2R1bGUuZXhwb3J0cy5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgY2FmLmFwcGx5KHJvb3QsIGFyZ3VtZW50cylcbn1cbm1vZHVsZS5leHBvcnRzLnBvbHlmaWxsID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmICghb2JqZWN0KSB7XG4gICAgb2JqZWN0ID0gcm9vdDtcbiAgfVxuICBvYmplY3QucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gcmFmXG4gIG9iamVjdC5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGNhZlxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgZHVwbGV4IHN0cmVhbSBpcyBqdXN0IGEgc3RyZWFtIHRoYXQgaXMgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUuXG4vLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzc1xuLy8gcHJvdG90eXBhbGx5IGluaGVyaXRzIGZyb20gUmVhZGFibGUsIGFuZCB0aGVuIHBhcmFzaXRpY2FsbHkgZnJvbVxuLy8gV3JpdGFibGUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gIH1yZXR1cm4ga2V5cztcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3JlYWRhYmxlJyk7XG52YXIgV3JpdGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fd3JpdGFibGUnKTtcblxudXRpbC5pbmhlcml0cyhEdXBsZXgsIFJlYWRhYmxlKTtcblxudmFyIGtleXMgPSBvYmplY3RLZXlzKFdyaXRhYmxlLnByb3RvdHlwZSk7XG5mb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgdmFyIG1ldGhvZCA9IGtleXNbdl07XG4gIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKSBEdXBsZXgucHJvdG90eXBlW21ldGhvZF0gPSBXcml0YWJsZS5wcm90b3R5cGVbbWV0aG9kXTtcbn1cblxuZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuXG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuXG4gIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xufVxuXG4vLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5mdW5jdGlvbiBvbmVuZCgpIHtcbiAgLy8gaWYgd2UgYWxsb3cgaGFsZi1vcGVuIHN0YXRlLCBvciBpZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCxcbiAgLy8gdGhlbiB3ZSdyZSBvay5cbiAgaWYgKHRoaXMuYWxsb3dIYWxmT3BlbiB8fCB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKSByZXR1cm47XG5cbiAgLy8gbm8gbW9yZSBkYXRhIGNhbiBiZSB3cml0dGVuLlxuICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cbiAgcG5hLm5leHRUaWNrKG9uRW5kTlQsIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBvbkVuZE5UKHNlbGYpIHtcbiAgc2VsZi5lbmQoKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMucHVzaChudWxsKTtcbiAgdGhpcy5lbmQoKTtcblxuICBwbmEubmV4dFRpY2soY2IsIGVycik7XG59O1xuXG5mdW5jdGlvbiBmb3JFYWNoKHhzLCBmKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZih4c1tpXSwgaSk7XG4gIH1cbn0iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBwYXNzdGhyb3VnaCBzdHJlYW0uXG4vLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0cmVhbS5cbi8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQYXNzVGhyb3VnaDtcblxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vX3N0cmVhbV90cmFuc2Zvcm0nKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG5cbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucyk7XG59XG5cblBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobnVsbCwgY2h1bmspO1xufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRhYmxlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbnZhciBFRWxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiAoZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lcnModHlwZSkubGVuZ3RoO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgZGVidWdVdGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGRlYnVnID0gdm9pZCAwO1xuaWYgKGRlYnVnVXRpbCAmJiBkZWJ1Z1V0aWwuZGVidWdsb2cpIHtcbiAgZGVidWcgPSBkZWJ1Z1V0aWwuZGVidWdsb2coJ3N0cmVhbScpO1xufSBlbHNlIHtcbiAgZGVidWcgPSBmdW5jdGlvbiAoKSB7fTtcbn1cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyTGlzdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0Jyk7XG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xudmFyIFN0cmluZ0RlY29kZXI7XG5cbnV0aWwuaW5oZXJpdHMoUmVhZGFibGUsIFN0cmVhbSk7XG5cbnZhciBrUHJveHlFdmVudHMgPSBbJ2Vycm9yJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knLCAncGF1c2UnLCAncmVzdW1lJ107XG5cbmZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4pIHtcbiAgLy8gU2FkbHkgdGhpcyBpcyBub3QgY2FjaGVhYmxlIGFzIHNvbWUgbGlicmFyaWVzIGJ1bmRsZSB0aGVpciBvd25cbiAgLy8gZXZlbnQgZW1pdHRlciBpbXBsZW1lbnRhdGlvbiB3aXRoIHRoZW0uXG4gIGlmICh0eXBlb2YgZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHJldHVybiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lcihldmVudCwgZm4pO1xuXG4gIC8vIFRoaXMgaXMgYSBoYWNrIHRvIG1ha2Ugc3VyZSB0aGF0IG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSBhbnlcbiAgLy8gdXNlcmxhbmQgb25lcy4gIE5FVkVSIERPIFRISVMuIFRoaXMgaXMgaGVyZSBvbmx5IGJlY2F1c2UgdGhpcyBjb2RlIG5lZWRzXG4gIC8vIHRvIGNvbnRpbnVlIHRvIHdvcmsgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBOb2RlLmpzIHRoYXQgZG8gbm90IGluY2x1ZGVcbiAgLy8gdGhlIHByZXBlbmRMaXN0ZW5lcigpIG1ldGhvZC4gVGhlIGdvYWwgaXMgdG8gZXZlbnR1YWxseSByZW1vdmUgdGhpcyBoYWNrLlxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkgZW1pdHRlci5vbihldmVudCwgZm4pO2Vsc2UgaWYgKGlzQXJyYXkoZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkpIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0udW5zaGlmdChmbik7ZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdID0gW2ZuLCBlbWl0dGVyLl9ldmVudHNbZXZlbnRdXTtcbn1cblxuZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG4gIHZhciBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0b1xuICAvLyBtYWtlIGFsbCB0aGUgYnVmZmVyIG1lcmdpbmcgYW5kIGxlbmd0aCBjaGVja3MgZ28gYXdheVxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCBpdCBzdG9wcyBjYWxsaW5nIF9yZWFkKCkgdG8gZmlsbCB0aGUgYnVmZmVyXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgXCJkb24ndCBjYWxsIF9yZWFkIHByZWVtcHRpdmVseSBldmVyXCJcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHJlYWRhYmxlSHdtID0gb3B0aW9ucy5yZWFkYWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAocmVhZGFibGVId20gfHwgcmVhZGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSByZWFkYWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gQSBsaW5rZWQgbGlzdCBpcyB1c2VkIHRvIHN0b3JlIGRhdGEgY2h1bmtzIGluc3RlYWQgb2YgYW4gYXJyYXkgYmVjYXVzZSB0aGVcbiAgLy8gbGlua2VkIGxpc3QgY2FuIHJlbW92ZSBlbGVtZW50cyBmcm9tIHRoZSBiZWdpbm5pbmcgZmFzdGVyIHRoYW5cbiAgLy8gYXJyYXkuc2hpZnQoKVxuICB0aGlzLmJ1ZmZlciA9IG5ldyBCdWZmZXJMaXN0KCk7XG4gIHRoaXMubGVuZ3RoID0gMDtcbiAgdGhpcy5waXBlcyA9IG51bGw7XG4gIHRoaXMucGlwZXNDb3VudCA9IDA7XG4gIHRoaXMuZmxvd2luZyA9IG51bGw7XG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgdGhpcy5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIHRoaXMucmVhZGluZyA9IGZhbHNlO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIGV2ZW50ICdyZWFkYWJsZScvJ2RhdGEnIGlzIGVtaXR0ZWRcbiAgLy8gaW1tZWRpYXRlbHksIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2VcbiAgLy8gYW55IGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHJlYWQgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cbiAgdGhpcy5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlO1xuICB0aGlzLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIHRoZSBudW1iZXIgb2Ygd3JpdGVycyB0aGF0IGFyZSBhd2FpdGluZyBhIGRyYWluIGV2ZW50IGluIC5waXBlKClzXG4gIHRoaXMuYXdhaXREcmFpbiA9IDA7XG5cbiAgLy8gaWYgdHJ1ZSwgYSBtYXliZVJlYWRNb3JlIGhhcyBiZWVuIHNjaGVkdWxlZFxuICB0aGlzLnJlYWRpbmdNb3JlID0gZmFsc2U7XG5cbiAgdGhpcy5kZWNvZGVyID0gbnVsbDtcbiAgdGhpcy5lbmNvZGluZyA9IG51bGw7XG4gIGlmIChvcHRpb25zLmVuY29kaW5nKSB7XG4gICAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zLmVuY29kaW5nKTtcbiAgICB0aGlzLmVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSkgcmV0dXJuIG5ldyBSZWFkYWJsZShvcHRpb25zKTtcblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlID0gbmV3IFJlYWRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5XG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlYWQgPT09ICdmdW5jdGlvbicpIHRoaXMuX3JlYWQgPSBvcHRpb25zLnJlYWQ7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5SZWFkYWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMucHVzaChudWxsKTtcbiAgY2IoZXJyKTtcbn07XG5cbi8vIE1hbnVhbGx5IHNob3ZlIHNvbWV0aGluZyBpbnRvIHRoZSByZWFkKCkgYnVmZmVyLlxuLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsXG4vLyBzaW1pbGFyIHRvIGhvdyBXcml0YWJsZS53cml0ZSgpIHJldHVybnMgdHJ1ZSBpZiB5b3Ugc2hvdWxkXG4vLyB3cml0ZSgpIHNvbWUgbW9yZS5cblJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgc2tpcENodW5rQ2hlY2s7XG5cbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5jb2RpbmcgfHwgc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuICAgICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykge1xuICAgICAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gICAgICAgIGVuY29kaW5nID0gJyc7XG4gICAgICB9XG4gICAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBlbmNvZGluZywgZmFsc2UsIHNraXBDaHVua0NoZWNrKTtcbn07XG5cbi8vIFVuc2hpZnQgc2hvdWxkICphbHdheXMqIGJlIHNvbWV0aGluZyBkaXJlY3RseSBvdXQgb2YgcmVhZCgpXG5SZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xufTtcblxuZnVuY3Rpb24gcmVhZGFibGVBZGRDaHVuayhzdHJlYW0sIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCwgc2tpcENodW5rQ2hlY2spIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKCFza2lwQ2h1bmtDaGVjaykgZXIgPSBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKTtcbiAgICBpZiAoZXIpIHtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsgJiYgY2h1bmsubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgIXN0YXRlLm9iamVjdE1vZGUgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGNodW5rKSAhPT0gQnVmZmVyLnByb3RvdHlwZSkge1xuICAgICAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWRkVG9Gcm9udCkge1xuICAgICAgICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudCcpKTtlbHNlIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuZW5kZWQpIHtcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIWVuY29kaW5nKSB7XG4gICAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICAgICAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuay5sZW5ndGggIT09IDApIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7ZWxzZSBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFhZGRUb0Zyb250KSB7XG4gICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5lZWRNb3JlRGF0YShzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBhZGRUb0Zyb250KSB7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuc3luYykge1xuICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgY2h1bmspO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9IGVsc2Uge1xuICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGluZm8uXG4gICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIGlmIChhZGRUb0Zyb250KSBzdGF0ZS5idWZmZXIudW5zaGlmdChjaHVuayk7ZWxzZSBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG5cbiAgICBpZiAoc3RhdGUubmVlZFJlYWRhYmxlKSBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbiAgfVxuICBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKSB7XG4gIHZhciBlcjtcbiAgaWYgKCFfaXNVaW50OEFycmF5KGNodW5rKSAmJiB0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICByZXR1cm4gZXI7XG59XG5cbi8vIGlmIGl0J3MgcGFzdCB0aGUgaGlnaCB3YXRlciBtYXJrLCB3ZSBjYW4gcHVzaCBpbiBzb21lIG1vcmUuXG4vLyBBbHNvLCBpZiB3ZSBoYXZlIG5vIGRhdGEgeWV0LCB3ZSBjYW4gc3RhbmQgc29tZVxuLy8gbW9yZSBieXRlcy4gIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsXG4vLyBzdWNoIGFzIHRoZSByZXBsLiAgQWxzbywgaWYgdGhlIHB1c2goKSB0cmlnZ2VyZWQgYVxuLy8gcmVhZGFibGUgZXZlbnQsIGFuZCB0aGUgdXNlciBjYWxsZWQgcmVhZChsYXJnZU51bWJlcikgc3VjaCB0aGF0XG4vLyBuZWVkUmVhZGFibGUgd2FzIHNldCwgdGhlbiB3ZSBvdWdodCB0byBwdXNoIG1vcmUsIHNvIHRoYXQgYW5vdGhlclxuLy8gJ3JlYWRhYmxlJyBldmVudCB3aWxsIGJlIHRyaWdnZXJlZC5cbmZ1bmN0aW9uIG5lZWRNb3JlRGF0YShzdGF0ZSkge1xuICByZXR1cm4gIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5uZWVkUmVhZGFibGUgfHwgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5sZW5ndGggPT09IDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPT09IGZhbHNlO1xufTtcblxuLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5SZWFkYWJsZS5wcm90b3R5cGUuc2V0RW5jb2RpbmcgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYyk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2RpbmcgPSBlbmM7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDhNQlxudmFyIE1BWF9IV00gPSAweDgwMDAwMDtcbmZ1bmN0aW9uIGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pIHtcbiAgaWYgKG4gPj0gTUFYX0hXTSkge1xuICAgIG4gPSBNQVhfSFdNO1xuICB9IGVsc2Uge1xuICAgIC8vIEdldCB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIDIgdG8gcHJldmVudCBpbmNyZWFzaW5nIGh3bSBleGNlc3NpdmVseSBpblxuICAgIC8vIHRpbnkgYW1vdW50c1xuICAgIG4tLTtcbiAgICBuIHw9IG4gPj4+IDE7XG4gICAgbiB8PSBuID4+PiAyO1xuICAgIG4gfD0gbiA+Pj4gNDtcbiAgICBuIHw9IG4gPj4+IDg7XG4gICAgbiB8PSBuID4+PiAxNjtcbiAgICBuKys7XG4gIH1cbiAgcmV0dXJuIG47XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkge1xuICBpZiAobiA8PSAwIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgcmV0dXJuIDA7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXR1cm4gMTtcbiAgaWYgKG4gIT09IG4pIHtcbiAgICAvLyBPbmx5IGZsb3cgb25lIGJ1ZmZlciBhdCBhIHRpbWVcbiAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGgpIHJldHVybiBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhLmxlbmd0aDtlbHNlIHJldHVybiBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgLy8gSWYgd2UncmUgYXNraW5nIGZvciBtb3JlIHRoYW4gdGhlIGN1cnJlbnQgaHdtLCB0aGVuIHJhaXNlIHRoZSBod20uXG4gIGlmIChuID4gc3RhdGUuaGlnaFdhdGVyTWFyaykgc3RhdGUuaGlnaFdhdGVyTWFyayA9IGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pO1xuICBpZiAobiA8PSBzdGF0ZS5sZW5ndGgpIHJldHVybiBuO1xuICAvLyBEb24ndCBoYXZlIGVub3VnaFxuICBpZiAoIXN0YXRlLmVuZGVkKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gc3RhdGUubGVuZ3RoO1xufVxuXG4vLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LlxuUmVhZGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAobikge1xuICBkZWJ1ZygncmVhZCcsIG4pO1xuICBuID0gcGFyc2VJbnQobiwgMTApO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgbk9yaWcgPSBuO1xuXG4gIGlmIChuICE9PSAwKSBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcblxuICAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhIGJ1bmNoIG9mIGRhdGEgaW4gdGhlIGJ1ZmZlciwgdGhlbiBqdXN0IHRyaWdnZXJcbiAgLy8gdGhlICdyZWFkYWJsZScgZXZlbnQgYW5kIG1vdmUgb24uXG4gIGlmIChuID09PSAwICYmIHN0YXRlLm5lZWRSZWFkYWJsZSAmJiAoc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUuZW5kZWQpKSB7XG4gICAgZGVidWcoJ3JlYWQ6IGVtaXRSZWFkYWJsZScsIHN0YXRlLmxlbmd0aCwgc3RhdGUuZW5kZWQpO1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO2Vsc2UgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbiA9IGhvd011Y2hUb1JlYWQobiwgc3RhdGUpO1xuXG4gIC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIEFsbCB0aGUgYWN0dWFsIGNodW5rIGdlbmVyYXRpb24gbG9naWMgbmVlZHMgdG8gYmVcbiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluXG4gIC8vIHN5bnRoZXRpYyBzdHJlYW0gY2FzZXMsIHN1Y2ggYXMgcGFzc3Rocm91Z2ggc3RyZWFtcywgX3JlYWRcbiAgLy8gbWF5IGJlIGEgY29tcGxldGVseSBzeW5jaHJvbm91cyBvcGVyYXRpb24gd2hpY2ggbWF5IGNoYW5nZVxuICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlblxuICAvLyBiZWZvcmUgdGhlcmUgd2FzICpub3QqIGVub3VnaC5cbiAgLy9cbiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6XG4gIC8vIDEuIEZpZ3VyZSBvdXQgd2hhdCB0aGUgc3RhdGUgb2YgdGhpbmdzIHdpbGwgYmUgYWZ0ZXIgd2UgZG9cbiAgLy8gYSByZWFkIGZyb20gdGhlIGJ1ZmZlci5cbiAgLy9cbiAgLy8gMi4gSWYgdGhhdCByZXN1bHRpbmcgc3RhdGUgd2lsbCB0cmlnZ2VyIGEgX3JlYWQsIHRoZW4gY2FsbCBfcmVhZC5cbiAgLy8gTm90ZSB0aGF0IHRoaXMgbWF5IGJlIGFzeW5jaHJvbm91cywgb3Igc3luY2hyb25vdXMuICBZZXMsIGl0IGlzXG4gIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhblxuICAvLyB0aGF0IHRoZSBSZWFkYWJsZSBjbGFzcyBzaG91bGQgYmVoYXZlIGltcHJvcGVybHksIGFzIHN0cmVhbXMgYXJlXG4gIC8vIGRlc2lnbmVkIHRvIGJlIHN5bmMvYXN5bmMgYWdub3N0aWMuXG4gIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbFxuICAvLyBoYXMgcmV0dXJuZWQgeWV0KSwgc28gdGhhdCB3ZSBrbm93IHdoZXRoZXIgb3Igbm90IGl0J3Mgc2FmZSB0byBlbWl0XG4gIC8vICdyZWFkYWJsZScgZXRjLlxuICAvL1xuICAvLyAzLiBBY3R1YWxseSBwdWxsIHRoZSByZXF1ZXN0ZWQgY2h1bmtzIG91dCBvZiB0aGUgYnVmZmVyIGFuZCByZXR1cm4uXG5cbiAgLy8gaWYgd2UgbmVlZCBhIHJlYWRhYmxlIGV2ZW50LCB0aGVuIHdlIG5lZWQgdG8gZG8gc29tZSByZWFkaW5nLlxuICB2YXIgZG9SZWFkID0gc3RhdGUubmVlZFJlYWRhYmxlO1xuICBkZWJ1ZygnbmVlZCByZWFkYWJsZScsIGRvUmVhZCk7XG5cbiAgLy8gaWYgd2UgY3VycmVudGx5IGhhdmUgbGVzcyB0aGFuIHRoZSBoaWdoV2F0ZXJNYXJrLCB0aGVuIGFsc28gcmVhZCBzb21lXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkb1JlYWQgPSB0cnVlO1xuICAgIGRlYnVnKCdsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyaycsIGRvUmVhZCk7XG4gIH1cblxuICAvLyBob3dldmVyLCBpZiB3ZSd2ZSBlbmRlZCwgdGhlbiB0aGVyZSdzIG5vIHBvaW50LCBhbmQgaWYgd2UncmUgYWxyZWFkeVxuICAvLyByZWFkaW5nLCB0aGVuIGl0J3MgdW5uZWNlc3NhcnkuXG4gIGlmIChzdGF0ZS5lbmRlZCB8fCBzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZG9SZWFkID0gZmFsc2U7XG4gICAgZGVidWcoJ3JlYWRpbmcgb3IgZW5kZWQnLCBkb1JlYWQpO1xuICB9IGVsc2UgaWYgKGRvUmVhZCkge1xuICAgIGRlYnVnKCdkbyByZWFkJyk7XG4gICAgc3RhdGUucmVhZGluZyA9IHRydWU7XG4gICAgc3RhdGUuc3luYyA9IHRydWU7XG4gICAgLy8gaWYgdGhlIGxlbmd0aCBpcyBjdXJyZW50bHkgemVybywgdGhlbiB3ZSAqbmVlZCogYSByZWFkYWJsZSBldmVudC5cbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2RcbiAgICB0aGlzLl9yZWFkKHN0YXRlLmhpZ2hXYXRlck1hcmspO1xuICAgIHN0YXRlLnN5bmMgPSBmYWxzZTtcbiAgICAvLyBJZiBfcmVhZCBwdXNoZWQgZGF0YSBzeW5jaHJvbm91c2x5LCB0aGVuIGByZWFkaW5nYCB3aWxsIGJlIGZhbHNlLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHJlLWV2YWx1YXRlIGhvdyBtdWNoIGRhdGEgd2UgY2FuIHJldHVybiB0byB0aGUgdXNlci5cbiAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZSk7XG4gIH1cblxuICB2YXIgcmV0O1xuICBpZiAobiA+IDApIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtlbHNlIHJldCA9IG51bGw7XG5cbiAgaWYgKHJldCA9PT0gbnVsbCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgbiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUubGVuZ3RoIC09IG47XG4gIH1cblxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSWYgd2UgaGF2ZSBub3RoaW5nIGluIHRoZSBidWZmZXIsIHRoZW4gd2Ugd2FudCB0byBrbm93XG4gICAgLy8gYXMgc29vbiBhcyB3ZSAqZG8qIGdldCBzb21ldGhpbmcgaW50byB0aGUgYnVmZmVyLlxuICAgIGlmICghc3RhdGUuZW5kZWQpIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgICAvLyBJZiB3ZSB0cmllZCB0byByZWFkKCkgcGFzdCB0aGUgRU9GLCB0aGVuIGVtaXQgZW5kIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgfVxuXG4gIGlmIChyZXQgIT09IG51bGwpIHRoaXMuZW1pdCgnZGF0YScsIHJldCk7XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUuZW5kZWQpIHJldHVybjtcbiAgaWYgKHN0YXRlLmRlY29kZXIpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuXG4gIC8vIGVtaXQgJ3JlYWRhYmxlJyBub3cgdG8gbWFrZSBzdXJlIGl0IGdldHMgcGlja2VkIHVwLlxuICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbn1cblxuLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcbi8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7XG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUuc3luYykgcG5hLm5leHRUaWNrKGVtaXRSZWFkYWJsZV8sIHN0cmVhbSk7ZWxzZSBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcbiAgZGVidWcoJ2VtaXQgcmVhZGFibGUnKTtcbiAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7XG4gIGZsb3coc3RyZWFtKTtcbn1cblxuLy8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcbi8vIGFuZCBjYWxsZWQgcmVhZCgpIHRvIGNvbnN1bWUgc29tZSBkYXRhLiAgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWRcbi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmXG4vLyBpdCdzIGluIHByb2dyZXNzLlxuLy8gSG93ZXZlciwgaWYgd2UncmUgbm90IGVuZGVkLCBvciByZWFkaW5nLCBhbmQgdGhlIGxlbmd0aCA8IGh3bSxcbi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nTW9yZSkge1xuICAgIHN0YXRlLnJlYWRpbmdNb3JlID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2sobWF5YmVSZWFkTW9yZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJiBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZGVidWcoJ21heWJlUmVhZE1vcmUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKVxuICAgICAgLy8gZGlkbid0IGdldCBhbnkgZGF0YSwgc3RvcCBzcGlubmluZy5cbiAgICAgIGJyZWFrO2Vsc2UgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB9XG4gIHN0YXRlLnJlYWRpbmdNb3JlID0gZmFsc2U7XG59XG5cbi8vIGFic3RyYWN0IG1ldGhvZC4gIHRvIGJlIG92ZXJyaWRkZW4gaW4gc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vIGNhbGwgY2IoZXIsIGRhdGEpIHdoZXJlIGRhdGEgaXMgPD0gbiBpbiBsZW5ndGguXG4vLyBmb3IgdmlydHVhbCAobm9uLXN0cmluZywgbm9uLWJ1ZmZlcikgc3RyZWFtcywgXCJsZW5ndGhcIiBpcyBzb21ld2hhdFxuLy8gYXJiaXRyYXJ5LCBhbmQgcGVyaGFwcyBub3QgdmVyeSBtZWFuaW5nZnVsLlxuUmVhZGFibGUucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignX3JlYWQoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykge1xuICB2YXIgc3JjID0gdGhpcztcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBzdGF0ZS5waXBlcyA9IFtzdGF0ZS5waXBlcywgZGVzdF07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgc3RhdGUucGlwZXMucHVzaChkZXN0KTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHN0YXRlLnBpcGVzQ291bnQgKz0gMTtcbiAgZGVidWcoJ3BpcGUgY291bnQ9JWQgb3B0cz0laicsIHN0YXRlLnBpcGVzQ291bnQsIHBpcGVPcHRzKTtcblxuICB2YXIgZG9FbmQgPSAoIXBpcGVPcHRzIHx8IHBpcGVPcHRzLmVuZCAhPT0gZmFsc2UpICYmIGRlc3QgIT09IHByb2Nlc3Muc3Rkb3V0ICYmIGRlc3QgIT09IHByb2Nlc3Muc3RkZXJyO1xuXG4gIHZhciBlbmRGbiA9IGRvRW5kID8gb25lbmQgOiB1bnBpcGU7XG4gIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBwbmEubmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTtcblxuICBkZXN0Lm9uKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlLCB1bnBpcGVJbmZvKSB7XG4gICAgZGVidWcoJ29udW5waXBlJyk7XG4gICAgaWYgKHJlYWRhYmxlID09PSBzcmMpIHtcbiAgICAgIGlmICh1bnBpcGVJbmZvICYmIHVucGlwZUluZm8uaGFzVW5waXBlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdW5waXBlSW5mby5oYXNVbnBpcGVkID0gdHJ1ZTtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGRlYnVnKCdvbmVuZCcpO1xuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuICAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cbiAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIHZhciBjbGVhbmVkVXAgPSBmYWxzZTtcbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBkZWJ1ZygnY2xlYW51cCcpO1xuICAgIC8vIGNsZWFudXAgZXZlbnQgaGFuZGxlcnMgb25jZSB0aGUgcGlwZSBpcyBicm9rZW5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcigndW5waXBlJywgb251bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgdW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuXG4gICAgY2xlYW5lZFVwID0gdHJ1ZTtcblxuICAgIC8vIGlmIHRoZSByZWFkZXIgaXMgd2FpdGluZyBmb3IgYSBkcmFpbiBldmVudCBmcm9tIHRoaXNcbiAgICAvLyBzcGVjaWZpYyB3cml0ZXIsIHRoZW4gaXQgd291bGQgY2F1c2UgaXQgdG8gbmV2ZXIgc3RhcnRcbiAgICAvLyBmbG93aW5nIGFnYWluLlxuICAgIC8vIFNvLCBpZiB0aGlzIGlzIGF3YWl0aW5nIGEgZHJhaW4sIHRoZW4gd2UganVzdCBjYWxsIGl0IG5vdy5cbiAgICAvLyBJZiB3ZSBkb24ndCBrbm93LCB0aGVuIGFzc3VtZSB0aGF0IHdlIGFyZSB3YWl0aW5nIGZvciBvbmUuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gJiYgKCFkZXN0Ll93cml0YWJsZVN0YXRlIHx8IGRlc3QuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSkgb25kcmFpbigpO1xuICB9XG5cbiAgLy8gSWYgdGhlIHVzZXIgcHVzaGVzIG1vcmUgZGF0YSB3aGlsZSB3ZSdyZSB3cml0aW5nIHRvIGRlc3QgdGhlbiB3ZSdsbCBlbmQgdXBcbiAgLy8gaW4gb25kYXRhIGFnYWluLiBIb3dldmVyLCB3ZSBvbmx5IHdhbnQgdG8gaW5jcmVhc2UgYXdhaXREcmFpbiBvbmNlIGJlY2F1c2VcbiAgLy8gZGVzdCB3aWxsIG9ubHkgZW1pdCBvbmUgJ2RyYWluJyBldmVudCBmb3IgdGhlIG11bHRpcGxlIHdyaXRlcy5cbiAgLy8gPT4gSW50cm9kdWNlIGEgZ3VhcmQgb24gaW5jcmVhc2luZyBhd2FpdERyYWluLlxuICB2YXIgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICBzcmMub24oJ2RhdGEnLCBvbmRhdGEpO1xuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBkZWJ1Zygnb25kYXRhJyk7XG4gICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICAgIHZhciByZXQgPSBkZXN0LndyaXRlKGNodW5rKTtcbiAgICBpZiAoZmFsc2UgPT09IHJldCAmJiAhaW5jcmVhc2VkQXdhaXREcmFpbikge1xuICAgICAgLy8gSWYgdGhlIHVzZXIgdW5waXBlZCBkdXJpbmcgYGRlc3Qud3JpdGUoKWAsIGl0IGlzIHBvc3NpYmxlXG4gICAgICAvLyB0byBnZXQgc3R1Y2sgaW4gYSBwZXJtYW5lbnRseSBwYXVzZWQgc3RhdGUgaWYgdGhhdCB3cml0ZVxuICAgICAgLy8gYWxzbyByZXR1cm5lZCBmYWxzZS5cbiAgICAgIC8vID0+IENoZWNrIHdoZXRoZXIgYGRlc3RgIGlzIHN0aWxsIGEgcGlwaW5nIGRlc3RpbmF0aW9uLlxuICAgICAgaWYgKChzdGF0ZS5waXBlc0NvdW50ID09PSAxICYmIHN0YXRlLnBpcGVzID09PSBkZXN0IHx8IHN0YXRlLnBpcGVzQ291bnQgPiAxICYmIGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpICE9PSAtMSkgJiYgIWNsZWFuZWRVcCkge1xuICAgICAgICBkZWJ1ZygnZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlJywgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4pO1xuICAgICAgICBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbisrO1xuICAgICAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHNyYy5wYXVzZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBkZXN0IGhhcyBhbiBlcnJvciwgdGhlbiBzdG9wIHBpcGluZyBpbnRvIGl0LlxuICAvLyBob3dldmVyLCBkb24ndCBzdXBwcmVzcyB0aGUgdGhyb3dpbmcgYmVoYXZpb3IgZm9yIHRoaXMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTtcbiAgICB1bnBpcGUoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGRlc3QuZW1pdCgnZXJyb3InLCBlcik7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIHVzZXJsYW5kIG9uZXMuXG4gIHByZXBlbmRMaXN0ZW5lcihkZXN0LCAnZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIGRlYnVnKCdvbmZpbmlzaCcpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cbiAgZnVuY3Rpb24gdW5waXBlKCkge1xuICAgIGRlYnVnKCd1bnBpcGUnKTtcbiAgICBzcmMudW5waXBlKGRlc3QpO1xuICB9XG5cbiAgLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cbiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTtcblxuICAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpO1xuICAgIHNyYy5yZXN1bWUoKTtcbiAgfVxuXG4gIHJldHVybiBkZXN0O1xufTtcblxuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXRlID0gc3JjLl9yZWFkYWJsZVN0YXRlO1xuICAgIGRlYnVnKCdwaXBlT25EcmFpbicsIHN0YXRlLmF3YWl0RHJhaW4pO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluKSBzdGF0ZS5hd2FpdERyYWluLS07XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgRUVsaXN0ZW5lckNvdW50KHNyYywgJ2RhdGEnKSkge1xuICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgICBmbG93KHNyYyk7XG4gICAgfVxuICB9O1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHVucGlwZUluZm8gPSB7IGhhc1VucGlwZWQ6IGZhbHNlIH07XG5cbiAgLy8gaWYgd2UncmUgbm90IHBpcGluZyBhbnl3aGVyZSwgdGhlbiBkbyBub3RoaW5nLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMCkgcmV0dXJuIHRoaXM7XG5cbiAgLy8ganVzdCBvbmUgZGVzdGluYXRpb24uICBtb3N0IGNvbW1vbiBjYXNlLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkge1xuICAgIC8vIHBhc3NlZCBpbiBvbmUsIGJ1dCBpdCdzIG5vdCB0aGUgcmlnaHQgb25lLlxuICAgIGlmIChkZXN0ICYmIGRlc3QgIT09IHN0YXRlLnBpcGVzKSByZXR1cm4gdGhpcztcblxuICAgIGlmICghZGVzdCkgZGVzdCA9IHN0YXRlLnBpcGVzO1xuXG4gICAgLy8gZ290IGEgbWF0Y2guXG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICBpZiAoZGVzdCkgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHNsb3cgY2FzZS4gbXVsdGlwbGUgcGlwZSBkZXN0aW5hdGlvbnMuXG5cbiAgaWYgKCFkZXN0KSB7XG4gICAgLy8gcmVtb3ZlIGFsbC5cbiAgICB2YXIgZGVzdHMgPSBzdGF0ZS5waXBlcztcbiAgICB2YXIgbGVuID0gc3RhdGUucGlwZXNDb3VudDtcbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdHNbaV0uZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgfXJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gdHJ5IHRvIGZpbmQgdGhlIHJpZ2h0IG9uZS5cbiAgdmFyIGluZGV4ID0gaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCk7XG4gIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiB0aGlzO1xuXG4gIHN0YXRlLnBpcGVzLnNwbGljZShpbmRleCwgMSk7XG4gIHN0YXRlLnBpcGVzQ291bnQgLT0gMTtcbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07XG5cbiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHNldCB1cCBkYXRhIGV2ZW50cyBpZiB0aGV5IGFyZSBhc2tlZCBmb3Jcbi8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nXG5SZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcblxuICBpZiAoZXYgPT09ICdkYXRhJykge1xuICAgIC8vIFN0YXJ0IGZsb3dpbmcgb24gbmV4dCB0aWNrIGlmIHN0cmVhbSBpc24ndCBleHBsaWNpdGx5IHBhdXNlZFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgIT09IGZhbHNlKSB0aGlzLnJlc3VtZSgpO1xuICB9IGVsc2UgaWYgKGV2ID09PSAncmVhZGFibGUnKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgIXN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nKSB7XG4gICAgICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmICghc3RhdGUucmVhZGluZykge1xuICAgICAgICBwbmEubmV4dFRpY2soblJlYWRpbmdOZXh0VGljaywgdGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmxlbmd0aCkge1xuICAgICAgICBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5SZWFkYWJsZS5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBSZWFkYWJsZS5wcm90b3R5cGUub247XG5cbmZ1bmN0aW9uIG5SZWFkaW5nTmV4dFRpY2soc2VsZikge1xuICBkZWJ1ZygncmVhZGFibGUgbmV4dHRpY2sgcmVhZCAwJyk7XG4gIHNlbGYucmVhZCgwKTtcbn1cblxuLy8gcGF1c2UoKSBhbmQgcmVzdW1lKCkgYXJlIHJlbW5hbnRzIG9mIHRoZSBsZWdhY3kgcmVhZGFibGUgc3RyZWFtIEFQSVxuLy8gSWYgdGhlIHVzZXIgdXNlcyB0aGVtLCB0aGVuIHN3aXRjaCBpbnRvIG9sZCBtb2RlLlxuUmVhZGFibGUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZScpO1xuICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgIHJlc3VtZSh0aGlzLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiByZXN1bWUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkge1xuICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKHJlc3VtZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9XG5cbiAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gIHN0YXRlLmF3YWl0RHJhaW4gPSAwO1xuICBzdHJlYW0uZW1pdCgncmVzdW1lJyk7XG4gIGZsb3coc3RyZWFtKTtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLnJlYWRpbmcpIHN0cmVhbS5yZWFkKDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdjYWxsIHBhdXNlIGZsb3dpbmc9JWonLCB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpO1xuICBpZiAoZmFsc2UgIT09IHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwYXVzZScpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZsb3coc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2Zsb3cnLCBzdGF0ZS5mbG93aW5nKTtcbiAgd2hpbGUgKHN0YXRlLmZsb3dpbmcgJiYgc3RyZWFtLnJlYWQoKSAhPT0gbnVsbCkge31cbn1cblxuLy8gd3JhcCBhbiBvbGQtc3R5bGUgc3RyZWFtIGFzIHRoZSBhc3luYyBkYXRhIHNvdXJjZS5cbi8vIFRoaXMgaXMgKm5vdCogcGFydCBvZiB0aGUgcmVhZGFibGUgc3RyZWFtIGludGVyZmFjZS5cbi8vIEl0IGlzIGFuIHVnbHkgdW5mb3J0dW5hdGUgbWVzcyBvZiBoaXN0b3J5LlxuUmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuXG4gIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cmFwcGVkIGVuZCcpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIF90aGlzLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIF90aGlzLnB1c2gobnVsbCk7XG4gIH0pO1xuXG4gIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcblxuICAgIC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZVxuICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdW5kZWZpbmVkKSkgcmV0dXJuO2Vsc2UgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpIHJldHVybjtcblxuICAgIHZhciByZXQgPSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICBpZiAoIXJldCkge1xuICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5wYXVzZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gcHJveHkgYWxsIHRoZSBvdGhlciBtZXRob2RzLlxuICAvLyBpbXBvcnRhbnQgd2hlbiB3cmFwcGluZyBmaWx0ZXJzIGFuZCBkdXBsZXhlcy5cbiAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHtcbiAgICBpZiAodGhpc1tpXSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzdHJlYW1baV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmVhbVttZXRob2RdLmFwcGx5KHN0cmVhbSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH0oaSk7XG4gICAgfVxuICB9XG5cbiAgLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLlxuICBmb3IgKHZhciBuID0gMDsgbiA8IGtQcm94eUV2ZW50cy5sZW5ndGg7IG4rKykge1xuICAgIHN0cmVhbS5vbihrUHJveHlFdmVudHNbbl0sIHRoaXMuZW1pdC5iaW5kKHRoaXMsIGtQcm94eUV2ZW50c1tuXSkpO1xuICB9XG5cbiAgLy8gd2hlbiB3ZSB0cnkgdG8gY29uc3VtZSBzb21lIG1vcmUgYnl0ZXMsIHNpbXBseSB1bnBhdXNlIHRoZVxuICAvLyB1bmRlcmx5aW5nIHN0cmVhbS5cbiAgdGhpcy5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTtcbiAgICBpZiAocGF1c2VkKSB7XG4gICAgICBwYXVzZWQgPSBmYWxzZTtcbiAgICAgIHN0cmVhbS5yZXN1bWUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcblxuLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUpIHtcbiAgLy8gbm90aGluZyBidWZmZXJlZFxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcblxuICB2YXIgcmV0O1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0ID0gc3RhdGUuYnVmZmVyLnNoaWZ0KCk7ZWxzZSBpZiAoIW4gfHwgbiA+PSBzdGF0ZS5sZW5ndGgpIHtcbiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3RcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgcmV0ID0gc3RhdGUuYnVmZmVyLmpvaW4oJycpO2Vsc2UgaWYgKHN0YXRlLmJ1ZmZlci5sZW5ndGggPT09IDEpIHJldCA9IHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGE7ZWxzZSByZXQgPSBzdGF0ZS5idWZmZXIuY29uY2F0KHN0YXRlLmxlbmd0aCk7XG4gICAgc3RhdGUuYnVmZmVyLmNsZWFyKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVhZCBwYXJ0IG9mIGxpc3RcbiAgICByZXQgPSBmcm9tTGlzdFBhcnRpYWwobiwgc3RhdGUuYnVmZmVyLCBzdGF0ZS5kZWNvZGVyKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbi8vIEV4dHJhY3RzIG9ubHkgZW5vdWdoIGJ1ZmZlcmVkIGRhdGEgdG8gc2F0aXNmeSB0aGUgYW1vdW50IHJlcXVlc3RlZC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3RQYXJ0aWFsKG4sIGxpc3QsIGhhc1N0cmluZ3MpIHtcbiAgdmFyIHJldDtcbiAgaWYgKG4gPCBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBzbGljZSBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5nc1xuICAgIHJldCA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKDAsIG4pO1xuICAgIGxpc3QuaGVhZC5kYXRhID0gbGlzdC5oZWFkLmRhdGEuc2xpY2Uobik7XG4gIH0gZWxzZSBpZiAobiA9PT0gbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gZmlyc3QgY2h1bmsgaXMgYSBwZXJmZWN0IG1hdGNoXG4gICAgcmV0ID0gbGlzdC5zaGlmdCgpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlc3VsdCBzcGFucyBtb3JlIHRoYW4gb25lIGJ1ZmZlclxuICAgIHJldCA9IGhhc1N0cmluZ3MgPyBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSA6IGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgY2hhcmFjdGVycyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGFcbi8vIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkge1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICB2YXIgcmV0ID0gcC5kYXRhO1xuICBuIC09IHJldC5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIHN0ciA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gc3RyLmxlbmd0aCA/IHN0ci5sZW5ndGggOiBuO1xuICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkgcmV0ICs9IHN0cjtlbHNlIHJldCArPSBzdHIuc2xpY2UoMCwgbik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IHN0ci5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXIobiwgbGlzdCkge1xuICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4pO1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICBwLmRhdGEuY29weShyZXQpO1xuICBuIC09IHAuZGF0YS5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIGJ1ZiA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gYnVmLmxlbmd0aCA/IGJ1Zi5sZW5ndGggOiBuO1xuICAgIGJ1Zi5jb3B5KHJldCwgcmV0Lmxlbmd0aCAtIG4sIDAsIG5iKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gYnVmLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblxuICAvLyBJZiB3ZSBnZXQgaGVyZSBiZWZvcmUgY29uc3VtaW5nIGFsbCB0aGUgYnl0ZXMsIHRoZW4gdGhhdCBpcyBhXG4gIC8vIGJ1ZyBpbiBub2RlLiAgU2hvdWxkIG5ldmVyIGhhcHBlbi5cbiAgaWYgKHN0YXRlLmxlbmd0aCA+IDApIHRocm93IG5ldyBFcnJvcignXCJlbmRSZWFkYWJsZSgpXCIgY2FsbGVkIG9uIG5vbi1lbXB0eSBzdHJlYW0nKTtcblxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlLCBzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlTlQoc3RhdGUsIHN0cmVhbSkge1xuICAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5zaGlmdC5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JFYWNoKHhzLCBmKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZih4c1tpXSwgaSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5kZXhPZih4cywgeCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh4c1tpXSA9PT0geCkgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2Zvcm07XG5cbnZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhUcmFuc2Zvcm0sIER1cGxleCk7XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKGVyLCBkYXRhKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTtcblxuICB2YXIgY2IgPSB0cy53cml0ZWNiO1xuXG4gIGlmICghY2IpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignd3JpdGUgY2FsbGJhY2sgY2FsbGVkIG11bHRpcGxlIHRpbWVzJykpO1xuICB9XG5cbiAgdHMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRzLndyaXRlY2IgPSBudWxsO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHRoaXMucHVzaChkYXRhKTtcblxuICBjYihlcik7XG5cbiAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgcnMucmVhZGluZyA9IGZhbHNlO1xuICBpZiAocnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHtcbiAgICB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zKTtcblxuICBEdXBsZXguY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZSA9IHtcbiAgICBhZnRlclRyYW5zZm9ybTogYWZ0ZXJUcmFuc2Zvcm0uYmluZCh0aGlzKSxcbiAgICBuZWVkVHJhbnNmb3JtOiBmYWxzZSxcbiAgICB0cmFuc2Zvcm1pbmc6IGZhbHNlLFxuICAgIHdyaXRlY2I6IG51bGwsXG4gICAgd3JpdGVjaHVuazogbnVsbCxcbiAgICB3cml0ZWVuY29kaW5nOiBudWxsXG4gIH07XG5cbiAgLy8gc3RhcnQgb3V0IGFza2luZyBmb3IgYSByZWFkYWJsZSBldmVudCBvbmNlIGRhdGEgaXMgdHJhbnNmb3JtZWQuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAvLyB3ZSBoYXZlIGltcGxlbWVudGVkIHRoZSBfcmVhZCBtZXRob2QsIGFuZCBkb25lIHRoZSBvdGhlciB0aGluZ3NcbiAgLy8gdGhhdCBSZWFkYWJsZSB3YW50cyBiZWZvcmUgdGhlIGZpcnN0IF9yZWFkIGNhbGwsIHNvIHVuc2V0IHRoZVxuICAvLyBzeW5jIGd1YXJkIGZsYWcuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fdHJhbnNmb3JtID0gb3B0aW9ucy50cmFuc2Zvcm07XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmx1c2ggPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZsdXNoID0gb3B0aW9ucy5mbHVzaDtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIHdyaXRhYmxlIHNpZGUgZmluaXNoZXMsIHRoZW4gZmx1c2ggb3V0IGFueXRoaW5nIHJlbWFpbmluZy5cbiAgdGhpcy5vbigncHJlZmluaXNoJywgcHJlZmluaXNoKTtcbn1cblxuZnVuY3Rpb24gcHJlZmluaXNoKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgdGhpcy5fZmx1c2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLl9mbHVzaChmdW5jdGlvbiAoZXIsIGRhdGEpIHtcbiAgICAgIGRvbmUoX3RoaXMsIGVyLCBkYXRhKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBkb25lKHRoaXMsIG51bGwsIG51bGwpO1xuICB9XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ190cmFuc2Zvcm0oKSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fCBycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufTtcblxuLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS5cbi8vIF90cmFuc2Zvcm0gZG9lcyBhbGwgdGhlIHdvcmsuXG4vLyBUaGF0IHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhlIHJlYWRhYmxlIHNpZGUgd2FudHMgbW9yZSBkYXRhLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmIHRzLndyaXRlY2IgJiYgIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7XG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG4gICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gIH1cbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICBEdXBsZXgucHJvdG90eXBlLl9kZXN0cm95LmNhbGwodGhpcywgZXJyLCBmdW5jdGlvbiAoZXJyMikge1xuICAgIGNiKGVycjIpO1xuICAgIF90aGlzMi5lbWl0KCdjbG9zZScpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGRvbmUoc3RyZWFtLCBlciwgZGF0YSkge1xuICBpZiAoZXIpIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG5cbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgaWYgKHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHdzLmxlbmd0aCAhPSAwJyk7XG5cbiAgaWYgKHN0cmVhbS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiBzdGlsbCB0cmFuc2Zvcm1pbmcnKTtcblxuICByZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7XG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIEEgYml0IHNpbXBsZXIgdGhhbiByZWFkYWJsZSBzdHJlYW1zLlxuLy8gSW1wbGVtZW50IGFuIGFzeW5jIC5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXG4vLyB0aGUgZHJhaW4gZXZlbnQgZW1pc3Npb24gYW5kIGJ1ZmZlcmluZy5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRhYmxlO1xuXG4vKiA8cmVwbGFjZW1lbnQ+ICovXG5mdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRoaXMuY2h1bmsgPSBjaHVuaztcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICB0aGlzLmNhbGxiYWNrID0gY2I7XG4gIHRoaXMubmV4dCA9IG51bGw7XG59XG5cbi8vIEl0IHNlZW1zIGEgbGlua2VkIGxpc3QgYnV0IGl0IGlzIG5vdFxuLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2UgZm9yIGVhY2ggc3RyZWFtXG5mdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5lbnRyeSA9IG51bGw7XG4gIHRoaXMuZmluaXNoID0gZnVuY3Rpb24gKCkge1xuICAgIG9uQ29ya2VkRmluaXNoKF90aGlzLCBzdGF0ZSk7XG4gIH07XG59XG4vKiA8L3JlcGxhY2VtZW50PiAqL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGFzeW5jV3JpdGUgPSAhcHJvY2Vzcy5icm93c2VyICYmIFsndjAuMTAnLCAndjAuOS4nXS5pbmRleE9mKHByb2Nlc3MudmVyc2lvbi5zbGljZSgwLCA1KSkgPiAtMSA/IHNldEltbWVkaWF0ZSA6IHBuYS5uZXh0VGljaztcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5Xcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGludGVybmFsVXRpbCA9IHtcbiAgZGVwcmVjYXRlOiByZXF1aXJlKCd1dGlsLWRlcHJlY2F0ZScpXG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG5cbnV0aWwuaW5oZXJpdHMoV3JpdGFibGUsIFN0cmVhbSk7XG5cbmZ1bmN0aW9uIG5vcCgpIHt9XG5cbmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgb3Igbm90IHRoaXMgc3RyZWFtXG4gIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggd3JpdGUoKSBzdGFydHMgcmV0dXJuaW5nIGZhbHNlXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXG4gIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKClcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHdyaXRhYmxlSHdtID0gb3B0aW9ucy53cml0YWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAod3JpdGFibGVId20gfHwgd3JpdGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSB3cml0YWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gaWYgX2ZpbmFsIGhhcyBiZWVuIGNhbGxlZFxuICB0aGlzLmZpbmFsQ2FsbGVkID0gZmFsc2U7XG5cbiAgLy8gZHJhaW4gZXZlbnQgZmxhZy5cbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKClcbiAgdGhpcy5lbmRpbmcgPSBmYWxzZTtcbiAgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZFxuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cbiAgdGhpcy5sZW5ndGggPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG4gIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuXG4gIC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcbiAgdGhpcy5jb3JrZWQgPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24gKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcbiAgdGhpcy53cml0ZWNiID0gbnVsbDtcblxuICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG4gIHRoaXMud3JpdGVsZW4gPSAwO1xuXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcblxuICAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrc1xuICAvLyB0aGlzIG11c3QgYmUgMCBiZWZvcmUgJ2ZpbmlzaCcgY2FuIGJlIGVtaXR0ZWRcbiAgdGhpcy5wZW5kaW5nY2IgPSAwO1xuXG4gIC8vIGVtaXQgcHJlZmluaXNoIGlmIHRoZSBvbmx5IHRoaW5nIHdlJ3JlIHdhaXRpbmcgZm9yIGlzIF93cml0ZSBjYnNcbiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcbiAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXG4gIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG5cbiAgLy8gY291bnQgYnVmZmVyZWQgcmVxdWVzdHNcbiAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG5cbiAgLy8gYWxsb2NhdGUgdGhlIGZpcnN0IENvcmtlZFJlcXVlc3QsIHRoZXJlIGlzIGFsd2F5c1xuICAvLyBvbmUgYWxsb2NhdGVkIGFuZCBmcmVlIHRvIHVzZSwgYW5kIHdlIG1haW50YWluIGF0IG1vc3QgdHdvXG4gIHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3QodGhpcyk7XG59XG5cbldyaXRhYmxlU3RhdGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uIGdldEJ1ZmZlcigpIHtcbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmJ1ZmZlcmVkUmVxdWVzdDtcbiAgdmFyIG91dCA9IFtdO1xuICB3aGlsZSAoY3VycmVudCkge1xuICAgIG91dC5wdXNoKGN1cnJlbnQpO1xuICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbihmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RhdGUucHJvdG90eXBlLCAnYnVmZmVyJywge1xuICAgICAgZ2V0OiBpbnRlcm5hbFV0aWwuZGVwcmVjYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCk7XG4gICAgICB9LCAnX3dyaXRhYmxlU3RhdGUuYnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBfd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIgJyArICdpbnN0ZWFkLicsICdERVAwMDAzJylcbiAgICB9KTtcbiAgfSBjYXRjaCAoXykge31cbn0pKCk7XG5cbi8vIFRlc3QgX3dyaXRhYmxlU3RhdGUgZm9yIGluaGVyaXRhbmNlIHRvIGFjY291bnQgZm9yIER1cGxleCBzdHJlYW1zLFxuLy8gd2hvc2UgcHJvdG90eXBlIGNoYWluIG9ubHkgcG9pbnRzIHRvIFJlYWRhYmxlLlxudmFyIHJlYWxIYXNJbnN0YW5jZTtcbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5oYXNJbnN0YW5jZSAmJiB0eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZSwgU3ltYm9sLmhhc0luc3RhbmNlLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGlmIChyZWFsSGFzSW5zdGFuY2UuY2FsbCh0aGlzLCBvYmplY3QpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICh0aGlzICE9PSBXcml0YWJsZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICByZXR1cm4gb2JqZWN0ICYmIG9iamVjdC5fd3JpdGFibGVTdGF0ZSBpbnN0YW5jZW9mIFdyaXRhYmxlU3RhdGU7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgdGhpcztcbiAgfTtcbn1cblxuZnVuY3Rpb24gV3JpdGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIC8vIFdyaXRhYmxlIGN0b3IgaXMgYXBwbGllZCB0byBEdXBsZXhlcywgdG9vLlxuICAvLyBgcmVhbEhhc0luc3RhbmNlYCBpcyBuZWNlc3NhcnkgYmVjYXVzZSB1c2luZyBwbGFpbiBgaW5zdGFuY2VvZmBcbiAgLy8gd291bGQgcmV0dXJuIGZhbHNlLCBhcyBubyBgX3dyaXRhYmxlU3RhdGVgIHByb3BlcnR5IGlzIGF0dGFjaGVkLlxuXG4gIC8vIFRyeWluZyB0byB1c2UgdGhlIGN1c3RvbSBgaW5zdGFuY2VvZmAgZm9yIFdyaXRhYmxlIGhlcmUgd2lsbCBhbHNvIGJyZWFrIHRoZVxuICAvLyBOb2RlLmpzIExhenlUcmFuc2Zvcm0gaW1wbGVtZW50YXRpb24sIHdoaWNoIGhhcyBhIG5vbi10cml2aWFsIGdldHRlciBmb3JcbiAgLy8gYF93cml0YWJsZVN0YXRlYCB0aGF0IHdvdWxkIGxlYWQgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICBpZiAoIXJlYWxIYXNJbnN0YW5jZS5jYWxsKFdyaXRhYmxlLCB0aGlzKSAmJiAhKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSB7XG4gICAgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcbiAgfVxuXG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUgPSBuZXcgV3JpdGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3kuXG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRlID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZSA9IG9wdGlvbnMud3JpdGU7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGV2ID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZXYgPSBvcHRpb25zLndyaXRldjtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbmFsID09PSAnZnVuY3Rpb24nKSB0aGlzLl9maW5hbCA9IG9wdGlvbnMuZmluYWw7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKSk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVycm9yKCd3cml0ZSBhZnRlciBlbmQnKTtcbiAgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbn1cblxuLy8gQ2hlY2tzIHRoYXQgYSB1c2VyLXN1cHBsaWVkIGNodW5rIGlzIHZhbGlkLCBlc3BlY2lhbGx5IGZvciB0aGUgcGFydGljdWxhclxuLy8gbW9kZSB0aGUgc3RyZWFtIGlzIGluLiBDdXJyZW50bHkgdGhpcyBtZWFucyB0aGF0IGBudWxsYCBpcyBuZXZlciBhY2NlcHRlZFxuLy8gYW5kIHVuZGVmaW5lZC9ub24tc3RyaW5nIHZhbHVlcyBhcmUgb25seSBhbGxvd2VkIGluIG9iamVjdCBtb2RlLlxuZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcbiAgdmFyIHZhbGlkID0gdHJ1ZTtcbiAgdmFyIGVyID0gZmFsc2U7XG5cbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbScpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIGlmIChlcikge1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICB2YWxpZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWxpZDtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuICB2YXIgaXNCdWYgPSAhc3RhdGUub2JqZWN0TW9kZSAmJiBfaXNVaW50OEFycmF5KGNodW5rKTtcblxuICBpZiAoaXNCdWYgJiYgIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIHtcbiAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGlzQnVmKSBlbmNvZGluZyA9ICdidWZmZXInO2Vsc2UgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7XG5cbiAgaWYgKHN0YXRlLmVuZGVkKSB3cml0ZUFmdGVyRW5kKHRoaXMsIGNiKTtlbHNlIGlmIChpc0J1ZiB8fCB2YWxpZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgY2IpKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgcmV0ID0gd3JpdGVPckJ1ZmZlcih0aGlzLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIHN0YXRlLmNvcmtlZCsrO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkLS07XG5cbiAgICBpZiAoIXN0YXRlLndyaXRpbmcgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgLy8gbm9kZTo6UGFyc2VFbmNvZGluZygpIHJlcXVpcmVzIGxvd2VyIGNhc2UuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7XG4gIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuICByZXR1cm4gY2h1bms7XG59XG5cbi8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xuLy8gaW4gdGhlIHF1ZXVlLCBhbmQgd2FpdCBvdXIgdHVybi4gIE90aGVyd2lzZSwgY2FsbCBfd3JpdGVcbi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuXG5mdW5jdGlvbiB3cml0ZU9yQnVmZmVyKHN0cmVhbSwgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGlmICghaXNCdWYpIHtcbiAgICB2YXIgbmV3Q2h1bmsgPSBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKTtcbiAgICBpZiAoY2h1bmsgIT09IG5ld0NodW5rKSB7XG4gICAgICBpc0J1ZiA9IHRydWU7XG4gICAgICBlbmNvZGluZyA9ICdidWZmZXInO1xuICAgICAgY2h1bmsgPSBuZXdDaHVuaztcbiAgICB9XG4gIH1cbiAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gIHN0YXRlLmxlbmd0aCArPSBsZW47XG5cbiAgdmFyIHJldCA9IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIC8vIHdlIG11c3QgZW5zdXJlIHRoYXQgcHJldmlvdXMgbmVlZERyYWluIHdpbGwgbm90IGJlIHJlc2V0IHRvIGZhbHNlLlxuICBpZiAoIXJldCkgc3RhdGUubmVlZERyYWluID0gdHJ1ZTtcblxuICBpZiAoc3RhdGUud3JpdGluZyB8fCBzdGF0ZS5jb3JrZWQpIHtcbiAgICB2YXIgbGFzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IHtcbiAgICAgIGNodW5rOiBjaHVuayxcbiAgICAgIGVuY29kaW5nOiBlbmNvZGluZyxcbiAgICAgIGlzQnVmOiBpc0J1ZixcbiAgICAgIGNhbGxiYWNrOiBjYixcbiAgICAgIG5leHQ6IG51bGxcbiAgICB9O1xuICAgIGlmIChsYXN0KSB7XG4gICAgICBsYXN0Lm5leHQgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCArPSAxO1xuICB9IGVsc2Uge1xuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHdyaXRldiwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHN0YXRlLndyaXRlbGVuID0gbGVuO1xuICBzdGF0ZS53cml0ZWNiID0gY2I7XG4gIHN0YXRlLndyaXRpbmcgPSB0cnVlO1xuICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgaWYgKHdyaXRldikgc3RyZWFtLl93cml0ZXYoY2h1bmssIHN0YXRlLm9ud3JpdGUpO2Vsc2Ugc3RyZWFtLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIHN0YXRlLm9ud3JpdGUpO1xuICBzdGF0ZS5zeW5jID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpIHtcbiAgLS1zdGF0ZS5wZW5kaW5nY2I7XG5cbiAgaWYgKHN5bmMpIHtcbiAgICAvLyBkZWZlciB0aGUgY2FsbGJhY2sgaWYgd2UgYXJlIGJlaW5nIGNhbGxlZCBzeW5jaHJvbm91c2x5XG4gICAgLy8gdG8gYXZvaWQgcGlsaW5nIHVwIHRoaW5ncyBvbiB0aGUgc3RhY2tcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYW5kIGl0IHdpbGwgYWx3YXlzIGhhcHBlblxuICAgIC8vIGFmdGVyIGVycm9yXG4gICAgcG5hLm5leHRUaWNrKGZpbmlzaE1heWJlLCBzdHJlYW0sIHN0YXRlKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNhbGxlciBleHBlY3QgdGhpcyB0byBoYXBwZW4gYmVmb3JlIGlmXG4gICAgLy8gaXQgaXMgYXN5bmNcbiAgICBjYihlcik7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBidXQgZmluaXNoIG11c3RcbiAgICAvLyBhbHdheXMgZm9sbG93IGVycm9yXG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKSB7XG4gIHN0YXRlLndyaXRpbmcgPSBmYWxzZTtcbiAgc3RhdGUud3JpdGVjYiA9IG51bGw7XG4gIHN0YXRlLmxlbmd0aCAtPSBzdGF0ZS53cml0ZWxlbjtcbiAgc3RhdGUud3JpdGVsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlKHN0cmVhbSwgZXIpIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgc3luYyA9IHN0YXRlLnN5bmM7XG4gIHZhciBjYiA9IHN0YXRlLndyaXRlY2I7XG5cbiAgb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKTtcblxuICBpZiAoZXIpIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpO2Vsc2Uge1xuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0XG4gICAgdmFyIGZpbmlzaGVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG5cbiAgICBpZiAoIWZpbmlzaGVkICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSB7XG4gICAgICBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoc3luYykge1xuICAgICAgLyo8cmVwbGFjZW1lbnQ+Ki9cbiAgICAgIGFzeW5jV3JpdGUoYWZ0ZXJXcml0ZSwgc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICAgIC8qPC9yZXBsYWNlbWVudD4qL1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKSB7XG4gIGlmICghZmluaXNoZWQpIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKTtcbiAgc3RhdGUucGVuZGluZ2NiLS07XG4gIGNiKCk7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG4vLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndFxuLy8gZW1pdCAnZHJhaW4nIGJlZm9yZSB0aGUgd3JpdGUoKSBjb25zdW1lciBnZXRzIHRoZSAnZmFsc2UnIHJldHVyblxuLy8gdmFsdWUsIGFuZCBoYXMgYSBjaGFuY2UgdG8gYXR0YWNoIGEgJ2RyYWluJyBsaXN0ZW5lci5cbmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUubmVlZERyYWluKSB7XG4gICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XG4gIH1cbn1cblxuLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcbmZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7XG4gIHZhciBlbnRyeSA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdDtcblxuICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkge1xuICAgIC8vIEZhc3QgY2FzZSwgd3JpdGUgZXZlcnl0aGluZyB1c2luZyBfd3JpdGV2KClcbiAgICB2YXIgbCA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50O1xuICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobCk7XG4gICAgdmFyIGhvbGRlciA9IHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZTtcbiAgICBob2xkZXIuZW50cnkgPSBlbnRyeTtcblxuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdmFyIGFsbEJ1ZmZlcnMgPSB0cnVlO1xuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgYnVmZmVyW2NvdW50XSA9IGVudHJ5O1xuICAgICAgaWYgKCFlbnRyeS5pc0J1ZikgYWxsQnVmZmVycyA9IGZhbHNlO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgY291bnQgKz0gMTtcbiAgICB9XG4gICAgYnVmZmVyLmFsbEJ1ZmZlcnMgPSBhbGxCdWZmZXJzO1xuXG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB0cnVlLCBzdGF0ZS5sZW5ndGgsIGJ1ZmZlciwgJycsIGhvbGRlci5maW5pc2gpO1xuXG4gICAgLy8gZG9Xcml0ZSBpcyBhbG1vc3QgYWx3YXlzIGFzeW5jLCBkZWZlciB0aGVzZSB0byBzYXZlIGEgYml0IG9mIHRpbWVcbiAgICAvLyBhcyB0aGUgaG90IHBhdGggZW5kcyB3aXRoIGRvV3JpdGVcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgICBpZiAoaG9sZGVyLm5leHQpIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGhvbGRlci5uZXh0O1xuICAgICAgaG9sZGVyLm5leHQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdChzdGF0ZSk7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lXG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuaztcbiAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nO1xuICAgICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudC0tO1xuICAgICAgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5XG4gICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cbiAgICAgIGlmIChzdGF0ZS53cml0aW5nKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlbnRyeSA9PT0gbnVsbCkgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIH1cblxuICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBlbnRyeTtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobmV3IEVycm9yKCdfd3JpdGUoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRldiA9IG51bGw7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmICh0eXBlb2YgY2h1bmsgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGNodW5rO1xuICAgIGNodW5rID0gbnVsbDtcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoY2h1bmsgIT09IG51bGwgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCkgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpO1xuXG4gIC8vIC5lbmQoKSBmdWxseSB1bmNvcmtzXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQgPSAxO1xuICAgIHRoaXMudW5jb3JrKCk7XG4gIH1cblxuICAvLyBpZ25vcmUgdW5uZWNlc3NhcnkgZW5kKCkgY2FsbHMuXG4gIGlmICghc3RhdGUuZW5kaW5nICYmICFzdGF0ZS5maW5pc2hlZCkgZW5kV3JpdGFibGUodGhpcywgc3RhdGUsIGNiKTtcbn07XG5cbmZ1bmN0aW9uIG5lZWRGaW5pc2goc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLmVuZGluZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID09PSBudWxsICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUud3JpdGluZztcbn1cbmZ1bmN0aW9uIGNhbGxGaW5hbChzdHJlYW0sIHN0YXRlKSB7XG4gIHN0cmVhbS5fZmluYWwoZnVuY3Rpb24gKGVycikge1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfVxuICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCAmJiAhc3RhdGUuZmluYWxDYWxsZWQpIHtcbiAgICBpZiAodHlwZW9mIHN0cmVhbS5fZmluYWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgICAgc3RhdGUuZmluYWxDYWxsZWQgPSB0cnVlO1xuICAgICAgcG5hLm5leHRUaWNrKGNhbGxGaW5hbCwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbmVlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuICBpZiAobmVlZCkge1xuICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcbiAgICBpZiAoc3RhdGUucGVuZGluZ2NiID09PSAwKSB7XG4gICAgICBzdGF0ZS5maW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgnZmluaXNoJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZWVkO1xufVxuXG5mdW5jdGlvbiBlbmRXcml0YWJsZShzdHJlYW0sIHN0YXRlLCBjYikge1xuICBzdGF0ZS5lbmRpbmcgPSB0cnVlO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgaWYgKGNiKSB7XG4gICAgaWYgKHN0YXRlLmZpbmlzaGVkKSBwbmEubmV4dFRpY2soY2IpO2Vsc2Ugc3RyZWFtLm9uY2UoJ2ZpbmlzaCcsIGNiKTtcbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbkNvcmtlZEZpbmlzaChjb3JrUmVxLCBzdGF0ZSwgZXJyKSB7XG4gIHZhciBlbnRyeSA9IGNvcmtSZXEuZW50cnk7XG4gIGNvcmtSZXEuZW50cnkgPSBudWxsO1xuICB3aGlsZSAoZW50cnkpIHtcbiAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBjYihlcnIpO1xuICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgfVxuICBpZiAoc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlKSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlLm5leHQgPSBjb3JrUmVxO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGNvcmtSZXE7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuV3JpdGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLmVuZCgpO1xuICBjYihlcnIpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5mdW5jdGlvbiBjb3B5QnVmZmVyKHNyYywgdGFyZ2V0LCBvZmZzZXQpIHtcbiAgc3JjLmNvcHkodGFyZ2V0LCBvZmZzZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQnVmZmVyTGlzdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnVmZmVyTGlzdCk7XG5cbiAgICB0aGlzLmhlYWQgPSBudWxsO1xuICAgIHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2godikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogbnVsbCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHRoaXMudGFpbC5uZXh0ID0gZW50cnk7ZWxzZSB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiB1bnNoaWZ0KHYpIHtcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IHRoaXMuaGVhZCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgdGhpcy50YWlsID0gZW50cnk7XG4gICAgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uIHNoaWZ0KCkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHZhciByZXQgPSB0aGlzLmhlYWQuZGF0YTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDtcbiAgICAtLXRoaXMubGVuZ3RoO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gam9pbihzKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIHJldCA9ICcnICsgcC5kYXRhO1xuICAgIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgICByZXQgKz0gcyArIHAuZGF0YTtcbiAgICB9cmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQobikge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHJldHVybiB0aGlzLmhlYWQuZGF0YTtcbiAgICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4gPj4+IDApO1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAocCkge1xuICAgICAgY29weUJ1ZmZlcihwLmRhdGEsIHJldCwgaSk7XG4gICAgICBpICs9IHAuZGF0YS5sZW5ndGg7XG4gICAgICBwID0gcC5uZXh0O1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIHJldHVybiBCdWZmZXJMaXN0O1xufSgpO1xuXG5pZiAodXRpbCAmJiB1dGlsLmluc3BlY3QgJiYgdXRpbC5pbnNwZWN0LmN1c3RvbSkge1xuICBtb2R1bGUuZXhwb3J0cy5wcm90b3R5cGVbdXRpbC5pbnNwZWN0LmN1c3RvbV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9iaiA9IHV0aWwuaW5zcGVjdCh7IGxlbmd0aDogdGhpcy5sZW5ndGggfSk7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZSArICcgJyArIG9iajtcbiAgfTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8vIHVuZG9jdW1lbnRlZCBjYigpIEFQSSwgbmVlZGVkIGZvciBjb3JlLCBub3QgZm9yIHB1YmxpYyBBUElcbmZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIHZhciB3cml0YWJsZURlc3Ryb3llZCA9IHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG5cbiAgaWYgKHJlYWRhYmxlRGVzdHJveWVkIHx8IHdyaXRhYmxlRGVzdHJveWVkKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSBpZiAoZXJyICYmICghdGhpcy5fd3JpdGFibGVTdGF0ZSB8fCAhdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gd2Ugc2V0IGRlc3Ryb3llZCB0byB0cnVlIGJlZm9yZSBmaXJpbmcgZXJyb3IgY2FsbGJhY2tzIGluIG9yZGVyXG4gIC8vIHRvIG1ha2UgaXQgcmUtZW50cmFuY2Ugc2FmZSBpbiBjYXNlIGRlc3Ryb3koKSBpcyBjYWxsZWQgd2l0aGluIGNhbGxiYWNrc1xuXG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgLy8gaWYgdGhpcyBpcyBhIGR1cGxleCBzdHJlYW0gbWFyayB0aGUgd3JpdGFibGUgcGFydCBhcyBkZXN0cm95ZWQgYXMgd2VsbFxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIHRoaXMuX2Rlc3Ryb3koZXJyIHx8IG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoIWNiICYmIGVycikge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCBfdGhpcywgZXJyKTtcbiAgICAgIGlmIChfdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBfdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdW5kZXN0cm95KCkge1xuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRFcnJvck5UKHNlbGYsIGVycikge1xuICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gIHVuZGVzdHJveTogdW5kZXN0cm95XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAoIXByb2Nlc3MudmVyc2lvbiB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MC4nKSA9PT0gMCB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS4nKSA9PT0gMCAmJiBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuOC4nKSAhPT0gMCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHsgbmV4dFRpY2s6IG5leHRUaWNrIH07XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3Ncbn1cblxuZnVuY3Rpb24gbmV4dFRpY2soZm4sIGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiY2FsbGJhY2tcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGFyZ3MsIGk7XG4gIHN3aXRjaCAobGVuKSB7XG4gIGNhc2UgMDpcbiAgY2FzZSAxOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZuKTtcbiAgY2FzZSAyOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja09uZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSk7XG4gICAgfSk7XG4gIGNhc2UgMzpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUd28oKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIpO1xuICAgIH0pO1xuICBjYXNlIDQ6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVGhyZWUoKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIH0pO1xuICBkZWZhdWx0OlxuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhcmdzLmxlbmd0aCkge1xuICAgICAgYXJnc1tpKytdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2soKSB7XG4gICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxufVxuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIGlzRW5jb2RpbmcgPSBCdWZmZXIuaXNFbmNvZGluZyB8fCBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgZW5jb2RpbmcgPSAnJyArIGVuY29kaW5nO1xuICBzd2l0Y2ggKGVuY29kaW5nICYmIGVuY29kaW5nLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOmNhc2UgJ3V0ZjgnOmNhc2UgJ3V0Zi04JzpjYXNlICdhc2NpaSc6Y2FzZSAnYmluYXJ5JzpjYXNlICdiYXNlNjQnOmNhc2UgJ3VjczInOmNhc2UgJ3Vjcy0yJzpjYXNlICd1dGYxNmxlJzpjYXNlICd1dGYtMTZsZSc6Y2FzZSAncmF3JzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9ub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgaWYgKCFlbmMpIHJldHVybiAndXRmOCc7XG4gIHZhciByZXRyaWVkO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jKSB7XG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuICd1dGY4JztcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiAndXRmMTZsZSc7XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuICdsYXRpbjEnO1xuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBlbmM7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAocmV0cmllZCkgcmV0dXJuOyAvLyB1bmRlZmluZWRcbiAgICAgICAgZW5jID0gKCcnICsgZW5jKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXRyaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIERvIG5vdCBjYWNoZSBgQnVmZmVyLmlzRW5jb2RpbmdgIHdoZW4gY2hlY2tpbmcgZW5jb2RpbmcgbmFtZXMgYXMgc29tZVxuLy8gbW9kdWxlcyBtb25rZXktcGF0Y2ggaXQgdG8gc3VwcG9ydCBhZGRpdGlvbmFsIGVuY29kaW5nc1xuZnVuY3Rpb24gbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIHZhciBuZW5jID0gX25vcm1hbGl6ZUVuY29kaW5nKGVuYyk7XG4gIGlmICh0eXBlb2YgbmVuYyAhPT0gJ3N0cmluZycgJiYgKEJ1ZmZlci5pc0VuY29kaW5nID09PSBpc0VuY29kaW5nIHx8ICFpc0VuY29kaW5nKGVuYykpKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmMpO1xuICByZXR1cm4gbmVuYyB8fCBlbmM7XG59XG5cbi8vIFN0cmluZ0RlY29kZXIgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGZvciBlZmZpY2llbnRseSBzcGxpdHRpbmcgYSBzZXJpZXMgb2Zcbi8vIGJ1ZmZlcnMgaW50byBhIHNlcmllcyBvZiBKUyBzdHJpbmdzIHdpdGhvdXQgYnJlYWtpbmcgYXBhcnQgbXVsdGktYnl0ZVxuLy8gY2hhcmFjdGVycy5cbmV4cG9ydHMuU3RyaW5nRGVjb2RlciA9IFN0cmluZ0RlY29kZXI7XG5mdW5jdGlvbiBTdHJpbmdEZWNvZGVyKGVuY29kaW5nKSB7XG4gIHRoaXMuZW5jb2RpbmcgPSBub3JtYWxpemVFbmNvZGluZyhlbmNvZGluZyk7XG4gIHZhciBuYjtcbiAgc3dpdGNoICh0aGlzLmVuY29kaW5nKSB7XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICB0aGlzLnRleHQgPSB1dGYxNlRleHQ7XG4gICAgICB0aGlzLmVuZCA9IHV0ZjE2RW5kO1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndXRmOCc6XG4gICAgICB0aGlzLmZpbGxMYXN0ID0gdXRmOEZpbGxMYXN0O1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHRoaXMudGV4dCA9IGJhc2U2NFRleHQ7XG4gICAgICB0aGlzLmVuZCA9IGJhc2U2NEVuZDtcbiAgICAgIG5iID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLndyaXRlID0gc2ltcGxlV3JpdGU7XG4gICAgICB0aGlzLmVuZCA9IHNpbXBsZUVuZDtcbiAgICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgdGhpcy5sYXN0VG90YWwgPSAwO1xuICB0aGlzLmxhc3RDaGFyID0gQnVmZmVyLmFsbG9jVW5zYWZlKG5iKTtcbn1cblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmIChidWYubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gIHZhciByO1xuICB2YXIgaTtcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICByID0gdGhpcy5maWxsTGFzdChidWYpO1xuICAgIGlmIChyID09PSB1bmRlZmluZWQpIHJldHVybiAnJztcbiAgICBpID0gdGhpcy5sYXN0TmVlZDtcbiAgICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgfSBlbHNlIHtcbiAgICBpID0gMDtcbiAgfVxuICBpZiAoaSA8IGJ1Zi5sZW5ndGgpIHJldHVybiByID8gciArIHRoaXMudGV4dChidWYsIGkpIDogdGhpcy50ZXh0KGJ1ZiwgaSk7XG4gIHJldHVybiByIHx8ICcnO1xufTtcblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gdXRmOEVuZDtcblxuLy8gUmV0dXJucyBvbmx5IGNvbXBsZXRlIGNoYXJhY3RlcnMgaW4gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLnRleHQgPSB1dGY4VGV4dDtcblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBwYXJ0aWFsIG5vbi1VVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZmlsbExhc3QgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59O1xuXG4vLyBDaGVja3MgdGhlIHR5cGUgb2YgYSBVVEYtOCBieXRlLCB3aGV0aGVyIGl0J3MgQVNDSUksIGEgbGVhZGluZyBieXRlLCBvciBhXG4vLyBjb250aW51YXRpb24gYnl0ZS5cbmZ1bmN0aW9uIHV0ZjhDaGVja0J5dGUoYnl0ZSkge1xuICBpZiAoYnl0ZSA8PSAweDdGKSByZXR1cm4gMDtlbHNlIGlmIChieXRlID4+IDUgPT09IDB4MDYpIHJldHVybiAyO2Vsc2UgaWYgKGJ5dGUgPj4gNCA9PT0gMHgwRSkgcmV0dXJuIDM7ZWxzZSBpZiAoYnl0ZSA+PiAzID09PSAweDFFKSByZXR1cm4gNDtcbiAgcmV0dXJuIC0xO1xufVxuXG4vLyBDaGVja3MgYXQgbW9zdCAzIGJ5dGVzIGF0IHRoZSBlbmQgb2YgYSBCdWZmZXIgaW4gb3JkZXIgdG8gZGV0ZWN0IGFuXG4vLyBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyLiBUaGUgdG90YWwgbnVtYmVyIG9mIGJ5dGVzICgyLCAzLCBvciA0KVxuLy8gbmVlZGVkIHRvIGNvbXBsZXRlIHRoZSBVVEYtOCBjaGFyYWN0ZXIgKGlmIGFwcGxpY2FibGUpIGFyZSByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0luY29tcGxldGUoc2VsZiwgYnVmLCBpKSB7XG4gIHZhciBqID0gYnVmLmxlbmd0aCAtIDE7XG4gIGlmIChqIDwgaSkgcmV0dXJuIDA7XG4gIHZhciBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAxO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSkgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDI7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkge1xuICAgICAgaWYgKG5iID09PSAyKSBuYiA9IDA7ZWxzZSBzZWxmLmxhc3ROZWVkID0gbmIgLSAzO1xuICAgIH1cbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbi8vIFZhbGlkYXRlcyBhcyBtYW55IGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciBhc1xuLy8gbmVlZGVkIG9yIGFyZSBhdmFpbGFibGUuIElmIHdlIHNlZSBhIG5vbi1jb250aW51YXRpb24gYnl0ZSB3aGVyZSB3ZSBleHBlY3Rcbi8vIG9uZSwgd2UgXCJyZXBsYWNlXCIgdGhlIHZhbGlkYXRlZCBjb250aW51YXRpb24gYnl0ZXMgd2UndmUgc2VlbiBzbyBmYXIgd2l0aFxuLy8gVVRGLTggcmVwbGFjZW1lbnQgY2hhcmFjdGVycyAoJ1xcdWZmZmQnKSwgdG8gbWF0Y2ggdjgncyBVVEYtOCBkZWNvZGluZ1xuLy8gYmVoYXZpb3IuIFRoZSBjb250aW51YXRpb24gYnl0ZSBjaGVjayBpcyBpbmNsdWRlZCB0aHJlZSB0aW1lcyBpbiB0aGUgY2FzZVxuLy8gd2hlcmUgYWxsIG9mIHRoZSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgY2hhcmFjdGVyIGV4aXN0IGluIHRoZSBzYW1lIGJ1ZmZlci5cbi8vIEl0IGlzIGFsc28gZG9uZSB0aGlzIHdheSBhcyBhIHNsaWdodCBwZXJmb3JtYW5jZSBpbmNyZWFzZSBpbnN0ZWFkIG9mIHVzaW5nIGFcbi8vIGxvb3AuXG5mdW5jdGlvbiB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHNlbGYsIGJ1ZiwgcCkge1xuICBpZiAoKGJ1ZlswXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgc2VsZi5sYXN0TmVlZCA9IDA7XG4gICAgcmV0dXJuICdcXHVmZmZkJy5yZXBlYXQocCk7XG4gIH1cbiAgaWYgKHNlbGYubGFzdE5lZWQgPiAxICYmIGJ1Zi5sZW5ndGggPiAxKSB7XG4gICAgaWYgKChidWZbMV0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgc2VsZi5sYXN0TmVlZCA9IDE7XG4gICAgICByZXR1cm4gJ1xcdWZmZmQnLnJlcGVhdChwICsgMSk7XG4gICAgfVxuICAgIGlmIChzZWxmLmxhc3ROZWVkID4gMiAmJiBidWYubGVuZ3RoID4gMikge1xuICAgICAgaWYgKChidWZbMl0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgICBzZWxmLmxhc3ROZWVkID0gMjtcbiAgICAgICAgcmV0dXJuICdcXHVmZmZkJy5yZXBlYXQocCArIDIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXIuXG5mdW5jdGlvbiB1dGY4RmlsbExhc3QoYnVmKSB7XG4gIHZhciBwID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICB2YXIgciA9IHV0ZjhDaGVja0V4dHJhQnl0ZXModGhpcywgYnVmLCBwKTtcbiAgaWYgKHIgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHI7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn1cblxuLy8gUmV0dXJucyBhbGwgY29tcGxldGUgVVRGLTggY2hhcmFjdGVycyBpbiBhIEJ1ZmZlci4gSWYgdGhlIEJ1ZmZlciBlbmRlZCBvbiBhXG4vLyBwYXJ0aWFsIGNoYXJhY3RlciwgdGhlIGNoYXJhY3RlcidzIGJ5dGVzIGFyZSBidWZmZXJlZCB1bnRpbCB0aGUgcmVxdWlyZWRcbi8vIG51bWJlciBvZiBieXRlcyBhcmUgYXZhaWxhYmxlLlxuZnVuY3Rpb24gdXRmOFRleHQoYnVmLCBpKSB7XG4gIHZhciB0b3RhbCA9IHV0ZjhDaGVja0luY29tcGxldGUodGhpcywgYnVmLCBpKTtcbiAgaWYgKCF0aGlzLmxhc3ROZWVkKSByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSk7XG4gIHRoaXMubGFzdFRvdGFsID0gdG90YWw7XG4gIHZhciBlbmQgPSBidWYubGVuZ3RoIC0gKHRvdGFsIC0gdGhpcy5sYXN0TmVlZCk7XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIDAsIGVuZCk7XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpLCBlbmQpO1xufVxuXG4vLyBGb3IgVVRGLTgsIGEgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGZvciBlYWNoIGJ1ZmZlcmVkIGJ5dGUgb2YgYSAocGFydGlhbClcbi8vIGNoYXJhY3RlciBuZWVkcyB0byBiZSBhZGRlZCB0byB0aGUgb3V0cHV0LlxuZnVuY3Rpb24gdXRmOEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyAnXFx1ZmZmZCcucmVwZWF0KHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCk7XG4gIHJldHVybiByO1xufVxuXG4vLyBVVEYtMTZMRSB0eXBpY2FsbHkgbmVlZHMgdHdvIGJ5dGVzIHBlciBjaGFyYWN0ZXIsIGJ1dCBldmVuIGlmIHdlIGhhdmUgYW4gZXZlblxuLy8gbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSwgd2UgbmVlZCB0byBjaGVjayBpZiB3ZSBlbmQgb24gYSBsZWFkaW5nL2hpZ2hcbi8vIHN1cnJvZ2F0ZS4gSW4gdGhhdCBjYXNlLCB3ZSBuZWVkIHRvIHdhaXQgZm9yIHRoZSBuZXh0IHR3byBieXRlcyBpbiBvcmRlciB0b1xuLy8gZGVjb2RlIHRoZSBsYXN0IGNoYXJhY3RlciBwcm9wZXJseS5cbmZ1bmN0aW9uIHV0ZjE2VGV4dChidWYsIGkpIHtcbiAgaWYgKChidWYubGVuZ3RoIC0gaSkgJSAyID09PSAwKSB7XG4gICAgdmFyIHIgPSBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpKTtcbiAgICBpZiAocikge1xuICAgICAgdmFyIGMgPSByLmNoYXJDb2RlQXQoci5sZW5ndGggLSAxKTtcbiAgICAgIGlmIChjID49IDB4RDgwMCAmJiBjIDw9IDB4REJGRikge1xuICAgICAgICB0aGlzLmxhc3ROZWVkID0gMjtcbiAgICAgICAgdGhpcy5sYXN0VG90YWwgPSA0O1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgICAgIHJldHVybiByLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDE7XG4gIHRoaXMubGFzdFRvdGFsID0gMjtcbiAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpLCBidWYubGVuZ3RoIC0gMSk7XG59XG5cbi8vIEZvciBVVEYtMTZMRSB3ZSBkbyBub3QgZXhwbGljaXRseSBhcHBlbmQgc3BlY2lhbCByZXBsYWNlbWVudCBjaGFyYWN0ZXJzIGlmIHdlXG4vLyBlbmQgb24gYSBwYXJ0aWFsIGNoYXJhY3Rlciwgd2Ugc2ltcGx5IGxldCB2OCBoYW5kbGUgdGhhdC5cbmZ1bmN0aW9uIHV0ZjE2RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgdmFyIGVuZCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgICByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ3V0ZjE2bGUnLCAwLCBlbmQpO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRUZXh0KGJ1ZiwgaSkge1xuICB2YXIgbiA9IChidWYubGVuZ3RoIC0gaSkgJSAzO1xuICBpZiAobiA9PT0gMCkgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSk7XG4gIHRoaXMubGFzdE5lZWQgPSAzIC0gbjtcbiAgdGhpcy5sYXN0VG90YWwgPSAzO1xuICBpZiAobiA9PT0gMSkge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGksIGJ1Zi5sZW5ndGggLSBuKTtcbn1cblxuZnVuY3Rpb24gYmFzZTY0RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ2Jhc2U2NCcsIDAsIDMgLSB0aGlzLmxhc3ROZWVkKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFBhc3MgYnl0ZXMgb24gdGhyb3VnaCBmb3Igc2luZ2xlLWJ5dGUgZW5jb2RpbmdzIChlLmcuIGFzY2lpLCBsYXRpbjEsIGhleClcbmZ1bmN0aW9uIHNpbXBsZVdyaXRlKGJ1Zikge1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiBzaW1wbGVFbmQoYnVmKSB7XG4gIHJldHVybiBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcmVhZGFibGUuanMnKTtcbmV4cG9ydHMuU3RyZWFtID0gZXhwb3J0cztcbmV4cG9ydHMuUmVhZGFibGUgPSBleHBvcnRzO1xuZXhwb3J0cy5Xcml0YWJsZSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbmV4cG9ydHMuRHVwbGV4ID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbmV4cG9ydHMuVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMnKTtcbmV4cG9ydHMuUGFzc1Rocm91Z2ggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFkeXN0YXRlID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWR5c3RhdGUnKVxuICAsIHdpbiA9IChuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykpKClcbiAgLCBjb21wbGV0ZSA9ICdjb21wbGV0ZSdcbiAgLCByb290ID0gdHJ1ZVxuICAsIGRvYyA9IHdpbi5kb2N1bWVudFxuICAsIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG4oZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgLy9cbiAgLy8gQmFpbCBvdXQgZWFybHkgaWYgdGhlIGRvY3VtZW50IGlzIGFscmVhZHkgZnVsbHkgbG9hZGVkLiBUaGlzIG1lYW5zIHRoYXQgdGhpc1xuICAvLyBzY3JpcHQgaXMgbG9hZGVkIGFmdGVyIHRoZSBvbmxvYWQgZXZlbnQuXG4gIC8vXG4gIGlmIChjb21wbGV0ZSA9PT0gZG9jLnJlYWR5U3RhdGUpIHtcbiAgICByZXR1cm4gcmVhZHlzdGF0ZS5jaGFuZ2UoY29tcGxldGUpO1xuICB9XG5cbiAgLy9cbiAgLy8gVXNlIGZlYXR1cmUgZGV0ZWN0aW9uIHRvIHNlZSB3aGF0IGtpbmQgb2YgYnJvd3NlciBlbnZpcm9ubWVudCB3ZSdyZSBkZWFsaW5nXG4gIC8vIHdpdGguIE9sZCB2ZXJzaW9ucyBvZiBJbnRlcm5ldCBFeHBsb3JlciBkbyBub3Qgc3VwcG9ydCB0aGUgYWRkRXZlbnRMaXN0ZW5lclxuICAvLyBpbnRlcmZhY2Ugc28gd2UgY2FuIGFsc28gc2FmZWx5IGFzc3VtZSB0aGF0IHdlIG5lZWQgdG8gZmFsbCBiYWNrIHRvIHBvbGxpbmcuXG4gIC8vXG4gIHZhciBtb2Rlcm4gPSAhIWRvYy5hZGRFdmVudExpc3RlbmVyXG4gICAgLCBwcmVmaXggPSBtb2Rlcm4gPyAnJyA6ICdvbidcbiAgICAsIG9uID0gbW9kZXJuID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ2F0dGFjaEV2ZW50J1xuICAgICwgb2ZmID0gbW9kZXJuID8gJ3JlbW92ZUV2ZW50TGlzdGVuZXInIDogJ2RldGFjaEV2ZW50JztcblxuICBpZiAoIW1vZGVybiAmJiAnZnVuY3Rpb24nID09PSB0eXBlb2YgaHRtbC5kb1Njcm9sbCkge1xuICAgIHRyeSB7IHJvb3QgPSAhd2luLmZyYW1lRWxlbWVudDsgfVxuICAgIGNhdGNoIChlKSB7fVxuXG4gICAgaWYgKHJvb3QpIChmdW5jdGlvbiBwb2xsaW5nKCkge1xuICAgICAgdHJ5IHsgaHRtbC5kb1Njcm9sbCgnbGVmdCcpOyB9XG4gICAgICBjYXRjaCAoZSkgeyByZXR1cm4gc2V0VGltZW91dChwb2xsaW5nLCA1MCk7IH1cblxuICAgICAgcmVhZHlzdGF0ZS5jaGFuZ2UoJ2ludGVyYWN0aXZlJyk7XG4gICAgfSgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgdGhlIHZhcmlvdXMgb2YgZXZlbnQgbGlzdGVuZXIgY2FsbHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2dCBTaW1wbGUgRE9NIGV2ZW50LlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGNoYW5nZShldnQpIHtcbiAgICBldnQgPSBldnQgfHwgd2luLmV2ZW50O1xuXG4gICAgaWYgKCdyZWFkeXN0YXRlY2hhbmdlJyA9PT0gZXZ0LnR5cGUpIHtcbiAgICAgIHJlYWR5c3RhdGUuY2hhbmdlKGRvYy5yZWFkeVN0YXRlKTtcbiAgICAgIGlmIChjb21wbGV0ZSAhPT0gZG9jLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoJ2xvYWQnID09PSBldnQudHlwZSkgcmVhZHlzdGF0ZS5jaGFuZ2UoJ2NvbXBsZXRlJyk7XG4gICAgZWxzZSByZWFkeXN0YXRlLmNoYW5nZSgnaW50ZXJhY3RpdmUnKTtcblxuICAgIC8vXG4gICAgLy8gSG91c2Uga2VlcGluZywgcmVtb3ZlIG91ciBhc3NpZ25lZCBldmVudCBsaXN0ZW5lcnMuXG4gICAgLy9cbiAgICAoZXZ0LnR5cGUgPT09ICdsb2FkJyA/IHdpbiA6IGRvYylbb2ZmXShldnQudHlwZSwgY2hhbmdlLCBmYWxzZSk7XG4gIH1cblxuICAvL1xuICAvLyBBc3NpZ24gYSBzaGl0IGxvYWQgb2YgZXZlbnQgbGlzdGVuZXJzIHNvIHdlIGNhbiB1cGRhdGUgb3VyIGludGVybmFsIHN0YXRlLlxuICAvL1xuICBkb2Nbb25dKHByZWZpeCArJ0RPTUNvbnRlbnRMb2FkZWQnLCBjaGFuZ2UsIGZhbHNlKTtcbiAgZG9jW29uXShwcmVmaXggKydyZWFkeXN0YXRlY2hhbmdlJywgY2hhbmdlLCBmYWxzZSk7XG4gIHdpbltvbl0ocHJlZml4ICsnbG9hZCcsIGNoYW5nZSwgZmFsc2UpO1xufSAoKSk7XG5cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIG5ldyBwcm90b3R5cGUgbWV0aG9kIHdoaWNoIHdpbGwgdGhlIGdpdmVuIGZ1bmN0aW9uIG9uY2UgdGhlXG4gKiBkZXNpcmVkIHN0YXRlIGhhcyBiZWVuIHJlYWNoZWQuIFRoZSByZXR1cm5lZCBmdW5jdGlvbiBhY2NlcHRzIDIgYXJndW1lbnRzOlxuICpcbiAqIC0gZm46IFRoZSBhc3NpZ25lZCBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBiZSBjYWxsZWQuXG4gKiAtIGNvbnRleHQ6IENvbnRleHQvdGhpcyB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gd2UgbmVlZCB0byBleGVjdXRlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdGF0ZSBUaGUgc3RhdGUgd2UgbmVlZCB0byBvcGVyYXRlIHVwb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGUoc3RhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByb3h5KGZuLCBjb250ZXh0KSB7XG4gICAgdmFyIHJzID0gdGhpcztcblxuICAgIGlmIChycy5pcyhzdGF0ZSkpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBmbi5jYWxsKGNvbnRleHQsIHJzLnJlYWR5U3RhdGUpO1xuICAgICAgfSwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghcnMuX2V2ZW50c1tzdGF0ZV0pIHJzLl9ldmVudHNbc3RhdGVdID0gW107XG4gICAgICBycy5fZXZlbnRzW3N0YXRlXS5wdXNoKHsgZm46IGZuLCBjb250ZXh0OiBjb250ZXh0IH0pO1xuICAgIH1cblxuICAgIHJldHVybiBycztcbiAgfTtcbn1cblxuLyoqXG4gKiBSUyAocmVhZHlTdGF0ZSkgaW5zdGFuY2UuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBSUygpIHtcbiAgdGhpcy5yZWFkeVN0YXRlID0gUlMuVU5LTk9XTjtcbiAgdGhpcy5fZXZlbnRzID0ge307XG59XG5cbi8qKlxuICogVGhlIGVudmlyb25tZW50IGNhbiBiZSBpbiBkaWZmZXJlbnQgc3RhdGVzLiBUaGUgZm9sbG93aW5nIHN0YXRlcyBhcmVcbiAqIGdlbmVyYXRlZDpcbiAqXG4gKiAtIEFMTDogICAgICAgICBUaGUgSSBkb24ndCByZWFsbHkgZ2l2ZSBhIGZ1Y2sgc3RhdGUuXG4gKiAtIFVOS05PV046ICAgICBXZSBnb3QgYW4gdW5rbm93biByZWFkeVN0YXRlIHdlIHNob3VsZCBzdGFydCBsaXN0ZW5pbmcgZm9yIGV2ZW50cy5cbiAqIC0gTE9BRElORzogICAgIEVudmlyb25tZW50IGlzIGN1cnJlbnRseSBsb2FkaW5nLlxuICogLSBJTlRFUkFDVElWRTogRW52aXJvbm1lbnQgaXMgcmVhZHkgZm9yIG1vZGlmaWNhdGlvbi5cbiAqIC0gQ09NUExFVEU6ICAgIEFsbCByZXNvdXJjZXMgaGF2ZSBiZWVuIGxvYWRlZC5cbiAqXG4gKiBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBvcmRlciBvZiB0aGUgYHN0YXRlc2Agc3RyaW5nL2FycmF5IGlzIG9mIHZpdGFsXG4gKiBpbXBvcnRhbmNlIGFzIGl0J3MgdXNlZCBpbiB0aGUgcmVhZHlTdGF0ZSBjaGVjay5cbiAqXG4gKiBAdHlwZSB7TnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xuUlMuc3RhdGVzID0gJ0FMTCxVTktOT1dOLExPQURJTkcsSU5URVJBQ1RJVkUsQ09NUExFVEUnLnNwbGl0KCcsJyk7XG5cbmZvciAodmFyIHMgPSAwLCBzdGF0ZTsgcyA8IFJTLnN0YXRlcy5sZW5ndGg7IHMrKykge1xuICBzdGF0ZSA9IFJTLnN0YXRlc1tzXTtcblxuICBSU1tzdGF0ZV0gPSBSUy5wcm90b3R5cGVbc3RhdGVdID0gcztcbiAgUlMucHJvdG90eXBlW3N0YXRlLnRvTG93ZXJDYXNlKCldID0gZ2VuZXJhdGUoc3RhdGUpO1xufVxuXG4vKipcbiAqIEEgY2hhbmdlIGluIHRoZSBlbnZpcm9ubWVudCBoYXMgYmVlbiBkZXRlY3RlZCBzbyB3ZSBuZWVkIHRvIGNoYW5nZSBvdXJcbiAqIHJlYWR5U3RhdGUgYW5kIGNhbGwgYXNzaWduZWQgZXZlbnQgbGlzdGVuZXJzIGFuZCB0aG9zZSBvZiB0aGUgcHJldmlvdXNcbiAqIHN0YXRlcy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gc3RhdGUgVGhlIG5ldyByZWFkeVN0YXRlIHRoYXQgd2UgZGV0ZWN0ZWQuXG4gKiBAcmV0dXJucyB7UlN9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuUlMucHJvdG90eXBlLmNoYW5nZSA9IGZ1bmN0aW9uIGNoYW5nZShzdGF0ZSkge1xuICBzdGF0ZSA9IHRoaXMuY2xlYW4oc3RhdGUsIHRydWUpO1xuXG4gIHZhciBqXG4gICAgLCBuYW1lXG4gICAgLCBpID0gMFxuICAgICwgbGlzdGVuZXJcbiAgICAsIHJzID0gdGhpc1xuICAgICwgcHJldmlvdXNseSA9IHJzLnJlYWR5U3RhdGU7XG5cbiAgaWYgKHByZXZpb3VzbHkgPj0gc3RhdGUpIHJldHVybiBycztcblxuICBycy5yZWFkeVN0YXRlID0gc3RhdGU7XG5cbiAgZm9yICg7IGkgPCBSUy5zdGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaSA+IHN0YXRlKSBicmVhaztcbiAgICBuYW1lID0gUlMuc3RhdGVzW2ldO1xuXG4gICAgaWYgKG5hbWUgaW4gcnMuX2V2ZW50cykge1xuICAgICAgZm9yIChqID0gMDsgaiA8IHJzLl9ldmVudHNbbmFtZV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgbGlzdGVuZXIgPSBycy5fZXZlbnRzW25hbWVdW2pdO1xuICAgICAgICBsaXN0ZW5lci5mbi5jYWxsKGxpc3RlbmVyLmNvbnRleHQgfHwgcnMsIHByZXZpb3VzbHkpO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgcnMuX2V2ZW50c1tuYW1lXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcnM7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHdlJ3JlIGN1cnJlbnRseSBpbiBhIGdpdmVuIHJlYWR5U3RhdGUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBzdGF0ZSBUaGUgcmVxdWlyZWQgcmVhZHlTdGF0ZS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBJbmRpY2F0aW9uIGlmIHRoaXMgc3RhdGUgaGFzIGJlZW4gcmVhY2hlZC5cbiAqIEBhcGkgcHVibGljXG4gKi9cblJTLnByb3RvdHlwZS5pcyA9IGZ1bmN0aW9uIGlzKHN0YXRlKSB7XG4gIHJldHVybiB0aGlzLnJlYWR5U3RhdGUgPj0gdGhpcy5jbGVhbihzdGF0ZSwgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIFRyYW5zZm9ybSBhIHN0YXRlIHRvIGEgbnVtYmVyIG9yIHRvVXBwZXJDYXNlLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHN0YXRlIFN0YXRlIHRvIHRyYW5zZm9ybS5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gbnIgQ2hhbmdlIHRvIG51bWJlci5cbiAqIEByZXR1cm5zIHtNaXhlZH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblJTLnByb3RvdHlwZS5jbGVhbiA9IGZ1bmN0aW9uIHRyYW5zZm9ybShzdGF0ZSwgbnIpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2Ygc3RhdGU7XG5cbiAgaWYgKG5yKSByZXR1cm4gJ251bWJlcicgIT09IHR5cGVcbiAgPyArUlNbc3RhdGUudG9VcHBlckNhc2UoKV0gfHwgMFxuICA6IHN0YXRlO1xuXG4gIHJldHVybiAoJ251bWJlcicgPT09IHR5cGUgPyBSUy5zdGF0ZXNbc3RhdGVdIDogc3RhdGUpLnRvVXBwZXJDYXNlKCk7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGV2ZW50IGxpc3RlbmVycy4gVXNlZnVsIHdoZW4geW91IHdhbnQgdG8gdW5sb2FkIHJlYWR5c3RhdGVjaGFuZ2VcbiAqIGNvbXBsZXRlbHkgc28gdGhhdCBpdCB3b24ndCByZWFjdCB0byBhbnkgZXZlbnRzIGFueW1vcmUuIFNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3Vuc2hpZnRpby9yZWFkeXN0YXRlL2lzc3Vlcy84XG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBycyBzbyB0aGF0IGNhbGxzIGNhbiBiZSBjaGFpbmVkLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuUlMucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycygpIHtcbiAgdGhpcy5fZXZlbnRzID0ge307XG4gIHJldHVybiB0aGlzO1xufVxuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xubW9kdWxlLmV4cG9ydHMgPSBuZXcgUlMoKTtcbiIsIi8qKlxuICogcmVxdWVzdC1mcmFtZSAtIHJlcXVlc3RBbmltYXRpb25GcmFtZSAmIGNhbmNlbEFuaW1hdGlvbkZyYW1lIHBvbHlmaWxsIGZvciBvcHRpbWFsIGNyb3NzLWJyb3dzZXIgZGV2ZWxvcG1lbnQuXG4gKiBAdmVyc2lvbiB2MS41LjNcbiAqIEBsaWNlbnNlIE1JVFxuICogQ29weXJpZ2h0IEp1bGllbiBFdGllbm5lIDIwMTUgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLnJlcXVlc3RGcmFtZSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHR5cGUgLSByZXF1ZXN0IHwgY2FuY2VsIHwgbmF0aXZlLlxuICogQHJldHVybiB7RnVuY3Rpb259IFRpbWluZyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gcmVxdWVzdEZyYW1lKHR5cGUpIHtcbiAgICAvLyBUaGUgb25seSB2ZW5kb3IgcHJlZml4ZXMgcmVxdWlyZWQuXG4gICAgdmFyIHZlbmRvcnMgPSBbJ21veicsICd3ZWJraXQnXTtcblxuICAgIC8vIERpc2Fzc2VtYmxlZCB0aW1pbmcgZnVuY3Rpb24gYWJicmV2aWF0aW9ucy5cbiAgICB2YXIgYUYgPSAnQW5pbWF0aW9uRnJhbWUnO1xuICAgIHZhciBycUFGID0gJ1JlcXVlc3QnICsgYUY7XG5cbiAgICAvLyBDaGVja3MgZm9yIGZpcmVmb3ggNCAtIDEwIGZ1bmN0aW9uIHBhaXIgbWlzbWF0Y2guXG4gICAgdmFyIG1velJBRiA9IHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgdmFyIG1vekNBRiA9IHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZTtcbiAgICB2YXIgaGFzTW96TWlzbWF0Y2ggPSBtb3pSQUYgJiYgIW1vekNBRjtcblxuICAgIC8vIEZpbmFsIGFzc2lnbmVkIGZ1bmN0aW9ucy5cbiAgICB2YXIgYXNzaWduZWRSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgdmFyIGFzc2lnbmVkQ2FuY2VsQW5pbWF0aW9uRnJhbWU7XG5cbiAgICAvLyBJbml0aWFsIHRpbWUgb2YgdGhlIHRpbWluZyBsYXBzZS5cbiAgICB2YXIgcHJldmlvdXNUaW1lID0gMDtcblxuICAgIHZhciByZXF1ZXN0RnJhbWVNYWluO1xuXG4gICAgLy8gRGF0ZS5ub3cgcG9seWZpbGwsIG1haW5seSBmb3IgbGVnYWN5IElFIHZlcnNpb25zLlxuICAgIGlmICghRGF0ZS5ub3cpIHtcbiAgICAgICAgRGF0ZS5ub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaGFzSU9TNlJlcXVlc3RBbmltYXRpb25GcmFtZUJ1Zy5cbiAgICAgKiBAU2VlIHtATGluayBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9qdWxpZW5ldGllLzg2YWMzOTRlYzQxZjEyNzFmZjBhfVxuICAgICAqIC0gZm9yIENvbW1lbnRhcnkuXG4gICAgICogQENvcHlyaWdodCAyMDE1IC0gSnVsaWVuIEV0aWVubmUuIFxuICAgICAqIEBMaWNlbnNlOiBNSVQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzSU9TNlJlcXVlc3RBbmltYXRpb25GcmFtZUJ1ZygpIHtcbiAgICAgICAgdmFyIHdlYmtpdFJBRiA9IHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgICAgIHZhciByQUYgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXG4gICAgICAgIC8vIENTUy8gRGV2aWNlIHdpdGggbWF4IGZvciBpT1M2IERldmljZXMuXG4gICAgICAgIHZhciBoYXNNb2JpbGVEZXZpY2VXaWR0aCA9IHNjcmVlbi53aWR0aCA8PSA3NjggPyB0cnVlIDogZmFsc2U7XG5cbiAgICAgICAgLy8gT25seSBzdXBwb3J0cyB3ZWJraXQgcHJlZml4ZWQgcmVxdWVzdEFuaW10aW9uRnJhbmUuXG4gICAgICAgIHZhciByZXF1aXJlc1dlYmtpdHByZWZpeCA9ICEod2Via2l0UkFGICYmIHJBRik7XG5cbiAgICAgICAgLy8gaU9TNiB3ZWJraXQgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCBwZXJmb3JtYW5jZSBub3cuXG4gICAgICAgIHZhciBoYXNOb05hdmlnYXRpb25UaW1pbmcgPSB3aW5kb3cucGVyZm9ybWFuY2UgPyBmYWxzZSA6IHRydWU7XG5cbiAgICAgICAgdmFyIGlPUzZOb3RpY2UgPSAnc2V0VGltZW91dCBpcyBiZWluZyB1c2VkIGFzIGEgc3Vic3RpdGl1ZSBmb3IgXFxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGR1ZSB0byBhIGJ1ZyB3aXRoaW4gaU9TIDYgYnVpbGRzJztcblxuICAgICAgICB2YXIgaGFzSU9TNkJ1ZyA9IHJlcXVpcmVzV2Via2l0cHJlZml4ICYmIGhhc01vYmlsZURldmljZVdpZHRoICYmIGhhc05vTmF2aWdhdGlvblRpbWluZztcblxuICAgICAgICB2YXIgYnVnQ2hlY2tyZXN1bHRzID0gZnVuY3Rpb24gYnVnQ2hlY2tyZXN1bHRzKHRpbWluZ0ZuQSwgdGltaW5nRm5CLCBub3RpY2UpIHtcbiAgICAgICAgICAgIGlmICh0aW1pbmdGbkEgfHwgdGltaW5nRm5CKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKG5vdGljZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZGlzcGxheVJlc3VsdHMgPSBmdW5jdGlvbiBkaXNwbGF5UmVzdWx0cyhoYXNCdWcsIGhhc0J1Z05vdGljZSwgd2Via2l0Rm4sIG5hdGl2ZUZuKSB7XG4gICAgICAgICAgICBpZiAoaGFzQnVnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1Z0NoZWNrcmVzdWx0cyh3ZWJraXRGbiwgbmF0aXZlRm4sIGhhc0J1Z05vdGljZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZGlzcGxheVJlc3VsdHMoaGFzSU9TNkJ1ZywgaU9TNk5vdGljZSwgd2Via2l0UkFGLCByQUYpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE5hdGl2ZSBjbGVhclRpbWVvdXQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xlYXJUaW1lb3V0V2l0aElkKGlkKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmFzZWQgb24gYSBwb2x5ZmlsbCBieSBFcmlrLCBpbnRyb2R1Y2VkIGJ5IFBhdWwgSXJpc2ggJiBcbiAgICAgKiBmdXJ0aGVyIGltcHJvdmVkIGJ5IERhcml1cyBCYWNvbi5cbiAgICAgKiBAc2VlICB7QGxpbmsgaHR0cDovL3d3dy5wYXVsaXJpc2guY29tLzIwMTEvXG4gICAgICogcmVxdWVzdGFuaW1hdGlvbmZyYW1lLWZvci1zbWFydC1hbmltYXRpbmd9XG4gICAgICogQHNlZSAge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXJpdXMvcmVxdWVzdEFuaW1hdGlvbkZyYW1lL2Jsb2IvXG4gICAgICogbWFzdGVyL3JlcXVlc3RBbmltYXRpb25GcmFtZS5qc31cbiAgICAgKiBAY2FsbGJhY2sge051bWJlcn0gVGltZXN0YW1wLlxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBzZXRUaW1lb3V0IEZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFRpbWVvdXRXaXRoVGltZXN0YW1wKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBpbW1lZGlhdGVUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdmFyIGxhcHNlZFRpbWUgPSBNYXRoLm1heChwcmV2aW91c1RpbWUgKyAxNiwgaW1tZWRpYXRlVGltZSk7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHByZXZpb3VzVGltZSA9IGxhcHNlZFRpbWUpO1xuICAgICAgICB9LCBsYXBzZWRUaW1lIC0gaW1tZWRpYXRlVGltZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUXVlcmllcyB0aGUgbmF0aXZlIGZ1bmN0aW9uLCBwcmVmaXhlZCBmdW5jdGlvbiBcbiAgICAgKiBvciB1c2UgdGhlIHNldFRpbWVvdXRXaXRoVGltZXN0YW1wIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHF1ZXJ5UmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkge1xuICAgICAgICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbHRlcikge1xuICAgICAgICAgICAgYXNzaWduZWRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbJ3JlcXVlc3QnICsgYUZdIHx8IHdpbmRvd1t2ZW5kb3JzLmZpbHRlcihmdW5jdGlvbiAodmVuZG9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvd1t2ZW5kb3IgKyBycUFGXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gdmVuZG9yO1xuICAgICAgICAgICAgfSkgKyBycUFGXSB8fCBzZXRUaW1lb3V0V2l0aFRpbWVzdGFtcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0V2l0aFRpbWVzdGFtcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWhhc0lPUzZSZXF1ZXN0QW5pbWF0aW9uRnJhbWVCdWcoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFzc2lnbmVkUmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXRXaXRoVGltZXN0YW1wO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUXVlcmllcyB0aGUgbmF0aXZlIGZ1bmN0aW9uLCBwcmVmaXhlZCBmdW5jdGlvbiBcbiAgICAgKiBvciB1c2UgdGhlIGNsZWFyVGltZW91dFdpdGhJZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBxdWVyeUNhbmNlbEFuaW1hdGlvbkZyYW1lKCkge1xuICAgICAgICB2YXIgY2FuY2VsbGF0aW9uTmFtZXMgPSBbXTtcbiAgICAgICAgaWYgKEFycmF5LnByb3RvdHlwZS5tYXApIHtcbiAgICAgICAgICAgIHZlbmRvcnMubWFwKGZ1bmN0aW9uICh2ZW5kb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWydDYW5jZWwnLCAnQ2FuY2VsUmVxdWVzdCddLm1hcChmdW5jdGlvbiAoY2FuY2VsbGF0aW9uTmFtZVByZWZpeCkge1xuICAgICAgICAgICAgICAgICAgICBjYW5jZWxsYXRpb25OYW1lcy5wdXNoKHZlbmRvciArIGNhbmNlbGxhdGlvbk5hbWVQcmVmaXggKyBhRik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjbGVhclRpbWVvdXRXaXRoSWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2tzIGZvciB0aGUgcHJlZml4ZWQgY2FuY2VsQW5pbWF0aW9uRnJhbWUgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAqIEBwYXJhbSAge0FycmF5fSBwcmVmaXhlZE5hbWVzIC0gQW4gYXJyYXkgb2YgdGhlIHByZWZpeGVkIG5hbWVzLiBcbiAgICAgICAgICogQHBhcmFtICB7TnVtYmVyfSBpIC0gSXRlcmF0aW9uIHN0YXJ0IHBvaW50LlxuICAgICAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gcHJlZml4ZWQgY2FuY2VsQW5pbWF0aW9uRnJhbWUgZnVuY3Rpb24uXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBwcmVmaXhlZENhbmNlbEFuaW1hdGlvbkZyYW1lKHByZWZpeGVkTmFtZXMsIGkpIHtcbiAgICAgICAgICAgIHZhciBjYW5jZWxsYXRpb25GdW5jdGlvbiA9IHZvaWQgMDtcbiAgICAgICAgICAgIGZvciAoOyBpIDwgcHJlZml4ZWROYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh3aW5kb3dbcHJlZml4ZWROYW1lc1tpXV0pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsbGF0aW9uRnVuY3Rpb24gPSB3aW5kb3dbcHJlZml4ZWROYW1lc1tpXV07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYW5jZWxsYXRpb25GdW5jdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVzZSB0cnV0aGx5IGZ1bmN0aW9uXG4gICAgICAgIGFzc2lnbmVkQ2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbJ2NhbmNlbCcgKyBhRl0gfHwgcHJlZml4ZWRDYW5jZWxBbmltYXRpb25GcmFtZShjYW5jZWxsYXRpb25OYW1lcywgMCkgfHwgY2xlYXJUaW1lb3V0V2l0aElkO1xuXG4gICAgICAgIC8vIENoZWNrIGZvciBpT1MgNiBidWdcbiAgICAgICAgaWYgKCFoYXNJT1M2UmVxdWVzdEFuaW1hdGlvbkZyYW1lQnVnKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBhc3NpZ25lZENhbmNlbEFuaW1hdGlvbkZyYW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dFdpdGhJZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFJlcXVlc3RGbigpIHtcbiAgICAgICAgaWYgKGhhc01vek1pc21hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dFdpdGhUaW1lc3RhbXA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcXVlcnlSZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENhbmNlbEZuKCkge1xuICAgICAgICByZXR1cm4gcXVlcnlDYW5jZWxBbmltYXRpb25GcmFtZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE5hdGl2ZUZuKCkge1xuICAgICAgICBpZiAoaGFzTW96TWlzbWF0Y2gpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBzZXRUaW1lb3V0V2l0aFRpbWVzdGFtcDtcbiAgICAgICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGNsZWFyVGltZW91dFdpdGhJZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBxdWVyeVJlcXVlc3RBbmltYXRpb25GcmFtZSgpO1xuICAgICAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gcXVlcnlDYW5jZWxBbmltYXRpb25GcmFtZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgdmFsdWUgXCJyZXF1ZXN0XCIgc2luZ2xlcyBvdXQgZmlyZWZveCA0IC0gMTAgYW5kIFxuICAgICAqIGFzc2lnbnMgdGhlIHNldFRpbWVvdXQgZnVuY3Rpb24gaWYgcGxhdXNpYmxlLlxuICAgICAqL1xuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ3JlcXVlc3QnOlxuICAgICAgICBjYXNlICcnOlxuICAgICAgICAgICAgcmVxdWVzdEZyYW1lTWFpbiA9IGdldFJlcXVlc3RGbigpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnY2FuY2VsJzpcbiAgICAgICAgICAgIHJlcXVlc3RGcmFtZU1haW4gPSBnZXRDYW5jZWxGbigpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbmF0aXZlJzpcbiAgICAgICAgICAgIHNldE5hdGl2ZUZuKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWVzdEZyYW1lIHBhcmFtZXRlciBpcyBub3QgYSB0eXBlLicpO1xuICAgIH1cbiAgICByZXR1cm4gcmVxdWVzdEZyYW1lTWFpbjtcbn1cblxucmV0dXJuIHJlcXVlc3RGcmFtZTtcblxufSkpKTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCJ2YXIgaGFzUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIHRocm93c01lc3NhZ2UoZXJyKSB7XG5cdHJldHVybiAnW1Rocm93czogJyArIChlcnIgPyBlcnIubWVzc2FnZSA6ICc/JykgKyAnXSc7XG59XG5cbmZ1bmN0aW9uIHNhZmVHZXRWYWx1ZUZyb21Qcm9wZXJ0eU9uT2JqZWN0KG9iaiwgcHJvcGVydHkpIHtcblx0aWYgKGhhc1Byb3AuY2FsbChvYmosIHByb3BlcnR5KSkge1xuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gb2JqW3Byb3BlcnR5XTtcblx0XHR9XG5cdFx0Y2F0Y2ggKGVycikge1xuXHRcdFx0cmV0dXJuIHRocm93c01lc3NhZ2UoZXJyKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb2JqW3Byb3BlcnR5XTtcbn1cblxuZnVuY3Rpb24gZW5zdXJlUHJvcGVydGllcyhvYmopIHtcblx0dmFyIHNlZW4gPSBbIF07IC8vIHN0b3JlIHJlZmVyZW5jZXMgdG8gb2JqZWN0cyB3ZSBoYXZlIHNlZW4gYmVmb3JlXG5cblx0ZnVuY3Rpb24gdmlzaXQob2JqKSB7XG5cdFx0aWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuIG9iajtcblx0XHR9XG5cblx0XHRpZiAoc2Vlbi5pbmRleE9mKG9iaikgIT09IC0xKSB7XG5cdFx0XHRyZXR1cm4gJ1tDaXJjdWxhcl0nO1xuXHRcdH1cblx0XHRzZWVuLnB1c2gob2JqKTtcblxuXHRcdGlmICh0eXBlb2Ygb2JqLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dmFyIGZSZXN1bHQgPSB2aXNpdChvYmoudG9KU09OKCkpO1xuXHRcdFx0XHRzZWVuLnBvcCgpO1xuXHRcdFx0XHRyZXR1cm4gZlJlc3VsdDtcblx0XHRcdH0gY2F0Y2goZXJyKSB7XG5cdFx0XHRcdHJldHVybiB0aHJvd3NNZXNzYWdlKGVycik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuXHRcdFx0dmFyIGFSZXN1bHQgPSBvYmoubWFwKHZpc2l0KTtcblx0XHRcdHNlZW4ucG9wKCk7XG5cdFx0XHRyZXR1cm4gYVJlc3VsdDtcblx0XHR9XG5cblx0XHR2YXIgcmVzdWx0ID0gT2JqZWN0LmtleXMob2JqKS5yZWR1Y2UoZnVuY3Rpb24ocmVzdWx0LCBwcm9wKSB7XG5cdFx0XHQvLyBwcmV2ZW50IGZhdWx0eSBkZWZpbmVkIGdldHRlciBwcm9wZXJ0aWVzXG5cdFx0XHRyZXN1bHRbcHJvcF0gPSB2aXNpdChzYWZlR2V0VmFsdWVGcm9tUHJvcGVydHlPbk9iamVjdChvYmosIHByb3ApKTtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fSwge30pO1xuXHRcdHNlZW4ucG9wKCk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRyZXR1cm4gdmlzaXQob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkYXRhLCByZXBsYWNlciwgc3BhY2UpIHtcblx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KGVuc3VyZVByb3BlcnRpZXMoZGF0YSksIHJlcGxhY2VyLCBzcGFjZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmVuc3VyZVByb3BlcnRpZXMgPSBlbnN1cmVQcm9wZXJ0aWVzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBzaGlmdFxuXG5mdW5jdGlvbiBzaGlmdCAoc3RyZWFtKSB7XG4gIHZhciBycyA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZVxuICBpZiAoIXJzKSByZXR1cm4gbnVsbFxuICByZXR1cm4gcnMub2JqZWN0TW9kZSA/IHN0cmVhbS5yZWFkKCkgOiBzdHJlYW0ucmVhZChnZXRTdGF0ZUxlbmd0aChycykpXG59XG5cbmZ1bmN0aW9uIGdldFN0YXRlTGVuZ3RoIChzdGF0ZSkge1xuICBpZiAoc3RhdGUuYnVmZmVyLmxlbmd0aCkge1xuICAgIC8vIFNpbmNlIG5vZGUgNi4zLjAgc3RhdGUuYnVmZmVyIGlzIGEgQnVmZmVyTGlzdCBub3QgYW4gYXJyYXlcbiAgICBpZiAoc3RhdGUuYnVmZmVyLmhlYWQpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhLmxlbmd0aFxuICAgIH1cblxuICAgIHJldHVybiBzdGF0ZS5idWZmZXJbMF0ubGVuZ3RoXG4gIH1cblxuICByZXR1cm4gc3RhdGUubGVuZ3RoXG59XG4iLCJmdW5jdGlvbiBBZ2VudCgpIHtcbiAgdGhpcy5fZGVmYXVsdHMgPSBbXTtcbn1cblxuW1widXNlXCIsIFwib25cIiwgXCJvbmNlXCIsIFwic2V0XCIsIFwicXVlcnlcIiwgXCJ0eXBlXCIsIFwiYWNjZXB0XCIsIFwiYXV0aFwiLCBcIndpdGhDcmVkZW50aWFsc1wiLCBcInNvcnRRdWVyeVwiLCBcInJldHJ5XCIsIFwib2tcIiwgXCJyZWRpcmVjdHNcIixcbiBcInRpbWVvdXRcIiwgXCJidWZmZXJcIiwgXCJzZXJpYWxpemVcIiwgXCJwYXJzZVwiLCBcImNhXCIsIFwia2V5XCIsIFwicGZ4XCIsIFwiY2VydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGZuKSB7XG4gIC8qKiBEZWZhdWx0IHNldHRpbmcgZm9yIGFsbCByZXF1ZXN0cyBmcm9tIHRoaXMgYWdlbnQgKi9cbiAgQWdlbnQucHJvdG90eXBlW2ZuXSA9IGZ1bmN0aW9uKC8qdmFyYXJncyovKSB7XG4gICAgdGhpcy5fZGVmYXVsdHMucHVzaCh7Zm46Zm4sIGFyZ3VtZW50czphcmd1bWVudHN9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufSk7XG5cbkFnZW50LnByb3RvdHlwZS5fc2V0RGVmYXVsdHMgPSBmdW5jdGlvbihyZXEpIHtcbiAgICB0aGlzLl9kZWZhdWx0cy5mb3JFYWNoKGZ1bmN0aW9uKGRlZikge1xuICAgICAgcmVxW2RlZi5mbl0uYXBwbHkocmVxLCBkZWYuYXJndW1lbnRzKTtcbiAgICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQWdlbnQ7XG4iLCIvKipcbiAqIFJvb3QgcmVmZXJlbmNlIGZvciBpZnJhbWVzLlxuICovXG5cbnZhciByb290O1xuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7IC8vIEJyb3dzZXIgd2luZG93XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgeyAvLyBXZWIgV29ya2VyXG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIHsgLy8gT3RoZXIgZW52aXJvbm1lbnRzXG4gIGNvbnNvbGUud2FybihcIlVzaW5nIGJyb3dzZXItb25seSB2ZXJzaW9uIG9mIHN1cGVyYWdlbnQgaW4gbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG4gIHJvb3QgPSB0aGlzO1xufVxuXG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgUmVxdWVzdEJhc2UgPSByZXF1aXJlKCcuL3JlcXVlc3QtYmFzZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pcy1vYmplY3QnKTtcbnZhciBSZXNwb25zZUJhc2UgPSByZXF1aXJlKCcuL3Jlc3BvbnNlLWJhc2UnKTtcbnZhciBBZ2VudCA9IHJlcXVpcmUoJy4vYWdlbnQtYmFzZScpO1xuXG4vKipcbiAqIE5vb3AuXG4gKi9cblxuZnVuY3Rpb24gbm9vcCgpe307XG5cbi8qKlxuICogRXhwb3NlIGByZXF1ZXN0YC5cbiAqL1xuXG52YXIgcmVxdWVzdCA9IGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1ldGhvZCwgdXJsKSB7XG4gIC8vIGNhbGxiYWNrXG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiB1cmwpIHtcbiAgICByZXR1cm4gbmV3IGV4cG9ydHMuUmVxdWVzdCgnR0VUJywgbWV0aG9kKS5lbmQodXJsKTtcbiAgfVxuXG4gIC8vIHVybCBmaXJzdFxuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG5ldyBleHBvcnRzLlJlcXVlc3QoJ0dFVCcsIG1ldGhvZCk7XG4gIH1cblxuICByZXR1cm4gbmV3IGV4cG9ydHMuUmVxdWVzdChtZXRob2QsIHVybCk7XG59XG5cbmV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG5cbi8qKlxuICogRGV0ZXJtaW5lIFhIUi5cbiAqL1xuXG5yZXF1ZXN0LmdldFhIUiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHJvb3QuWE1MSHR0cFJlcXVlc3RcbiAgICAgICYmICghcm9vdC5sb2NhdGlvbiB8fCAnZmlsZTonICE9IHJvb3QubG9jYXRpb24ucHJvdG9jb2xcbiAgICAgICAgICB8fCAhcm9vdC5BY3RpdmVYT2JqZWN0KSkge1xuICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3Q7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHsgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCdNaWNyb3NvZnQuWE1MSFRUUCcpOyB9IGNhdGNoKGUpIHt9XG4gICAgdHJ5IHsgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCdNc3htbDIuWE1MSFRUUC42LjAnKTsgfSBjYXRjaChlKSB7fVxuICAgIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgnTXN4bWwyLlhNTEhUVFAuMy4wJyk7IH0gY2F0Y2goZSkge31cbiAgICB0cnkgeyByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ01zeG1sMi5YTUxIVFRQJyk7IH0gY2F0Y2goZSkge31cbiAgfVxuICB0aHJvdyBFcnJvcihcIkJyb3dzZXItb25seSB2ZXJzaW9uIG9mIHN1cGVyYWdlbnQgY291bGQgbm90IGZpbmQgWEhSXCIpO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGFkZGVkIHRvIHN1cHBvcnQgSUUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbnZhciB0cmltID0gJycudHJpbVxuICA/IGZ1bmN0aW9uKHMpIHsgcmV0dXJuIHMudHJpbSgpOyB9XG4gIDogZnVuY3Rpb24ocykgeyByZXR1cm4gcy5yZXBsYWNlKC8oXlxccyp8XFxzKiQpL2csICcnKTsgfTtcblxuLyoqXG4gKiBTZXJpYWxpemUgdGhlIGdpdmVuIGBvYmpgLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZShvYmopIHtcbiAgaWYgKCFpc09iamVjdChvYmopKSByZXR1cm4gb2JqO1xuICB2YXIgcGFpcnMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIHB1c2hFbmNvZGVkS2V5VmFsdWVQYWlyKHBhaXJzLCBrZXksIG9ialtrZXldKTtcbiAgfVxuICByZXR1cm4gcGFpcnMuam9pbignJicpO1xufVxuXG4vKipcbiAqIEhlbHBzICdzZXJpYWxpemUnIHdpdGggc2VyaWFsaXppbmcgYXJyYXlzLlxuICogTXV0YXRlcyB0aGUgcGFpcnMgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFpcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICovXG5cbmZ1bmN0aW9uIHB1c2hFbmNvZGVkS2V5VmFsdWVQYWlyKHBhaXJzLCBrZXksIHZhbCkge1xuICBpZiAodmFsICE9IG51bGwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICB2YWwuZm9yRWFjaChmdW5jdGlvbih2KSB7XG4gICAgICAgIHB1c2hFbmNvZGVkS2V5VmFsdWVQYWlyKHBhaXJzLCBrZXksIHYpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgICBmb3IodmFyIHN1YmtleSBpbiB2YWwpIHtcbiAgICAgICAgcHVzaEVuY29kZWRLZXlWYWx1ZVBhaXIocGFpcnMsIGtleSArICdbJyArIHN1YmtleSArICddJywgdmFsW3N1YmtleV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYWlycy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpXG4gICAgICAgICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh2YWwgPT09IG51bGwpIHtcbiAgICBwYWlycy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpKTtcbiAgfVxufVxuXG4vKipcbiAqIEV4cG9zZSBzZXJpYWxpemF0aW9uIG1ldGhvZC5cbiAqL1xuXG5yZXF1ZXN0LnNlcmlhbGl6ZU9iamVjdCA9IHNlcmlhbGl6ZTtcblxuLyoqXG4gICogUGFyc2UgdGhlIGdpdmVuIHgtd3d3LWZvcm0tdXJsZW5jb2RlZCBgc3RyYC5cbiAgKlxuICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICogQGFwaSBwcml2YXRlXG4gICovXG5cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nKHN0cikge1xuICB2YXIgb2JqID0ge307XG4gIHZhciBwYWlycyA9IHN0ci5zcGxpdCgnJicpO1xuICB2YXIgcGFpcjtcbiAgdmFyIHBvcztcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gcGFpcnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBwYWlyID0gcGFpcnNbaV07XG4gICAgcG9zID0gcGFpci5pbmRleE9mKCc9Jyk7XG4gICAgaWYgKHBvcyA9PSAtMSkge1xuICAgICAgb2JqW2RlY29kZVVSSUNvbXBvbmVudChwYWlyKV0gPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2RlY29kZVVSSUNvbXBvbmVudChwYWlyLnNsaWNlKDAsIHBvcykpXSA9XG4gICAgICAgIGRlY29kZVVSSUNvbXBvbmVudChwYWlyLnNsaWNlKHBvcyArIDEpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIEV4cG9zZSBwYXJzZXIuXG4gKi9cblxucmVxdWVzdC5wYXJzZVN0cmluZyA9IHBhcnNlU3RyaW5nO1xuXG4vKipcbiAqIERlZmF1bHQgTUlNRSB0eXBlIG1hcC5cbiAqXG4gKiAgICAgc3VwZXJhZ2VudC50eXBlcy54bWwgPSAnYXBwbGljYXRpb24veG1sJztcbiAqXG4gKi9cblxucmVxdWVzdC50eXBlcyA9IHtcbiAgaHRtbDogJ3RleHQvaHRtbCcsXG4gIGpzb246ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgeG1sOiAndGV4dC94bWwnLFxuICB1cmxlbmNvZGVkOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgJ2Zvcm0nOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgJ2Zvcm0tZGF0YSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG4vKipcbiAqIERlZmF1bHQgc2VyaWFsaXphdGlvbiBtYXAuXG4gKlxuICogICAgIHN1cGVyYWdlbnQuc2VyaWFsaXplWydhcHBsaWNhdGlvbi94bWwnXSA9IGZ1bmN0aW9uKG9iail7XG4gKiAgICAgICByZXR1cm4gJ2dlbmVyYXRlZCB4bWwgaGVyZSc7XG4gKiAgICAgfTtcbiAqXG4gKi9cblxucmVxdWVzdC5zZXJpYWxpemUgPSB7XG4gICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnOiBzZXJpYWxpemUsXG4gICdhcHBsaWNhdGlvbi9qc29uJzogSlNPTi5zdHJpbmdpZnlcbn07XG5cbi8qKlxuICAqIERlZmF1bHQgcGFyc2Vycy5cbiAgKlxuICAqICAgICBzdXBlcmFnZW50LnBhcnNlWydhcHBsaWNhdGlvbi94bWwnXSA9IGZ1bmN0aW9uKHN0cil7XG4gICogICAgICAgcmV0dXJuIHsgb2JqZWN0IHBhcnNlZCBmcm9tIHN0ciB9O1xuICAqICAgICB9O1xuICAqXG4gICovXG5cbnJlcXVlc3QucGFyc2UgPSB7XG4gICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnOiBwYXJzZVN0cmluZyxcbiAgJ2FwcGxpY2F0aW9uL2pzb24nOiBKU09OLnBhcnNlXG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBoZWFkZXIgYHN0cmAgaW50b1xuICogYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG1hcHBlZCBmaWVsZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VIZWFkZXIoc3RyKSB7XG4gIHZhciBsaW5lcyA9IHN0ci5zcGxpdCgvXFxyP1xcbi8pO1xuICB2YXIgZmllbGRzID0ge307XG4gIHZhciBpbmRleDtcbiAgdmFyIGxpbmU7XG4gIHZhciBmaWVsZDtcbiAgdmFyIHZhbDtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGluZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBsaW5lID0gbGluZXNbaV07XG4gICAgaW5kZXggPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7IC8vIGNvdWxkIGJlIGVtcHR5IGxpbmUsIGp1c3Qgc2tpcCBpdFxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGZpZWxkID0gbGluZS5zbGljZSgwLCBpbmRleCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB0cmltKGxpbmUuc2xpY2UoaW5kZXggKyAxKSk7XG4gICAgZmllbGRzW2ZpZWxkXSA9IHZhbDtcbiAgfVxuXG4gIHJldHVybiBmaWVsZHM7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYG1pbWVgIGlzIGpzb24gb3IgaGFzICtqc29uIHN0cnVjdHVyZWQgc3ludGF4IHN1ZmZpeC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWltZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGlzSlNPTihtaW1lKSB7XG4gIC8vIHNob3VsZCBtYXRjaCAvanNvbiBvciAranNvblxuICAvLyBidXQgbm90IC9qc29uLXNlcVxuICByZXR1cm4gL1tcXC8rXWpzb24oJHxbXi1cXHddKS8udGVzdChtaW1lKTtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIGEgbmV3IGBSZXNwb25zZWAgd2l0aCB0aGUgZ2l2ZW4gYHhocmAuXG4gKlxuICogIC0gc2V0IGZsYWdzICgub2ssIC5lcnJvciwgZXRjKVxuICogIC0gcGFyc2UgaGVhZGVyXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogIEFsaWFzaW5nIGBzdXBlcmFnZW50YCBhcyBgcmVxdWVzdGAgaXMgbmljZTpcbiAqXG4gKiAgICAgIHJlcXVlc3QgPSBzdXBlcmFnZW50O1xuICpcbiAqICBXZSBjYW4gdXNlIHRoZSBwcm9taXNlLWxpa2UgQVBJLCBvciBwYXNzIGNhbGxiYWNrczpcbiAqXG4gKiAgICAgIHJlcXVlc3QuZ2V0KCcvJykuZW5kKGZ1bmN0aW9uKHJlcyl7fSk7XG4gKiAgICAgIHJlcXVlc3QuZ2V0KCcvJywgZnVuY3Rpb24ocmVzKXt9KTtcbiAqXG4gKiAgU2VuZGluZyBkYXRhIGNhbiBiZSBjaGFpbmVkOlxuICpcbiAqICAgICAgcmVxdWVzdFxuICogICAgICAgIC5wb3N0KCcvdXNlcicpXG4gKiAgICAgICAgLnNlbmQoeyBuYW1lOiAndGonIH0pXG4gKiAgICAgICAgLmVuZChmdW5jdGlvbihyZXMpe30pO1xuICpcbiAqICBPciBwYXNzZWQgdG8gYC5zZW5kKClgOlxuICpcbiAqICAgICAgcmVxdWVzdFxuICogICAgICAgIC5wb3N0KCcvdXNlcicpXG4gKiAgICAgICAgLnNlbmQoeyBuYW1lOiAndGonIH0sIGZ1bmN0aW9uKHJlcyl7fSk7XG4gKlxuICogIE9yIHBhc3NlZCB0byBgLnBvc3QoKWA6XG4gKlxuICogICAgICByZXF1ZXN0XG4gKiAgICAgICAgLnBvc3QoJy91c2VyJywgeyBuYW1lOiAndGonIH0pXG4gKiAgICAgICAgLmVuZChmdW5jdGlvbihyZXMpe30pO1xuICpcbiAqIE9yIGZ1cnRoZXIgcmVkdWNlZCB0byBhIHNpbmdsZSBjYWxsIGZvciBzaW1wbGUgY2FzZXM6XG4gKlxuICogICAgICByZXF1ZXN0XG4gKiAgICAgICAgLnBvc3QoJy91c2VyJywgeyBuYW1lOiAndGonIH0sIGZ1bmN0aW9uKHJlcyl7fSk7XG4gKlxuICogQHBhcmFtIHtYTUxIVFRQUmVxdWVzdH0geGhyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gUmVzcG9uc2UocmVxKSB7XG4gIHRoaXMucmVxID0gcmVxO1xuICB0aGlzLnhociA9IHRoaXMucmVxLnhocjtcbiAgLy8gcmVzcG9uc2VUZXh0IGlzIGFjY2Vzc2libGUgb25seSBpZiByZXNwb25zZVR5cGUgaXMgJycgb3IgJ3RleHQnIGFuZCBvbiBvbGRlciBicm93c2Vyc1xuICB0aGlzLnRleHQgPSAoKHRoaXMucmVxLm1ldGhvZCAhPSdIRUFEJyAmJiAodGhpcy54aHIucmVzcG9uc2VUeXBlID09PSAnJyB8fCB0aGlzLnhoci5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JykpIHx8IHR5cGVvZiB0aGlzLnhoci5yZXNwb25zZVR5cGUgPT09ICd1bmRlZmluZWQnKVxuICAgICA/IHRoaXMueGhyLnJlc3BvbnNlVGV4dFxuICAgICA6IG51bGw7XG4gIHRoaXMuc3RhdHVzVGV4dCA9IHRoaXMucmVxLnhoci5zdGF0dXNUZXh0O1xuICB2YXIgc3RhdHVzID0gdGhpcy54aHIuc3RhdHVzO1xuICAvLyBoYW5kbGUgSUU5IGJ1ZzogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDA0Njk3Mi9tc2llLXJldHVybnMtc3RhdHVzLWNvZGUtb2YtMTIyMy1mb3ItYWpheC1yZXF1ZXN0XG4gIGlmIChzdGF0dXMgPT09IDEyMjMpIHtcbiAgICBzdGF0dXMgPSAyMDQ7XG4gIH1cbiAgdGhpcy5fc2V0U3RhdHVzUHJvcGVydGllcyhzdGF0dXMpO1xuICB0aGlzLmhlYWRlciA9IHRoaXMuaGVhZGVycyA9IHBhcnNlSGVhZGVyKHRoaXMueGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKTtcbiAgLy8gZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIHNvbWV0aW1lcyBmYWxzZWx5IHJldHVybnMgXCJcIiBmb3IgQ09SUyByZXF1ZXN0cywgYnV0XG4gIC8vIGdldFJlc3BvbnNlSGVhZGVyIHN0aWxsIHdvcmtzLiBzbyB3ZSBnZXQgY29udGVudC10eXBlIGV2ZW4gaWYgZ2V0dGluZ1xuICAvLyBvdGhlciBoZWFkZXJzIGZhaWxzLlxuICB0aGlzLmhlYWRlclsnY29udGVudC10eXBlJ10gPSB0aGlzLnhoci5nZXRSZXNwb25zZUhlYWRlcignY29udGVudC10eXBlJyk7XG4gIHRoaXMuX3NldEhlYWRlclByb3BlcnRpZXModGhpcy5oZWFkZXIpO1xuXG4gIGlmIChudWxsID09PSB0aGlzLnRleHQgJiYgcmVxLl9yZXNwb25zZVR5cGUpIHtcbiAgICB0aGlzLmJvZHkgPSB0aGlzLnhoci5yZXNwb25zZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmJvZHkgPSB0aGlzLnJlcS5tZXRob2QgIT0gJ0hFQUQnXG4gICAgICA/IHRoaXMuX3BhcnNlQm9keSh0aGlzLnRleHQgPyB0aGlzLnRleHQgOiB0aGlzLnhoci5yZXNwb25zZSlcbiAgICAgIDogbnVsbDtcbiAgfVxufVxuXG5SZXNwb25zZUJhc2UoUmVzcG9uc2UucHJvdG90eXBlKTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYm9keSBgc3RyYC5cbiAqXG4gKiBVc2VkIGZvciBhdXRvLXBhcnNpbmcgb2YgYm9kaWVzLiBQYXJzZXJzXG4gKiBhcmUgZGVmaW5lZCBvbiB0aGUgYHN1cGVyYWdlbnQucGFyc2VgIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlc3BvbnNlLnByb3RvdHlwZS5fcGFyc2VCb2R5ID0gZnVuY3Rpb24oc3RyKSB7XG4gIHZhciBwYXJzZSA9IHJlcXVlc3QucGFyc2VbdGhpcy50eXBlXTtcbiAgaWYgKHRoaXMucmVxLl9wYXJzZXIpIHtcbiAgICByZXR1cm4gdGhpcy5yZXEuX3BhcnNlcih0aGlzLCBzdHIpO1xuICB9XG4gIGlmICghcGFyc2UgJiYgaXNKU09OKHRoaXMudHlwZSkpIHtcbiAgICBwYXJzZSA9IHJlcXVlc3QucGFyc2VbJ2FwcGxpY2F0aW9uL2pzb24nXTtcbiAgfVxuICByZXR1cm4gcGFyc2UgJiYgc3RyICYmIChzdHIubGVuZ3RoIHx8IHN0ciBpbnN0YW5jZW9mIE9iamVjdClcbiAgICA/IHBhcnNlKHN0cilcbiAgICA6IG51bGw7XG59O1xuXG4vKipcbiAqIFJldHVybiBhbiBgRXJyb3JgIHJlcHJlc2VudGF0aXZlIG9mIHRoaXMgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybiB7RXJyb3J9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlc3BvbnNlLnByb3RvdHlwZS50b0Vycm9yID0gZnVuY3Rpb24oKXtcbiAgdmFyIHJlcSA9IHRoaXMucmVxO1xuICB2YXIgbWV0aG9kID0gcmVxLm1ldGhvZDtcbiAgdmFyIHVybCA9IHJlcS51cmw7XG5cbiAgdmFyIG1zZyA9ICdjYW5ub3QgJyArIG1ldGhvZCArICcgJyArIHVybCArICcgKCcgKyB0aGlzLnN0YXR1cyArICcpJztcbiAgdmFyIGVyciA9IG5ldyBFcnJvcihtc2cpO1xuICBlcnIuc3RhdHVzID0gdGhpcy5zdGF0dXM7XG4gIGVyci5tZXRob2QgPSBtZXRob2Q7XG4gIGVyci51cmwgPSB1cmw7XG5cbiAgcmV0dXJuIGVycjtcbn07XG5cbi8qKlxuICogRXhwb3NlIGBSZXNwb25zZWAuXG4gKi9cblxucmVxdWVzdC5SZXNwb25zZSA9IFJlc3BvbnNlO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYFJlcXVlc3RgIHdpdGggdGhlIGdpdmVuIGBtZXRob2RgIGFuZCBgdXJsYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFJlcXVlc3QobWV0aG9kLCB1cmwpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLl9xdWVyeSA9IHRoaXMuX3F1ZXJ5IHx8IFtdO1xuICB0aGlzLm1ldGhvZCA9IG1ldGhvZDtcbiAgdGhpcy51cmwgPSB1cmw7XG4gIHRoaXMuaGVhZGVyID0ge307IC8vIHByZXNlcnZlcyBoZWFkZXIgbmFtZSBjYXNlXG4gIHRoaXMuX2hlYWRlciA9IHt9OyAvLyBjb2VyY2VzIGhlYWRlciBuYW1lcyB0byBsb3dlcmNhc2VcbiAgdGhpcy5vbignZW5kJywgZnVuY3Rpb24oKXtcbiAgICB2YXIgZXJyID0gbnVsbDtcbiAgICB2YXIgcmVzID0gbnVsbDtcblxuICAgIHRyeSB7XG4gICAgICByZXMgPSBuZXcgUmVzcG9uc2Uoc2VsZik7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICBlcnIgPSBuZXcgRXJyb3IoJ1BhcnNlciBpcyB1bmFibGUgdG8gcGFyc2UgdGhlIHJlc3BvbnNlJyk7XG4gICAgICBlcnIucGFyc2UgPSB0cnVlO1xuICAgICAgZXJyLm9yaWdpbmFsID0gZTtcbiAgICAgIC8vIGlzc3VlICM2NzU6IHJldHVybiB0aGUgcmF3IHJlc3BvbnNlIGlmIHRoZSByZXNwb25zZSBwYXJzaW5nIGZhaWxzXG4gICAgICBpZiAoc2VsZi54aHIpIHtcbiAgICAgICAgLy8gaWU5IGRvZXNuJ3QgaGF2ZSAncmVzcG9uc2UnIHByb3BlcnR5XG4gICAgICAgIGVyci5yYXdSZXNwb25zZSA9IHR5cGVvZiBzZWxmLnhoci5yZXNwb25zZVR5cGUgPT0gJ3VuZGVmaW5lZCcgPyBzZWxmLnhoci5yZXNwb25zZVRleHQgOiBzZWxmLnhoci5yZXNwb25zZTtcbiAgICAgICAgLy8gaXNzdWUgIzg3NjogcmV0dXJuIHRoZSBodHRwIHN0YXR1cyBjb2RlIGlmIHRoZSByZXNwb25zZSBwYXJzaW5nIGZhaWxzXG4gICAgICAgIGVyci5zdGF0dXMgPSBzZWxmLnhoci5zdGF0dXMgPyBzZWxmLnhoci5zdGF0dXMgOiBudWxsO1xuICAgICAgICBlcnIuc3RhdHVzQ29kZSA9IGVyci5zdGF0dXM7IC8vIGJhY2t3YXJkcy1jb21wYXQgb25seVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyLnJhd1Jlc3BvbnNlID0gbnVsbDtcbiAgICAgICAgZXJyLnN0YXR1cyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmLmNhbGxiYWNrKGVycik7XG4gICAgfVxuXG4gICAgc2VsZi5lbWl0KCdyZXNwb25zZScsIHJlcyk7XG5cbiAgICB2YXIgbmV3X2VycjtcbiAgICB0cnkge1xuICAgICAgaWYgKCFzZWxmLl9pc1Jlc3BvbnNlT0socmVzKSkge1xuICAgICAgICBuZXdfZXJyID0gbmV3IEVycm9yKHJlcy5zdGF0dXNUZXh0IHx8ICdVbnN1Y2Nlc3NmdWwgSFRUUCByZXNwb25zZScpO1xuICAgICAgfVxuICAgIH0gY2F0Y2goY3VzdG9tX2Vycikge1xuICAgICAgbmV3X2VyciA9IGN1c3RvbV9lcnI7IC8vIG9rKCkgY2FsbGJhY2sgY2FuIHRocm93XG4gICAgfVxuXG4gICAgLy8gIzEwMDAgZG9uJ3QgY2F0Y2ggZXJyb3JzIGZyb20gdGhlIGNhbGxiYWNrIHRvIGF2b2lkIGRvdWJsZSBjYWxsaW5nIGl0XG4gICAgaWYgKG5ld19lcnIpIHtcbiAgICAgIG5ld19lcnIub3JpZ2luYWwgPSBlcnI7XG4gICAgICBuZXdfZXJyLnJlc3BvbnNlID0gcmVzO1xuICAgICAgbmV3X2Vyci5zdGF0dXMgPSByZXMuc3RhdHVzO1xuICAgICAgc2VsZi5jYWxsYmFjayhuZXdfZXJyLCByZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLmNhbGxiYWNrKG51bGwsIHJlcyk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBNaXhpbiBgRW1pdHRlcmAgYW5kIGBSZXF1ZXN0QmFzZWAuXG4gKi9cblxuRW1pdHRlcihSZXF1ZXN0LnByb3RvdHlwZSk7XG5SZXF1ZXN0QmFzZShSZXF1ZXN0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogU2V0IENvbnRlbnQtVHlwZSB0byBgdHlwZWAsIG1hcHBpbmcgdmFsdWVzIGZyb20gYHJlcXVlc3QudHlwZXNgLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgc3VwZXJhZ2VudC50eXBlcy54bWwgPSAnYXBwbGljYXRpb24veG1sJztcbiAqXG4gKiAgICAgIHJlcXVlc3QucG9zdCgnLycpXG4gKiAgICAgICAgLnR5cGUoJ3htbCcpXG4gKiAgICAgICAgLnNlbmQoeG1sc3RyaW5nKVxuICogICAgICAgIC5lbmQoY2FsbGJhY2spO1xuICpcbiAqICAgICAgcmVxdWVzdC5wb3N0KCcvJylcbiAqICAgICAgICAudHlwZSgnYXBwbGljYXRpb24veG1sJylcbiAqICAgICAgICAuc2VuZCh4bWxzdHJpbmcpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS50eXBlID0gZnVuY3Rpb24odHlwZSl7XG4gIHRoaXMuc2V0KCdDb250ZW50LVR5cGUnLCByZXF1ZXN0LnR5cGVzW3R5cGVdIHx8IHR5cGUpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IEFjY2VwdCB0byBgdHlwZWAsIG1hcHBpbmcgdmFsdWVzIGZyb20gYHJlcXVlc3QudHlwZXNgLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgc3VwZXJhZ2VudC50eXBlcy5qc29uID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICpcbiAqICAgICAgcmVxdWVzdC5nZXQoJy9hZ2VudCcpXG4gKiAgICAgICAgLmFjY2VwdCgnanNvbicpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogICAgICByZXF1ZXN0LmdldCgnL2FnZW50JylcbiAqICAgICAgICAuYWNjZXB0KCdhcHBsaWNhdGlvbi9qc29uJylcbiAqICAgICAgICAuZW5kKGNhbGxiYWNrKTtcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYWNjZXB0XG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24odHlwZSl7XG4gIHRoaXMuc2V0KCdBY2NlcHQnLCByZXF1ZXN0LnR5cGVzW3R5cGVdIHx8IHR5cGUpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IEF1dGhvcml6YXRpb24gZmllbGQgdmFsdWUgd2l0aCBgdXNlcmAgYW5kIGBwYXNzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXNlclxuICogQHBhcmFtIHtTdHJpbmd9IFtwYXNzXSBvcHRpb25hbCBpbiBjYXNlIG9mIHVzaW5nICdiZWFyZXInIGFzIHR5cGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIHdpdGggJ3R5cGUnIHByb3BlcnR5ICdhdXRvJywgJ2Jhc2ljJyBvciAnYmVhcmVyJyAoZGVmYXVsdCAnYmFzaWMnKVxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmF1dGggPSBmdW5jdGlvbih1c2VyLCBwYXNzLCBvcHRpb25zKXtcbiAgaWYgKDEgPT09IGFyZ3VtZW50cy5sZW5ndGgpIHBhc3MgPSAnJztcbiAgaWYgKHR5cGVvZiBwYXNzID09PSAnb2JqZWN0JyAmJiBwYXNzICE9PSBudWxsKSB7IC8vIHBhc3MgaXMgb3B0aW9uYWwgYW5kIGNhbiBiZSByZXBsYWNlZCB3aXRoIG9wdGlvbnNcbiAgICBvcHRpb25zID0gcGFzcztcbiAgICBwYXNzID0gJyc7XG4gIH1cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHR5cGU6ICdmdW5jdGlvbicgPT09IHR5cGVvZiBidG9hID8gJ2Jhc2ljJyA6ICdhdXRvJyxcbiAgICB9O1xuICB9XG5cbiAgdmFyIGVuY29kZXIgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGJ0b2EpIHtcbiAgICAgIHJldHVybiBidG9hKHN0cmluZyk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHVzZSBiYXNpYyBhdXRoLCBidG9hIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH07XG5cbiAgcmV0dXJuIHRoaXMuX2F1dGgodXNlciwgcGFzcywgb3B0aW9ucywgZW5jb2Rlcik7XG59O1xuXG4vKipcbiAqIEFkZCBxdWVyeS1zdHJpbmcgYHZhbGAuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICByZXF1ZXN0LmdldCgnL3Nob2VzJylcbiAqICAgICAucXVlcnkoJ3NpemU9MTAnKVxuICogICAgIC5xdWVyeSh7IGNvbG9yOiAnYmx1ZScgfSlcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IHZhbFxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24odmFsKXtcbiAgaWYgKCdzdHJpbmcnICE9IHR5cGVvZiB2YWwpIHZhbCA9IHNlcmlhbGl6ZSh2YWwpO1xuICBpZiAodmFsKSB0aGlzLl9xdWVyeS5wdXNoKHZhbCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBRdWV1ZSB0aGUgZ2l2ZW4gYGZpbGVgIGFzIGFuIGF0dGFjaG1lbnQgdG8gdGhlIHNwZWNpZmllZCBgZmllbGRgLFxuICogd2l0aCBvcHRpb25hbCBgb3B0aW9uc2AgKG9yIGZpbGVuYW1lKS5cbiAqXG4gKiBgYGAganNcbiAqIHJlcXVlc3QucG9zdCgnL3VwbG9hZCcpXG4gKiAgIC5hdHRhY2goJ2NvbnRlbnQnLCBuZXcgQmxvYihbJzxhIGlkPVwiYVwiPjxiIGlkPVwiYlwiPmhleSE8L2I+PC9hPiddLCB7IHR5cGU6IFwidGV4dC9odG1sXCJ9KSlcbiAqICAgLmVuZChjYWxsYmFjayk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmllbGRcbiAqIEBwYXJhbSB7QmxvYnxGaWxlfSBmaWxlXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5hdHRhY2ggPSBmdW5jdGlvbihmaWVsZCwgZmlsZSwgb3B0aW9ucyl7XG4gIGlmIChmaWxlKSB7XG4gICAgaWYgKHRoaXMuX2RhdGEpIHtcbiAgICAgIHRocm93IEVycm9yKFwic3VwZXJhZ2VudCBjYW4ndCBtaXggLnNlbmQoKSBhbmQgLmF0dGFjaCgpXCIpO1xuICAgIH1cblxuICAgIHRoaXMuX2dldEZvcm1EYXRhKCkuYXBwZW5kKGZpZWxkLCBmaWxlLCBvcHRpb25zIHx8IGZpbGUubmFtZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5fZ2V0Rm9ybURhdGEgPSBmdW5jdGlvbigpe1xuICBpZiAoIXRoaXMuX2Zvcm1EYXRhKSB7XG4gICAgdGhpcy5fZm9ybURhdGEgPSBuZXcgcm9vdC5Gb3JtRGF0YSgpO1xuICB9XG4gIHJldHVybiB0aGlzLl9mb3JtRGF0YTtcbn07XG5cbi8qKlxuICogSW52b2tlIHRoZSBjYWxsYmFjayB3aXRoIGBlcnJgIGFuZCBgcmVzYFxuICogYW5kIGhhbmRsZSBhcml0eSBjaGVjay5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJcbiAqIEBwYXJhbSB7UmVzcG9uc2V9IHJlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY2FsbGJhY2sgPSBmdW5jdGlvbihlcnIsIHJlcyl7XG4gIGlmICh0aGlzLl9zaG91bGRSZXRyeShlcnIsIHJlcykpIHtcbiAgICByZXR1cm4gdGhpcy5fcmV0cnkoKTtcbiAgfVxuXG4gIHZhciBmbiA9IHRoaXMuX2NhbGxiYWNrO1xuICB0aGlzLmNsZWFyVGltZW91dCgpO1xuXG4gIGlmIChlcnIpIHtcbiAgICBpZiAodGhpcy5fbWF4UmV0cmllcykgZXJyLnJldHJpZXMgPSB0aGlzLl9yZXRyaWVzIC0gMTtcbiAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgfVxuXG4gIGZuKGVyciwgcmVzKTtcbn07XG5cbi8qKlxuICogSW52b2tlIGNhbGxiYWNrIHdpdGggeC1kb21haW4gZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY3Jvc3NEb21haW5FcnJvciA9IGZ1bmN0aW9uKCl7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1JlcXVlc3QgaGFzIGJlZW4gdGVybWluYXRlZFxcblBvc3NpYmxlIGNhdXNlczogdGhlIG5ldHdvcmsgaXMgb2ZmbGluZSwgT3JpZ2luIGlzIG5vdCBhbGxvd2VkIGJ5IEFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbiwgdGhlIHBhZ2UgaXMgYmVpbmcgdW5sb2FkZWQsIGV0Yy4nKTtcbiAgZXJyLmNyb3NzRG9tYWluID0gdHJ1ZTtcblxuICBlcnIuc3RhdHVzID0gdGhpcy5zdGF0dXM7XG4gIGVyci5tZXRob2QgPSB0aGlzLm1ldGhvZDtcbiAgZXJyLnVybCA9IHRoaXMudXJsO1xuXG4gIHRoaXMuY2FsbGJhY2soZXJyKTtcbn07XG5cbi8vIFRoaXMgb25seSB3YXJucywgYmVjYXVzZSB0aGUgcmVxdWVzdCBpcyBzdGlsbCBsaWtlbHkgdG8gd29ya1xuUmVxdWVzdC5wcm90b3R5cGUuYnVmZmVyID0gUmVxdWVzdC5wcm90b3R5cGUuY2EgPSBSZXF1ZXN0LnByb3RvdHlwZS5hZ2VudCA9IGZ1bmN0aW9uKCl7XG4gIGNvbnNvbGUud2FybihcIlRoaXMgaXMgbm90IHN1cHBvcnRlZCBpbiBicm93c2VyIHZlcnNpb24gb2Ygc3VwZXJhZ2VudFwiKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBUaGlzIHRocm93cywgYmVjYXVzZSBpdCBjYW4ndCBzZW5kL3JlY2VpdmUgZGF0YSBhcyBleHBlY3RlZFxuUmVxdWVzdC5wcm90b3R5cGUucGlwZSA9IFJlcXVlc3QucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oKXtcbiAgdGhyb3cgRXJyb3IoXCJTdHJlYW1pbmcgaXMgbm90IHN1cHBvcnRlZCBpbiBicm93c2VyIHZlcnNpb24gb2Ygc3VwZXJhZ2VudFwiKTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYG9iamAgaXMgYSBob3N0IG9iamVjdCxcbiAqIHdlIGRvbid0IHdhbnQgdG8gc2VyaWFsaXplIHRoZXNlIDopXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5SZXF1ZXN0LnByb3RvdHlwZS5faXNIb3N0ID0gZnVuY3Rpb24gX2lzSG9zdChvYmopIHtcbiAgLy8gTmF0aXZlIG9iamVjdHMgc3RyaW5naWZ5IHRvIFtvYmplY3QgRmlsZV0sIFtvYmplY3QgQmxvYl0sIFtvYmplY3QgRm9ybURhdGFdLCBldGMuXG4gIHJldHVybiBvYmogJiYgJ29iamVjdCcgPT09IHR5cGVvZiBvYmogJiYgIUFycmF5LmlzQXJyYXkob2JqKSAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSAhPT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbi8qKlxuICogSW5pdGlhdGUgcmVxdWVzdCwgaW52b2tpbmcgY2FsbGJhY2sgYGZuKHJlcylgXG4gKiB3aXRoIGFuIGluc3RhbmNlb2YgYFJlc3BvbnNlYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGZuKXtcbiAgaWYgKHRoaXMuX2VuZENhbGxlZCkge1xuICAgIGNvbnNvbGUud2FybihcIldhcm5pbmc6IC5lbmQoKSB3YXMgY2FsbGVkIHR3aWNlLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQgaW4gc3VwZXJhZ2VudFwiKTtcbiAgfVxuICB0aGlzLl9lbmRDYWxsZWQgPSB0cnVlO1xuXG4gIC8vIHN0b3JlIGNhbGxiYWNrXG4gIHRoaXMuX2NhbGxiYWNrID0gZm4gfHwgbm9vcDtcblxuICAvLyBxdWVyeXN0cmluZ1xuICB0aGlzLl9maW5hbGl6ZVF1ZXJ5U3RyaW5nKCk7XG5cbiAgcmV0dXJuIHRoaXMuX2VuZCgpO1xufTtcblxuUmVxdWVzdC5wcm90b3R5cGUuX2VuZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB4aHIgPSAodGhpcy54aHIgPSByZXF1ZXN0LmdldFhIUigpKTtcbiAgdmFyIGRhdGEgPSB0aGlzLl9mb3JtRGF0YSB8fCB0aGlzLl9kYXRhO1xuXG4gIHRoaXMuX3NldFRpbWVvdXRzKCk7XG5cbiAgLy8gc3RhdGUgY2hhbmdlXG4gIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpe1xuICAgIHZhciByZWFkeVN0YXRlID0geGhyLnJlYWR5U3RhdGU7XG4gICAgaWYgKHJlYWR5U3RhdGUgPj0gMiAmJiBzZWxmLl9yZXNwb25zZVRpbWVvdXRUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHNlbGYuX3Jlc3BvbnNlVGltZW91dFRpbWVyKTtcbiAgICB9XG4gICAgaWYgKDQgIT0gcmVhZHlTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEluIElFOSwgcmVhZHMgdG8gYW55IHByb3BlcnR5IChlLmcuIHN0YXR1cykgb2ZmIG9mIGFuIGFib3J0ZWQgWEhSIHdpbGxcbiAgICAvLyByZXN1bHQgaW4gdGhlIGVycm9yIFwiQ291bGQgbm90IGNvbXBsZXRlIHRoZSBvcGVyYXRpb24gZHVlIHRvIGVycm9yIGMwMGMwMjNmXCJcbiAgICB2YXIgc3RhdHVzO1xuICAgIHRyeSB7IHN0YXR1cyA9IHhoci5zdGF0dXMgfSBjYXRjaChlKSB7IHN0YXR1cyA9IDA7IH1cblxuICAgIGlmICghc3RhdHVzKSB7XG4gICAgICBpZiAoc2VsZi50aW1lZG91dCB8fCBzZWxmLl9hYm9ydGVkKSByZXR1cm47XG4gICAgICByZXR1cm4gc2VsZi5jcm9zc0RvbWFpbkVycm9yKCk7XG4gICAgfVxuICAgIHNlbGYuZW1pdCgnZW5kJyk7XG4gIH07XG5cbiAgLy8gcHJvZ3Jlc3NcbiAgdmFyIGhhbmRsZVByb2dyZXNzID0gZnVuY3Rpb24oZGlyZWN0aW9uLCBlKSB7XG4gICAgaWYgKGUudG90YWwgPiAwKSB7XG4gICAgICBlLnBlcmNlbnQgPSBlLmxvYWRlZCAvIGUudG90YWwgKiAxMDA7XG4gICAgfVxuICAgIGUuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgIHNlbGYuZW1pdCgncHJvZ3Jlc3MnLCBlKTtcbiAgfTtcbiAgaWYgKHRoaXMuaGFzTGlzdGVuZXJzKCdwcm9ncmVzcycpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHhoci5vbnByb2dyZXNzID0gaGFuZGxlUHJvZ3Jlc3MuYmluZChudWxsLCAnZG93bmxvYWQnKTtcbiAgICAgIGlmICh4aHIudXBsb2FkKSB7XG4gICAgICAgIHhoci51cGxvYWQub25wcm9ncmVzcyA9IGhhbmRsZVByb2dyZXNzLmJpbmQobnVsbCwgJ3VwbG9hZCcpO1xuICAgICAgfVxuICAgIH0gY2F0Y2goZSkge1xuICAgICAgLy8gQWNjZXNzaW5nIHhoci51cGxvYWQgZmFpbHMgaW4gSUUgZnJvbSBhIHdlYiB3b3JrZXIsIHNvIGp1c3QgcHJldGVuZCBpdCBkb2Vzbid0IGV4aXN0LlxuICAgICAgLy8gUmVwb3J0ZWQgaGVyZTpcbiAgICAgIC8vIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvODM3MjQ1L3htbGh0dHByZXF1ZXN0LXVwbG9hZC10aHJvd3MtaW52YWxpZC1hcmd1bWVudC13aGVuLXVzZWQtZnJvbS13ZWItd29ya2VyLWNvbnRleHRcbiAgICB9XG4gIH1cblxuICAvLyBpbml0aWF0ZSByZXF1ZXN0XG4gIHRyeSB7XG4gICAgaWYgKHRoaXMudXNlcm5hbWUgJiYgdGhpcy5wYXNzd29yZCkge1xuICAgICAgeGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJsLCB0cnVlLCB0aGlzLnVzZXJuYW1lLCB0aGlzLnBhc3N3b3JkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJsLCB0cnVlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIHNlZSAjMTE0OVxuICAgIHJldHVybiB0aGlzLmNhbGxiYWNrKGVycik7XG4gIH1cblxuICAvLyBDT1JTXG4gIGlmICh0aGlzLl93aXRoQ3JlZGVudGlhbHMpIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuXG4gIC8vIGJvZHlcbiAgaWYgKCF0aGlzLl9mb3JtRGF0YSAmJiAnR0VUJyAhPSB0aGlzLm1ldGhvZCAmJiAnSEVBRCcgIT0gdGhpcy5tZXRob2QgJiYgJ3N0cmluZycgIT0gdHlwZW9mIGRhdGEgJiYgIXRoaXMuX2lzSG9zdChkYXRhKSkge1xuICAgIC8vIHNlcmlhbGl6ZSBzdHVmZlxuICAgIHZhciBjb250ZW50VHlwZSA9IHRoaXMuX2hlYWRlclsnY29udGVudC10eXBlJ107XG4gICAgdmFyIHNlcmlhbGl6ZSA9IHRoaXMuX3NlcmlhbGl6ZXIgfHwgcmVxdWVzdC5zZXJpYWxpemVbY29udGVudFR5cGUgPyBjb250ZW50VHlwZS5zcGxpdCgnOycpWzBdIDogJyddO1xuICAgIGlmICghc2VyaWFsaXplICYmIGlzSlNPTihjb250ZW50VHlwZSkpIHtcbiAgICAgIHNlcmlhbGl6ZSA9IHJlcXVlc3Quc2VyaWFsaXplWydhcHBsaWNhdGlvbi9qc29uJ107XG4gICAgfVxuICAgIGlmIChzZXJpYWxpemUpIGRhdGEgPSBzZXJpYWxpemUoZGF0YSk7XG4gIH1cblxuICAvLyBzZXQgaGVhZGVyIGZpZWxkc1xuICBmb3IgKHZhciBmaWVsZCBpbiB0aGlzLmhlYWRlcikge1xuICAgIGlmIChudWxsID09IHRoaXMuaGVhZGVyW2ZpZWxkXSkgY29udGludWU7XG5cbiAgICBpZiAodGhpcy5oZWFkZXIuaGFzT3duUHJvcGVydHkoZmllbGQpKVxuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoZmllbGQsIHRoaXMuaGVhZGVyW2ZpZWxkXSk7XG4gIH1cblxuICBpZiAodGhpcy5fcmVzcG9uc2VUeXBlKSB7XG4gICAgeGhyLnJlc3BvbnNlVHlwZSA9IHRoaXMuX3Jlc3BvbnNlVHlwZTtcbiAgfVxuXG4gIC8vIHNlbmQgc3R1ZmZcbiAgdGhpcy5lbWl0KCdyZXF1ZXN0JywgdGhpcyk7XG5cbiAgLy8gSUUxMSB4aHIuc2VuZCh1bmRlZmluZWQpIHNlbmRzICd1bmRlZmluZWQnIHN0cmluZyBhcyBQT1NUIHBheWxvYWQgKGluc3RlYWQgb2Ygbm90aGluZylcbiAgLy8gV2UgbmVlZCBudWxsIGhlcmUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgeGhyLnNlbmQodHlwZW9mIGRhdGEgIT09ICd1bmRlZmluZWQnID8gZGF0YSA6IG51bGwpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnJlcXVlc3QuYWdlbnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBBZ2VudCgpO1xufTtcblxuW1wiR0VUXCIsIFwiUE9TVFwiLCBcIk9QVElPTlNcIiwgXCJQQVRDSFwiLCBcIlBVVFwiLCBcIkRFTEVURVwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICBBZ2VudC5wcm90b3R5cGVbbWV0aG9kLnRvTG93ZXJDYXNlKCldID0gZnVuY3Rpb24odXJsLCBmbikge1xuICAgIHZhciByZXEgPSBuZXcgcmVxdWVzdC5SZXF1ZXN0KG1ldGhvZCwgdXJsKTtcbiAgICB0aGlzLl9zZXREZWZhdWx0cyhyZXEpO1xuICAgIGlmIChmbikge1xuICAgICAgcmVxLmVuZChmbik7XG4gICAgfVxuICAgIHJldHVybiByZXE7XG4gIH07XG59KTtcblxuQWdlbnQucHJvdG90eXBlLmRlbCA9IEFnZW50LnByb3RvdHlwZVsnZGVsZXRlJ107XG5cbi8qKlxuICogR0VUIGB1cmxgIHdpdGggb3B0aW9uYWwgY2FsbGJhY2sgYGZuKHJlcylgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7TWl4ZWR8RnVuY3Rpb259IFtkYXRhXSBvciBmblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2ZuXVxuICogQHJldHVybiB7UmVxdWVzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucmVxdWVzdC5nZXQgPSBmdW5jdGlvbih1cmwsIGRhdGEsIGZuKSB7XG4gIHZhciByZXEgPSByZXF1ZXN0KCdHRVQnLCB1cmwpO1xuICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgZGF0YSkgKGZuID0gZGF0YSksIChkYXRhID0gbnVsbCk7XG4gIGlmIChkYXRhKSByZXEucXVlcnkoZGF0YSk7XG4gIGlmIChmbikgcmVxLmVuZChmbik7XG4gIHJldHVybiByZXE7XG59O1xuXG4vKipcbiAqIEhFQUQgYHVybGAgd2l0aCBvcHRpb25hbCBjYWxsYmFjayBgZm4ocmVzKWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHBhcmFtIHtNaXhlZHxGdW5jdGlvbn0gW2RhdGFdIG9yIGZuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZm5dXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5yZXF1ZXN0LmhlYWQgPSBmdW5jdGlvbih1cmwsIGRhdGEsIGZuKSB7XG4gIHZhciByZXEgPSByZXF1ZXN0KCdIRUFEJywgdXJsKTtcbiAgaWYgKCdmdW5jdGlvbicgPT0gdHlwZW9mIGRhdGEpIChmbiA9IGRhdGEpLCAoZGF0YSA9IG51bGwpO1xuICBpZiAoZGF0YSkgcmVxLnF1ZXJ5KGRhdGEpO1xuICBpZiAoZm4pIHJlcS5lbmQoZm4pO1xuICByZXR1cm4gcmVxO1xufTtcblxuLyoqXG4gKiBPUFRJT05TIHF1ZXJ5IHRvIGB1cmxgIHdpdGggb3B0aW9uYWwgY2FsbGJhY2sgYGZuKHJlcylgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7TWl4ZWR8RnVuY3Rpb259IFtkYXRhXSBvciBmblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2ZuXVxuICogQHJldHVybiB7UmVxdWVzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucmVxdWVzdC5vcHRpb25zID0gZnVuY3Rpb24odXJsLCBkYXRhLCBmbikge1xuICB2YXIgcmVxID0gcmVxdWVzdCgnT1BUSU9OUycsIHVybCk7XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBkYXRhKSAoZm4gPSBkYXRhKSwgKGRhdGEgPSBudWxsKTtcbiAgaWYgKGRhdGEpIHJlcS5zZW5kKGRhdGEpO1xuICBpZiAoZm4pIHJlcS5lbmQoZm4pO1xuICByZXR1cm4gcmVxO1xufTtcblxuLyoqXG4gKiBERUxFVEUgYHVybGAgd2l0aCBvcHRpb25hbCBgZGF0YWAgYW5kIGNhbGxiYWNrIGBmbihyZXMpYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge01peGVkfSBbZGF0YV1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtmbl1cbiAqIEByZXR1cm4ge1JlcXVlc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlbCh1cmwsIGRhdGEsIGZuKSB7XG4gIHZhciByZXEgPSByZXF1ZXN0KCdERUxFVEUnLCB1cmwpO1xuICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgZGF0YSkgKGZuID0gZGF0YSksIChkYXRhID0gbnVsbCk7XG4gIGlmIChkYXRhKSByZXEuc2VuZChkYXRhKTtcbiAgaWYgKGZuKSByZXEuZW5kKGZuKTtcbiAgcmV0dXJuIHJlcTtcbn1cblxucmVxdWVzdFsnZGVsJ10gPSBkZWw7XG5yZXF1ZXN0WydkZWxldGUnXSA9IGRlbDtcblxuLyoqXG4gKiBQQVRDSCBgdXJsYCB3aXRoIG9wdGlvbmFsIGBkYXRhYCBhbmQgY2FsbGJhY2sgYGZuKHJlcylgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7TWl4ZWR9IFtkYXRhXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2ZuXVxuICogQHJldHVybiB7UmVxdWVzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucmVxdWVzdC5wYXRjaCA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgZm4pIHtcbiAgdmFyIHJlcSA9IHJlcXVlc3QoJ1BBVENIJywgdXJsKTtcbiAgaWYgKCdmdW5jdGlvbicgPT0gdHlwZW9mIGRhdGEpIChmbiA9IGRhdGEpLCAoZGF0YSA9IG51bGwpO1xuICBpZiAoZGF0YSkgcmVxLnNlbmQoZGF0YSk7XG4gIGlmIChmbikgcmVxLmVuZChmbik7XG4gIHJldHVybiByZXE7XG59O1xuXG4vKipcbiAqIFBPU1QgYHVybGAgd2l0aCBvcHRpb25hbCBgZGF0YWAgYW5kIGNhbGxiYWNrIGBmbihyZXMpYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge01peGVkfSBbZGF0YV1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtmbl1cbiAqIEByZXR1cm4ge1JlcXVlc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnJlcXVlc3QucG9zdCA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgZm4pIHtcbiAgdmFyIHJlcSA9IHJlcXVlc3QoJ1BPU1QnLCB1cmwpO1xuICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgZGF0YSkgKGZuID0gZGF0YSksIChkYXRhID0gbnVsbCk7XG4gIGlmIChkYXRhKSByZXEuc2VuZChkYXRhKTtcbiAgaWYgKGZuKSByZXEuZW5kKGZuKTtcbiAgcmV0dXJuIHJlcTtcbn07XG5cbi8qKlxuICogUFVUIGB1cmxgIHdpdGggb3B0aW9uYWwgYGRhdGFgIGFuZCBjYWxsYmFjayBgZm4ocmVzKWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHBhcmFtIHtNaXhlZHxGdW5jdGlvbn0gW2RhdGFdIG9yIGZuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZm5dXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5yZXF1ZXN0LnB1dCA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgZm4pIHtcbiAgdmFyIHJlcSA9IHJlcXVlc3QoJ1BVVCcsIHVybCk7XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBkYXRhKSAoZm4gPSBkYXRhKSwgKGRhdGEgPSBudWxsKTtcbiAgaWYgKGRhdGEpIHJlcS5zZW5kKGRhdGEpO1xuICBpZiAoZm4pIHJlcS5lbmQoZm4pO1xuICByZXR1cm4gcmVxO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDaGVjayBpZiBgb2JqYCBpcyBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gbnVsbCAhPT0gb2JqICYmICdvYmplY3QnID09PSB0eXBlb2Ygb2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBvZiBtaXhlZC1pbiBmdW5jdGlvbnMgc2hhcmVkIGJldHdlZW4gbm9kZSBhbmQgY2xpZW50IGNvZGVcbiAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pcy1vYmplY3QnKTtcblxuLyoqXG4gKiBFeHBvc2UgYFJlcXVlc3RCYXNlYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlcXVlc3RCYXNlO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYFJlcXVlc3RCYXNlYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFJlcXVlc3RCYXNlKG9iaikge1xuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcbn1cblxuLyoqXG4gKiBNaXhpbiB0aGUgcHJvdG90eXBlIHByb3BlcnRpZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XG4gIGZvciAodmFyIGtleSBpbiBSZXF1ZXN0QmFzZS5wcm90b3R5cGUpIHtcbiAgICBvYmpba2V5XSA9IFJlcXVlc3RCYXNlLnByb3RvdHlwZVtrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogQ2xlYXIgcHJldmlvdXMgdGltZW91dC5cbiAqXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLmNsZWFyVGltZW91dCA9IGZ1bmN0aW9uIF9jbGVhclRpbWVvdXQoKXtcbiAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKTtcbiAgY2xlYXJUaW1lb3V0KHRoaXMuX3Jlc3BvbnNlVGltZW91dFRpbWVyKTtcbiAgZGVsZXRlIHRoaXMuX3RpbWVyO1xuICBkZWxldGUgdGhpcy5fcmVzcG9uc2VUaW1lb3V0VGltZXI7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBPdmVycmlkZSBkZWZhdWx0IHJlc3BvbnNlIGJvZHkgcGFyc2VyXG4gKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB0byBjb252ZXJ0IGluY29taW5nIGRhdGEgaW50byByZXF1ZXN0LmJvZHlcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiBwYXJzZShmbil7XG4gIHRoaXMuX3BhcnNlciA9IGZuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IGZvcm1hdCBvZiBiaW5hcnkgcmVzcG9uc2UgYm9keS5cbiAqIEluIGJyb3dzZXIgdmFsaWQgZm9ybWF0cyBhcmUgJ2Jsb2InIGFuZCAnYXJyYXlidWZmZXInLFxuICogd2hpY2ggcmV0dXJuIEJsb2IgYW5kIEFycmF5QnVmZmVyLCByZXNwZWN0aXZlbHkuXG4gKlxuICogSW4gTm9kZSBhbGwgdmFsdWVzIHJlc3VsdCBpbiBCdWZmZXIuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgICByZXEuZ2V0KCcvJylcbiAqICAgICAgICAucmVzcG9uc2VUeXBlKCdibG9iJylcbiAqICAgICAgICAuZW5kKGNhbGxiYWNrKTtcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnJlc3BvbnNlVHlwZSA9IGZ1bmN0aW9uKHZhbCl7XG4gIHRoaXMuX3Jlc3BvbnNlVHlwZSA9IHZhbDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE92ZXJyaWRlIGRlZmF1bHQgcmVxdWVzdCBib2R5IHNlcmlhbGl6ZXJcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHRvIGNvbnZlcnQgZGF0YSBzZXQgdmlhIC5zZW5kIG9yIC5hdHRhY2ggaW50byBwYXlsb2FkIHRvIHNlbmRcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuc2VyaWFsaXplID0gZnVuY3Rpb24gc2VyaWFsaXplKGZuKXtcbiAgdGhpcy5fc2VyaWFsaXplciA9IGZuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IHRpbWVvdXRzLlxuICpcbiAqIC0gcmVzcG9uc2UgdGltZW91dCBpcyB0aW1lIGJldHdlZW4gc2VuZGluZyByZXF1ZXN0IGFuZCByZWNlaXZpbmcgdGhlIGZpcnN0IGJ5dGUgb2YgdGhlIHJlc3BvbnNlLiBJbmNsdWRlcyBETlMgYW5kIGNvbm5lY3Rpb24gdGltZS5cbiAqIC0gZGVhZGxpbmUgaXMgdGhlIHRpbWUgZnJvbSBzdGFydCBvZiB0aGUgcmVxdWVzdCB0byByZWNlaXZpbmcgcmVzcG9uc2UgYm9keSBpbiBmdWxsLiBJZiB0aGUgZGVhZGxpbmUgaXMgdG9vIHNob3J0IGxhcmdlIGZpbGVzIG1heSBub3QgbG9hZCBhdCBhbGwgb24gc2xvdyBjb25uZWN0aW9ucy5cbiAqXG4gKiBWYWx1ZSBvZiAwIG9yIGZhbHNlIG1lYW5zIG5vIHRpbWVvdXQuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ8T2JqZWN0fSBtcyBvciB7cmVzcG9uc2UsIGRlYWRsaW5lfVxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS50aW1lb3V0ID0gZnVuY3Rpb24gdGltZW91dChvcHRpb25zKXtcbiAgaWYgKCFvcHRpb25zIHx8ICdvYmplY3QnICE9PSB0eXBlb2Ygb3B0aW9ucykge1xuICAgIHRoaXMuX3RpbWVvdXQgPSBvcHRpb25zO1xuICAgIHRoaXMuX3Jlc3BvbnNlVGltZW91dCA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmb3IodmFyIG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgc3dpdGNoKG9wdGlvbikge1xuICAgICAgY2FzZSAnZGVhZGxpbmUnOlxuICAgICAgICB0aGlzLl90aW1lb3V0ID0gb3B0aW9ucy5kZWFkbGluZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZXNwb25zZSc6XG4gICAgICAgIHRoaXMuX3Jlc3BvbnNlVGltZW91dCA9IG9wdGlvbnMucmVzcG9uc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgY29uc29sZS53YXJuKFwiVW5rbm93biB0aW1lb3V0IG9wdGlvblwiLCBvcHRpb24pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IG51bWJlciBvZiByZXRyeSBhdHRlbXB0cyBvbiBlcnJvci5cbiAqXG4gKiBGYWlsZWQgcmVxdWVzdHMgd2lsbCBiZSByZXRyaWVkICdjb3VudCcgdGltZXMgaWYgdGltZW91dCBvciBlcnIuY29kZSA+PSA1MDAuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGNvdW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZm5dXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnJldHJ5ID0gZnVuY3Rpb24gcmV0cnkoY291bnQsIGZuKXtcbiAgLy8gRGVmYXVsdCB0byAxIGlmIG5vIGNvdW50IHBhc3NlZCBvciB0cnVlXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8IGNvdW50ID09PSB0cnVlKSBjb3VudCA9IDE7XG4gIGlmIChjb3VudCA8PSAwKSBjb3VudCA9IDA7XG4gIHRoaXMuX21heFJldHJpZXMgPSBjb3VudDtcbiAgdGhpcy5fcmV0cmllcyA9IDA7XG4gIHRoaXMuX3JldHJ5Q2FsbGJhY2sgPSBmbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG52YXIgRVJST1JfQ09ERVMgPSBbXG4gICdFQ09OTlJFU0VUJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFQUREUklORk8nLFxuICAnRVNPQ0tFVFRJTUVET1VUJ1xuXTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSByZXF1ZXN0IHNob3VsZCBiZSByZXRyaWVkLlxuICogKEJvcnJvd2VkIGZyb20gc2VnbWVudGlvL3N1cGVyYWdlbnQtcmV0cnkpXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyXG4gKiBAcGFyYW0ge1Jlc3BvbnNlfSBbcmVzXVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5fc2hvdWxkUmV0cnkgPSBmdW5jdGlvbihlcnIsIHJlcykge1xuICBpZiAoIXRoaXMuX21heFJldHJpZXMgfHwgdGhpcy5fcmV0cmllcysrID49IHRoaXMuX21heFJldHJpZXMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHRoaXMuX3JldHJ5Q2FsbGJhY2spIHtcbiAgICB0cnkge1xuICAgICAgdmFyIG92ZXJyaWRlID0gdGhpcy5fcmV0cnlDYWxsYmFjayhlcnIsIHJlcyk7XG4gICAgICBpZiAob3ZlcnJpZGUgPT09IHRydWUpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKG92ZXJyaWRlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgLy8gdW5kZWZpbmVkIGZhbGxzIGJhY2sgdG8gZGVmYXVsdHNcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfVxuICB9XG4gIGlmIChyZXMgJiYgcmVzLnN0YXR1cyAmJiByZXMuc3RhdHVzID49IDUwMCAmJiByZXMuc3RhdHVzICE9IDUwMSkgcmV0dXJuIHRydWU7XG4gIGlmIChlcnIpIHtcbiAgICBpZiAoZXJyLmNvZGUgJiYgfkVSUk9SX0NPREVTLmluZGV4T2YoZXJyLmNvZGUpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBTdXBlcmFnZW50IHRpbWVvdXRcbiAgICBpZiAoZXJyLnRpbWVvdXQgJiYgZXJyLmNvZGUgPT0gJ0VDT05OQUJPUlRFRCcpIHJldHVybiB0cnVlO1xuICAgIGlmIChlcnIuY3Jvc3NEb21haW4pIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogUmV0cnkgcmVxdWVzdFxuICpcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLl9yZXRyeSA9IGZ1bmN0aW9uKCkge1xuXG4gIHRoaXMuY2xlYXJUaW1lb3V0KCk7XG5cbiAgLy8gbm9kZVxuICBpZiAodGhpcy5yZXEpIHtcbiAgICB0aGlzLnJlcSA9IG51bGw7XG4gICAgdGhpcy5yZXEgPSB0aGlzLnJlcXVlc3QoKTtcbiAgfVxuXG4gIHRoaXMuX2Fib3J0ZWQgPSBmYWxzZTtcbiAgdGhpcy50aW1lZG91dCA9IGZhbHNlO1xuXG4gIHJldHVybiB0aGlzLl9lbmQoKTtcbn07XG5cbi8qKlxuICogUHJvbWlzZSBzdXBwb3J0XG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3JlamVjdF1cbiAqIEByZXR1cm4ge1JlcXVlc3R9XG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbiB0aGVuKHJlc29sdmUsIHJlamVjdCkge1xuICBpZiAoIXRoaXMuX2Z1bGxmaWxsZWRQcm9taXNlKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICh0aGlzLl9lbmRDYWxsZWQpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIldhcm5pbmc6IHN1cGVyYWdlbnQgcmVxdWVzdCB3YXMgc2VudCB0d2ljZSwgYmVjYXVzZSBib3RoIC5lbmQoKSBhbmQgLnRoZW4oKSB3ZXJlIGNhbGxlZC4gTmV2ZXIgY2FsbCAuZW5kKCkgaWYgeW91IHVzZSBwcm9taXNlc1wiKTtcbiAgICB9XG4gICAgdGhpcy5fZnVsbGZpbGxlZFByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihpbm5lclJlc29sdmUsIGlubmVyUmVqZWN0KSB7XG4gICAgICBzZWxmLmVuZChmdW5jdGlvbihlcnIsIHJlcykge1xuICAgICAgICBpZiAoZXJyKSBpbm5lclJlamVjdChlcnIpO1xuICAgICAgICBlbHNlIGlubmVyUmVzb2x2ZShyZXMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX2Z1bGxmaWxsZWRQcm9taXNlLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbn07XG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZVsnY2F0Y2gnXSA9IGZ1bmN0aW9uKGNiKSB7XG4gIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBjYik7XG59O1xuXG4vKipcbiAqIEFsbG93IGZvciBleHRlbnNpb25cbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZuKSB7XG4gIGZuKHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5vayA9IGZ1bmN0aW9uKGNiKSB7XG4gIGlmICgnZnVuY3Rpb24nICE9PSB0eXBlb2YgY2IpIHRocm93IEVycm9yKFwiQ2FsbGJhY2sgcmVxdWlyZWRcIik7XG4gIHRoaXMuX29rQ2FsbGJhY2sgPSBjYjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuX2lzUmVzcG9uc2VPSyA9IGZ1bmN0aW9uKHJlcykge1xuICBpZiAoIXJlcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLl9va0NhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuX29rQ2FsbGJhY2socmVzKTtcbiAgfVxuXG4gIHJldHVybiByZXMuc3RhdHVzID49IDIwMCAmJiByZXMuc3RhdHVzIDwgMzAwO1xufTtcblxuLyoqXG4gKiBHZXQgcmVxdWVzdCBoZWFkZXIgYGZpZWxkYC5cbiAqIENhc2UtaW5zZW5zaXRpdmUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihmaWVsZCl7XG4gIHJldHVybiB0aGlzLl9oZWFkZXJbZmllbGQudG9Mb3dlckNhc2UoKV07XG59O1xuXG4vKipcbiAqIEdldCBjYXNlLWluc2Vuc2l0aXZlIGhlYWRlciBgZmllbGRgIHZhbHVlLlxuICogVGhpcyBpcyBhIGRlcHJlY2F0ZWQgaW50ZXJuYWwgQVBJLiBVc2UgYC5nZXQoZmllbGQpYCBpbnN0ZWFkLlxuICpcbiAqIChnZXRIZWFkZXIgaXMgbm8gbG9uZ2VyIHVzZWQgaW50ZXJuYWxseSBieSB0aGUgc3VwZXJhZ2VudCBjb2RlIGJhc2UpXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqIEBkZXByZWNhdGVkXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLmdldEhlYWRlciA9IFJlcXVlc3RCYXNlLnByb3RvdHlwZS5nZXQ7XG5cbi8qKlxuICogU2V0IGhlYWRlciBgZmllbGRgIHRvIGB2YWxgLCBvciBtdWx0aXBsZSBmaWVsZHMgd2l0aCBvbmUgb2JqZWN0LlxuICogQ2FzZS1pbnNlbnNpdGl2ZS5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICAgIHJlcS5nZXQoJy8nKVxuICogICAgICAgIC5zZXQoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJylcbiAqICAgICAgICAuc2V0KCdYLUFQSS1LZXknLCAnZm9vYmFyJylcbiAqICAgICAgICAuZW5kKGNhbGxiYWNrKTtcbiAqXG4gKiAgICAgIHJlcS5nZXQoJy8nKVxuICogICAgICAgIC5zZXQoeyBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJywgJ1gtQVBJLUtleSc6ICdmb29iYXInIH0pXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBmaWVsZFxuICogQHBhcmFtIHtTdHJpbmd9IHZhbFxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihmaWVsZCwgdmFsKXtcbiAgaWYgKGlzT2JqZWN0KGZpZWxkKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBmaWVsZCkge1xuICAgICAgdGhpcy5zZXQoa2V5LCBmaWVsZFtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgdGhpcy5faGVhZGVyW2ZpZWxkLnRvTG93ZXJDYXNlKCldID0gdmFsO1xuICB0aGlzLmhlYWRlcltmaWVsZF0gPSB2YWw7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgaGVhZGVyIGBmaWVsZGAuXG4gKiBDYXNlLWluc2Vuc2l0aXZlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgICByZXEuZ2V0KCcvJylcbiAqICAgICAgICAudW5zZXQoJ1VzZXItQWdlbnQnKVxuICogICAgICAgIC5lbmQoY2FsbGJhY2spO1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWVsZFxuICovXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUudW5zZXQgPSBmdW5jdGlvbihmaWVsZCl7XG4gIGRlbGV0ZSB0aGlzLl9oZWFkZXJbZmllbGQudG9Mb3dlckNhc2UoKV07XG4gIGRlbGV0ZSB0aGlzLmhlYWRlcltmaWVsZF07XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBXcml0ZSB0aGUgZmllbGQgYG5hbWVgIGFuZCBgdmFsYCwgb3IgbXVsdGlwbGUgZmllbGRzIHdpdGggb25lIG9iamVjdFxuICogZm9yIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiIHJlcXVlc3QgYm9kaWVzLlxuICpcbiAqIGBgYCBqc1xuICogcmVxdWVzdC5wb3N0KCcvdXBsb2FkJylcbiAqICAgLmZpZWxkKCdmb28nLCAnYmFyJylcbiAqICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogcmVxdWVzdC5wb3N0KCcvdXBsb2FkJylcbiAqICAgLmZpZWxkKHsgZm9vOiAnYmFyJywgYmF6OiAncXV4JyB9KVxuICogICAuZW5kKGNhbGxiYWNrKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gbmFtZVxuICogQHBhcmFtIHtTdHJpbmd8QmxvYnxGaWxlfEJ1ZmZlcnxmcy5SZWFkU3RyZWFtfSB2YWxcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuUmVxdWVzdEJhc2UucHJvdG90eXBlLmZpZWxkID0gZnVuY3Rpb24obmFtZSwgdmFsKSB7XG4gIC8vIG5hbWUgc2hvdWxkIGJlIGVpdGhlciBhIHN0cmluZyBvciBhbiBvYmplY3QuXG4gIGlmIChudWxsID09PSBuYW1lIHx8IHVuZGVmaW5lZCA9PT0gbmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignLmZpZWxkKG5hbWUsIHZhbCkgbmFtZSBjYW4gbm90IGJlIGVtcHR5Jyk7XG4gIH1cblxuICBpZiAodGhpcy5fZGF0YSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCIuZmllbGQoKSBjYW4ndCBiZSB1c2VkIGlmIC5zZW5kKCkgaXMgdXNlZC4gUGxlYXNlIHVzZSBvbmx5IC5zZW5kKCkgb3Igb25seSAuZmllbGQoKSAmIC5hdHRhY2goKVwiKTtcbiAgfVxuXG4gIGlmIChpc09iamVjdChuYW1lKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBuYW1lKSB7XG4gICAgICB0aGlzLmZpZWxkKGtleSwgbmFtZVtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgZm9yICh2YXIgaSBpbiB2YWwpIHtcbiAgICAgIHRoaXMuZmllbGQobmFtZSwgdmFsW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB2YWwgc2hvdWxkIGJlIGRlZmluZWQgbm93XG4gIGlmIChudWxsID09PSB2YWwgfHwgdW5kZWZpbmVkID09PSB2YWwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJy5maWVsZChuYW1lLCB2YWwpIHZhbCBjYW4gbm90IGJlIGVtcHR5Jyk7XG4gIH1cbiAgaWYgKCdib29sZWFuJyA9PT0gdHlwZW9mIHZhbCkge1xuICAgIHZhbCA9ICcnICsgdmFsO1xuICB9XG4gIHRoaXMuX2dldEZvcm1EYXRhKCkuYXBwZW5kKG5hbWUsIHZhbCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBYm9ydCB0aGUgcmVxdWVzdCwgYW5kIGNsZWFyIHBvdGVudGlhbCB0aW1lb3V0LlxuICpcbiAqIEByZXR1cm4ge1JlcXVlc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbigpe1xuICBpZiAodGhpcy5fYWJvcnRlZCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHRoaXMuX2Fib3J0ZWQgPSB0cnVlO1xuICB0aGlzLnhociAmJiB0aGlzLnhoci5hYm9ydCgpOyAvLyBicm93c2VyXG4gIHRoaXMucmVxICYmIHRoaXMucmVxLmFib3J0KCk7IC8vIG5vZGVcbiAgdGhpcy5jbGVhclRpbWVvdXQoKTtcbiAgdGhpcy5lbWl0KCdhYm9ydCcpO1xuICByZXR1cm4gdGhpcztcbn07XG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5fYXV0aCA9IGZ1bmN0aW9uKHVzZXIsIHBhc3MsIG9wdGlvbnMsIGJhc2U2NEVuY29kZXIpIHtcbiAgc3dpdGNoIChvcHRpb25zLnR5cGUpIHtcbiAgICBjYXNlICdiYXNpYyc6XG4gICAgICB0aGlzLnNldCgnQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICsgYmFzZTY0RW5jb2Rlcih1c2VyICsgJzonICsgcGFzcykpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdhdXRvJzpcbiAgICAgIHRoaXMudXNlcm5hbWUgPSB1c2VyO1xuICAgICAgdGhpcy5wYXNzd29yZCA9IHBhc3M7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2JlYXJlcic6IC8vIHVzYWdlIHdvdWxkIGJlIC5hdXRoKGFjY2Vzc1Rva2VuLCB7IHR5cGU6ICdiZWFyZXInIH0pXG4gICAgICB0aGlzLnNldCgnQXV0aG9yaXphdGlvbicsICdCZWFyZXIgJyArIHVzZXIpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEVuYWJsZSB0cmFuc21pc3Npb24gb2YgY29va2llcyB3aXRoIHgtZG9tYWluIHJlcXVlc3RzLlxuICpcbiAqIE5vdGUgdGhhdCBmb3IgdGhpcyB0byB3b3JrIHRoZSBvcmlnaW4gbXVzdCBub3QgYmVcbiAqIHVzaW5nIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCIgd2l0aCBhIHdpbGRjYXJkLFxuICogYW5kIGFsc28gbXVzdCBzZXQgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1DcmVkZW50aWFsc1wiXG4gKiB0byBcInRydWVcIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS53aXRoQ3JlZGVudGlhbHMgPSBmdW5jdGlvbihvbikge1xuICAvLyBUaGlzIGlzIGJyb3dzZXItb25seSBmdW5jdGlvbmFsaXR5LiBOb2RlIHNpZGUgaXMgbm8tb3AuXG4gIGlmIChvbiA9PSB1bmRlZmluZWQpIG9uID0gdHJ1ZTtcbiAgdGhpcy5fd2l0aENyZWRlbnRpYWxzID0gb247XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1heCByZWRpcmVjdHMgdG8gYG5gLiBEb2VzIG5vdGluZyBpbiBicm93c2VyIFhIUiBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gblxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5yZWRpcmVjdHMgPSBmdW5jdGlvbihuKXtcbiAgdGhpcy5fbWF4UmVkaXJlY3RzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE1heGltdW0gc2l6ZSBvZiBidWZmZXJlZCByZXNwb25zZSBib2R5LCBpbiBieXRlcy4gQ291bnRzIHVuY29tcHJlc3NlZCBzaXplLlxuICogRGVmYXVsdCAyMDBNQi5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gblxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKi9cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5tYXhSZXNwb25zZVNpemUgPSBmdW5jdGlvbihuKXtcbiAgaWYgKCdudW1iZXInICE9PSB0eXBlb2Ygbikge1xuICAgIHRocm93IFR5cGVFcnJvcihcIkludmFsaWQgYXJndW1lbnRcIik7XG4gIH1cbiAgdGhpcy5fbWF4UmVzcG9uc2VTaXplID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgdG8gYSBwbGFpbiBqYXZhc2NyaXB0IG9iamVjdCAobm90IEpTT04gc3RyaW5nKSBvZiBzY2FsYXIgcHJvcGVydGllcy5cbiAqIE5vdGUgYXMgdGhpcyBtZXRob2QgaXMgZGVzaWduZWQgdG8gcmV0dXJuIGEgdXNlZnVsIG5vbi10aGlzIHZhbHVlLFxuICogaXQgY2Fubm90IGJlIGNoYWluZWQuXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSBkZXNjcmliaW5nIG1ldGhvZCwgdXJsLCBhbmQgZGF0YSBvZiB0aGlzIHJlcXVlc3RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIG1ldGhvZDogdGhpcy5tZXRob2QsXG4gICAgdXJsOiB0aGlzLnVybCxcbiAgICBkYXRhOiB0aGlzLl9kYXRhLFxuICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcixcbiAgfTtcbn07XG5cbi8qKlxuICogU2VuZCBgZGF0YWAgYXMgdGhlIHJlcXVlc3QgYm9keSwgZGVmYXVsdGluZyB0aGUgYC50eXBlKClgIHRvIFwianNvblwiIHdoZW5cbiAqIGFuIG9iamVjdCBpcyBnaXZlbi5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICAgICAvLyBtYW51YWwganNvblxuICogICAgICAgcmVxdWVzdC5wb3N0KCcvdXNlcicpXG4gKiAgICAgICAgIC50eXBlKCdqc29uJylcbiAqICAgICAgICAgLnNlbmQoJ3tcIm5hbWVcIjpcInRqXCJ9JylcbiAqICAgICAgICAgLmVuZChjYWxsYmFjaylcbiAqXG4gKiAgICAgICAvLyBhdXRvIGpzb25cbiAqICAgICAgIHJlcXVlc3QucG9zdCgnL3VzZXInKVxuICogICAgICAgICAuc2VuZCh7IG5hbWU6ICd0aicgfSlcbiAqICAgICAgICAgLmVuZChjYWxsYmFjaylcbiAqXG4gKiAgICAgICAvLyBtYW51YWwgeC13d3ctZm9ybS11cmxlbmNvZGVkXG4gKiAgICAgICByZXF1ZXN0LnBvc3QoJy91c2VyJylcbiAqICAgICAgICAgLnR5cGUoJ2Zvcm0nKVxuICogICAgICAgICAuc2VuZCgnbmFtZT10aicpXG4gKiAgICAgICAgIC5lbmQoY2FsbGJhY2spXG4gKlxuICogICAgICAgLy8gYXV0byB4LXd3dy1mb3JtLXVybGVuY29kZWRcbiAqICAgICAgIHJlcXVlc3QucG9zdCgnL3VzZXInKVxuICogICAgICAgICAudHlwZSgnZm9ybScpXG4gKiAgICAgICAgIC5zZW5kKHsgbmFtZTogJ3RqJyB9KVxuICogICAgICAgICAuZW5kKGNhbGxiYWNrKVxuICpcbiAqICAgICAgIC8vIGRlZmF1bHRzIHRvIHgtd3d3LWZvcm0tdXJsZW5jb2RlZFxuICogICAgICByZXF1ZXN0LnBvc3QoJy91c2VyJylcbiAqICAgICAgICAuc2VuZCgnbmFtZT10b2JpJylcbiAqICAgICAgICAuc2VuZCgnc3BlY2llcz1mZXJyZXQnKVxuICogICAgICAgIC5lbmQoY2FsbGJhY2spXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBkYXRhXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihkYXRhKXtcbiAgdmFyIGlzT2JqID0gaXNPYmplY3QoZGF0YSk7XG4gIHZhciB0eXBlID0gdGhpcy5faGVhZGVyWydjb250ZW50LXR5cGUnXTtcblxuICBpZiAodGhpcy5fZm9ybURhdGEpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiLnNlbmQoKSBjYW4ndCBiZSB1c2VkIGlmIC5hdHRhY2goKSBvciAuZmllbGQoKSBpcyB1c2VkLiBQbGVhc2UgdXNlIG9ubHkgLnNlbmQoKSBvciBvbmx5IC5maWVsZCgpICYgLmF0dGFjaCgpXCIpO1xuICB9XG5cbiAgaWYgKGlzT2JqICYmICF0aGlzLl9kYXRhKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSBbXTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLl9pc0hvc3QoZGF0YSkpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSB7fTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGF0YSAmJiB0aGlzLl9kYXRhICYmIHRoaXMuX2lzSG9zdCh0aGlzLl9kYXRhKSkge1xuICAgIHRocm93IEVycm9yKFwiQ2FuJ3QgbWVyZ2UgdGhlc2Ugc2VuZCBjYWxsc1wiKTtcbiAgfVxuXG4gIC8vIG1lcmdlXG4gIGlmIChpc09iaiAmJiBpc09iamVjdCh0aGlzLl9kYXRhKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICB0aGlzLl9kYXRhW2tleV0gPSBkYXRhW2tleV07XG4gICAgfVxuICB9IGVsc2UgaWYgKCdzdHJpbmcnID09IHR5cGVvZiBkYXRhKSB7XG4gICAgLy8gZGVmYXVsdCB0byB4LXd3dy1mb3JtLXVybGVuY29kZWRcbiAgICBpZiAoIXR5cGUpIHRoaXMudHlwZSgnZm9ybScpO1xuICAgIHR5cGUgPSB0aGlzLl9oZWFkZXJbJ2NvbnRlbnQtdHlwZSddO1xuICAgIGlmICgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyA9PSB0eXBlKSB7XG4gICAgICB0aGlzLl9kYXRhID0gdGhpcy5fZGF0YVxuICAgICAgICA/IHRoaXMuX2RhdGEgKyAnJicgKyBkYXRhXG4gICAgICAgIDogZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZGF0YSA9ICh0aGlzLl9kYXRhIHx8ICcnKSArIGRhdGE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICB9XG5cbiAgaWYgKCFpc09iaiB8fCB0aGlzLl9pc0hvc3QoZGF0YSkpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGRlZmF1bHQgdG8ganNvblxuICBpZiAoIXR5cGUpIHRoaXMudHlwZSgnanNvbicpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU29ydCBgcXVlcnlzdHJpbmdgIGJ5IHRoZSBzb3J0IGZ1bmN0aW9uXG4gKlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgIC8vIGRlZmF1bHQgb3JkZXJcbiAqICAgICAgIHJlcXVlc3QuZ2V0KCcvdXNlcicpXG4gKiAgICAgICAgIC5xdWVyeSgnbmFtZT1OaWNrJylcbiAqICAgICAgICAgLnF1ZXJ5KCdzZWFyY2g9TWFubnknKVxuICogICAgICAgICAuc29ydFF1ZXJ5KClcbiAqICAgICAgICAgLmVuZChjYWxsYmFjaylcbiAqXG4gKiAgICAgICAvLyBjdXN0b21pemVkIHNvcnQgZnVuY3Rpb25cbiAqICAgICAgIHJlcXVlc3QuZ2V0KCcvdXNlcicpXG4gKiAgICAgICAgIC5xdWVyeSgnbmFtZT1OaWNrJylcbiAqICAgICAgICAgLnF1ZXJ5KCdzZWFyY2g9TWFubnknKVxuICogICAgICAgICAuc29ydFF1ZXJ5KGZ1bmN0aW9uKGEsIGIpe1xuICogICAgICAgICAgIHJldHVybiBhLmxlbmd0aCAtIGIubGVuZ3RoO1xuICogICAgICAgICB9KVxuICogICAgICAgICAuZW5kKGNhbGxiYWNrKVxuICpcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzb3J0XG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnNvcnRRdWVyeSA9IGZ1bmN0aW9uKHNvcnQpIHtcbiAgLy8gX3NvcnQgZGVmYXVsdCB0byB0cnVlIGJ1dCBvdGhlcndpc2UgY2FuIGJlIGEgZnVuY3Rpb24gb3IgYm9vbGVhblxuICB0aGlzLl9zb3J0ID0gdHlwZW9mIHNvcnQgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IHNvcnQ7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDb21wb3NlIHF1ZXJ5c3RyaW5nIHRvIGFwcGVuZCB0byByZXEudXJsXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5fZmluYWxpemVRdWVyeVN0cmluZyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBxdWVyeSA9IHRoaXMuX3F1ZXJ5LmpvaW4oJyYnKTtcbiAgaWYgKHF1ZXJ5KSB7XG4gICAgdGhpcy51cmwgKz0gKHRoaXMudXJsLmluZGV4T2YoJz8nKSA+PSAwID8gJyYnIDogJz8nKSArIHF1ZXJ5O1xuICB9XG4gIHRoaXMuX3F1ZXJ5Lmxlbmd0aCA9IDA7IC8vIE1ha2VzIHRoZSBjYWxsIGlkZW1wb3RlbnRcblxuICBpZiAodGhpcy5fc29ydCkge1xuICAgIHZhciBpbmRleCA9IHRoaXMudXJsLmluZGV4T2YoJz8nKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdmFyIHF1ZXJ5QXJyID0gdGhpcy51cmwuc3Vic3RyaW5nKGluZGV4ICsgMSkuc3BsaXQoJyYnKTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgdGhpcy5fc29ydCkge1xuICAgICAgICBxdWVyeUFyci5zb3J0KHRoaXMuX3NvcnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcXVlcnlBcnIuc29ydCgpO1xuICAgICAgfVxuICAgICAgdGhpcy51cmwgPSB0aGlzLnVybC5zdWJzdHJpbmcoMCwgaW5kZXgpICsgJz8nICsgcXVlcnlBcnIuam9pbignJicpO1xuICAgIH1cbiAgfVxufTtcblxuLy8gRm9yIGJhY2t3YXJkcyBjb21wYXQgb25seVxuUmVxdWVzdEJhc2UucHJvdG90eXBlLl9hcHBlbmRRdWVyeVN0cmluZyA9IGZ1bmN0aW9uKCkge2NvbnNvbGUudHJhY2UoXCJVbnN1cHBvcnRlZFwiKTt9XG5cbi8qKlxuICogSW52b2tlIGNhbGxiYWNrIHdpdGggdGltZW91dCBlcnJvci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuX3RpbWVvdXRFcnJvciA9IGZ1bmN0aW9uKHJlYXNvbiwgdGltZW91dCwgZXJybm8pe1xuICBpZiAodGhpcy5fYWJvcnRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgZXJyID0gbmV3IEVycm9yKHJlYXNvbiArIHRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnKTtcbiAgZXJyLnRpbWVvdXQgPSB0aW1lb3V0O1xuICBlcnIuY29kZSA9ICdFQ09OTkFCT1JURUQnO1xuICBlcnIuZXJybm8gPSBlcnJubztcbiAgdGhpcy50aW1lZG91dCA9IHRydWU7XG4gIHRoaXMuYWJvcnQoKTtcbiAgdGhpcy5jYWxsYmFjayhlcnIpO1xufTtcblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLl9zZXRUaW1lb3V0cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLy8gZGVhZGxpbmVcbiAgaWYgKHRoaXMuX3RpbWVvdXQgJiYgIXRoaXMuX3RpbWVyKSB7XG4gICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICBzZWxmLl90aW1lb3V0RXJyb3IoJ1RpbWVvdXQgb2YgJywgc2VsZi5fdGltZW91dCwgJ0VUSU1FJyk7XG4gICAgfSwgdGhpcy5fdGltZW91dCk7XG4gIH1cbiAgLy8gcmVzcG9uc2UgdGltZW91dFxuICBpZiAodGhpcy5fcmVzcG9uc2VUaW1lb3V0ICYmICF0aGlzLl9yZXNwb25zZVRpbWVvdXRUaW1lcikge1xuICAgIHRoaXMuX3Jlc3BvbnNlVGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgc2VsZi5fdGltZW91dEVycm9yKCdSZXNwb25zZSB0aW1lb3V0IG9mICcsIHNlbGYuX3Jlc3BvbnNlVGltZW91dCwgJ0VUSU1FRE9VVCcpO1xuICAgIH0sIHRoaXMuX3Jlc3BvbnNlVGltZW91dCk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbi8qKlxuICogRXhwb3NlIGBSZXNwb25zZUJhc2VgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVzcG9uc2VCYXNlO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYFJlc3BvbnNlQmFzZWAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBSZXNwb25zZUJhc2Uob2JqKSB7XG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xufVxuXG4vKipcbiAqIE1peGluIHRoZSBwcm90b3R5cGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBtaXhpbihvYmopIHtcbiAgZm9yICh2YXIga2V5IGluIFJlc3BvbnNlQmFzZS5wcm90b3R5cGUpIHtcbiAgICBvYmpba2V5XSA9IFJlc3BvbnNlQmFzZS5wcm90b3R5cGVba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIEdldCBjYXNlLWluc2Vuc2l0aXZlIGBmaWVsZGAgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlc3BvbnNlQmFzZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oZmllbGQpIHtcbiAgcmV0dXJuIHRoaXMuaGVhZGVyW2ZpZWxkLnRvTG93ZXJDYXNlKCldO1xufTtcblxuLyoqXG4gKiBTZXQgaGVhZGVyIHJlbGF0ZWQgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gYC50eXBlYCB0aGUgY29udGVudCB0eXBlIHdpdGhvdXQgcGFyYW1zXG4gKlxuICogQSByZXNwb25zZSBvZiBcIkNvbnRlbnQtVHlwZTogdGV4dC9wbGFpbjsgY2hhcnNldD11dGYtOFwiXG4gKiB3aWxsIHByb3ZpZGUgeW91IHdpdGggYSBgLnR5cGVgIG9mIFwidGV4dC9wbGFpblwiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlc3BvbnNlQmFzZS5wcm90b3R5cGUuX3NldEhlYWRlclByb3BlcnRpZXMgPSBmdW5jdGlvbihoZWFkZXIpe1xuICAgIC8vIFRPRE86IG1vYXIhXG4gICAgLy8gVE9ETzogbWFrZSB0aGlzIGEgdXRpbFxuXG4gICAgLy8gY29udGVudC10eXBlXG4gICAgdmFyIGN0ID0gaGVhZGVyWydjb250ZW50LXR5cGUnXSB8fCAnJztcbiAgICB0aGlzLnR5cGUgPSB1dGlscy50eXBlKGN0KTtcblxuICAgIC8vIHBhcmFtc1xuICAgIHZhciBwYXJhbXMgPSB1dGlscy5wYXJhbXMoY3QpO1xuICAgIGZvciAodmFyIGtleSBpbiBwYXJhbXMpIHRoaXNba2V5XSA9IHBhcmFtc1trZXldO1xuXG4gICAgdGhpcy5saW5rcyA9IHt9O1xuXG4gICAgLy8gbGlua3NcbiAgICB0cnkge1xuICAgICAgICBpZiAoaGVhZGVyLmxpbmspIHtcbiAgICAgICAgICAgIHRoaXMubGlua3MgPSB1dGlscy5wYXJzZUxpbmtzKGhlYWRlci5saW5rKTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBpZ25vcmVcbiAgICB9XG59O1xuXG4vKipcbiAqIFNldCBmbGFncyBzdWNoIGFzIGAub2tgIGJhc2VkIG9uIGBzdGF0dXNgLlxuICpcbiAqIEZvciBleGFtcGxlIGEgMnh4IHJlc3BvbnNlIHdpbGwgZ2l2ZSB5b3UgYSBgLm9rYCBvZiBfX3RydWVfX1xuICogd2hlcmVhcyA1eHggd2lsbCBiZSBfX2ZhbHNlX18gYW5kIGAuZXJyb3JgIHdpbGwgYmUgX190cnVlX18uIFRoZVxuICogYC5jbGllbnRFcnJvcmAgYW5kIGAuc2VydmVyRXJyb3JgIGFyZSBhbHNvIGF2YWlsYWJsZSB0byBiZSBtb3JlXG4gKiBzcGVjaWZpYywgYW5kIGAuc3RhdHVzVHlwZWAgaXMgdGhlIGNsYXNzIG9mIGVycm9yIHJhbmdpbmcgZnJvbSAxLi41XG4gKiBzb21ldGltZXMgdXNlZnVsIGZvciBtYXBwaW5nIHJlc3BvbmQgY29sb3JzIGV0Yy5cbiAqXG4gKiBcInN1Z2FyXCIgcHJvcGVydGllcyBhcmUgYWxzbyBkZWZpbmVkIGZvciBjb21tb24gY2FzZXMuIEN1cnJlbnRseSBwcm92aWRpbmc6XG4gKlxuICogICAtIC5ub0NvbnRlbnRcbiAqICAgLSAuYmFkUmVxdWVzdFxuICogICAtIC51bmF1dGhvcml6ZWRcbiAqICAgLSAubm90QWNjZXB0YWJsZVxuICogICAtIC5ub3RGb3VuZFxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0dXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlc3BvbnNlQmFzZS5wcm90b3R5cGUuX3NldFN0YXR1c1Byb3BlcnRpZXMgPSBmdW5jdGlvbihzdGF0dXMpe1xuICAgIHZhciB0eXBlID0gc3RhdHVzIC8gMTAwIHwgMDtcblxuICAgIC8vIHN0YXR1cyAvIGNsYXNzXG4gICAgdGhpcy5zdGF0dXMgPSB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXM7XG4gICAgdGhpcy5zdGF0dXNUeXBlID0gdHlwZTtcblxuICAgIC8vIGJhc2ljc1xuICAgIHRoaXMuaW5mbyA9IDEgPT0gdHlwZTtcbiAgICB0aGlzLm9rID0gMiA9PSB0eXBlO1xuICAgIHRoaXMucmVkaXJlY3QgPSAzID09IHR5cGU7XG4gICAgdGhpcy5jbGllbnRFcnJvciA9IDQgPT0gdHlwZTtcbiAgICB0aGlzLnNlcnZlckVycm9yID0gNSA9PSB0eXBlO1xuICAgIHRoaXMuZXJyb3IgPSAoNCA9PSB0eXBlIHx8IDUgPT0gdHlwZSlcbiAgICAgICAgPyB0aGlzLnRvRXJyb3IoKVxuICAgICAgICA6IGZhbHNlO1xuXG4gICAgLy8gc3VnYXJcbiAgICB0aGlzLmNyZWF0ZWQgPSAyMDEgPT0gc3RhdHVzO1xuICAgIHRoaXMuYWNjZXB0ZWQgPSAyMDIgPT0gc3RhdHVzO1xuICAgIHRoaXMubm9Db250ZW50ID0gMjA0ID09IHN0YXR1cztcbiAgICB0aGlzLmJhZFJlcXVlc3QgPSA0MDAgPT0gc3RhdHVzO1xuICAgIHRoaXMudW5hdXRob3JpemVkID0gNDAxID09IHN0YXR1cztcbiAgICB0aGlzLm5vdEFjY2VwdGFibGUgPSA0MDYgPT0gc3RhdHVzO1xuICAgIHRoaXMuZm9yYmlkZGVuID0gNDAzID09IHN0YXR1cztcbiAgICB0aGlzLm5vdEZvdW5kID0gNDA0ID09IHN0YXR1cztcbiAgICB0aGlzLnVucHJvY2Vzc2FibGVFbnRpdHkgPSA0MjIgPT0gc3RhdHVzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBSZXR1cm4gdGhlIG1pbWUgdHlwZSBmb3IgdGhlIGdpdmVuIGBzdHJgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMudHlwZSA9IGZ1bmN0aW9uKHN0cil7XG4gIHJldHVybiBzdHIuc3BsaXQoLyAqOyAqLykuc2hpZnQoKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIGhlYWRlciBmaWVsZCBwYXJhbWV0ZXJzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMucGFyYW1zID0gZnVuY3Rpb24oc3RyKXtcbiAgcmV0dXJuIHN0ci5zcGxpdCgvICo7ICovKS5yZWR1Y2UoZnVuY3Rpb24ob2JqLCBzdHIpe1xuICAgIHZhciBwYXJ0cyA9IHN0ci5zcGxpdCgvICo9ICovKTtcbiAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKTtcbiAgICB2YXIgdmFsID0gcGFydHMuc2hpZnQoKTtcblxuICAgIGlmIChrZXkgJiYgdmFsKSBvYmpba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gb2JqO1xuICB9LCB7fSk7XG59O1xuXG4vKipcbiAqIFBhcnNlIExpbmsgaGVhZGVyIGZpZWxkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLnBhcnNlTGlua3MgPSBmdW5jdGlvbihzdHIpe1xuICByZXR1cm4gc3RyLnNwbGl0KC8gKiwgKi8pLnJlZHVjZShmdW5jdGlvbihvYmosIHN0cil7XG4gICAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KC8gKjsgKi8pO1xuICAgIHZhciB1cmwgPSBwYXJ0c1swXS5zbGljZSgxLCAtMSk7XG4gICAgdmFyIHJlbCA9IHBhcnRzWzFdLnNwbGl0KC8gKj0gKi8pWzFdLnNsaWNlKDEsIC0xKTtcbiAgICBvYmpbcmVsXSA9IHVybDtcbiAgICByZXR1cm4gb2JqO1xuICB9LCB7fSk7XG59O1xuXG4vKipcbiAqIFN0cmlwIGNvbnRlbnQgcmVsYXRlZCBmaWVsZHMgZnJvbSBgaGVhZGVyYC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyXG4gKiBAcmV0dXJuIHtPYmplY3R9IGhlYWRlclxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5jbGVhbkhlYWRlciA9IGZ1bmN0aW9uKGhlYWRlciwgY2hhbmdlc09yaWdpbil7XG4gIGRlbGV0ZSBoZWFkZXJbJ2NvbnRlbnQtdHlwZSddO1xuICBkZWxldGUgaGVhZGVyWydjb250ZW50LWxlbmd0aCddO1xuICBkZWxldGUgaGVhZGVyWyd0cmFuc2Zlci1lbmNvZGluZyddO1xuICBkZWxldGUgaGVhZGVyWydob3N0J107XG4gIC8vIHNlY3VpcnR5XG4gIGlmIChjaGFuZ2VzT3JpZ2luKSB7XG4gICAgZGVsZXRlIGhlYWRlclsnYXV0aG9yaXphdGlvbiddO1xuICAgIGRlbGV0ZSBoZWFkZXJbJ2Nvb2tpZSddO1xuICB9XG4gIHJldHVybiBoZWFkZXI7XG59O1xuIiwiLyoqXG4gKiBDb252ZXJ0IGEgdHlwZWQgYXJyYXkgdG8gYSBCdWZmZXIgd2l0aG91dCBhIGNvcHlcbiAqXG4gKiBBdXRob3I6ICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogTGljZW5zZTogIE1JVFxuICpcbiAqIGBucG0gaW5zdGFsbCB0eXBlZGFycmF5LXRvLWJ1ZmZlcmBcbiAqL1xuXG52YXIgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnaXMtdHlwZWRhcnJheScpLnN0cmljdFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHR5cGVkYXJyYXlUb0J1ZmZlciAoYXJyKSB7XG4gIGlmIChpc1R5cGVkQXJyYXkoYXJyKSkge1xuICAgIC8vIFRvIGF2b2lkIGEgY29weSwgdXNlIHRoZSB0eXBlZCBhcnJheSdzIHVuZGVybHlpbmcgQXJyYXlCdWZmZXIgdG8gYmFjayBuZXcgQnVmZmVyXG4gICAgdmFyIGJ1ZiA9IEJ1ZmZlci5mcm9tKGFyci5idWZmZXIpXG4gICAgaWYgKGFyci5ieXRlTGVuZ3RoICE9PSBhcnIuYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICAgIC8vIFJlc3BlY3QgdGhlIFwidmlld1wiLCBpLmUuIGJ5dGVPZmZzZXQgYW5kIGJ5dGVMZW5ndGgsIHdpdGhvdXQgZG9pbmcgYSBjb3B5XG4gICAgICBidWYgPSBidWYuc2xpY2UoYXJyLmJ5dGVPZmZzZXQsIGFyci5ieXRlT2Zmc2V0ICsgYXJyLmJ5dGVMZW5ndGgpXG4gICAgfVxuICAgIHJldHVybiBidWZcbiAgfSBlbHNlIHtcbiAgICAvLyBQYXNzIHRocm91Z2ggYWxsIG90aGVyIHR5cGVzIHRvIGBCdWZmZXIuZnJvbWBcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oYXJyKVxuICB9XG59XG4iLCIvKiFcbiAqIFVBUGFyc2VyLmpzIHYwLjcuMThcbiAqIExpZ2h0d2VpZ2h0IEphdmFTY3JpcHQtYmFzZWQgVXNlci1BZ2VudCBzdHJpbmcgcGFyc2VyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFpc2FsbWFuL3VhLXBhcnNlci1qc1xuICpcbiAqIENvcHlyaWdodCDCqSAyMDEyLTIwMTYgRmFpc2FsIFNhbG1hbiA8Znl6bG1hbkBnbWFpbC5jb20+XG4gKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIEdQTHYyIG9yIE1JVFxuICovXG5cbihmdW5jdGlvbiAod2luZG93LCB1bmRlZmluZWQpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8vLy8vLy8vLy8vLy8vXG4gICAgLy8gQ29uc3RhbnRzXG4gICAgLy8vLy8vLy8vLy8vL1xuXG5cbiAgICB2YXIgTElCVkVSU0lPTiAgPSAnMC43LjE4JyxcbiAgICAgICAgRU1QVFkgICAgICAgPSAnJyxcbiAgICAgICAgVU5LTk9XTiAgICAgPSAnPycsXG4gICAgICAgIEZVTkNfVFlQRSAgID0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgVU5ERUZfVFlQRSAgPSAndW5kZWZpbmVkJyxcbiAgICAgICAgT0JKX1RZUEUgICAgPSAnb2JqZWN0JyxcbiAgICAgICAgU1RSX1RZUEUgICAgPSAnc3RyaW5nJyxcbiAgICAgICAgTUFKT1IgICAgICAgPSAnbWFqb3InLCAvLyBkZXByZWNhdGVkXG4gICAgICAgIE1PREVMICAgICAgID0gJ21vZGVsJyxcbiAgICAgICAgTkFNRSAgICAgICAgPSAnbmFtZScsXG4gICAgICAgIFRZUEUgICAgICAgID0gJ3R5cGUnLFxuICAgICAgICBWRU5ET1IgICAgICA9ICd2ZW5kb3InLFxuICAgICAgICBWRVJTSU9OICAgICA9ICd2ZXJzaW9uJyxcbiAgICAgICAgQVJDSElURUNUVVJFPSAnYXJjaGl0ZWN0dXJlJyxcbiAgICAgICAgQ09OU09MRSAgICAgPSAnY29uc29sZScsXG4gICAgICAgIE1PQklMRSAgICAgID0gJ21vYmlsZScsXG4gICAgICAgIFRBQkxFVCAgICAgID0gJ3RhYmxldCcsXG4gICAgICAgIFNNQVJUVFYgICAgID0gJ3NtYXJ0dHYnLFxuICAgICAgICBXRUFSQUJMRSAgICA9ICd3ZWFyYWJsZScsXG4gICAgICAgIEVNQkVEREVEICAgID0gJ2VtYmVkZGVkJztcblxuXG4gICAgLy8vLy8vLy8vLy9cbiAgICAvLyBIZWxwZXJcbiAgICAvLy8vLy8vLy8vXG5cblxuICAgIHZhciB1dGlsID0ge1xuICAgICAgICBleHRlbmQgOiBmdW5jdGlvbiAocmVnZXhlcywgZXh0ZW5zaW9ucykge1xuICAgICAgICAgICAgdmFyIG1hcmdlZFJlZ2V4ZXMgPSB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gcmVnZXhlcykge1xuICAgICAgICAgICAgICAgIGlmIChleHRlbnNpb25zW2ldICYmIGV4dGVuc2lvbnNbaV0ubGVuZ3RoICUgMiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBtYXJnZWRSZWdleGVzW2ldID0gZXh0ZW5zaW9uc1tpXS5jb25jYXQocmVnZXhlc1tpXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2VkUmVnZXhlc1tpXSA9IHJlZ2V4ZXNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1hcmdlZFJlZ2V4ZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGhhcyA6IGZ1bmN0aW9uIChzdHIxLCBzdHIyKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBzdHIxID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyMi50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc3RyMS50b0xvd2VyQ2FzZSgpKSAhPT0gLTE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxvd2VyaXplIDogZnVuY3Rpb24gKHN0cikge1xuICAgICAgICAgICAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9LFxuICAgICAgICBtYWpvciA6IGZ1bmN0aW9uICh2ZXJzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mKHZlcnNpb24pID09PSBTVFJfVFlQRSA/IHZlcnNpb24ucmVwbGFjZSgvW15cXGRcXC5dL2csJycpLnNwbGl0KFwiLlwiKVswXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgICAgdHJpbSA6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLCAnJyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG5cbiAgICAvLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBNYXAgaGVscGVyXG4gICAgLy8vLy8vLy8vLy8vLy9cblxuXG4gICAgdmFyIG1hcHBlciA9IHtcblxuICAgICAgICByZ3ggOiBmdW5jdGlvbiAodWEsIGFycmF5cykge1xuXG4gICAgICAgICAgICAvL3ZhciByZXN1bHQgPSB7fSxcbiAgICAgICAgICAgIHZhciBpID0gMCwgaiwgaywgcCwgcSwgbWF0Y2hlcywgbWF0Y2g7Ly8sIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICAgICAgICAgIC8qLy8gY29uc3RydWN0IG9iamVjdCBiYXJlYm9uZXNcbiAgICAgICAgICAgIGZvciAocCA9IDA7IHAgPCBhcmdzWzFdLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICAgICAgcSA9IGFyZ3NbMV1bcF07XG4gICAgICAgICAgICAgICAgcmVzdWx0W3R5cGVvZiBxID09PSBPQkpfVFlQRSA/IHFbMF0gOiBxXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0qL1xuXG4gICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggYWxsIHJlZ2V4ZXMgbWFwc1xuICAgICAgICAgICAgd2hpbGUgKGkgPCBhcnJheXMubGVuZ3RoICYmICFtYXRjaGVzKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVnZXggPSBhcnJheXNbaV0sICAgICAgIC8vIGV2ZW4gc2VxdWVuY2UgKDAsMiw0LC4uKVxuICAgICAgICAgICAgICAgICAgICBwcm9wcyA9IGFycmF5c1tpICsgMV07ICAgLy8gb2RkIHNlcXVlbmNlICgxLDMsNSwuLilcbiAgICAgICAgICAgICAgICBqID0gayA9IDA7XG5cbiAgICAgICAgICAgICAgICAvLyB0cnkgbWF0Y2hpbmcgdWFzdHJpbmcgd2l0aCByZWdleGVzXG4gICAgICAgICAgICAgICAgd2hpbGUgKGogPCByZWdleC5sZW5ndGggJiYgIW1hdGNoZXMpIHtcblxuICAgICAgICAgICAgICAgICAgICBtYXRjaGVzID0gcmVnZXhbaisrXS5leGVjKHVhKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoISFtYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHAgPSAwOyBwIDwgcHJvcHMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IG1hdGNoZXNbKytrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxID0gcHJvcHNbcF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgZ2l2ZW4gcHJvcGVydHkgaXMgYWN0dWFsbHkgYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHEgPT09IE9CSl9UWVBFICYmIHEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5sZW5ndGggPT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBxWzFdID09IEZVTkNfVFlQRSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFzc2lnbiBtb2RpZmllZCBtYXRjaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcVswXV0gPSBxWzFdLmNhbGwodGhpcywgbWF0Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhc3NpZ24gZ2l2ZW4gdmFsdWUsIGlnbm9yZSByZWdleCBtYXRjaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcVswXV0gPSBxWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHEubGVuZ3RoID09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIHdoZXRoZXIgZnVuY3Rpb24gb3IgcmVnZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcVsxXSA9PT0gRlVOQ19UWVBFICYmICEocVsxXS5leGVjICYmIHFbMV0udGVzdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIGZ1bmN0aW9uICh1c3VhbGx5IHN0cmluZyBtYXBwZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1txWzBdXSA9IG1hdGNoID8gcVsxXS5jYWxsKHRoaXMsIG1hdGNoLCBxWzJdKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2FuaXRpemUgbWF0Y2ggdXNpbmcgZ2l2ZW4gcmVnZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3FbMF1dID0gbWF0Y2ggPyBtYXRjaC5yZXBsYWNlKHFbMV0sIHFbMl0pIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHEubGVuZ3RoID09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3FbMF1dID0gbWF0Y2ggPyBxWzNdLmNhbGwodGhpcywgbWF0Y2gucmVwbGFjZShxWzFdLCBxWzJdKSkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3FdID0gbWF0Y2ggPyBtYXRjaCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcyk7XG4gICAgICAgICAgICAvL3JldHVybiB0aGlzO1xuICAgICAgICB9LFxuXG4gICAgICAgIHN0ciA6IGZ1bmN0aW9uIChzdHIsIG1hcCkge1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIG1hcCkge1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGFycmF5XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXBbaV0gPT09IE9CSl9UWVBFICYmIG1hcFtpXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWFwW2ldLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5oYXMobWFwW2ldW2pdLCBzdHIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChpID09PSBVTktOT1dOKSA/IHVuZGVmaW5lZCA6IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHV0aWwuaGFzKG1hcFtpXSwgc3RyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGkgPT09IFVOS05PV04pID8gdW5kZWZpbmVkIDogaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9XG4gICAgfTtcblxuXG4gICAgLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gU3RyaW5nIG1hcFxuICAgIC8vLy8vLy8vLy8vLy8vXG5cblxuICAgIHZhciBtYXBzID0ge1xuXG4gICAgICAgIGJyb3dzZXIgOiB7XG4gICAgICAgICAgICBvbGRzYWZhcmkgOiB7XG4gICAgICAgICAgICAgICAgdmVyc2lvbiA6IHtcbiAgICAgICAgICAgICAgICAgICAgJzEuMCcgICA6ICcvOCcsXG4gICAgICAgICAgICAgICAgICAgICcxLjInICAgOiAnLzEnLFxuICAgICAgICAgICAgICAgICAgICAnMS4zJyAgIDogJy8zJyxcbiAgICAgICAgICAgICAgICAgICAgJzIuMCcgICA6ICcvNDEyJyxcbiAgICAgICAgICAgICAgICAgICAgJzIuMC4yJyA6ICcvNDE2JyxcbiAgICAgICAgICAgICAgICAgICAgJzIuMC4zJyA6ICcvNDE3JyxcbiAgICAgICAgICAgICAgICAgICAgJzIuMC40JyA6ICcvNDE5JyxcbiAgICAgICAgICAgICAgICAgICAgJz8nICAgICA6ICcvJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBkZXZpY2UgOiB7XG4gICAgICAgICAgICBhbWF6b24gOiB7XG4gICAgICAgICAgICAgICAgbW9kZWwgOiB7XG4gICAgICAgICAgICAgICAgICAgICdGaXJlIFBob25lJyA6IFsnU0QnLCAnS0YnXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzcHJpbnQgOiB7XG4gICAgICAgICAgICAgICAgbW9kZWwgOiB7XG4gICAgICAgICAgICAgICAgICAgICdFdm8gU2hpZnQgNEcnIDogJzczNzNLVCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHZlbmRvciA6IHtcbiAgICAgICAgICAgICAgICAgICAgJ0hUQycgICAgICAgOiAnQVBBJyxcbiAgICAgICAgICAgICAgICAgICAgJ1NwcmludCcgICAgOiAnU3ByaW50J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBvcyA6IHtcbiAgICAgICAgICAgIHdpbmRvd3MgOiB7XG4gICAgICAgICAgICAgICAgdmVyc2lvbiA6IHtcbiAgICAgICAgICAgICAgICAgICAgJ01FJyAgICAgICAgOiAnNC45MCcsXG4gICAgICAgICAgICAgICAgICAgICdOVCAzLjExJyAgIDogJ05UMy41MScsXG4gICAgICAgICAgICAgICAgICAgICdOVCA0LjAnICAgIDogJ05UNC4wJyxcbiAgICAgICAgICAgICAgICAgICAgJzIwMDAnICAgICAgOiAnTlQgNS4wJyxcbiAgICAgICAgICAgICAgICAgICAgJ1hQJyAgICAgICAgOiBbJ05UIDUuMScsICdOVCA1LjInXSxcbiAgICAgICAgICAgICAgICAgICAgJ1Zpc3RhJyAgICAgOiAnTlQgNi4wJyxcbiAgICAgICAgICAgICAgICAgICAgJzcnICAgICAgICAgOiAnTlQgNi4xJyxcbiAgICAgICAgICAgICAgICAgICAgJzgnICAgICAgICAgOiAnTlQgNi4yJyxcbiAgICAgICAgICAgICAgICAgICAgJzguMScgICAgICAgOiAnTlQgNi4zJyxcbiAgICAgICAgICAgICAgICAgICAgJzEwJyAgICAgICAgOiBbJ05UIDYuNCcsICdOVCAxMC4wJ10sXG4gICAgICAgICAgICAgICAgICAgICdSVCcgICAgICAgIDogJ0FSTSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG5cbiAgICAvLy8vLy8vLy8vLy8vL1xuICAgIC8vIFJlZ2V4IG1hcFxuICAgIC8vLy8vLy8vLy8vLy9cblxuXG4gICAgdmFyIHJlZ2V4ZXMgPSB7XG5cbiAgICAgICAgYnJvd3NlciA6IFtbXG5cbiAgICAgICAgICAgIC8vIFByZXN0byBiYXNlZFxuICAgICAgICAgICAgLyhvcGVyYVxcc21pbmkpXFwvKFtcXHdcXC4tXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmEgTWluaVxuICAgICAgICAgICAgLyhvcGVyYVxcc1ttb2JpbGV0YWJdKykuK3ZlcnNpb25cXC8oW1xcd1xcLi1dKykvaSwgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmEgTW9iaS9UYWJsZXRcbiAgICAgICAgICAgIC8ob3BlcmEpLit2ZXJzaW9uXFwvKFtcXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmEgPiA5LjgwXG4gICAgICAgICAgICAvKG9wZXJhKVtcXC9cXHNdKyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPcGVyYSA8IDkuODBcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKG9waW9zKVtcXC9cXHNdKyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPcGVyYSBtaW5pIG9uIGlwaG9uZSA+PSA4LjBcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ09wZXJhIE1pbmknXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgL1xccyhvcHIpXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmEgV2Via2l0XG4gICAgICAgICAgICBdLCBbW05BTUUsICdPcGVyYSddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvLyBNaXhlZFxuICAgICAgICAgICAgLyhraW5kbGUpXFwvKFtcXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBLaW5kbGVcbiAgICAgICAgICAgIC8obHVuYXNjYXBlfG1heHRob258bmV0ZnJvbnR8amFzbWluZXxibGF6ZXIpW1xcL1xcc10/KFtcXHdcXC5dKikvaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTHVuYXNjYXBlL01heHRob24vTmV0ZnJvbnQvSmFzbWluZS9CbGF6ZXJcblxuICAgICAgICAgICAgLy8gVHJpZGVudCBiYXNlZFxuICAgICAgICAgICAgLyhhdmFudFxcc3xpZW1vYmlsZXxzbGltfGJhaWR1KSg/OmJyb3dzZXIpP1tcXC9cXHNdPyhbXFx3XFwuXSopL2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEF2YW50L0lFTW9iaWxlL1NsaW1Ccm93c2VyL0JhaWR1XG4gICAgICAgICAgICAvKD86bXN8XFwoKShpZSlcXHMoW1xcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbnRlcm5ldCBFeHBsb3JlclxuXG4gICAgICAgICAgICAvLyBXZWJraXQvS0hUTUwgYmFzZWRcbiAgICAgICAgICAgIC8ocmVrb25xKVxcLyhbXFx3XFwuXSopL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVrb25xXG4gICAgICAgICAgICAvKGNocm9taXVtfGZsb2NrfHJvY2ttZWx0fG1pZG9yaXxlcGlwaGFueXxzaWxrfHNreWZpcmV8b3ZpYnJvd3Nlcnxib2x0fGlyb258dml2YWxkaXxpcmlkaXVtfHBoYW50b21qc3xib3dzZXJ8cXVhcmspXFwvKFtcXHdcXC4tXSspL2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hyb21pdW0vRmxvY2svUm9ja01lbHQvTWlkb3JpL0VwaXBoYW55L1NpbGsvU2t5ZmlyZS9Cb2x0L0lyb24vSXJpZGl1bS9QaGFudG9tSlMvQm93c2VyXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyh0cmlkZW50KS4rcnZbOlxcc10oW1xcd1xcLl0rKS4rbGlrZVxcc2dlY2tvL2kgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSUUxMVxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnSUUnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhlZGdlfGVkZ2lvc3xlZGdlYSlcXC8oKFxcZCspP1tcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWljcm9zb2Z0IEVkZ2VcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ0VkZ2UnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyh5YWJyb3dzZXIpXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBZYW5kZXhcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ1lhbmRleCddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKHB1ZmZpbilcXC8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFB1ZmZpblxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnUHVmZmluJ10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oKD86W1xcc1xcL10pdWM/XFxzP2Jyb3dzZXJ8KD86anVjLispdWN3ZWIpW1xcL1xcc10/KFtcXHdcXC5dKykvaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVQ0Jyb3dzZXJcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ1VDQnJvd3NlciddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGNvbW9kb19kcmFnb24pXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbW9kbyBEcmFnb25cbiAgICAgICAgICAgIF0sIFtbTkFNRSwgL18vZywgJyAnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhtaWNyb21lc3NlbmdlcilcXC8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZUNoYXRcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ1dlQ2hhdCddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKHFxYnJvd3NlcmxpdGUpXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFFRQnJvd3NlckxpdGVcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKFFRKVxcLyhbXFxkXFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFFRLCBha2EgU2hvdVFcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvbT8ocXFicm93c2VyKVtcXC9cXHNdPyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBRUUJyb3dzZXJcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKEJJRFVCcm93c2VyKVtcXC9cXHNdPyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCYWlkdSBCcm93c2VyXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLygyMzQ1RXhwbG9yZXIpW1xcL1xcc10/KFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMjM0NSBCcm93c2VyXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhNZXRhU3IpW1xcL1xcc10/KFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU291R291QnJvd3NlclxuICAgICAgICAgICAgXSwgW05BTUVdLCBbXG5cbiAgICAgICAgICAgIC8oTEJCUk9XU0VSKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMaWVCYW8gQnJvd3NlclxuICAgICAgICAgICAgXSwgW05BTUVdLCBbXG5cbiAgICAgICAgICAgIC94aWFvbWlcXC9taXVpYnJvd3NlclxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1JVUkgQnJvd3NlclxuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCAnTUlVSSBCcm93c2VyJ11dLCBbXG5cbiAgICAgICAgICAgIC87ZmJhdlxcLyhbXFx3XFwuXSspOy9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmFjZWJvb2sgQXBwIGZvciBpT1MgJiBBbmRyb2lkXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsICdGYWNlYm9vayddXSwgW1xuXG4gICAgICAgICAgICAvaGVhZGxlc3NjaHJvbWUoPzpcXC8oW1xcd1xcLl0rKXxcXHMpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaHJvbWUgSGVhZGxlc3NcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ0Nocm9tZSBIZWFkbGVzcyddXSwgW1xuXG4gICAgICAgICAgICAvXFxzd3ZcXCkuKyhjaHJvbWUpXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hyb21lIFdlYlZpZXdcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgLyguKykvLCAnJDEgV2ViVmlldyddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKCg/Om9jdWx1c3xzYW1zdW5nKWJyb3dzZXIpXFwvKFtcXHdcXC5dKykvaVxuICAgICAgICAgICAgXSwgW1tOQU1FLCAvKC4rKD86Z3x1cykpKC4rKS8sICckMSAkMiddLCBWRVJTSU9OXSwgWyAgICAgICAgICAgICAgICAvLyBPY3VsdXMgLyBTYW1zdW5nIEJyb3dzZXJcblxuICAgICAgICAgICAgL2FuZHJvaWQuK3ZlcnNpb25cXC8oW1xcd1xcLl0rKVxccysoPzptb2JpbGVcXHM/c2FmYXJpfHNhZmFyaSkqL2kgICAgICAgIC8vIEFuZHJvaWQgQnJvd3NlclxuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCAnQW5kcm9pZCBCcm93c2VyJ11dLCBbXG5cbiAgICAgICAgICAgIC8oY2hyb21lfG9tbml3ZWJ8YXJvcmF8W3RpemVub2thXXs1fVxccz9icm93c2VyKVxcL3Y/KFtcXHdcXC5dKykvaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaHJvbWUvT21uaVdlYi9Bcm9yYS9UaXplbi9Ob2tpYVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oZG9sZmluKVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG9scGhpblxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnRG9scGhpbiddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKCg/OmFuZHJvaWQuKyljcm1vfGNyaW9zKVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENocm9tZSBmb3IgQW5kcm9pZC9pT1NcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ0Nocm9tZSddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGNvYXN0KVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9wZXJhIENvYXN0XG4gICAgICAgICAgICBdLCBbW05BTUUsICdPcGVyYSBDb2FzdCddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvZnhpb3NcXC8oW1xcd1xcLi1dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggZm9yIGlPU1xuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCAnRmlyZWZveCddXSwgW1xuXG4gICAgICAgICAgICAvdmVyc2lvblxcLyhbXFx3XFwuXSspLis/bW9iaWxlXFwvXFx3K1xccyhzYWZhcmkpL2kgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vYmlsZSBTYWZhcmlcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ01vYmlsZSBTYWZhcmknXV0sIFtcblxuICAgICAgICAgICAgL3ZlcnNpb25cXC8oW1xcd1xcLl0rKS4rPyhtb2JpbGVcXHM/c2FmYXJpfHNhZmFyaSkvaSAgICAgICAgICAgICAgICAgICAgLy8gU2FmYXJpICYgU2FmYXJpIE1vYmlsZVxuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIE5BTUVdLCBbXG5cbiAgICAgICAgICAgIC93ZWJraXQuKz8oZ3NhKVxcLyhbXFx3XFwuXSspLis/KG1vYmlsZVxccz9zYWZhcml8c2FmYXJpKShcXC9bXFx3XFwuXSspL2kgIC8vIEdvb2dsZSBTZWFyY2ggQXBwbGlhbmNlIG9uIGlPU1xuICAgICAgICAgICAgXSwgW1tOQU1FLCAnR1NBJ10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC93ZWJraXQuKz8obW9iaWxlXFxzP3NhZmFyaXxzYWZhcmkpKFxcL1tcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgIC8vIFNhZmFyaSA8IDMuMFxuICAgICAgICAgICAgXSwgW05BTUUsIFtWRVJTSU9OLCBtYXBwZXIuc3RyLCBtYXBzLmJyb3dzZXIub2xkc2FmYXJpLnZlcnNpb25dXSwgW1xuXG4gICAgICAgICAgICAvKGtvbnF1ZXJvcilcXC8oW1xcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtvbnF1ZXJvclxuICAgICAgICAgICAgLyh3ZWJraXR8a2h0bWwpXFwvKFtcXHdcXC5dKykvaVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8vIEdlY2tvIGJhc2VkXG4gICAgICAgICAgICAvKG5hdmlnYXRvcnxuZXRzY2FwZSlcXC8oW1xcd1xcLi1dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5ldHNjYXBlXG4gICAgICAgICAgICBdLCBbW05BTUUsICdOZXRzY2FwZSddLCBWRVJTSU9OXSwgW1xuICAgICAgICAgICAgLyhzd2lmdGZveCkvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTd2lmdGZveFxuICAgICAgICAgICAgLyhpY2VkcmFnb258aWNld2Vhc2VsfGNhbWlub3xjaGltZXJhfGZlbm5lY3xtYWVtb1xcc2Jyb3dzZXJ8bWluaW1vfGNvbmtlcm9yKVtcXC9cXHNdPyhbXFx3XFwuXFwrXSspL2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEljZURyYWdvbi9JY2V3ZWFzZWwvQ2FtaW5vL0NoaW1lcmEvRmVubmVjL01hZW1vL01pbmltby9Db25rZXJvclxuICAgICAgICAgICAgLyhmaXJlZm94fHNlYW1vbmtleXxrLW1lbGVvbnxpY2VjYXR8aWNlYXBlfGZpcmViaXJkfHBob2VuaXh8cGFsZW1vb258YmFzaWxpc2t8d2F0ZXJmb3gpXFwvKFtcXHdcXC4tXSspJC9pLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpcmVmb3gvU2VhTW9ua2V5L0stTWVsZW9uL0ljZUNhdC9JY2VBcGUvRmlyZWJpcmQvUGhvZW5peFxuICAgICAgICAgICAgLyhtb3ppbGxhKVxcLyhbXFx3XFwuXSspLitydlxcOi4rZ2Vja29cXC9cXGQrL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNb3ppbGxhXG5cbiAgICAgICAgICAgIC8vIE90aGVyXG4gICAgICAgICAgICAvKHBvbGFyaXN8bHlueHxkaWxsb3xpY2FifGRvcmlzfGFtYXlhfHczbXxuZXRzdXJmfHNsZWlwbmlyKVtcXC9cXHNdPyhbXFx3XFwuXSspL2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBvbGFyaXMvTHlueC9EaWxsby9pQ2FiL0RvcmlzL0FtYXlhL3czbS9OZXRTdXJmL1NsZWlwbmlyXG4gICAgICAgICAgICAvKGxpbmtzKVxcc1xcKChbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMaW5rc1xuICAgICAgICAgICAgLyhnb2Jyb3dzZXIpXFwvPyhbXFx3XFwuXSopL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHb0Jyb3dzZXJcbiAgICAgICAgICAgIC8oaWNlXFxzP2Jyb3dzZXIpXFwvdj8oW1xcd1xcLl9dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElDRSBCcm93c2VyXG4gICAgICAgICAgICAvKG1vc2FpYylbXFwvXFxzXShbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNb3NhaWNcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXVxuXG4gICAgICAgICAgICAvKiAvLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgIC8vIE1lZGlhIHBsYXllcnMgQkVHSU5cbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgICAgICAsIFtcblxuICAgICAgICAgICAgLyhhcHBsZSg/OmNvcmVtZWRpYXwpKVxcLygoXFxkKylbXFx3XFwuX10rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2VuZXJpYyBBcHBsZSBDb3JlTWVkaWFcbiAgICAgICAgICAgIC8oY29yZW1lZGlhKSB2KChcXGQrKVtcXHdcXC5fXSspL2lcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGFxdWFsdW5nfGx5c3NuYXxic3BsYXllcilcXC8oKFxcZCspP1tcXHdcXC4tXSspL2kgICAgICAgICAgICAgICAgICAgICAvLyBBcXVhbHVuZy9MeXNzbmEvQlNQbGF5ZXJcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGFyZXN8b3NzcHJveHkpXFxzKChcXGQrKVtcXHdcXC4tXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBcmVzL09TU1Byb3h5XG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhhdWRhY2lvdXN8YXVkaW11c2ljc3RyZWFtfGFtYXJva3xiYXNzfGNvcmV8ZGFsdmlrfGdub21lbXBsYXllcnxtdXNpYyBvbiBjb25zb2xlfG5zcGxheWVyfHBzcC1pbnRlcm5ldHJhZGlvcGxheWVyfHZpZGVvcylcXC8oKFxcZCspW1xcd1xcLi1dKykvaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXVkYWNpb3VzL0F1ZGlNdXNpY1N0cmVhbS9BbWFyb2svQkFTUy9PcGVuQ09SRS9EYWx2aWsvR25vbWVNcGxheWVyL01vQ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOU1BsYXllci9QU1AtSW50ZXJuZXRSYWRpb1BsYXllci9WaWRlb3NcbiAgICAgICAgICAgIC8oY2xlbWVudGluZXxtdXNpYyBwbGF5ZXIgZGFlbW9uKVxccygoXFxkKylbXFx3XFwuLV0rKS9pLCAgICAgICAgICAgICAgIC8vIENsZW1lbnRpbmUvTVBEXG4gICAgICAgICAgICAvKGxnIHBsYXllcnxuZXhwbGF5ZXIpXFxzKChcXGQrKVtcXGRcXC5dKykvaSxcbiAgICAgICAgICAgIC9wbGF5ZXJcXC8obmV4cGxheWVyfGxnIHBsYXllcilcXHMoKFxcZCspW1xcd1xcLi1dKykvaSAgICAgICAgICAgICAgICAgICAvLyBOZXhQbGF5ZXIvTEcgUGxheWVyXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcbiAgICAgICAgICAgIC8obmV4cGxheWVyKVxccygoXFxkKylbXFx3XFwuLV0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5leHBsYXllclxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oZmxycClcXC8oKFxcZCspW1xcd1xcLi1dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZsaXAgUGxheWVyXG4gICAgICAgICAgICBdLCBbW05BTUUsICdGbGlwIFBsYXllciddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGZzdHJlYW18bmF0aXZlaG9zdHxxdWVyeXNlZWtzcGlkZXJ8aWEtYXJjaGl2ZXJ8ZmFjZWJvb2tleHRlcm5hbGhpdCkvaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGU3RyZWFtL05hdGl2ZUhvc3QvUXVlcnlTZWVrU3BpZGVyL0lBIEFyY2hpdmVyL2ZhY2Vib29rZXh0ZXJuYWxoaXRcbiAgICAgICAgICAgIF0sIFtOQU1FXSwgW1xuXG4gICAgICAgICAgICAvKGdzdHJlYW1lcikgc291cGh0dHBzcmMgKD86XFwoW15cXCldK1xcKSl7MCwxfSBsaWJzb3VwXFwvKChcXGQrKVtcXHdcXC4tXSspL2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR3N0cmVhbWVyXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhodGMgc3RyZWFtaW5nIHBsYXllcilcXHNbXFx3X10rXFxzXFwvXFxzKChcXGQrKVtcXGRcXC5dKykvaSwgICAgICAgICAgICAgIC8vIEhUQyBTdHJlYW1pbmcgUGxheWVyXG4gICAgICAgICAgICAvKGphdmF8cHl0aG9uLXVybGxpYnxweXRob24tcmVxdWVzdHN8d2dldHxsaWJjdXJsKVxcLygoXFxkKylbXFx3XFwuLV9dKykvaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSmF2YS91cmxsaWIvcmVxdWVzdHMvd2dldC9jVVJMXG4gICAgICAgICAgICAvKGxhdmYpKChcXGQrKVtcXGRcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExhdmYgKEZGTVBFRylcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGh0Y19vbmVfcylcXC8oKFxcZCspW1xcZFxcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIVEMgT25lIFNcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgL18vZywgJyAnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhtcGxheWVyKSg/Olxcc3xcXC8pKD86KD86c2hlcnB5YS0pezAsMX1zdm4pKD86LXxcXHMpKHJcXGQrKD86LVxcZCtbXFx3XFwuLV0rKXswLDF9KS9pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1QbGF5ZXIgU1ZOXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhtcGxheWVyKSg/Olxcc3xcXC98W3Vua293LV0rKSgoXFxkKylbXFx3XFwuLV0rKS9pICAgICAgICAgICAgICAgICAgICAgIC8vIE1QbGF5ZXJcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKG1wbGF5ZXIpL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1QbGF5ZXIgKG5vIG90aGVyIGluZm8pXG4gICAgICAgICAgICAvKHlvdXJtdXplKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFlvdXJNdXplXG4gICAgICAgICAgICAvKG1lZGlhIHBsYXllciBjbGFzc2ljfG5lcm8gc2hvd3RpbWUpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1lZGlhIFBsYXllciBDbGFzc2ljL05lcm8gU2hvd1RpbWVcbiAgICAgICAgICAgIF0sIFtOQU1FXSwgW1xuXG4gICAgICAgICAgICAvKG5lcm8gKD86aG9tZXxzY291dCkpXFwvKChcXGQrKVtcXHdcXC4tXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOZXJvIEhvbWUvTmVybyBTY291dFxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8obm9raWFcXGQrKVxcLygoXFxkKylbXFx3XFwuLV0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb2tpYVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC9cXHMoc29uZ2JpcmQpXFwvKChcXGQrKVtcXHdcXC4tXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTb25nYmlyZC9QaGlsaXBzLVNvbmdiaXJkXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyh3aW5hbXApMyB2ZXJzaW9uICgoXFxkKylbXFx3XFwuLV0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXaW5hbXBcbiAgICAgICAgICAgIC8od2luYW1wKVxccygoXFxkKylbXFx3XFwuLV0rKS9pLFxuICAgICAgICAgICAgLyh3aW5hbXApbXBlZ1xcLygoXFxkKylbXFx3XFwuLV0rKS9pXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhvY21zLWJvdHx0YXBpbnJhZGlvfHR1bmVpbiByYWRpb3x1bmtub3dufHdpbmFtcHxpbmxpZ2h0IHJhZGlvKS9pICAvLyBPQ01TLWJvdC90YXAgaW4gcmFkaW8vdHVuZWluL3Vua25vd24vd2luYW1wIChubyBvdGhlciBpbmZvKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbmxpZ2h0IHJhZGlvXG4gICAgICAgICAgICBdLCBbTkFNRV0sIFtcblxuICAgICAgICAgICAgLyhxdWlja3RpbWV8cm1hfHJhZGlvYXBwfHJhZGlvY2xpZW50YXBwbGljYXRpb258c291bmR0YXB8dG90ZW18c3RhZ2VmcmlnaHR8c3RyZWFtaXVtKVxcLygoXFxkKylbXFx3XFwuLV0rKS9pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFF1aWNrVGltZS9SZWFsTWVkaWEvUmFkaW9BcHAvUmFkaW9DbGllbnRBcHBsaWNhdGlvbi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU291bmRUYXAvVG90ZW0vU3RhZ2VmcmlnaHQvU3RyZWFtaXVtXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhzbXApKChcXGQrKVtcXGRcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTTVBcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKHZsYykgbWVkaWEgcGxheWVyIC0gdmVyc2lvbiAoKFxcZCspW1xcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgIC8vIFZMQyBWaWRlb2xhblxuICAgICAgICAgICAgLyh2bGMpXFwvKChcXGQrKVtcXHdcXC4tXSspL2ksXG4gICAgICAgICAgICAvKHhibWN8Z3Zmc3x4aW5lfHhtbXN8aXJhcHApXFwvKChcXGQrKVtcXHdcXC4tXSspL2ksICAgICAgICAgICAgICAgICAgICAvLyBYQk1DL2d2ZnMvWGluZS9YTU1TL2lyYXBwXG4gICAgICAgICAgICAvKGZvb2JhcjIwMDApXFwvKChcXGQrKVtcXGRcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb29iYXIyMDAwXG4gICAgICAgICAgICAvKGl0dW5lcylcXC8oKFxcZCspW1xcZFxcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpVHVuZXNcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKHdtcGxheWVyKVxcLygoXFxkKylbXFx3XFwuLV0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXaW5kb3dzIE1lZGlhIFBsYXllclxuICAgICAgICAgICAgLyh3aW5kb3dzLW1lZGlhLXBsYXllcilcXC8oKFxcZCspW1xcd1xcLi1dKykvaVxuICAgICAgICAgICAgXSwgW1tOQU1FLCAvLS9nLCAnICddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvd2luZG93c1xcLygoXFxkKylbXFx3XFwuLV0rKSB1cG5wXFwvW1xcZFxcLl0rIGRsbmFkb2NcXC9bXFxkXFwuXSsgKGhvbWUgbWVkaWEgc2VydmVyKS9pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdpbmRvd3MgTWVkaWEgU2VydmVyXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsICdXaW5kb3dzJ11dLCBbXG5cbiAgICAgICAgICAgIC8oY29tXFwucmlzZXVwcmFkaW9hbGFybSlcXC8oKFxcZCspW1xcZFxcLl0qKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSaXNlVVAgUmFkaW8gQWxhcm1cbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKHJhZC5pbylcXHMoKFxcZCspW1xcZFxcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSYWQuaW9cbiAgICAgICAgICAgIC8ocmFkaW8uKD86ZGV8YXR8ZnIpKVxccygoXFxkKylbXFxkXFwuXSspL2lcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ3JhZC5pbyddLCBWRVJTSU9OXVxuXG4gICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAvLyBNZWRpYSBwbGF5ZXJzIEVORFxuICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8qL1xuXG4gICAgICAgIF0sXG5cbiAgICAgICAgY3B1IDogW1tcblxuICAgICAgICAgICAgLyg/OihhbWR8eCg/Oig/Ojg2fDY0KVtfLV0pP3x3b3d8d2luKTY0KVs7XFwpXS9pICAgICAgICAgICAgICAgICAgICAgLy8gQU1ENjRcbiAgICAgICAgICAgIF0sIFtbQVJDSElURUNUVVJFLCAnYW1kNjQnXV0sIFtcblxuICAgICAgICAgICAgLyhpYTMyKD89OykpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJQTMyIChxdWlja3RpbWUpXG4gICAgICAgICAgICBdLCBbW0FSQ0hJVEVDVFVSRSwgdXRpbC5sb3dlcml6ZV1dLCBbXG5cbiAgICAgICAgICAgIC8oKD86aVszNDZdfHgpODYpWztcXCldL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElBMzJcbiAgICAgICAgICAgIF0sIFtbQVJDSElURUNUVVJFLCAnaWEzMiddXSwgW1xuXG4gICAgICAgICAgICAvLyBQb2NrZXRQQyBtaXN0YWtlbmx5IGlkZW50aWZpZWQgYXMgUG93ZXJQQ1xuICAgICAgICAgICAgL3dpbmRvd3NcXHMoY2V8bW9iaWxlKTtcXHNwcGM7L2lcbiAgICAgICAgICAgIF0sIFtbQVJDSElURUNUVVJFLCAnYXJtJ11dLCBbXG5cbiAgICAgICAgICAgIC8oKD86cHBjfHBvd2VycGMpKD86NjQpPykoPzpcXHNtYWN8O3xcXCkpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQb3dlclBDXG4gICAgICAgICAgICBdLCBbW0FSQ0hJVEVDVFVSRSwgL293ZXIvLCAnJywgdXRpbC5sb3dlcml6ZV1dLCBbXG5cbiAgICAgICAgICAgIC8oc3VuNFxcdylbO1xcKV0vaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTUEFSQ1xuICAgICAgICAgICAgXSwgW1tBUkNISVRFQ1RVUkUsICdzcGFyYyddXSwgW1xuXG4gICAgICAgICAgICAvKCg/OmF2cjMyfGlhNjQoPz07KSl8NjhrKD89XFwpKXxhcm0oPzo2NHwoPz12XFxkKzspKXwoPz1hdG1lbFxccylhdnJ8KD86aXJpeHxtaXBzfHNwYXJjKSg/OjY0KT8oPz07KXxwYS1yaXNjKS9pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElBNjQsIDY4SywgQVJNLzY0LCBBVlIvMzIsIElSSVgvNjQsIE1JUFMvNjQsIFNQQVJDLzY0LCBQQS1SSVNDXG4gICAgICAgICAgICBdLCBbW0FSQ0hJVEVDVFVSRSwgdXRpbC5sb3dlcml6ZV1dXG4gICAgICAgIF0sXG5cbiAgICAgICAgZGV2aWNlIDogW1tcblxuICAgICAgICAgICAgL1xcKChpcGFkfHBsYXlib29rKTtbXFx3XFxzXFwpOy1dKyhyaW18YXBwbGUpL2kgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaVBhZC9QbGF5Qm9va1xuICAgICAgICAgICAgXSwgW01PREVMLCBWRU5ET1IsIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYXBwbGVjb3JlbWVkaWFcXC9bXFx3XFwuXSsgXFwoKGlwYWQpLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpUGFkXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdBcHBsZSddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgLyhhcHBsZVxcc3swLDF9dHYpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXBwbGUgVFZcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdBcHBsZSBUViddLCBbVkVORE9SLCAnQXBwbGUnXV0sIFtcblxuICAgICAgICAgICAgLyhhcmNob3MpXFxzKGdhbWVwYWQyPykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXJjaG9zXG4gICAgICAgICAgICAvKGhwKS4rKHRvdWNocGFkKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhQIFRvdWNoUGFkXG4gICAgICAgICAgICAvKGhwKS4rKHRhYmxldCkvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhQIFRhYmxldFxuICAgICAgICAgICAgLyhraW5kbGUpXFwvKFtcXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBLaW5kbGVcbiAgICAgICAgICAgIC9cXHMobm9vaylbXFx3XFxzXStidWlsZFxcLyhcXHcrKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb29rXG4gICAgICAgICAgICAvKGRlbGwpXFxzKHN0cmVhW2twclxcc1xcZF0qW1xcZGtvXSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWxsIFN0cmVha1xuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvKGtmW0Etel0rKVxcc2J1aWxkXFwvLitzaWxrXFwvL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtpbmRsZSBGaXJlIEhEXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdBbWF6b24nXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvKHNkfGtmKVswMzQ5aGlqb3JzdHV3XStcXHNidWlsZFxcLy4rc2lsa1xcLy9pICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpcmUgUGhvbmVcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsIG1hcHBlci5zdHIsIG1hcHMuZGV2aWNlLmFtYXpvbi5tb2RlbF0sIFtWRU5ET1IsICdBbWF6b24nXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC9cXCgoaXBbaG9uZWR8XFxzXFx3Kl0rKTsuKyhhcHBsZSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaVBvZC9pUGhvbmVcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgVkVORE9SLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC9cXCgoaXBbaG9uZWR8XFxzXFx3Kl0rKTsvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaVBvZC9pUGhvbmVcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0FwcGxlJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvKGJsYWNrYmVycnkpW1xccy1dPyhcXHcrKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmxhY2tCZXJyeVxuICAgICAgICAgICAgLyhibGFja2JlcnJ5fGJlbnF8cGFsbSg/PVxcLSl8c29ueWVyaWNzc29ufGFjZXJ8YXN1c3xkZWxsfG1laXp1fG1vdG9yb2xhfHBvbHl0cm9uKVtcXHNfLV0/KFtcXHctXSopL2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJlblEvUGFsbS9Tb255LUVyaWNzc29uL0FjZXIvQXN1cy9EZWxsL01laXp1L01vdG9yb2xhL1BvbHl0cm9uXG4gICAgICAgICAgICAvKGhwKVxccyhbXFx3XFxzXStcXHcpL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIUCBpUEFRXG4gICAgICAgICAgICAvKGFzdXMpLT8oXFx3KykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBc3VzXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvXFwoYmIxMDtcXHMoXFx3KykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJsYWNrQmVycnkgMTBcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0JsYWNrQmVycnknXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFzdXMgVGFibGV0c1xuICAgICAgICAgICAgL2FuZHJvaWQuKyh0cmFuc2ZvW3ByaW1lXFxzXXs0LDEwfVxcc1xcdyt8ZWVlcGN8c2xpZGVyXFxzXFx3K3xuZXh1cyA3fHBhZGZvbmUpL2lcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0FzdXMnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC8oc29ueSlcXHModGFibGV0XFxzW3BzXSlcXHNidWlsZFxcLy9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTb255XG4gICAgICAgICAgICAvKHNvbnkpPyg/OnNncC4rKVxcc2J1aWxkXFwvL2lcbiAgICAgICAgICAgIF0sIFtbVkVORE9SLCAnU29ueSddLCBbTU9ERUwsICdYcGVyaWEgVGFibGV0J10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgL2FuZHJvaWQuK1xccyhbYy1nXVxcZHs0fXxzb1stbF1cXHcrKVxcc2J1aWxkXFwvL2lcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1NvbnknXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC9cXHMob3V5YSlcXHMvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPdXlhXG4gICAgICAgICAgICAvKG5pbnRlbmRvKVxccyhbd2lkczN1XSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOaW50ZW5kb1xuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBDT05TT0xFXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKztcXHMoc2hpZWxkKVxcc2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE52aWRpYVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnTnZpZGlhJ10sIFtUWVBFLCBDT05TT0xFXV0sIFtcblxuICAgICAgICAgICAgLyhwbGF5c3RhdGlvblxcc1szNHBvcnRhYmxldmldKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGxheXN0YXRpb25cbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1NvbnknXSwgW1RZUEUsIENPTlNPTEVdXSwgW1xuXG4gICAgICAgICAgICAvKHNwcmludFxccyhcXHcrKSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3ByaW50IFBob25lc1xuICAgICAgICAgICAgXSwgW1tWRU5ET1IsIG1hcHBlci5zdHIsIG1hcHMuZGV2aWNlLnNwcmludC52ZW5kb3JdLCBbTU9ERUwsIG1hcHBlci5zdHIsIG1hcHMuZGV2aWNlLnNwcmludC5tb2RlbF0sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvKGxlbm92bylcXHM/KFMoPzo1MDAwfDYwMDApKyg/OlstXVtcXHcrXSkpL2kgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGVub3ZvIHRhYmxldHNcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgLyhodGMpWztfXFxzLV0rKFtcXHdcXHNdKyg/PVxcKSl8XFx3KykqL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhUQ1xuICAgICAgICAgICAgLyh6dGUpLShcXHcqKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gWlRFXG4gICAgICAgICAgICAvKGFsY2F0ZWx8Z2Vla3NwaG9uZXxsZW5vdm98bmV4aWFufHBhbmFzb25pY3woPz07XFxzKXNvbnkpW19cXHMtXT8oW1xcdy1dKikvaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbGNhdGVsL0dlZWtzUGhvbmUvTGVub3ZvL05leGlhbi9QYW5hc29uaWMvU29ueVxuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgW01PREVMLCAvXy9nLCAnICddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLyhuZXh1c1xcczkpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSFRDIE5leHVzIDlcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0hUQyddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2RcXC9odWF3ZWkoW1xcd1xccy1dKylbO1xcKV0vaSxcbiAgICAgICAgICAgIC8obmV4dXNcXHM2cCkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEh1YXdlaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnSHVhd2VpJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvKG1pY3Jvc29mdCk7XFxzKGx1bWlhW1xcc1xcd10rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1pY3Jvc29mdCBMdW1pYVxuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvW1xcc1xcKDtdKHhib3goPzpcXHNvbmUpPylbXFxzXFwpO10vaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWljcm9zb2Z0IFhib3hcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ01pY3Jvc29mdCddLCBbVFlQRSwgQ09OU09MRV1dLCBbXG4gICAgICAgICAgICAvKGtpblxcLltvbmV0d117M30pL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNaWNyb3NvZnQgS2luXG4gICAgICAgICAgICBdLCBbW01PREVMLCAvXFwuL2csICcgJ10sIFtWRU5ET1IsICdNaWNyb3NvZnQnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTW90b3JvbGFcbiAgICAgICAgICAgIC9cXHMobWlsZXN0b25lfGRyb2lkKD86WzItNHhdfFxccyg/OmJpb25pY3x4Mnxwcm98cmF6cikpPzo/KFxcczRnKT8pW1xcd1xcc10rYnVpbGRcXC8vaSxcbiAgICAgICAgICAgIC9tb3RbXFxzLV0/KFxcdyopL2ksXG4gICAgICAgICAgICAvKFhUXFxkezMsNH0pIGJ1aWxkXFwvL2ksXG4gICAgICAgICAgICAvKG5leHVzXFxzNikvaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnTW90b3JvbGEnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvYW5kcm9pZC4rXFxzKG16NjBcXGR8eG9vbVtcXHMyXXswLDJ9KVxcc2J1aWxkXFwvL2lcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ01vdG9yb2xhJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvaGJidHZcXC9cXGQrXFwuXFxkK1xcLlxcZCtcXHMrXFwoW1xcd1xcc10qO1xccyooXFx3W147XSopOyhbXjtdKikvaSAgICAgICAgICAgIC8vIEhiYlRWIGRldmljZXNcbiAgICAgICAgICAgIF0sIFtbVkVORE9SLCB1dGlsLnRyaW1dLCBbTU9ERUwsIHV0aWwudHJpbV0sIFtUWVBFLCBTTUFSVFRWXV0sIFtcblxuICAgICAgICAgICAgL2hiYnR2LittYXBsZTsoXFxkKykvaVxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgL14vLCAnU21hcnRUViddLCBbVkVORE9SLCAnU2Ftc3VuZyddLCBbVFlQRSwgU01BUlRUVl1dLCBbXG5cbiAgICAgICAgICAgIC9cXChkdHZbXFwpO10uKyhhcXVvcykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaGFycFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnU2hhcnAnXSwgW1RZUEUsIFNNQVJUVFZdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rKChzY2gtaVs4OV0wXFxkfHNody1tMzgwc3xndC1wXFxkezR9fGd0LW5cXGQrfHNnaC10OFs1Nl05fG5leHVzIDEwKSkvaSxcbiAgICAgICAgICAgIC8oKFNNLVRcXHcrKSkvaVxuICAgICAgICAgICAgXSwgW1tWRU5ET1IsICdTYW1zdW5nJ10sIE1PREVMLCBbVFlQRSwgVEFCTEVUXV0sIFsgICAgICAgICAgICAgICAgICAvLyBTYW1zdW5nXG4gICAgICAgICAgICAvc21hcnQtdHYuKyhzYW1zdW5nKS9pXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBbVFlQRSwgU01BUlRUVl0sIE1PREVMXSwgW1xuICAgICAgICAgICAgLygoc1tjZ3BdaC1cXHcrfGd0LVxcdyt8Z2FsYXh5XFxzbmV4dXN8c20tXFx3W1xcd1xcZF0rKSkvaSxcbiAgICAgICAgICAgIC8oc2FtW3N1bmddKilbXFxzLV0qKFxcdystP1tcXHctXSopL2ksXG4gICAgICAgICAgICAvc2VjLSgoc2doXFx3KykpL2lcbiAgICAgICAgICAgIF0sIFtbVkVORE9SLCAnU2Ftc3VuZyddLCBNT0RFTCwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC9zaWUtKFxcdyopL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpZW1lbnNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1NpZW1lbnMnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8obWFlbW98bm9raWEpLioobjkwMHxsdW1pYVxcc1xcZCspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb2tpYVxuICAgICAgICAgICAgLyhub2tpYSlbXFxzXy1dPyhbXFx3LV0qKS9pXG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgJ05va2lhJ10sIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWRcXHMzXFwuW1xcc1xcdzstXXsxMH0oYVxcZHszfSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFjZXJcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0FjZXInXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLisoW3ZsXWtcXC0/XFxkezN9KVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTEcgVGFibGV0XG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdMRyddLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC9hbmRyb2lkXFxzM1xcLltcXHNcXHc7LV17MTB9KGxnPyktKFswNmN2OV17Myw0fSkvaSAgICAgICAgICAgICAgICAgICAgIC8vIExHIFRhYmxldFxuICAgICAgICAgICAgXSwgW1tWRU5ET1IsICdMRyddLCBNT0RFTCwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvKGxnKSBuZXRjYXN0XFwudHYvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMRyBTbWFydFRWXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIFNNQVJUVFZdXSwgW1xuICAgICAgICAgICAgLyhuZXh1c1xcc1s0NV0pL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTEdcbiAgICAgICAgICAgIC9sZ1tlO1xcc1xcLy1dKyhcXHcqKS9pLFxuICAgICAgICAgICAgL2FuZHJvaWQuK2xnKFxcLT9bXFxkXFx3XSspXFxzK2J1aWxkL2lcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0xHJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rKGlkZWF0YWJbYS16MC05XFwtXFxzXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGVub3ZvXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdMZW5vdm8nXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9saW51eDsuKygoam9sbGEpKTsvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSm9sbGFcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLygocGViYmxlKSlhcHBcXC9bXFxkXFwuXStcXHMvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGViYmxlXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIFdFQVJBQkxFXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKztcXHMob3BwbylcXHM/KFtcXHdcXHNdKylcXHNidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9QUE9cbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgL2Nya2V5L2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHb29nbGUgQ2hyb21lY2FzdFxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ0Nocm9tZWNhc3QnXSwgW1ZFTkRPUiwgJ0dvb2dsZSddXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rO1xccyhnbGFzcylcXHNcXGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdvb2dsZSBHbGFzc1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnR29vZ2xlJ10sIFtUWVBFLCBXRUFSQUJMRV1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLis7XFxzKHBpeGVsIGMpXFxzL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHb29nbGUgUGl4ZWwgQ1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnR29vZ2xlJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rO1xccyhwaXhlbCB4bHxwaXhlbClcXHMvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR29vZ2xlIFBpeGVsXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdHb29nbGUnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLis7XFxzKFxcdyspXFxzK2J1aWxkXFwvaG1cXDEvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBYaWFvbWkgSG9uZ21pICdudW1lcmljJyBtb2RlbHNcbiAgICAgICAgICAgIC9hbmRyb2lkLisoaG1bXFxzXFwtX10qbm90ZT9bXFxzX10qKD86XFxkXFx3KT8pXFxzK2J1aWxkL2ksICAgICAgICAgICAgICAgLy8gWGlhb21pIEhvbmdtaVxuICAgICAgICAgICAgL2FuZHJvaWQuKyhtaVtcXHNcXC1fXSooPzpvbmV8b25lW1xcc19dcGx1c3xub3RlIGx0ZSk/W1xcc19dKig/OlxcZD9cXHc/KVtcXHNfXSooPzpwbHVzKT8pXFxzK2J1aWxkL2ksICAgIC8vIFhpYW9taSBNaVxuICAgICAgICAgICAgL2FuZHJvaWQuKyhyZWRtaVtcXHNcXC1fXSooPzpub3RlKT8oPzpbXFxzX10qW1xcd1xcc10rKSlcXHMrYnVpbGQvaSAgICAgICAvLyBSZWRtaSBQaG9uZXNcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsIC9fL2csICcgJ10sIFtWRU5ET1IsICdYaWFvbWknXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvYW5kcm9pZC4rKG1pW1xcc1xcLV9dKig/OnBhZCkoPzpbXFxzX10qW1xcd1xcc10rKSlcXHMrYnVpbGQvaSAgICAgICAgICAgIC8vIE1pIFBhZCB0YWJsZXRzXG4gICAgICAgICAgICBdLFtbTU9ERUwsIC9fL2csICcgJ10sIFtWRU5ET1IsICdYaWFvbWknXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvYW5kcm9pZC4rO1xccyhtWzEtNV1cXHNub3RlKVxcc2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1laXp1IFRhYmxldFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnTWVpenUnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLithMDAwKDEpXFxzK2J1aWxkL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9uZVBsdXNcbiAgICAgICAgICAgIC9hbmRyb2lkLitvbmVwbHVzXFxzKGFcXGR7NH0pXFxzK2J1aWxkL2lcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ09uZVBsdXMnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMqKFJDVFtcXGRcXHddKylcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSQ0EgVGFibGV0c1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnUkNBJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9cXHNdKyhWZW51ZVtcXGRcXHNdezIsN30pXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgLy8gRGVsbCBWZW51ZSBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdEZWxsJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKihRW1R8TV1bXFxkXFx3XSspXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmVyaXpvbiBUYWJsZXRcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1Zlcml6b24nXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMrKEJhcm5lc1smXFxzXStOb2JsZVxccyt8Qk5bUlRdKShWPy4qKVxccytidWlsZC9pICAgICAvLyBCYXJuZXMgJiBOb2JsZSBUYWJsZXRcbiAgICAgICAgICAgIF0sIFtbVkVORE9SLCAnQmFybmVzICYgTm9ibGUnXSwgTU9ERUwsIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKyhUTVxcZHszfS4qXFxiKVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFybmVzICYgTm9ibGUgVGFibGV0XG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdOdVZpc2lvbiddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKztcXHMoazg4KVxcc2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFpURSBLIFNlcmllcyBUYWJsZXRcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1pURSddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooZ2VuXFxkezN9KVxccytidWlsZC4qNDloL2kgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3dpc3MgR0VOIE1vYmlsZVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnU3dpc3MnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMqKHp1clxcZHszfSlcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN3aXNzIFpVUiBUYWJsZXRcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1N3aXNzJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKigoWmVraSk/VEIuKlxcYilcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAvLyBaZWtpIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1pla2knXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC8oYW5kcm9pZCkuK1s7XFwvXVxccysoW1lSXVxcZHsyfSlcXHMrYnVpbGQvaSxcbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMrKERyYWdvbltcXC1cXHNdK1RvdWNoXFxzK3xEVCkoXFx3ezV9KVxcc2J1aWxkL2kgICAgICAgIC8vIERyYWdvbiBUb3VjaCBUYWJsZXRcbiAgICAgICAgICAgIF0sIFtbVkVORE9SLCAnRHJhZ29uIFRvdWNoJ10sIE1PREVMLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooTlMtP1xcd3swLDl9KVxcc2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5zaWduaWEgVGFibGV0c1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnSW5zaWduaWEnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMqKChOWHxOZXh0KS0/XFx3ezAsOX0pXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgIC8vIE5leHRCb29rIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ05leHRCb29rJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKihYdHJlbWVcXF8pPyhWKDFbMDQ1XXwyWzAxNV18MzB8NDB8NjB8N1swNV18OTApKVxccytidWlsZC9pXG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgJ1ZvaWNlJ10sIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFsgICAgICAgICAgICAgICAgICAgIC8vIFZvaWNlIFh0cmVtZSBQaG9uZXNcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooTFZURUxcXC0pPyhWMVsxMl0pXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAvLyBMdlRlbCBQaG9uZXNcbiAgICAgICAgICAgIF0sIFtbVkVORE9SLCAnTHZUZWwnXSwgTU9ERUwsIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKihWKDEwME1EfDcwME5BfDcwMTF8OTE3RykuKlxcYilcXHMrYnVpbGQvaSAgICAgICAgICAvLyBFbnZpemVuIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0Vudml6ZW4nXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMqKExlW1xcc1xcLV0rUGFuKVtcXHNcXC1dKyhcXHd7MSw5fSlcXHMrYnVpbGQvaSAgICAgICAgICAvLyBMZSBQYW4gVGFibGV0c1xuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKihUcmlvW1xcc1xcLV0qLiopXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFjaFNwZWVkIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ01hY2hTcGVlZCddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooVHJpbml0eSlbXFwtXFxzXSooVFxcZHszfSlcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAvLyBUcmluaXR5IFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccypUVV8oMTQ5MSlcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSb3RvciBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdSb3RvciddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKyhLUyguKykpXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW1hem9uIEtpbmRsZSBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdBbWF6b24nXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLisoR2lnYXNldClbXFxzXFwtXSsoUVxcd3sxLDl9KVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAgIC8vIEdpZ2FzZXQgVGFibGV0c1xuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvXFxzKHRhYmxldHx0YWIpWztcXC9dL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVW5pZGVudGlmaWFibGUgVGFibGV0XG4gICAgICAgICAgICAvXFxzKG1vYmlsZSkoPzpbO1xcL118XFxzc2FmYXJpKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVuaWRlbnRpZmlhYmxlIE1vYmlsZVxuICAgICAgICAgICAgXSwgW1tUWVBFLCB1dGlsLmxvd2VyaXplXSwgVkVORE9SLCBNT0RFTF0sIFtcblxuICAgICAgICAgICAgLyhhbmRyb2lkW1xcd1xcLlxcc1xcLV17MCw5fSk7LitidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2VuZXJpYyBBbmRyb2lkIERldmljZVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnR2VuZXJpYyddXVxuXG5cbiAgICAgICAgLyovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgLy8gVE9ETzogbW92ZSB0byBzdHJpbmcgbWFwXG4gICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgICAgIC8oQzY2MDMpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU29ueSBYcGVyaWEgWiBDNjYwM1xuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ1hwZXJpYSBaIEM2NjAzJ10sIFtWRU5ET1IsICdTb255J10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgLyhDNjkwMykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTb255IFhwZXJpYSBaIDFcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdYcGVyaWEgWiAxJ10sIFtWRU5ET1IsICdTb255J10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvKFNNLUc5MDBbRnxIXSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhbXN1bmcgR2FsYXh5IFM1XG4gICAgICAgICAgICBdLCBbW01PREVMLCAnR2FsYXh5IFM1J10sIFtWRU5ET1IsICdTYW1zdW5nJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgLyhTTS1HNzEwMikvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTYW1zdW5nIEdhbGF4eSBHcmFuZCAyXG4gICAgICAgICAgICBdLCBbW01PREVMLCAnR2FsYXh5IEdyYW5kIDInXSwgW1ZFTkRPUiwgJ1NhbXN1bmcnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvKFNNLUc1MzBIKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhbXN1bmcgR2FsYXh5IEdyYW5kIFByaW1lXG4gICAgICAgICAgICBdLCBbW01PREVMLCAnR2FsYXh5IEdyYW5kIFByaW1lJ10sIFtWRU5ET1IsICdTYW1zdW5nJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgLyhTTS1HMzEzSFopL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTYW1zdW5nIEdhbGF4eSBWXG4gICAgICAgICAgICBdLCBbW01PREVMLCAnR2FsYXh5IFYnXSwgW1ZFTkRPUiwgJ1NhbXN1bmcnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvKFNNLVQ4MDUpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhbXN1bmcgR2FsYXh5IFRhYiBTIDEwLjVcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdHYWxheHkgVGFiIFMgMTAuNSddLCBbVkVORE9SLCAnU2Ftc3VuZyddLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC8oU00tRzgwMEYpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2Ftc3VuZyBHYWxheHkgUzUgTWluaVxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ0dhbGF4eSBTNSBNaW5pJ10sIFtWRU5ET1IsICdTYW1zdW5nJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgLyhTTS1UMzExKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTYW1zdW5nIEdhbGF4eSBUYWIgMyA4LjBcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdHYWxheHkgVGFiIDMgOC4wJ10sIFtWRU5ET1IsICdTYW1zdW5nJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvKFQzQykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkdmFuIFZhbmRyb2lkIFQzQ1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnQWR2YW4nXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvKEFEVkFOIFQxSlxcKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZHZhbiBWYW5kcm9pZCBUMUorXG4gICAgICAgICAgICBdLCBbW01PREVMLCAnVmFuZHJvaWQgVDFKKyddLCBbVkVORE9SLCAnQWR2YW4nXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvKEFEVkFOIFM0QSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkdmFuIFZhbmRyb2lkIFM0QVxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ1ZhbmRyb2lkIFM0QSddLCBbVkVORE9SLCAnQWR2YW4nXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8oVjk3Mk0pL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gWlRFIFY5NzJNXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdaVEUnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8oaS1tb2JpbGUpXFxzKElRXFxzW1xcZFxcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGktbW9iaWxlIElRXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvKElRNi4zKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGktbW9iaWxlIElRIElRIDYuM1xuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ0lRIDYuMyddLCBbVkVORE9SLCAnaS1tb2JpbGUnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvKGktbW9iaWxlKVxccyhpLXN0eWxlXFxzW1xcZFxcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpLW1vYmlsZSBpLVNUWUxFXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvKGktU1RZTEUyLjEpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGktbW9iaWxlIGktU1RZTEUgMi4xXG4gICAgICAgICAgICBdLCBbW01PREVMLCAnaS1TVFlMRSAyLjEnXSwgW1ZFTkRPUiwgJ2ktbW9iaWxlJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvKG1vYmlpc3RhciB0b3VjaCBMQUkgNTEyKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1vYmlpc3RhciB0b3VjaCBMQUkgNTEyXG4gICAgICAgICAgICBdLCBbW01PREVMLCAnVG91Y2ggTEFJIDUxMiddLCBbVkVORE9SLCAnbW9iaWlzdGFyJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAvLyBFTkQgVE9ET1xuICAgICAgICAgICAgLy8vLy8vLy8vLy8qL1xuXG4gICAgICAgIF0sXG5cbiAgICAgICAgZW5naW5lIDogW1tcblxuICAgICAgICAgICAgL3dpbmRvd3MuK1xcc2VkZ2VcXC8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRWRnZUhUTUxcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ0VkZ2VIVE1MJ11dLCBbXG5cbiAgICAgICAgICAgIC8ocHJlc3RvKVxcLyhbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJlc3RvXG4gICAgICAgICAgICAvKHdlYmtpdHx0cmlkZW50fG5ldGZyb250fG5ldHN1cmZ8YW1heWF8bHlueHx3M20pXFwvKFtcXHdcXC5dKykvaSwgICAgIC8vIFdlYktpdC9UcmlkZW50L05ldEZyb250L05ldFN1cmYvQW1heWEvTHlueC93M21cbiAgICAgICAgICAgIC8oa2h0bWx8dGFzbWFufGxpbmtzKVtcXC9cXHNdXFwoPyhbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBLSFRNTC9UYXNtYW4vTGlua3NcbiAgICAgICAgICAgIC8oaWNhYilbXFwvXFxzXShbMjNdXFwuW1xcZFxcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpQ2FiXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgL3J2XFw6KFtcXHdcXC5dezEsOX0pLisoZ2Vja28pL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZWNrb1xuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIE5BTUVdXG4gICAgICAgIF0sXG5cbiAgICAgICAgb3MgOiBbW1xuXG4gICAgICAgICAgICAvLyBXaW5kb3dzIGJhc2VkXG4gICAgICAgICAgICAvbWljcm9zb2Z0XFxzKHdpbmRvd3MpXFxzKHZpc3RhfHhwKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2luZG93cyAoaVR1bmVzKVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG4gICAgICAgICAgICAvKHdpbmRvd3MpXFxzbnRcXHM2XFwuMjtcXHMoYXJtKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXaW5kb3dzIFJUXG4gICAgICAgICAgICAvKHdpbmRvd3NcXHNwaG9uZSg/Olxcc29zKSopW1xcc1xcL10/KFtcXGRcXC5cXHNcXHddKikvaSwgICAgICAgICAgICAgICAgICAgLy8gV2luZG93cyBQaG9uZVxuICAgICAgICAgICAgLyh3aW5kb3dzXFxzbW9iaWxlfHdpbmRvd3MpW1xcc1xcL10/KFtudGNlXFxkXFwuXFxzXStcXHcpL2lcbiAgICAgICAgICAgIF0sIFtOQU1FLCBbVkVSU0lPTiwgbWFwcGVyLnN0ciwgbWFwcy5vcy53aW5kb3dzLnZlcnNpb25dXSwgW1xuICAgICAgICAgICAgLyh3aW4oPz0zfDl8bil8d2luXFxzOXhcXHMpKFtudFxcZFxcLl0rKS9pXG4gICAgICAgICAgICBdLCBbW05BTUUsICdXaW5kb3dzJ10sIFtWRVJTSU9OLCBtYXBwZXIuc3RyLCBtYXBzLm9zLndpbmRvd3MudmVyc2lvbl1dLCBbXG5cbiAgICAgICAgICAgIC8vIE1vYmlsZS9FbWJlZGRlZCBPU1xuICAgICAgICAgICAgL1xcKChiYikoMTApOy9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmxhY2tCZXJyeSAxMFxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnQmxhY2tCZXJyeSddLCBWRVJTSU9OXSwgW1xuICAgICAgICAgICAgLyhibGFja2JlcnJ5KVxcdypcXC8/KFtcXHdcXC5dKikvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmxhY2tiZXJyeVxuICAgICAgICAgICAgLyh0aXplbilbXFwvXFxzXShbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGl6ZW5cbiAgICAgICAgICAgIC8oYW5kcm9pZHx3ZWJvc3xwYWxtXFxzb3N8cW54fGJhZGF8cmltXFxzdGFibGV0XFxzb3N8bWVlZ298Y29udGlraSlbXFwvXFxzLV0/KFtcXHdcXC5dKikvaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW5kcm9pZC9XZWJPUy9QYWxtL1FOWC9CYWRhL1JJTS9NZWVHby9Db250aWtpXG4gICAgICAgICAgICAvbGludXg7Lisoc2FpbGZpc2gpOy9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhaWxmaXNoIE9TXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcbiAgICAgICAgICAgIC8oc3ltYmlhblxccz9vc3xzeW1ib3N8czYwKD89OykpW1xcL1xccy1dPyhbXFx3XFwuXSopL2kgICAgICAgICAgICAgICAgICAvLyBTeW1iaWFuXG4gICAgICAgICAgICBdLCBbW05BTUUsICdTeW1iaWFuJ10sIFZFUlNJT05dLCBbXG4gICAgICAgICAgICAvXFwoKHNlcmllczQwKTsvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXJpZXMgNDBcbiAgICAgICAgICAgIF0sIFtOQU1FXSwgW1xuICAgICAgICAgICAgL21vemlsbGEuK1xcKG1vYmlsZTsuK2dlY2tvLitmaXJlZm94L2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyZWZveCBPU1xuICAgICAgICAgICAgXSwgW1tOQU1FLCAnRmlyZWZveCBPUyddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvLyBDb25zb2xlXG4gICAgICAgICAgICAvKG5pbnRlbmRvfHBsYXlzdGF0aW9uKVxccyhbd2lkczM0cG9ydGFibGV2dV0rKS9pLCAgICAgICAgICAgICAgICAgICAvLyBOaW50ZW5kby9QbGF5c3RhdGlvblxuXG4gICAgICAgICAgICAvLyBHTlUvTGludXggYmFzZWRcbiAgICAgICAgICAgIC8obWludClbXFwvXFxzXFwoXT8oXFx3KikvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1pbnRcbiAgICAgICAgICAgIC8obWFnZWlhfHZlY3RvcmxpbnV4KVs7XFxzXS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hZ2VpYS9WZWN0b3JMaW51eFxuICAgICAgICAgICAgLyhqb2xpfFtreGxuXT91YnVudHV8ZGViaWFufHN1c2V8b3BlbnN1c2V8Z2VudG9vfCg/PVxccylhcmNofHNsYWNrd2FyZXxmZWRvcmF8bWFuZHJpdmF8Y2VudG9zfHBjbGludXhvc3xyZWRoYXR8emVud2Fsa3xsaW5wdXMpW1xcL1xccy1dPyg/IWNocm9tKShbXFx3XFwuLV0qKS9pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBKb2xpL1VidW50dS9EZWJpYW4vU1VTRS9HZW50b28vQXJjaC9TbGFja3dhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmVkb3JhL01hbmRyaXZhL0NlbnRPUy9QQ0xpbnV4T1MvUmVkSGF0L1plbndhbGsvTGlucHVzXG4gICAgICAgICAgICAvKGh1cmR8bGludXgpXFxzPyhbXFx3XFwuXSopL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEh1cmQvTGludXhcbiAgICAgICAgICAgIC8oZ251KVxccz8oW1xcd1xcLl0qKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR05VXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhjcm9zKVxcc1tcXHddK1xccyhbXFx3XFwuXStcXHcpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaHJvbWl1bSBPU1xuICAgICAgICAgICAgXSwgW1tOQU1FLCAnQ2hyb21pdW0gT1MnXSwgVkVSU0lPTl0sW1xuXG4gICAgICAgICAgICAvLyBTb2xhcmlzXG4gICAgICAgICAgICAvKHN1bm9zKVxccz8oW1xcd1xcLlxcZF0qKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTb2xhcmlzXG4gICAgICAgICAgICBdLCBbW05BTUUsICdTb2xhcmlzJ10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8vIEJTRCBiYXNlZFxuICAgICAgICAgICAgL1xccyhbZnJlbnRvcGMtXXswLDR9YnNkfGRyYWdvbmZseSlcXHM/KFtcXHdcXC5dKikvaSAgICAgICAgICAgICAgICAgICAgLy8gRnJlZUJTRC9OZXRCU0QvT3BlbkJTRC9QQy1CU0QvRHJhZ29uRmx5XG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sW1xuXG4gICAgICAgICAgICAvKGhhaWt1KVxccyhcXHcrKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFpa3VcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSxbXG5cbiAgICAgICAgICAgIC9jZm5ldHdvcmtcXC8uK2Rhcndpbi9pLFxuICAgICAgICAgICAgL2lwW2hvbmVhZF17Miw0fSg/Oi4qb3NcXHMoW1xcd10rKVxcc2xpa2VcXHNtYWN8O1xcc29wZXJhKS9pICAgICAgICAgICAgIC8vIGlPU1xuICAgICAgICAgICAgXSwgW1tWRVJTSU9OLCAvXy9nLCAnLiddLCBbTkFNRSwgJ2lPUyddXSwgW1xuXG4gICAgICAgICAgICAvKG1hY1xcc29zXFxzeClcXHM/KFtcXHdcXHNcXC5dKikvaSxcbiAgICAgICAgICAgIC8obWFjaW50b3NofG1hYyg/PV9wb3dlcnBjKVxccykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hYyBPU1xuICAgICAgICAgICAgXSwgW1tOQU1FLCAnTWFjIE9TJ10sIFtWRVJTSU9OLCAvXy9nLCAnLiddXSwgW1xuXG4gICAgICAgICAgICAvLyBPdGhlclxuICAgICAgICAgICAgLygoPzpvcGVuKT9zb2xhcmlzKVtcXC9cXHMtXT8oW1xcd1xcLl0qKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU29sYXJpc1xuICAgICAgICAgICAgLyhhaXgpXFxzKChcXGQpKD89XFwufFxcKXxcXHMpW1xcd1xcLl0pKi9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQUlYXG4gICAgICAgICAgICAvKHBsYW5cXHM5fG1pbml4fGJlb3N8b3NcXC8yfGFtaWdhb3N8bW9ycGhvc3xyaXNjXFxzb3N8b3BlbnZtcykvaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGxhbjkvTWluaXgvQmVPUy9PUzIvQW1pZ2FPUy9Nb3JwaE9TL1JJU0NPUy9PcGVuVk1TXG4gICAgICAgICAgICAvKHVuaXgpXFxzPyhbXFx3XFwuXSopL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVOSVhcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXVxuICAgICAgICBdXG4gICAgfTtcblxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBDb25zdHJ1Y3RvclxuICAgIC8vLy8vLy8vLy8vLy8vLy9cbiAgICAvKlxuICAgIHZhciBCcm93c2VyID0gZnVuY3Rpb24gKG5hbWUsIHZlcnNpb24pIHtcbiAgICAgICAgdGhpc1tOQU1FXSA9IG5hbWU7XG4gICAgICAgIHRoaXNbVkVSU0lPTl0gPSB2ZXJzaW9uO1xuICAgIH07XG4gICAgdmFyIENQVSA9IGZ1bmN0aW9uIChhcmNoKSB7XG4gICAgICAgIHRoaXNbQVJDSElURUNUVVJFXSA9IGFyY2g7XG4gICAgfTtcbiAgICB2YXIgRGV2aWNlID0gZnVuY3Rpb24gKHZlbmRvciwgbW9kZWwsIHR5cGUpIHtcbiAgICAgICAgdGhpc1tWRU5ET1JdID0gdmVuZG9yO1xuICAgICAgICB0aGlzW01PREVMXSA9IG1vZGVsO1xuICAgICAgICB0aGlzW1RZUEVdID0gdHlwZTtcbiAgICB9O1xuICAgIHZhciBFbmdpbmUgPSBCcm93c2VyO1xuICAgIHZhciBPUyA9IEJyb3dzZXI7XG4gICAgKi9cbiAgICB2YXIgVUFQYXJzZXIgPSBmdW5jdGlvbiAodWFzdHJpbmcsIGV4dGVuc2lvbnMpIHtcblxuICAgICAgICBpZiAodHlwZW9mIHVhc3RyaW5nID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgZXh0ZW5zaW9ucyA9IHVhc3RyaW5nO1xuICAgICAgICAgICAgdWFzdHJpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVUFQYXJzZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVBUGFyc2VyKHVhc3RyaW5nLCBleHRlbnNpb25zKS5nZXRSZXN1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB1YSA9IHVhc3RyaW5nIHx8ICgod2luZG93ICYmIHdpbmRvdy5uYXZpZ2F0b3IgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpID8gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQgOiBFTVBUWSk7XG4gICAgICAgIHZhciByZ3htYXAgPSBleHRlbnNpb25zID8gdXRpbC5leHRlbmQocmVnZXhlcywgZXh0ZW5zaW9ucykgOiByZWdleGVzO1xuICAgICAgICAvL3ZhciBicm93c2VyID0gbmV3IEJyb3dzZXIoKTtcbiAgICAgICAgLy92YXIgY3B1ID0gbmV3IENQVSgpO1xuICAgICAgICAvL3ZhciBkZXZpY2UgPSBuZXcgRGV2aWNlKCk7XG4gICAgICAgIC8vdmFyIGVuZ2luZSA9IG5ldyBFbmdpbmUoKTtcbiAgICAgICAgLy92YXIgb3MgPSBuZXcgT1MoKTtcblxuICAgICAgICB0aGlzLmdldEJyb3dzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYnJvd3NlciA9IHsgbmFtZTogdW5kZWZpbmVkLCB2ZXJzaW9uOiB1bmRlZmluZWQgfTtcbiAgICAgICAgICAgIG1hcHBlci5yZ3guY2FsbChicm93c2VyLCB1YSwgcmd4bWFwLmJyb3dzZXIpO1xuICAgICAgICAgICAgYnJvd3Nlci5tYWpvciA9IHV0aWwubWFqb3IoYnJvd3Nlci52ZXJzaW9uKTsgLy8gZGVwcmVjYXRlZFxuICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXI7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0Q1BVID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNwdSA9IHsgYXJjaGl0ZWN0dXJlOiB1bmRlZmluZWQgfTtcbiAgICAgICAgICAgIG1hcHBlci5yZ3guY2FsbChjcHUsIHVhLCByZ3htYXAuY3B1KTtcbiAgICAgICAgICAgIHJldHVybiBjcHU7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0RGV2aWNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRldmljZSA9IHsgdmVuZG9yOiB1bmRlZmluZWQsIG1vZGVsOiB1bmRlZmluZWQsIHR5cGU6IHVuZGVmaW5lZCB9O1xuICAgICAgICAgICAgbWFwcGVyLnJneC5jYWxsKGRldmljZSwgdWEsIHJneG1hcC5kZXZpY2UpO1xuICAgICAgICAgICAgcmV0dXJuIGRldmljZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRFbmdpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZW5naW5lID0geyBuYW1lOiB1bmRlZmluZWQsIHZlcnNpb246IHVuZGVmaW5lZCB9O1xuICAgICAgICAgICAgbWFwcGVyLnJneC5jYWxsKGVuZ2luZSwgdWEsIHJneG1hcC5lbmdpbmUpO1xuICAgICAgICAgICAgcmV0dXJuIGVuZ2luZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRPUyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvcyA9IHsgbmFtZTogdW5kZWZpbmVkLCB2ZXJzaW9uOiB1bmRlZmluZWQgfTtcbiAgICAgICAgICAgIG1hcHBlci5yZ3guY2FsbChvcywgdWEsIHJneG1hcC5vcyk7XG4gICAgICAgICAgICByZXR1cm4gb3M7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0UmVzdWx0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1YSAgICAgIDogdGhpcy5nZXRVQSgpLFxuICAgICAgICAgICAgICAgIGJyb3dzZXIgOiB0aGlzLmdldEJyb3dzZXIoKSxcbiAgICAgICAgICAgICAgICBlbmdpbmUgIDogdGhpcy5nZXRFbmdpbmUoKSxcbiAgICAgICAgICAgICAgICBvcyAgICAgIDogdGhpcy5nZXRPUygpLFxuICAgICAgICAgICAgICAgIGRldmljZSAgOiB0aGlzLmdldERldmljZSgpLFxuICAgICAgICAgICAgICAgIGNwdSAgICAgOiB0aGlzLmdldENQVSgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldFVBID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHVhO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNldFVBID0gZnVuY3Rpb24gKHVhc3RyaW5nKSB7XG4gICAgICAgICAgICB1YSA9IHVhc3RyaW5nO1xuICAgICAgICAgICAgLy9icm93c2VyID0gbmV3IEJyb3dzZXIoKTtcbiAgICAgICAgICAgIC8vY3B1ID0gbmV3IENQVSgpO1xuICAgICAgICAgICAgLy9kZXZpY2UgPSBuZXcgRGV2aWNlKCk7XG4gICAgICAgICAgICAvL2VuZ2luZSA9IG5ldyBFbmdpbmUoKTtcbiAgICAgICAgICAgIC8vb3MgPSBuZXcgT1MoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgVUFQYXJzZXIuVkVSU0lPTiA9IExJQlZFUlNJT047XG4gICAgVUFQYXJzZXIuQlJPV1NFUiA9IHtcbiAgICAgICAgTkFNRSAgICA6IE5BTUUsXG4gICAgICAgIE1BSk9SICAgOiBNQUpPUiwgLy8gZGVwcmVjYXRlZFxuICAgICAgICBWRVJTSU9OIDogVkVSU0lPTlxuICAgIH07XG4gICAgVUFQYXJzZXIuQ1BVID0ge1xuICAgICAgICBBUkNISVRFQ1RVUkUgOiBBUkNISVRFQ1RVUkVcbiAgICB9O1xuICAgIFVBUGFyc2VyLkRFVklDRSA9IHtcbiAgICAgICAgTU9ERUwgICA6IE1PREVMLFxuICAgICAgICBWRU5ET1IgIDogVkVORE9SLFxuICAgICAgICBUWVBFICAgIDogVFlQRSxcbiAgICAgICAgQ09OU09MRSA6IENPTlNPTEUsXG4gICAgICAgIE1PQklMRSAgOiBNT0JJTEUsXG4gICAgICAgIFNNQVJUVFYgOiBTTUFSVFRWLFxuICAgICAgICBUQUJMRVQgIDogVEFCTEVULFxuICAgICAgICBXRUFSQUJMRTogV0VBUkFCTEUsXG4gICAgICAgIEVNQkVEREVEOiBFTUJFRERFRFxuICAgIH07XG4gICAgVUFQYXJzZXIuRU5HSU5FID0ge1xuICAgICAgICBOQU1FICAgIDogTkFNRSxcbiAgICAgICAgVkVSU0lPTiA6IFZFUlNJT05cbiAgICB9O1xuICAgIFVBUGFyc2VyLk9TID0ge1xuICAgICAgICBOQU1FICAgIDogTkFNRSxcbiAgICAgICAgVkVSU0lPTiA6IFZFUlNJT05cbiAgICB9O1xuICAgIC8vVUFQYXJzZXIuVXRpbHMgPSB1dGlsO1xuXG4gICAgLy8vLy8vLy8vLy9cbiAgICAvLyBFeHBvcnRcbiAgICAvLy8vLy8vLy8vXG5cblxuICAgIC8vIGNoZWNrIGpzIGVudmlyb25tZW50XG4gICAgaWYgKHR5cGVvZihleHBvcnRzKSAhPT0gVU5ERUZfVFlQRSkge1xuICAgICAgICAvLyBub2RlanMgZW52XG4gICAgICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSBVTkRFRl9UWVBFICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBVQVBhcnNlcjtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiB0ZXN0ISEhISEhISFcbiAgICAgICAgLypcbiAgICAgICAgaWYgKHJlcXVpcmUgJiYgcmVxdWlyZS5tYWluID09PSBtb2R1bGUgJiYgcHJvY2Vzcykge1xuICAgICAgICAgICAgLy8gY2xpXG4gICAgICAgICAgICB2YXIganNvbml6ZSA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBhcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2gobmV3IFVBUGFyc2VyKGFycltpXSkuZ2V0UmVzdWx0KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShKU09OLnN0cmluZ2lmeShyZXMsIG51bGwsIDIpICsgJ1xcbicpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLnN0ZGluLmlzVFRZKSB7XG4gICAgICAgICAgICAgICAgLy8gdmlhIGFyZ3NcbiAgICAgICAgICAgICAgICBqc29uaXplKHByb2Nlc3MuYXJndi5zbGljZSgyKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHZpYSBwaXBlXG4gICAgICAgICAgICAgICAgdmFyIHN0ciA9ICcnO1xuICAgICAgICAgICAgICAgIHByb2Nlc3Muc3RkaW4ub24oJ3JlYWRhYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWFkID0gcHJvY2Vzcy5zdGRpbi5yZWFkKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWFkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gcmVhZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHByb2Nlc3Muc3RkaW4ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAganNvbml6ZShzdHIucmVwbGFjZSgvXFxuJC8sICcnKS5zcGxpdCgnXFxuJykpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICovXG4gICAgICAgIGV4cG9ydHMuVUFQYXJzZXIgPSBVQVBhcnNlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZXF1aXJlanMgZW52IChvcHRpb25hbClcbiAgICAgICAgaWYgKHR5cGVvZihkZWZpbmUpID09PSBGVU5DX1RZUEUgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAgICAgZGVmaW5lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVUFQYXJzZXI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cpIHtcbiAgICAgICAgICAgIC8vIGJyb3dzZXIgZW52XG4gICAgICAgICAgICB3aW5kb3cuVUFQYXJzZXIgPSBVQVBhcnNlcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGpRdWVyeS9aZXB0byBzcGVjaWZpYyAob3B0aW9uYWwpXG4gICAgLy8gTm90ZTpcbiAgICAvLyAgIEluIEFNRCBlbnYgdGhlIGdsb2JhbCBzY29wZSBzaG91bGQgYmUga2VwdCBjbGVhbiwgYnV0IGpRdWVyeSBpcyBhbiBleGNlcHRpb24uXG4gICAgLy8gICBqUXVlcnkgYWx3YXlzIGV4cG9ydHMgdG8gZ2xvYmFsIHNjb3BlLCB1bmxlc3MgalF1ZXJ5Lm5vQ29uZmxpY3QodHJ1ZSkgaXMgdXNlZCxcbiAgICAvLyAgIGFuZCB3ZSBzaG91bGQgY2F0Y2ggdGhhdC5cbiAgICB2YXIgJCA9IHdpbmRvdyAmJiAod2luZG93LmpRdWVyeSB8fCB3aW5kb3cuWmVwdG8pO1xuICAgIGlmICh0eXBlb2YgJCAhPT0gVU5ERUZfVFlQRSkge1xuICAgICAgICB2YXIgcGFyc2VyID0gbmV3IFVBUGFyc2VyKCk7XG4gICAgICAgICQudWEgPSBwYXJzZXIuZ2V0UmVzdWx0KCk7XG4gICAgICAgICQudWEuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlci5nZXRVQSgpO1xuICAgICAgICB9O1xuICAgICAgICAkLnVhLnNldCA9IGZ1bmN0aW9uICh1YXN0cmluZykge1xuICAgICAgICAgICAgcGFyc2VyLnNldFVBKHVhc3RyaW5nKTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBwYXJzZXIuZ2V0UmVzdWx0KCk7XG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICQudWFbcHJvcF0gPSByZXN1bHRbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG59KSh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyA/IHdpbmRvdyA6IHRoaXMpO1xuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZGVwcmVjYXRlO1xuXG4vKipcbiAqIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4gKiBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2Uubm9EZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudGhyb3dEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCB0aHJvdyBhbiBFcnJvciB3aGVuIGludm9rZWQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50cmFjZURlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIGludm9rZSBgY29uc29sZS50cmFjZSgpYCBpbnN0ZWFkIG9mIGBjb25zb2xlLmVycm9yKClgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gdGhlIGZ1bmN0aW9uIHRvIGRlcHJlY2F0ZVxuICogQHBhcmFtIHtTdHJpbmd9IG1zZyAtIHRoZSBzdHJpbmcgdG8gcHJpbnQgdG8gdGhlIGNvbnNvbGUgd2hlbiBgZm5gIGlzIGludm9rZWRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYSBuZXcgXCJkZXByZWNhdGVkXCIgdmVyc2lvbiBvZiBgZm5gXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZSAoZm4sIG1zZykge1xuICBpZiAoY29uZmlnKCdub0RlcHJlY2F0aW9uJykpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChjb25maWcoJ3Rocm93RGVwcmVjYXRpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAoY29uZmlnKCd0cmFjZURlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBgbG9jYWxTdG9yYWdlYCBmb3IgYm9vbGVhbiB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBgbmFtZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29uZmlnIChuYW1lKSB7XG4gIC8vIGFjY2Vzc2luZyBnbG9iYWwubG9jYWxTdG9yYWdlIGNhbiB0cmlnZ2VyIGEgRE9NRXhjZXB0aW9uIGluIHNhbmRib3hlZCBpZnJhbWVzXG4gIHRyeSB7XG4gICAgaWYgKCFnbG9iYWwubG9jYWxTdG9yYWdlKSByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHZhbCA9IGdsb2JhbC5sb2NhbFN0b3JhZ2VbbmFtZV07XG4gIGlmIChudWxsID09IHZhbCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcbmV4cG9ydHMuZm9ybWF0ID0gZnVuY3Rpb24oZikge1xuICBpZiAoIWlzU3RyaW5nKGYpKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgb2JqZWN0cy5wdXNoKGluc3BlY3QoYXJndW1lbnRzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHZhciBpID0gMTtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24oeCkge1xuICAgIGlmICh4ID09PSAnJSUnKSByZXR1cm4gJyUnO1xuICAgIGlmIChpID49IGxlbikgcmV0dXJuIHg7XG4gICAgc3dpdGNoICh4KSB7XG4gICAgICBjYXNlICclcyc6IHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVkJzogcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWonOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pO1xuICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICB9KTtcbiAgZm9yICh2YXIgeCA9IGFyZ3NbaV07IGkgPCBsZW47IHggPSBhcmdzWysraV0pIHtcbiAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkge1xuICAgICAgc3RyICs9ICcgJyArIHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnICcgKyBpbnNwZWN0KHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vLyBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuLy8gUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbi8vIElmIC0tbm8tZGVwcmVjYXRpb24gaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG5leHBvcnRzLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKGZuLCBtc2cpIHtcbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKGlzVW5kZWZpbmVkKGdsb2JhbC5wcm9jZXNzKSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn07XG5cblxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52aXJvbjtcbmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpXG4gICAgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAobmV3IFJlZ0V4cCgnXFxcXGInICsgc2V0ICsgJ1xcXFxiJywgJ2knKS50ZXN0KGRlYnVnRW52aXJvbikpIHtcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZnVuY3Rpb24gaXNBcnJheShhcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiZcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IHJlcXVpcmUoJy4vc3VwcG9ydC9pc0J1ZmZlcicpO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cblxudmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLFxuICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblxuLy8gMjYgRmViIDE2OjE5OjM0XG5mdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcbiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcbn1cblxuXG4vLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKlxuICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXG4gKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZVxuICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG4gKiAgICAgcHJvdG90eXBlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uXG4gKi9cbmV4cG9ydHMuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufTtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gRlVOQ1RJT05TIC8vXG5cbnZhciBpc1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cblxuLy8gSVMgRkxPQVQzMkFSUkFZIC8vXG5cbi8qKlxuKiBGVU5DVElPTjogaXNGbG9hdDMyQXJyYXkoIHZhbHVlIClcbipcdFZhbGlkYXRlcyBpZiBhIHZhbHVlIGlzIGEgRmxvYXQzMkFycmF5LlxuKlxuKiBAcGFyYW0geyp9IHZhbHVlIC0gdmFsdWUgdG8gdmFsaWRhdGVcbiogQHJldHVybnMge0Jvb2xlYW59IGJvb2xlYW4gaW5kaWNhdGluZyBpZiBhIHZhbHVlIGlzIGEgRmxvYXQzMkFycmF5XG4qL1xuZnVuY3Rpb24gaXNGbG9hdDMyQXJyYXkoIHZhbHVlICkge1xuXHRyZXR1cm4gaXNTdHIuY2FsbCggdmFsdWUgKSA9PT0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XSc7XG59IC8vIGVuZCBGVU5DVElPTiBpc0Zsb2F0MzJBcnJheSgpXG5cblxuLy8gRVhQT1JUUyAvL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRmxvYXQzMkFycmF5O1xuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBkdXBsZXhpZnkgPSByZXF1aXJlKCdkdXBsZXhpZnknKVxudmFyIFdTID0gcmVxdWlyZSgnd3MnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbm1vZHVsZS5leHBvcnRzID0gV2ViU29ja2V0U3RyZWFtXG5cbmZ1bmN0aW9uIGJ1aWxkUHJveHkgKG9wdGlvbnMsIHNvY2tldFdyaXRlLCBzb2NrZXRFbmQpIHtcbiAgdmFyIHByb3h5ID0gbmV3IFRyYW5zZm9ybSh7XG4gICAgb2JqZWN0TW9kZTogb3B0aW9ucy5vYmplY3RNb2RlXG4gIH0pXG5cbiAgcHJveHkuX3dyaXRlID0gc29ja2V0V3JpdGVcbiAgcHJveHkuX2ZsdXNoID0gc29ja2V0RW5kXG5cbiAgcmV0dXJuIHByb3h5XG59XG5cbmZ1bmN0aW9uIFdlYlNvY2tldFN0cmVhbSh0YXJnZXQsIHByb3RvY29scywgb3B0aW9ucykge1xuICB2YXIgc3RyZWFtLCBzb2NrZXRcblxuICB2YXIgaXNCcm93c2VyID0gcHJvY2Vzcy50aXRsZSA9PT0gJ2Jyb3dzZXInXG4gIHZhciBpc05hdGl2ZSA9ICEhZ2xvYmFsLldlYlNvY2tldFxuICB2YXIgc29ja2V0V3JpdGUgPSBpc0Jyb3dzZXIgPyBzb2NrZXRXcml0ZUJyb3dzZXIgOiBzb2NrZXRXcml0ZU5vZGVcblxuICBpZiAocHJvdG9jb2xzICYmICFBcnJheS5pc0FycmF5KHByb3RvY29scykgJiYgJ29iamVjdCcgPT09IHR5cGVvZiBwcm90b2NvbHMpIHtcbiAgICAvLyBhY2NlcHQgdGhlIFwib3B0aW9uc1wiIE9iamVjdCBhcyB0aGUgMm5kIGFyZ3VtZW50XG4gICAgb3B0aW9ucyA9IHByb3RvY29sc1xuICAgIHByb3RvY29scyA9IG51bGxcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5wcm90b2NvbCA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShvcHRpb25zLnByb3RvY29sKSkge1xuICAgICAgcHJvdG9jb2xzID0gb3B0aW9ucy5wcm90b2NvbDtcbiAgICB9XG4gIH1cblxuICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fVxuXG4gIGlmIChvcHRpb25zLm9iamVjdE1vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgIG9wdGlvbnMub2JqZWN0TW9kZSA9ICEob3B0aW9ucy5iaW5hcnkgPT09IHRydWUgfHwgb3B0aW9ucy5iaW5hcnkgPT09IHVuZGVmaW5lZClcbiAgfVxuXG4gIHZhciBwcm94eSA9IGJ1aWxkUHJveHkob3B0aW9ucywgc29ja2V0V3JpdGUsIHNvY2tldEVuZClcblxuICBpZiAoIW9wdGlvbnMub2JqZWN0TW9kZSkge1xuICAgIHByb3h5Ll93cml0ZXYgPSB3cml0ZXZcbiAgfVxuXG4gIC8vIGJyb3dzZXIgb25seTogc2V0cyB0aGUgbWF4aW11bSBzb2NrZXQgYnVmZmVyIHNpemUgYmVmb3JlIHRocm90dGxpbmdcbiAgdmFyIGJ1ZmZlclNpemUgPSBvcHRpb25zLmJyb3dzZXJCdWZmZXJTaXplIHx8IDEwMjQgKiA1MTJcblxuICAvLyBicm93c2VyIG9ubHk6IGhvdyBsb25nIHRvIHdhaXQgd2hlbiB0aHJvdHRsaW5nXG4gIHZhciBidWZmZXJUaW1lb3V0ID0gb3B0aW9ucy5icm93c2VyQnVmZmVyVGltZW91dCB8fCAxMDAwXG5cbiAgLy8gdXNlIGV4aXN0aW5nIFdlYlNvY2tldCBvYmplY3QgdGhhdCB3YXMgcGFzc2VkIGluXG4gIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnb2JqZWN0Jykge1xuICAgIHNvY2tldCA9IHRhcmdldFxuICAvLyBvdGhlcndpc2UgbWFrZSBhIG5ldyBvbmVcbiAgfSBlbHNlIHtcbiAgICAvLyBzcGVjaWFsIGNvbnN0cnVjdG9yIHRyZWF0bWVudCBmb3IgbmF0aXZlIHdlYnNvY2tldHMgaW4gYnJvd3NlcnMsIHNlZVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXhvZ2Rlbi93ZWJzb2NrZXQtc3RyZWFtL2lzc3Vlcy84MlxuICAgIGlmIChpc05hdGl2ZSAmJiBpc0Jyb3dzZXIpIHtcbiAgICAgIHNvY2tldCA9IG5ldyBXUyh0YXJnZXQsIHByb3RvY29scylcbiAgICB9IGVsc2Uge1xuICAgICAgc29ja2V0ID0gbmV3IFdTKHRhcmdldCwgcHJvdG9jb2xzLCBvcHRpb25zKVxuICAgIH1cblxuICAgIHNvY2tldC5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJ1xuICB9XG5cbiAgLy8gd2FzIGFscmVhZHkgb3BlbiB3aGVuIHBhc3NlZCBpblxuICBpZiAoc29ja2V0LnJlYWR5U3RhdGUgPT09IHNvY2tldC5PUEVOKSB7XG4gICAgc3RyZWFtID0gcHJveHlcbiAgfSBlbHNlIHtcbiAgICBzdHJlYW0gPSBkdXBsZXhpZnkub2JqKClcbiAgICBzb2NrZXQub25vcGVuID0gb25vcGVuXG4gIH1cblxuICBzdHJlYW0uc29ja2V0ID0gc29ja2V0XG5cbiAgc29ja2V0Lm9uY2xvc2UgPSBvbmNsb3NlXG4gIHNvY2tldC5vbmVycm9yID0gb25lcnJvclxuICBzb2NrZXQub25tZXNzYWdlID0gb25tZXNzYWdlXG5cbiAgcHJveHkub24oJ2Nsb3NlJywgZGVzdHJveSlcblxuICB2YXIgY29lcmNlVG9CdWZmZXIgPSAhb3B0aW9ucy5vYmplY3RNb2RlXG5cbiAgZnVuY3Rpb24gc29ja2V0V3JpdGVOb2RlKGNodW5rLCBlbmMsIG5leHQpIHtcbiAgICAvLyBhdm9pZCBlcnJvcnMsIHRoaXMgbmV2ZXIgaGFwcGVucyB1bmxlc3NcbiAgICAvLyBkZXN0cm95KCkgaXMgY2FsbGVkXG4gICAgaWYgKHNvY2tldC5yZWFkeVN0YXRlICE9PSBzb2NrZXQuT1BFTikge1xuICAgICAgbmV4dCgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoY29lcmNlVG9CdWZmZXIgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgJ3V0ZjgnKVxuICAgIH1cbiAgICBzb2NrZXQuc2VuZChjaHVuaywgbmV4dClcbiAgfVxuXG4gIGZ1bmN0aW9uIHNvY2tldFdyaXRlQnJvd3NlcihjaHVuaywgZW5jLCBuZXh0KSB7XG4gICAgaWYgKHNvY2tldC5idWZmZXJlZEFtb3VudCA+IGJ1ZmZlclNpemUpIHtcbiAgICAgIHNldFRpbWVvdXQoc29ja2V0V3JpdGVCcm93c2VyLCBidWZmZXJUaW1lb3V0LCBjaHVuaywgZW5jLCBuZXh0KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGNvZXJjZVRvQnVmZmVyICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssICd1dGY4JylcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgc29ja2V0LnNlbmQoY2h1bmspXG4gICAgfSBjYXRjaChlcnIpIHtcbiAgICAgIHJldHVybiBuZXh0KGVycilcbiAgICB9XG5cbiAgICBuZXh0KClcbiAgfVxuXG4gIGZ1bmN0aW9uIHNvY2tldEVuZChkb25lKSB7XG4gICAgc29ja2V0LmNsb3NlKClcbiAgICBkb25lKClcbiAgfVxuXG4gIGZ1bmN0aW9uIG9ub3BlbigpIHtcbiAgICBzdHJlYW0uc2V0UmVhZGFibGUocHJveHkpXG4gICAgc3RyZWFtLnNldFdyaXRhYmxlKHByb3h5KVxuICAgIHN0cmVhbS5lbWl0KCdjb25uZWN0JylcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgc3RyZWFtLmVuZCgpXG4gICAgc3RyZWFtLmRlc3Ryb3koKVxuICB9XG5cbiAgZnVuY3Rpb24gb25lcnJvcihlcnIpIHtcbiAgICBzdHJlYW0uZGVzdHJveShlcnIpXG4gIH1cblxuICBmdW5jdGlvbiBvbm1lc3NhZ2UoZXZlbnQpIHtcbiAgICB2YXIgZGF0YSA9IGV2ZW50LmRhdGFcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSlcbiAgICBlbHNlIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCAndXRmOCcpXG4gICAgcHJveHkucHVzaChkYXRhKVxuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBzb2NrZXQuY2xvc2UoKVxuICB9XG5cbiAgLy8gdGhpcyBpcyB0byBiZSBlbmFibGVkIG9ubHkgaWYgb2JqZWN0TW9kZSBpcyBmYWxzZVxuICBmdW5jdGlvbiB3cml0ZXYgKGNodW5rcywgY2IpIHtcbiAgICB2YXIgYnVmZmVycyA9IG5ldyBBcnJheShjaHVua3MubGVuZ3RoKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2h1bmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rc1tpXS5jaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYnVmZmVyc1tpXSA9IEJ1ZmZlci5mcm9tKGNodW5rc1tpXSwgJ3V0ZjgnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnVmZmVyc1tpXSA9IGNodW5rc1tpXS5jaHVua1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3dyaXRlKEJ1ZmZlci5jb25jYXQoYnVmZmVycyksICdiaW5hcnknLCBjYilcbiAgfVxuXG4gIHJldHVybiBzdHJlYW1cbn1cbiIsIlxudmFyIHdzID0gbnVsbFxuXG5pZiAodHlwZW9mIFdlYlNvY2tldCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd3MgPSBXZWJTb2NrZXRcbn0gZWxzZSBpZiAodHlwZW9mIE1veldlYlNvY2tldCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd3MgPSBNb3pXZWJTb2NrZXRcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd3MgPSB3aW5kb3cuV2ViU29ja2V0IHx8IHdpbmRvdy5Nb3pXZWJTb2NrZXRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3c1xuIiwiLy8gUmV0dXJucyBhIHdyYXBwZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgd3JhcHBlZCBjYWxsYmFja1xuLy8gVGhlIHdyYXBwZXIgZnVuY3Rpb24gc2hvdWxkIGRvIHNvbWUgc3R1ZmYsIGFuZCByZXR1cm4gYVxuLy8gcHJlc3VtYWJseSBkaWZmZXJlbnQgY2FsbGJhY2sgZnVuY3Rpb24uXG4vLyBUaGlzIG1ha2VzIHN1cmUgdGhhdCBvd24gcHJvcGVydGllcyBhcmUgcmV0YWluZWQsIHNvIHRoYXRcbi8vIGRlY29yYXRpb25zIGFuZCBzdWNoIGFyZSBub3QgbG9zdCBhbG9uZyB0aGUgd2F5LlxubW9kdWxlLmV4cG9ydHMgPSB3cmFwcHlcbmZ1bmN0aW9uIHdyYXBweSAoZm4sIGNiKSB7XG4gIGlmIChmbiAmJiBjYikgcmV0dXJuIHdyYXBweShmbikoY2IpXG5cbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCduZWVkIHdyYXBwZXIgZnVuY3Rpb24nKVxuXG4gIE9iamVjdC5rZXlzKGZuKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgd3JhcHBlcltrXSA9IGZuW2tdXG4gIH0pXG5cbiAgcmV0dXJuIHdyYXBwZXJcblxuICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldXG4gICAgfVxuICAgIHZhciByZXQgPSBmbi5hcHBseSh0aGlzLCBhcmdzKVxuICAgIHZhciBjYiA9IGFyZ3NbYXJncy5sZW5ndGgtMV1cbiAgICBpZiAodHlwZW9mIHJldCA9PT0gJ2Z1bmN0aW9uJyAmJiByZXQgIT09IGNiKSB7XG4gICAgICBPYmplY3Qua2V5cyhjYikuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICByZXRba10gPSBjYltrXVxuICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIHJldFxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwibmFtZVwiOiBcInZpZGVvbWFpbC1jbGllbnRcIixcbiAgXCJ2ZXJzaW9uXCI6IFwiMi40LjExXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJBIHdpY2tlZCBucG0gcGFja2FnZSB0byByZWNvcmQgdmlkZW9zIGRpcmVjdGx5IGluIHRoZSBicm93c2VyLCB3b2hvb28hXCIsXG4gIFwiYXV0aG9yXCI6IFwiTWljaGFlbCBIZXViZXJnZXIgPG1pY2hhZWwuaGV1YmVyZ2VyQGJpbmFyeWtpdGNoZW4uY29tPlwiLFxuICBcImNvbnRyaWJ1dG9yc1wiOiBbXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiTWljaGFlbCBIZXViZXJnZXJcIixcbiAgICAgIFwiZW1haWxcIjogXCJtaWNoYWVsLmhldWJlcmdlckBiaW5hcnlraXRjaGVuLmNvbVwiXG4gICAgfVxuICBdLFxuICBcImhvbWVwYWdlXCI6IFwiaHR0cHM6Ly92aWRlb21haWwuaW9cIixcbiAgXCJyZXBvc2l0b3J5XCI6IHtcbiAgICBcInR5cGVcIjogXCJnaXRcIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC1jbGllbnQuZ2l0XCJcbiAgfSxcbiAgXCJsaWNlbnNlXCI6IFwiQ0MwLTEuMFwiLFxuICBcInJlYWRtZUZpbGVuYW1lXCI6IFwiUkVBRE1FLm1kXCIsXG4gIFwibW9kdWxlXCI6IFwic3JjL2luZGV4LmpzXCIsXG4gIFwibWFpblwiOiBcImRpc3QvdmlkZW9tYWlsLWNsaWVudC5qc1wiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwidGVzdFwiOiBcImd1bHAgdGVzdFwiLFxuICAgIFwic3RhcnRcIjogXCJOT0RFX05PX0hUVFAyPTEgZ3VscCBleGFtcGxlc1wiLFxuICAgIFwicGF0Y2hcIjogXCIuL2Vudi9kZXYvcmVsZWFzZS5zaCAtLWltcG9ydGFuY2U9cGF0Y2hcIixcbiAgICBcIm1pbm9yXCI6IFwiLi9lbnYvZGV2L3JlbGVhc2Uuc2ggLS1pbXBvcnRhbmNlPW1pbm9yXCIsXG4gICAgXCJtYWpvclwiOiBcIi4vZW52L2Rldi9yZWxlYXNlLnNoIC0taW1wb3J0YW5jZT1tYWpvclwiXG4gIH0sXG4gIFwiZW5naW5lc1wiOiB7XG4gICAgXCJub2RlXCI6IFwiPj04LjEyLjBcIixcbiAgICBcInlhcm5cIjogXCI+PTEuMy4wXCIsXG4gICAgXCJucG1cIjogXCI+PTUuNC4wXCJcbiAgfSxcbiAgXCJrZXl3b3Jkc1wiOiBbXG4gICAgXCJ3ZWJjYW1cIixcbiAgICBcInZpZGVvXCIsXG4gICAgXCJ2aWRlb21haWxcIixcbiAgICBcImVuY29kZXJcIixcbiAgICBcImdldHVzZXJtZWRpYVwiLFxuICAgIFwiYXVkaW9cIixcbiAgICBcInJlY29yZGVyXCJcbiAgXSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYWRkLWV2ZW50bGlzdGVuZXItd2l0aC1vcHRpb25zXCI6IFwiMS4yNS4wXCIsXG4gICAgXCJhbmltaXR0ZXJcIjogXCIzLjAuMFwiLFxuICAgIFwiYXVkaW8tc2FtcGxlXCI6IFwiMS4wLjVcIixcbiAgICBcImNhbnZhcy10by1idWZmZXJcIjogXCIxLjAuMTNcIixcbiAgICBcImNsYXNzbGlzdC5qc1wiOiBcIjEuMS4yMDE1MDMxMlwiLFxuICAgIFwiY29udGFpbnNcIjogXCIwLjEuMVwiLFxuICAgIFwiY3JlYXRlLWVycm9yXCI6IFwiMC4zLjFcIixcbiAgICBcImRlZXBtZXJnZVwiOiBcIjIuMi4xXCIsXG4gICAgXCJkZWZpbmVkXCI6IFwiMS4wLjBcIixcbiAgICBcImRlc3BvdFwiOiBcIjEuMS4zXCIsXG4gICAgXCJkb2N1bWVudC12aXNpYmlsaXR5XCI6IFwiMS4wLjFcIixcbiAgICBcImVsZW1lbnQtY2xvc2VzdFwiOiBcIjIuMC4yXCIsXG4gICAgXCJmaWxlc2l6ZVwiOiBcIjMuNi4xXCIsXG4gICAgXCJnZXQtZm9ybS1kYXRhXCI6IFwiMi4wLjBcIixcbiAgICBcImhpZGRlblwiOiBcIjEuMS4xXCIsXG4gICAgXCJodW1hbml6ZS1kdXJhdGlvblwiOiBcIjMuMTUuM1wiLFxuICAgIFwiaHlwZXJzY3JpcHRcIjogXCIyLjAuMlwiLFxuICAgIFwiaW5zZXJ0LWNzc1wiOiBcIjIuMC4wXCIsXG4gICAgXCJpcGhvbmUtaW5saW5lLXZpZGVvXCI6IFwiMi4yLjJcIixcbiAgICBcImlzLXBvd2VyLW9mLXR3b1wiOiBcIjEuMC4wXCIsXG4gICAgXCJrZXltaXJyb3JcIjogXCIwLjEuMVwiLFxuICAgIFwibnVtYmVyLWlzLWludGVnZXJcIjogXCIxLjAuMVwiLFxuICAgIFwicmVhZHlzdGF0ZVwiOiBcIjAuMy4wXCIsXG4gICAgXCJyZXF1ZXN0LWZyYW1lXCI6IFwiMS41LjNcIixcbiAgICBcInNhZmUtanNvbi1zdHJpbmdpZnlcIjogXCIxLjIuMFwiLFxuICAgIFwic3VwZXJhZ2VudFwiOiBcIjMuOC4zXCIsXG4gICAgXCJ1YS1wYXJzZXItanNcIjogXCIwLjcuMThcIixcbiAgICBcIndlYnNvY2tldC1zdHJlYW1cIjogXCI1LjEuMlwiXG4gIH0sXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkBiYWJlbC9jb3JlXCI6IFwiNy4xLjJcIixcbiAgICBcIkBiYWJlbC9wb2x5ZmlsbFwiOiBcIjcuMC4wXCIsXG4gICAgXCJAYmFiZWwvcHJlc2V0LWVudlwiOiBcIjcuMS4wXCIsXG4gICAgXCJiYWJlbGlmeVwiOiBcIjEwLjAuMFwiLFxuICAgIFwiYm9keS1wYXJzZXJcIjogXCIxLjE4LjNcIixcbiAgICBcImJyb3dzZXJpZnlcIjogXCIxNi4yLjNcIixcbiAgICBcImNvbm5lY3Qtc2VuZC1qc29uXCI6IFwiMS4wLjBcIixcbiAgICBcImRlbFwiOiBcIjMuMC4wXCIsXG4gICAgXCJmYW5jeS1sb2dcIjogXCIxLjMuMlwiLFxuICAgIFwiZ2xvYlwiOiBcIjcuMS4zXCIsXG4gICAgXCJndWxwXCI6IFwiMy45LjFcIixcbiAgICBcImd1bHAtYXV0b3ByZWZpeGVyXCI6IFwiNi4wLjBcIixcbiAgICBcImd1bHAtYnVtcFwiOiBcIjMuMS4xXCIsXG4gICAgXCJndWxwLWJ5dGVkaWZmXCI6IFwiMS4wLjBcIixcbiAgICBcImd1bHAtY29uY2F0XCI6IFwiMi42LjFcIixcbiAgICBcImd1bHAtY29ubmVjdFwiOiBcIjUuNi4xXCIsXG4gICAgXCJndWxwLWNzc25hbm9cIjogXCIyLjEuM1wiLFxuICAgIFwiZ3VscC1kZXJlcXVpcmVcIjogXCIyLjEuMFwiLFxuICAgIFwiZ3VscC1pZlwiOiBcIjIuMC4yXCIsXG4gICAgXCJndWxwLWluamVjdC1zdHJpbmdcIjogXCIxLjEuMVwiLFxuICAgIFwiZ3VscC1sb2FkLXBsdWdpbnNcIjogXCIxLjUuMFwiLFxuICAgIFwiZ3VscC1wbHVtYmVyXCI6IFwiMS4yLjBcIixcbiAgICBcImd1bHAtcmVuYW1lXCI6IFwiMS40LjBcIixcbiAgICBcImd1bHAtc291cmNlbWFwc1wiOiBcIjIuNi40XCIsXG4gICAgXCJndWxwLXN0YW5kYXJkXCI6IFwiMTIuMC4wXCIsXG4gICAgXCJndWxwLXN0eWx1c1wiOiBcIjIuNy4wXCIsXG4gICAgXCJndWxwLXRvZG9cIjogXCI3LjAuMFwiLFxuICAgIFwiZ3VscC11Z2xpZnlcIjogXCIzLjAuMVwiLFxuICAgIFwibWluaW1pc3RcIjogXCIxLjIuMFwiLFxuICAgIFwibmliXCI6IFwiMS4xLjJcIixcbiAgICBcInJvdXRlclwiOiBcIjEuMy4zXCIsXG4gICAgXCJzc2wtcm9vdC1jYXNcIjogXCIxLjIuNVwiLFxuICAgIFwic3RhbmRhcmRcIjogXCIxMi4wLjFcIixcbiAgICBcInRhcC1zdW1tYXJ5XCI6IFwiNC4wLjBcIixcbiAgICBcInRhcGVcIjogXCI0LjkuMVwiLFxuICAgIFwidGFwZS1jYXRjaFwiOiBcIjEuMC42XCIsXG4gICAgXCJ0YXBlLXJ1blwiOiBcIjQuMC4wXCIsXG4gICAgXCJ2aW55bC1idWZmZXJcIjogXCIxLjAuMVwiLFxuICAgIFwidmlueWwtc291cmNlLXN0cmVhbVwiOiBcIjIuMC4wXCIsXG4gICAgXCJ3YXRjaGlmeVwiOiBcIjMuMTEuMFwiXG4gIH1cbn1cbiIsImltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnZGVlcG1lcmdlJ1xuaW1wb3J0IHJlYWR5c3RhdGUgZnJvbSAncmVhZHlzdGF0ZSdcbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnXG5cbmltcG9ydCBkZWZhdWx0T3B0aW9ucyBmcm9tICcuL29wdGlvbnMnXG5pbXBvcnQgQ29uc3RhbnRzIGZyb20gJy4vY29uc3RhbnRzJ1xuaW1wb3J0IEV2ZW50cyBmcm9tICcuL2V2ZW50cydcbmltcG9ydCBDb2xsZWN0TG9nZ2VyIGZyb20gJy4vdXRpbC9jb2xsZWN0TG9nZ2VyJ1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuL3V0aWwvZXZlbnRFbWl0dGVyJ1xuaW1wb3J0IENvbnRhaW5lciBmcm9tICcuL3dyYXBwZXJzL2NvbnRhaW5lcidcbmltcG9ydCBSZXBsYXkgZnJvbSAnLi93cmFwcGVycy92aXN1YWxzL3JlcGxheSdcbmltcG9ydCBPcHRpb25zV3JhcHBlciBmcm9tICcuL3dyYXBwZXJzL29wdGlvbnNXcmFwcGVyJ1xuaW1wb3J0IEJyb3dzZXIgZnJvbSAnLi91dGlsL2Jyb3dzZXInXG5pbXBvcnQgUmVzb3VyY2UgZnJvbSAnLi9yZXNvdXJjZSdcblxudmFyIGNvbGxlY3RMb2dnZXJcbnZhciBicm93c2VyXG5cbmZ1bmN0aW9uIGFkanVzdE9wdGlvbnMgKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBsb2NhbE9wdGlvbnMgPSBkZWVwbWVyZ2UoZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMsIHtcbiAgICBhcnJheU1lcmdlOiBmdW5jdGlvbiAoZGVzdGluYXRpb24sIHNvdXJjZSkgeyByZXR1cm4gc291cmNlIH1cbiAgfSlcblxuICBjb2xsZWN0TG9nZ2VyID0gY29sbGVjdExvZ2dlciB8fCBuZXcgQ29sbGVjdExvZ2dlcihsb2NhbE9wdGlvbnMpXG5cbiAgbG9jYWxPcHRpb25zLmxvZ2dlciA9IGNvbGxlY3RMb2dnZXJcbiAgbG9jYWxPcHRpb25zLmRlYnVnID0gbG9jYWxPcHRpb25zLmxvZ2dlci5kZWJ1Z1xuXG4gIE9wdGlvbnNXcmFwcGVyLmFkZEZ1bmN0aW9ucyhsb2NhbE9wdGlvbnMpXG5cbiAgcmV0dXJuIGxvY2FsT3B0aW9uc1xufVxuXG5mdW5jdGlvbiBnZXRCcm93c2VyIChsb2NhbE9wdGlvbnMpIHtcbiAgaWYgKCFicm93c2VyKSB7XG4gICAgYnJvd3NlciA9IG5ldyBCcm93c2VyKGxvY2FsT3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBicm93c2VyXG59XG5cbmNvbnN0IFZpZGVvbWFpbENsaWVudCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIGNvbnN0IGxvY2FsT3B0aW9ucyA9IGFkanVzdE9wdGlvbnMob3B0aW9ucylcbiAgY29uc3QgY29udGFpbmVyID0gbmV3IENvbnRhaW5lcihsb2NhbE9wdGlvbnMpXG4gIGNvbnN0IGRlYnVnID0gbG9jYWxPcHRpb25zLmRlYnVnXG5cbiAgdmFyIHJlcGxheVxuXG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMsIGxvY2FsT3B0aW9ucywgJ1ZpZGVvbWFpbENsaWVudCcpXG5cbiAgLy8gZXhwb3NlIGFsbCBwb3NzaWJsZSBldmVudHNcbiAgdGhpcy5ldmVudHMgPSBFdmVudHNcblxuICBmdW5jdGlvbiBidWlsZCAoKSB7XG4gICAgdmFyIGJ1aWxkaW5nID0gZmFsc2VcblxuICAgIHJlYWR5c3RhdGUuaW50ZXJhY3RpdmUoZnVuY3Rpb24gKHByZXZpb3VzU3RhdGUpIHtcbiAgICAgIGRlYnVnKFxuICAgICAgICAnQ2xpZW50OiBpbnRlcmFjdGl2ZSgpLCcsXG4gICAgICAgICdwcmV2aW91c1N0YXRlID0nLCBwcmV2aW91c1N0YXRlICsgJywnLFxuICAgICAgICAnIWJ1aWxkaW5nID0nLCAhYnVpbGRpbmcgKyAnLCcsXG4gICAgICAgICchaXNCdWlsdCgpID0nLCAhY29udGFpbmVyLmlzQnVpbHQoKVxuICAgICAgKVxuXG4gICAgICAvLyBpdCBjYW4gaGFwcGVuIHRoYXQgaXQgZ2V0cyBjYWxsZWQgdHdpY2UsIGkuRS4gd2hlbiBhbiBlcnJvciBpcyB0aHJvd25cbiAgICAgIC8vIGluIHRoZSBtaWRkbGUgb2YgdGhlIGJ1aWxkKCkgZm5cbiAgICAgIGlmICghYnVpbGRpbmcgJiYgIWNvbnRhaW5lci5pc0J1aWx0KCkpIHtcbiAgICAgICAgYnVpbGRpbmcgPSB0cnVlXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29udGFpbmVyLmJ1aWxkKClcbiAgICAgICAgfSBjYXRjaCAoZXhjKSB7XG4gICAgICAgICAgdGhyb3cgZXhjXG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgYnVpbGRpbmcgPSBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHRoaXMuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29udGFpbmVyLmlzQnVpbHQoKSkge1xuICAgICAgY29udGFpbmVyLnNob3coKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9uY2UoRXZlbnRzLkJVSUxULCBjb250YWluZXIuc2hvdylcbiAgICB9XG4gIH1cblxuICAvLyBhdXRvbWF0aWNhbGx5IGFkZHMgYSA8dmlkZW8+IGVsZW1lbnQgaW5zaWRlIHRoZSBnaXZlbiBwYXJlbnRFbGVtZW50IGFuZCBsb2Fkc1xuICAvLyBpdCB3aXRoIHRoZSB2aWRlb21haWxcbiAgdGhpcy5yZXBsYXkgPSBmdW5jdGlvbiAodmlkZW9tYWlsLCBwYXJlbnRFbGVtZW50KSB7XG4gICAgZnVuY3Rpb24gYnVpbGRSZXBsYXkgKCkge1xuICAgICAgaWYgKHR5cGVvZiBwYXJlbnRFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXJlbnRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocGFyZW50RWxlbWVudClcbiAgICAgIH1cblxuICAgICAgaWYgKCFwYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIGlmICghY29udGFpbmVyLmlzQnVpbHQoKSkge1xuICAgICAgICAgIC8vIHRoaXMgd2lsbCB0cnkgYnVpbGQgYWxsIG92ZXIgYWdhaW5cbiAgICAgICAgICBjb250YWluZXIuYnVpbGQoKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb250YWluZXIuaGFzRWxlbWVudCgpKSB7XG4gICAgICAgICAgLy8gaWYgY29udGFpbmVyLnNldEVsZW1lbnQoKSBmYWlsZWQgdG9vLCB0aGVuIGNvbXBsYWluXG4gICAgICAgICAgcmVhZHlzdGF0ZS5yZW1vdmVBbGxMaXN0ZW5lcnMoKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHJlcGxheSB2aWRlbyB3aXRob3V0IGEgY29udGFpbmVyIG5vciBwYXJlbnQgZWxlbWVudC4nKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY29udGFpbmVyLmlzT3V0c2lkZUVsZW1lbnRPZihwYXJlbnRFbGVtZW50KSkge1xuICAgICAgICAgIHJlcGxheSA9IG5ldyBSZXBsYXkocGFyZW50RWxlbWVudCwgbG9jYWxPcHRpb25zKVxuICAgICAgICAgIHJlcGxheS5idWlsZCgpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFyZXBsYXkpIHtcbiAgICAgICAgcmVwbGF5ID0gY29udGFpbmVyLmdldFJlcGxheSgpXG4gICAgICB9XG5cbiAgICAgIGlmICghcGFyZW50RWxlbWVudCkge1xuICAgICAgICBwYXJlbnRFbGVtZW50ID0gcmVwbGF5LmdldFBhcmVudEVsZW1lbnQoKVxuICAgICAgfVxuXG4gICAgICBpZiAodmlkZW9tYWlsKSB7XG4gICAgICAgIHZpZGVvbWFpbCA9IGNvbnRhaW5lci5hZGRQbGF5ZXJEaW1lbnNpb25zKHZpZGVvbWFpbCwgcGFyZW50RWxlbWVudClcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbnRhaW5lci5pc091dHNpZGVFbGVtZW50T2YocGFyZW50RWxlbWVudCkpIHtcbiAgICAgICAgLy8gcmVwbGF5IGVsZW1lbnQgbXVzdCBiZSBvdXRzaWRlIG9mIHRoZSBjb250YWluZXJcbiAgICAgICAgY29udGFpbmVyLmhpZGVGb3JtKHsgZGVlcDogdHJ1ZSB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGFpbmVyLmxvYWRGb3JtKHZpZGVvbWFpbClcbiAgICAgIH1cblxuICAgICAgLy8gc2xpZ2h0IGRlbGF5IG5lZWRlZCB0byBhdm9pZCBIVFRQIDQxNiBlcnJvcnMgKHJlcXVlc3QgcmFuZ2UgdW5hdmFpbGFibGUpXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVwbGF5LnNldFZpZGVvbWFpbCh2aWRlb21haWwpXG4gICAgICAgIGNvbnRhaW5lci5zaG93UmVwbGF5T25seSgpXG4gICAgICB9LCAxMGUyKSAvLyBub3Qgc3VyZSwgYnV0IHByb2JhYmx5IGNhbiBiZSByZWR1Y2VkIGEgYml0XG4gICAgfVxuXG4gICAgcmVhZHlzdGF0ZS5pbnRlcmFjdGl2ZShidWlsZFJlcGxheSlcbiAgfVxuXG4gIHRoaXMuc3RhcnRPdmVyID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIGlmIChyZXBsYXkpIHtcbiAgICAgIHJlcGxheS5oaWRlKClcbiAgICAgIHJlcGxheS5yZXNldCgpXG4gICAgfVxuXG4gICAgY29udGFpbmVyLnN0YXJ0T3ZlcihwYXJhbXMpXG4gIH1cblxuICB0aGlzLnVubG9hZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgcmVhZHlzdGF0ZS5yZW1vdmVBbGxMaXN0ZW5lcnMoKVxuICAgIGNvbnRhaW5lci51bmxvYWQoZSlcbiAgfVxuXG4gIHRoaXMuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb250YWluZXIuaGlkZSgpXG4gIH1cblxuICB0aGlzLmdldCA9IGZ1bmN0aW9uIChrZXksIGNiKSB7XG4gICAgbmV3IFJlc291cmNlKGxvY2FsT3B0aW9ucykuZ2V0KGtleSwgZnVuY3Rpb24gKGVyciwgdmlkZW9tYWlsKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNiKGVycilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNiKG51bGwsIGNvbnRhaW5lci5hZGRQbGF5ZXJEaW1lbnNpb25zKHZpZGVvbWFpbCkpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHRoaXMuY2FuUmVjb3JkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRCcm93c2VyKGxvY2FsT3B0aW9ucykuY2FuUmVjb3JkKClcbiAgfVxuXG4gIC8vIHJldHVybiB0cnVlIHdoZW4gYSB2aWRlbyBoYXMgYmVlbiByZWNvcmRlZCBidXQgaXMgbm90IHNlbnQgeWV0XG4gIHRoaXMuaXNEaXJ0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29udGFpbmVyLmlzRGlydHkoKVxuICB9XG5cbiAgdGhpcy5pc1JlY29yZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29udGFpbmVyLmlzUmVjb3JkaW5nKClcbiAgfVxuXG4gIHRoaXMuc3VibWl0ID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnRhaW5lci5zdWJtaXQoKVxuICB9XG5cbiAgdGhpcy5nZXRMb2dMaW5lcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobG9jYWxPcHRpb25zLmxvZ2dlciAmJiBsb2NhbE9wdGlvbnMubG9nZ2VyLmdldExpbmVzKSB7XG4gICAgICByZXR1cm4gbG9jYWxPcHRpb25zLmxvZ2dlci5nZXRMaW5lcygpXG4gICAgfVxuICB9XG5cbiAgYnVpbGQoKVxufVxuXG51dGlsLmluaGVyaXRzKFZpZGVvbWFpbENsaWVudCwgRXZlbnRFbWl0dGVyKVxuXG5PYmplY3Qua2V5cyhDb25zdGFudHMucHVibGljKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIFZpZGVvbWFpbENsaWVudFtuYW1lXSA9IENvbnN0YW50cy5wdWJsaWNbbmFtZV1cbn0pXG5cbi8vIGp1c3QgYW5vdGhlciBjb252ZW5pZW50IHRoaW5nXG5WaWRlb21haWxDbGllbnQuZXZlbnRzID0gRXZlbnRzXG5cbmV4cG9ydCBkZWZhdWx0IFZpZGVvbWFpbENsaWVudFxuIiwiLy8gY29uc3RhbnRzIChjaGFuZ2luZyB0aGVzZSBvbmx5IGJyZWFrIGRvd24gZnVuY3Rpb25hbGl0eSwgc28gYmUgY2FyZWZ1bClcblxuZXhwb3J0IGRlZmF1bHQge1xuICBTSVRFX05BTUVfTEFCRUw6ICd4LXZpZGVvbWFpbC1zaXRlLW5hbWUnLFxuICBWRVJTSU9OX0xBQkVMOiAndmlkZW9tYWlsQ2xpZW50VmVyc2lvbicsXG5cbiAgcHVibGljOiB7XG4gICAgRU5DX1RZUEVfQVBQX0pTT046ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICBFTkNfVFlQRV9GT1JNOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xuICB9XG59XG4iLCJpbXBvcnQga2V5bWlycm9yIGZyb20gJ2tleW1pcnJvcidcblxuZXhwb3J0IGRlZmF1bHQga2V5bWlycm9yKHtcbiAgQlVJTFQ6IG51bGwsIC8vIGFsbCBkb20gZWxlbWVudHMgYXJlIHJlYWR5LCBhcmUgaW4gdGhlIERPTVxuICBGT1JNX1JFQURZOiBudWxsLCAvLyBmb3JtIGlzIHJlYWR5LCBhdmFpbGFibGUgaW4gdGhlIERPTVxuICBMT0FESU5HX1VTRVJfTUVESUE6IG51bGwsIC8vIGFza2luZyBmb3Igd2ViY2FtIGFjY2Vzc1xuICBVU0VSX01FRElBX1JFQURZOiBudWxsLCAvLyB1c2VyIG1lZGlhICg9IHdlYmNhbSkgaXMgcmVhZHksIGxvYWRlZFxuICBDT05ORUNUSU5HOiBudWxsLCAvLyBzb2NrZXQgaXMgY29ubmVjdGluZyB0byBzZXJ2ZXJcbiAgQ09OTkVDVEVEOiBudWxsLCAvLyBzb2NrZXQgaXMgY29ubmVjdGVkIHRvIHNlcnZlclxuICBESVNDT05ORUNURUQ6IG51bGwsIC8vIHNvY2tldCB0byBzZXJ2ZXIgaXMgZGlzY29ubmVjdGVkXG4gIENPVU5URE9XTjogbnVsbCwgLy8gY291bnRkb3duIGZvciByZWNvcmRpbmcgaGFzIHN0YXJ0ZWRcbiAgUkVDT1JESU5HOiBudWxsLCAvLyB3ZWJjYW0gaXMgcmVjb3JkaW5nXG4gIFNUT1BQSU5HOiBudWxsLCAvLyByZWNvcmRpbmcgaXMgYmVpbmcgc3RvcHBlZCAoPSBwcmV2aWV3KVxuICBQUk9HUkVTUzogbnVsbCwgLy8gc3RhcnQgc2VuZGluZ1xuICBCRUdJTl9BVURJT19FTkNPRElORzogbnVsbCwgLy8gZW5jb2RpbmcgdmlkZW9cbiAgQkVHSU5fVklERU9fRU5DT0RJTkc6IG51bGwsIC8vIGVuY29kaW5nIHZpZGVvXG4gIFJFU0VUVElORzogbnVsbCwgLy8gcmVzZXR0aW5nIGV2ZXJ5dGhpbmcgdG8gZ28gYmFjayB0byBpbml0aWFsIHN0YXRlXG4gIFBBVVNFRDogbnVsbCwgLy8gcmVjb3JkaW5nIGlzIGJlaW5nIHBhdXNlZFxuICBSRVNVTUlORzogbnVsbCwgLy8gcmVjb3JkaW5nIGlzIHJlc3VtZWRcbiAgUFJFVklFVzogbnVsbCwgLy8gdmlkZW8gcHJldmlldyBpcyBzZXRcbiAgUFJFVklFV19TSE9XTjogbnVsbCwgLy8gdmlkZW8gcHJldmlldyBpcyBzaG93blxuICBSRVBMQVlfU0hPV046IG51bGwsIC8vIHN1Ym1pdHRlZCB2aWRlbyBpcyBzaG93blxuICBJTlZBTElEOiBudWxsLCAvLyBmb3JtIGlzIGludmFsaWRcbiAgVkFMSURBVElORzogbnVsbCwgLy8gZm9ybSBpcyBiZWluZyB2YWxpZGF0ZWRcbiAgVkFMSUQ6IG51bGwsIC8vIGZvcm0gaXMgdmFsaWRcbiAgU1VCTUlUVElORzogbnVsbCwgLy8gZm9ybSBpcyBiZWluZyBzdWJtaXR0ZWRcbiAgU1VCTUlUVEVEOiBudWxsLCAvLyBmb3JtIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBzdWJtaXR0ZWRcbiAgRVJST1I6IG51bGwsIC8vIGFuIGVycm9yIG9jY3VyZWRcbiAgQkxPQ0tJTkc6IG51bGwsIC8vIHNvbWV0aGluZyBzZXJpb3VzLCBtb3N0IGxpa2VseSBhbiBlcnJvciwgaXMgc2hvd24gYW5kIGJsb2Nrc1xuICBTRU5ESU5HX0ZJUlNUX0ZSQU1FOiBudWxsLCAvLyBlbWl0dGVkIGJlZm9yZSB0aGUgZmlyc3QgZnJhbWUgaXMgYmVpbmcgY29tcHV0ZWRcbiAgRklSU1RfRlJBTUVfU0VOVDogbnVsbCwgLy8gZW1pdHRlZCBvbmNlIHdoZW4gZmlzdCBmcmFtZSBoYXMgYmVlbiBzZW50IHRvIHNlcnZlclxuICBISURFOiBudWxsLCAvLyBlbWl0dGVkIHdoZW4gaGlkZGVuXG4gIE5PVElGWUlORzogbnVsbCwgLy8gbm90aWZpZXMgdXNlciBhYm91dCBzb21ldGhpbmcgKG5vdCBibG9ja2luZylcbiAgRU5BQkxJTkdfQVVESU86IG51bGwsIC8vIGFib3V0IHRvIGVuYWJsZSBhdWRpb1xuICBESVNBQkxJTkdfQVVESU86IG51bGwsIC8vIGFib3V0IHRvIGRpc2FibGUgYXVkaW9cbiAgTE9BREVEX01FVEFfREFUQTogbnVsbCwgLy8gcmFpc2VkIHdoZW4gd2ViY2FtIGtub3dzIGl0cyBkaW1lbnNpb25zXG4gIEVWRU5UX0VNSVRURUQ6IG51bGwsIC8vIGZvciBkZWJ1Z2dpbmcgb25seSwgaXMgZW1pdHRlZCB3aGVuIGFuIGV2ZW50IGlzIGVtaXR0ZWQgbG9sLFxuICBHT0lOR19CQUNLOiBudWxsLCAvLyBzd2l0Y2ggZnJvbSByZXBsYXlpbmcgYmFjayB0byByZWNvcmRpbmdcbiAgU1RBUlRJTkdfT1ZFUjogbnVsbCwgLy8gc3RhcnRpbmcgYWxsIG92ZXIgYWdhaW4gYmFjayB0byBpdHMgaW5pdGFsIHN0YXRlXG4gIEFTS0lOR19XRUJDQU1fUEVSTUlTU0lPTjogbnVsbCwgLy8gd2hlbiBhYm91dCB0byBhc2sgZm9yIHdlYmNhbSBwZXJtaXNzaW9uc1xuICBWSVNJQkxFOiBudWxsLCAvLyBkb2N1bWVudCBqdXN0IGJlY2FtZSB2aXNpYmxlXG4gIElOVklTSUJMRTogbnVsbCAvLyBkb2N1bWVudCBqdXN0IGJlY2FtZSBJTnZpc2libGVcbn0pXG4iLCJpbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi4vcGFja2FnZS5qc29uJ1xuXG5jb25zdCBQUk9EVUNUSU9OID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJ1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1tdWx0aS1zcGFjZXMgKi9cbi8qIGVzbGludCBpbmRlbnQ6IFtcImVycm9yXCIsIDIsIHsgXCJpZ25vcmVDb21tZW50c1wiOiB0cnVlIH1dICovXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9nZ2VyOiBudWxsLCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWZpbmUgbG9nZ2luZyBpbnN0YW5jZS4gbGVhdmUgbnVsbCBmb3IgZGVmYXVsdCwgY29uc29sZS5cbiAgbG9nU3RhY2tTaXplOiAzMCwgICAgICAgICAgICAgICAgICAgICAvLyBsaW1pdHMgdGhlIHN0YWNrIHNpemUgb2YgbG9nIG91dHB1dHMgdG8gY29sbGVjdFxuICB2ZXJib3NlOiAhUFJPRFVDVElPTiwgICAgICAgICAgICAgICAgIC8vIHNldCB0cnVlIHRvIGxvZyBtb3JlIGluZm9cbiAgYmFzZVVybDogJ2h0dHBzOi8vdmlkZW9tYWlsLmlvJywgICAgICAvLyBsZWF2ZSBhcyBpdCwgcGVybWFuZW50IHVybCB0byBwb3N0IHZpZGVvc1xuICBzb2NrZXRVcmw6ICd3c3M6Ly92aWRlb21haWwuaW8nLCAgICAgIC8vIGxlYXZlIGFzIGl0LCBwZXJtYW5lbnQgdXJsIHRvIHNlbmQgZnJhbWVzXG4gIHNpdGVOYW1lOiAndmlkZW9tYWlsLWNsaWVudC1kZW1vJywgICAgLy8gUmVxdWlyZWQgZm9yIEFQSSwgdXNlIGh0dHBzOi8vdmlkZW9tYWlsLmlvL3doaXRlbGlzdFxuICBjYWNoZTogdHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlZHVjZXMgR0VUIHF1ZXJpZXMgd2hlbiBsb2FkaW5nIHZpZGVvc1xuICBpbnNlcnRDc3M6IHRydWUsICAgICAgICAgICAgICAgICAgICAgIC8vIGluc2VydHMgcHJlZGVmaW5lZCBDU1MsIHNlZSBleGFtcGxlc1xuICBlbmFibGVQYXVzZTogdHJ1ZSwgICAgICAgICAgICAgICAgICAgIC8vIGVuYWJsZSBwYXVzZS9yZXN1bWUgYnV0dG9uXG4gIGVuYWJsZUF1dG9QYXVzZTogdHJ1ZSwgICAgICAgICAgICAgICAgLy8gYXV0b21hdGljYWxseSBwYXVzZXMgd2hlbiB3aW5kb3cgYmVjb21lcyBpbmFjdGl2ZVxuICBlbmFibGVTcGFjZTogdHJ1ZSwgICAgICAgICAgICAgICAgICAgIC8vIGhpdHRpbmcgc3BhY2UgY2FuIHBhdXNlIHJlY29yZGluZ1xuICBkaXNhYmxlU3VibWl0OiBmYWxzZSwgICAgICAgICAgICAgICAgIC8vIHNldCB0aGlzIHRvIHRydWUgaWYgeW91IGRvIG5vdCB3YW50IHRvIHN1Ym1pdCB2aWRlb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGp1c3Qgd2FudCB0byByZWNvcmQgYW5kIHJlcGxheSB0aGVzZSB0ZW1wb3JhcmlseVxuICBlbmFibGVBdXRvVmFsaWRhdGlvbjogdHJ1ZSwgICAgICAgICAgIC8vIGF1dG9tYXRpY2FsbHkgdmFsaWRhdGVzIGFsbCBmb3JtIGlucHV0cyBpZiBhbnkgZXhpc3QgYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9lcyBub3QgL2VuYWJsZSBkaXNhYmxlIHN1Ym1pdCBidXR0b24gYWZ0ZXIgcmVjb3JkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiBzb21ldGhpbmcgZWxzZSBzZWVtcyBpbnZhbGlkLlxuICBlbmFibGVBdXRvU3VibWlzc2lvbjogdHJ1ZSwgICAgICAgICAgIC8vIGF1dG9tYXRpY2FsbHkgc3VibWl0cyB0aGUgZm9ybSB3aGVyZSB0aGUgdmlkZW9tYWlsLWNsaWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFwcGVhcnMgdXBvbiBwcmVzcyBvZiBzdWJtaXQgYnV0dG9uLiBkaXNhYmxlIGl0IHdoZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB5b3Ugd2FudCBhIGZyYW1ld29yayB0byBkZWFsIHdpdGggdGhlIGZvcm0gc3VibWlzc2lvbiBpdHNlbGYuXG5cbiAgZW5jdHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLCAgICAgICAgICAvLyBlbmN0eXBlIGZvciB0aGUgZm9ybSBzdWJtaXNzaW9uLiBjdXJyZW50bHkgaW1wbGVtZW50ZWQgYXJlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICdhcHBsaWNhdGlvbi9qc29uJyBhbmQgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcblxuICAvLyBkZWZhdWx0IENTUyBzZWxlY3RvcnMgeW91IGNhbiBhbHRlciwgc2VlIGV4YW1wbGVzXG4gIHNlbGVjdG9yczoge1xuICAgIGNvbnRhaW5lcklkOiAndmlkZW9tYWlsJyxcbiAgICByZXBsYXlDbGFzczogJ3JlcGxheScsXG4gICAgdXNlck1lZGlhQ2xhc3M6ICd1c2VyTWVkaWEnLFxuICAgIHZpc3VhbHNDbGFzczogJ3Zpc3VhbHMnLFxuICAgIGJ1dHRvbkNsYXNzOiBudWxsLCAgICAgICAgICAgICAgICAgIC8vIGNhbiBhbHNvIGJlIHVzZWQgYXMgYSBkZWZhdWx0IGNsYXNzIGZvciBhbGwgYnV0dG9uc1xuICAgIGJ1dHRvbnNDbGFzczogJ2J1dHRvbnMnLFxuXG4gICAgcmVjb3JkQnV0dG9uQ2xhc3M6ICdyZWNvcmQnLFxuICAgIHBhdXNlQnV0dG9uQ2xhc3M6ICdwYXVzZScsXG4gICAgcmVzdW1lQnV0dG9uQ2xhc3M6ICdyZXN1bWUnLFxuICAgIHByZXZpZXdCdXR0b25DbGFzczogJ3ByZXZpZXcnLFxuICAgIHJlY29yZEFnYWluQnV0dG9uQ2xhc3M6ICdyZWNvcmRBZ2FpbicsXG4gICAgc3VibWl0QnV0dG9uQ2xhc3M6ICdzdWJtaXQnLFxuXG4gICAgc3ViamVjdElucHV0TmFtZTogJ3N1YmplY3QnLCAgICAgICAgIC8vIHRoZSBmb3JtIGlucHV0IG5hbWUgZm9yIHN1YmplY3RcbiAgICBmcm9tSW5wdXROYW1lOiAnZnJvbScsICAgICAgICAgICAgICAgLy8gdGhlIGZvcm0gaW5wdXQgbmFtZSBmb3IgdGhlIGZyb20gZW1haWxcbiAgICB0b0lucHV0TmFtZTogJ3RvJywgICAgICAgICAgICAgICAgICAgLy8gdGhlIGZvcm0gaW5wdXQgbmFtZSBmb3IgdGhlIHRvIGVtYWlsXG4gICAgYm9keUlucHV0TmFtZTogJ2JvZHknLCAgICAgICAgICAgICAgIC8vIHRoZSBmb3JtIGlucHV0IG5hbWUgZm9yIHRoZSBtZXNzYWdlIChib2R5KVxuICAgIHNlbmRDb3B5SW5wdXROYW1lOiAnc2VuZENvcHknLCAgICAgICAvLyB0aGUgZm9ybSBjaGVja2JveCBuYW1lIGZvciBzZW5kaW5nIG15c2VsZiBhIGNvcHlcblxuICAgIGtleUlucHV0TmFtZTogJ3ZpZGVvbWFpbF9rZXknLFxuICAgIHBhcmVudEtleUlucHV0TmFtZTogJ3ZpZGVvbWFpbF9wYXJlbnRfa2V5JyxcbiAgICBhbGlhc0lucHV0TmFtZTogJ3ZpZGVvbWFpbF9hbGlhcycsXG5cbiAgICBmb3JtSWQ6IG51bGwsICAgICAgICAgICAgICAgICAgICAgLy8gYXV0b21hdGljYWxseSBkZXRlY3RzIGZvcm0gaWYgYW55XG4gICAgc3VibWl0QnV0dG9uSWQ6IG51bGwsICAgICAgICAgICAgIC8vIHNlbWktYXV0b21hdGljYWxseSBkZXRlY3RzIHN1Ym1pdCBidXR0b24gaW4gdGhlIGZvcm1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGlmIHRoYXQgZG9lcyBub3Qgd29yaywgdHJ5IHVzaW5nIHRoZVxuICAgIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBudWxsICAgICAgICAvLyBzdWJtaXRCdXR0b25TZWxlY3RvclxuICB9LFxuXG4gIGF1ZGlvOiB7XG4gICAgZW5hYmxlZDogZmFsc2UsICAgICAgICAgICAgICAgICAgIC8vIHNldCB0byB0cnVlIGZvciBleHBlcmltZW50aWFsIGF1ZGlvIHJlY29yZGluZ1xuICAgICdzd2l0Y2gnOiBmYWxzZSwgICAgICAgICAgICAgICAgICAvLyBlbmFibGVzIGEgc3dpdGNoZXIgZm9yIGF1ZGlvIHJlY29yZGluZyAob24vb2ZmKVxuICAgIHZvbHVtZTogMC4yLCAgICAgICAgICAgICAgICAgICAgICAvLyBtdXN0IGJlIGJldHdlZW4gMCAuLiAxIGJ1dCAwLjIwIGlzIHJlY29tbWVkZWQgdG8gYXZvaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGlzdG9ydGluZyBhdCB0aGUgaGlnaGVyIHZvbHVtZSBwZWFrc1xuICAgIGJ1ZmZlclNpemU6IDEwMjQgICAgICAgICAgICAgICAgICAvLyBkZWNpZGVzIGhvdyBvZnRlbiB0aGUgYXVkaW8gaXMgYmVpbmcgc2FtcGxlZCwgbXVzdCBiZSBhIHBvd2VyIG9mIHR3by5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGhpZ2hlciB0aGUgbGVzcyB0cmFmZmljLCBidXQgaGFyZGVyIHRvIGFkanVzdCB3aXRoIHJ1YmJlcmJhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gbWF0Y2ggd2l0aCB0aGUgdmlkZW8gbGVuZ3RoIG9uIHNlcnZlciBzaWRlIGR1cmluZyBlbmNvZGluZ1xuICB9LFxuXG4gIHZpZGVvOiB7XG4gICAgZnBzOiAxNSwgICAgICAgICAgICAgICAgICAgIC8vIGRlcGVuZHMgb24geW91ciBjb25uZWN0aW9uXG4gICAgbGltaXRTZWNvbmRzOiAzMCwgICAgICAgICAgIC8vIHJlY29yZGluZyBhdXRvbWF0aWNhbGx5IHN0b3BzIGFmdGVyIHRoYXQgbGltaXRcbiAgICBjb3VudGRvd246IDMsICAgICAgICAgICAgICAgLy8gc2V0IGl0IHRvIDAgb3IgZmFsc2UgdG8gZGlzYWJsZSBpdFxuXG4gICAgLy8gaXQgaXMgcmVjb21tZW5kZWQgdG8gc2V0IG9uZSBkaW1lbnNpb24gb25seSBhbmQgbGVhdmUgdGhlIG90aGVyIG9uZSB0byBhdXRvXG4gICAgLy8gYmVjYXVzZSBlYWNoIHdlYmNhbSBoYXMgYSBkaWZmZXJlbnQgYXNwZWN0IHJhdGlvXG5cbiAgICB3aWR0aDogJ2F1dG8nLCAgICAgIC8vIG9yIHVzZSBhbiBpbnRlZ2VyIGZvciBleGFjdCBwaXhlbHNcbiAgICBoZWlnaHQ6ICdhdXRvJywgICAgIC8vIG9yIHVzZSBhbiBpbnRlZ2VyIGZvciBleGFjdCBwaXhlbHNcbiAgICBmYWNpbmdNb2RlOiAndXNlcicgIC8vIGNhbiBiZSAndXNlcicsICdlbnZpcm9ubWVudCcsICdsZWZ0JyBvciAncmlnaHQnLiB1c2VmdWwgZm9yIG1vYmlsZXMuXG4gIH0sXG5cbiAgaW1hZ2U6IHtcbiAgICBxdWFsaXR5OiAwLjQ0LFxuICAgIHR5cGVzOiBbJ3dlYnAnLCAnanBlZyddICAgLy8gcmVjb21tZW5kZWQgc2V0dGluZ3MgdG8gbWFrZSBtb3N0IG9mIGFsbCBicm93c2Vyc1xuICB9LFxuXG4gIC8vIGFsdGVyIHRoZXNlIHRleHQgZm9yIGludGVybmF0aW9uYWxpc2F0aW9uXG4gIHRleHQ6IHtcbiAgICBwYXVzZWRIZWFkZXI6ICdQYXVzZWQnLFxuICAgIHBhdXNlZEhpbnQ6IG51bGwsXG4gICAgc2VuZGluZzogJ1RlbGVwb3J0aW5nJyxcbiAgICBlbmNvZGluZzogJ0VuY29kaW5nJyxcbiAgICBsaW1pdFJlYWNoZWQ6ICdMaW1pdCByZWFjaGVkJyxcbiAgICBidXR0b25zOiB7XG4gICAgICAncmVjb3JkJzogJ1JlY29yZCB2aWRlbycsXG4gICAgICAncmVjb3JkQWdhaW4nOiAnUmVjb3JkIGFnYWluJyxcbiAgICAgICdyZXN1bWUnOiAnUmVzdW1lJyxcbiAgICAgICdwYXVzZSc6ICdQYXVzZScsXG4gICAgICAncHJldmlldyc6ICdQcmV2aWV3J1xuICAgIH1cbiAgfSxcblxuICBub3RpZmllcjoge1xuICAgIGVudGVydGFpbjogZmFsc2UsICAgLy8gd2hlbiB0cnVlLCB1c2VyIGlzIGVudGVydGFpbmVkIHdoaWxlIHdhaXRpbmcsIHNlZSBleGFtcGxlc1xuICAgIGVudGVydGFpbkNsYXNzOiAnYmcnLFxuICAgIGVudGVydGFpbkxpbWl0OiA2LFxuICAgIGVudGVydGFpbkludGVydmFsOiA5MDAwXG4gIH0sXG5cbiAgdGltZW91dHM6IHtcbiAgICB1c2VyTWVkaWE6IDIwZTMsICAgICAgICAgLy8gaW4gbWlsbGlzZWNvbmRzLCBpbmNyZWFzZSBpZiB5b3Ugd2FudCB1c2VyIGdpdmUgbW9yZSB0aW1lIHRvIGVuYWJsZSB3ZWJjYW1cbiAgICBjb25uZWN0aW9uOiAxZTQsICAgICAgICAgLy8gaW4gc2Vjb25kcywgaW5jcmVhc2UgaWYgYXBpIGlzIHNsb3dcbiAgICBwaW5nSW50ZXJ2YWw6IDQ1ZTMgICAgICAgLy8gaW4gbWlsbGlzZWNvbmRzLCBrZWVwcyB3ZWJzdHJlYW0gKGNvbm5lY3Rpb24pIGFsaXZlIHdoZW4gcGF1c2luZ1xuICB9LFxuXG4gIGNhbGxiYWNrczoge1xuICAgIC8vIGEgY3VzdG9tIGNhbGxiYWNrIHRvIHR3ZWFrIGZvcm0gZGF0YSBiZWZvcmUgcG9zdGluZyB0byBzZXJ2ZXJcbiAgICAvLyB0aGlzIGlzIGZvciBhZHZhbmNlZCB1c2Ugb25seSBhbmQgc2hvdWxkbid0IGJlIHVzZWQgaWYgcG9zc2libGVcbiAgICBhZGp1c3RGb3JtRGF0YUJlZm9yZVBvc3Rpbmc6IG51bGxcbiAgfSxcblxuICBkZWZhdWx0czoge1xuICAgIGZyb206IG51bGwsICAgICAgIC8vIGRlZmluZSBkZWZhdWx0IEZST00gZW1haWwgYWRkcmVzc1xuICAgIHRvOiBudWxsLCAgICAgICAgIC8vIGRlZmluZSBkZWZhdWx0IFRPIGVtYWlsIGFkZHJlc3NcbiAgICBzdWJqZWN0OiBudWxsLCAgICAvLyBkZWZpbmUgZGVmYXVsdCBzdWJqZWN0IGxpbmVcbiAgICBib2R5OiBudWxsICAgICAgICAvLyBkZWZpbmUgZGVmYXVsdCBib2R5IGNvbnRlbnRcbiAgfSxcblxuICAvLyBhIHNwZWNpYWwgZmxhZyB0byBpbmRpY2F0ZSB0aGF0IGV2ZXJ5dGhpbmcgdG8gYmUgaW5pdGlhbGlzZWRcbiAgLy8gc2VydmVzIG9ubHkgZm9yIHBsYXlpbmcgZXhpc3RpbmcgdmlkZW9tYWlscyB3aXRoIHRoZSByZXBsYXkgZnVuY3Rpb25cbiAgcGxheWVyT25seTogZmFsc2UsXG5cbiAgLy8gc2hvdyBlcnJvcnMgaW5zaWRlIHRoZSBjb250YWluZXI/XG4gIGRpc3BsYXlFcnJvcnM6IHRydWUsXG5cbiAgLy8gdHJ1ZSA9IGFsbCBmb3JtIGlucHV0cyBnZXQgZGlzYWJsZWQgYW5kIGRpc2FwcGVhciB3aGVuIGJyb3dzZXIgY2FuJ3QgcmVjb3JkXG4gIGFkanVzdEZvcm1PbkJyb3dzZXJFcnJvcjogZmFsc2UsXG5cbiAgLy8gd2hlbiB0cnVlLCBhbnkgZXJyb3JzIHdpbGwgYmUgc2VudCB0byB0aGUgdmlkZW9tYWlsIHNlcnZlciBmb3IgYW5hbHlzaXNcbiAgLy8gcHM6IGNhbiBiZSBhIGZ1bmN0aW9uIHRvbyByZXR1cm5pbmcgYSBib29sZWFuXG4gIHJlcG9ydEVycm9yczogZmFsc2UsXG5cbiAgLy8ganVzdCBmb3IgdGVzdGluZyBwdXJwb3NlcyB0byBzaW11bGF0ZSBicm93c2VyIGFnZW50IGhhbmRsaW5nXG4gIGZha2VVYVN0cmluZzogbnVsbCxcblxuICB2ZXJzaW9uOiB2ZXJzaW9uXG59XG4iLCJpbXBvcnQgc3VwZXJhZ2VudCBmcm9tICdzdXBlcmFnZW50J1xuaW1wb3J0IENvbnN0YW50cyBmcm9tICcuL2NvbnN0YW50cydcblxuY29uc3QgQ0FDSEVfS0VZID0gJ2FsaWFzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAob3B0aW9ucykge1xuICBjb25zdCBjYWNoZSA9IHt9XG5cbiAgZnVuY3Rpb24gYXBwbHlEZWZhdWx0VmFsdWUgKHZpZGVvbWFpbCwgbmFtZSkge1xuICAgIGlmIChvcHRpb25zLmRlZmF1bHRzW25hbWVdICYmICF2aWRlb21haWxbbmFtZV0pIHtcbiAgICAgIHZpZGVvbWFpbFtuYW1lXSA9IG9wdGlvbnMuZGVmYXVsdHNbbmFtZV1cbiAgICB9XG5cbiAgICByZXR1cm4gdmlkZW9tYWlsXG4gIH1cblxuICBmdW5jdGlvbiBhcHBseURlZmF1bHRWYWx1ZXMgKHZpZGVvbWFpbCkge1xuICAgIGlmIChvcHRpb25zLmRlZmF1bHRzKSB7XG4gICAgICB2aWRlb21haWwgPSBhcHBseURlZmF1bHRWYWx1ZSh2aWRlb21haWwsICdmcm9tJylcbiAgICAgIHZpZGVvbWFpbCA9IGFwcGx5RGVmYXVsdFZhbHVlKHZpZGVvbWFpbCwgJ3RvJylcbiAgICAgIHZpZGVvbWFpbCA9IGFwcGx5RGVmYXVsdFZhbHVlKHZpZGVvbWFpbCwgJ3N1YmplY3QnKVxuICAgICAgdmlkZW9tYWlsID0gYXBwbHlEZWZhdWx0VmFsdWUodmlkZW9tYWlsLCAnYm9keScpXG4gICAgfVxuXG4gICAgcmV0dXJuIHZpZGVvbWFpbFxuICB9XG5cbiAgZnVuY3Rpb24gcGFja0Vycm9yIChlcnIsIHJlcykge1xuICAgIGlmIChyZXMgJiYgcmVzLmJvZHkgJiYgcmVzLmJvZHkuZXJyb3IpIHtcbiAgICAgIC8vIHVzZSB0aGUgc2VydmVyIGdlbmVyYXRlZCB0ZXh0IGluc3RlYWQgb2YgdGhlIHN1cGVyYWdlbnQncyBkZWZhdWx0IHRleHRcbiAgICAgIGVyciA9IHJlcy5ib2R5LmVycm9yXG5cbiAgICAgIGlmICghZXJyLm1lc3NhZ2UgJiYgcmVzLnRleHQpIHtcbiAgICAgICAgZXJyLm1lc3NhZ2UgPSByZXMudGV4dFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlcnJcbiAgfVxuXG4gIGZ1bmN0aW9uIGZldGNoIChhbGlhcywgY2IpIHtcbiAgICBzdXBlcmFnZW50XG4gICAgICAuZ2V0KCcvdmlkZW9tYWlsLycgKyBhbGlhcyArICcvc25hcHNob3QnKVxuICAgICAgLnNldCgnQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKVxuICAgICAgLnNldChDb25zdGFudHMuU0lURV9OQU1FX0xBQkVMLCBvcHRpb25zLnNpdGVOYW1lKVxuICAgICAgLnRpbWVvdXQob3B0aW9ucy50aW1lb3V0cy5jb25uZWN0aW9uKVxuICAgICAgLmVuZChmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgZXJyID0gcGFja0Vycm9yKGVyciwgcmVzKVxuXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjYihlcnIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgdmlkZW9tYWlsID0gcmVzLmJvZHkgPyByZXMuYm9keSA6IG51bGxcblxuICAgICAgICAgIGlmIChvcHRpb25zLmNhY2hlKSB7XG4gICAgICAgICAgICBjYWNoZVtDQUNIRV9LRVldID0gdmlkZW9tYWlsXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2IobnVsbCwgdmlkZW9tYWlsKVxuICAgICAgICB9XG4gICAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gd3JpdGUgKG1ldGhvZCwgdmlkZW9tYWlsLCBpZGVudGlmaWVyLCBjYikge1xuICAgIGlmICghY2IpIHtcbiAgICAgIGNiID0gaWRlbnRpZmllclxuICAgICAgaWRlbnRpZmllciA9IG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHt9XG5cbiAgICB2YXIgdXJsID0gb3B0aW9ucy5iYXNlVXJsICsgJy92aWRlb21haWwvJ1xuICAgIHZhciByZXF1ZXN0XG5cbiAgICBpZiAoaWRlbnRpZmllcikge1xuICAgICAgdXJsICs9IGlkZW50aWZpZXJcbiAgICB9XG5cbiAgICByZXF1ZXN0ID0gc3VwZXJhZ2VudChtZXRob2QsIHVybClcblxuICAgIHF1ZXJ5UGFyYW1zW0NvbnN0YW50cy5TSVRFX05BTUVfTEFCRUxdID0gb3B0aW9ucy5zaXRlTmFtZVxuXG4gICAgcmVxdWVzdFxuICAgICAgLnF1ZXJ5KHF1ZXJ5UGFyYW1zKVxuICAgICAgLnNlbmQodmlkZW9tYWlsKVxuICAgICAgLnRpbWVvdXQob3B0aW9ucy50aW1lb3V0KVxuICAgICAgLmVuZChmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgZXJyID0gcGFja0Vycm9yKGVyciwgcmVzKVxuXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjYihlcnIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG9wdGlvbnMuY2FjaGUgJiYgdmlkZW9tYWlsW0NBQ0hFX0tFWV0pIHtcbiAgICAgICAgICAgIGNhY2hlW3ZpZGVvbWFpbFtDQUNIRV9LRVldXSA9IHJlcy5ib2R5LnZpZGVvbWFpbFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNiKG51bGwsIHJlcy5ib2R5LnZpZGVvbWFpbCwgcmVzLmJvZHkpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gIH1cblxuICB0aGlzLmdldCA9IGZ1bmN0aW9uIChhbGlhcywgY2IpIHtcbiAgICBpZiAob3B0aW9ucy5jYWNoZSAmJiBjYWNoZVthbGlhc10pIHtcbiAgICAgIC8vIGtlZXAgYWxsIGNhbGxiYWNrcyBhc3luY1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNiKG51bGwsIGNhY2hlW2FsaWFzXSlcbiAgICAgIH0sIDApXG4gICAgfSBlbHNlIHtcbiAgICAgIGZldGNoKGFsaWFzLCBjYilcbiAgICB9XG4gIH1cblxuICB0aGlzLnJlcG9ydEVycm9yID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHt9XG4gICAgY29uc3QgdXJsID0gb3B0aW9ucy5iYXNlVXJsICsgJy9jbGllbnQtZXJyb3IvJ1xuICAgIGNvbnN0IHJlcXVlc3QgPSBzdXBlcmFnZW50KCdwb3N0JywgdXJsKVxuXG4gICAgcXVlcnlQYXJhbXNbQ29uc3RhbnRzLlNJVEVfTkFNRV9MQUJFTF0gPSBvcHRpb25zLnNpdGVOYW1lXG5cbiAgICByZXF1ZXN0XG4gICAgICAucXVlcnkocXVlcnlQYXJhbXMpXG4gICAgICAuc2VuZChlcnIpXG4gICAgICAudGltZW91dChvcHRpb25zLnRpbWVvdXQpXG4gICAgICAuZW5kKGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICBlcnIgPSBwYWNrRXJyb3IoZXJyLCByZXMpXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjYiAmJiBjYihlcnIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2IgJiYgY2IoKVxuICAgICAgICB9XG4gICAgICB9KVxuICB9XG5cbiAgdGhpcy5wb3N0ID0gZnVuY3Rpb24gKHZpZGVvbWFpbCwgY2IpIHtcbiAgICB2aWRlb21haWwgPSBhcHBseURlZmF1bHRWYWx1ZXModmlkZW9tYWlsKVxuXG4gICAgLy8gYWx3YXlzIGdvb2QgdG8ga25vdyB0aGUgdmVyc2lvbiBvZiB0aGUgY2xpZW50XG4gICAgLy8gdGhlIHZpZGVvbWFpbCB3YXMgc3VibWl0dGVkIHdpdGhcbiAgICB2aWRlb21haWxbQ29uc3RhbnRzLlZFUlNJT05fTEFCRUxdID0gb3B0aW9ucy52ZXJzaW9uXG5cbiAgICBpZiAob3B0aW9ucy5jYWxsYmFja3MuYWRqdXN0Rm9ybURhdGFCZWZvcmVQb3N0aW5nKSB7XG4gICAgICBvcHRpb25zLmNhbGxiYWNrcy5hZGp1c3RGb3JtRGF0YUJlZm9yZVBvc3RpbmcoXG4gICAgICAgIHZpZGVvbWFpbCxcbiAgICAgICAgZnVuY3Rpb24gKGVyciwgYWRqdXN0ZWRWaWRlb21haWwpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBjYihlcnIpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyaXRlKCdwb3N0JywgYWRqdXN0ZWRWaWRlb21haWwsIGNiKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB3cml0ZSgncG9zdCcsIHZpZGVvbWFpbCwgY2IpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5wdXQgPSBmdW5jdGlvbiAodmlkZW9tYWlsLCBjYikge1xuICAgIHdyaXRlKCdwdXQnLCB2aWRlb21haWwsIHZpZGVvbWFpbC5rZXksIGNiKVxuICB9XG5cbiAgdGhpcy5mb3JtID0gZnVuY3Rpb24gKGZvcm1EYXRhLCB1cmwsIGNiKSB7XG4gICAgdmFyIGZvcm1UeXBlXG5cbiAgICBzd2l0Y2ggKG9wdGlvbnMuZW5jdHlwZSkge1xuICAgICAgY2FzZSBDb25zdGFudHMucHVibGljLkVOQ19UWVBFX0FQUF9KU09OOlxuICAgICAgICBmb3JtVHlwZSA9ICdqc29uJ1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSBDb25zdGFudHMucHVibGljLkVOQ19UWVBFX0ZPUk06XG4gICAgICAgIGZvcm1UeXBlID0gJ2Zvcm0nXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBrZWVwIGFsbCBjYWxsYmFja3MgYXN5bmNcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgY2IobmV3IEVycm9yKCdJbnZhbGlkIGVuY3R5cGUgZ2l2ZW46ICcgKyBvcHRpb25zLmVuY3R5cGUpKVxuICAgICAgICB9LCAwKVxuICAgIH1cblxuICAgIGlmIChmb3JtVHlwZSkge1xuICAgICAgc3VwZXJhZ2VudFxuICAgICAgICAucG9zdCh1cmwpXG4gICAgICAgIC50eXBlKGZvcm1UeXBlKVxuICAgICAgICAuc2VuZChmb3JtRGF0YSlcbiAgICAgICAgLnRpbWVvdXQob3B0aW9ucy50aW1lb3V0KVxuICAgICAgICAuZW5kKGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICAgIGVyciA9IHBhY2tFcnJvcihlcnIsIHJlcylcblxuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGNiKGVycilcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2IobnVsbCwgcmVzKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzPSdAa2V5ZnJhbWVzIGF7MCV7b3BhY2l0eTouOX0zNSV7b3BhY2l0eTouOX01MCV7b3BhY2l0eTouMX04NSV7b3BhY2l0eTouMX10b3tvcGFjaXR5Oi45fX0uSUlWOjotd2Via2l0LW1lZGlhLWNvbnRyb2xzLXBsYXktYnV0dG9uLC5JSVY6Oi13ZWJraXQtbWVkaWEtY29udHJvbHMtc3RhcnQtcGxheWJhY2stYnV0dG9ue29wYWNpdHk6MDtwb2ludGVyLWV2ZW50czpub25lO3dpZHRoOjVweH0udmlkZW9tYWlsIC52aXN1YWxze3Bvc2l0aW9uOnJlbGF0aXZlfS52aWRlb21haWwgLnZpc3VhbHMgdmlkZW8ucmVwbGF5e3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9LnZpZGVvbWFpbCAuY291bnRkb3duLC52aWRlb21haWwgLnBhdXNlZEhlYWRlciwudmlkZW9tYWlsIC5wYXVzZWRIaW50LC52aWRlb21haWwgLnJlY29yZE5vdGUsLnZpZGVvbWFpbCAucmVjb3JkVGltZXJ7bWFyZ2luOjA7aGVpZ2h0OmF1dG99LnZpZGVvbWFpbCAuY291bnRkb3duLC52aWRlb21haWwgLnBhdXNlZCwudmlkZW9tYWlsIC5yZWNvcmROb3RlLC52aWRlb21haWwgLnJlY29yZFRpbWVyLC52aWRlb21haWwgbm9zY3JpcHR7cG9zaXRpb246YWJzb2x1dGV9LnZpZGVvbWFpbCAuY291bnRkb3duLC52aWRlb21haWwgLnBhdXNlZEhlYWRlciwudmlkZW9tYWlsIC5wYXVzZWRIaW50LC52aWRlb21haWwgLnJlY29yZE5vdGUsLnZpZGVvbWFpbCAucmVjb3JkVGltZXIsLnZpZGVvbWFpbCBub3NjcmlwdHtmb250LXdlaWdodDo3MDB9LnZpZGVvbWFpbCAuY291bnRkb3duLC52aWRlb21haWwgLnBhdXNlZCwudmlkZW9tYWlsIG5vc2NyaXB0e3dpZHRoOjEwMCU7dG9wOjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNTAlKX0udmlkZW9tYWlsIC5jb3VudGRvd24sLnZpZGVvbWFpbCAucGF1c2VkSGVhZGVyLC52aWRlb21haWwgLnBhdXNlZEhpbnR7dGV4dC1hbGlnbjpjZW50ZXI7dGV4dC1zaGFkb3c6MCAwIDJweCAjZmZmfS52aWRlb21haWwgLmNvdW50ZG93biwudmlkZW9tYWlsIC5wYXVzZWRIZWFkZXJ7b3BhY2l0eTouODU7Zm9udC1zaXplOjQ0MCV9LnZpZGVvbWFpbCAucGF1c2VkSGludHtmb250LXNpemU6MTUwJX0udmlkZW9tYWlsIC5yZWNvcmROb3RlLC52aWRlb21haWwgLnJlY29yZFRpbWVye3JpZ2h0Oi43ZW07YmFja2dyb3VuZDpoc2xhKDAsMCUsNCUsLjgpO3BhZGRpbmc6LjRlbSAuNGVtIC4zZW07dHJhbnNpdGlvbjphbGwgMXMgZWFzZTtjb2xvcjojMDBkODE0O2ZvbnQtZmFtaWx5Om1vbm9zcGFjZTtvcGFjaXR5Oi45fS52aWRlb21haWwgLnJlY29yZE5vdGUubmVhciwudmlkZW9tYWlsIC5yZWNvcmRUaW1lci5uZWFye2NvbG9yOiNlYjkzNjl9LnZpZGVvbWFpbCAucmVjb3JkTm90ZS5uaWdoLC52aWRlb21haWwgLnJlY29yZFRpbWVyLm5pZ2h7Y29sb3I6I2VhNGIyYX0udmlkZW9tYWlsIC5yZWNvcmRUaW1lcnt0b3A6LjdlbX0udmlkZW9tYWlsIC5yZWNvcmROb3Rle3RvcDozLjZlbX0udmlkZW9tYWlsIC5yZWNvcmROb3RlOmJlZm9yZXtjb250ZW50OlwiUkVDXCI7YW5pbWF0aW9uOmEgMXMgaW5maW5pdGV9LnZpZGVvbWFpbCAubm90aWZpZXJ7b3ZlcmZsb3c6aGlkZGVuO2JveC1zaXppbmc6Ym9yZGVyLWJveDtoZWlnaHQ6MTAwJX0udmlkZW9tYWlsIC5yYWRpb0dyb3Vwe2Rpc3BsYXk6YmxvY2t9LnZpZGVvbWFpbCB2aWRlb3ttYXJnaW4tYm90dG9tOjB9JyIsImltcG9ydCBpc1BPVCBmcm9tICdpcy1wb3dlci1vZi10d28nXG5pbXBvcnQgQXVkaW9TYW1wbGUgZnJvbSAnYXVkaW8tc2FtcGxlJ1xuXG5pbXBvcnQgVmlkZW9tYWlsRXJyb3IgZnJvbSAnLi92aWRlb21haWxFcnJvcidcblxuY29uc3QgQ0hBTk5FTFMgPSAxXG5cbi8vIGZvciBpbnNwaXJhdGlvbiBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zYWViZWthc3NlYmlsL21pY3JvcGhvbmUtc3RyZWFtXG5cbi8vIHRvZG8gY29kZSBuZWVkcyByZXdyaXRlXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh1c2VyTWVkaWEsIG9wdGlvbnMpIHtcbiAgdmFyIHNjcmlwdFByb2Nlc3NvclxuICB2YXIgYXVkaW9JbnB1dFxuICB2YXIgdmNBdWRpb0NvbnRleHRcblxuICBmdW5jdGlvbiBnZXRBdWRpb0NvbnRleHRDbGFzcyAoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dFxuICB9XG5cbiAgZnVuY3Rpb24gaGFzQXVkaW9Db250ZXh0ICgpIHtcbiAgICByZXR1cm4gISFnZXRBdWRpb0NvbnRleHRDbGFzcygpICYmICEhZ2V0QXVkaW9Db250ZXh0KClcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEF1ZGlvQ29udGV4dCAoKSB7XG4gICAgLy8gaW5zdGFudGlhdGUgb25seSBvbmNlXG4gICAgaWYgKCF2Y0F1ZGlvQ29udGV4dCkge1xuICAgICAgY29uc3QgQXVkaW9Db250ZXh0ID0gZ2V0QXVkaW9Db250ZXh0Q2xhc3MoKVxuICAgICAgdmNBdWRpb0NvbnRleHQgPSBuZXcgQXVkaW9Db250ZXh0KClcbiAgICB9XG5cbiAgICByZXR1cm4gdmNBdWRpb0NvbnRleHRcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQXVkaW9Qcm9jZXNzIChlLCBjYikge1xuICAgIGlmICghdXNlck1lZGlhLmlzUmVjb3JkaW5nKCkgfHwgdXNlck1lZGlhLmlzUGF1c2VkKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIFJldHVybnMgYSBGbG9hdDMyQXJyYXkgY29udGFpbmluZyB0aGUgUENNIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSBjaGFubmVsLFxuICAgIC8vIGRlZmluZWQgYnkgdGhlIGNoYW5uZWwgcGFyYW1ldGVyICh3aXRoIDAgcmVwcmVzZW50aW5nIHRoZSBmaXJzdCBjaGFubmVsKVxuICAgIGNvbnN0IGZsb2F0MzJBcnJheSA9IGUuaW5wdXRCdWZmZXIuZ2V0Q2hhbm5lbERhdGEoMClcblxuICAgIGNiKG5ldyBBdWRpb1NhbXBsZShmbG9hdDMyQXJyYXkpKVxuICB9XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24gKGxvY2FsTWVkaWFTdHJlYW0pIHtcbiAgICBvcHRpb25zLmRlYnVnKCdBdWRpb1JlY29yZGVyOiBpbml0KCknKVxuXG4gICAgLy8gY3JlYXRlcyBhbiBhdWRpbyBub2RlIGZyb20gdGhlIG1pY3JvcGhvbmUgaW5jb21pbmcgc3RyZWFtXG4gICAgY29uc3Qgdm9sdW1lID0gZ2V0QXVkaW9Db250ZXh0KCkuY3JlYXRlR2FpbigpXG5cbiAgICB0cnkge1xuICAgICAgYXVkaW9JbnB1dCA9IGdldEF1ZGlvQ29udGV4dCgpLmNyZWF0ZU1lZGlhU3RyZWFtU291cmNlKGxvY2FsTWVkaWFTdHJlYW0pXG4gICAgfSBjYXRjaCAoZXhjKSB7XG4gICAgICB0aHJvdyBWaWRlb21haWxFcnJvci5jcmVhdGUoXG4gICAgICAgICdXZWJjYW0gaGFzIG5vIGF1ZGlvJyxcbiAgICAgICAgZXhjLnRvU3RyaW5nKCksXG4gICAgICAgIG9wdGlvbnNcbiAgICAgIClcbiAgICB9XG5cbiAgICBpZiAoIWlzUE9UKG9wdGlvbnMuYXVkaW8uYnVmZmVyU2l6ZSkpIHtcbiAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnQXVkaW8gYnVmZmVyIHNpemUgbXVzdCBiZSBhIHBvd2VyIG9mIHR3by4nLCBvcHRpb25zKVxuICAgIH0gZWxzZSBpZiAoIW9wdGlvbnMuYXVkaW8udm9sdW1lIHx8IG9wdGlvbnMuYXVkaW8udm9sdW1lID4gMSkge1xuICAgICAgdGhyb3cgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdBdWRpbyB2b2x1bWUgbXVzdCBiZSBiZXR3ZWVuIHplcm8gYW5kIG9uZS4nLCBvcHRpb25zKVxuICAgIH1cblxuICAgIHZvbHVtZS5nYWluLnZhbHVlID0gb3B0aW9ucy5hdWRpby52b2x1bWVcblxuICAgIC8vIENyZWF0ZSBhIFNjcmlwdFByb2Nlc3Nvck5vZGUgd2l0aCB0aGUgZ2l2ZW4gYnVmZmVyU2l6ZSBhbmRcbiAgICAvLyBhIHNpbmdsZSBpbnB1dCBhbmQgb3V0cHV0IGNoYW5uZWxcbiAgICBzY3JpcHRQcm9jZXNzb3IgPSBnZXRBdWRpb0NvbnRleHQoKS5jcmVhdGVTY3JpcHRQcm9jZXNzb3IoXG4gICAgICBvcHRpb25zLmF1ZGlvLmJ1ZmZlclNpemUsXG4gICAgICBDSEFOTkVMUyxcbiAgICAgIENIQU5ORUxTXG4gICAgKVxuXG4gICAgLy8gY29ubmVjdCBzdHJlYW0gdG8gb3VyIHNjcmlwdFByb2Nlc3NvclxuICAgIGF1ZGlvSW5wdXQuY29ubmVjdChzY3JpcHRQcm9jZXNzb3IpXG5cbiAgICAvLyBjb25uZWN0IG91ciBzY3JpcHRQcm9jZXNzb3IgdG8gdGhlIHByZXZpb3VzIGRlc3RpbmF0aW9uXG4gICAgc2NyaXB0UHJvY2Vzc29yLmNvbm5lY3QoZ2V0QXVkaW9Db250ZXh0KCkuZGVzdGluYXRpb24pXG5cbiAgICAvLyBjb25uZWN0IHZvbHVtZVxuICAgIGF1ZGlvSW5wdXQuY29ubmVjdCh2b2x1bWUpXG4gICAgdm9sdW1lLmNvbm5lY3Qoc2NyaXB0UHJvY2Vzc29yKVxuICB9XG5cbiAgdGhpcy5yZWNvcmQgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICBvcHRpb25zLmRlYnVnKCdBdWRpb1JlY29yZGVyOiByZWNvcmQoKScpXG5cbiAgICBzY3JpcHRQcm9jZXNzb3Iub25hdWRpb3Byb2Nlc3MgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgb25BdWRpb1Byb2Nlc3MoZSwgY2IpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgIG9wdGlvbnMuZGVidWcoJ0F1ZGlvUmVjb3JkZXI6IHN0b3AoKScpXG5cbiAgICBpZiAoc2NyaXB0UHJvY2Vzc29yKSB7XG4gICAgICBzY3JpcHRQcm9jZXNzb3Iub25hdWRpb3Byb2Nlc3MgPSB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBpZiAoYXVkaW9JbnB1dCkge1xuICAgICAgYXVkaW9JbnB1dC5kaXNjb25uZWN0KClcbiAgICB9XG5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQXVkaW9Db250ZXh0L2Nsb3NlXG4gICAgaWYgKGhhc0F1ZGlvQ29udGV4dCgpKSB7XG4gICAgICBpZiAoZ2V0QXVkaW9Db250ZXh0KCkuY2xvc2UpIHtcbiAgICAgICAgZ2V0QXVkaW9Db250ZXh0KClcbiAgICAgICAgICAuY2xvc2UoKVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZGVidWcoJ0F1ZGlvUmVjb3JkZXI6IGF1ZGlvIGNvbnRleHQgaXMgY2xvc2VkJylcbiAgICAgICAgICAgIHZjQXVkaW9Db250ZXh0ID0gbnVsbFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZShlcnIsIG9wdGlvbnMpXG4gICAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZjQXVkaW9Db250ZXh0ID0gbnVsbFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuZ2V0U2FtcGxlUmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaGFzQXVkaW9Db250ZXh0KCkpIHtcbiAgICAgIHJldHVybiBnZXRBdWRpb0NvbnRleHQoKS5zYW1wbGVSYXRlXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IFVBUGFyc2VyIGZyb20gJ3VhLXBhcnNlci1qcydcbmltcG9ydCBkZWZpbmVkIGZyb20gJ2RlZmluZWQnXG5pbXBvcnQgVmlkZW9tYWlsRXJyb3IgZnJvbSAnLi92aWRlb21haWxFcnJvcidcblxuY29uc3QgQnJvd3NlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgY29uc3QgZmlyZWZveERvd25sb2FkID0gJ2h0dHA6Ly93d3cubW96aWxsYS5vcmcvZmlyZWZveC91cGRhdGUvJ1xuICBjb25zdCBlZGdlRG93bmxvYWQgPSAnaHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9lbi11cy9kb3dubG9hZC9kZXRhaWxzLmFzcHg/aWQ9NDgxMjYnXG4gIGNvbnN0IGNocm9tZURvd25sb2FkID0gJ2h0dHA6Ly93d3cuZ29vZ2xlLmNvbS9jaHJvbWUvJ1xuICBjb25zdCBjaHJvbWl1bURvd25sb2FkID0gJ2h0dHA6Ly93d3cuY2hyb21pdW0ub3JnL2dldHRpbmctaW52b2x2ZWQvZG93bmxvYWQtY2hyb21pdW0nXG4gIGNvbnN0IGJyb3dzZUhhcHB5TGluayA9ICdodHRwOi8vYnJvd3NlaGFwcHkuY29tJ1xuICBjb25zdCB1YSA9IGRlZmluZWQob3B0aW9ucy5mYWtlVWFTdHJpbmcsIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHdpbmRvdy5uYXZpZ2F0b3IgJiZcbiAgICB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudFxuICApLCAnJylcblxuICBjb25zdCB1YVBhcnNlciA9IG5ldyBVQVBhcnNlcih1YSkuZ2V0UmVzdWx0KClcblxuICBjb25zdCBpc0lPUyA9IHVhUGFyc2VyLm9zLm5hbWUgPT09ICdpT1MnXG4gIGNvbnN0IGJyb3dzZXJWZXJzaW9uID0gcGFyc2VGbG9hdCh1YVBhcnNlci5icm93c2VyLnZlcnNpb24pXG4gIGNvbnN0IGlzQ2hyb21lID0gdWFQYXJzZXIuYnJvd3Nlci5uYW1lID09PSAnQ2hyb21lJ1xuICBjb25zdCBpc0Nocm9taXVtID0gdWFQYXJzZXIuYnJvd3Nlci5uYW1lID09PSAnQ2hyb21pdW0nXG4gIGNvbnN0IGZpcmVmb3ggPSB1YVBhcnNlci5icm93c2VyLm5hbWUgPT09ICdGaXJlZm94J1xuICBjb25zdCBvc1ZlcnNpb24gPSBwYXJzZUZsb2F0KHVhUGFyc2VyLm9zLnZlcnNpb24pXG4gIGNvbnN0IGlzV2luZG93cyA9IHVhUGFyc2VyLm9zLm5hbWUgPT09ICdXaW5kb3dzJ1xuICBjb25zdCBpc0VkZ2UgPSB1YVBhcnNlci5icm93c2VyLm5hbWUgPT09ICdFZGdlJyB8fCAoaXNXaW5kb3dzICYmIG9zVmVyc2lvbiA+PSAxMClcbiAgY29uc3QgaXNJRSA9IC9JRS8udGVzdCh1YVBhcnNlci5icm93c2VyLm5hbWUpXG4gIGNvbnN0IGlzU2FmYXJpID0gL1NhZmFyaS8udGVzdCh1YVBhcnNlci5icm93c2VyLm5hbWUpXG4gIGNvbnN0IGlzT3BlcmEgPSAvT3BlcmEvLnRlc3QodWFQYXJzZXIuYnJvd3Nlci5uYW1lKVxuICBjb25zdCBpc0FuZHJvaWQgPSAvQW5kcm9pZC8udGVzdCh1YVBhcnNlci5vcy5uYW1lKVxuICBjb25zdCBjaHJvbWVCYXNlZCA9IGlzQ2hyb21lIHx8IGlzQ2hyb21pdW1cblxuICBjb25zdCBpc01vYmlsZSA9IGlzSU9TIHx8IGlzQW5kcm9pZFxuICBjb25zdCBpc09rU2FmYXJpID0gaXNTYWZhcmkgJiYgYnJvd3NlclZlcnNpb24gPj0gMTFcbiAgY29uc3QgaXNPa0lPUyA9IGlzSU9TICYmIG9zVmVyc2lvbiA+PSAxMVxuICBjb25zdCBpc0JhZElPUyA9IGlzSU9TICYmIG9zVmVyc2lvbiA8IDExXG5cbiAgY29uc3Qgb2tCcm93c2VyID1cbiAgICBjaHJvbWVCYXNlZCB8fFxuICAgIGZpcmVmb3ggfHxcbiAgICBpc0FuZHJvaWQgfHxcbiAgICBpc09wZXJhIHx8XG4gICAgaXNFZGdlIHx8XG4gICAgaXNPa1NhZmFyaSB8fFxuICAgIGlzT2tJT1NcblxuICBjb25zdCBzZWxmID0gdGhpc1xuXG4gIHZhciB2aWRlb1R5cGVcblxuICBmdW5jdGlvbiBnZXRSZWNvbW1lbmRhdGlvbiAoKSB7XG4gICAgdmFyIHdhcm5pbmdcblxuICAgIGlmIChmaXJlZm94KSB7XG4gICAgICBpZiAoaXNJT1MpIHtcbiAgICAgICAgd2FybmluZyA9ICdGaXJlZm94IG9uIGlPUyBpcyBub3QgcmVhZHkgZm9yIGNhbWVyYXMgeWV0LiBIb3BlZnVsbHkgaW4gbmVhciBmdXR1cmUgLi4uJ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyA9ICdQcm9iYWJseSB5b3UgbmVlZCB0byA8YSBocmVmPVwiJyArIGZpcmVmb3hEb3dubG9hZCArICdcIiB0YXJnZXQ9XCJfYmxhbmtcIj4nICtcbiAgICAgICAgICAgICAgICAgICd1cGdyYWRlIEZpcmVmb3g8L2E+IHRvIGZpeCB0aGlzLidcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQ2hyb21lKSB7XG4gICAgICBpZiAoaXNJT1MpIHtcbiAgICAgICAgd2FybmluZyA9ICdDaHJvbWUgb24gaU9TIGlzIG5vdCByZWFkeSBmb3IgY2FtZXJhcyB5ZXQuIEhvcGVmdWxseSBpbiBuZWFyIGZ1dHVyZSAuLi4nXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nID0gJ1Byb2JhYmx5IHlvdSBuZWVkIHRvIDxhIGhyZWY9XCInICsgY2hyb21lRG93bmxvYWQgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+JyArXG4gICAgICAgICAgICAgICAgICAndXBncmFkZSBDaHJvbWU8L2E+IHRvIGZpeCB0aGlzLidcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQ2hyb21pdW0pIHtcbiAgICAgIHdhcm5pbmcgPSAnUHJvYmFibHkgeW91IG5lZWQgdG8gPGEgaHJlZj1cIicgKyBjaHJvbWl1bURvd25sb2FkICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiPicgK1xuICAgICAgICAgICAgICAgICd1cGdyYWRlIENocm9taXVtPC9hPiB0byBmaXggdGhpcy4nXG4gICAgfSBlbHNlIGlmIChpc0lFKSB7XG4gICAgICB3YXJuaW5nID0gJ0luc3RlYWQgb2YgSW50ZXJuZXQgRXhwbG9yZXIgeW91IG5lZWQgdG8gdXBncmFkZSB0bycgK1xuICAgICAgICAgICAgICAgICcgPGEgaHJlZj1cIicgKyBlZGdlRG93bmxvYWQgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+RWRnZTwvYT4uJ1xuICAgIH0gZWxzZSBpZiAoaXNPa1NhZmFyaSkge1xuICAgICAgd2FybmluZyA9ICdQcm9iYWJseSB5b3UgbmVlZCB0byBzaHV0IGRvd24gU2FmYXJpIGFuZCByZXN0YXJ0IGl0LCB0aGlzIGZvciBjb3JyZWN0IHdlYmNhbSBhY2Nlc3MuJ1xuICAgIH0gZWxzZSBpZiAoaXNTYWZhcmkpIHtcbiAgICAgIHdhcm5pbmcgPSAnU2FmYXJpIGJlbG93IHZlcnNpb24gMTEgaGFzIG5vIHdlYmNhbSBzdXBwb3J0Ljxici8+QmV0dGVyIHVwZ3JhZGUgU2FmYXJpIG9yIHBpY2snICtcbiAgICAgICAgICAgICAgICAnIDxhIGhyZWY9XCInICsgY2hyb21lRG93bmxvYWQgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+Q2hyb21lPC9hPiwnICtcbiAgICAgICAgICAgICAgICAnIDxhIGhyZWY9XCInICsgZmlyZWZveERvd25sb2FkICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiPkZpcmVmb3g8L2E+IG9yIEFuZHJvaWQuJ1xuICAgIH1cblxuICAgIHJldHVybiB3YXJuaW5nXG4gIH1cblxuICBmdW5jdGlvbiBnZXRVc2VyTWVkaWFXYXJuaW5nICgpIHtcbiAgICB2YXIgd2FybmluZ1xuXG4gICAgaWYgKGlzQmFkSU9TKSB7XG4gICAgICB3YXJuaW5nID0gJ09uIGlQYWRzL2lQaG9uZXMgYmVsb3cgaU9TIHYxMSB0aGlzIGNhbWVyYSBmZWF0dXJlIGlzIG1pc3NpbmcuPGJyLz48YnIvPicgK1xuICAgICAgICAgICAgICAgICdGb3Igbm93LCB3ZSByZWNvbW1lbmQgeW91IHRvIHVwZ3JhZGUgaU9TIG9yIHRvIHVzZSBhbiBBbmRyb2lkIGRldmljZS4nXG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmcgPSBnZXRSZWNvbW1lbmRhdGlvbigpXG4gICAgfVxuXG4gICAgaWYgKCF3YXJuaW5nKSB7XG4gICAgICBpZiAoc2VsZi5pc0Nocm9tZUJhc2VkKCkgfHwgc2VsZi5pc0ZpcmVmb3goKSB8fCBpc1NhZmFyaSkge1xuICAgICAgICB3YXJuaW5nID0gJ0ZvciB0aGUgd2ViY2FtIGZlYXR1cmUsIHlvdXIgYnJvd3NlciBuZWVkcyBhbiB1cGdyYWRlLidcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcgPSAnSGVuY2Ugd2UgcmVjb21tZW5kIHlvdSB0byB1c2UgZWl0aGVyICcgK1xuICAgICAgICAgICAgICAgICAgJzxhIGhyZWY9XCInICsgY2hyb21lRG93bmxvYWQgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+Q2hyb21lPC9hPiwgJyArXG4gICAgICAgICAgICAgICAgICAnPGEgaHJlZj1cIicgKyBmaXJlZm94RG93bmxvYWQgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+RmlyZWZveDwvYT4sICcgK1xuICAgICAgICAgICAgICAgICAgJzxhIGhyZWY9XCInICsgZWRnZURvd25sb2FkICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiPkVkZ2U8L2E+IG9yIEFuZHJvaWQuJ1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3YXJuaW5nXG4gIH1cblxuICBmdW5jdGlvbiBnZXRQbGF5YmFja1dhcm5pbmcgKCkge1xuICAgIHZhciB3YXJuaW5nID0gZ2V0UmVjb21tZW5kYXRpb24oKVxuXG4gICAgaWYgKCF3YXJuaW5nKSB7XG4gICAgICB3YXJuaW5nID0gJzxhIGhyZWY9XCInICsgYnJvd3NlSGFwcHlMaW5rICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiPlVwZ3JhZGluZyB5b3VyIGJyb3dzZXI8L2E+IG1pZ2h0IGhlbHAuJ1xuICAgIH1cblxuICAgIHJldHVybiB3YXJuaW5nXG4gIH1cblxuICBmdW5jdGlvbiBjYW5QbGF5VHlwZSAodmlkZW8sIHR5cGUpIHtcbiAgICB2YXIgY2FuUGxheVR5cGVcblxuICAgIGlmICh2aWRlbyAmJiB2aWRlby5jYW5QbGF5VHlwZSkge1xuICAgICAgY2FuUGxheVR5cGUgPSB2aWRlby5jYW5QbGF5VHlwZSgndmlkZW8vJyArIHR5cGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGNhblBsYXlUeXBlXG4gIH1cblxuICAvLyBqdXN0IHRlbXBvcmFyeVxuICB0aGlzLmNhblJlY29yZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBoYXNOYXZpZ2F0b3IgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJ1xuICAgIHZhciBjYW5SZWNvcmQgPSBmYWxzZVxuXG4gICAgaWYgKGhhc05hdmlnYXRvciAmJiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKSB7XG4gICAgICBjYW5SZWNvcmQgPSB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGdldFVzZXJNZWRpYVR5cGUgPSBoYXNOYXZpZ2F0b3IgJiYgdHlwZW9mIG5hdmlnYXRvci5nZXRVc2VyTWVkaWFfXG5cbiAgICAgIGNhblJlY29yZCA9IGdldFVzZXJNZWRpYVR5cGUgPT09ICdmdW5jdGlvbidcbiAgICB9XG5cbiAgICByZXR1cm4gY2FuUmVjb3JkXG4gIH1cblxuICB0aGlzLmNoZWNrUmVjb3JkaW5nQ2FwYWJpbGl0aWVzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlcnJcblxuICAgIGlmICghb2tCcm93c2VyIHx8ICF0aGlzLmNhblJlY29yZCgpKSB7XG4gICAgICBjb25zdCBjbGFzc0xpc3QgPSBbXVxuXG4gICAgICBpZiAoaXNCYWRJT1MpIHtcbiAgICAgICAgY2xhc3NMaXN0LnB1c2goVmlkZW9tYWlsRXJyb3IuSU9TX1BST0JMRU0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbGFzc0xpc3QucHVzaChWaWRlb21haWxFcnJvci5CUk9XU0VSX1BST0JMRU0pXG4gICAgICB9XG5cbiAgICAgIHZhciBtZXNzYWdlXG5cbiAgICAgIC8vIGdvb2QgdG8gYmUgYWJsZSB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIHR3byByZWFzb25zIHdoeSBhbmQgd2hhdCBzb3J0IG9mIGNhbWVyYSBpdCBpc1xuICAgICAgaWYgKCFva0Jyb3dzZXIpIHtcbiAgICAgICAgaWYgKGlzTW9iaWxlKSB7XG4gICAgICAgICAgbWVzc2FnZSA9ICdTb3JyeSwgeW91ciBicm93c2VyIGlzIHVuYWJsZSB0byB1c2UgeW91ciBtb2JpbGUgY2FtZXJhJ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1lc3NhZ2UgPSAnU29ycnksIHlvdXIgYnJvd3NlciBpcyB1bmFibGUgdG8gdXNlIHdlYmNhbXMnXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc01vYmlsZSkge1xuICAgICAgICAgIG1lc3NhZ2UgPSAnU29ycnksIHlvdXIgYnJvd3NlciBjYW5ub3QgcmVjb3JkIGZyb20geW91ciBtb2JpbGUgY2FtZXJhJ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1lc3NhZ2UgPSAnU29ycnksIHlvdXIgYnJvd3NlciBjYW5ub3QgcmVjb3JkIGZyb20gd2ViY2FtcydcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBlcnIgPSBWaWRlb21haWxFcnJvci5jcmVhdGUoe1xuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgICB9LCBnZXRVc2VyTWVkaWFXYXJuaW5nKCksIG9wdGlvbnMsIHtcbiAgICAgICAgY2xhc3NMaXN0OiBjbGFzc0xpc3RcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIGVyclxuICB9XG5cbiAgdGhpcy5jaGVja1BsYXliYWNrQ2FwYWJpbGl0aWVzID0gZnVuY3Rpb24gKHZpZGVvKSB7XG4gICAgb3B0aW9ucy5kZWJ1ZygnQnJvd3NlcjogY2hlY2tQbGF5YmFja0NhcGFiaWxpdGllcygpJylcblxuICAgIHZhciBlcnJcbiAgICB2YXIgbWVzc2FnZVxuXG4gICAgaWYgKCF2aWRlbykge1xuICAgICAgbWVzc2FnZSA9ICdObyBIVE1MNSBzdXBwb3J0IGZvciB2aWRlbyB0YWchJ1xuICAgIH0gZWxzZSBpZiAoIXRoaXMuZ2V0VmlkZW9UeXBlKHZpZGVvKSkge1xuICAgICAgbWVzc2FnZSA9ICdZb3VyIG9sZCBicm93c2VyIGNhbm5vdCBzdXBwb3J0IG1vZGVybiB2aWRlbyBjb2RlY3MnXG4gICAgfSBlbHNlIGlmICghdmlkZW8uc2V0QXR0cmlidXRlKSB7XG4gICAgICAvLyBmaXhlcyBcIk5vdCBpbXBsZW1lbnRlZFwiIGVycm9yIG9uIG9sZGVyIGJyb3dzZXJzXG4gICAgICBtZXNzYWdlID0gJ1VuYWJsZSB0byBzZXQgdmlkZW8gYXR0cmlidXRlcyBpbiB5b3VyIG9sZCBicm93c2VyJ1xuICAgIH1cblxuICAgIGlmIChtZXNzYWdlKSB7XG4gICAgICBlcnIgPSBWaWRlb21haWxFcnJvci5jcmVhdGUobWVzc2FnZSwgZ2V0UGxheWJhY2tXYXJuaW5nKCksIG9wdGlvbnMpXG4gICAgfVxuXG4gICAgcmV0dXJuIGVyclxuICB9XG5cbiAgdGhpcy5jaGVja0J1ZmZlclR5cGVzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlcnJcblxuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2Ygd2luZG93LmF0b2IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBlcnIgPSBWaWRlb21haWxFcnJvci5jcmVhdGUoJ2F0b2IgaXMgbm90IHN1cHBvcnRlZCcsIG9wdGlvbnMpXG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93LkFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZXJyID0gVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdBcnJheUJ1ZmZlcnMgYXJlIG5vdCBzdXBwb3J0ZWQnLCBvcHRpb25zKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdy5VaW50OEFycmF5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZXJyID0gVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdVaW50OEFycmF5cyBhcmUgbm90IHN1cHBvcnRlZCcsIG9wdGlvbnMpXG4gICAgfVxuXG4gICAgcmV0dXJuIGVyclxuICB9XG5cbiAgdGhpcy5nZXRWaWRlb1R5cGUgPSBmdW5jdGlvbiAodmlkZW8pIHtcbiAgICBpZiAoIXZpZGVvVHlwZSkge1xuICAgICAgLy8gdGhlcmUgaXMgYSBidWcgaW4gY2FuUGxheVR5cGUgd2l0aGluIGNocm9tZSBmb3IgbXA0XG4gICAgICBpZiAoY2FuUGxheVR5cGUodmlkZW8sICdtcDQnKSAmJiAhY2hyb21lQmFzZWQpIHtcbiAgICAgICAgdmlkZW9UeXBlID0gJ21wNCdcbiAgICAgIH0gZWxzZSBpZiAoY2FuUGxheVR5cGUodmlkZW8sICd3ZWJtJykpIHtcbiAgICAgICAgdmlkZW9UeXBlID0gJ3dlYm0nXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHZpZGVvVHlwZVxuICB9XG5cbiAgdGhpcy5nZXROb0FjY2Vzc0lzc3VlID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSAnVW5hYmxlIHRvIGFjY2VzcyB3ZWJjYW0nXG4gICAgdmFyIGV4cGxhbmF0aW9uXG5cbiAgICBpZiAodGhpcy5pc0Nocm9tZUJhc2VkKCkpIHtcbiAgICAgIGV4cGxhbmF0aW9uID0gJ0NsaWNrIG9uIHRoZSBhbGxvdyBidXR0b24gdG8gZ3JhbnQgYWNjZXNzIHRvIHlvdXIgd2ViY2FtLidcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNGaXJlZm94KCkpIHtcbiAgICAgIGV4cGxhbmF0aW9uID0gJ1BsZWFzZSBncmFudCBGaXJlZm94IGFjY2VzcyB0byB5b3VyIHdlYmNhbS4nXG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cGxhbmF0aW9uID0gJ1lvdXIgc3lzdGVtIGRvZXMgbm90IGxldCB5b3VyIGJyb3dzZXIgYWNjZXNzIHlvdXIgd2ViY2FtLidcbiAgICB9XG5cbiAgICByZXR1cm4gVmlkZW9tYWlsRXJyb3IuY3JlYXRlKG1lc3NhZ2UsIGV4cGxhbmF0aW9uLCBvcHRpb25zKVxuICB9XG5cbiAgdGhpcy5pc0Nocm9tZUJhc2VkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjaHJvbWVCYXNlZFxuICB9XG5cbiAgdGhpcy5pc0ZpcmVmb3ggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZpcmVmb3hcbiAgfVxuXG4gIHRoaXMuaXNFZGdlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpc0VkZ2VcbiAgfVxuXG4gIHRoaXMuaXNBbmRyb2lkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpc0FuZHJvaWRcbiAgfVxuXG4gIHRoaXMuaXNNb2JpbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVhUGFyc2VyLmRldmljZS50eXBlID09PSAnbW9iaWxlJ1xuICB9XG5cbiAgdGhpcy5pc09rU2FmYXJpID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpc09rU2FmYXJpXG4gIH1cblxuICB0aGlzLmdldFVzZWZ1bERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJyb3dzZXI6IHVhUGFyc2VyLmJyb3dzZXIsXG4gICAgICBkZXZpY2U6IHVhUGFyc2VyLmRldmljZSxcbiAgICAgIG9zOiB1YVBhcnNlci5vcyxcbiAgICAgIGVuZ2luZTogdWFQYXJzZXIuZW5naW5lLFxuICAgICAgdXNlckFnZW50OiB1YVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCcm93c2VyXG5cbi8vIHNvIHRoYXQgd2UgYWxzbyBjYW4gcmVxdWlyZSgpIGl0IGZyb20gdmlkZW9tYWlsRXJyb3IuanMgd2l0aGluXG5tb2R1bGUuZXhwb3J0cyA9IEJyb3dzZXJcbiIsImltcG9ydCB1dGlsIGZyb20gJ3V0aWwnXG5pbXBvcnQgQnJvd3NlciBmcm9tICcuL2Jyb3dzZXInXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChsb2NhbE9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBicm93c2VyID0gbmV3IEJyb3dzZXIobG9jYWxPcHRpb25zKVxuICBjb25zdCBsb2dnZXIgPSBsb2NhbE9wdGlvbnMubG9nZ2VyIHx8IGNvbnNvbGVcbiAgY29uc3QgY29udGFpbmVySWQgPSAobG9jYWxPcHRpb25zLnNlbGVjdG9ycyAmJiBsb2NhbE9wdGlvbnMuc2VsZWN0b3JzLmNvbnRhaW5lcklkKSB8fCAndW5kZWZpbmVkIGNvbnRhaW5lciBpZCdcbiAgY29uc3Qgc3RhY2sgPSBbXVxuXG4gIGZ1bmN0aW9uIGxpZm8gKGxldmVsLCBwYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgbGluZSA9IHV0aWwuZm9ybWF0LmFwcGx5KHV0aWwsIHBhcmFtZXRlcnMpXG5cbiAgICBpZiAoc3RhY2subGVuZ3RoID4gbG9jYWxPcHRpb25zLmxvZ1N0YWNrU2l6ZSkge1xuICAgICAgc3RhY2sucG9wKClcbiAgICB9XG5cbiAgICBzdGFjay5wdXNoKCdbJyArIGxldmVsICsgJ10gJyArIGxpbmUpXG5cbiAgICByZXR1cm4gbGluZVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkQ29udGFpbmVySWQgKGZpcnN0QXJndW1lbnQpIHtcbiAgICByZXR1cm4gJyMnICsgY29udGFpbmVySWQgKyAnIFsnICsgbmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKSArICddID4gJyArIGZpcnN0QXJndW1lbnRcbiAgfVxuXG4gIC8vIHdvcmthcm91bmQ6IHNpbmNlIHdlIGNhbm5vdCBvdmVyd3JpdGUgY29uc29sZS5sb2cgd2l0aG91dCBoYXZpbmcgdGhlIGNvcnJlY3QgZmlsZSBhbmQgbGluZSBudW1iZXJcbiAgLy8gd2UnbGwgdXNlIGdyb3VwQ29sbGFwc2VkKCkgYW5kIHRyYWNlKCkgaW5zdGVhZCB0byBnZXQgdGhlc2UuXG4gIHRoaXMuZGVidWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gYWx3YXlzIGFkZCBpdCBmb3IgYmV0dGVyIGNsaWVudCBlcnJvciByZXBvcnRzXG4gICAgY29uc3QgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKVxuICAgIGFyZ3NbMF0gPSBhZGRDb250YWluZXJJZChhcmdzWzBdKVxuXG4gICAgY29uc3Qgb3V0cHV0ID0gbGlmbygnZGVidWcnLCBhcmdzKVxuXG4gICAgaWYgKGxvY2FsT3B0aW9ucy52ZXJib3NlKSB7XG4gICAgICBpZiAoYnJvd3Nlci5pc0ZpcmVmb3goKSkge1xuICAgICAgICBsb2dnZXIuZGVidWcob3V0cHV0KVxuICAgICAgfSBlbHNlIGlmIChsb2dnZXIuZ3JvdXBDb2xsYXBzZWQpIHtcbiAgICAgICAgbG9nZ2VyLmdyb3VwQ29sbGFwc2VkKG91dHB1dClcbiAgICAgICAgbG9nZ2VyLnRyYWNlKCdUcmFjZScpXG4gICAgICAgIGxvZ2dlci5ncm91cEVuZCgpXG4gICAgICB9IGVsc2UgaWYgKGxvZ2dlci5kZWJ1Zykge1xuICAgICAgICBsb2dnZXIuZGVidWcob3V0cHV0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbGFzdCByZXNvcnQgaWYgZXZlcnl0aGluZyBlbHNlIGZhaWxzIGZvciBhbnkgd2VpcmQgcmVhc29uc1xuICAgICAgICBjb25zb2xlLmxvZyhvdXRwdXQpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApXG4gICAgYXJnc1swXSA9IGFkZENvbnRhaW5lcklkKGFyZ3NbMF0pXG5cbiAgICBsb2dnZXIuZXJyb3IobGlmbygnZXJyb3InLCBhcmdzKSlcbiAgfVxuXG4gIHRoaXMud2FybiA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApXG4gICAgYXJnc1swXSA9IGFkZENvbnRhaW5lcklkKGFyZ3NbMF0pXG5cbiAgICBsb2dnZXIud2FybihsaWZvKCd3YXJuJywgYXJncykpXG4gIH1cblxuICB0aGlzLmdldExpbmVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzdGFja1xuICB9XG59XG4iLCJpbXBvcnQgZGVzcG90IGZyb20gJ2Rlc3BvdCdcblxuaW1wb3J0IFZpZGVvbWFpbEVycm9yIGZyb20gJy4vdmlkZW9tYWlsRXJyb3InXG5pbXBvcnQgRXZlbnRzIGZyb20gJy4vLi4vZXZlbnRzJ1xuXG4vLyBUT0RPOiBNQUtFIEVWRU5UIEVNSVRUSU5HIElOIERFU1BPVCBOT1QgR0xPQkFMIEJVVCBCWSBDT05UQUlORVIgSUQgSU5TVEVBRFxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAob3B0aW9ucywgbmFtZSkge1xuICB0aGlzLmVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBjb25zdCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKVxuXG4gICAgaWYgKCFldmVudCkge1xuICAgICAgdGhyb3cgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdZb3UgY2Fubm90IGVtaXQgd2l0aG91dCBhbiBldmVudC4nLCBvcHRpb25zKVxuICAgIH1cblxuICAgIC8vIEF1dG9tYXRpY2FsbHkgY29udmVydCBlcnJvcnMgdG8gdmlkZW9tYWlsIGVycm9yc1xuICAgIGlmIChldmVudCA9PT0gRXZlbnRzLkVSUk9SKSB7XG4gICAgICB2YXIgZXJyID0gYXJnc1sxXVxuXG4gICAgICBlcnIgPSBWaWRlb21haWxFcnJvci5jcmVhdGUoZXJyLCBvcHRpb25zKVxuXG4gICAgICBhcmdzWzFdID0gZXJyXG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZGVidWcpIHtcbiAgICAgIGlmIChldmVudCAhPT0gJ3JlbW92ZUxpc3RlbmVyJyAmJiBldmVudCAhPT0gJ25ld0xpc3RlbmVyJykge1xuICAgICAgICB2YXIgbW9yZUFyZ3VtZW50c1xuXG4gICAgICAgIGlmIChhcmdzWzFdKSB7XG4gICAgICAgICAgbW9yZUFyZ3VtZW50cyA9IGFyZ3Muc2xpY2UoMSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb3JlQXJndW1lbnRzKSB7XG4gICAgICAgICAgb3B0aW9ucy5kZWJ1ZygnJXMgZW1pdHM6ICVzJywgbmFtZSwgZXZlbnQsIG1vcmVBcmd1bWVudHMpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9ucy5kZWJ1ZygnJXMgZW1pdHM6ICVzJywgbmFtZSwgZXZlbnQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBkZXNwb3QuZW1pdC5hcHBseShkZXNwb3QsIGFyZ3MpXG5cbiAgICAvLyBUb2RvOiBoYXZlIHRoaXMgZW1pdHRlZCB0aHJvdWdoIGEgY29uZmlndXJhdGlvbiBiZWNhdXNlIGl0IGlzIHByZXR0eSBub2lzeVxuICAgIC8vIGlmIChldmVudCAhPT0gRXZlbnRzLkVWRU5UX0VNSVRURUQpXG4gICAgLy8gICAgIHRoaXMuZW1pdChFdmVudHMuRVZFTlRfRU1JVFRFRCwgZXZlbnQpXG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICB0aGlzLm9uID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgY2IpIHtcbiAgICByZXR1cm4gZGVzcG90Lm9uKGV2ZW50TmFtZSwgY2IpXG4gIH1cblxuICB0aGlzLm9uY2UgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYikge1xuICAgIHJldHVybiBkZXNwb3Qub25jZShldmVudE5hbWUsIGNiKVxuICB9XG5cbiAgdGhpcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgcmV0dXJuIGRlc3BvdC5saXN0ZW5lcnMoZXZlbnROYW1lKVxuICB9XG5cbiAgdGhpcy5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGNiKSB7XG4gICAgcmV0dXJuIGRlc3BvdC5yZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIGNiKVxuICB9XG5cbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgZGVzcG90LnJlbW92ZUFsbExpc3RlbmVycygpXG4gIH1cbn1cbiIsImltcG9ydCBmaWxlc2l6ZSBmcm9tICdmaWxlc2l6ZSdcbmltcG9ydCBodW1hbml6ZUR1cmF0aW9uIGZyb20gJ2h1bWFuaXplLWR1cmF0aW9uJ1xuXG4vLyB0b2RvIGdldCByaWQgb2YgdGhpcyBjbGFzcyBhbmQgdXNlIHRob3NlIGltcG9ydHMgZGlyZWN0bHlcblxuZXhwb3J0IGRlZmF1bHQge1xuICBmaWxlc2l6ZTogZnVuY3Rpb24gKGJ5dGVzLCByb3VuZCkge1xuICAgIHJldHVybiBmaWxlc2l6ZShieXRlcywge1xuICAgICAgcm91bmQ6IHJvdW5kXG4gICAgfSlcbiAgfSxcblxuICB0b1RpbWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIGh1bWFuaXplRHVyYXRpb24odClcbiAgfVxufVxuIiwiLy8gdGFrZW4gZnJvbVxuLy8gaHR0cHM6Ly9iYmMuZ2l0aHViLmlvL3RhbC9qc2RvYy9ldmVudHNfbWVkaWFldmVudC5qcy5odG1sXG5cbmV4cG9ydCBkZWZhdWx0IFtcbiAgLy8gVGhlIHVzZXIgYWdlbnQgYmVnaW5zIGxvb2tpbmcgZm9yIG1lZGlhIGRhdGEsIGFzIHBhcnQgb2ZcbiAgLy8gdGhlIHJlc291cmNlIHNlbGVjdGlvbiBhbGdvcml0aG0uXG4gICdsb2Fkc3RhcnQnLFxuXG4gIC8vIFRoZSB1c2VyIGFnZW50IGlzIGludGVudGlvbmFsbHkgbm90IGN1cnJlbnRseSBmZXRjaGluZyBtZWRpYSBkYXRhLFxuICAvLyBidXQgZG9lcyBub3QgaGF2ZSB0aGUgZW50aXJlIG1lZGlhIHJlc291cmNlIGRvd25sb2FkZWQuIG5ldHdvcmtTdGF0ZSBlcXVhbHMgTkVUV09SS19JRExFXG4gICdzdXNwZW5kJyxcblxuICAvLyBQbGF5YmFjayBoYXMgYmVndW4uIEZpcmVkIGFmdGVyIHRoZSBwbGF5KCkgbWV0aG9kIGhhcyByZXR1cm5lZCxcbiAgLy8gb3Igd2hlbiB0aGUgYXV0b3BsYXkgYXR0cmlidXRlIGhhcyBjYXVzZWQgcGxheWJhY2sgdG8gYmVnaW4uXG4gIC8vIHBhdXNlZCBpcyBuZXdseSBmYWxzZS5cbiAgLy8gJ3BsYXknLCBjb21tZW50ZWQgb3V0IHNpbmNlIGl0IGhhcyBzcGVjaWFsIHRyZWF0bWVudFxuXG4gIC8vIFRoZSB1c2VyIGFnZW50IGhhcyBqdXN0IGRldGVybWluZWQgdGhlIGR1cmF0aW9uIGFuZCBkaW1lbnNpb25zIG9mIHRoZVxuICAvLyBtZWRpYSByZXNvdXJjZSBhbmQgdGhlIHRpbWVkIHRyYWNrcyBhcmUgcmVhZHkuXG4gIC8vIHJlYWR5U3RhdGUgaXMgbmV3bHkgZXF1YWwgdG8gSEFWRV9NRVRBREFUQSBvciBncmVhdGVyIGZvciB0aGUgZmlyc3QgdGltZS5cbiAgLy8gJ2xvYWRlZG1ldGFkYXRhJywgY29tbWVudGVkIG91dCBzaW5jZSBpdCBoYXMgc3BlY2lhbCB0cmVhdG1lbnRcblxuICAvLyBUaGUgdXNlciBhZ2VudCBpcyBmZXRjaGluZyBtZWRpYSBkYXRhLlxuICAncHJvZ3Jlc3MnLFxuXG4gIC8vIFRoZSB1c2VyIGFnZW50IGlzIGludGVudGlvbmFsbHkgbm90IGN1cnJlbnRseSBmZXRjaGluZyBtZWRpYSBkYXRhLFxuICAvLyBidXQgZG9lcyBub3QgaGF2ZSB0aGUgZW50aXJlIG1lZGlhIHJlc291cmNlIGRvd25sb2FkZWQuXG4gIC8vICdzdXNwZW5kJywgLy8gY29tbWVudGVkIG91dCwgd2UgYXJlIGFscmVhZHkgbGlzdGVuaW5nIHRvIGl0IGluIGNvZGVcblxuICAvLyBFdmVudCBUaGUgdXNlciBhZ2VudCBzdG9wcyBmZXRjaGluZyB0aGUgbWVkaWEgZGF0YSBiZWZvcmUgaXQgaXMgY29tcGxldGVseSBkb3dubG9hZGVkLFxuICAvLyBidXQgbm90IGR1ZSB0byBhbiBlcnJvci4gIGVycm9yIGlzIGFuIG9iamVjdCB3aXRoIHRoZSBjb2RlIE1FRElBX0VSUl9BQk9SVEVELlxuICAnYWJvcnQnLFxuXG4gIC8vIEEgbWVkaWEgZWxlbWVudCB3aG9zZSBuZXR3b3JrU3RhdGUgd2FzIHByZXZpb3VzbHkgbm90IGluIHRoZSBORVRXT1JLX0VNUFRZXG4gIC8vIHN0YXRlIGhhcyBqdXN0IHN3aXRjaGVkIHRvIHRoYXQgc3RhdGUgKGVpdGhlciBiZWNhdXNlIG9mIGEgZmF0YWwgZXJyb3JcbiAgLy8gZHVyaW5nIGxvYWQgdGhhdCdzIGFib3V0IHRvIGJlIHJlcG9ydGVkLCBvciBiZWNhdXNlIHRoZSBsb2FkKCkgbWV0aG9kIHdhc1xuICAvLyBpbnZva2VkIHdoaWxlIHRoZSByZXNvdXJjZSBzZWxlY3Rpb24gYWxnb3JpdGhtIHdhcyBhbHJlYWR5IHJ1bm5pbmcpLlxuICAnZW1wdGllZCcsXG5cbiAgLy8gVGhlIHVzZXIgYWdlbnQgaXMgdHJ5aW5nIHRvIGZldGNoIG1lZGlhIGRhdGEsIGJ1dCBkYXRhIGlzXG4gIC8vIHVuZXhwZWN0ZWRseSBub3QgZm9ydGhjb21pbmdcbiAgJ3N0YWxsZWQnLFxuXG4gIC8vIFBsYXliYWNrIGhhcyBiZWVuIHBhdXNlZC4gRmlyZWQgYWZ0ZXIgdGhlIHBhdXNlKCkgbWV0aG9kIGhhcyByZXR1cm5lZC5cbiAgLy8gcGF1c2VkIGlzIG5ld2x5IHRydWUuXG4gICdwYXVzZScsXG5cbiAgLy8gVGhlIHVzZXIgYWdlbnQgY2FuIHJlbmRlciB0aGUgbWVkaWEgZGF0YSBhdCB0aGUgY3VycmVudCBwbGF5YmFjayBwb3NpdGlvblxuICAvLyBmb3IgdGhlIGZpcnN0IHRpbWUuXG4gIC8vIHJlYWR5U3RhdGUgbmV3bHkgaW5jcmVhc2VkIHRvIEhBVkVfQ1VSUkVOVF9EQVRBIG9yIGdyZWF0ZXIgZm9yIHRoZSBmaXJzdCB0aW1lLlxuICAnbG9hZGVkZGF0YScsXG5cbiAgLy8gUGxheWJhY2sgaGFzIHN0b3BwZWQgYmVjYXVzZSB0aGUgbmV4dCBmcmFtZSBpcyBub3QgYXZhaWxhYmxlLCBidXQgdGhlIHVzZXJcbiAgLy8gYWdlbnQgZXhwZWN0cyB0aGF0IGZyYW1lIHRvIGJlY29tZSBhdmFpbGFibGUgaW4gZHVlIGNvdXJzZS5cbiAgLy8gcmVhZHlTdGF0ZSBpcyBuZXdseSBlcXVhbCB0byBvciBsZXNzIHRoYW4gSEFWRV9DVVJSRU5UX0RBVEEsXG4gIC8vIGFuZCBwYXVzZWQgaXMgZmFsc2UuIEVpdGhlciBzZWVraW5nIGlzIHRydWUsIG9yIHRoZSBjdXJyZW50IHBsYXliYWNrXG4gIC8vIHBvc2l0aW9uIGlzIG5vdCBjb250YWluZWQgaW4gYW55IG9mIHRoZSByYW5nZXMgaW4gYnVmZmVyZWQuXG4gIC8vIEl0IGlzIHBvc3NpYmxlIGZvciBwbGF5YmFjayB0byBzdG9wIGZvciB0d28gb3RoZXIgcmVhc29ucyB3aXRob3V0XG4gIC8vIHBhdXNlZCBiZWluZyBmYWxzZSwgYnV0IHRob3NlIHR3byByZWFzb25zIGRvIG5vdCBmaXJlIHRoaXMgZXZlbnQ6XG4gIC8vIG1heWJlIHBsYXliYWNrIGVuZGVkLCBvciBwbGF5YmFjayBzdG9wcGVkIGR1ZSB0byBlcnJvcnMuXG4gICd3YWl0aW5nJyxcblxuICAvLyBQbGF5YmFjayBoYXMgc3RhcnRlZC4gcmVhZHlTdGF0ZSBpcyBuZXdseSBlcXVhbCB0byBvciBncmVhdGVyIHRoYW5cbiAgLy8gSEFWRV9GVVRVUkVfREFUQSwgcGF1c2VkIGlzIGZhbHNlLCBzZWVraW5nIGlzIGZhbHNlLFxuICAvLyBvciB0aGUgY3VycmVudCBwbGF5YmFjayBwb3NpdGlvbiBpcyBjb250YWluZWQgaW4gb25lIG9mIHRoZSByYW5nZXMgaW4gYnVmZmVyZWQuXG4gICdwbGF5aW5nJyxcblxuICAvLyBUaGUgdXNlciBhZ2VudCBjYW4gcmVzdW1lIHBsYXliYWNrIG9mIHRoZSBtZWRpYSBkYXRhLFxuICAvLyBidXQgZXN0aW1hdGVzIHRoYXQgaWYgcGxheWJhY2sgd2VyZSB0byBiZSBzdGFydGVkIG5vdywgdGhlIG1lZGlhIHJlc291cmNlXG4gIC8vIGNvdWxkIG5vdCBiZSByZW5kZXJlZCBhdCB0aGUgY3VycmVudCBwbGF5YmFjayByYXRlIHVwIHRvIGl0cyBlbmQgd2l0aG91dFxuICAvLyBoYXZpbmcgdG8gc3RvcCBmb3IgZnVydGhlciBidWZmZXJpbmcgb2YgY29udGVudC5cbiAgLy8gcmVhZHlTdGF0ZSBuZXdseSBpbmNyZWFzZWQgdG8gSEFWRV9GVVRVUkVfREFUQSBvciBncmVhdGVyLlxuICAnY2FucGxheScsXG5cbiAgLy8gVGhlIHVzZXIgYWdlbnQgZXN0aW1hdGVzIHRoYXQgaWYgcGxheWJhY2sgd2VyZSB0byBiZSBzdGFydGVkIG5vdyxcbiAgLy8gdGhlIG1lZGlhIHJlc291cmNlIGNvdWxkIGJlIHJlbmRlcmVkIGF0IHRoZSBjdXJyZW50IHBsYXliYWNrIHJhdGVcbiAgLy8gYWxsIHRoZSB3YXkgdG8gaXRzIGVuZCB3aXRob3V0IGhhdmluZyB0byBzdG9wIGZvciBmdXJ0aGVyIGJ1ZmZlcmluZy5cbiAgLy8gcmVhZHlTdGF0ZSBpcyBuZXdseSBlcXVhbCB0byBIQVZFX0VOT1VHSF9EQVRBLlxuICAnY2FucGxheXRocm91Z2gnLFxuXG4gIC8vIFRoZSBzZWVraW5nIElETCBhdHRyaWJ1dGUgY2hhbmdlZCB0byB0cnVlIGFuZCB0aGUgc2VlayBvcGVyYXRpb24gaXNcbiAgLy8gdGFraW5nIGxvbmcgZW5vdWdoIHRoYXQgdGhlIHVzZXIgYWdlbnQgaGFzIHRpbWUgdG8gZmlyZSB0aGUgZXZlbnQuXG4gICdzZWVraW5nJyxcblxuICAvLyBUaGUgc2Vla2luZyBJREwgYXR0cmlidXRlIGNoYW5nZWQgdG8gZmFsc2UuXG4gICdzZWVrZWQnLFxuXG4gIC8vIFBsYXliYWNrIGhhcyBzdG9wcGVkIGJlY2F1c2UgdGhlIGVuZCBvZiB0aGUgbWVkaWEgcmVzb3VyY2Ugd2FzIHJlYWNoZWQuXG4gIC8vIGN1cnJlbnRUaW1lIGVxdWFscyB0aGUgZW5kIG9mIHRoZSBtZWRpYSByZXNvdXJjZTsgZW5kZWQgaXMgdHJ1ZS5cbiAgJ2VuZGVkJyxcblxuICAvLyBFaXRoZXIgdGhlIGRlZmF1bHRQbGF5YmFja1JhdGUgb3IgdGhlIHBsYXliYWNrUmF0ZSBhdHRyaWJ1dGVcbiAgLy8gaGFzIGp1c3QgYmVlbiB1cGRhdGVkLlxuICAncmF0ZWNoYW5nZScsXG5cbiAgLy8gVGhlIGR1cmF0aW9uIGF0dHJpYnV0ZSBoYXMganVzdCBiZWVuIHVwZGF0ZWQuXG4gICdkdXJhdGlvbmNoYW5nZScsXG5cbiAgLy8gRWl0aGVyIHRoZSB2b2x1bWUgYXR0cmlidXRlIG9yIHRoZSBtdXRlZCBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQuXG4gIC8vIEZpcmVkIGFmdGVyIHRoZSByZWxldmFudCBhdHRyaWJ1dGUncyBzZXR0ZXIgaGFzIHJldHVybmVkLlxuICAndm9sdW1lY2hhbmdlJ1xuXG4gIC8vIGNvbW1lbnRlZCBvdXQsIGhhcHBlbiB0b28gb2Z0ZW5cblxuICAvLyBUaGUgY3VycmVudCBwbGF5YmFjayBwb3NpdGlvbiBjaGFuZ2VkIGFzIHBhcnQgb2Ygbm9ybWFsIHBsYXliYWNrIG9yIGluXG4gIC8vIGFuIGVzcGVjaWFsbHkgaW50ZXJlc3Rpbmcgd2F5LCBmb3IgZXhhbXBsZSBkaXNjb250aW51b3VzbHkuXG4gIC8vICd0aW1ldXBkYXRlJ1xuXVxuIiwiaW1wb3J0IHN0cmluZ2lmeSBmcm9tICdzYWZlLWpzb24tc3RyaW5naWZ5J1xuXG5jb25zdCBEQVNIID0gJy0gJ1xuY29uc3QgU0VQQVJBVE9SID0gJzxici8+JyArIERBU0hcblxuZnVuY3Rpb24gYXJyYXlUb1N0cmluZyAoYXJyYXkpIHtcbiAgaWYgKGFycmF5Lmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBsaW5lcyA9IFtdXG5cbiAgICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICBsaW5lcy5wdXNoKHN0cmluZ2lmeShlbGVtZW50KSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIERBU0ggKyBsaW5lcy5qb2luKFNFUEFSQVRPUilcbiAgfVxufVxuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyAob2JqZWN0LCBvcHRpb25zKSB7XG4gIGNvbnN0IHByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpXG4gIGNvbnN0IGV4Y2x1ZGVzID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5leGNsdWRlcykgfHwgW11cbiAgY29uc3QgbGluZXMgPSBbXVxuICB2YXIgc0xpbmVzXG5cbiAgLy8gYWx3YXlzIGlnbm9yZSB0aGVzZVxuICBleGNsdWRlcy5wdXNoKCdzdGFjaycpXG5cbiAgaWYgKHByb3BlcnR5TmFtZXMubGVuZ3RoID4gMCkge1xuICAgIHZhciBleGNsdWRlID0gZmFsc2VcblxuICAgIHByb3BlcnR5TmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgaWYgKGV4Y2x1ZGVzKSB7XG4gICAgICAgIGV4Y2x1ZGUgPSBleGNsdWRlcy5pbmRleE9mKG5hbWUpID49IDBcbiAgICAgIH1cblxuICAgICAgaWYgKCFleGNsdWRlICYmIG9iamVjdFtuYW1lXSkge1xuICAgICAgICAvLyB0aGlzIHRvIGNvdmVyIHRoaXMgcHJvYmxlbTpcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLWNsaWVudC9pc3N1ZXMvMTU3XG4gICAgICAgIGxpbmVzLnB1c2goc3RyaW5naWZ5KG9iamVjdFtuYW1lXSkpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGlmIChsaW5lcy5sZW5ndGggPT09IDEpIHtcbiAgICBzTGluZXMgPSBsaW5lcy5qb2luKClcbiAgfSBlbHNlIGlmIChsaW5lcy5sZW5ndGggPiAxKSB7XG4gICAgc0xpbmVzID0gREFTSCArIGxpbmVzLmpvaW4oU0VQQVJBVE9SKVxuICB9XG5cbiAgcmV0dXJuIHNMaW5lc1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoYW55dGhpbmcsIG9wdGlvbnMpIHtcbiAgaWYgKGFueXRoaW5nID09PSBudWxsKSB7XG4gICAgcmV0dXJuICdudWxsJ1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhbnl0aGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gJ3VuZGVmaW5lZCdcbiAgfSBlbHNlIGlmICh0eXBlb2YgYW55dGhpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGFueXRoaW5nXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhbnl0aGluZykpIHtcbiAgICByZXR1cm4gYXJyYXlUb1N0cmluZyhhbnl0aGluZylcbiAgfSBlbHNlIGlmICh0eXBlb2YgYW55dGhpbmcgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFueXRoaW5nLCBvcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBhbnl0aGluZy50b1N0cmluZygpXG4gIH1cbn1cbiIsImltcG9ydCAnY2xhc3NsaXN0LmpzJ1xuXG4vLyBuZWVkZWQgZm9yIElFIDExXG5pbXBvcnQgJ2VsZW1lbnQtY2xvc2VzdCdcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2p1bGllbmV0aWUvcmVxdWVzdC1mcmFtZVxuaW1wb3J0IHJlcXVlc3RGcmFtZSBmcm9tICdyZXF1ZXN0LWZyYW1lJ1xuXG4vLyB1c2UgdGhvc2UgZGVmYXVsdCBwYXJhbXMgZm9yIHVuaXQgdGVzdHNcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh3aW5kb3cgPSB7fSwgbmF2aWdhdG9yID0ge30pIHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2p1bGllbmV0aWUvcmVxdWVzdC1mcmFtZS9pc3N1ZXMvNlxuICBpZiAoIXdpbmRvdy5zY3JlZW4pIHtcbiAgICB3aW5kb3cuc2NyZWVuID0ge31cbiAgfVxuXG4gIHJlcXVlc3RGcmFtZSgnbmF0aXZlJylcblxuICAvLyBhdm9pZHMgd2FybmluZyBcIm5hdmlnYXRvci5tb3pHZXRVc2VyTWVkaWEgaGFzIGJlZW4gcmVwbGFjZWQgYnkgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWFcIixcbiAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC1jbGllbnQvaXNzdWVzLzc5XG4gIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKSB7XG4gICAgLy8gZG8gbm90IHNoaW1cbiAgfSBlbHNlIHtcbiAgICBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhXyA9XG4gICAgICAgICAgICBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhIHx8XG4gICAgICAgICAgICBuYXZpZ2F0b3Iud2Via2l0R2V0VXNlck1lZGlhIHx8XG4gICAgICAgICAgICBuYXZpZ2F0b3IubW96R2V0VXNlck1lZGlhIHx8XG4gICAgICAgICAgICBuYXZpZ2F0b3IubXNHZXRVc2VyTWVkaWFcbiAgfVxuXG4gIGlmICghd2luZG93LkF1ZGlvQ29udGV4dCAmJiB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0KSB7XG4gICAgd2luZG93LkF1ZGlvQ29udGV4dCA9IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHRcbiAgfVxuXG4gIGlmICghd2luZG93LlVSTCkge1xuICAgIHdpbmRvdy5VUkwgPSB3aW5kb3cud2Via2l0VVJMIHx8IHdpbmRvdy5tb3pVUkwgfHwgd2luZG93Lm1zVVJMXG4gIH1cblxuICBjb25zdCBtZXRob2RzID0gW1xuICAgICdkZWJ1ZycsICdncm91cENvbGxhcHNlZCcsICdncm91cEVuZCcsICdlcnJvcicsXG4gICAgJ2V4Y2VwdGlvbicsICdpbmZvJywgJ2xvZycsICd0cmFjZScsICd3YXJuJ1xuICBdXG5cbiAgdmFyIGNvbnNvbGUgPSB7fVxuXG4gIGlmICh3aW5kb3cuY29uc29sZSkge1xuICAgIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZVxuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5jb25zb2xlID0gZnVuY3Rpb24gKCkge31cbiAgfVxuXG4gIHZhciBtZXRob2RcbiAgdmFyIGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoXG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgbWV0aG9kID0gbWV0aG9kc1tsZW5ndGhdXG5cbiAgICBpZiAoIWNvbnNvbGVbbWV0aG9kXSkge1xuICAgICAgY29uc29sZVttZXRob2RdID0gZnVuY3Rpb24gKCkge31cbiAgICB9XG4gIH1cbn1cbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90Z3JpZXNzZXIvY3JlYXRlLWVycm9yXG5pbXBvcnQgY3JlYXRlRXJyb3IgZnJvbSAnY3JlYXRlLWVycm9yJ1xuaW1wb3J0IHV0aWwgZnJvbSAndXRpbCdcblxuaW1wb3J0IG9yaWdpbmFsUHJldHR5IGZyb20gJy4vcHJldHR5J1xuaW1wb3J0IFJlc291cmNlIGZyb20gJy4vLi4vcmVzb3VyY2UnXG5cbmNvbnN0IFZJREVPTUFJTF9FUlJfTkFNRSA9ICdWaWRlb21haWwgRXJyb3InXG5cbmNvbnN0IFZpZGVvbWFpbEVycm9yID0gY3JlYXRlRXJyb3IoRXJyb3IsIFZJREVPTUFJTF9FUlJfTkFNRSwge1xuICAnZXhwbGFuYXRpb24nOiB1bmRlZmluZWQsXG4gICdsb2dMaW5lcyc6IHVuZGVmaW5lZCxcbiAgJ3VzZXJhZ2VudCc6IHVuZGVmaW5lZCxcbiAgJ3VybCc6IHVuZGVmaW5lZCxcbiAgJ3N0YWNrJzogdW5kZWZpbmVkXG59KVxuXG4vLyBzaGltIHByZXR0eSB0byBleGNsdWRlIHN0YWNrIGFsd2F5c1xuY29uc3QgcHJldHR5ID0gZnVuY3Rpb24gKGFueXRoaW5nKSB7XG4gIHJldHVybiBvcmlnaW5hbFByZXR0eShhbnl0aGluZywgeyBleGNsdWRlczogWydzdGFjayddIH0pXG59XG5cbi8vIHN0YXRpYyBhbmQgcHVibGljIGF0dHJpYnV0ZSBvZiB0aGlzIGNsYXNzXG5WaWRlb21haWxFcnJvci5QRVJNSVNTSU9OX0RFTklFRCA9ICdQRVJNSVNTSU9OX0RFTklFRCdcblZpZGVvbWFpbEVycm9yLk5PVF9BTExPV0VEX0VSUk9SID0gJ05vdEFsbG93ZWRFcnJvcidcblZpZGVvbWFpbEVycm9yLk5PVF9DT05ORUNURUQgPSAnTm90IGNvbm5lY3RlZCdcblZpZGVvbWFpbEVycm9yLkRPTV9FWENFUFRJT04gPSAnRE9NRXhjZXB0aW9uJ1xuVmlkZW9tYWlsRXJyb3IuU1RBUlRJTkdfRkFJTEVEID0gJ1N0YXJ0aW5nIHZpZGVvIGZhaWxlZCdcblZpZGVvbWFpbEVycm9yLk1FRElBX0RFVklDRV9OT1RfU1VQUE9SVEVEID0gJ01lZGlhRGV2aWNlTm90U3VwcG9ydGVkJ1xuVmlkZW9tYWlsRXJyb3IuQlJPV1NFUl9QUk9CTEVNID0gJ2Jyb3dzZXItcHJvYmxlbSdcblZpZGVvbWFpbEVycm9yLldFQkNBTV9QUk9CTEVNID0gJ3dlYmNhbS1wcm9ibGVtJ1xuVmlkZW9tYWlsRXJyb3IuSU9TX1BST0JMRU0gPSAnaW9zLXByb2JsZW0nXG5WaWRlb21haWxFcnJvci5PVkVSQ09OU1RSQUlORUQgPSAnT3ZlcmNvbnN0cmFpbmVkRXJyb3InXG5WaWRlb21haWxFcnJvci5OT1RfRk9VTkRfRVJST1IgPSAnTm90Rm91bmRFcnJvcidcblZpZGVvbWFpbEVycm9yLk5PVF9SRUFEQUJMRV9FUlJPUiA9ICdOb3RSZWFkYWJsZUVycm9yJ1xuVmlkZW9tYWlsRXJyb3IuU0VDVVJJVFlfRVJST1IgPSAnU2VjdXJpdHlFcnJvcidcblZpZGVvbWFpbEVycm9yLlRSQUNLX1NUQVJUX0VSUk9SID0gJ1RyYWNrU3RhcnRFcnJvcidcblZpZGVvbWFpbEVycm9yLklOVkFMSURfU1RBVEVfRVJST1IgPSAnSW52YWxpZFN0YXRlRXJyb3InXG5cbi8vIHN0YXRpYyBmdW5jdGlvbiB0byBjb252ZXJ0IGFuIGVycm9yIGludG8gYSB2aWRlb21haWwgZXJyb3JcblZpZGVvbWFpbEVycm9yLmNyZWF0ZSA9IGZ1bmN0aW9uIChlcnIsIGV4cGxhbmF0aW9uLCBvcHRpb25zLCBwYXJhbWV0ZXJzKSB7XG4gIGlmIChlcnIgJiYgZXJyLm5hbWUgPT09IFZJREVPTUFJTF9FUlJfTkFNRSkge1xuICAgIHJldHVybiBlcnJcbiAgfVxuXG4gIGlmICghb3B0aW9ucyAmJiBleHBsYW5hdGlvbikge1xuICAgIG9wdGlvbnMgPSBleHBsYW5hdGlvblxuICAgIGV4cGxhbmF0aW9uID0gdW5kZWZpbmVkXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICBwYXJhbWV0ZXJzID0gcGFyYW1ldGVycyB8fCB7fVxuXG4gIC8vIGJlIHN1cGVyIHJvYnVzdFxuICBjb25zdCBkZWJ1ZyA9IChvcHRpb25zICYmIG9wdGlvbnMuZGVidWcpIHx8IGNvbnNvbGUubG9nXG4gIGNvbnN0IGF1ZGlvRW5hYmxlZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5pc0F1ZGlvRW5hYmxlZCAmJiBvcHRpb25zLmlzQXVkaW9FbmFibGVkKClcblxuICBkZWJ1ZygnVmlkZW9tYWlsRXJyb3I6IGNyZWF0ZSgpJywgZXJyLCBleHBsYW5hdGlvbilcblxuICBjb25zdCBjbGFzc0xpc3QgPSBwYXJhbWV0ZXJzLmNsYXNzTGlzdCB8fCBbXVxuXG4gIC8vIFJlcXVpcmUgQnJvd3NlciBoZXJlLCBub3QgYXQgdGhlIHRvcCBvZiB0aGUgZmlsZSB0byBhdm9pZFxuICAvLyByZWN1cnNpb24uIEJlY2F1c2UgdGhlIEJyb3dzZXIgY2xhc3MgaXMgcmVxdWlyaW5nIHRoaXMgZmlsZSBhcyB3ZWxsLlxuICBjb25zdCBCcm93c2VyID0gcmVxdWlyZSgnLi9icm93c2VyJylcbiAgY29uc3QgYnJvd3NlciA9IG5ldyBCcm93c2VyKG9wdGlvbnMpXG5cbiAgdmFyIGVyclR5cGVcbiAgdmFyIG1lc3NhZ2VcbiAgdmFyIHN0YWNrXG5cbiAgLy8gd2hvbGUgY29kZSBpcyB1Z2x5IGJlY2F1c2UgYWxsIGJyb3dzZXJzIGJlaGF2ZSBzbyBkaWZmZXJlbnRseSA6KFxuXG4gIGlmICh0eXBlb2YgZXJyID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChlcnIubmFtZSA9PT0gVmlkZW9tYWlsRXJyb3IuVFJBQ0tfU1RBUlRfRVJST1IpIHtcbiAgICAgIGVyclR5cGUgPSBWaWRlb21haWxFcnJvci5UUkFDS19TVEFSVF9FUlJPUlxuICAgIH0gZWxzZSBpZiAoZXJyLm5hbWUgPT09IFZpZGVvbWFpbEVycm9yLlNFQ1VSSVRZX0VSUk9SKSB7XG4gICAgICBlcnJUeXBlID0gVmlkZW9tYWlsRXJyb3IuU0VDVVJJVFlfRVJST1JcbiAgICB9IGVsc2UgaWYgKGVyci5jb2RlID09PSA4ICYmIGVyci5uYW1lID09PSBWaWRlb21haWxFcnJvci5Ob3RGb3VuZEVycm9yKSB7XG4gICAgICBlcnJUeXBlID0gVmlkZW9tYWlsRXJyb3IuTm90Rm91bmRFcnJvclxuICAgIH0gZWxzZSBpZiAoZXJyLmNvZGUgPT09IDM1IHx8IGVyci5uYW1lID09PSBWaWRlb21haWxFcnJvci5OT1RfQUxMT1dFRF9FUlJPUikge1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLmlvL2lzc3Vlcy80MTFcbiAgICAgIGVyclR5cGUgPSBWaWRlb21haWxFcnJvci5OT1RfQUxMT1dFRF9FUlJPUlxuICAgIH0gZWxzZSBpZiAoZXJyLmNvZGUgPT09IDEgJiYgZXJyLlBFUk1JU1NJT05fREVOSUVEID09PSAxKSB7XG4gICAgICBlcnJUeXBlID0gVmlkZW9tYWlsRXJyb3IuUEVSTUlTU0lPTl9ERU5JRURcbiAgICB9IGVsc2UgaWYgKGVyci5jb25zdHJ1Y3RvciAmJiBlcnIuY29uc3RydWN0b3IubmFtZSA9PT0gVmlkZW9tYWlsRXJyb3IuRE9NX0VYQ0VQVElPTikge1xuICAgICAgaWYgKGVyci5uYW1lID09PSBWaWRlb21haWxFcnJvci5OT1RfUkVBREFCTEVfRVJST1IpIHtcbiAgICAgICAgZXJyVHlwZSA9IFZpZGVvbWFpbEVycm9yLk5PVF9SRUFEQUJMRV9FUlJPUlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyVHlwZSA9IFZpZGVvbWFpbEVycm9yLkRPTV9FWENFUFRJT05cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVyci5jb25zdHJ1Y3RvciAmJiBlcnIuY29uc3RydWN0b3IubmFtZSA9PT0gVmlkZW9tYWlsRXJyb3IuT1ZFUkNPTlNUUkFJTkVEKSB7XG4gICAgICBlcnJUeXBlID0gVmlkZW9tYWlsRXJyb3IuT1ZFUkNPTlNUUkFJTkVEXG4gICAgfSBlbHNlIGlmIChlcnIubWVzc2FnZSA9PT0gVmlkZW9tYWlsRXJyb3IuU1RBUlRJTkdfRkFJTEVEKSB7XG4gICAgICBlcnJUeXBlID0gZXJyLm1lc3NhZ2VcbiAgICB9IGVsc2UgaWYgKGVyci5uYW1lKSB7XG4gICAgICBlcnJUeXBlID0gZXJyLm5hbWVcbiAgICB9IGVsc2UgaWYgKGVyci50eXBlID09PSAnZXJyb3InICYmIGVyci50YXJnZXQuYnVmZmVyZWRBbW91bnQgPT09IDApIHtcbiAgICAgIGVyclR5cGUgPSBWaWRlb21haWxFcnJvci5OT1RfQ09OTkVDVEVEXG4gICAgfVxuICB9IGVsc2UgaWYgKGVyciA9PT0gVmlkZW9tYWlsRXJyb3IuTk9UX0NPTk5FQ1RFRCkge1xuICAgIGVyclR5cGUgPSBWaWRlb21haWxFcnJvci5OT1RfQ09OTkVDVEVEXG4gIH0gZWxzZSB7XG4gICAgZXJyVHlwZSA9IGVyclxuICB9XG5cbiAgaWYgKGVyciAmJiBlcnIuc3RhY2spIHtcbiAgICBzdGFjayA9IGVyci5zdGFja1xuICB9IGVsc2Uge1xuICAgIHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2tcbiAgfVxuXG4gIHN3aXRjaCAoZXJyVHlwZSkge1xuICAgIGNhc2UgVmlkZW9tYWlsRXJyb3IuU0VDVVJJVFlfRVJST1I6XG4gICAgICBtZXNzYWdlID0gJ1RoZSBvcGVyYXRpb24gd2FzIGluc2VjdXJlJ1xuICAgICAgZXhwbGFuYXRpb24gPSAnUHJvYmFibHkgeW91IGhhdmUgZGlzYWxsb3dlZCBDb29raWVzIGZvciB0aGlzIHBhZ2U/J1xuICAgICAgY2xhc3NMaXN0LnB1c2goVmlkZW9tYWlsRXJyb3IuQlJPV1NFUl9QUk9CTEVNKVxuICAgICAgYnJlYWtcbiAgICBjYXNlIFZpZGVvbWFpbEVycm9yLk9WRVJDT05TVFJBSU5FRDpcbiAgICAgIG1lc3NhZ2UgPSAnSW52YWxpZCB3ZWJjYW0gY29uc3RyYWludHMnXG5cbiAgICAgIGlmIChlcnIuY29uc3RyYWludCkge1xuICAgICAgICBpZiAoZXJyLmNvbnN0cmFpbnQgPT09ICd3aWR0aCcpIHtcbiAgICAgICAgICBleHBsYW5hdGlvbiA9ICdZb3VyIHdlYmNhbSBkb2VzIG5vdCBtZWV0IHRoZSB3aWR0aCByZXF1aXJlbWVudC4nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXhwbGFuYXRpb24gPSAnVW5tZXQgY29uc3RyYWludDogJyArIGVyci5jb25zdHJhaW50XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4cGxhbmF0aW9uID0gJyBEZXRhaWxzOiAnICsgZXJyLnRvU3RyaW5nKClcbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnTWVkaWFEZXZpY2VGYWlsZWREdWVUb1NodXRkb3duJzpcbiAgICAgIG1lc3NhZ2UgPSAnV2ViY2FtIGlzIHNodXR0aW5nIGRvd24nXG4gICAgICBleHBsYW5hdGlvbiA9ICdUaGlzIGhhcHBlbnMgeW91ciB3ZWJjYW0gaXMgYWxyZWFkeSBzd2l0Y2hpbmcgb2ZmIGFuZCBub3QgZ2l2aW5nIHlvdSBwZXJtaXNzaW9uIHRvIHVzZSBpdC4nXG4gICAgICBicmVha1xuICAgIGNhc2UgJ1NvdXJjZVVuYXZhaWxhYmxlRXJyb3InOlxuICAgICAgbWVzc2FnZSA9ICdTb3VyY2Ugb2YgeW91ciB3ZWJjYW0gY2Fubm90IGJlIGFjY2Vzc2VkJ1xuICAgICAgZXhwbGFuYXRpb24gPSAnUHJvYmFibHkgaXQgaXMgbG9ja2VkIGZyb20gYW5vdGhlciBwcm9jZXNzIG9yIGhhcyBhIGhhcmR3YXJlIGVycm9yLidcblxuICAgICAgaWYgKGVyci5tZXNzYWdlKSB7XG4gICAgICAgIGVyci5tZXNzYWdlICs9ICcgRGV0YWlsczogJyArIGVyci5tZXNzYWdlXG4gICAgICB9XG5cbiAgICAgIGJyZWFrXG4gICAgY2FzZSBWaWRlb21haWxFcnJvci5OT1RfRk9VTkRfRVJST1I6XG4gICAgY2FzZSAnTk9fREVWSUNFU19GT1VORCc6XG4gICAgICBpZiAoYXVkaW9FbmFibGVkKSB7XG4gICAgICAgIG1lc3NhZ2UgPSAnTm8gd2ViY2FtIG5vciBtaWNyb3Bob25lIGZvdW5kJ1xuICAgICAgICBleHBsYW5hdGlvbiA9ICdZb3VyIGJyb3dzZXIgY2Fubm90IGZpbmQgYSB3ZWJjYW0gd2l0aCBtaWNyb3Bob25lIGF0dGFjaGVkIHRvIHlvdXIgbWFjaGluZS4nXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlID0gJ05vIHdlYmNhbSBmb3VuZCdcbiAgICAgICAgZXhwbGFuYXRpb24gPSAnWW91ciBicm93c2VyIGNhbm5vdCBmaW5kIGEgd2ViY2FtIGF0dGFjaGVkIHRvIHlvdXIgbWFjaGluZS4nXG4gICAgICB9XG5cbiAgICAgIGNsYXNzTGlzdC5wdXNoKFZpZGVvbWFpbEVycm9yLldFQkNBTV9QUk9CTEVNKVxuICAgICAgYnJlYWtcblxuICAgIGNhc2UgJ1Blcm1pc3Npb25EaXNtaXNzZWRFcnJvcic6XG4gICAgICBtZXNzYWdlID0gJ09vb3BzLCB5b3UgZGlkblxcJ3QgZ2l2ZSBtZSBhbnkgcGVybWlzc2lvbnM/J1xuICAgICAgZXhwbGFuYXRpb24gPSAnTG9va3MgbGlrZSB5b3Ugc2tpcHBlZCB0aGUgd2ViY2FtIHBlcm1pc3Npb24gZGlhbG9ndWUuPGJyLz4nICtcbiAgICAgICAgICAgICAgICAgICAgJ1BsZWFzZSBncmFudCBhY2Nlc3MgbmV4dCB0aW1lIHRoZSBkaWFsb2d1ZSBhcHBlYXJzLidcbiAgICAgIGNsYXNzTGlzdC5wdXNoKFZpZGVvbWFpbEVycm9yLldFQkNBTV9QUk9CTEVNKVxuICAgICAgYnJlYWtcblxuICAgIGNhc2UgVmlkZW9tYWlsRXJyb3IuTk9UX0FMTE9XRURfRVJST1I6XG4gICAgY2FzZSBWaWRlb21haWxFcnJvci5QRVJNSVNTSU9OX0RFTklFRDpcbiAgICBjYXNlICdQZXJtaXNzaW9uRGVuaWVkRXJyb3InOlxuICAgICAgbWVzc2FnZSA9ICdQZXJtaXNzaW9uIGRlbmllZCdcblxuICAgICAgZXhwbGFuYXRpb24gPSAnQ2Fubm90IGFjY2VzcyB5b3VyIHdlYmNhbS4gVGhpcyBjYW4gaGF2ZSB0d28gcmVhc29uczo8YnIvPicgK1xuICAgICAgICAgICAgICAgICAgICAnYSkgeW91IGJsb2NrZWQgYWNjZXNzIHRvIHdlYmNhbTsgb3I8YnIvPicgK1xuICAgICAgICAgICAgICAgICAgICAnYikgeW91ciB3ZWJjYW0gaXMgYWxyZWFkeSBpbiB1c2UuJ1xuXG4gICAgICBjbGFzc0xpc3QucHVzaChWaWRlb21haWxFcnJvci5XRUJDQU1fUFJPQkxFTSlcblxuICAgICAgYnJlYWtcblxuICAgIGNhc2UgJ0hBUkRXQVJFX1VOQVZBSUxBQkxFJzpcbiAgICAgIG1lc3NhZ2UgPSAnV2ViY2FtIGlzIHVuYXZhaWxhYmxlJ1xuICAgICAgZXhwbGFuYXRpb24gPSAnTWF5YmUgaXQgaXMgYWxyZWFkeSBidXN5IGluIGFub3RoZXIgd2luZG93PydcblxuICAgICAgaWYgKGJyb3dzZXIuaXNDaHJvbWVCYXNlZCgpKSB7XG4gICAgICAgIGV4cGxhbmF0aW9uICs9ICcgT3IgeW91IGhhdmUgdG8gYWxsb3cgYWNjZXNzIGFib3ZlPydcbiAgICAgIH1cblxuICAgICAgY2xhc3NMaXN0LnB1c2goVmlkZW9tYWlsRXJyb3IuV0VCQ0FNX1BST0JMRU0pXG5cbiAgICAgIGJyZWFrXG5cbiAgICBjYXNlIFZpZGVvbWFpbEVycm9yLk5PVF9DT05ORUNURUQ6XG4gICAgICBtZXNzYWdlID0gJ1VuYWJsZSB0byBjb25uZWN0J1xuICAgICAgZXhwbGFuYXRpb24gPSAnRWl0aGVyIHRoZSB2aWRlb21haWwgc2VydmVyIG9yIHlvdXIgY29ubmVjdGlvbiBpcyBkb3duLiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ1RyeWluZyB0byByZWNvbm5lY3QgZXZlcnkgZmV3IHNlY29uZHMg4oCmJ1xuICAgICAgYnJlYWtcblxuICAgIGNhc2UgJ05PX1ZJREVPX0ZFRUQnOlxuICAgICAgbWVzc2FnZSA9ICdObyB2aWRlbyBmZWVkIGZvdW5kISdcbiAgICAgIGV4cGxhbmF0aW9uID0gJ1lvdXIgd2ViY2FtIGlzIGFscmVhZHkgdXNlZCBpbiBhbm90aGVyIGJyb3dzZXIuJ1xuICAgICAgY2xhc3NMaXN0LnB1c2goVmlkZW9tYWlsRXJyb3IuV0VCQ0FNX1BST0JMRU0pXG4gICAgICBicmVha1xuXG4gICAgY2FzZSBWaWRlb21haWxFcnJvci5TVEFSVElOR19GQUlMRUQ6XG4gICAgICBtZXNzYWdlID0gJ1N0YXJ0aW5nIHZpZGVvIGZhaWxlZCdcbiAgICAgIGV4cGxhbmF0aW9uID0gJ01vc3QgbGlrZWx5IHRoaXMgaGFwcGVucyB3aGVuIHRoZSB3ZWJhbSBpcyBhbHJlYWR5IGFjdGl2ZSBpbiBhbm90aGVyIGJyb3dzZXIuJ1xuICAgICAgY2xhc3NMaXN0LnB1c2goVmlkZW9tYWlsRXJyb3IuV0VCQ0FNX1BST0JMRU0pXG4gICAgICBicmVha1xuXG4gICAgY2FzZSAnRGV2aWNlc05vdEZvdW5kRXJyb3InOlxuICAgICAgbWVzc2FnZSA9ICdObyBhdmFpbGFibGUgd2ViY2FtIGNvdWxkIGJlIGZvdW5kJ1xuICAgICAgZXhwbGFuYXRpb24gPSAnTG9va3MgbGlrZSB5b3UgZG8gbm90IGhhdmUgYW55IHdlYmNhbSBhdHRhY2hlZCB0byB5b3VyIG1hY2hpbmU7IG9yICcgK1xuICAgICAgICAgICAgICAgICAgICAndGhlIG9uZSB5b3UgcGx1Z2dlZCBpbiBpcyBhbHJlYWR5IHVzZWQuJ1xuICAgICAgY2xhc3NMaXN0LnB1c2goVmlkZW9tYWlsRXJyb3IuV0VCQ0FNX1BST0JMRU0pXG4gICAgICBicmVha1xuXG4gICAgY2FzZSBWaWRlb21haWxFcnJvci5OT1RfUkVBREFCTEVfRVJST1I6XG4gICAgY2FzZSBWaWRlb21haWxFcnJvci5UUkFDS19TVEFSVF9FUlJPUjpcbiAgICAgIG1lc3NhZ2UgPSAnTm8gYWNjZXNzIHRvIHdlYmNhbSdcbiAgICAgIGV4cGxhbmF0aW9uID0gJ0EgaGFyZHdhcmUgZXJyb3Igb2NjdXJyZWQgd2hpY2ggcHJldmVudGVkIGFjY2VzcyB0byB5b3VyIHdlYmNhbS4nXG4gICAgICBjbGFzc0xpc3QucHVzaChWaWRlb21haWxFcnJvci5XRUJDQU1fUFJPQkxFTSlcbiAgICAgIGJyZWFrXG5cbiAgICBjYXNlIFZpZGVvbWFpbEVycm9yLklOVkFMSURfU1RBVEVfRVJST1I6XG4gICAgICBtZXNzYWdlID0gJ0ludmFsaWQgc3RhdGUnXG4gICAgICBleHBsYW5hdGlvbiA9ICdWaWRlbyByZWNvcmRpbmcgc3RyZWFtIGZyb20geW91ciB3ZWJjYW0gYWxyZWFkeSBoYXMgZmluaXNoZWQuJ1xuICAgICAgY2xhc3NMaXN0LnB1c2goVmlkZW9tYWlsRXJyb3IuV0VCQ0FNX1BST0JMRU0pXG4gICAgICBicmVha1xuXG4gICAgY2FzZSBWaWRlb21haWxFcnJvci5ET01fRVhDRVBUSU9OOlxuICAgICAgc3dpdGNoIChlcnIuY29kZSkge1xuICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgbWVzc2FnZSA9ICdSZXF1ZXN0ZWQgd2ViY2FtIG5vdCBmb3VuZCdcbiAgICAgICAgICBleHBsYW5hdGlvbiA9ICdBIHdlYmNhbSBpcyBuZWVkZWQgYnV0IGNvdWxkIG5vdCBiZSBmb3VuZC4nXG4gICAgICAgICAgY2xhc3NMaXN0LnB1c2goVmlkZW9tYWlsRXJyb3IuV0VCQ0FNX1BST0JMRU0pXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA5OlxuICAgICAgICAgIGNvbnN0IG5ld1VybCA9ICdodHRwczonICsgd2luZG93LmxvY2F0aW9uLmhyZWYuc3Vic3RyaW5nKHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbC5sZW5ndGgpXG4gICAgICAgICAgbWVzc2FnZSA9ICdTZWN1cml0eSB1cGdyYWRlIG5lZWRlZCdcbiAgICAgICAgICBleHBsYW5hdGlvbiA9ICdDbGljayA8YSBocmVmPVwiJyArIG5ld1VybCArICdcIj5oZXJlPC9hPiB0byBzd2l0Y2ggdG8gSFRUUHMgd2hpY2ggaXMgbW9yZSBzYWZlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyBhbmQgZW5hYmxlcyBlbmNyeXB0ZWQgdmlkZW9tYWlsIHRyYW5zZmVycy4nXG4gICAgICAgICAgY2xhc3NMaXN0LnB1c2goVmlkZW9tYWlsRXJyb3IuQlJPV1NFUl9QUk9CTEVNKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgbWVzc2FnZSA9ICdJbnZhbGlkIFN0YXRlJ1xuICAgICAgICAgIGV4cGxhbmF0aW9uID0gJ1RoZSBvYmplY3QgaXMgaW4gYW4gaW52YWxpZCwgdW51c2FibGUgc3RhdGUuJ1xuICAgICAgICAgIGNsYXNzTGlzdC5wdXNoKFZpZGVvbWFpbEVycm9yLkJST1dTRVJfUFJPQkxFTSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIG1lc3NhZ2UgPSAnRE9NIEV4Y2VwdGlvbidcbiAgICAgICAgICBleHBsYW5hdGlvbiA9IHByZXR0eShlcnIpXG4gICAgICAgICAgY2xhc3NMaXN0LnB1c2goVmlkZW9tYWlsRXJyb3IuQlJPV1NFUl9QUk9CTEVNKVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBicmVha1xuXG4gICAgLy8gQ2hyb21lIGhhcyBhIHdlaXJkIHByb2JsZW0gd2hlcmUgaWYgeW91IHRyeSB0byBkbyBhIGdldFVzZXJNZWRpYSByZXF1ZXN0IHRvbyBlYXJseSwgaXRcbiAgICAvLyBjYW4gcmV0dXJuIGEgTWVkaWFEZXZpY2VOb3RTdXBwb3J0ZWQgZXJyb3IgKGV2ZW4gdGhvdWdoIG5vdGhpbmcgaXMgd3JvbmcgYW5kIHBlcm1pc3Npb25cbiAgICAvLyBoYXMgYmVlbiBncmFudGVkKS4gTG9vayBhdCB1c2VyTWVkaWFFcnJvckNhbGxiYWNrKCkgaW4gcmVjb3JkZXIsIHRoZXJlIHdlIGRvIG5vdFxuICAgIC8vIGVtaXQgdGhvc2Uga2luZCBvZiBlcnJvcnMgZnVydGhlciBhbmQganVzdCByZXRyeS5cbiAgICAvL1xuICAgIC8vIGJ1dCBmb3Igd2hhdGV2ZXIgcmVhc29ucywgaWYgaXQgaGFwcGVucyB0byByZWFjaCB0aGlzIGNvZGUsIHRoZW4gaW52ZXN0aWdhdGUgdGhpcyBmdXJ0aGVyLlxuICAgIGNhc2UgVmlkZW9tYWlsRXJyb3IuTUVESUFfREVWSUNFX05PVF9TVVBQT1JURUQ6XG4gICAgICBtZXNzYWdlID0gJ01lZGlhIGRldmljZSBub3Qgc3VwcG9ydGVkJ1xuICAgICAgZXhwbGFuYXRpb24gPSBwcmV0dHkoZXJyKVxuICAgICAgYnJlYWtcblxuICAgIGRlZmF1bHQ6XG4gICAgICBjb25zdCBvcmlnaW5hbEV4cGxhbmF0aW9uID0gZXhwbGFuYXRpb25cblxuICAgICAgaWYgKGV4cGxhbmF0aW9uICYmIHR5cGVvZiBleHBsYW5hdGlvbiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZXhwbGFuYXRpb24gPSBwcmV0dHkoZXhwbGFuYXRpb24pXG4gICAgICB9XG5cbiAgICAgIC8vIGl0IGNhbiBiZSB0aGF0IGV4cGxhbmF0aW9uIGl0c2VsZiBpcyBhbiBlcnJvciBvYmplY3RcbiAgICAgIC8vIGVycm9yIG9iamVjdHMgY2FuIGJlIHByZXR0aWZpZWQgdG8gdW5kZWZpbmVkIHNvbWV0aW1lc1xuICAgICAgaWYgKCFleHBsYW5hdGlvbiAmJiBvcmlnaW5hbEV4cGxhbmF0aW9uKSB7XG4gICAgICAgIGlmIChvcmlnaW5hbEV4cGxhbmF0aW9uLm1lc3NhZ2UpIHtcbiAgICAgICAgICBleHBsYW5hdGlvbiA9IG9yaWdpbmFsRXhwbGFuYXRpb24ubWVzc2FnZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHRyaWVkIHRvU3RyaW5nIGJlZm9yZSBidXQgbmFoXG4gICAgICAgICAgZXhwbGFuYXRpb24gPSAnSW5zcGVjdGVkOiAnICsgdXRpbC5pbnNwZWN0KG9yaWdpbmFsRXhwbGFuYXRpb24sIHtcbiAgICAgICAgICAgIHNob3dIaWRkZW46IHRydWVcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlcnIgJiYgdHlwZW9mIGVyciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWVzc2FnZSA9IGVyclxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGVyciAmJiBlcnIubWVzc2FnZSkge1xuICAgICAgICAgIG1lc3NhZ2UgPSBwcmV0dHkoZXJyLm1lc3NhZ2UpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXJyICYmIGVyci5leHBsYW5hdGlvbikge1xuICAgICAgICAgIGlmICghZXhwbGFuYXRpb24pIHtcbiAgICAgICAgICAgIGV4cGxhbmF0aW9uID0gcHJldHR5KGVyci5leHBsYW5hdGlvbilcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXhwbGFuYXRpb24gKz0gJzs8YnIvPicgKyBwcmV0dHkoZXJyLmV4cGxhbmF0aW9uKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnIgJiYgZXJyLmRldGFpbHMpIHtcbiAgICAgICAgICB2YXIgZGV0YWlscyA9IHByZXR0eShlcnIuZGV0YWlscylcblxuICAgICAgICAgIGlmICghZXhwbGFuYXRpb24pIHtcbiAgICAgICAgICAgIGV4cGxhbmF0aW9uID0gZGV0YWlsc1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleHBsYW5hdGlvbiArPSAnOzxici8+JyArIGRldGFpbHNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gZm9yIHdlaXJkLCB1bmRlZmluZWQgY2FzZXNcbiAgICAgIGlmICghbWVzc2FnZSkge1xuICAgICAgICBpZiAoZXJyVHlwZSkge1xuICAgICAgICAgIG1lc3NhZ2UgPSBlcnJUeXBlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWV4cGxhbmF0aW9uICYmIGVycikge1xuICAgICAgICAgIGV4cGxhbmF0aW9uID0gcHJldHR5KGVyciwgeyBleGNsdWRlczogWydzdGFjayddIH0pXG4gICAgICAgIH1cblxuICAgICAgICAvLyBhdm9pZCBkdXBlc1xuICAgICAgICBpZiAocHJldHR5KG1lc3NhZ2UpID09PSBleHBsYW5hdGlvbikge1xuICAgICAgICAgIGV4cGxhbmF0aW9uID0gdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYnJlYWtcbiAgfVxuXG4gIHZhciBsb2dMaW5lcyA9IG51bGxcblxuICBpZiAob3B0aW9ucy5sb2dnZXIgJiYgb3B0aW9ucy5sb2dnZXIuZ2V0TGluZXMpIHtcbiAgICBsb2dMaW5lcyA9IG9wdGlvbnMubG9nZ2VyLmdldExpbmVzKClcbiAgfVxuXG4gIGlmIChzdGFjaykge1xuICAgIG1lc3NhZ2UgPSBuZXcgRXJyb3IobWVzc2FnZSlcbiAgICBtZXNzYWdlLnN0YWNrID0gc3RhY2tcbiAgfVxuXG4gIHZhciBlcnJDb2RlID0gJ25vbmUnXG5cbiAgaWYgKGVycikge1xuICAgIGVyckNvZGUgPSAnY29kZT0nICsgKGVyci5jb2RlID8gZXJyLmNvZGUgOiAndW5kZWZpbmVkJylcbiAgICBlcnJDb2RlICs9ICcsIHR5cGU9JyArIChlcnIudHlwZSA/IGVyci50eXBlIDogJ3VuZGVmaW5lZCcpXG4gICAgZXJyQ29kZSArPSAnLCBuYW1lPScgKyAoZXJyLm5hbWUgPyBlcnIubmFtZSA6ICd1bmRlZmluZWQnKVxuICAgIGVyckNvZGUgKz0gJywgbWVzc2FnZT0nICsgKGVyci5tZXNzYWdlID8gZXJyLm1lc3NhZ2UgOiAndW5kZWZpbmVkJylcbiAgfVxuXG4gIGNvbnN0IHZpZGVvbWFpbEVycm9yID0gbmV3IFZpZGVvbWFpbEVycm9yKG1lc3NhZ2UsIHtcbiAgICBleHBsYW5hdGlvbjogZXhwbGFuYXRpb24sXG4gICAgbG9nTGluZXM6IGxvZ0xpbmVzLFxuICAgIGNsaWVudDogYnJvd3Nlci5nZXRVc2VmdWxEYXRhKCksXG4gICAgdXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZixcbiAgICBzaXRlTmFtZTogb3B0aW9ucy5zaXRlTmFtZSxcbiAgICBjb2RlOiBlcnJDb2RlLFxuICAgIHN0YWNrOiBzdGFjayAvLyBoYXZlIHRvIGFzc2lnbiBpdCBtYW51YWxseSBhZ2FpbiBiZWNhdXNlIGl0IGlzIGtpbmRhIHByb3RlY3RlZFxuICB9KVxuXG4gIHZhciByZXNvdXJjZVxuICB2YXIgcmVwb3J0RXJyb3JzID0gZmFsc2VcblxuICBpZiAob3B0aW9ucy5yZXBvcnRFcnJvcnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVwb3J0RXJyb3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXBvcnRFcnJvcnMgPSBvcHRpb25zLnJlcG9ydEVycm9ycyh2aWRlb21haWxFcnJvcilcbiAgICB9IGVsc2Uge1xuICAgICAgcmVwb3J0RXJyb3JzID0gb3B0aW9ucy5yZXBvcnRFcnJvcnNcbiAgICB9XG4gIH1cblxuICBpZiAocmVwb3J0RXJyb3JzKSB7XG4gICAgcmVzb3VyY2UgPSBuZXcgUmVzb3VyY2Uob3B0aW9ucylcbiAgfVxuXG4gIGlmIChyZXNvdXJjZSkge1xuICAgIHJlc291cmNlLnJlcG9ydEVycm9yKHZpZGVvbWFpbEVycm9yLCBmdW5jdGlvbiAoZXJyMikge1xuICAgICAgaWYgKGVycjIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIHJlcG9ydCBlcnJvcicsIGVycjIpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc0NsYXNzIChuYW1lKSB7XG4gICAgcmV0dXJuIGNsYXNzTGlzdC5pbmRleE9mKG5hbWUpID49IDBcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQnJvd3NlclByb2JsZW0gKCkge1xuICAgIHJldHVybiBoYXNDbGFzcyhWaWRlb21haWxFcnJvci5CUk9XU0VSX1BST0JMRU0pIHx8IHBhcmFtZXRlcnMuYnJvd3NlclByb2JsZW1cbiAgfVxuXG4gIC8vIGFkZCBzb21lIHB1YmxpYyBmdW5jdGlvbnNcblxuICAvLyB0aGlzIG9uZSBpcyB1c2VmdWwgc28gdGhhdCB0aGUgbm90aWZpZXIgY2FuIGhhdmUgZGlmZmVyZW50IGNzcyBjbGFzc2VzXG4gIHZpZGVvbWFpbEVycm9yLmdldENsYXNzTGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2xhc3NMaXN0XG4gIH1cblxuICB2aWRlb21haWxFcnJvci5yZW1vdmVEaW1lbnNpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBoYXNDbGFzcyhWaWRlb21haWxFcnJvci5JT1NfUFJPQkxFTSkgfHwgYnJvd3Nlci5pc01vYmlsZSgpXG4gIH1cblxuICB2aWRlb21haWxFcnJvci5oaWRlQnV0dG9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNCcm93c2VyUHJvYmxlbSgpIHx8IGhhc0NsYXNzKFZpZGVvbWFpbEVycm9yLklPU19QUk9CTEVNKVxuICB9XG5cbiAgdmlkZW9tYWlsRXJyb3IuaGlkZUZvcm0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGhhc0NsYXNzKFZpZGVvbWFpbEVycm9yLklPU19QUk9CTEVNKVxuICB9XG5cbiAgcmV0dXJuIHZpZGVvbWFpbEVycm9yXG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpZGVvbWFpbEVycm9yXG4iLCJpbXBvcnQgdXRpbCBmcm9tICd1dGlsJ1xuaW1wb3J0IGggZnJvbSAnaHlwZXJzY3JpcHQnXG5pbXBvcnQgaGlkZGVuIGZyb20gJ2hpZGRlbidcbmltcG9ydCBjb250YWlucyBmcm9tICdjb250YWlucydcblxuaW1wb3J0IEV2ZW50cyBmcm9tICcuLy4uL2V2ZW50cydcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi8uLi91dGlsL2V2ZW50RW1pdHRlcidcblxuY29uc3QgQnV0dG9ucyA9IGZ1bmN0aW9uIChjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcywgb3B0aW9ucywgJ0J1dHRvbnMnKVxuXG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGNvbnN0IGRlYnVnID0gb3B0aW9ucy5kZWJ1Z1xuXG4gIHZhciBidXR0b25zRWxlbWVudFxuICB2YXIgcmVjb3JkQnV0dG9uXG4gIHZhciBwYXVzZUJ1dHRvblxuICB2YXIgcmVzdW1lQnV0dG9uXG4gIHZhciBwcmV2aWV3QnV0dG9uXG4gIHZhciByZWNvcmRBZ2FpbkJ1dHRvblxuICB2YXIgc3VibWl0QnV0dG9uXG5cbiAgdmFyIGF1ZGlvT25SYWRpb1BhaXJcbiAgdmFyIGF1ZGlvT2ZmUmFkaW9QYWlyXG5cbiAgdmFyIGJ1aWx0XG5cbiAgZnVuY3Rpb24gaGlkZSAoZWxlbWVudHMpIHtcbiAgICBpZiAoZWxlbWVudHMgJiYgIUFycmF5LmlzQXJyYXkoZWxlbWVudHMpKSB7XG4gICAgICBlbGVtZW50cyA9IFtlbGVtZW50c11cbiAgICB9XG5cbiAgICBlbGVtZW50cyAmJiBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBoaWRkZW4oZWxlbWVudCwgdHJ1ZSlcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gc2hvdyAoZWxlbWVudHMpIHtcbiAgICBpZiAoZWxlbWVudHMgJiYgIUFycmF5LmlzQXJyYXkoZWxlbWVudHMpKSB7XG4gICAgICBlbGVtZW50cyA9IFtlbGVtZW50c11cbiAgICB9XG5cbiAgICBlbGVtZW50cyAmJiBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBoaWRkZW4oZWxlbWVudCwgZmFsc2UpXG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU2hvd24gKGVsZW1lbnRzKSB7XG4gICAgdmFyIGlzU2hvd24gPSBlbGVtZW50cyAmJiB0cnVlXG5cbiAgICBpZiAoZWxlbWVudHMgJiYgIUFycmF5LmlzQXJyYXkoZWxlbWVudHMpKSB7XG4gICAgICBlbGVtZW50cyA9IFtlbGVtZW50c11cbiAgICB9XG5cbiAgICBlbGVtZW50cyAmJiBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpc1Nob3duID0gaXNTaG93biAmJiBlbGVtZW50ICYmICFoaWRkZW4oZWxlbWVudClcbiAgICB9KVxuXG4gICAgcmV0dXJuIGlzU2hvd25cbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc2FibGUgKGVsZW1lbnRzKSB7XG4gICAgaWYgKGVsZW1lbnRzICYmICFBcnJheS5pc0FycmF5KGVsZW1lbnRzKSkge1xuICAgICAgZWxlbWVudHMgPSBbZWxlbWVudHNdXG4gICAgfVxuXG4gICAgZWxlbWVudHMgJiYgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLWNsaWVudC9pc3N1ZXMvMTQ4XG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICBpZiAoZWxlbWVudC50YWdOYW1lID09PSAnSU5QVVQnIHx8IGVsZW1lbnQudGFnTmFtZSA9PT0gJ0JVVFRPTicpIHtcbiAgICAgICAgICBlbGVtZW50LmRpc2FibGVkID0gdHJ1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuYWJsZSAoZWxlbWVudHMpIHtcbiAgICBpZiAoZWxlbWVudHMgJiYgIUFycmF5LmlzQXJyYXkoZWxlbWVudHMpKSB7XG4gICAgICBlbGVtZW50cyA9IFtlbGVtZW50c11cbiAgICB9XG5cbiAgICBlbGVtZW50cyAmJiBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYmluYXJ5a2l0Y2hlbi92aWRlb21haWwtY2xpZW50L2lzc3Vlcy8xNDhcbiAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIGlmIChlbGVtZW50LnRhZ05hbWUgPT09ICdJTlBVVCcgfHwgZWxlbWVudC50YWdOYW1lID09PSAnQlVUVE9OJykge1xuICAgICAgICAgIGVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkanVzdEJ1dHRvbiAoYnV0dG9uRWxlbWVudCwgc2hvdywgdHlwZSwgZGlzYWJsZWQpIHtcbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIGRpc2FibGUoYnV0dG9uRWxlbWVudClcbiAgICB9XG5cbiAgICBpZiAodHlwZSkge1xuICAgICAgYnV0dG9uRWxlbWVudC50eXBlID0gdHlwZVxuICAgIH0gZWxzZSBpZiAoIWJ1dHRvbkVsZW1lbnQudHlwZSkge1xuICAgICAgYnV0dG9uRWxlbWVudC50eXBlID0gJ2J1dHRvbidcbiAgICB9XG5cbiAgICAhc2hvdyAmJiBoaWRlKGJ1dHRvbkVsZW1lbnQpXG5cbiAgICByZXR1cm4gYnV0dG9uRWxlbWVudFxuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZUNsaWNrSGFuZGxlciAoZWxlbWVudCwgY2xpY2tIYW5kbGVyKSB7XG4gICAgY29uc3Qgd3JhcHBlZENsaWNrSGFuZGxlciA9IChlKSA9PiB7XG4gICAgICBlICYmIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgICB0cnkge1xuICAgICAgICBjbGlja0hhbmRsZXIoeyBldmVudDogZSB9KVxuICAgICAgfSBjYXRjaCAoZXhjKSB7XG4gICAgICAgIHNlbGYuZW1pdChFdmVudHMuRVJST1IsIGV4YylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlbGVtZW50Lm9uY2xpY2sgPSB3cmFwcGVkQ2xpY2tIYW5kbGVyXG4gIH1cblxuICBmdW5jdGlvbiBtYWtlUmFkaW9CdXR0b25QYWlyIChvcHRpb25zKSB7XG4gICAgdmFyIHJhZGlvQnV0dG9uRWxlbWVudFxuICAgIHZhciByYWRpb0J1dHRvbkdyb3VwXG5cbiAgICBpZiAob3B0aW9ucy5pZCkge1xuICAgICAgcmFkaW9CdXR0b25FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3B0aW9ucy5pZClcbiAgICB9XG5cbiAgICBpZiAoIXJhZGlvQnV0dG9uRWxlbWVudCkge1xuICAgICAgcmFkaW9CdXR0b25FbGVtZW50ID0gaCgnaW5wdXQjJyArIG9wdGlvbnMuaWQsIHtcbiAgICAgICAgdHlwZTogJ3JhZGlvJyxcbiAgICAgICAgbmFtZTogb3B0aW9ucy5uYW1lLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy52YWx1ZSxcbiAgICAgICAgY2hlY2tlZDogb3B0aW9ucy5jaGVja2VkXG4gICAgICB9KVxuXG4gICAgICByYWRpb0J1dHRvbkdyb3VwID0gaCgnc3Bhbi5yYWRpb0dyb3VwJywgcmFkaW9CdXR0b25FbGVtZW50LCBoKCdsYWJlbCcsIHtcbiAgICAgICAgJ2h0bWxGb3InOiBvcHRpb25zLmlkXG4gICAgICB9LCBvcHRpb25zLmxhYmVsKSlcblxuICAgICAgLy8gZG91YmxlIGNoZWNrIHRoYXQgc3VibWl0IGJ1dHRvbiBpcyBhbHJlYWR5IGluIHRoZSBidXR0b25zRWxlbWVudCBjb250YWluZXIgYXMgYSBjaGlsZD9cbiAgICAgIGlmIChzdWJtaXRCdXR0b24gJiYgY29udGFpbnMoYnV0dG9uc0VsZW1lbnQsIHN1Ym1pdEJ1dHRvbikpIHtcbiAgICAgICAgYnV0dG9uc0VsZW1lbnQuaW5zZXJ0QmVmb3JlKHJhZGlvQnV0dG9uR3JvdXAsIHN1Ym1pdEJ1dHRvbilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1dHRvbnNFbGVtZW50LmFwcGVuZENoaWxkKHJhZGlvQnV0dG9uR3JvdXApXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY2hhbmdlSGFuZGxlcikge1xuICAgICAgcmFkaW9CdXR0b25FbGVtZW50Lm9uY2hhbmdlID0gb3B0aW9ucy5jaGFuZ2VIYW5kbGVyXG4gICAgfVxuXG4gICAgZGlzYWJsZShyYWRpb0J1dHRvbkVsZW1lbnQpXG5cbiAgICByZXR1cm4gW3JhZGlvQnV0dG9uRWxlbWVudCwgcmFkaW9CdXR0b25Hcm91cF1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VCdXR0b24gKGJ1dHRvbkNsYXNzLCB0ZXh0LCBjbGlja0hhbmRsZXIsIHNob3csIGlkLCB0eXBlLCBzZWxlY3RvciwgZGlzYWJsZWQgPSB0cnVlKSB7XG4gICAgdmFyIGJ1dHRvbkVsZW1lbnRcblxuICAgIGlmIChpZCkge1xuICAgICAgYnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKVxuICAgIH0gZWxzZSBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKVxuICAgIH0gZWxzZSB7XG4gICAgICBidXR0b25FbGVtZW50ID0gYnV0dG9uc0VsZW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBidXR0b25DbGFzcylcbiAgICB9XG5cbiAgICBpZiAoIWJ1dHRvbkVsZW1lbnQpIHtcbiAgICAgIGlmIChvcHRpb25zLnNlbGVjdG9ycy5idXR0b25DbGFzcykge1xuICAgICAgICBidXR0b25DbGFzcyArPSAnLicgKyBvcHRpb25zLnNlbGVjdG9ycy5idXR0b25DbGFzc1xuICAgICAgfVxuXG4gICAgICBidXR0b25FbGVtZW50ID0gaCgnYnV0dG9uLicgKyBidXR0b25DbGFzcylcbiAgICAgIGJ1dHRvbkVsZW1lbnQgPSBhZGp1c3RCdXR0b24oYnV0dG9uRWxlbWVudCwgc2hvdywgdHlwZSwgZGlzYWJsZWQpXG5cbiAgICAgIGJ1dHRvbkVsZW1lbnQuaW5uZXJIVE1MID0gdGV4dFxuXG4gICAgICAvLyBkb3VibGUgY2hlY2sgdGhhdCBzdWJtaXQgYnV0dG9uIGlzIGFscmVhZHkgaW4gdGhlIGJ1dHRvbnNFbGVtZW50IGNvbnRhaW5lclxuICAgICAgaWYgKHN1Ym1pdEJ1dHRvbiAmJiBjb250YWlucyhidXR0b25zRWxlbWVudCwgc3VibWl0QnV0dG9uKSkge1xuICAgICAgICBidXR0b25zRWxlbWVudC5pbnNlcnRCZWZvcmUoYnV0dG9uRWxlbWVudCwgc3VibWl0QnV0dG9uKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnV0dG9uc0VsZW1lbnQuYXBwZW5kQ2hpbGQoYnV0dG9uRWxlbWVudClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYnV0dG9uRWxlbWVudCA9IGFkanVzdEJ1dHRvbihidXR0b25FbGVtZW50LCBzaG93LCB0eXBlLCBkaXNhYmxlZClcbiAgICB9XG5cbiAgICBpZiAoY2xpY2tIYW5kbGVyKSB7XG4gICAgICByZXBsYWNlQ2xpY2tIYW5kbGVyKGJ1dHRvbkVsZW1lbnQsIGNsaWNrSGFuZGxlcilcbiAgICB9XG5cbiAgICByZXR1cm4gYnV0dG9uRWxlbWVudFxuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRCdXR0b25zICgpIHtcbiAgICBpZiAoIW9wdGlvbnMuZGlzYWJsZVN1Ym1pdCkge1xuICAgICAgaWYgKCFzdWJtaXRCdXR0b24pIHtcbiAgICAgICAgc3VibWl0QnV0dG9uID0gbWFrZUJ1dHRvbihcbiAgICAgICAgICBvcHRpb25zLnNlbGVjdG9ycy5zdWJtaXRCdXR0b25DbGFzcyxcbiAgICAgICAgICAnU3VibWl0JyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHRydWUsXG4gICAgICAgICAgb3B0aW9ucy5zZWxlY3RvcnMuc3VibWl0QnV0dG9uSWQsXG4gICAgICAgICAgJ3N1Ym1pdCcsXG4gICAgICAgICAgb3B0aW9ucy5zZWxlY3RvcnMuc3VibWl0QnV0dG9uU2VsZWN0b3IsXG4gICAgICAgICAgb3B0aW9ucy5lbmFibGVBdXRvVmFsaWRhdGlvblxuICAgICAgICApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXNhYmxlKHN1Ym1pdEJ1dHRvbilcbiAgICAgIH1cblxuICAgICAgLy8gbm8gbmVlZCB0byBsaXN0ZW4gdG8gdGhlIHN1Ym1pdCBldmVudCB3aGVuIGl0J3MgYWxyZWFkeSBsaXN0ZW5lZFxuICAgICAgLy8gd2l0aGluIHRoZSBmb3JtIGVsZW1lbnQgY2xhc3NcbiAgICAgIGlmICghY29udGFpbmVyLmhhc0Zvcm0oKSAmJiBzdWJtaXRCdXR0b24pIHtcbiAgICAgICAgcmVwbGFjZUNsaWNrSGFuZGxlcihzdWJtaXRCdXR0b24sIHN1Ym1pdClcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZWNvcmRCdXR0b24gPSBtYWtlQnV0dG9uKFxuICAgICAgb3B0aW9ucy5zZWxlY3RvcnMucmVjb3JkQnV0dG9uQ2xhc3MsXG4gICAgICBvcHRpb25zLnRleHQuYnV0dG9ucy5yZWNvcmQsXG4gICAgICByZWNvcmQsXG4gICAgICBmYWxzZVxuICAgIClcblxuICAgIGlmIChvcHRpb25zLmVuYWJsZVBhdXNlKSB7XG4gICAgICBwYXVzZUJ1dHRvbiA9IG1ha2VCdXR0b24oXG4gICAgICAgIG9wdGlvbnMuc2VsZWN0b3JzLnBhdXNlQnV0dG9uQ2xhc3MsXG4gICAgICAgIG9wdGlvbnMudGV4dC5idXR0b25zLnBhdXNlLFxuICAgICAgICBjb250YWluZXIucGF1c2UsXG4gICAgICAgIGZhbHNlXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZW5hYmxlUGF1c2UpIHtcbiAgICAgIHJlc3VtZUJ1dHRvbiA9IG1ha2VCdXR0b24oXG4gICAgICAgIG9wdGlvbnMuc2VsZWN0b3JzLnJlc3VtZUJ1dHRvbkNsYXNzLFxuICAgICAgICBvcHRpb25zLnRleHQuYnV0dG9ucy5yZXN1bWUsXG4gICAgICAgIGNvbnRhaW5lci5yZXN1bWUsXG4gICAgICAgIGZhbHNlXG4gICAgICApXG4gICAgfVxuXG4gICAgLy8gc2hvdyBzdG9wIG9ubHkgd2hlbiBwYXVzZSBpcyBlbmFibGVkIC0gbG9va3MgYmV0dGVyIHRoYXQgd2F5IG90aGVyd2lzZSBidXR0b25cbiAgICAvLyBtb3ZlIGxlZnQgYW5kIHJpZ2h0IGJldHdlZW4gcmVjb3JkIGFuZCBzdG9wIChwcmV2aWV3KVxuICAgIHByZXZpZXdCdXR0b24gPSBtYWtlQnV0dG9uKFxuICAgICAgb3B0aW9ucy5zZWxlY3RvcnMucHJldmlld0J1dHRvbkNsYXNzLFxuICAgICAgb3B0aW9ucy50ZXh0LmJ1dHRvbnMucHJldmlldyxcbiAgICAgIGNvbnRhaW5lci5zdG9wLFxuICAgICAgZmFsc2VcbiAgICApXG5cbiAgICByZWNvcmRBZ2FpbkJ1dHRvbiA9IG1ha2VCdXR0b24oXG4gICAgICBvcHRpb25zLnNlbGVjdG9ycy5yZWNvcmRBZ2FpbkJ1dHRvbkNsYXNzLFxuICAgICAgb3B0aW9ucy50ZXh0LmJ1dHRvbnMucmVjb3JkQWdhaW4sXG4gICAgICByZWNvcmRBZ2FpbixcbiAgICAgIGZhbHNlXG4gICAgKVxuXG4gICAgaWYgKG9wdGlvbnMuYXVkaW8gJiYgb3B0aW9ucy5hdWRpby5zd2l0Y2gpIHtcbiAgICAgIGF1ZGlvT2ZmUmFkaW9QYWlyID0gbWFrZVJhZGlvQnV0dG9uUGFpcih7XG4gICAgICAgIGlkOiAnYXVkaW9PZmZPcHRpb24nLFxuICAgICAgICBuYW1lOiAnYXVkaW8nLFxuICAgICAgICB2YWx1ZTogJ29mZicsXG4gICAgICAgIGxhYmVsOiAnQXVkaW8gT2ZmJyxcbiAgICAgICAgY2hlY2tlZDogIW9wdGlvbnMuaXNBdWRpb0VuYWJsZWQoKSxcbiAgICAgICAgY2hhbmdlSGFuZGxlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnRhaW5lci5kaXNhYmxlQXVkaW8oKVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICBhdWRpb09uUmFkaW9QYWlyID0gbWFrZVJhZGlvQnV0dG9uUGFpcih7XG4gICAgICAgIGlkOiAnYXVkaW9Pbk9wdGlvbicsXG4gICAgICAgIG5hbWU6ICdhdWRpbycsXG4gICAgICAgIHZhbHVlOiAnb24nLFxuICAgICAgICBsYWJlbDogJ0F1ZGlvIE9uIChCZXRhKScsXG4gICAgICAgIGNoZWNrZWQ6IG9wdGlvbnMuaXNBdWRpb0VuYWJsZWQoKSxcbiAgICAgICAgY2hhbmdlSGFuZGxlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnRhaW5lci5lbmFibGVBdWRpbygpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Gb3JtUmVhZHkgKHBhcmFtcykge1xuICAgIC8vIG5vIG5lZWQgdG8gc2hvdyByZWNvcmQgYnV0dG9uIHdoZW4gZG9pbmcgYSByZWNvcmQgYWdhaW5cbiAgICBpZiAoIWlzU2hvd24ocmVjb3JkQWdhaW5CdXR0b24pKSB7XG4gICAgICBpZiAoIXBhcmFtcy5wYXVzZWQpIHtcbiAgICAgICAgc2hvdyhyZWNvcmRCdXR0b24pXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFwYXJhbXMucGF1c2VkKSB7XG4gICAgICBkaXNhYmxlKHByZXZpZXdCdXR0b24pXG4gICAgICBoaWRlKHByZXZpZXdCdXR0b24pXG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zLmVuYWJsZUF1dG9WYWxpZGF0aW9uKSB7XG4gICAgICBlbmFibGUoc3VibWl0QnV0dG9uKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uR29pbmdCYWNrICgpIHtcbiAgICBoaWRlKHJlY29yZEFnYWluQnV0dG9uKVxuICAgIHNob3cocmVjb3JkQnV0dG9uKVxuICAgIHNob3coc3VibWl0QnV0dG9uKVxuICB9XG5cbiAgZnVuY3Rpb24gb25SZXBsYXlTaG93biAoKSB7XG4gICAgc2VsZi5oaWRlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVXNlck1lZGlhUmVhZHkgKG9wdGlvbnMpIHtcbiAgICBvbkZvcm1SZWFkeShvcHRpb25zKVxuXG4gICAgaWYgKGlzU2hvd24ocmVjb3JkQnV0dG9uKSkge1xuICAgICAgZW5hYmxlKHJlY29yZEJ1dHRvbilcbiAgICB9XG5cbiAgICBpZiAoaXNTaG93bihhdWRpb09uUmFkaW9QYWlyKSkge1xuICAgICAgZW5hYmxlKGF1ZGlvT25SYWRpb1BhaXIpXG4gICAgfVxuXG4gICAgaWYgKGlzU2hvd24oYXVkaW9PZmZSYWRpb1BhaXIpKSB7XG4gICAgICBlbmFibGUoYXVkaW9PZmZSYWRpb1BhaXIpXG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZW5hYmxlQXV0b1ZhbGlkYXRpb24pIHtcbiAgICAgIGRpc2FibGUoc3VibWl0QnV0dG9uKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUmVzZXR0aW5nICgpIHtcbiAgICBkaXNhYmxlKHN1Ym1pdEJ1dHRvbilcblxuICAgIHNlbGYucmVzZXQoKVxuICB9XG5cbiAgZnVuY3Rpb24gb25QcmV2aWV3ICgpIHtcbiAgICBoaWRlKHJlY29yZEJ1dHRvbilcbiAgICBoaWRlKHByZXZpZXdCdXR0b24pXG4gICAgZGlzYWJsZShhdWRpb09uUmFkaW9QYWlyKVxuICAgIGRpc2FibGUoYXVkaW9PZmZSYWRpb1BhaXIpXG5cbiAgICBzaG93KHJlY29yZEFnYWluQnV0dG9uKVxuICAgIGVuYWJsZShyZWNvcmRBZ2FpbkJ1dHRvbilcblxuICAgIGlmICghb3B0aW9ucy5lbmFibGVBdXRvVmFsaWRhdGlvbikge1xuICAgICAgZW5hYmxlKHN1Ym1pdEJ1dHRvbilcbiAgICB9XG4gIH1cblxuICB0aGlzLmVuYWJsZVN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBlbmFibGUoc3VibWl0QnV0dG9uKVxuICB9XG5cbiAgdGhpcy5hZGp1c3RCdXR0b25zRm9yUGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzZWxmLmlzQ291bnRpbmdEb3duKCkpIHtcbiAgICAgIHBhdXNlQnV0dG9uICYmIGhpZGUocGF1c2VCdXR0b24pXG4gICAgICBzaG93KHJlc3VtZUJ1dHRvbilcbiAgICAgIGVuYWJsZShyZXN1bWVCdXR0b24pXG4gICAgICBoaWRlKHJlY29yZEJ1dHRvbilcbiAgICAgIHNob3cocHJldmlld0J1dHRvbilcbiAgICAgIGVuYWJsZShwcmV2aWV3QnV0dG9uKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRmlyc3RGcmFtZVNlbnQgKCkge1xuICAgIGhpZGUocmVjb3JkQnV0dG9uKVxuICAgIGhpZGUocmVjb3JkQWdhaW5CdXR0b24pXG5cbiAgICBpZiAocGF1c2VCdXR0b24pIHtcbiAgICAgIHNob3cocGF1c2VCdXR0b24pXG4gICAgICBlbmFibGUocGF1c2VCdXR0b24pXG4gICAgfVxuXG4gICAgZW5hYmxlKHByZXZpZXdCdXR0b24pXG4gICAgc2hvdyhwcmV2aWV3QnV0dG9uKVxuICB9XG5cbiAgZnVuY3Rpb24gb25SZWNvcmRpbmcgKGZyYW1lc0NvdW50KSB7XG4gICAgLy8gaXQgaXMgcG9zc2libGUgdG8gaGlkZSB3aGlsZSByZWNvcmRpbmcsIGhlbmNlXG4gICAgLy8gY2hlY2sgZnJhbWVzQ291bnQgZmlyc3QgKGNvbWluZyBmcm9tIHJlY29yZGVyKVxuICAgIGlmIChmcmFtZXNDb3VudCA+IDEpIHtcbiAgICAgIG9uRmlyc3RGcmFtZVNlbnQoKVxuICAgIH0gZWxzZSB7XG4gICAgICBkaXNhYmxlKGF1ZGlvT2ZmUmFkaW9QYWlyKVxuICAgICAgZGlzYWJsZShhdWRpb09uUmFkaW9QYWlyKVxuICAgICAgZGlzYWJsZShyZWNvcmRBZ2FpbkJ1dHRvbilcbiAgICAgIGRpc2FibGUocmVjb3JkQnV0dG9uKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUmVzdW1pbmcgKCkge1xuICAgIGhpZGUocmVzdW1lQnV0dG9uKVxuICAgIGhpZGUocmVjb3JkQnV0dG9uKVxuXG4gICAgaWYgKHBhdXNlQnV0dG9uKSB7XG4gICAgICBlbmFibGUocGF1c2VCdXR0b24pXG4gICAgICBzaG93KHBhdXNlQnV0dG9uKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uU3RvcHBpbmcgKCkge1xuICAgIGRpc2FibGUocHJldmlld0J1dHRvbilcbiAgICBoaWRlKHBhdXNlQnV0dG9uKVxuICAgIGhpZGUocmVzdW1lQnV0dG9uKVxuICB9XG5cbiAgZnVuY3Rpb24gb25Db3VudGRvd24gKCkge1xuICAgIGRpc2FibGUocmVjb3JkQnV0dG9uKVxuICAgIGRpc2FibGUoYXVkaW9PZmZSYWRpb1BhaXIpXG4gICAgZGlzYWJsZShhdWRpb09uUmFkaW9QYWlyKVxuICB9XG5cbiAgZnVuY3Rpb24gb25TdWJtaXR0aW5nICgpIHtcbiAgICBkaXNhYmxlKHN1Ym1pdEJ1dHRvbilcbiAgICBkaXNhYmxlKHJlY29yZEFnYWluQnV0dG9uKVxuICB9XG5cbiAgZnVuY3Rpb24gb25TdWJtaXR0ZWQgKCkge1xuICAgIGRpc2FibGUocHJldmlld0J1dHRvbilcbiAgICBkaXNhYmxlKHJlY29yZEFnYWluQnV0dG9uKVxuICAgIGRpc2FibGUocmVjb3JkQnV0dG9uKVxuICAgIGRpc2FibGUoc3VibWl0QnV0dG9uKVxuICB9XG5cbiAgZnVuY3Rpb24gb25JbnZhbGlkICgpIHtcbiAgICBpZiAob3B0aW9ucy5lbmFibGVBdXRvVmFsaWRhdGlvbikge1xuICAgICAgZGlzYWJsZShzdWJtaXRCdXR0b24pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25WYWxpZCAoKSB7XG4gICAgaWYgKG9wdGlvbnMuZW5hYmxlQXV0b1ZhbGlkYXRpb24pIHtcbiAgICAgIGVuYWJsZShzdWJtaXRCdXR0b24pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25IaWRkZW4gKCkge1xuICAgIGhpZGUocmVjb3JkQnV0dG9uKVxuICAgIGhpZGUocHJldmlld0J1dHRvbilcbiAgICBoaWRlKHJlY29yZEFnYWluQnV0dG9uKVxuICAgIGhpZGUocmVzdW1lQnV0dG9uKVxuICB9XG5cbiAgZnVuY3Rpb24gb25FbmFibGluZ0F1ZGlvICgpIHtcbiAgICBkaXNhYmxlKHJlY29yZEJ1dHRvbilcbiAgICBkaXNhYmxlKGF1ZGlvT25SYWRpb1BhaXIpXG4gICAgZGlzYWJsZShhdWRpb09mZlJhZGlvUGFpcilcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRGlzYWJsaW5nQXVkaW8gKCkge1xuICAgIGRpc2FibGUocmVjb3JkQnV0dG9uKVxuICAgIGRpc2FibGUoYXVkaW9PblJhZGlvUGFpcilcbiAgICBkaXNhYmxlKGF1ZGlvT2ZmUmFkaW9QYWlyKVxuICB9XG5cbiAgZnVuY3Rpb24gcmVjb3JkQWdhaW4gKCkge1xuICAgIGRpc2FibGUocmVjb3JkQWdhaW5CdXR0b24pXG4gICAgY29udGFpbmVyLmJlZ2luV2FpdGluZygpXG4gICAgY29udGFpbmVyLnJlY29yZEFnYWluKClcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uU3RhcnRpbmdPdmVyICgpIHtcbiAgICBzaG93KHN1Ym1pdEJ1dHRvbilcbiAgfVxuXG4gIGZ1bmN0aW9uIHN1Ym1pdCAoKSB7XG4gICAgY29udGFpbmVyLnN1Ym1pdCgpXG4gIH1cblxuICBmdW5jdGlvbiByZWNvcmQgKHBhcmFtcykge1xuICAgIGRpc2FibGUocmVjb3JkQnV0dG9uKVxuICAgIGNvbnRhaW5lci5yZWNvcmQocGFyYW1zKVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdEV2ZW50cyAoKSB7XG4gICAgZGVidWcoJ0J1dHRvbnM6IGluaXRFdmVudHMoKScpXG5cbiAgICBzZWxmLm9uKEV2ZW50cy5VU0VSX01FRElBX1JFQURZLCBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgb25Vc2VyTWVkaWFSZWFkeShvcHRpb25zKVxuICAgIH0pLm9uKEV2ZW50cy5QUkVWSUVXLCBmdW5jdGlvbiAoKSB7XG4gICAgICBvblByZXZpZXcoKVxuICAgIH0pLm9uKEV2ZW50cy5QQVVTRUQsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuYWRqdXN0QnV0dG9uc0ZvclBhdXNlKClcbiAgICB9KS5vbihFdmVudHMuUkVDT1JESU5HLCBmdW5jdGlvbiAoZnJhbWVzQ291bnQpIHtcbiAgICAgIG9uUmVjb3JkaW5nKGZyYW1lc0NvdW50KVxuICAgIH0pLm9uKEV2ZW50cy5GSVJTVF9GUkFNRV9TRU5ULCBmdW5jdGlvbiAoKSB7XG4gICAgICBvbkZpcnN0RnJhbWVTZW50KClcbiAgICB9KS5vbihFdmVudHMuUkVTVU1JTkcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIG9uUmVzdW1pbmcoKVxuICAgIH0pLm9uKEV2ZW50cy5TVE9QUElORywgZnVuY3Rpb24gKCkge1xuICAgICAgb25TdG9wcGluZygpXG4gICAgfSkub24oRXZlbnRzLkNPVU5URE9XTiwgZnVuY3Rpb24gKCkge1xuICAgICAgb25Db3VudGRvd24oKVxuICAgIH0pLm9uKEV2ZW50cy5TVUJNSVRUSU5HLCBmdW5jdGlvbiAoKSB7XG4gICAgICBvblN1Ym1pdHRpbmcoKVxuICAgIH0pLm9uKEV2ZW50cy5SRVNFVFRJTkcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIG9uUmVzZXR0aW5nKClcbiAgICB9KS5vbihFdmVudHMuSU5WQUxJRCwgZnVuY3Rpb24gKCkge1xuICAgICAgb25JbnZhbGlkKClcbiAgICB9KS5vbihFdmVudHMuVkFMSUQsIGZ1bmN0aW9uICgpIHtcbiAgICAgIG9uVmFsaWQoKVxuICAgIH0pLm9uKEV2ZW50cy5TVUJNSVRURUQsIGZ1bmN0aW9uICgpIHtcbiAgICAgIG9uU3VibWl0dGVkKClcbiAgICB9KS5vbihFdmVudHMuSElERSwgZnVuY3Rpb24gKCkge1xuICAgICAgb25IaWRkZW4oKVxuICAgIH0pLm9uKEV2ZW50cy5GT1JNX1JFQURZLCBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgb25Gb3JtUmVhZHkob3B0aW9ucylcbiAgICB9KS5vbihFdmVudHMuUkVQTEFZX1NIT1dOLCBmdW5jdGlvbiAoKSB7XG4gICAgICBvblJlcGxheVNob3duKClcbiAgICB9KS5vbihFdmVudHMuR09JTkdfQkFDSywgZnVuY3Rpb24gKCkge1xuICAgICAgb25Hb2luZ0JhY2soKVxuICAgIH0pLm9uKEV2ZW50cy5FTkFCTElOR19BVURJTywgZnVuY3Rpb24gKCkge1xuICAgICAgb25FbmFibGluZ0F1ZGlvKClcbiAgICB9KS5vbihFdmVudHMuRElTQUJMSU5HX0FVRElPLCBmdW5jdGlvbiAoKSB7XG4gICAgICBvbkRpc2FibGluZ0F1ZGlvKClcbiAgICB9KS5vbihFdmVudHMuU1RBUlRJTkdfT1ZFUiwgZnVuY3Rpb24gKCkge1xuICAgICAgb25TdGFydGluZ092ZXIoKVxuICAgIH0pLm9uKEV2ZW50cy5FUlJPUiwgZnVuY3Rpb24gKGVycikge1xuICAgICAgLy8gc2luY2UgaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLWNsaWVudC9pc3N1ZXMvNjBcbiAgICAgIC8vIHdlIGhpZGUgYXJlYXMgdG8gbWFrZSBpdCBlYXNpZXIgZm9yIHRoZSB1c2VyXG4gICAgICBpZiAoZXJyLmhpZGVCdXR0b25zICYmIGVyci5oaWRlQnV0dG9ucygpICYmIG9wdGlvbnMuYWRqdXN0Rm9ybU9uQnJvd3NlckVycm9yKSB7XG4gICAgICAgIHNlbGYuaGlkZSgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHRoaXMucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgb3B0aW9ucy5kZWJ1ZygnQnV0dG9uczogcmVzZXQoKScpXG5cbiAgICBkaXNhYmxlKHBhdXNlQnV0dG9uKVxuICAgIGRpc2FibGUocmVzdW1lQnV0dG9uKVxuICAgIGRpc2FibGUocmVjb3JkQnV0dG9uKVxuICAgIGRpc2FibGUocHJldmlld0J1dHRvbilcbiAgICBkaXNhYmxlKHJlY29yZEFnYWluQnV0dG9uKVxuICB9XG5cbiAgdGhpcy5pc1JlY29yZEFnYWluQnV0dG9uRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gIXJlY29yZEFnYWluQnV0dG9uLmRpc2FibGVkXG4gIH1cblxuICB0aGlzLmlzUmVjb3JkQnV0dG9uRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gIXJlY29yZEJ1dHRvbi5kaXNhYmxlZFxuICB9XG5cbiAgdGhpcy5zZXRTdWJtaXRCdXR0b24gPSBmdW5jdGlvbiAobmV3U3VibWl0QnV0dG9uKSB7XG4gICAgc3VibWl0QnV0dG9uID0gbmV3U3VibWl0QnV0dG9uXG4gIH1cblxuICB0aGlzLmdldFN1Ym1pdEJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3VibWl0QnV0dG9uXG4gIH1cblxuICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgIGJ1dHRvbnNFbGVtZW50ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy4nICsgb3B0aW9ucy5zZWxlY3RvcnMuYnV0dG9uc0NsYXNzKVxuXG4gICAgaWYgKCFidXR0b25zRWxlbWVudCkge1xuICAgICAgYnV0dG9uc0VsZW1lbnQgPSBoKCdkaXYuJyArIG9wdGlvbnMuc2VsZWN0b3JzLmJ1dHRvbnNDbGFzcylcblxuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbnNFbGVtZW50KVxuICAgIH1cblxuICAgIGJ1aWxkQnV0dG9ucygpXG5cbiAgICAhYnVpbHQgJiYgaW5pdEV2ZW50cygpXG5cbiAgICBidWlsdCA9IHRydWVcbiAgfVxuXG4gIHRoaXMudW5sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIGJ1aWx0ID0gZmFsc2VcbiAgfVxuXG4gIHRoaXMuaGlkZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBoaWRlKGJ1dHRvbnNFbGVtZW50KVxuXG4gICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMuZGVlcCkge1xuICAgICAgaGlkZShyZWNvcmRCdXR0b24pXG4gICAgICBoaWRlKHBhdXNlQnV0dG9uKVxuICAgICAgaGlkZShyZXN1bWVCdXR0b24pXG4gICAgICBoaWRlKHByZXZpZXdCdXR0b24pXG4gICAgICBoaWRlKHJlY29yZEFnYWluQnV0dG9uKVxuICAgICAgaGlkZShzdWJtaXRCdXR0b24pXG4gICAgfVxuICB9XG5cbiAgdGhpcy5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHNob3coYnV0dG9uc0VsZW1lbnQpXG4gIH1cblxuICB0aGlzLmlzQ291bnRpbmdEb3duID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjb250YWluZXIuaXNDb3VudGluZ0Rvd24oKVxuICB9XG59XG5cbnV0aWwuaW5oZXJpdHMoQnV0dG9ucywgRXZlbnRFbWl0dGVyKVxuXG5leHBvcnQgZGVmYXVsdCBCdXR0b25zXG4iLCJpbXBvcnQgaW5zZXJ0Q3NzIGZyb20gJ2luc2VydC1jc3MnXG5pbXBvcnQgaGlkZGVuIGZyb20gJ2hpZGRlbidcbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnXG5pbXBvcnQgVmlzaWJpbGl0eSBmcm9tICdkb2N1bWVudC12aXNpYmlsaXR5J1xuXG5pbXBvcnQgRGltZW5zaW9uIGZyb20gJy4vZGltZW5zaW9uJ1xuaW1wb3J0IFZpc3VhbHMgZnJvbSAnLi92aXN1YWxzJ1xuaW1wb3J0IEJ1dHRvbnMgZnJvbSAnLi9idXR0b25zJ1xuaW1wb3J0IEZvcm0gZnJvbSAnLi9mb3JtJ1xuaW1wb3J0IE9wdGlvbnNXcmFwcGVyIGZyb20gJy4vb3B0aW9uc1dyYXBwZXInXG5cbmltcG9ydCBSZXNvdXJjZSBmcm9tICcuLy4uL3Jlc291cmNlJ1xuaW1wb3J0IEV2ZW50cyBmcm9tICcuLy4uL2V2ZW50cydcblxuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLy4uL3V0aWwvZXZlbnRFbWl0dGVyJ1xuaW1wb3J0IFZpZGVvbWFpbEVycm9yIGZyb20gJy4vLi4vdXRpbC92aWRlb21haWxFcnJvcidcbmltcG9ydCBjc3MgZnJvbSAnLi8uLi9zdHlsZXMvY3NzL21haW4ubWluLmNzcy5qcydcblxudmFyIENvbnRhaW5lciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMsIG9wdGlvbnMsICdDb250YWluZXInKVxuXG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgY29uc3QgdmlzaWJpbGl0eSA9IFZpc2liaWxpdHkoKVxuICBjb25zdCB2aXN1YWxzID0gbmV3IFZpc3VhbHModGhpcywgb3B0aW9ucylcbiAgY29uc3QgYnV0dG9ucyA9IG5ldyBCdXR0b25zKHRoaXMsIG9wdGlvbnMpXG4gIGNvbnN0IHJlc291cmNlID0gbmV3IFJlc291cmNlKG9wdGlvbnMpXG4gIGNvbnN0IGh0bWxFbGVtZW50ID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvciAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdodG1sJylcbiAgY29uc3QgZGVidWcgPSBvcHRpb25zLmRlYnVnXG5cbiAgdmFyIGhhc0Vycm9yID0gZmFsc2VcbiAgdmFyIHN1Ym1pdHRlZCA9IGZhbHNlXG4gIHZhciBsYXN0VmFsaWRhdGlvbiA9IGZhbHNlXG5cbiAgdmFyIGNvbnRhaW5lckVsZW1lbnRcbiAgdmFyIGJ1aWx0XG4gIHZhciBmb3JtXG5cbiAgZnVuY3Rpb24gcHJlcGVuZERlZmF1bHRDc3MgKCkge1xuICAgIGluc2VydENzcyhjc3MsIHsgcHJlcGVuZDogdHJ1ZSB9KVxuICB9XG5cbiAgLy8gc2luY2UgaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLWNsaWVudC9pc3N1ZXMvODdcbiAgZnVuY3Rpb24gZmluZFBhcmVudEZvcm1FbGVtZW50ICgpIHtcbiAgICByZXR1cm4gY29udGFpbmVyRWxlbWVudC5jbG9zZXN0KCdmb3JtJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEZvcm1FbGVtZW50ICgpIHtcbiAgICB2YXIgZm9ybUVsZW1lbnRcblxuICAgIGlmIChjb250YWluZXJFbGVtZW50LnRhZ05hbWUgPT09ICdGT1JNJykge1xuICAgICAgZm9ybUVsZW1lbnQgPSBjb250YWluZXJFbGVtZW50XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLnNlbGVjdG9ycy5mb3JtSWQpIHtcbiAgICAgIGZvcm1FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3B0aW9ucy5zZWxlY3RvcnMuZm9ybUlkKVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3JtRWxlbWVudCA9IGZpbmRQYXJlbnRGb3JtRWxlbWVudCgpXG4gICAgfVxuXG4gICAgcmV0dXJuIGZvcm1FbGVtZW50XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZEZvcm0gKCkge1xuICAgIGNvbnN0IGZvcm1FbGVtZW50ID0gZ2V0Rm9ybUVsZW1lbnQoKVxuXG4gICAgaWYgKGZvcm1FbGVtZW50KSB7XG4gICAgICBkZWJ1ZygnQ29udGFpbmVyOiBidWlsZEZvcm0oKScpXG4gICAgICBmb3JtID0gbmV3IEZvcm0oc2VsZiwgZm9ybUVsZW1lbnQsIG9wdGlvbnMpXG5cbiAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGZvcm0uZmluZFN1Ym1pdEJ1dHRvbigpXG4gICAgICBzdWJtaXRCdXR0b24gJiYgYnV0dG9ucy5zZXRTdWJtaXRCdXR0b24oc3VibWl0QnV0dG9uKVxuXG4gICAgICBmb3JtLmJ1aWxkKClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZENoaWxkcmVuICgpIHtcbiAgICBkZWJ1ZygnQ29udGFpbmVyOiBidWlsZENoaWxkcmVuKCknKVxuXG4gICAgaWYgKCFjb250YWluZXJFbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdTb3JyeSwgeW91ciBicm93c2VyIGlzIHRvbyBvbGQhJywgb3B0aW9ucykpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndmlkZW9tYWlsJylcblxuICAgICAgaWYgKCFvcHRpb25zLnBsYXllck9ubHkpIHtcbiAgICAgICAgYnV0dG9ucy5idWlsZCgpXG4gICAgICB9XG5cbiAgICAgIHZpc3VhbHMuYnVpbGQoKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NFcnJvciAoZXJyKSB7XG4gICAgaGFzRXJyb3IgPSB0cnVlXG5cbiAgICBpZiAoZXJyLnN0YWNrKSB7XG4gICAgICBvcHRpb25zLmxvZ2dlci5lcnJvcihlcnIuc3RhY2spXG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMubG9nZ2VyLmVycm9yKGVycilcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5kaXNwbGF5RXJyb3JzKSB7XG4gICAgICB2aXN1YWxzLmVycm9yKGVycilcbiAgICB9IGVsc2Uge1xuICAgICAgdmlzdWFscy5yZXNldCgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdEV2ZW50cyAoKSB7XG4gICAgZGVidWcoJ0NvbnRhaW5lcjogaW5pdEV2ZW50cygpJylcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCAoZSkgPT4ge1xuICAgICAgc2VsZi51bmxvYWQoZSlcbiAgICB9KVxuXG4gICAgaWYgKCFvcHRpb25zLnBsYXllck9ubHkpIHtcbiAgICAgIHZpc2liaWxpdHkub25DaGFuZ2UoZnVuY3Rpb24gKHZpc2libGUpIHtcbiAgICAgICAgLy8gYnVpbHQ/IHNlZSBodHRwczovL2dpdGh1Yi5jb20vYmluYXJ5a2l0Y2hlbi92aWRlb21haWwuaW8vaXNzdWVzLzMyNlxuICAgICAgICBpZiAoYnVpbHQpIHtcbiAgICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaXNBdXRvUGF1c2VFbmFibGVkKCkgJiYgc2VsZi5pc0NvdW50aW5nRG93bigpKSB7XG4gICAgICAgICAgICAgIHNlbGYucmVzdW1lKClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZi5lbWl0KEV2ZW50cy5WSVNJQkxFKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pc0F1dG9QYXVzZUVuYWJsZWQoKSAmJiAoc2VsZi5pc0NvdW50aW5nRG93bigpIHx8IHNlbGYuaXNSZWNvcmRpbmcoKSkpIHtcbiAgICAgICAgICAgICAgc2VsZi5wYXVzZSgnZG9jdW1lbnQgaW52aXNpYmxlJylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZi5lbWl0KEV2ZW50cy5JTlZJU0lCTEUpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmVuYWJsZVNwYWNlKSB7XG4gICAgICBpZiAoIW9wdGlvbnMucGxheWVyT25seSkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGNvbnN0IHRhZ05hbWUgPSBlLnRhcmdldC50YWdOYW1lXG4gICAgICAgICAgY29uc3QgaXNFZGl0YWJsZSA9IGUudGFyZ2V0LmlzQ29udGVudEVkaXRhYmxlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNvbnRlbnRFZGl0YWJsZSA9PT0gdHJ1ZVxuXG4gICAgICAgICAgLy8gYmV3YXJlIG9mIHJpY2ggdGV4dCBlZGl0b3JzLCBoZW5jZSB0aGUgaXNFZGl0YWJsZSBjaGVjayAod29yZHByZXNzIHBsdWdpbiBpc3N1ZSlcbiAgICAgICAgICBpZiAoIWlzRWRpdGFibGUgJiYgdGFnTmFtZSAhPT0gJ0lOUFVUJyAmJiB0YWdOYW1lICE9PSAnVEVYVEFSRUEnKSB7XG4gICAgICAgICAgICBjb25zdCBjb2RlID0gZS5rZXlDb2RlID8gZS5rZXlDb2RlIDogZS53aGljaFxuXG4gICAgICAgICAgICBpZiAoY29kZSA9PT0gMzIpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZW5hYmxlUGF1c2UpIHtcbiAgICAgICAgICAgICAgICB2aXN1YWxzLnBhdXNlT3JSZXN1bWUoKVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZpc3VhbHMucmVjb3JkT3JTdG9wKClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBiZXR0ZXIgdG8ga2VlcCB0aGUgb25lIGFuZCBvbmx5IGVycm9yIGxpc3RlbmVyc1xuICAgIC8vIGF0IG9uZSBzcG90LCBoZXJlLCBiZWNhdXNlIHVubG9hZCgpIHdpbGwgZG8gYSByZW1vdmVBbGxMaXN0ZW5lcnMoKVxuICAgIHNlbGYub24oRXZlbnRzLkVSUk9SLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBwcm9jZXNzRXJyb3IoZXJyKVxuICAgICAgdW5sb2FkQ2hpbGRyZW4oZXJyKVxuXG4gICAgICBpZiAoZXJyLnJlbW92ZURpbWVuc2lvbnMgJiYgZXJyLnJlbW92ZURpbWVuc2lvbnMoKSkge1xuICAgICAgICByZW1vdmVEaW1lbnNpb25zKClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgaWYgKCFvcHRpb25zLnBsYXllck9ubHkpIHtcbiAgICAgIHNlbGYub24oRXZlbnRzLkxPQURFRF9NRVRBX0RBVEEsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29ycmVjdERpbWVuc2lvbnMoKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbnMgKCkge1xuICAgIGlmIChvcHRpb25zLmhhc0RlZmluZWRXaWR0aCgpICYmIG9wdGlvbnMudmlkZW8ud2lkdGggJSAyICE9PSAwKSB7XG4gICAgICB0aHJvdyBWaWRlb21haWxFcnJvci5jcmVhdGUoJ1dpZHRoIG11c3QgYmUgZGl2aXNpYmxlIGJ5IHR3by4nLCBvcHRpb25zKVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmhhc0RlZmluZWRIZWlnaHQoKSAmJiBvcHRpb25zLnZpZGVvLmhlaWdodCAlIDIgIT09IDApIHtcbiAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnSGVpZ2h0IG11c3QgYmUgZGl2aXNpYmxlIGJ5IHR3by4nLCBvcHRpb25zKVxuICAgIH1cbiAgfVxuXG4gIC8vIHRoaXMgd2lsbCBqdXN0IHNldCB0aGUgd2lkdGggYnV0IG5vdCB0aGUgaGVpZ2h0IGJlY2F1c2VcbiAgLy8gaXQgY2FuIGJlIGEgZm9ybSB3aXRoIG1vcmUgaW5wdXRzIGVsZW1lbnRzXG4gIGZ1bmN0aW9uIGNvcnJlY3REaW1lbnNpb25zICgpIHtcbiAgICBjb25zdCB3aWR0aCA9IHZpc3VhbHMuZ2V0UmVjb3JkZXJXaWR0aCh0cnVlKVxuXG4gICAgaWYgKHdpZHRoIDwgMSkge1xuICAgICAgdGhyb3cgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdSZWNvcmRlciB3aWR0aCBjYW5ub3QgYmUgbGVzcyB0aGFuIDEhJywgb3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4J1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZURpbWVuc2lvbnMgKCkge1xuICAgIGNvbnRhaW5lckVsZW1lbnQuc3R5bGUud2lkdGggPSAnYXV0bydcbiAgfVxuXG4gIGZ1bmN0aW9uIHVubG9hZENoaWxkcmVuIChlKSB7XG4gICAgdmlzdWFscy51bmxvYWQoZSlcbiAgICBidXR0b25zLnVubG9hZCgpXG4gICAgc2VsZi5lbmRXYWl0aW5nKClcbiAgfVxuXG4gIGZ1bmN0aW9uIGhpZGVNeVNlbGYgKCkge1xuICAgIGhpZGRlbihjb250YWluZXJFbGVtZW50LCB0cnVlKVxuICB9XG5cbiAgLy8gZml4ZXMgaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLWNsaWVudC9pc3N1ZXMvNzFcbiAgZnVuY3Rpb24gdHJpbUVtYWlsIChlbWFpbCkge1xuICAgIHJldHVybiBlbWFpbC5yZXBsYWNlKC8oXlssXFxzXSspfChbLFxcc10rJCkvZywgJycpXG4gIH1cblxuICBmdW5jdGlvbiBzdWJtaXRWaWRlb21haWwgKGZvcm1EYXRhLCBtZXRob2QsIGNiKSB7XG4gICAgY29uc3QgRk9STV9GSUVMRFMgPSB7XG4gICAgICAnc3ViamVjdCc6IG9wdGlvbnMuc2VsZWN0b3JzLnN1YmplY3RJbnB1dE5hbWUsXG4gICAgICAnZnJvbSc6IG9wdGlvbnMuc2VsZWN0b3JzLmZyb21JbnB1dE5hbWUsXG4gICAgICAndG8nOiBvcHRpb25zLnNlbGVjdG9ycy50b0lucHV0TmFtZSxcbiAgICAgICdib2R5Jzogb3B0aW9ucy5zZWxlY3RvcnMuYm9keUlucHV0TmFtZSxcbiAgICAgICdrZXknOiBvcHRpb25zLnNlbGVjdG9ycy5rZXlJbnB1dE5hbWUsXG4gICAgICAncGFyZW50S2V5Jzogb3B0aW9ucy5zZWxlY3RvcnMucGFyZW50S2V5SW5wdXROYW1lLFxuICAgICAgJ3NlbmRDb3B5Jzogb3B0aW9ucy5zZWxlY3RvcnMuc2VuZENvcHlJbnB1dE5hbWVcbiAgICB9XG5cbiAgICBjb25zdCB2aWRlb21haWxGb3JtRGF0YSA9IHt9XG5cbiAgICBPYmplY3Qua2V5cyhGT1JNX0ZJRUxEUykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoZm9ybURhdGEuaGFzT3duUHJvcGVydHkoRk9STV9GSUVMRFNba2V5XSkpIHtcbiAgICAgICAgdmlkZW9tYWlsRm9ybURhdGFba2V5XSA9IGZvcm1EYXRhW0ZPUk1fRklFTERTW2tleV1dXG4gICAgICB9XG4gICAgfSlcblxuICAgIGlmICh2aWRlb21haWxGb3JtRGF0YS5mcm9tKSB7XG4gICAgICB2aWRlb21haWxGb3JtRGF0YS5mcm9tID0gdHJpbUVtYWlsKHZpZGVvbWFpbEZvcm1EYXRhLmZyb20pXG4gICAgfVxuXG4gICAgaWYgKHZpZGVvbWFpbEZvcm1EYXRhLnRvKSB7XG4gICAgICB2aWRlb21haWxGb3JtRGF0YS50byA9IHRyaW1FbWFpbCh2aWRlb21haWxGb3JtRGF0YS50bylcbiAgICB9XG5cbiAgICAvLyB3aGVuIG1ldGhvZCBpcyB1bmRlZmluZWQsIHRyZWF0IGl0IGFzIGEgcG9zdFxuICAgIGlmIChpc1Bvc3QobWV0aG9kKSB8fCAhbWV0aG9kKSB7XG4gICAgICB2aWRlb21haWxGb3JtRGF0YS5yZWNvcmRpbmdTdGF0cyA9IHZpc3VhbHMuZ2V0UmVjb3JkaW5nU3RhdHMoKVxuICAgICAgdmlkZW9tYWlsRm9ybURhdGEud2lkdGggPSB2aXN1YWxzLmdldFJlY29yZGVyV2lkdGgodHJ1ZSlcbiAgICAgIHZpZGVvbWFpbEZvcm1EYXRhLmhlaWdodCA9IHZpc3VhbHMuZ2V0UmVjb3JkZXJIZWlnaHQodHJ1ZSlcblxuICAgICAgcmVzb3VyY2UucG9zdCh2aWRlb21haWxGb3JtRGF0YSwgY2IpXG4gICAgfSBlbHNlIGlmIChpc1B1dChtZXRob2QpKSB7XG4gICAgICByZXNvdXJjZS5wdXQodmlkZW9tYWlsRm9ybURhdGEsIGNiKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN1Ym1pdEZvcm0gKGZvcm1EYXRhLCB2aWRlb21haWxSZXNwb25zZSwgdXJsLCBjYikge1xuICAgIC8vIGZvciBub3csIGFjY2VwdCBQT1NUcyBvbmx5IHdoaWNoIGhhdmUgYW4gVVJMIHVubGlrZSBudWxsIGFuZFxuICAgIC8vIHRyZWF0IGFsbCBvdGhlciBzdWJtaXNzaW9ucyBhcyBkaXJlY3Qgc3VibWlzc2lvbnNcblxuICAgIGlmICghdXJsIHx8IHVybCA9PT0gJycpIHtcbiAgICAgIC8vIGZpZ3VyZSBvdXQgVVJMIGF1dG9tYXRpY2FsbHkgdGhlblxuICAgICAgdXJsID0gZG9jdW1lbnQuYmFzZVVSSVxuICAgIH1cblxuICAgIC8vIGNhbiBiZSBtaXNzaW5nIHdoZW4gbm8gdmlkZW9tYWlsIHdhcyByZWNvcmRlZCBhbmQgaXMgbm90IHJlcXVpcmVkXG4gICAgaWYgKHZpZGVvbWFpbFJlc3BvbnNlKSB7XG4gICAgICBmb3JtRGF0YVtvcHRpb25zLnNlbGVjdG9ycy5hbGlhc0lucHV0TmFtZV0gPSB2aWRlb21haWxSZXNwb25zZS52aWRlb21haWwuYWxpYXNcbiAgICB9XG5cbiAgICByZXNvdXJjZS5mb3JtKGZvcm1EYXRhLCB1cmwsIGNiKVxuICB9XG5cbiAgZnVuY3Rpb24gZmluYWxpemVTdWJtaXNzaW9ucyAoZXJyLCBtZXRob2QsIHZpZGVvbWFpbCwgcmVzcG9uc2UsIGZvcm1SZXNwb25zZSkge1xuICAgIHNlbGYuZW5kV2FpdGluZygpXG5cbiAgICBpZiAoZXJyKSB7XG4gICAgICBzZWxmLmVtaXQoRXZlbnRzLkVSUk9SLCBlcnIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHN1Ym1pdHRlZCA9IHRydWVcblxuICAgICAgLy8gbWVyZ2UgdHdvIGpzb24gcmVzcG9uc2UgYm9kaWVzIHRvIGZha2UgYXMgaWYgaXQgd2VyZSBvbmx5IG9uZSByZXF1ZXN0XG4gICAgICBpZiAocmVzcG9uc2UgJiYgZm9ybVJlc3BvbnNlICYmIGZvcm1SZXNwb25zZS5ib2R5KSB7XG4gICAgICAgIE9iamVjdC5rZXlzKGZvcm1SZXNwb25zZS5ib2R5KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXNwb25zZVtrZXldID0gZm9ybVJlc3BvbnNlLmJvZHlba2V5XVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBzZWxmLmVtaXQoXG4gICAgICAgIEV2ZW50cy5TVUJNSVRURUQsXG4gICAgICAgIHZpZGVvbWFpbCxcbiAgICAgICAgcmVzcG9uc2UgfHwgZm9ybVJlc3BvbnNlXG4gICAgICApXG5cbiAgICAgIGlmIChmb3JtUmVzcG9uc2UgJiYgZm9ybVJlc3BvbnNlLnR5cGUgPT09ICd0ZXh0L2h0bWwnICYmIGZvcm1SZXNwb25zZS50ZXh0KSB7XG4gICAgICAgIC8vIHNlcnZlciByZXBsaWVkIHdpdGggSFRNTCBjb250ZW50cyAtIGRpc3BsYXkgdGhlc2VcbiAgICAgICAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSBmb3JtUmVzcG9uc2UudGV4dFxuXG4gICAgICAgIC8vIHRvZG86IGZpZ3VyZSBvdXQgaG93IHRvIGZpcmUgZG9tJ3Mgb25sb2FkIGV2ZW50IGFnYWluXG4gICAgICAgIC8vIHRvZG86IG9yIGhvdyB0byBydW4gYWxsIHRoZSBzY3JpcHRzIG92ZXIgYWdhaW5cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLmFkZFBsYXllckRpbWVuc2lvbnMgPSBmdW5jdGlvbiAodmlkZW9tYWlsLCBlbGVtZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgIHZpZGVvbWFpbC5wbGF5ZXJIZWlnaHQgPSB0aGlzLmNhbGN1bGF0ZUhlaWdodCh7XG4gICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXG4gICAgICAgIHZpZGVvV2lkdGg6IHZpZGVvbWFpbC53aWR0aCxcbiAgICAgICAgcmF0aW86IHZpZGVvbWFpbC5oZWlnaHQgLyB2aWRlb21haWwud2lkdGhcbiAgICAgIH0sIGVsZW1lbnQpXG5cbiAgICAgIHZpZGVvbWFpbC5wbGF5ZXJXaWR0aCA9IHRoaXMuY2FsY3VsYXRlV2lkdGgoe1xuICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxuICAgICAgICB2aWRlb0hlaWdodDogdmlkZW9tYWlsLnBsYXllckhlaWdodCxcbiAgICAgICAgcmF0aW86IHZpZGVvbWFpbC5oZWlnaHQgLyB2aWRlb21haWwud2lkdGhcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiB2aWRlb21haWxcbiAgICB9IGNhdGNoIChleGMpIHtcbiAgICAgIHNlbGYuZW1pdChFdmVudHMuRVJST1IsIGV4YylcbiAgICB9XG4gIH1cblxuICB0aGlzLmxpbWl0V2lkdGggPSBmdW5jdGlvbiAod2lkdGgpIHtcbiAgICByZXR1cm4gRGltZW5zaW9uLmxpbWl0V2lkdGgoY29udGFpbmVyRWxlbWVudCwgd2lkdGgsIG9wdGlvbnMpXG4gIH1cblxuICB0aGlzLmxpbWl0SGVpZ2h0ID0gZnVuY3Rpb24gKGhlaWdodCkge1xuICAgIHJldHVybiBEaW1lbnNpb24ubGltaXRIZWlnaHQoaGVpZ2h0LCBvcHRpb25zKVxuICB9XG5cbiAgdGhpcy5jYWxjdWxhdGVXaWR0aCA9IGZ1bmN0aW9uIChmbk9wdGlvbnMpIHtcbiAgICByZXR1cm4gRGltZW5zaW9uLmNhbGN1bGF0ZVdpZHRoKFxuICAgICAgT3B0aW9uc1dyYXBwZXIubWVyZ2Uob3B0aW9ucywgZm5PcHRpb25zLCB0cnVlKVxuICAgIClcbiAgfVxuXG4gIHRoaXMuY2FsY3VsYXRlSGVpZ2h0ID0gZnVuY3Rpb24gKGZuT3B0aW9ucywgZWxlbWVudCkge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgaWYgKGNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudCA9IGNvbnRhaW5lckVsZW1lbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGJldHRlciB0aGFuIG5vdGhpbmdcbiAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmJvZHlcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gRGltZW5zaW9uLmNhbGN1bGF0ZUhlaWdodChcbiAgICAgIGVsZW1lbnQsXG4gICAgICBPcHRpb25zV3JhcHBlci5tZXJnZShvcHRpb25zLCBmbk9wdGlvbnMsIHRydWUpXG4gICAgKVxuICB9XG5cbiAgdGhpcy5hcmVWaXN1YWxzSGlkZGVuID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB2aXN1YWxzLmlzSGlkZGVuKClcbiAgfVxuXG4gIHRoaXMuaGFzRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFjb250YWluZXJFbGVtZW50XG4gIH1cblxuICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICBjb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3B0aW9ucy5zZWxlY3RvcnMuY29udGFpbmVySWQpXG5cbiAgICAgIC8vIG9ubHkgYnVpbGQgd2hlbiBhIGNvbnRhaW5lciBlbGVtZW50IGhhc3QgYmVlbiBmb3VuZCwgb3RoZXJ3aXNlXG4gICAgICAvLyBiZSBzaWxlbnQgYW5kIGRvIG5vdGhpbmdcbiAgICAgIGlmIChjb250YWluZXJFbGVtZW50KSB7XG4gICAgICAgIG9wdGlvbnMuaW5zZXJ0Q3NzICYmIHByZXBlbmREZWZhdWx0Q3NzKClcblxuICAgICAgICAhYnVpbHQgJiYgaW5pdEV2ZW50cygpXG4gICAgICAgIHZhbGlkYXRlT3B0aW9ucygpXG4gICAgICAgIGNvcnJlY3REaW1lbnNpb25zKClcblxuICAgICAgICBpZiAoIW9wdGlvbnMucGxheWVyT25seSkge1xuICAgICAgICAgIGJ1aWxkRm9ybSgpXG4gICAgICAgIH1cblxuICAgICAgICBidWlsZENoaWxkcmVuKClcblxuICAgICAgICBpZiAoIWhhc0Vycm9yKSB7XG4gICAgICAgICAgZGVidWcoJ0NvbnRhaW5lcjogYnVpbHQuJylcbiAgICAgICAgICBidWlsdCA9IHRydWVcbiAgICAgICAgICBzZWxmLmVtaXQoRXZlbnRzLkJVSUxUKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdDb250YWluZXI6IGJ1aWxkaW5nIGZhaWxlZCBkdWUgdG8gYW4gZXJyb3IuJylcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY29tbWVudGVkIG91dCBzaW5jZSBpdCBkb2VzIHRvbyBtdWNoIG5vaXNlIG9uIHZpZGVvbWFpbCdzIHZpZXcgcGFnZSB3aGljaCBpcyBmaW5lXG4gICAgICAgIC8vIGRlYnVnKCdDb250YWluZXI6IG5vIGNvbnRhaW5lciBlbGVtZW50IHdpdGggSUQgJyArIG9wdGlvbnMuc2VsZWN0b3JzLmNvbnRhaW5lcklkICsgJyBmb3VuZC4gRG8gbm90aGluZy4nKVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgaWYgKHZpc3VhbHMuaXNOb3RpZmllckJ1aWx0KCkpIHtcbiAgICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgZXhjKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXhjXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5nZXRTdWJtaXRCdXR0b24gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGJ1dHRvbnMuZ2V0U3VibWl0QnV0dG9uKClcbiAgfVxuXG4gIHRoaXMucXVlcnlTZWxlY3RvciA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgIHJldHVybiBjb250YWluZXJFbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXG4gIH1cblxuICB0aGlzLmJlZ2luV2FpdGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICBodG1sRWxlbWVudC5jbGFzc0xpc3QgJiYgaHRtbEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnd2FpdCcpXG4gIH1cblxuICB0aGlzLmVuZFdhaXRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgaHRtbEVsZW1lbnQuY2xhc3NMaXN0ICYmIGh0bWxFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3dhaXQnKVxuICB9XG5cbiAgdGhpcy5hcHBlbmRDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGQpXG4gIH1cblxuICB0aGlzLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIChjaGlsZCwgcmVmZXJlbmNlKSB7XG4gICAgY29udGFpbmVyRWxlbWVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHJlZmVyZW5jZSlcbiAgfVxuXG4gIHRoaXMudW5sb2FkID0gZnVuY3Rpb24gKGUpIHtcbiAgICBkZWJ1ZygnQ29udGFpbmVyOiB1bmxvYWQoKScsIGUpXG5cbiAgICB0cnkge1xuICAgICAgdW5sb2FkQ2hpbGRyZW4oZSlcbiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKClcblxuICAgICAgYnVpbHQgPSBzdWJtaXR0ZWQgPSBmYWxzZVxuICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgZXhjKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29udGFpbmVyRWxlbWVudCkge1xuICAgICAgaGlkZGVuKGNvbnRhaW5lckVsZW1lbnQsIGZhbHNlKVxuXG4gICAgICB2aXN1YWxzLnNob3coKVxuXG4gICAgICBpZiAoIWhhc0Vycm9yKSB7XG4gICAgICAgIGNvbnN0IHBhdXNlZCA9IHNlbGYuaXNQYXVzZWQoKVxuXG4gICAgICAgIGlmIChwYXVzZWQpIHtcbiAgICAgICAgICBidXR0b25zLmFkanVzdEJ1dHRvbnNGb3JQYXVzZSgpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBzaW5jZSBodHRwczovL2dpdGh1Yi5jb20vYmluYXJ5a2l0Y2hlbi92aWRlb21haWwtY2xpZW50L2lzc3Vlcy82MFxuICAgICAgICAvLyB3ZSBoaWRlIGFyZWFzIHRvIG1ha2UgaXQgZWFzaWVyIGZvciB0aGUgdXNlclxuICAgICAgICBidXR0b25zLnNob3coKVxuXG4gICAgICAgIGlmIChzZWxmLmlzUmVwbGF5U2hvd24oKSkge1xuICAgICAgICAgIHNlbGYuZW1pdChFdmVudHMuUFJFVklFVylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLmVtaXQoRXZlbnRzLkZPUk1fUkVBRFksIHsgcGF1c2VkOiBwYXVzZWQgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1ZygnQ29udGFpbmVyOiBoaWRlKCknKVxuXG4gICAgaGFzRXJyb3IgPSBmYWxzZVxuXG4gICAgdGhpcy5pc1JlY29yZGluZygpICYmIHRoaXMucGF1c2UoKVxuXG4gICAgdmlzdWFscy5oaWRlKClcblxuICAgIGlmIChzdWJtaXR0ZWQpIHtcbiAgICAgIGJ1dHRvbnMuaGlkZSgpXG4gICAgICBoaWRlTXlTZWxmKClcbiAgICB9XG4gIH1cblxuICB0aGlzLnN0YXJ0T3ZlciA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICB0cnkge1xuICAgICAgc2VsZi5lbWl0KEV2ZW50cy5TVEFSVElOR19PVkVSKVxuXG4gICAgICBzdWJtaXR0ZWQgPSBmYWxzZVxuICAgICAgZm9ybS5zaG93KClcbiAgICAgIHZpc3VhbHMuYmFjayhwYXJhbXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5rZWVwSGlkZGVuKSB7XG4gICAgICAgICAgLy8ganVzdCBlbmFibGUgZm9ybSwgZG8gbm90aGluZyBlbHNlLlxuICAgICAgICAgIC8vIHNlZSBleGFtcGxlIGNvbnRhY3RfZm9ybS5odG1sIHdoZW4geW91IHN1Ym1pdCB3aXRob3V0IHZpZGVvbWlsXG4gICAgICAgICAgLy8gYW5kIGdvIGJhY2tcbiAgICAgICAgICBzZWxmLmVuYWJsZUZvcm0oKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuc2hvdyhwYXJhbXMpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBjYXRjaCAoZXhjKSB7XG4gICAgICBzZWxmLmVtaXQoRXZlbnRzLkVSUk9SLCBleGMpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5zaG93UmVwbGF5T25seSA9IGZ1bmN0aW9uICgpIHtcbiAgICBoYXNFcnJvciA9IGZhbHNlXG5cbiAgICB0aGlzLmlzUmVjb3JkaW5nKCkgJiYgdGhpcy5wYXVzZSgpXG5cbiAgICB2aXN1YWxzLnNob3dSZXBsYXlPbmx5KClcblxuICAgIHN1Ym1pdHRlZCAmJiBidXR0b25zLmhpZGUoKVxuICB9XG5cbiAgdGhpcy5pc05vdGlmeWluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdmlzdWFscy5pc05vdGlmeWluZygpXG4gIH1cblxuICB0aGlzLmlzUGF1c2VkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB2aXN1YWxzLmlzUGF1c2VkKClcbiAgfVxuXG4gIHRoaXMucGF1c2UgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgdmlzdWFscy5wYXVzZShwYXJhbXMpXG4gIH1cblxuICAvLyB0aGlzIGNvZGUgbmVlZHMgYSBnb29kIHJld3JpdGUgOihcbiAgdGhpcy52YWxpZGF0ZSA9IGZ1bmN0aW9uIChmb3JjZSkge1xuICAgIHZhciBydW5WYWxpZGF0aW9uID0gdHJ1ZVxuICAgIHZhciB2YWxpZFxuXG4gICAgaWYgKCFvcHRpb25zLmVuYWJsZUF1dG9WYWxpZGF0aW9uKSB7XG4gICAgICBydW5WYWxpZGF0aW9uID0gZmFsc2VcbiAgICAgIGxhc3RWYWxpZGF0aW9uID0gdHJ1ZSAvLyBuZWVkZWQgc28gdGhhdCBpdCBjYW4gYmUgc3VibWl0dGVkIGFueXdheSwgc2VlIHN1Ym1pdCgpXG4gICAgfSBlbHNlIGlmIChmb3JjZSkge1xuICAgICAgcnVuVmFsaWRhdGlvbiA9IGZvcmNlXG4gICAgfSBlbHNlIGlmIChzZWxmLmlzTm90aWZ5aW5nKCkpIHtcbiAgICAgIHJ1blZhbGlkYXRpb24gPSBmYWxzZVxuICAgIH0gZWxzZSBpZiAodmlzdWFscy5pc0Nvbm5lY3RlZCgpKSB7XG4gICAgICBydW5WYWxpZGF0aW9uID0gdmlzdWFscy5pc1VzZXJNZWRpYUxvYWRlZCgpIHx8IHZpc3VhbHMuaXNSZXBsYXlTaG93bigpXG4gICAgfSBlbHNlIGlmICh2aXN1YWxzLmlzQ29ubmVjdGluZygpKSB7XG4gICAgICBydW5WYWxpZGF0aW9uID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAocnVuVmFsaWRhdGlvbikge1xuICAgICAgdGhpcy5lbWl0KEV2ZW50cy5WQUxJREFUSU5HKVxuXG4gICAgICBjb25zdCB2aXN1YWxzVmFsaWQgPSB2aXN1YWxzLnZhbGlkYXRlKCkgJiYgYnV0dG9ucy5pc1JlY29yZEFnYWluQnV0dG9uRW5hYmxlZCgpXG4gICAgICB2YXIgd2h5SW52YWxpZFxuXG4gICAgICBpZiAoZm9ybSkge1xuICAgICAgICB2YWxpZCA9IGZvcm0udmFsaWRhdGUoKVxuXG4gICAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICAgIGlmICghdGhpcy5hcmVWaXN1YWxzSGlkZGVuKCkgJiYgIXZpc3VhbHNWYWxpZCkge1xuICAgICAgICAgICAgaWYgKHN1Ym1pdHRlZCB8fCB0aGlzLmlzUmVhZHkoKSB8fCB0aGlzLmlzUmVjb3JkaW5nKCkgfHwgdGhpcy5pc1BhdXNlZCgpIHx8IHRoaXMuaXNDb3VudGluZ0Rvd24oKSkge1xuICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgICAgICAgd2h5SW52YWxpZCA9ICdWaWRlbyBpcyBub3QgcmVjb3JkZWQnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGludmFsaWRJbnB1dCA9IGZvcm0uZ2V0SW52YWxpZEVsZW1lbnQoKVxuXG4gICAgICAgICAgaWYgKGludmFsaWRJbnB1dCkge1xuICAgICAgICAgICAgd2h5SW52YWxpZCA9ICdGb3JtIGlucHV0IG5hbWVkICcgKyBpbnZhbGlkSW5wdXQubmFtZSArICcgaXMgaW52YWxpZCdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2h5SW52YWxpZCA9ICdGb3JtIGlucHV0KHMoKSBhcmUgaW52YWxpZCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbGlkID0gdmlzdWFsc1ZhbGlkXG4gICAgICB9XG5cbiAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICB0aGlzLmVtaXQoRXZlbnRzLlZBTElEKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lbWl0KEV2ZW50cy5JTlZBTElELCB3aHlJbnZhbGlkKVxuICAgICAgfVxuXG4gICAgICBsYXN0VmFsaWRhdGlvbiA9IHZhbGlkXG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkXG4gIH1cblxuICB0aGlzLmRpc2FibGVGb3JtID0gZnVuY3Rpb24gKGJ1dHRvbnNUb28pIHtcbiAgICBmb3JtICYmIGZvcm0uZGlzYWJsZShidXR0b25zVG9vKVxuICB9XG5cbiAgdGhpcy5lbmFibGVGb3JtID0gZnVuY3Rpb24gKGJ1dHRvbnNUb28pIHtcbiAgICBmb3JtICYmIGZvcm0uZW5hYmxlKGJ1dHRvbnNUb28pXG4gIH1cblxuICB0aGlzLmhhc0Zvcm0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhZm9ybVxuICB9XG5cbiAgdGhpcy5pc1JlYWR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBidXR0b25zLmlzUmVjb3JkQnV0dG9uRW5hYmxlZCgpXG4gIH1cblxuICBmdW5jdGlvbiBpc1Bvc3QgKG1ldGhvZCkge1xuICAgIHJldHVybiBtZXRob2QgJiYgbWV0aG9kLnRvVXBwZXJDYXNlKCkgPT09ICdQT1NUJ1xuICB9XG5cbiAgZnVuY3Rpb24gaXNQdXQgKG1ldGhvZCkge1xuICAgIHJldHVybiBtZXRob2QgJiYgbWV0aG9kLnRvVXBwZXJDYXNlKCkgPT09ICdQVVQnXG4gIH1cblxuICB0aGlzLnN1Ym1pdEFsbCA9IGZ1bmN0aW9uIChmb3JtRGF0YSwgbWV0aG9kLCB1cmwpIHtcbiAgICBjb25zdCBwb3N0ID0gaXNQb3N0KG1ldGhvZClcbiAgICBjb25zdCBoYXNWaWRlb21haWxLZXkgPSAhIWZvcm1EYXRhW29wdGlvbnMuc2VsZWN0b3JzLmtleUlucHV0TmFtZV1cblxuICAgIGZ1bmN0aW9uIHN0YXJ0U3VibWlzc2lvbiAoKSB7XG4gICAgICBzZWxmLmJlZ2luV2FpdGluZygpXG4gICAgICBzZWxmLmRpc2FibGVGb3JtKHRydWUpXG4gICAgICBzZWxmLmVtaXQoRXZlbnRzLlNVQk1JVFRJTkcpXG4gICAgfVxuXG4gICAgLy8gYSBjbG9zdXJlIHNvIHRoYXQgd2UgY2FuIGFjY2VzcyBtZXRob2RcbiAgICB2YXIgc3VibWl0VmlkZW9tYWlsQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZXJyMSwgdmlkZW9tYWlsLCB2aWRlb21haWxSZXNwb25zZSkge1xuICAgICAgaWYgKGVycjEpIHtcbiAgICAgICAgZmluYWxpemVTdWJtaXNzaW9ucyhlcnIxLCBtZXRob2QsIHZpZGVvbWFpbCwgdmlkZW9tYWlsUmVzcG9uc2UpXG4gICAgICB9IGVsc2UgaWYgKHBvc3QpIHtcbiAgICAgICAgc3VibWl0Rm9ybShmb3JtRGF0YSwgdmlkZW9tYWlsUmVzcG9uc2UsIHVybCwgZnVuY3Rpb24gKGVycjIsIGZvcm1SZXNwb25zZSkge1xuICAgICAgICAgIGZpbmFsaXplU3VibWlzc2lvbnMoZXJyMiwgbWV0aG9kLCB2aWRlb21haWwsIHZpZGVvbWFpbFJlc3BvbnNlLCBmb3JtUmVzcG9uc2UpXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpdCdzIGEgZGlyZWN0IHN1Ym1pc3Npb25cbiAgICAgICAgZmluYWxpemVTdWJtaXNzaW9ucyhudWxsLCBtZXRob2QsIHZpZGVvbWFpbCwgdmlkZW9tYWlsUmVzcG9uc2UpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gIWhhc1ZpZGVvbWFpbEtleSBtYWtlcyBpdCBwb3NzaWJsZSB0byBzdWJtaXQgZm9ybSB3aGVuIHZpZGVvbWFpbCBpdHNlbGZcbiAgICAvLyBpcyBub3Qgb3B0aW9uYWwuXG4gICAgaWYgKCFoYXNWaWRlb21haWxLZXkpIHtcbiAgICAgIGlmIChvcHRpb25zLmVuYWJsZUF1dG9TdWJtaXNzaW9uKSB7XG4gICAgICAgIHN0YXJ0U3VibWlzc2lvbigpXG4gICAgICAgIHN1Ym1pdEZvcm0oZm9ybURhdGEsIG51bGwsIHVybCwgZnVuY3Rpb24gKGVycjIsIGZvcm1SZXNwb25zZSkge1xuICAgICAgICAgIGZpbmFsaXplU3VibWlzc2lvbnMoZXJyMiwgbWV0aG9kLCBudWxsLCBudWxsLCBmb3JtUmVzcG9uc2UpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICAvLyAuLi4gYW5kIHdoZW4gdGhlIGVuYWJsZUF1dG9TdWJtaXNzaW9uIG9wdGlvbiBpcyBmYWxzZSxcbiAgICAgIC8vIHRoZW4gdGhhdCBjYW4gbWVhbiwgbGVhdmUgaXQgdG8gdGhlIGZyYW1ld29yayB0byBwcm9jZXNzIHdpdGggdGhlIGZvcm1cbiAgICAgIC8vIHZhbGlkYXRpb24vaGFuZGxpbmcvc3VibWlzc2lvbiBpdHNlbGYuIGZvciBleGFtcGxlIHRoZSBuaW5qYSBmb3JtXG4gICAgICAvLyB3aWxsIHdhbnQgdG8gaGlnaGxpZ2h0IHdoaWNoIG9uZSBpbnB1dCBhcmUgd3JvbmcuXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0U3VibWlzc2lvbigpXG4gICAgICBzdWJtaXRWaWRlb21haWwoZm9ybURhdGEsIG1ldGhvZCwgc3VibWl0VmlkZW9tYWlsQ2FsbGJhY2spXG4gICAgfVxuICB9XG5cbiAgdGhpcy5pc0J1aWx0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBidWlsdFxuICB9XG5cbiAgdGhpcy5pc1JlcGxheVNob3duID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB2aXN1YWxzLmlzUmVwbGF5U2hvd24oKVxuICB9XG5cbiAgdGhpcy5pc0RpcnR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpc0RpcnR5ID0gZmFsc2VcblxuICAgIGlmIChmb3JtKSB7XG4gICAgICBpZiAodmlzdWFscy5pc1JlY29yZGVyVW5sb2FkZWQoKSkge1xuICAgICAgICBpc0RpcnR5ID0gZmFsc2VcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1JlcGxheVNob3duKCkgfHwgdGhpcy5pc1BhdXNlZCgpKSB7XG4gICAgICAgIGlzRGlydHkgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzRGlydHlcbiAgfVxuXG4gIHRoaXMuZ2V0UmVwbGF5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB2aXN1YWxzLmdldFJlcGxheSgpXG4gIH1cblxuICB0aGlzLmlzT3V0c2lkZUVsZW1lbnRPZiA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSAhPT0gY29udGFpbmVyRWxlbWVudCAmJiBlbGVtZW50ICE9PSBjb250YWluZXJFbGVtZW50XG4gIH1cblxuICB0aGlzLmhpZGVGb3JtID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIC8vIGZvcm0gY2hlY2sgbmVlZGVkLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLWNsaWVudC9pc3N1ZXMvMTI3XG4gICAgZm9ybSAmJiBmb3JtLmhpZGUoKVxuICAgIGJ1dHRvbnMgJiYgYnV0dG9ucy5oaWRlKHBhcmFtcylcbiAgfVxuXG4gIHRoaXMubG9hZEZvcm0gPSBmdW5jdGlvbiAodmlkZW9tYWlsKSB7XG4gICAgaWYgKGZvcm0pIHtcbiAgICAgIGZvcm0ubG9hZFZpZGVvbWFpbCh2aWRlb21haWwpXG4gICAgICB0aGlzLnZhbGlkYXRlKClcbiAgICB9XG4gIH1cblxuICB0aGlzLmVuYWJsZUF1ZGlvID0gZnVuY3Rpb24gKCkge1xuICAgIG9wdGlvbnMuc2V0QXVkaW9FbmFibGVkKHRydWUpXG4gICAgdGhpcy5lbWl0KEV2ZW50cy5FTkFCTElOR19BVURJTylcbiAgfVxuXG4gIHRoaXMuZGlzYWJsZUF1ZGlvID0gZnVuY3Rpb24gKCkge1xuICAgIG9wdGlvbnMuc2V0QXVkaW9FbmFibGVkKGZhbHNlKVxuICAgIHRoaXMuZW1pdChFdmVudHMuRElTQUJMSU5HX0FVRElPKVxuICB9XG5cbiAgdGhpcy5zdWJtaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGFzdFZhbGlkYXRpb24gJiYgZm9ybSAmJiBmb3JtLmRvVGhlU3VibWl0KClcbiAgfVxuXG4gIHRoaXMuaXNDb3VudGluZ0Rvd24gPSB2aXN1YWxzLmlzQ291bnRpbmdEb3duLmJpbmQodmlzdWFscylcbiAgdGhpcy5pc1JlY29yZGluZyA9IHZpc3VhbHMuaXNSZWNvcmRpbmcuYmluZCh2aXN1YWxzKVxuICB0aGlzLnJlY29yZCA9IHZpc3VhbHMucmVjb3JkLmJpbmQodmlzdWFscylcbiAgdGhpcy5yZXN1bWUgPSB2aXN1YWxzLnJlc3VtZS5iaW5kKHZpc3VhbHMpXG4gIHRoaXMuc3RvcCA9IHZpc3VhbHMuc3RvcC5iaW5kKHZpc3VhbHMpXG4gIHRoaXMucmVjb3JkQWdhaW4gPSB2aXN1YWxzLnJlY29yZEFnYWluLmJpbmQodmlzdWFscylcbn1cblxudXRpbC5pbmhlcml0cyhDb250YWluZXIsIEV2ZW50RW1pdHRlcilcblxuZXhwb3J0IGRlZmF1bHQgQ29udGFpbmVyXG4iLCJpbXBvcnQgbnVtYmVySXNJbnRlZ2VyIGZyb20gJ251bWJlci1pcy1pbnRlZ2VyJ1xuXG5pbXBvcnQgVmlkZW9tYWlsRXJyb3IgZnJvbSAnLi8uLi91dGlsL3ZpZGVvbWFpbEVycm9yJ1xuXG5mdW5jdGlvbiBnZXRPdXRlcldpZHRoIChlbGVtZW50KSB7XG4gIHZhciBvdXRlcldpZHRoID0gMFxuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICBpZiAocmVjdCkge1xuICAgIG91dGVyV2lkdGggPSByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0XG4gIH1cblxuICBpZiAob3V0ZXJXaWR0aCA8IDEpIHtcbiAgICAvLyBsYXN0IGVmZm9ydCwgY2FuIGhhcHBlbiB3aGVuIHJlcGxheWluZyBvbmx5XG4gICAgcmVjdCA9IGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICBvdXRlcldpZHRoID0gcmVjdC5yaWdodCAtIHJlY3QubGVmdFxuICB9XG5cbiAgcmV0dXJuIG91dGVyV2lkdGhcbn1cblxuZnVuY3Rpb24gZmlndXJlTWluSGVpZ2h0IChoZWlnaHQsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMuaGFzRGVmaW5lZEhlaWdodCgpKSB7XG4gICAgaWYgKCFoZWlnaHQpIHtcbiAgICAgIGhlaWdodCA9IG9wdGlvbnMudmlkZW8uaGVpZ2h0XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlaWdodCA9IE1hdGgubWluKG9wdGlvbnMudmlkZW8uaGVpZ2h0LCBoZWlnaHQpXG4gICAgfVxuICB9XG5cbiAgaWYgKG51bWJlcklzSW50ZWdlcihoZWlnaHQpICYmIGhlaWdodCA8IDEpIHtcbiAgICB0aHJvdyBWaWRlb21haWxFcnJvci5jcmVhdGUoXG4gICAgICAnR290IGEgdmlkZW8gaGVpZ2h0IGxlc3MgdGhhbiAxICgnICtcbiAgICAgIGhlaWdodCArXG4gICAgICAnKSB3aGlsZSBmaWd1cmluZyBvdXQgdGhlIG1pbmltdW0hJyxcbiAgICAgIG9wdGlvbnNcbiAgICApXG4gIH1cblxuICAvLyBqdXN0IHJldHVybiBpdCwgY2FuIGJlIFwiYXV0b1wiXG4gIHJldHVybiBoZWlnaHRcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gIGxpbWl0V2lkdGg6IGZ1bmN0aW9uIChlbGVtZW50LCB3aWR0aCwgb3B0aW9ucykge1xuICAgIHZhciBsaW1pdGVkV2lkdGhcblxuICAgIGNvbnN0IG91dGVyV2lkdGggPSBnZXRPdXRlcldpZHRoKGVsZW1lbnQpXG5cbiAgICBpZiAod2lkdGgpIHtcbiAgICAgIC8vIG9ubHkgd2hlbiB0aGF0IGVsZW1lbnQgaGFzIGEgZGVmaW5lZCB3aWR0aCwgYXBwbHkgdGhpcyBsb2dpY1xuICAgICAgbGltaXRlZFdpZHRoID0gb3V0ZXJXaWR0aCA+IDAgJiYgb3V0ZXJXaWR0aCA8IHdpZHRoID8gb3V0ZXJXaWR0aCA6IHdpZHRoXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVsc2UgYXBwbHkgdGhlIG91dGVyIHdpZHRoIHdoZW4gdGhlIGVsZW1lbnQgaGFzIG5vIGRlZmluZWQgd2lkdGggeWV0XG4gICAgICBsaW1pdGVkV2lkdGggPSBvdXRlcldpZHRoXG4gICAgfVxuXG4gICAgaWYgKG51bWJlcklzSW50ZWdlcihsaW1pdGVkV2lkdGgpICYmIGxpbWl0ZWRXaWR0aCA8IDEpIHtcbiAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnTGltaXRlZCB3aWR0aCBjYW5ub3QgYmUgbGVzcyB0aGFuIDEhJywgb3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGxpbWl0ZWRXaWR0aFxuICAgIH1cbiAgfSxcblxuICAvLyB0aGlzIGlzIGRpZmZpY3VsdCB0byBjb21wdXRlIGFuZCBpcyBub3QgZW50aXJlbHkgY29ycmVjdC5cbiAgLy8gYnV0IGdvb2QgZW5vdWdoIGZvciBub3cgdG8gZW5zdXJlIHNvbWUgc3RhYmlsaXR5LlxuICBsaW1pdEhlaWdodDogZnVuY3Rpb24gKGhlaWdodCwgb3B0aW9ucykge1xuICAgIGlmIChudW1iZXJJc0ludGVnZXIoaGVpZ2h0KSAmJiBoZWlnaHQgPCAxKSB7XG4gICAgICB0aHJvdyBWaWRlb21haWxFcnJvci5jcmVhdGUoJ1Bhc3NlZCBsaW1pdC1oZWlnaHQgYXJndW1lbnQgY2Fubm90IGJlIGxlc3MgdGhhbiAxIScsIG9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGxpbWl0ZWRIZWlnaHQgPSBNYXRoLm1pbihcbiAgICAgICAgaGVpZ2h0LFxuICAgICAgICAvLyBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCxcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuICAgICAgKVxuXG4gICAgICBpZiAobGltaXRlZEhlaWdodCA8IDEpIHtcbiAgICAgICAgdGhyb3cgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdMaW1pdGVkIGhlaWdodCBjYW5ub3QgYmUgbGVzcyB0aGFuIDEhJywgb3B0aW9ucylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBsaW1pdGVkSGVpZ2h0XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNhbGN1bGF0ZVdpZHRoOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciBoZWlnaHQgPSBvcHRpb25zLnZpZGVvSGVpZ2h0IHx8IG51bGxcbiAgICBjb25zdCByYXRpbyA9IG9wdGlvbnMucmF0aW8gfHwgb3B0aW9ucy5nZXRSYXRpbygpXG5cbiAgICBoZWlnaHQgPSBmaWd1cmVNaW5IZWlnaHQoaGVpZ2h0LCBvcHRpb25zKVxuXG4gICAgaWYgKG9wdGlvbnMucmVzcG9uc2l2ZSkge1xuICAgICAgaGVpZ2h0ID0gdGhpcy5saW1pdEhlaWdodChoZWlnaHQsIG9wdGlvbnMpXG4gICAgfVxuXG4gICAgaWYgKG51bWJlcklzSW50ZWdlcihoZWlnaHQpICYmIGhlaWdodCA8IDEpIHtcbiAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnSGVpZ2h0IGNhbm5vdCBiZSBzbWFsbGVyIHRoYW4gMSB3aGVuIGNhbGN1bGF0aW5nIHdpZHRoLicsIG9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNhbGN1bGF0ZWRXaWR0aCA9IHBhcnNlSW50KGhlaWdodCAvIHJhdGlvKVxuXG4gICAgICBpZiAoY2FsY3VsYXRlZFdpZHRoIDwgMSkge1xuICAgICAgICB0aHJvdyBWaWRlb21haWxFcnJvci5jcmVhdGUoJ0NhbGN1bGF0ZWQgd2lkdGggY2Fubm90IGJlIHNtYWxsZXIgdGhhbiAxIScsIG9wdGlvbnMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY2FsY3VsYXRlZFdpZHRoXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNhbGN1bGF0ZUhlaWdodDogZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLnZpZGVvV2lkdGggfHwgbnVsbFxuICAgIHZhciBoZWlnaHRcblxuICAgIGNvbnN0IHJhdGlvID0gb3B0aW9ucy5yYXRpbyB8fCBvcHRpb25zLmdldFJhdGlvKClcblxuICAgIGlmIChvcHRpb25zLmhhc0RlZmluZWRXaWR0aCgpKSB7XG4gICAgICB3aWR0aCA9IG9wdGlvbnMudmlkZW8ud2lkdGhcbiAgICB9XG5cbiAgICBpZiAobnVtYmVySXNJbnRlZ2VyKHdpZHRoKSAmJiB3aWR0aCA8IDEpIHtcbiAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnVW5hYmxlIHRvIGNhbGN1bGF0ZSBoZWlnaHQgd2hlbiB3aWR0aCBpcyBsZXNzIHRoYW4gMS4nLCBvcHRpb25zKVxuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5yZXNwb25zaXZlKSB7XG4gICAgICB3aWR0aCA9IHRoaXMubGltaXRXaWR0aChlbGVtZW50LCB3aWR0aCwgb3B0aW9ucylcbiAgICB9XG5cbiAgICBpZiAod2lkdGgpIHtcbiAgICAgIGhlaWdodCA9IHBhcnNlSW50KHdpZHRoICogcmF0aW8pXG4gICAgfVxuXG4gICAgaWYgKG51bWJlcklzSW50ZWdlcihoZWlnaHQpICYmIGhlaWdodCA8IDEpIHtcbiAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnSnVzdCBjYWxjdWxhdGVkIGEgaGVpZ2h0IGxlc3MgdGhhbiAxIHdoaWNoIGlzIHdyb25nLicsIG9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmaWd1cmVNaW5IZWlnaHQoaGVpZ2h0LCBvcHRpb25zKVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IGggZnJvbSAnaHlwZXJzY3JpcHQnXG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJ1xuaW1wb3J0IGhpZGRlbiBmcm9tICdoaWRkZW4nXG5pbXBvcnQgZ2V0Rm9ybURhdGEgZnJvbSAnZ2V0LWZvcm0tZGF0YSdcblxuaW1wb3J0IEV2ZW50cyBmcm9tICcuLy4uL2V2ZW50cydcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi8uLi91dGlsL2V2ZW50RW1pdHRlcidcbmltcG9ydCBWaWRlb21haWxFcnJvciBmcm9tICcuLy4uL3V0aWwvdmlkZW9tYWlsRXJyb3InXG5cbmNvbnN0IEZvcm0gPSBmdW5jdGlvbiAoY29udGFpbmVyLCBmb3JtRWxlbWVudCwgb3B0aW9ucykge1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzLCBvcHRpb25zLCAnRm9ybScpXG5cbiAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICB2YXIgZGlzYWJsZUNvbnRhaW5lclZhbGlkYXRpb25cbiAgdmFyIGtleUlucHV0XG5cbiAgZnVuY3Rpb24gZ2V0RGF0YSAoKSB7XG4gICAgcmV0dXJuIGdldEZvcm1EYXRhKGZvcm1FbGVtZW50KVxuICB9XG5cbiAgdGhpcy5sb2FkVmlkZW9tYWlsID0gZnVuY3Rpb24gKHZpZGVvbWFpbCkge1xuICAgIGNvbnN0IGxpbWl0ID0gZm9ybUVsZW1lbnQuZWxlbWVudHMubGVuZ3RoXG5cbiAgICB2YXIgaW5wdXRcbiAgICB2YXIgbmFtZVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW1pdDsgaSsrKSB7XG4gICAgICBpbnB1dCA9IGZvcm1FbGVtZW50LmVsZW1lbnRzW2ldXG4gICAgICBuYW1lID0gaW5wdXQubmFtZVxuXG4gICAgICBpZiAodmlkZW9tYWlsW25hbWVdKSB7XG4gICAgICAgIGlucHV0LnZhbHVlID0gdmlkZW9tYWlsW25hbWVdXG4gICAgICB9XG5cbiAgICAgIGlmIChuYW1lID09PSBvcHRpb25zLnNlbGVjdG9ycy5zdWJqZWN0SW5wdXROYW1lIHx8XG4gICAgICAgICAgbmFtZSA9PT0gb3B0aW9ucy5zZWxlY3RvcnMuYm9keUlucHV0TmFtZSkge1xuICAgICAgICBpbnB1dC5kaXNhYmxlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3JtRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21ldGhvZCcsICdwdXQnKVxuICB9XG5cbiAgZnVuY3Rpb24gaXNOb3RCdXR0b24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC50YWdOYW1lICE9PSAnQlVUVE9OJyAmJiBlbGVtZW50LnR5cGUgIT09ICdzdWJtaXQnXG4gIH1cblxuICBmdW5jdGlvbiBzZXREaXNhYmxlZCAoZGlzYWJsZWQsIGJ1dHRvbnNUb28pIHtcbiAgICBjb25zdCBsaW1pdCA9IGZvcm1FbGVtZW50LmVsZW1lbnRzLmxlbmd0aFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW1pdDsgaSsrKSB7XG4gICAgICBpZiAoYnV0dG9uc1RvbyB8fCAoIWJ1dHRvbnNUb28gJiYgaXNOb3RCdXR0b24oZm9ybUVsZW1lbnQuZWxlbWVudHNbaV0pKSkge1xuICAgICAgICBmb3JtRWxlbWVudC5lbGVtZW50c1tpXS5kaXNhYmxlZCA9IGRpc2FibGVkXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGlkZUFsbCAoKSB7XG4gICAgY29uc3QgbGltaXQgPSBmb3JtRWxlbWVudC5lbGVtZW50cy5sZW5ndGhcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGltaXQ7IGkrKykge1xuICAgICAgaGlkZGVuKGZvcm1FbGVtZW50LmVsZW1lbnRzW2ldLCB0cnVlKVxuICAgIH1cblxuICAgIGhpZGRlbihmb3JtRWxlbWVudCwgdHJ1ZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldElucHV0RWxlbWVudHMgKCkge1xuICAgIHJldHVybiBmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCwgdGV4dGFyZWEnKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U2VsZWN0RWxlbWVudHMgKCkge1xuICAgIHJldHVybiBmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzZWxlY3QnKVxuICB9XG5cbiAgdGhpcy5kaXNhYmxlID0gZnVuY3Rpb24gKGJ1dHRvbnNUb28pIHtcbiAgICBzZXREaXNhYmxlZCh0cnVlLCBidXR0b25zVG9vKVxuICB9XG5cbiAgdGhpcy5lbmFibGUgPSBmdW5jdGlvbiAoYnV0dG9uc1Rvbykge1xuICAgIHNldERpc2FibGVkKGZhbHNlLCBidXR0b25zVG9vKVxuICB9XG5cbiAgdGhpcy5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAob3B0aW9ucy5lbmFibGVBdXRvVmFsaWRhdGlvbikge1xuICAgICAgY29uc3QgaW5wdXRFbGVtZW50cyA9IGdldElucHV0RWxlbWVudHMoKVxuICAgICAgdmFyIGlucHV0RWxlbWVudFxuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaW5wdXRFbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpbnB1dEVsZW1lbnQgPSBpbnB1dEVsZW1lbnRzW2ldXG5cbiAgICAgICAgaWYgKGlucHV0RWxlbWVudC50eXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci52YWxpZGF0ZSgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb250YWluZXIudmFsaWRhdGUoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICAvLyBiZWNhdXNlIG9mIGFuZ3VsYXIncyBkaWdlc3QgY3ljbGUsIHZhbGlkYXRlIGFnYWluIHdoZW4gaXQgYmVjYW1lIGludmFsaWRcbiAgICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ludmFsaWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFkaXNhYmxlQ29udGFpbmVyVmFsaWRhdGlvbikge1xuICAgICAgICAgICAgY29udGFpbmVyLnZhbGlkYXRlKClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNlbGVjdEVsZW1lbnRzID0gZ2V0U2VsZWN0RWxlbWVudHMoKVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgbGVuMiA9IHNlbGVjdEVsZW1lbnRzLmxlbmd0aDsgaiA8IGxlbjI7IGorKykge1xuICAgICAgICBzZWxlY3RFbGVtZW50c1tqXS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29udGFpbmVyLnZhbGlkYXRlKClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBrZXlJbnB1dCA9IGZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCInICsgb3B0aW9ucy5zZWxlY3RvcnMua2V5SW5wdXROYW1lICsgJ1wiXScpXG5cbiAgICBpZiAoIWtleUlucHV0KSB7XG4gICAgICBrZXlJbnB1dCA9IGgoJ2lucHV0Jywge1xuICAgICAgICBuYW1lOiBvcHRpb25zLnNlbGVjdG9ycy5rZXlJbnB1dE5hbWUsXG4gICAgICAgIHR5cGU6ICdoaWRkZW4nXG4gICAgICB9KVxuXG4gICAgICBmb3JtRWxlbWVudC5hcHBlbmRDaGlsZChrZXlJbnB1dClcbiAgICB9XG5cbiAgICB0aGlzLm9uKEV2ZW50cy5QUkVWSUVXLCBmdW5jdGlvbiAodmlkZW9tYWlsS2V5KSB7XG4gICAgICAvLyBiZXdhcmUgdGhhdCBwcmV2aWV3IGRvZXNuJ3QgYWx3YXlzIGNvbWUgd2l0aCBhIGtleSwgaS5FLlxuICAgICAgLy8gY29udGFpbmVyLnNob3coKSBjYW4gZW1pdCBQUkVWSUVXIHdpdGhvdXQgYSBrZXkgd2hlbiBhIHJlcGxheSBhbHJlYWR5IGV4aXN0c1xuICAgICAgLy8gKGNhbiBoYXBwZW4gd2hlbiBzaG93aW5nIC0gaGlkaW5nIC0gc2hvd2luZyB2aWRlb21haWwgb3ZlciBhZ2FpbilcblxuICAgICAgLy8gb25seSBlbWl0IGVycm9yIGlmIGtleSBpcyBtaXNzaW5nIEFORCB0aGUgaW5wdXQgaGFzIG5vIGtleSAodmFsdWUpIHlldFxuICAgICAgaWYgKCF2aWRlb21haWxLZXkgJiYgIWtleUlucHV0LnZhbHVlKSB7XG4gICAgICAgIHNlbGYuZW1pdChcbiAgICAgICAgICBFdmVudHMuRVJST1IsXG4gICAgICAgICAgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdWaWRlb21haWwga2V5IGZvciBwcmV2aWV3IGlzIG1pc3NpbmchJywgb3B0aW9ucylcbiAgICAgICAgKVxuICAgICAgfSBlbHNlIGlmICh2aWRlb21haWxLZXkpIHtcbiAgICAgICAga2V5SW5wdXQudmFsdWUgPSB2aWRlb21haWxLZXlcbiAgICAgIH1cbiAgICAgIC8vIGVsc2VcbiAgICAgIC8vIGxlYXZlIGFzIGl0IGFuZCB1c2UgZXhpc3Rpbmcga2V5SW5wdXQudmFsdWVcbiAgICB9KVxuXG4gICAgLy8gZml4ZXMgaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLWNsaWVudC9pc3N1ZXMvOTFcbiAgICB0aGlzLm9uKEV2ZW50cy5HT0lOR19CQUNLLCAoKSA9PiB7XG4gICAgICBrZXlJbnB1dC52YWx1ZSA9IG51bGxcbiAgICB9KVxuXG4gICAgdGhpcy5vbihFdmVudHMuRVJST1IsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIC8vIHNpbmNlIGh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC1jbGllbnQvaXNzdWVzLzYwXG4gICAgICAvLyB3ZSBoaWRlIGFyZWFzIHRvIG1ha2UgaXQgZWFzaWVyIGZvciB0aGUgdXNlciB0byBwcm9jZXNzIGFuIGVycm9yXG4gICAgICAvLyAoPSBsZXNzIGRpc3RyYWN0aW9ucylcbiAgICAgIGlmIChlcnIuaGlkZUZvcm0gJiYgZXJyLmhpZGVGb3JtKCkgJiYgb3B0aW9ucy5hZGp1c3RGb3JtT25Ccm93c2VyRXJyb3IpIHtcbiAgICAgICAgaGlkZUFsbCgpXG4gICAgICB9IGVsc2UgaWYgKGVyci5oaWRlQnV0dG9ucyAmJiBlcnIuaGlkZUJ1dHRvbnMoKSAmJiBvcHRpb25zLmFkanVzdEZvcm1PbkJyb3dzZXJFcnJvcikge1xuICAgICAgICBoaWRlU3VibWl0QnV0dG9uKClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5vbihFdmVudHMuQlVJTFQsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHN0YXJ0TGlzdGVuaW5nVG9TdWJtaXRFdmVudHMoKVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBoaWRlU3VibWl0QnV0dG9uICgpIHtcbiAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBzZWxmLmZpbmRTdWJtaXRCdXR0b24oKVxuICAgIGhpZGRlbihzdWJtaXRCdXR0b24sIHRydWUpXG4gIH1cblxuICBmdW5jdGlvbiBzdGFydExpc3RlbmluZ1RvU3VibWl0RXZlbnRzICgpIHtcbiAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBjb250YWluZXIuZ2V0U3VibWl0QnV0dG9uKClcbiAgICBzdWJtaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzZWxmLmRvVGhlU3VibWl0LmJpbmQoc2VsZikpXG4gIH1cblxuICB0aGlzLmRvVGhlU3VibWl0ID0gKGUpID0+IHtcbiAgICBpZiAoZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfVxuXG4gICAgLy8gb25seSBzdWJtaXQgd2hlbiB0aGVyZSBpcyBhIGNvbnRhaW5lcixcbiAgICAvLyBvdGhlcndpc2UgZG8gbm90aGluZyBhbmQgbGVhdmUgYXMgaXRcbiAgICBpZiAoY29udGFpbmVyLmhhc0VsZW1lbnQoKSkge1xuICAgICAgY29udGFpbmVyLnN1Ym1pdEFsbChcbiAgICAgICAgZ2V0RGF0YSgpLFxuICAgICAgICBmb3JtRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ21ldGhvZCcpLFxuICAgICAgICBmb3JtRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FjdGlvbicpXG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlIC8vIGltcG9ydGFudCB0byBzdG9wIHN1Ym1pc3Npb25cbiAgfVxuXG4gIHRoaXMuZ2V0SW52YWxpZEVsZW1lbnQgPSAoKSA9PiB7XG4gICAgY29uc3QgaW5wdXRFbGVtZW50cyA9IGdldElucHV0RWxlbWVudHMoKVxuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGlucHV0RWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmICghaW5wdXRFbGVtZW50c1tpXS52YWxpZGl0eS52YWxpZCkge1xuICAgICAgICByZXR1cm4gaW5wdXRFbGVtZW50c1tpXVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHNlbGVjdEVsZW1lbnRzID0gZ2V0U2VsZWN0RWxlbWVudHMoKVxuXG4gICAgZm9yICh2YXIgaiA9IDAsIGxlbjIgPSBzZWxlY3RFbGVtZW50cy5sZW5ndGg7IGogPCBsZW4yOyBqKyspIHtcbiAgICAgIGlmICghc2VsZWN0RWxlbWVudHNbaV0udmFsaWRpdHkudmFsaWQpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdEVsZW1lbnRzW2pdXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHRoaXMudmFsaWRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gcHJldmVudHMgZW5kbGVzcyB2YWxpZGF0aW9uIGxvb3BcbiAgICBkaXNhYmxlQ29udGFpbmVyVmFsaWRhdGlvbiA9IHRydWVcblxuICAgIGNvbnN0IGZvcm1Jc1ZhbGlkID0gZm9ybUVsZW1lbnQuY2hlY2tWYWxpZGl0eSgpXG5cbiAgICBkaXNhYmxlQ29udGFpbmVyVmFsaWRhdGlvbiA9IGZhbHNlXG5cbiAgICByZXR1cm4gZm9ybUlzVmFsaWRcbiAgfVxuXG4gIHRoaXMuZmluZFN1Ym1pdEJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIlt0eXBlPSdzdWJtaXQnXVwiKVxuICB9XG5cbiAgdGhpcy5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIGZvcm1FbGVtZW50ICYmIGhpZGRlbihmb3JtRWxlbWVudCwgdHJ1ZSlcbiAgfVxuXG4gIHRoaXMuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3JtRWxlbWVudCAmJiBoaWRkZW4oZm9ybUVsZW1lbnQsIGZhbHNlKVxuICB9XG59XG5cbnV0aWwuaW5oZXJpdHMoRm9ybSwgRXZlbnRFbWl0dGVyKVxuXG5leHBvcnQgZGVmYXVsdCBGb3JtXG4iLCIvLyBlbmhhbmNlcyBvcHRpb25zIHdpdGggdXNlZnVsIGZ1bmN0aW9ucyB3ZSBjYW4gcmV1c2UgZXZlcnl3aGVyZVxuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdkZWVwbWVyZ2UnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYWRkRnVuY3Rpb25zOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciBhdWRpb0VuYWJsZWQgPSBvcHRpb25zLmF1ZGlvICYmIG9wdGlvbnMuYXVkaW8uZW5hYmxlZFxuXG4gICAgb3B0aW9ucy5oYXNEZWZpbmVkSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMudmlkZW8uaGVpZ2h0ICYmIHRoaXMudmlkZW8uaGVpZ2h0ICE9PSAnYXV0bydcbiAgICB9XG5cbiAgICBvcHRpb25zLmhhc0RlZmluZWRXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZGVvLndpZHRoICYmIHRoaXMudmlkZW8ud2lkdGggIT09ICdhdXRvJ1xuICAgIH1cblxuICAgIG9wdGlvbnMuaGFzRGVmaW5lZERpbWVuc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhc0RlZmluZWRXaWR0aCgpIHx8IHRoaXMuaGFzRGVmaW5lZEhlaWdodCgpXG4gICAgfVxuXG4gICAgb3B0aW9ucy5oYXNEZWZpbmVkRGltZW5zaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhc0RlZmluZWRXaWR0aCgpICYmIHRoaXMuaGFzRGVmaW5lZEhlaWdodCgpXG4gICAgfVxuXG4gICAgb3B0aW9ucy5nZXRSYXRpbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByYXRpbyA9IDEgLy8ganVzdCBhIGRlZmF1bHQgb25lIHdoZW4gbm8gY29tcHV0YXRpb25zIGFyZSBwb3NzaWJsZVxuXG4gICAgICAvLyB0b2RvIGZpeCB0aGlzLCBpdCdzIG5vdCByZWFsbHkgYW4gb3B0aW9uXG4gICAgICBjb25zdCBoYXNWaWRlb0RpbWVuc2lvbnMgPSB0aGlzLnZpZGVvSGVpZ2h0ICYmIHRoaXMudmlkZW9XaWR0aFxuXG4gICAgICBpZiAodGhpcy5oYXNEZWZpbmVkRGltZW5zaW9ucygpKSB7XG4gICAgICAgIGlmIChoYXNWaWRlb0RpbWVuc2lvbnMpIHtcbiAgICAgICAgICAvLyBmaWd1cmUgb3V0IGZpcnN0IHdoaWNoIG9uZSB0byBwaWNrXG4gICAgICAgICAgaWYgKHRoaXMudmlkZW9IZWlnaHQgPCB0aGlzLnZpZGVvLmhlaWdodCB8fFxuICAgICAgICAgICAgICB0aGlzLnZpZGVvV2lkdGggPCB0aGlzLnZpZGVvLndpZHRoKSB7XG4gICAgICAgICAgICByYXRpbyA9IHRoaXMudmlkZW9IZWlnaHQgLyB0aGlzLnZpZGVvV2lkdGhcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmF0aW8gPSB0aGlzLnZpZGVvLmhlaWdodCAvIHRoaXMudmlkZW8ud2lkdGhcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmF0aW8gPSB0aGlzLnZpZGVvLmhlaWdodCAvIHRoaXMudmlkZW8ud2lkdGhcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChoYXNWaWRlb0RpbWVuc2lvbnMpIHtcbiAgICAgICAgcmF0aW8gPSB0aGlzLnZpZGVvSGVpZ2h0IC8gdGhpcy52aWRlb1dpZHRoXG4gICAgICB9XG5cbiAgICAgIHJldHVybiByYXRpb1xuICAgIH1cblxuICAgIG9wdGlvbnMuaXNBdWRpb0VuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYXVkaW9FbmFibGVkXG4gICAgfVxuXG4gICAgb3B0aW9ucy5zZXRBdWRpb0VuYWJsZWQgPSBmdW5jdGlvbiAoZW5hYmxlZCkge1xuICAgICAgYXVkaW9FbmFibGVkID0gZW5hYmxlZFxuICAgIH1cblxuICAgIG9wdGlvbnMuaXNBdXRvUGF1c2VFbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZW5hYmxlQXV0b1BhdXNlICYmIHRoaXMuZW5hYmxlUGF1c2VcbiAgICB9XG4gIH0sXG5cbiAgLy8gbm90IHZlcnkgZWxlZ2FudCBidXQgd29ya3MhIGFuZCBpZiB5b3UgaGVyZSBhcmUgcmVhZGluZyB0aGlzLCBhbmRcbiAgLy8gc3RhcnQgdG8gZG91YnQsIHJlc3QgYXNzdXJlZCwgaXQncyBzb2xpZCBhbmQgcnVuIHRob3VzYW5kIHRpbWVzIG92ZXJcbiAgLy8gYW5kIG92ZXIgYWdhaW4gZWFjaCBkYXkuIGFuZCBvdGhlciBsYXJnZSBzaXRlcyBvdXQgdGhlcmUgaGF2ZSB0aGVpciBvd25cbiAgLy8gdGVjaCBkZWJ0cy4gaG9wZSBpIGhhdmUgc2hhdHRlcmVkIHlvdXIgaWxsdXNpb24gb24gcGVyZmVjdGlvbj9cbiAgbWVyZ2U6IGZ1bmN0aW9uIChkZWZhdWx0T3B0aW9ucywgbmV3T3B0aW9ucykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBkZWVwbWVyZ2UoZGVmYXVsdE9wdGlvbnMsIG5ld09wdGlvbnMsIHtcbiAgICAgIGFycmF5TWVyZ2U6IGZ1bmN0aW9uIChkZXN0aW5hdGlvbiwgc291cmNlKSB7IHJldHVybiBzb3VyY2UgfVxuICAgIH0pXG5cbiAgICB0aGlzLmFkZEZ1bmN0aW9ucyhvcHRpb25zKVxuXG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxufVxuIiwiaW1wb3J0IHV0aWwgZnJvbSAndXRpbCdcbmltcG9ydCBoIGZyb20gJ2h5cGVyc2NyaXB0J1xuaW1wb3J0IGhpZGRlbiBmcm9tICdoaWRkZW4nXG5cbmltcG9ydCBSZXBsYXkgZnJvbSAnLi92aXN1YWxzL3JlcGxheSdcbmltcG9ydCBSZWNvcmRlciBmcm9tICcuL3Zpc3VhbHMvcmVjb3JkZXInXG5pbXBvcnQgTm90aWZpZXIgZnJvbSAnLi92aXN1YWxzL25vdGlmaWVyJ1xuaW1wb3J0IFJlY29yZGVySW5zaWRlcyBmcm9tICcuL3Zpc3VhbHMvaW5zaWRlL3JlY29yZGVySW5zaWRlcydcblxuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLy4uL3V0aWwvZXZlbnRFbWl0dGVyJ1xuaW1wb3J0IEV2ZW50cyBmcm9tICcuLy4uL2V2ZW50cydcblxuY29uc3QgVmlzdWFscyA9IGZ1bmN0aW9uIChjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcywgb3B0aW9ucywgJ1Zpc3VhbHMnKVxuXG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgLy8gY2FuIGJlIG92ZXJ3cml0dGVuIHdpdGggc2V0dGVyIGZuXG4gIHZhciByZXBsYXkgPSBuZXcgUmVwbGF5KHRoaXMsIG9wdGlvbnMpXG5cbiAgY29uc3QgcmVjb3JkZXIgPSBuZXcgUmVjb3JkZXIodGhpcywgcmVwbGF5LCBvcHRpb25zKVxuICBjb25zdCByZWNvcmRlckluc2lkZXMgPSBuZXcgUmVjb3JkZXJJbnNpZGVzKHRoaXMsIG9wdGlvbnMpXG5cbiAgY29uc3Qgbm90aWZpZXIgPSBuZXcgTm90aWZpZXIodGhpcywgb3B0aW9ucylcblxuICBjb25zdCBkZWJ1ZyA9IG9wdGlvbnMuZGVidWdcblxuICB2YXIgdmlzdWFsc0VsZW1lbnRcbiAgdmFyIGJ1aWx0XG5cbiAgZnVuY3Rpb24gYnVpbGROb1NjcmlwdFRhZyAoKSB7XG4gICAgdmFyIG5vU2NyaXB0RWxlbWVudCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdub3NjcmlwdCcpXG5cbiAgICBpZiAoIW5vU2NyaXB0RWxlbWVudCkge1xuICAgICAgbm9TY3JpcHRFbGVtZW50ID0gaCgnbm9zY3JpcHQnKVxuICAgICAgbm9TY3JpcHRFbGVtZW50LmlubmVySFRNTCA9ICdQbGVhc2UgZW5hYmxlIEphdmFzY3JpcHQnXG5cbiAgICAgIHZpc3VhbHNFbGVtZW50LmFwcGVuZENoaWxkKG5vU2NyaXB0RWxlbWVudClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZENoaWxkcmVuICgpIHtcbiAgICBkZWJ1ZygnVmlzdWFsczogYnVpbGRDaGlsZHJlbigpJylcblxuICAgIGJ1aWxkTm9TY3JpcHRUYWcoKVxuXG4gICAgaWYgKCFvcHRpb25zLnBsYXllck9ubHkpIHtcbiAgICAgIG5vdGlmaWVyLmJ1aWxkKClcbiAgICAgIHJlY29yZGVySW5zaWRlcy5idWlsZCgpXG4gICAgfVxuXG4gICAgcmVwbGF5LmJ1aWxkKClcblxuICAgIGRlYnVnKCdWaXN1YWxzOiBidWlsdC4nKVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdEV2ZW50cyAoKSB7XG4gICAgaWYgKCFvcHRpb25zLnBsYXllck9ubHkpIHtcbiAgICAgIGRlYnVnKCdWaXN1YWxzOiBpbml0RXZlbnRzKCknKVxuXG4gICAgICBzZWxmXG4gICAgICAgIC5vbihFdmVudHMuVVNFUl9NRURJQV9SRUFEWSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGJ1aWx0ID0gdHJ1ZVxuICAgICAgICAgIHNlbGYuZW5kV2FpdGluZygpXG4gICAgICAgICAgY29udGFpbmVyLmVuYWJsZUZvcm0oZmFsc2UpXG4gICAgICAgIH0pXG4gICAgICAgIC5vbihFdmVudHMuUFJFVklFVywgKCkgPT4ge1xuICAgICAgICAgIHNlbGYuZW5kV2FpdGluZygpXG4gICAgICAgIH0pXG4gICAgICAgIC5vbihFdmVudHMuQkxPQ0tJTkcsIGZ1bmN0aW9uIChibG9ja2luZ09wdGlvbnMpIHtcbiAgICAgICAgICBpZiAoIWJsb2NraW5nT3B0aW9ucy5oaWRlRm9ybSAmJiAhb3B0aW9ucy5hZGp1c3RGb3JtT25Ccm93c2VyRXJyb3IpIHtcbiAgICAgICAgICAgIC8vIGRvIG5vdGhpbmcsIHVzZXIgc3RpbGwgY2FuIGVudGVyIGZvcm0gaW5wdXRzXG4gICAgICAgICAgICAvLyBjYW4gYmUgdXNlZnVsIHdoZW4geW91IGFyZSBvbiBpLkUuIHNlZWZsb3cncyBjb250YWN0IHBhZ2UgYW5kXG4gICAgICAgICAgICAvLyBzdGlsbCB3YW50IHRvIHRpY2sgb2ZmIHRoZSB3ZWJjYW0gb3B0aW9uXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5kaXNhYmxlRm9ybSh0cnVlKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLm9uKEV2ZW50cy5QUkVWSUVXX1NIT1dOLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29udGFpbmVyLnZhbGlkYXRlKHRydWUpXG4gICAgICAgIH0pXG4gICAgICAgIC5vbihFdmVudHMuTE9BREVEX01FVEFfREFUQSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvcnJlY3REaW1lbnNpb25zKClcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKEV2ZW50cy5FUlJPUiwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGlmIChlcnIucmVtb3ZlRGltZW5zaW9ucyAmJiBlcnIucmVtb3ZlRGltZW5zaW9ucygpKSB7XG4gICAgICAgICAgICByZW1vdmVEaW1lbnNpb25zKClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29ycmVjdERpbWVuc2lvbnMgKCkge1xuICAgIHZpc3VhbHNFbGVtZW50LnN0eWxlLndpZHRoID0gc2VsZi5nZXRSZWNvcmRlcldpZHRoKHRydWUpICsgJ3B4J1xuICAgIHZpc3VhbHNFbGVtZW50LnN0eWxlLmhlaWdodCA9IHNlbGYuZ2V0UmVjb3JkZXJIZWlnaHQodHJ1ZSkgKyAncHgnXG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVEaW1lbnNpb25zICgpIHtcbiAgICB2aXN1YWxzRWxlbWVudC5zdHlsZS53aWR0aCA9ICdhdXRvJ1xuICAgIHZpc3VhbHNFbGVtZW50LnN0eWxlLmhlaWdodCA9ICdhdXRvJ1xuICB9XG5cbiAgdGhpcy5nZXRSYXRpbyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodmlzdWFsc0VsZW1lbnQuY2xpZW50V2lkdGgpIHtcbiAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3Igc2FmYXJpLCBzZWUgZ2V0UmF0aW8oKSBpbiByZWNvcmRlclxuICAgICAgcmV0dXJuIHZpc3VhbHNFbGVtZW50LmNsaWVudEhlaWdodCAvIHZpc3VhbHNFbGVtZW50LmNsaWVudFdpZHRoXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAwXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNSZWNvcmRhYmxlICgpIHtcbiAgICByZXR1cm4gIXNlbGYuaXNOb3RpZnlpbmcoKSAmJiAhcmVwbGF5LmlzU2hvd24oKSAmJiAhc2VsZi5pc0NvdW50aW5nRG93bigpXG4gIH1cblxuICB0aGlzLmlzQ291bnRpbmdEb3duID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZWNvcmRlckluc2lkZXMuaXNDb3VudGluZ0Rvd24oKVxuICB9XG5cbiAgdGhpcy5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2aXN1YWxzRWxlbWVudCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuJyArIG9wdGlvbnMuc2VsZWN0b3JzLnZpc3VhbHNDbGFzcylcblxuICAgIGlmICghdmlzdWFsc0VsZW1lbnQpIHtcbiAgICAgIHZpc3VhbHNFbGVtZW50ID0gaCgnZGl2LicgKyBvcHRpb25zLnNlbGVjdG9ycy52aXN1YWxzQ2xhc3MpXG5cbiAgICAgIGNvbnN0IGJ1dHRvbnNFbGVtZW50ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy4nICsgb3B0aW9ucy5zZWxlY3RvcnMuYnV0dG9uc0NsYXNzKVxuXG4gICAgICAvLyBtYWtlIHN1cmUgaXQncyBwbGFjZWQgYmVmb3JlIHRoZSBidXR0b25zLCBidXQgb25seSBpZiBpdCdzIGEgY2hpbGRcbiAgICAgIC8vIGVsZW1lbnQgb2YgdGhlIGNvbnRhaW5lciA9IGluc2lkZSB0aGUgY29udGFpbmVyXG4gICAgICBpZiAoYnV0dG9uc0VsZW1lbnQgJiYgIWNvbnRhaW5lci5pc091dHNpZGVFbGVtZW50T2YoYnV0dG9uc0VsZW1lbnQpKSB7XG4gICAgICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUodmlzdWFsc0VsZW1lbnQsIGJ1dHRvbnNFbGVtZW50KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHZpc3VhbHNFbGVtZW50KVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRvIG5vdCBoaWRlIHZpc3VhbHMgZWxlbWVudCBzbyB0aGF0IGFwcHMgY2FuIGdpdmUgaXQgYSBwcmVkZWZpbmVkXG4gICAgLy8gd2lkdGggb3IgaGVpZ2h0IHRocm91Z2ggY3NzIGJ1dCBoaWRlIGFsbCBjaGlsZHJlblxuXG4gICAgdmlzdWFsc0VsZW1lbnQuY2xhc3NMaXN0LmFkZCgndmlzdWFscycpXG5cbiAgICBjb3JyZWN0RGltZW5zaW9ucygpXG5cbiAgICAhYnVpbHQgJiYgaW5pdEV2ZW50cygpXG4gICAgYnVpbGRDaGlsZHJlbigpXG5cbiAgICAvLyBuZWVkZWQgZm9yIHJlcGxheSBoYW5kbGluZyBhbmQgY29udGFpbmVyLmlzT3V0c2lkZUVsZW1lbnRPZigpXG4gICAgc2VsZi5wYXJlbnROb2RlID0gdmlzdWFsc0VsZW1lbnQucGFyZW50Tm9kZVxuXG4gICAgYnVpbHQgPSB0cnVlXG4gIH1cblxuICB0aGlzLnF1ZXJ5U2VsZWN0b3IgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdmlzdWFsc0VsZW1lbnQgJiYgdmlzdWFsc0VsZW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcilcbiAgfVxuXG4gIHRoaXMuYXBwZW5kQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICB2aXN1YWxzRWxlbWVudCAmJiB2aXN1YWxzRWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZClcbiAgfVxuXG4gIHRoaXMucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICB2aXN1YWxzRWxlbWVudC5yZW1vdmVDaGlsZChjaGlsZClcbiAgfVxuXG4gIHRoaXMucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmRXYWl0aW5nKClcbiAgICByZWNvcmRlci5yZXNldCgpXG4gIH1cblxuICB0aGlzLmJlZ2luV2FpdGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb250YWluZXIuYmVnaW5XYWl0aW5nKClcbiAgfVxuXG4gIHRoaXMuZW5kV2FpdGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb250YWluZXIuZW5kV2FpdGluZygpXG4gIH1cblxuICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgcmVjb3JkZXIuc3RvcChwYXJhbXMpXG4gICAgcmVjb3JkZXJJbnNpZGVzLmhpZGVQYXVzZSgpXG4gIH1cblxuICB0aGlzLmJhY2sgPSBmdW5jdGlvbiAocGFyYW1zLCBjYikge1xuICAgIGlmICghY2IgJiYgcGFyYW1zKSB7XG4gICAgICBjYiA9IHBhcmFtc1xuICAgICAgcGFyYW1zID0ge31cbiAgICB9XG5cbiAgICByZXBsYXkuaGlkZSgpXG4gICAgbm90aWZpZXIuaGlkZSgpXG5cbiAgICBpZiAocGFyYW1zLmtlZXBIaWRkZW4pIHtcbiAgICAgIHJlY29yZGVyLmhpZGUoKVxuICAgICAgY2IgJiYgY2IoKVxuICAgIH0gZWxzZSB7XG4gICAgICByZWNvcmRlci5iYWNrKGNiKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMucmVjb3JkQWdhaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5iYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYub25jZShFdmVudHMuVVNFUl9NRURJQV9SRUFEWSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnJlY29yZCgpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICB0aGlzLnVubG9hZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlY29yZGVyLnVubG9hZChlKVxuICAgICAgcmVjb3JkZXJJbnNpZGVzLnVubG9hZChlKVxuICAgICAgcmVwbGF5LnVubG9hZChlKVxuXG4gICAgICBidWlsdCA9IGZhbHNlXG4gICAgfSBjYXRjaCAoZXhjKSB7XG4gICAgICB0aGlzLmVtaXQoRXZlbnRzLkVSUk9SLCBleGMpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5pc05vdGlmeWluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbm90aWZpZXIuaXNWaXNpYmxlKClcbiAgfVxuXG4gIHRoaXMuaXNSZXBsYXlTaG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmVwbGF5LmlzU2hvd24oKVxuICB9XG5cbiAgdGhpcy5wYXVzZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICByZWNvcmRlci5wYXVzZShwYXJhbXMpXG4gICAgcmVjb3JkZXJJbnNpZGVzLnNob3dQYXVzZSgpXG4gIH1cblxuICB0aGlzLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmVjb3JkZXJJbnNpZGVzLmlzQ291bnRpbmdEb3duKCkpIHtcbiAgICAgIHJlY29yZGVySW5zaWRlcy5yZXN1bWVDb3VudGRvd24oKVxuICAgIH0gZWxzZSB7XG4gICAgICByZWNvcmRlci5yZXN1bWUoKVxuICAgIH1cblxuICAgIHJlY29yZGVySW5zaWRlcy5oaWRlUGF1c2UoKVxuICB9XG5cbiAgdGhpcy5wYXVzZU9yUmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc1JlY29yZGFibGUuY2FsbCh0aGlzKSkge1xuICAgICAgaWYgKHRoaXMuaXNSZWNvcmRpbmcoKSkge1xuICAgICAgICB0aGlzLnBhdXNlKClcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkZXIuaXNQYXVzZWQoKSkge1xuICAgICAgICB0aGlzLnJlc3VtZSgpXG4gICAgICB9IGVsc2UgaWYgKHJlY29yZGVyLmlzUmVhZHkoKSkge1xuICAgICAgICB0aGlzLnJlY29yZCgpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5yZWNvcmRPclN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGlzUmVjb3JkYWJsZSgpKSB7XG4gICAgICBpZiAodGhpcy5pc1JlY29yZGluZygpKSB7XG4gICAgICAgIHRoaXMuc3RvcCgpXG4gICAgICB9IGVsc2UgaWYgKHJlY29yZGVyLmlzUmVhZHkoKSkge1xuICAgICAgICB0aGlzLnJlY29yZCgpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5yZWNvcmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG9wdGlvbnMudmlkZW8uY291bnRkb3duKSB7XG4gICAgICB0aGlzLmVtaXQoRXZlbnRzLkNPVU5URE9XTilcbiAgICAgIHJlY29yZGVySW5zaWRlcy5zdGFydENvdW50ZG93bihyZWNvcmRlci5yZWNvcmQuYmluZChyZWNvcmRlcikpXG4gICAgfSBlbHNlIHsgcmVjb3JkZXIucmVjb3JkKCkgfVxuICB9XG5cbiAgdGhpcy5nZXRSZWNvcmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmVjb3JkZXJcbiAgfVxuXG4gIHRoaXMuZ2V0UmVwbGF5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZXBsYXlcbiAgfVxuXG4gIHRoaXMudmFsaWRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlY29yZGVyLnZhbGlkYXRlKCkgJiYgdGhpcy5pc1JlcGxheVNob3duKClcbiAgfVxuXG4gIHRoaXMuZ2V0UmVjb3JkaW5nU3RhdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlY29yZGVyLmdldFJlY29yZGluZ1N0YXRzKClcbiAgfVxuXG4gIHRoaXMuZ2V0QXVkaW9TYW1wbGVSYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZWNvcmRlci5nZXRBdWRpb1NhbXBsZVJhdGUoKVxuICB9XG5cbiAgdGhpcy5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmVjb3JkZXIuaXNQYXVzZWQoKVxuICB9XG5cbiAgdGhpcy5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICBub3RpZmllci5lcnJvcihlcnIpXG4gIH1cblxuICB0aGlzLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHZpc3VhbHNFbGVtZW50KSB7XG4gICAgICBoaWRkZW4odmlzdWFsc0VsZW1lbnQsIHRydWUpXG4gICAgICB0aGlzLmVtaXQoRXZlbnRzLkhJREUpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5pc0hpZGRlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWJ1aWx0KSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAodmlzdWFsc0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiBoaWRkZW4odmlzdWFsc0VsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5zaG93VmlzdWFscyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2aXN1YWxzRWxlbWVudCAmJiBoaWRkZW4odmlzdWFsc0VsZW1lbnQsIGZhbHNlKVxuICB9XG5cbiAgdGhpcy5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgICF0aGlzLmlzUmVwbGF5U2hvd24oKSAmJiB2aXN1YWxzRWxlbWVudCAmJiByZWNvcmRlci5idWlsZCgpXG4gICAgdGhpcy5zaG93VmlzdWFscygpXG4gIH1cblxuICB0aGlzLnNob3dSZXBsYXlPbmx5ID0gZnVuY3Rpb24gKCkge1xuICAgICF0aGlzLmlzUmVwbGF5U2hvd24oKSAmJiByZXBsYXkuc2hvdygpXG5cbiAgICB0aGlzLnNob3coKVxuICAgIHJlY29yZGVyLmhpZGUoKVxuICAgIG5vdGlmaWVyLmhpZGUoKVxuICB9XG5cbiAgdGhpcy5pc1JlY29yZGVyVW5sb2FkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlY29yZGVyLmlzVW5sb2FkZWQoKVxuICB9XG5cbiAgdGhpcy5pc0Nvbm5lY3RpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlY29yZGVyLmlzQ29ubmVjdGluZygpXG4gIH1cblxuICB0aGlzLmdldFJlY29yZGVyV2lkdGggPSBmdW5jdGlvbiAocmVzcG9uc2l2ZSkge1xuICAgIHJldHVybiByZWNvcmRlci5nZXRSZWNvcmRlcldpZHRoKHJlc3BvbnNpdmUpXG4gIH1cblxuICB0aGlzLmdldFJlY29yZGVySGVpZ2h0ID0gZnVuY3Rpb24gKHJlc3BvbnNpdmUpIHtcbiAgICByZXR1cm4gcmVjb3JkZXIuZ2V0UmVjb3JkZXJIZWlnaHQocmVzcG9uc2l2ZSlcbiAgfVxuXG4gIHRoaXMubGltaXRXaWR0aCA9IGZ1bmN0aW9uICh3aWR0aCkge1xuICAgIHJldHVybiBjb250YWluZXIubGltaXRXaWR0aCh3aWR0aCwgb3B0aW9ucylcbiAgfVxuXG4gIHRoaXMubGltaXRIZWlnaHQgPSBmdW5jdGlvbiAoaGVpZ2h0KSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5saW1pdEhlaWdodChoZWlnaHQpXG4gIH1cblxuICB0aGlzLmNhbGN1bGF0ZVdpZHRoID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY29udGFpbmVyLmNhbGN1bGF0ZVdpZHRoKG9wdGlvbnMpXG4gIH1cblxuICB0aGlzLmNhbGN1bGF0ZUhlaWdodCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5jYWxjdWxhdGVIZWlnaHQob3B0aW9ucylcbiAgfVxuXG4gIHRoaXMuZ2V0UmVwbGF5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZXBsYXlcbiAgfVxuXG4gIHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIGZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC1jbGllbnQvaXNzdWVzLzEyNlxuICAgIHJldHVybiB2aXN1YWxzRWxlbWVudCAmJiB2aXN1YWxzRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICB9XG5cbiAgdGhpcy5jaGVja1RpbWVyID0gZnVuY3Rpb24gKGludGVydmFsU3VtKSB7XG4gICAgcmVjb3JkZXJJbnNpZGVzLmNoZWNrVGltZXIoaW50ZXJ2YWxTdW0pXG4gIH1cblxuICB0aGlzLmlzTm90aWZpZXJCdWlsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbm90aWZpZXIgJiYgbm90aWZpZXIuaXNCdWlsdCgpXG4gIH1cblxuICB0aGlzLmlzUmVwbGF5U2hvd24gPSByZXBsYXkuaXNTaG93bi5iaW5kKHJlcGxheSlcbiAgdGhpcy5oaWRlUmVwbGF5ID0gcmVwbGF5LmhpZGUuYmluZChyZXBsYXkpXG4gIHRoaXMuaGlkZVJlY29yZGVyID0gcmVjb3JkZXIuaGlkZS5iaW5kKHJlY29yZGVyKVxuICB0aGlzLmlzUmVjb3JkaW5nID0gcmVjb3JkZXIuaXNSZWNvcmRpbmcuYmluZChyZWNvcmRlcilcbiAgdGhpcy5pc1VzZXJNZWRpYUxvYWRlZCA9IHJlY29yZGVyLmlzVXNlck1lZGlhTG9hZGVkLmJpbmQocmVjb3JkZXIpXG4gIHRoaXMuaXNDb25uZWN0ZWQgPSByZWNvcmRlci5pc0Nvbm5lY3RlZC5iaW5kKHJlY29yZGVyKVxufVxuXG51dGlsLmluaGVyaXRzKFZpc3VhbHMsIEV2ZW50RW1pdHRlcilcblxuZXhwb3J0IGRlZmF1bHQgVmlzdWFsc1xuIiwiaW1wb3J0IGggZnJvbSAnaHlwZXJzY3JpcHQnXG5pbXBvcnQgaGlkZGVuIGZyb20gJ2hpZGRlbidcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHZpc3VhbHMsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICB2YXIgY291bnRkb3duRWxlbWVudFxuICB2YXIgaW50ZXJ2YWxJZFxuICB2YXIgY291bnRkb3duXG4gIHZhciBwYXVzZWRcblxuICBmdW5jdGlvbiBmaXJlIChjYikge1xuICAgIHNlbGYudW5sb2FkKClcbiAgICBzZWxmLmhpZGUoKVxuXG4gICAgLy8ga2VlcCBhbGwgY2FsbGJhY2tzIGFzeW5jXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBjYigpXG4gICAgfSwgMClcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvdW50QmFja3dhcmQgKGNiKSB7XG4gICAgaWYgKCFwYXVzZWQpIHtcbiAgICAgIG9wdGlvbnMuZGVidWcoJ0NvdW50ZG93bicsIGNvdW50ZG93bilcbiAgICAgIGNvdW50ZG93bi0tXG5cbiAgICAgIGlmIChjb3VudGRvd24gPCAxKSB7XG4gICAgICAgIGZpcmUoY2IpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb3VudGRvd25FbGVtZW50LmlubmVySFRNTCA9IGNvdW50ZG93blxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICBjb3VudGRvd25FbGVtZW50LmlubmVySFRNTCA9IGNvdW50ZG93biA9IG9wdGlvbnMudmlkZW8uY291bnRkb3duXG5cbiAgICB0aGlzLnNob3coKVxuXG4gICAgaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGNvdW50QmFja3dhcmQuYmluZCh0aGlzLCBjYiksIDk1MClcbiAgfVxuXG4gIHRoaXMucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcGF1c2VkID0gdHJ1ZVxuICB9XG5cbiAgdGhpcy5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcGF1c2VkID0gZmFsc2VcbiAgfVxuXG4gIHRoaXMuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRkb3duRWxlbWVudCA9IHZpc3VhbHMucXVlcnlTZWxlY3RvcignLmNvdW50ZG93bicpXG5cbiAgICBpZiAoIWNvdW50ZG93bkVsZW1lbnQpIHtcbiAgICAgIGNvdW50ZG93bkVsZW1lbnQgPSBoKCdwLmNvdW50ZG93bicpXG5cbiAgICAgIHRoaXMuaGlkZSgpXG5cbiAgICAgIHZpc3VhbHMuYXBwZW5kQ2hpbGQoY291bnRkb3duRWxlbWVudClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oaWRlKClcbiAgICB9XG4gIH1cblxuICB0aGlzLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgaGlkZGVuKGNvdW50ZG93bkVsZW1lbnQsIGZhbHNlKVxuICB9XG5cbiAgdGhpcy5pc0NvdW50aW5nRG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFpbnRlcnZhbElkXG4gIH1cblxuICB0aGlzLnVubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpXG4gICAgcGF1c2VkID0gZmFsc2VcbiAgICBpbnRlcnZhbElkID0gbnVsbFxuICB9XG5cbiAgdGhpcy5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIGhpZGRlbihjb3VudGRvd25FbGVtZW50LCB0cnVlKVxuICAgIHRoaXMudW5sb2FkKClcbiAgfVxufVxuIiwiaW1wb3J0IGggZnJvbSAnaHlwZXJzY3JpcHQnXG5pbXBvcnQgaGlkZGVuIGZyb20gJ2hpZGRlbidcblxuaW1wb3J0IFZpZGVvbWFpbEVycm9yIGZyb20gJy4vLi4vLi4vLi4vLi4vdXRpbC92aWRlb21haWxFcnJvcidcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHZpc3VhbHMsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zLnRleHQucGF1c2VkSGVhZGVyKSB7XG4gICAgdGhyb3cgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdQYXVzZWQgaGVhZGVyIGNhbm5vdCBiZSBlbXB0eScsIG9wdGlvbnMpXG4gIH1cblxuICB2YXIgcGF1c2VkQmxvY2tFbGVtZW50XG4gIHZhciBwYXVzZWRIZWFkZXJFbGVtZW50XG4gIHZhciBwYXVzZWRIaW50RWxlbWVudFxuXG4gIGZ1bmN0aW9uIGhhc1BhdXNlZEhpbnQgKCkge1xuICAgIHJldHVybiBvcHRpb25zLnRleHQucGF1c2VkSGludFxuICB9XG5cbiAgdGhpcy5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwYXVzZWRCbG9ja0VsZW1lbnQgPSB2aXN1YWxzLnF1ZXJ5U2VsZWN0b3IoJy5wYXVzZWQnKVxuICAgIHBhdXNlZEhlYWRlckVsZW1lbnQgPSB2aXN1YWxzLnF1ZXJ5U2VsZWN0b3IoJy5wYXVzZWRIZWFkZXInKVxuXG4gICAgaWYgKCFwYXVzZWRIZWFkZXJFbGVtZW50KSB7XG4gICAgICBwYXVzZWRCbG9ja0VsZW1lbnQgPSBoKCdkaXYucGF1c2VkJylcbiAgICAgIHBhdXNlZEhlYWRlckVsZW1lbnQgPSBoKCdwLnBhdXNlZEhlYWRlcicpXG5cbiAgICAgIHRoaXMuaGlkZSgpXG5cbiAgICAgIHBhdXNlZEhlYWRlckVsZW1lbnQuaW5uZXJIVE1MID0gb3B0aW9ucy50ZXh0LnBhdXNlZEhlYWRlclxuXG4gICAgICBwYXVzZWRCbG9ja0VsZW1lbnQuYXBwZW5kQ2hpbGQocGF1c2VkSGVhZGVyRWxlbWVudClcblxuICAgICAgaWYgKGhhc1BhdXNlZEhpbnQoKSkge1xuICAgICAgICBwYXVzZWRIaW50RWxlbWVudCA9IHZpc3VhbHMucXVlcnlTZWxlY3RvcignLnBhdXNlZEhpbnQnKVxuICAgICAgICBwYXVzZWRIaW50RWxlbWVudCA9IGgoJ3AucGF1c2VkSGludCcpXG4gICAgICAgIHBhdXNlZEhpbnRFbGVtZW50LmlubmVySFRNTCA9IG9wdGlvbnMudGV4dC5wYXVzZWRIaW50XG4gICAgICAgIHBhdXNlZEJsb2NrRWxlbWVudC5hcHBlbmRDaGlsZChwYXVzZWRIaW50RWxlbWVudClcbiAgICAgIH1cblxuICAgICAgdmlzdWFscy5hcHBlbmRDaGlsZChwYXVzZWRCbG9ja0VsZW1lbnQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGlkZSgpXG5cbiAgICAgIHBhdXNlZEhlYWRlckVsZW1lbnQuaW5uZXJIVE1MID0gb3B0aW9ucy50ZXh0LnBhdXNlZEhlYWRlclxuXG4gICAgICBpZiAoaGFzUGF1c2VkSGludCgpKSB7XG4gICAgICAgIHBhdXNlZEhpbnRFbGVtZW50LmlubmVySFRNTCA9IG9wdGlvbnMudGV4dC5wYXVzZWRIaW50XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIGhpZGRlbihwYXVzZWRCbG9ja0VsZW1lbnQsIHRydWUpXG4gIH1cblxuICB0aGlzLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgaGlkZGVuKHBhdXNlZEJsb2NrRWxlbWVudCwgZmFsc2UpXG4gIH1cbn1cbiIsImltcG9ydCBoIGZyb20gJ2h5cGVyc2NyaXB0J1xuaW1wb3J0IGhpZGRlbiBmcm9tICdoaWRkZW4nXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh2aXN1YWxzKSB7XG4gIHZhciByZWNvcmROb3RlRWxlbWVudFxuXG4gIHRoaXMuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmVjb3JkTm90ZUVsZW1lbnQgPSB2aXN1YWxzLnF1ZXJ5U2VsZWN0b3IoJy5yZWNvcmROb3RlJylcblxuICAgIGlmICghcmVjb3JkTm90ZUVsZW1lbnQpIHtcbiAgICAgIHJlY29yZE5vdGVFbGVtZW50ID0gaCgncC5yZWNvcmROb3RlJylcblxuICAgICAgdGhpcy5oaWRlKClcblxuICAgICAgdmlzdWFscy5hcHBlbmRDaGlsZChyZWNvcmROb3RlRWxlbWVudClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oaWRlKClcbiAgICB9XG4gIH1cblxuICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5oaWRlKClcbiAgICByZWNvcmROb3RlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCduZWFyJylcbiAgICByZWNvcmROb3RlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCduaWdoJylcbiAgfVxuXG4gIHRoaXMuc2V0TmVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZWNvcmROb3RlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCduZWFyJylcbiAgfVxuXG4gIHRoaXMuc2V0TmlnaCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZWNvcmROb3RlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCduaWdoJylcbiAgfVxuXG4gIHRoaXMuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBoaWRkZW4ocmVjb3JkTm90ZUVsZW1lbnQsIHRydWUpXG4gIH1cblxuICB0aGlzLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgaGlkZGVuKHJlY29yZE5vdGVFbGVtZW50LCBmYWxzZSlcbiAgfVxufVxuIiwiaW1wb3J0IGggZnJvbSAnaHlwZXJzY3JpcHQnXG5pbXBvcnQgaGlkZGVuIGZyb20gJ2hpZGRlbidcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHZpc3VhbHMsIHJlY29yZE5vdGUsIG9wdGlvbnMpIHtcbiAgdmFyIHJlY29yZFRpbWVyRWxlbWVudFxuXG4gIHZhciBuZWFyQ29tcHV0ZWQgPSBmYWxzZVxuICB2YXIgZW5kTmlnaENvbXB1dGVkID0gZmFsc2VcblxuICB2YXIgc3RhcnRlZFxuICB2YXIgY291bnRkb3duXG5cbiAgZnVuY3Rpb24gcGFkIChuKSB7XG4gICAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4gOiBuXG4gIH1cblxuICBmdW5jdGlvbiB0aHJlc2hvbGRSZWFjaGVkIChzZWNzLCB0aHJlc2hvbGQpIHtcbiAgICByZXR1cm4gc2VjcyA+PSBvcHRpb25zLnZpZGVvLmxpbWl0U2Vjb25kcyAqIHRocmVzaG9sZFxuICB9XG5cbiAgZnVuY3Rpb24gaXNOZWFyIChzZWNzKSB7XG4gICAgaWYgKCFuZWFyQ29tcHV0ZWQgJiYgdGhyZXNob2xkUmVhY2hlZChzZWNzLCAwLjYpKSB7XG4gICAgICBuZWFyQ29tcHV0ZWQgPSB0cnVlXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbmRJc05pZ2ggKHNlY3MpIHtcbiAgICBpZiAoIWVuZE5pZ2hDb21wdXRlZCAmJiB0aHJlc2hvbGRSZWFjaGVkKHNlY3MsIDAuOCkpIHtcbiAgICAgIGVuZE5pZ2hDb21wdXRlZCA9IHRydWVcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldE5lYXIgKCkge1xuICAgIHJlY29yZFRpbWVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCduZWFyJylcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldE5pZ2ggKCkge1xuICAgIHJlY29yZFRpbWVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCduaWdoJylcbiAgfVxuXG4gIHRoaXMuY2hlY2sgPSBmdW5jdGlvbiAob3B0cykge1xuICAgIGNvbnN0IG5ld0NvdW50ZG93biA9IGdldFN0YXJ0U2Vjb25kcygpIC0gTWF0aC5mbG9vcihvcHRzLmludGVydmFsU3VtIC8gMWUzKVxuXG4gICAgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pc2F0aW9uIChhbm90aGVyIHJlYXNvbiB3ZSBuZWVkIHJlYWN0IGhlcmUhKVxuICAgIGlmIChuZXdDb3VudGRvd24gIT09IGNvdW50ZG93bikge1xuICAgICAgY291bnRkb3duID0gbmV3Q291bnRkb3duXG4gICAgICB1cGRhdGUoKVxuICAgICAgY291bnRkb3duIDwgMSAmJiB2aXN1YWxzLnN0b3AodHJ1ZSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAgIGNvbnN0IG1pbnMgPSBwYXJzZUludChjb3VudGRvd24gLyA2MCwgMTApXG4gICAgY29uc3Qgc2VjcyA9IGNvdW50ZG93biAtIG1pbnMgKiA2MFxuXG4gICAgaWYgKCFuZWFyQ29tcHV0ZWQgfHwgIWVuZE5pZ2hDb21wdXRlZCkge1xuICAgICAgY29uc3QgcmVtYWluaW5nU2Vjb25kcyA9IG9wdGlvbnMudmlkZW8ubGltaXRTZWNvbmRzIC0gY291bnRkb3duXG5cbiAgICAgIGlmIChpc05lYXIocmVtYWluaW5nU2Vjb25kcykpIHtcbiAgICAgICAgcmVjb3JkTm90ZS5zZXROZWFyKClcbiAgICAgICAgc2V0TmVhcigpXG5cbiAgICAgICAgb3B0aW9ucy5kZWJ1ZygnRW5kIGlzIG5lYXIsICcgKyBjb3VudGRvd24gKyAnIHNlY29uZHMgdG8gZ28nKVxuICAgICAgfSBlbHNlIGlmIChlbmRJc05pZ2gocmVtYWluaW5nU2Vjb25kcykpIHtcbiAgICAgICAgcmVjb3JkTm90ZS5zZXROaWdoKClcbiAgICAgICAgc2V0TmlnaCgpXG5cbiAgICAgICAgb3B0aW9ucy5kZWJ1ZygnRW5kIGlzIG5pZ2gsICcgKyBjb3VudGRvd24gKyAnIHNlY29uZHMgdG8gZ28nKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJlY29yZFRpbWVyRWxlbWVudC5pbm5lckhUTUwgPSBtaW5zICsgJzonICsgcGFkKHNlY3MpXG4gIH1cblxuICBmdW5jdGlvbiBoaWRlICgpIHtcbiAgICBoaWRkZW4ocmVjb3JkVGltZXJFbGVtZW50LCB0cnVlKVxuICB9XG5cbiAgZnVuY3Rpb24gc2hvdyAoKSB7XG4gICAgcmVjb3JkVGltZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ25lYXInKVxuICAgIHJlY29yZFRpbWVyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCduaWdoJylcblxuICAgIGhpZGRlbihyZWNvcmRUaW1lckVsZW1lbnQsIGZhbHNlKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U2Vjb25kc1JlY29yZGVkICgpIHtcbiAgICByZXR1cm4gZ2V0U3RhcnRTZWNvbmRzKCkgLSBjb3VudGRvd25cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFN0YXJ0U2Vjb25kcyAoKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMudmlkZW8ubGltaXRTZWNvbmRzXG4gIH1cblxuICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIGNvdW50ZG93biA9IGdldFN0YXJ0U2Vjb25kcygpXG4gICAgbmVhckNvbXB1dGVkID0gZW5kTmlnaENvbXB1dGVkID0gZmFsc2VcbiAgICBzdGFydGVkID0gdHJ1ZVxuXG4gICAgdXBkYXRlKClcblxuICAgIHNob3coKVxuICB9XG5cbiAgdGhpcy5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZWNvcmROb3RlLmhpZGUoKVxuICB9XG5cbiAgdGhpcy5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmVjb3JkTm90ZS5zaG93KClcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3RvcHBlZCAoKSB7XG4gICAgcmV0dXJuIGNvdW50ZG93biA9PT0gbnVsbFxuICB9XG5cbiAgdGhpcy5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghaXNTdG9wcGVkKCkgJiYgc3RhcnRlZCkge1xuICAgICAgb3B0aW9ucy5kZWJ1ZygnU3RvcHBpbmcgcmVjb3JkIHRpbWVyLiBXYXMgcmVjb3JkaW5nIGZvciBhYm91dCB+JyArIGdldFNlY29uZHNSZWNvcmRlZCgpICsgJyBzZWNvbmRzLicpXG5cbiAgICAgIGhpZGUoKVxuICAgICAgcmVjb3JkTm90ZS5zdG9wKClcblxuICAgICAgY291bnRkb3duID0gbnVsbFxuICAgICAgc3RhcnRlZCA9IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgdGhpcy5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZWNvcmRUaW1lckVsZW1lbnQgPSB2aXN1YWxzLnF1ZXJ5U2VsZWN0b3IoJy5yZWNvcmRUaW1lcicpXG5cbiAgICBpZiAoIXJlY29yZFRpbWVyRWxlbWVudCkge1xuICAgICAgcmVjb3JkVGltZXJFbGVtZW50ID0gaCgncC5yZWNvcmRUaW1lcicpXG5cbiAgICAgIGhpZGUoKVxuXG4gICAgICB2aXN1YWxzLmFwcGVuZENoaWxkKHJlY29yZFRpbWVyRWxlbWVudClcbiAgICB9IGVsc2Uge1xuICAgICAgaGlkZSgpXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgdXRpbCBmcm9tICd1dGlsJ1xuXG5pbXBvcnQgRXZlbnRzIGZyb20gJy4vLi4vLi4vLi4vZXZlbnRzJ1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLy4uLy4uLy4uL3V0aWwvZXZlbnRFbWl0dGVyJ1xuXG5pbXBvcnQgQ291bnRkb3duIGZyb20gJy4vcmVjb3JkZXIvY291bnRkb3duJ1xuaW1wb3J0IFBhdXNlZE5vdGUgZnJvbSAnLi9yZWNvcmRlci9wYXVzZWROb3RlJ1xuaW1wb3J0IFJlY29yZE5vdGUgZnJvbSAnLi9yZWNvcmRlci9yZWNvcmROb3RlJ1xuaW1wb3J0IFJlY29yZFRpbWVyIGZyb20gJy4vcmVjb3JkZXIvcmVjb3JkVGltZXInXG5cbmNvbnN0IFJlY29yZGVySW5zaWRlcyA9IGZ1bmN0aW9uICh2aXN1YWxzLCBvcHRpb25zKSB7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMsIG9wdGlvbnMsICdSZWNvcmRlckluc2lkZXMnKVxuXG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGNvbnN0IGRlYnVnID0gb3B0aW9ucy5kZWJ1Z1xuXG4gIGNvbnN0IHJlY29yZE5vdGUgPSBuZXcgUmVjb3JkTm90ZSh2aXN1YWxzKVxuICBjb25zdCByZWNvcmRUaW1lciA9IG5ldyBSZWNvcmRUaW1lcih2aXN1YWxzLCByZWNvcmROb3RlLCBvcHRpb25zKVxuXG4gIHZhciBjb3VudGRvd25cbiAgdmFyIHBhdXNlZE5vdGVcbiAgdmFyIGJ1aWx0XG5cbiAgaWYgKG9wdGlvbnMudmlkZW8uY291bnRkb3duKSB7XG4gICAgY291bnRkb3duID0gbmV3IENvdW50ZG93bih2aXN1YWxzLCBvcHRpb25zKVxuICB9XG5cbiAgaWYgKG9wdGlvbnMuZW5hYmxlUGF1c2UpIHtcbiAgICBwYXVzZWROb3RlID0gbmV3IFBhdXNlZE5vdGUodmlzdWFscywgb3B0aW9ucylcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0UmVjb3JkaW5nICgpIHtcbiAgICByZWNvcmRUaW1lci5zdGFydCgpXG4gIH1cblxuICBmdW5jdGlvbiByZXN1bWVSZWNvcmRpbmcgKCkge1xuICAgIHJlY29yZFRpbWVyLnJlc3VtZSgpXG4gIH1cblxuICBmdW5jdGlvbiBzdG9wUmVjb3JkaW5nICgpIHtcbiAgICByZWNvcmRUaW1lci5zdG9wKClcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdXNlUmVjb3JkaW5nICgpIHtcbiAgICBpZiAoc2VsZi5pc0NvdW50aW5nRG93bigpKSB7XG4gICAgICBjb3VudGRvd24ucGF1c2UoKVxuICAgIH0gZWxzZSB7XG4gICAgICByZWNvcmRUaW1lci5wYXVzZSgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25SZXNldHRpbmcgKCkge1xuICAgIHNlbGYuaGlkZVBhdXNlKClcbiAgICBzZWxmLmhpZGVDb3VudGRvd24oKVxuICAgIHJlY29yZFRpbWVyLnN0b3AoKVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdEV2ZW50cyAoKSB7XG4gICAgZGVidWcoJ1JlY29yZGVySW5zaWRlczogaW5pdEV2ZW50cygpJylcblxuICAgIHNlbGZcbiAgICAgIC5vbihFdmVudHMuUkVDT1JESU5HLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN0YXJ0UmVjb3JkaW5nKClcbiAgICAgIH0pXG4gICAgICAub24oRXZlbnRzLlJFU1VNSU5HLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlc3VtZVJlY29yZGluZygpXG4gICAgICB9KVxuICAgICAgLm9uKEV2ZW50cy5TVE9QUElORywgZnVuY3Rpb24gKCkge1xuICAgICAgICBzdG9wUmVjb3JkaW5nKClcbiAgICAgIH0pXG4gICAgICAub24oRXZlbnRzLlBBVVNFRCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBwYXVzZVJlY29yZGluZygpXG4gICAgICB9KVxuICAgICAgLm9uKEV2ZW50cy5SRVNFVFRJTkcsIG9uUmVzZXR0aW5nKVxuICAgICAgLm9uKEV2ZW50cy5ISURFLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYuaGlkZUNvdW50ZG93bigpXG4gICAgICB9KVxuICB9XG5cbiAgdGhpcy5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1ZygnUmVjb3JkZXJJbnNpZGVzOiBidWlsZCgpJylcblxuICAgIGNvdW50ZG93biAmJiBjb3VudGRvd24uYnVpbGQoKVxuICAgIHBhdXNlZE5vdGUgJiYgcGF1c2VkTm90ZS5idWlsZCgpXG5cbiAgICByZWNvcmROb3RlLmJ1aWxkKClcbiAgICByZWNvcmRUaW1lci5idWlsZCgpXG5cbiAgICAhYnVpbHQgJiYgaW5pdEV2ZW50cygpXG5cbiAgICBidWlsdCA9IHRydWVcbiAgfVxuXG4gIHRoaXMudW5sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIGNvdW50ZG93biAmJiBjb3VudGRvd24udW5sb2FkKClcblxuICAgIGJ1aWx0ID0gZmFsc2VcbiAgfVxuXG4gIHRoaXMuc2hvd1BhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgIHBhdXNlZE5vdGUgJiYgcGF1c2VkTm90ZS5zaG93KClcbiAgfVxuXG4gIHRoaXMuaGlkZVBhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgIHBhdXNlZE5vdGUgJiYgcGF1c2VkTm90ZS5oaWRlKClcbiAgfVxuXG4gIHRoaXMuaGlkZUNvdW50ZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb3VudGRvd24gJiYgY291bnRkb3duLmhpZGUoKVxuICB9XG5cbiAgdGhpcy5zdGFydENvdW50ZG93biA9IGZ1bmN0aW9uIChjYikge1xuICAgIGNvdW50ZG93biAmJiBjb3VudGRvd24uc3RhcnQoY2IpXG4gIH1cblxuICB0aGlzLnJlc3VtZUNvdW50ZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb3VudGRvd24gJiYgY291bnRkb3duLnJlc3VtZSgpXG4gIH1cblxuICB0aGlzLmlzQ291bnRpbmdEb3duID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjb3VudGRvd24gJiYgY291bnRkb3duLmlzQ291bnRpbmdEb3duKClcbiAgfVxuXG4gIHRoaXMuY2hlY2tUaW1lciA9IGZ1bmN0aW9uIChpbnRlcnZhbFN1bSkge1xuICAgIHJlY29yZFRpbWVyLmNoZWNrKGludGVydmFsU3VtKVxuICB9XG59XG5cbnV0aWwuaW5oZXJpdHMoUmVjb3JkZXJJbnNpZGVzLCBFdmVudEVtaXR0ZXIpXG5cbmV4cG9ydCBkZWZhdWx0IFJlY29yZGVySW5zaWRlc1xuIiwiaW1wb3J0IHV0aWwgZnJvbSAndXRpbCdcbmltcG9ydCBoIGZyb20gJ2h5cGVyc2NyaXB0J1xuaW1wb3J0IGhpZGRlbiBmcm9tICdoaWRkZW4nXG5cbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi8uLi8uLi91dGlsL2V2ZW50RW1pdHRlcidcbmltcG9ydCBFdmVudHMgZnJvbSAnLi8uLi8uLi9ldmVudHMnXG5cbmNvbnN0IE5vdGlmaWVyID0gZnVuY3Rpb24gKHZpc3VhbHMsIG9wdGlvbnMpIHtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcywgb3B0aW9ucywgJ05vdGlmaWVyJylcblxuICBjb25zdCBzZWxmID0gdGhpc1xuICBjb25zdCBkZWJ1ZyA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWJ1Z1xuXG4gIHZhciBub3RpZnlFbGVtZW50XG4gIHZhciBtZXNzYWdlRWxlbWVudFxuICB2YXIgZXhwbGFuYXRpb25FbGVtZW50XG4gIHZhciBlbnRlcnRhaW5UaW1lb3V0SWRcbiAgdmFyIGVudGVydGFpbmluZ1xuICB2YXIgYnVpbHRcblxuICBmdW5jdGlvbiBvblN0b3BwaW5nIChsaW1pdFJlYWNoZWQpIHtcbiAgICB2YXIgbGVhZCA9ICcnXG5cbiAgICB2aXN1YWxzLmJlZ2luV2FpdGluZygpXG5cbiAgICBpZiAobGltaXRSZWFjaGVkKSB7XG4gICAgICBkZWJ1ZygnTGltaXQgcmVhY2hlZCcpXG4gICAgICBsZWFkICs9IG9wdGlvbnMudGV4dC5saW1pdFJlYWNoZWQgKyAnLjxici8+J1xuICAgIH1cblxuICAgIGxlYWQgKz0gb3B0aW9ucy50ZXh0LnNlbmRpbmcgKyAnIOKApidcblxuICAgIHNlbGYubm90aWZ5KGxlYWQsIG51bGwsIHtcbiAgICAgIHN0aWxsV2FpdDogdHJ1ZSxcbiAgICAgIGVudGVydGFpbjogb3B0aW9ucy5ub3RpZmllci5lbnRlcnRhaW5cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gb25Db25uZWN0aW5nICgpIHtcbiAgICBzZWxmLm5vdGlmeSgnQ29ubmVjdGluZyDigKYnKVxuICB9XG5cbiAgZnVuY3Rpb24gb25Mb2FkaW5nVXNlck1lZGlhICgpIHtcbiAgICBzZWxmLm5vdGlmeSgnTG9hZGluZyB3ZWJjYW0g4oCmJylcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvZ3Jlc3MgKGZyYW1lUHJvZ3Jlc3MsIHNhbXBsZVByb2dyZXNzKSB7XG4gICAgdmFyIG92ZXJhbGxQcm9ncmVzc1xuXG4gICAgaWYgKG9wdGlvbnMuaXNBdWRpb0VuYWJsZWQoKSkge1xuICAgICAgb3ZlcmFsbFByb2dyZXNzID0gJ1ZpZGVvOiAnICsgZnJhbWVQcm9ncmVzc1xuXG4gICAgICBpZiAoc2FtcGxlUHJvZ3Jlc3MpIHtcbiAgICAgICAgb3ZlcmFsbFByb2dyZXNzICs9ICcsIEF1ZGlvOiAnICsgc2FtcGxlUHJvZ3Jlc3NcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb3ZlcmFsbFByb2dyZXNzID0gZnJhbWVQcm9ncmVzc1xuICAgIH1cblxuICAgIHNlbGYuc2V0RXhwbGFuYXRpb24ob3ZlcmFsbFByb2dyZXNzKVxuICB9XG5cbiAgZnVuY3Rpb24gb25CZWdpblZpZGVvRW5jb2RpbmcgKCkge1xuICAgIHZpc3VhbHMuYmVnaW5XYWl0aW5nKClcblxuICAgIGNvbnN0IGxlYWQgPSBvcHRpb25zLnRleHQuZW5jb2RpbmcgKyAnIOKApidcblxuICAgIHNlbGYubm90aWZ5KGxlYWQsIG51bGwsIHtcbiAgICAgIHN0aWxsV2FpdDogdHJ1ZSxcbiAgICAgIGVudGVydGFpbjogb3B0aW9ucy5ub3RpZmllci5lbnRlcnRhaW5cbiAgICB9KVxuXG4gICAgaGlkZUV4cGxhbmF0aW9uKClcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRFdmVudHMgKCkge1xuICAgIGRlYnVnKCdOb3RpZmllcjogaW5pdEV2ZW50cygpJylcblxuICAgIHNlbGZcbiAgICAgIC5vbihFdmVudHMuQ09OTkVDVElORywgZnVuY3Rpb24gKCkge1xuICAgICAgICBvbkNvbm5lY3RpbmcoKVxuICAgICAgfSlcbiAgICAgIC5vbihFdmVudHMuTE9BRElOR19VU0VSX01FRElBLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9uTG9hZGluZ1VzZXJNZWRpYSgpXG4gICAgICB9KVxuICAgICAgLm9uKEV2ZW50cy5VU0VSX01FRElBX1JFQURZLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYuaGlkZSgpXG4gICAgICB9KVxuICAgICAgLm9uKEV2ZW50cy5MT0FERURfTUVUQV9EQVRBLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvcnJlY3REaW1lbnNpb25zKClcbiAgICAgIH0pXG4gICAgICAub24oRXZlbnRzLlBSRVZJRVcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5oaWRlKClcbiAgICAgIH0pXG4gICAgICAub24oRXZlbnRzLlNUT1BQSU5HLCBmdW5jdGlvbiAobGltaXRSZWFjaGVkKSB7XG4gICAgICAgIG9uU3RvcHBpbmcobGltaXRSZWFjaGVkKVxuICAgICAgfSlcbiAgICAgIC5vbihFdmVudHMuUFJPR1JFU1MsIGZ1bmN0aW9uIChmcmFtZVByb2dyZXNzLCBzYW1wbGVQcm9ncmVzcykge1xuICAgICAgICBvblByb2dyZXNzKGZyYW1lUHJvZ3Jlc3MsIHNhbXBsZVByb2dyZXNzKVxuICAgICAgfSlcbiAgICAgIC5vbihFdmVudHMuQkVHSU5fVklERU9fRU5DT0RJTkcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb25CZWdpblZpZGVvRW5jb2RpbmcoKVxuICAgICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvcnJlY3REaW1lbnNpb25zICgpIHtcbiAgICBub3RpZnlFbGVtZW50LnN0eWxlLndpZHRoID0gdmlzdWFscy5nZXRSZWNvcmRlcldpZHRoKHRydWUpICsgJ3B4J1xuICAgIG5vdGlmeUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gdmlzdWFscy5nZXRSZWNvcmRlckhlaWdodCh0cnVlKSArICdweCdcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3cgKCkge1xuICAgIG5vdGlmeUVsZW1lbnQgJiYgaGlkZGVuKG5vdGlmeUVsZW1lbnQsIGZhbHNlKVxuICB9XG5cbiAgZnVuY3Rpb24gcnVuRW50ZXJ0YWlubWVudCAoKSB7XG4gICAgaWYgKG9wdGlvbnMubm90aWZpZXIuZW50ZXJ0YWluKSB7XG4gICAgICBpZiAoIWVudGVydGFpbmluZykge1xuICAgICAgICBjb25zdCByYW5kb21CYWNrZ3JvdW5kQ2xhc3MgPSBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpICogb3B0aW9ucy5ub3RpZmllci5lbnRlcnRhaW5MaW1pdCkgKyAxKVxuXG4gICAgICAgIG5vdGlmeUVsZW1lbnQuY2xhc3NOYW1lID0gJ25vdGlmaWVyIGVudGVydGFpbiAnICtcbiAgICAgICAgICAgICAgICBvcHRpb25zLm5vdGlmaWVyLmVudGVydGFpbkNsYXNzICtcbiAgICAgICAgICAgICAgICByYW5kb21CYWNrZ3JvdW5kQ2xhc3NcblxuICAgICAgICBlbnRlcnRhaW5UaW1lb3V0SWQgPSBzZXRUaW1lb3V0KHJ1bkVudGVydGFpbm1lbnQsIG9wdGlvbnMubm90aWZpZXIuZW50ZXJ0YWluSW50ZXJ2YWwpXG4gICAgICAgIGVudGVydGFpbmluZyA9IHRydWVcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FuY2VsRW50ZXJ0YWlubWVudCgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsRW50ZXJ0YWlubWVudCAoKSB7XG4gICAgaWYgKG5vdGlmeUVsZW1lbnQpIHtcbiAgICAgIG5vdGlmeUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZW50ZXJ0YWluJylcbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQoZW50ZXJ0YWluVGltZW91dElkKVxuICAgIGVudGVydGFpblRpbWVvdXRJZCA9IG51bGxcbiAgICBlbnRlcnRhaW5pbmcgPSBmYWxzZVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0TWVzc2FnZSAobWVzc2FnZSwgbWVzc2FnZU9wdGlvbnMpIHtcbiAgICBjb25zdCBwcm9ibGVtID0gbWVzc2FnZU9wdGlvbnMucHJvYmxlbSA/IG1lc3NhZ2VPcHRpb25zLnByb2JsZW0gOiBmYWxzZVxuXG4gICAgaWYgKG1lc3NhZ2VFbGVtZW50KSB7XG4gICAgICBtZXNzYWdlRWxlbWVudC5pbm5lckhUTUwgPSAocHJvYmxlbSA/ICcmI3gyNjM5OyAnIDogJycpICsgbWVzc2FnZVxuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zLmxvZ2dlci53YXJuKFxuICAgICAgICAnVW5hYmxlIHRvIHNob3cgZm9sbG93aW5nIGJlY2F1c2UgbWVzc2FnZUVsZW1lbnQgaXMgZW1wdHk6JyxcbiAgICAgICAgbWVzc2FnZVxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGVyci5tZXNzYWdlID8gZXJyLm1lc3NhZ2UudG9TdHJpbmcoKSA6IGVyci50b1N0cmluZygpXG4gICAgY29uc3QgZXhwbGFuYXRpb24gPSBlcnIuZXhwbGFuYXRpb24gPyBlcnIuZXhwbGFuYXRpb24udG9TdHJpbmcoKSA6IG51bGxcblxuICAgIGlmICghbWVzc2FnZSkge1xuICAgICAgb3B0aW9ucy5kZWJ1ZygnV2VpcmQgZW1wdHkgbWVzc2FnZSBnZW5lcmF0ZWQgZm9yIGVycm9yJywgZXJyKVxuICAgIH1cblxuICAgIHNlbGYubm90aWZ5KG1lc3NhZ2UsIGV4cGxhbmF0aW9uLCB7XG4gICAgICBibG9ja2luZzogdHJ1ZSxcbiAgICAgIHByb2JsZW06IHRydWUsXG4gICAgICBoaWRlRm9ybTogZXJyLmhpZGVGb3JtICYmIGVyci5oaWRlRm9ybSgpLFxuICAgICAgY2xhc3NMaXN0OiBlcnIuZ2V0Q2xhc3NMaXN0ICYmIGVyci5nZXRDbGFzc0xpc3QoKSxcbiAgICAgIHJlbW92ZURpbWVuc2lvbnM6IGVyci5yZW1vdmVEaW1lbnNpb25zICYmIGVyci5yZW1vdmVEaW1lbnNpb25zKClcbiAgICB9KVxuICB9XG5cbiAgdGhpcy5zZXRFeHBsYW5hdGlvbiA9IGZ1bmN0aW9uIChleHBsYW5hdGlvbikge1xuICAgIGlmICghZXhwbGFuYXRpb25FbGVtZW50KSB7XG4gICAgICBleHBsYW5hdGlvbkVsZW1lbnQgPSBoKCdwJylcblxuICAgICAgaWYgKG5vdGlmeUVsZW1lbnQpIHtcbiAgICAgICAgbm90aWZ5RWxlbWVudC5hcHBlbmRDaGlsZChleHBsYW5hdGlvbkVsZW1lbnQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zLmxvZ2dlci53YXJuKFxuICAgICAgICAgICdVbmFibGUgdG8gc2hvdyBleHBsYW5hdGlvbiBiZWNhdXNlIG5vdGlmeUVsZW1lbnQgaXMgZW1wdHk6JyxcbiAgICAgICAgICBleHBsYW5hdGlvblxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuXG4gICAgZXhwbGFuYXRpb25FbGVtZW50LmlubmVySFRNTCA9IGV4cGxhbmF0aW9uXG5cbiAgICBoaWRkZW4oZXhwbGFuYXRpb25FbGVtZW50LCBmYWxzZSlcbiAgfVxuXG4gIHRoaXMuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgb3B0aW9ucy5kZWJ1ZygnTm90aWZpZXI6IGJ1aWxkKCknKVxuXG4gICAgbm90aWZ5RWxlbWVudCA9IHZpc3VhbHMucXVlcnlTZWxlY3RvcignLm5vdGlmaWVyJylcblxuICAgIGlmICghbm90aWZ5RWxlbWVudCkge1xuICAgICAgbm90aWZ5RWxlbWVudCA9IGgoJy5ub3RpZmllcicpIC8vIGRlZmF1bHRzIHRvIGRpdlxuXG4gICAgICB0aGlzLmhpZGUoKVxuXG4gICAgICB2aXN1YWxzLmFwcGVuZENoaWxkKG5vdGlmeUVsZW1lbnQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGlkZSgpXG4gICAgfVxuXG4gICAgIWJ1aWx0ICYmIGluaXRFdmVudHMoKVxuXG4gICAgYnVpbHQgPSB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBoaWRlRXhwbGFuYXRpb24gKCkge1xuICAgIGlmIChleHBsYW5hdGlvbkVsZW1lbnQpIHtcbiAgICAgIGV4cGxhbmF0aW9uRWxlbWVudC5pbm5lckhUTUwgPSBudWxsXG4gICAgICBoaWRkZW4oZXhwbGFuYXRpb25FbGVtZW50LCB0cnVlKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjYW5jZWxFbnRlcnRhaW5tZW50KClcblxuICAgIGlmIChub3RpZnlFbGVtZW50KSB7XG4gICAgICBoaWRkZW4obm90aWZ5RWxlbWVudCwgdHJ1ZSlcbiAgICAgIG5vdGlmeUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnYmxvY2tpbmcnKVxuICAgIH1cblxuICAgIGlmIChtZXNzYWdlRWxlbWVudCkge1xuICAgICAgbWVzc2FnZUVsZW1lbnQuaW5uZXJIVE1MID0gbnVsbFxuICAgIH1cblxuICAgIGhpZGVFeHBsYW5hdGlvbigpXG4gIH1cblxuICB0aGlzLmlzVmlzaWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWJ1aWx0KSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vdGlmeUVsZW1lbnQgJiYgIWhpZGRlbihub3RpZnlFbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuaXNCdWlsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYnVpbHRcbiAgfVxuXG4gIHRoaXMubm90aWZ5ID0gZnVuY3Rpb24gKG1lc3NhZ2UsIGV4cGxhbmF0aW9uLCBub3RpZnlPcHRpb25zKSB7XG4gICAgb3B0aW9ucy5kZWJ1ZygnTm90aWZpZXI6IG5vdGlmeSgpJylcblxuICAgIGlmICghbm90aWZ5T3B0aW9ucykge1xuICAgICAgbm90aWZ5T3B0aW9ucyA9IHt9XG4gICAgfVxuXG4gICAgY29uc3Qgc3RpbGxXYWl0ID0gbm90aWZ5T3B0aW9ucy5zdGlsbFdhaXQgPyBub3RpZnlPcHRpb25zLnN0aWxsV2FpdCA6IGZhbHNlXG4gICAgY29uc3QgZW50ZXJ0YWluID0gbm90aWZ5T3B0aW9ucy5lbnRlcnRhaW4gPyBub3RpZnlPcHRpb25zLmVudGVydGFpbiA6IGZhbHNlXG4gICAgY29uc3QgYmxvY2tpbmcgPSBub3RpZnlPcHRpb25zLmJsb2NraW5nID8gbm90aWZ5T3B0aW9ucy5ibG9ja2luZyA6IGZhbHNlXG4gICAgY29uc3QgaGlkZUZvcm0gPSBub3RpZnlPcHRpb25zLmhpZGVGb3JtID8gbm90aWZ5T3B0aW9ucy5oaWRlRm9ybSA6IGZhbHNlXG4gICAgY29uc3QgY2xhc3NMaXN0ID0gbm90aWZ5T3B0aW9ucy5jbGFzc0xpc3QgPyBub3RpZnlPcHRpb25zLmNsYXNzTGlzdCA6IGZhbHNlXG4gICAgY29uc3QgcmVtb3ZlRGltZW5zaW9ucyA9IG5vdGlmeU9wdGlvbnMucmVtb3ZlRGltZW5zaW9ucyA/IG5vdGlmeU9wdGlvbnMucmVtb3ZlRGltZW5zaW9ucyA6IGZhbHNlXG5cbiAgICBpZiAoIW1lc3NhZ2VFbGVtZW50ICYmIG5vdGlmeUVsZW1lbnQpIHtcbiAgICAgIG1lc3NhZ2VFbGVtZW50ID0gaCgnaDInKVxuXG4gICAgICBpZiAoZXhwbGFuYXRpb25FbGVtZW50KSB7XG4gICAgICAgIG5vdGlmeUVsZW1lbnQuaW5zZXJ0QmVmb3JlKG1lc3NhZ2VFbGVtZW50LCBleHBsYW5hdGlvbkVsZW1lbnQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3RpZnlFbGVtZW50LmFwcGVuZENoaWxkKG1lc3NhZ2VFbGVtZW50KVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChub3RpZnlFbGVtZW50KSB7XG4gICAgICAvLyByZXNldFxuICAgICAgaWYgKCFlbnRlcnRhaW4pIHtcbiAgICAgICAgbm90aWZ5RWxlbWVudC5jbGFzc05hbWUgPSAnbm90aWZpZXInXG4gICAgICB9XG5cbiAgICAgIGlmIChjbGFzc0xpc3QpIHtcbiAgICAgICAgY2xhc3NMaXN0LmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgICAgIG5vdGlmeUVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmIChyZW1vdmVEaW1lbnNpb25zKSB7XG4gICAgICAgIG5vdGlmeUVsZW1lbnQuc3R5bGUud2lkdGggPSAnYXV0bydcbiAgICAgICAgbm90aWZ5RWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnYXV0bydcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYmxvY2tpbmcpIHtcbiAgICAgIG5vdGlmeUVsZW1lbnQgJiYgbm90aWZ5RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdibG9ja2luZycpXG4gICAgICB0aGlzLmVtaXQoRXZlbnRzLkJMT0NLSU5HLCB7IGhpZGVGb3JtOiBoaWRlRm9ybSB9KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVtaXQoRXZlbnRzLk5PVElGWUlORylcbiAgICB9XG5cbiAgICB2aXN1YWxzLmhpZGVSZXBsYXkoKVxuICAgIHZpc3VhbHMuaGlkZVJlY29yZGVyKClcblxuICAgIHNldE1lc3NhZ2UobWVzc2FnZSwgbm90aWZ5T3B0aW9ucylcblxuICAgIGlmIChleHBsYW5hdGlvbiAmJiBleHBsYW5hdGlvbi5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnNldEV4cGxhbmF0aW9uKGV4cGxhbmF0aW9uKVxuICAgIH1cblxuICAgIGlmIChlbnRlcnRhaW4pIHtcbiAgICAgIHJ1bkVudGVydGFpbm1lbnQoKVxuICAgIH0gZWxzZSB7XG4gICAgICBjYW5jZWxFbnRlcnRhaW5tZW50KClcbiAgICB9XG5cbiAgICAvLyBqdXN0IGFzIGEgc2FmZXR5IGluIGNhc2UgaWYgYW4gZXJyb3IgaXMgdGhyb3duIGluIHRoZSBtaWRkbGUgb2YgdGhlIGJ1aWxkIHByb2Nlc3NcbiAgICAvLyBhbmQgdmlzdWFscyBhcmVuJ3QgYnVpbHQvc2hvd24geWV0LlxuICAgIHZpc3VhbHMuc2hvd1Zpc3VhbHMoKVxuXG4gICAgc2hvdygpXG5cbiAgICAhc3RpbGxXYWl0ICYmIHZpc3VhbHMuZW5kV2FpdGluZygpXG4gIH1cbn1cblxudXRpbC5pbmhlcml0cyhOb3RpZmllciwgRXZlbnRFbWl0dGVyKVxuXG5leHBvcnQgZGVmYXVsdCBOb3RpZmllclxuIiwiaW1wb3J0IHdlYnNvY2tldCBmcm9tICd3ZWJzb2NrZXQtc3RyZWFtJ1xuaW1wb3J0IEZyYW1lIGZyb20gJ2NhbnZhcy10by1idWZmZXInXG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJ1xuaW1wb3J0IGggZnJvbSAnaHlwZXJzY3JpcHQnXG5pbXBvcnQgaGlkZGVuIGZyb20gJ2hpZGRlbidcbmltcG9ydCBhbmltaXR0ZXIgZnJvbSAnYW5pbWl0dGVyJ1xuaW1wb3J0IHN0cmluZ2lmeSBmcm9tICdzYWZlLWpzb24tc3RyaW5naWZ5J1xuXG5pbXBvcnQgVXNlck1lZGlhIGZyb20gJy4vdXNlck1lZGlhJ1xuXG5pbXBvcnQgRXZlbnRzIGZyb20gJy4vLi4vLi4vZXZlbnRzJ1xuaW1wb3J0IENvbnN0YW50cyBmcm9tICcuLy4uLy4uL2NvbnN0YW50cydcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi8uLi8uLi91dGlsL2V2ZW50RW1pdHRlcidcbmltcG9ydCBCcm93c2VyIGZyb20gJy4vLi4vLi4vdXRpbC9icm93c2VyJ1xuaW1wb3J0IEh1bWFuaXplIGZyb20gJy4vLi4vLi4vdXRpbC9odW1hbml6ZSdcbmltcG9ydCBwcmV0dHkgZnJvbSAnLi8uLi8uLi91dGlsL3ByZXR0eSdcbmltcG9ydCBWaWRlb21haWxFcnJvciBmcm9tICcuLy4uLy4uL3V0aWwvdmlkZW9tYWlsRXJyb3InXG5cbi8vIGNyZWRpdHMgaHR0cDovLzFsaW5lYXJ0Lmt1bGFvbmUuY29tLyMvXG5jb25zdCBQSVBFX1NZTUJPTCA9ICfCsMK6wqTDuCzCuMK4LMO4wqTCusKwYMKwwrrCpMO4LMK4LMO4wqTCsMK6wqTDuCzCuMK4LMO4wqTCusKwYMKwwrrCpMO4LMK4ICdcblxuY29uc3QgUmVjb3JkZXIgPSBmdW5jdGlvbiAodmlzdWFscywgcmVwbGF5LCBvcHRpb25zKSB7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMsIG9wdGlvbnMsICdSZWNvcmRlcicpXG5cbiAgLy8gdmFsaWRhdGUgc29tZSBvcHRpb25zIHRoaXMgY2xhc3MgbmVlZHNcbiAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnZpZGVvIHx8ICFvcHRpb25zLnZpZGVvLmZwcykge1xuICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnRlBTIG11c3QgYmUgZGVmaW5lZCcsIG9wdGlvbnMpXG4gIH1cblxuICBjb25zdCBzZWxmID0gdGhpc1xuICBjb25zdCBicm93c2VyID0gbmV3IEJyb3dzZXIob3B0aW9ucylcbiAgY29uc3QgZGVidWcgPSBvcHRpb25zLmRlYnVnXG5cbiAgdmFyIGxvb3AgPSBudWxsXG5cbiAgdmFyIG9yaWdpbmFsQW5pbWF0aW9uRnJhbWVPYmplY3RcblxuICB2YXIgc2FtcGxlc0NvdW50ID0gMFxuICB2YXIgZnJhbWVzQ291bnQgPSAwXG5cbiAgdmFyIHJlY29yZGluZ1N0YXRzID0ge31cblxuICB2YXIgY29uZmlybWVkRnJhbWVOdW1iZXIgPSAwXG4gIHZhciBjb25maXJtZWRTYW1wbGVOdW1iZXIgPSAwXG5cbiAgdmFyIHJlY29yZGVyRWxlbWVudFxuICB2YXIgdXNlck1lZGlhXG5cbiAgdmFyIHVzZXJNZWRpYVRpbWVvdXRcbiAgdmFyIHJldHJ5VGltZW91dFxuXG4gIHZhciBieXRlc1N1bVxuXG4gIHZhciBmcmFtZVByb2dyZXNzXG4gIHZhciBzYW1wbGVQcm9ncmVzc1xuXG4gIHZhciBjYW52YXNcbiAgdmFyIGN0eFxuXG4gIHZhciB1c2VyTWVkaWFMb2FkZWRcbiAgdmFyIHVzZXJNZWRpYUxvYWRpbmdcbiAgdmFyIHN1Ym1pdHRpbmdcbiAgdmFyIHVubG9hZGVkXG4gIHZhciBzdG9wVGltZVxuICB2YXIgc3RyZWFtXG4gIHZhciBjb25uZWN0aW5nXG4gIHZhciBjb25uZWN0ZWRcbiAgdmFyIGJsb2NraW5nXG4gIHZhciBidWlsdFxuICB2YXIga2V5XG4gIHZhciB3YWl0aW5nVGltZVxuXG4gIHZhciBwaW5nSW50ZXJ2YWxcblxuICB2YXIgZnJhbWVcblxuICB2YXIgcmVjb3JkaW5nQnVmZmVyTGVuZ3RoXG4gIHZhciByZWNvcmRpbmdCdWZmZXJcblxuICBmdW5jdGlvbiB3cml0ZVN0cmVhbSAoYnVmZmVyLCBvcHRzKSB7XG4gICAgaWYgKHN0cmVhbSkge1xuICAgICAgaWYgKHN0cmVhbS5kZXN0cm95ZWQpIHtcbiAgICAgICAgLy8gcHJldmVudHMgaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLmlvL2lzc3Vlcy8zOTNcbiAgICAgICAgc3RvcFBpbmdzKClcblxuICAgICAgICBzZWxmLmVtaXQoRXZlbnRzLkVSUk9SLCBWaWRlb21haWxFcnJvci5jcmVhdGUoXG4gICAgICAgICAgJ0FscmVhZHkgZGlzY29ubmVjdGVkJyxcbiAgICAgICAgICAnU29ycnksIGNvbm5lY3Rpb24gdG8gdGhlIHNlcnZlciBoYXMgYmVlbiBkZXN0cm95ZWQuIFBsZWFzZSByZWxvYWQuJyxcbiAgICAgICAgICBvcHRpb25zXG4gICAgICAgICkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBvbkZsdXNoZWRDYWxsYmFjayA9IG9wdHMgJiYgb3B0cy5vbkZsdXNoZWRDYWxsYmFja1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc3RyZWFtLndyaXRlKGJ1ZmZlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgb25GbHVzaGVkQ2FsbGJhY2sgJiYgb25GbHVzaGVkQ2FsbGJhY2sob3B0cylcbiAgICAgICAgICB9KVxuICAgICAgICB9IGNhdGNoIChleGMpIHtcbiAgICAgICAgICBzZWxmLmVtaXQoRXZlbnRzLkVSUk9SLCBWaWRlb21haWxFcnJvci5jcmVhdGUoXG4gICAgICAgICAgICAnRmFpbGVkIHdyaXRpbmcgdG8gc2VydmVyJyxcbiAgICAgICAgICAgICdzdHJlYW0ud3JpdGUoKSBmYWlsZWQgYmVjYXVzZSBvZiAnICsgcHJldHR5KGV4YyksXG4gICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgKSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbmRQaW5ncyAoKSB7XG4gICAgcGluZ0ludGVydmFsID0gd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlYnVnKCdSZWNvcmRlcjogcGluZ2luZy4uLicpXG4gICAgICB3cml0ZVN0cmVhbShCdWZmZXIuZnJvbSgnJykpXG4gICAgfSwgb3B0aW9ucy50aW1lb3V0cy5waW5nSW50ZXJ2YWwpXG4gIH1cblxuICBmdW5jdGlvbiBzdG9wUGluZ3MgKCkge1xuICAgIGNsZWFySW50ZXJ2YWwocGluZ0ludGVydmFsKVxuICB9XG5cbiAgZnVuY3Rpb24gb25BdWRpb1NhbXBsZSAoYXVkaW9TYW1wbGUpIHtcbiAgICBzYW1wbGVzQ291bnQrK1xuXG4gICAgY29uc3QgYXVkaW9CdWZmZXIgPSBhdWRpb1NhbXBsZS50b0J1ZmZlcigpXG5cbiAgICAvLyBpZiAob3B0aW9ucy52ZXJib3NlKSB7XG4gICAgLy8gICAgIGRlYnVnKFxuICAgIC8vICAgICAgICAgJ1NhbXBsZSAjJyArIHNhbXBsZXNDb3VudCArICcgKCcgKyBhdWRpb0J1ZmZlci5sZW5ndGggKyAnIGJ5dGVzKTonXG4gICAgLy8gICAgIClcbiAgICAvLyB9XG5cbiAgICB3cml0ZVN0cmVhbShhdWRpb0J1ZmZlcilcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3cgKCkge1xuICAgIHJlY29yZGVyRWxlbWVudCAmJiBoaWRkZW4ocmVjb3JkZXJFbGVtZW50LCBmYWxzZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVXNlck1lZGlhUmVhZHkgKCkge1xuICAgIHRyeSB7XG4gICAgICBkZWJ1ZygnUmVjb3JkZXI6IG9uVXNlck1lZGlhUmVhZHkoKScpXG5cbiAgICAgIHVzZXJNZWRpYUxvYWRpbmcgPSBibG9ja2luZyA9IHVubG9hZGVkID0gc3VibWl0dGluZyA9IGZhbHNlXG4gICAgICB1c2VyTWVkaWFMb2FkZWQgPSB0cnVlXG5cbiAgICAgIGxvb3AgPSBjcmVhdGVMb29wKClcblxuICAgICAgc2hvdygpXG4gICAgICBzZWxmLmVtaXQoRXZlbnRzLlVTRVJfTUVESUFfUkVBRFksIHsgcGF1c2VkOiBzZWxmLmlzUGF1c2VkKCkgfSlcbiAgICB9IGNhdGNoIChleGMpIHtcbiAgICAgIHNlbGYuZW1pdChFdmVudHMuRVJST1IsIGV4YylcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhclJldHJ5VGltZW91dCAoKSB7XG4gICAgZGVidWcoJ1JlY29yZGVyOiBjbGVhclJldHJ5VGltZW91dCgpJylcblxuICAgIHJldHJ5VGltZW91dCAmJiBjbGVhclRpbWVvdXQocmV0cnlUaW1lb3V0KVxuICAgIHJldHJ5VGltZW91dCA9IG51bGxcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyVXNlck1lZGlhVGltZW91dCAoKSB7XG4gICAgaWYgKHVzZXJNZWRpYVRpbWVvdXQpIHtcbiAgICAgIGRlYnVnKCdSZWNvcmRlcjogY2xlYXJVc2VyTWVkaWFUaW1lb3V0KCknKVxuXG4gICAgICB1c2VyTWVkaWFUaW1lb3V0ICYmIGNsZWFyVGltZW91dCh1c2VyTWVkaWFUaW1lb3V0KVxuICAgICAgdXNlck1lZGlhVGltZW91dCA9IG51bGxcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjYWxjdWxhdGVGcmFtZVByb2dyZXNzICgpIHtcbiAgICByZXR1cm4gKGNvbmZpcm1lZEZyYW1lTnVtYmVyIC8gKGZyYW1lc0NvdW50IHx8IDEpICogMTAwKS50b0ZpeGVkKDIpICsgJyUnXG4gIH1cblxuICBmdW5jdGlvbiBjYWxjdWxhdGVTYW1wbGVQcm9ncmVzcyAoKSB7XG4gICAgcmV0dXJuIChjb25maXJtZWRTYW1wbGVOdW1iZXIgLyAoc2FtcGxlc0NvdW50IHx8IDEpICogMTAwKS50b0ZpeGVkKDIpICsgJyUnXG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVPdmVyYWxsUHJvZ3Jlc3MgKCkge1xuICAgIC8vIHdoZW4gcHJvZ3Jlc3NlcyBhcmVuJ3QgaW5pdGlhbGl6ZWQsXG4gICAgLy8gdGhlbiBkbyBhIGZpcnN0IGNhbGN1bGF0aW9uIHRvIGF2b2lkIGBpbmZpbml0ZWAgb3IgYG51bGxgIGRpc3BsYXlzXG5cbiAgICBpZiAoIWZyYW1lUHJvZ3Jlc3MpIHtcbiAgICAgIGZyYW1lUHJvZ3Jlc3MgPSBjYWxjdWxhdGVGcmFtZVByb2dyZXNzKClcbiAgICB9XG5cbiAgICBpZiAoIXNhbXBsZVByb2dyZXNzKSB7XG4gICAgICBzYW1wbGVQcm9ncmVzcyA9IGNhbGN1bGF0ZVNhbXBsZVByb2dyZXNzKClcbiAgICB9XG5cbiAgICBzZWxmLmVtaXQoXG4gICAgICBFdmVudHMuUFJPR1JFU1MsXG4gICAgICBmcmFtZVByb2dyZXNzLFxuICAgICAgc2FtcGxlUHJvZ3Jlc3NcbiAgICApXG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVGcmFtZVByb2dyZXNzIChhcmdzKSB7XG4gICAgY29uZmlybWVkRnJhbWVOdW1iZXIgPSBhcmdzLmZyYW1lID8gYXJncy5mcmFtZSA6IGNvbmZpcm1lZEZyYW1lTnVtYmVyXG5cbiAgICBmcmFtZVByb2dyZXNzID0gY2FsY3VsYXRlRnJhbWVQcm9ncmVzcygpXG5cbiAgICB1cGRhdGVPdmVyYWxsUHJvZ3Jlc3MoKVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlU2FtcGxlUHJvZ3Jlc3MgKGFyZ3MpIHtcbiAgICBjb25maXJtZWRTYW1wbGVOdW1iZXIgPSBhcmdzLnNhbXBsZSA/IGFyZ3Muc2FtcGxlIDogY29uZmlybWVkU2FtcGxlTnVtYmVyXG5cbiAgICBzYW1wbGVQcm9ncmVzcyA9IGNhbGN1bGF0ZVNhbXBsZVByb2dyZXNzKClcblxuICAgIHVwZGF0ZU92ZXJhbGxQcm9ncmVzcygpXG4gIH1cblxuICBmdW5jdGlvbiBwcmV2aWV3IChhcmdzKSB7XG4gICAgY29uZmlybWVkRnJhbWVOdW1iZXIgPVxuICAgIGNvbmZpcm1lZFNhbXBsZU51bWJlciA9XG4gICAgc2FtcGxlc0NvdW50ID1cbiAgICBmcmFtZXNDb3VudCA9IDBcblxuICAgIHNhbXBsZVByb2dyZXNzID0gZnJhbWVQcm9ncmVzcyA9IG51bGxcblxuICAgIGtleSA9IGFyZ3Mua2V5XG5cbiAgICBpZiAoYXJncy5tcDQpIHtcbiAgICAgIHJlcGxheS5zZXRNcDRTb3VyY2UoXG4gICAgICAgIGFyZ3MubXA0ICsgQ29uc3RhbnRzLlNJVEVfTkFNRV9MQUJFTCArICcvJyArIG9wdGlvbnMuc2l0ZU5hbWUgKyAnL3ZpZGVvbWFpbC5tcDQnLFxuICAgICAgICB0cnVlXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKGFyZ3Mud2VibSkge1xuICAgICAgcmVwbGF5LnNldFdlYk1Tb3VyY2UoXG4gICAgICAgIGFyZ3Mud2VibSArIENvbnN0YW50cy5TSVRFX05BTUVfTEFCRUwgKyAnLycgKyBvcHRpb25zLnNpdGVOYW1lICsgJy92aWRlb21haWwud2VibScsXG4gICAgICAgIHRydWVcbiAgICAgIClcbiAgICB9XG5cbiAgICBzZWxmLmhpZGUoKVxuXG4gICAgY29uc3Qgd2lkdGggPSBzZWxmLmdldFJlY29yZGVyV2lkdGgodHJ1ZSlcbiAgICBjb25zdCBoZWlnaHQgPSBzZWxmLmdldFJlY29yZGVySGVpZ2h0KHRydWUpXG5cbiAgICBzZWxmLmVtaXQoRXZlbnRzLlBSRVZJRVcsIGtleSwgd2lkdGgsIGhlaWdodClcblxuICAgIC8vIGtlZXAgaXQgZm9yIHJlY29yZGluZyBzdGF0c1xuICAgIHdhaXRpbmdUaW1lID0gRGF0ZS5ub3coKSAtIHN0b3BUaW1lXG5cbiAgICByZWNvcmRpbmdTdGF0cy53YWl0aW5nVGltZSA9IHdhaXRpbmdUaW1lXG5cbiAgICBpZiAob3B0aW9ucy5kZWJ1Zykge1xuICAgICAgZGVidWcoXG4gICAgICAgICdXaGlsZSByZWNvcmRpbmcsICVzIGhhdmUgYmVlbiB0cmFuc2ZlcnJlZCBhbmQgd2FpdGluZyB0aW1lIHdhcyAlcycsXG4gICAgICAgIEh1bWFuaXplLmZpbGVzaXplKGJ5dGVzU3VtLCAyKSxcbiAgICAgICAgSHVtYW5pemUudG9UaW1lKHdhaXRpbmdUaW1lKVxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRTb2NrZXQgKGNiKSB7XG4gICAgaWYgKCFjb25uZWN0ZWQpIHtcbiAgICAgIGNvbm5lY3RpbmcgPSB0cnVlXG5cbiAgICAgIGRlYnVnKCdSZWNvcmRlcjogaW5pdGlhbGlzaW5nIHdlYiBzb2NrZXQgdG8gJXMnLCBvcHRpb25zLnNvY2tldFVybClcblxuICAgICAgc2VsZi5lbWl0KEV2ZW50cy5DT05ORUNUSU5HKVxuXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF4b2dkZW4vd2Vic29ja2V0LXN0cmVhbSNiaW5hcnktc29ja2V0c1xuXG4gICAgICAvLyB3ZSB1c2UgcXVlcnkgcGFyYW1ldGVycyBoZXJlIGJlY2F1c2Ugd2UgY2Fubm90IHNldCBjdXN0b20gaGVhZGVycyBpbiB3ZWIgc29ja2V0cyxcbiAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9pc3N1ZXMvNDY3XG5cbiAgICAgIGNvbnN0IHVybDJDb25uZWN0ID1cbiAgICAgICAgb3B0aW9ucy5zb2NrZXRVcmwgK1xuICAgICAgICAnPycgK1xuICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoQ29uc3RhbnRzLlNJVEVfTkFNRV9MQUJFTCkgK1xuICAgICAgICAnPScgK1xuICAgICAgICBlbmNvZGVVUklDb21wb25lbnQob3B0aW9ucy5zaXRlTmFtZSlcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gd2Vic29ja2V0IG9wdGlvbnMgY2Fubm90IGJlIHNldCBvbiBjbGllbnQgc2lkZSwgb25seSBvbiBzZXJ2ZXIsIHNlZVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF4b2dkZW4vd2Vic29ja2V0LXN0cmVhbS9pc3N1ZXMvMTE2I2lzc3VlY29tbWVudC0yOTY0MjEwNzdcbiAgICAgICAgc3RyZWFtID0gd2Vic29ja2V0KHVybDJDb25uZWN0LCB7XG4gICAgICAgICAgcGVyTWVzc2FnZURlZmxhdGU6IGZhbHNlLFxuICAgICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWF4b2dkZW4vd2Vic29ja2V0LXN0cmVhbS9pc3N1ZXMvMTE3I2lzc3VlY29tbWVudC0yOTg4MjYwMTFcbiAgICAgICAgICBvYmplY3RNb2RlOiB0cnVlXG4gICAgICAgIH0pXG4gICAgICB9IGNhdGNoIChleGMpIHtcbiAgICAgICAgY29ubmVjdGluZyA9IGNvbm5lY3RlZCA9IGZhbHNlXG5cbiAgICAgICAgdmFyIGVyclxuXG4gICAgICAgIGlmICh0eXBlb2Ygd2Vic29ja2V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGVyciA9IFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnVGhlcmUgaXMgbm8gd2Vic29ja2V0JywgJ0NhdXNlOiAnICsgcHJldHR5KGV4YyksIG9wdGlvbnMpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXJyID0gVmlkZW9tYWlsRXJyb3IuY3JlYXRlKFxuICAgICAgICAgICAgJ0ZhaWxlZCB0byBjb25uZWN0IHRvIHNlcnZlcicsXG4gICAgICAgICAgICAnUGxlYXNlIHVwZ3JhZGUgeW91ciBicm93c2VyLiBZb3VyIGN1cnJlbnQgdmVyc2lvbiBkb2VzIG5vdCBzZWVtIHRvIHN1cHBvcnQgd2Vic29ja2V0cy4nLFxuICAgICAgICAgICAgb3B0aW9ucywge1xuICAgICAgICAgICAgICBicm93c2VyUHJvYmxlbTogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIClcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuZW1pdChFdmVudHMuRVJST1IsIGVycilcbiAgICAgIH1cblxuICAgICAgaWYgKHN0cmVhbSkge1xuICAgICAgICAvLyAvLyB1c2VmdWwgZm9yIGRlYnVnZ2luZyBzdHJlYW1zXG4gICAgICAgIC8vXG4gICAgICAgIC8vIGlmICghc3RyZWFtLm9yaWdpbmFsRW1pdCkge1xuICAgICAgICAvLyAgIHN0cmVhbS5vcmlnaW5hbEVtaXQgPSBzdHJlYW0uZW1pdFxuICAgICAgICAvLyB9XG4gICAgICAgIC8vXG4gICAgICAgIC8vIHN0cmVhbS5lbWl0ID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgLy8gICBpZiAoc3RyZWFtKSB7XG4gICAgICAgIC8vICAgICBkZWJ1ZyhQSVBFX1NZTUJPTCArICdEZWJ1Z2dpbmcgc3RyZWFtIGV2ZW50OicsIHR5cGUpXG4gICAgICAgIC8vICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMClcbiAgICAgICAgLy8gICAgIHJldHVybiBzdHJlYW0ub3JpZ2luYWxFbWl0LmFwcGx5KHN0cmVhbSwgYXJncylcbiAgICAgICAgLy8gICB9XG4gICAgICAgIC8vIH1cblxuICAgICAgICBzdHJlYW0ub24oJ2Nsb3NlJywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGRlYnVnKFBJUEVfU1lNQk9MICsgJ1N0cmVhbSBoYXMgY2xvc2VkJylcblxuICAgICAgICAgIGNvbm5lY3RpbmcgPSBjb25uZWN0ZWQgPSBmYWxzZVxuXG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgZXJyIHx8ICdVbmhhbmRsZWQgd2Vic29ja2V0IGVycm9yJylcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5lbWl0KEV2ZW50cy5ESVNDT05ORUNURUQpXG5cbiAgICAgICAgICAgIC8vIHByZXZlbnRzIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLmlvL2lzc3Vlcy8yOTcgaGFwcGVuaW5nXG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSgpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHN0cmVhbS5vbignY29ubmVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkZWJ1ZyhQSVBFX1NZTUJPTCArICdTdHJlYW0gKmNvbm5lY3QqIGV2ZW50IGVtaXR0ZWQnKVxuXG4gICAgICAgICAgaWYgKCFjb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIGNvbm5lY3RlZCA9IHRydWVcbiAgICAgICAgICAgIGNvbm5lY3RpbmcgPSB1bmxvYWRlZCA9IGZhbHNlXG5cbiAgICAgICAgICAgIHNlbGYuZW1pdChFdmVudHMuQ09OTkVDVEVEKVxuXG4gICAgICAgICAgICBkZWJ1ZygnR29pbmcgdG8gYXNrIGZvciB3ZWJjYW0gcGVybWlzc29ucyBub3cgLi4uJylcblxuICAgICAgICAgICAgY2IgJiYgY2IoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGRlYnVnKFBJUEVfU1lNQk9MICsgJ1N0cmVhbSAqZGF0YSogZXZlbnQgZW1pdHRlZCcpXG5cbiAgICAgICAgICB2YXIgY29tbWFuZFxuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbW1hbmQgPSBKU09OLnBhcnNlKGRhdGEudG9TdHJpbmcoKSlcbiAgICAgICAgICB9IGNhdGNoIChleGMpIHtcbiAgICAgICAgICAgIGRlYnVnKCdGYWlsZWQgdG8gcGFyc2UgY29tbWFuZDonLCBleGMpXG5cbiAgICAgICAgICAgIHNlbGYuZW1pdChFdmVudHMuRVJST1IsIFZpZGVvbWFpbEVycm9yLmNyZWF0ZShcbiAgICAgICAgICAgICAgJ0ludmFsaWQgc2VydmVyIGNvbW1hbmQnLFxuICAgICAgICAgICAgICAvLyB0b1N0cmluZygpIHNpbmNlIGh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC5pby9pc3N1ZXMvMjg4XG4gICAgICAgICAgICAgICdDb250YWN0IHVzIGFzYXAuIEJhZCBjb21tbWFuZCB3YXMgJyArIGRhdGEudG9TdHJpbmcoKSArICcuICcsXG4gICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICAgICkpXG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGV4ZWN1dGVDb21tYW5kLmNhbGwoc2VsZiwgY29tbWFuZClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgc3RyZWFtLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBkZWJ1ZyhQSVBFX1NZTUJPTCArICdTdHJlYW0gKmVycm9yKiBldmVudCBlbWl0dGVkJywgZXJyKVxuXG4gICAgICAgICAgY29ubmVjdGluZyA9IGNvbm5lY3RlZCA9IGZhbHNlXG5cbiAgICAgICAgICAvLyBzZXR0aW5nIGN1c3RvbSB0ZXh0IHNpbmNlIHRoYXQgZXJyIG9iamVjdCBpc24ndCByZWFsbHkgYW4gZXJyb3JcbiAgICAgICAgICAvLyBvbiBpcGhvbmVzIHdoZW4gbG9ja2VkLCBhbmQgdW5sb2NrZWQsIHRoaXMgZXJyIGlzIGFjdHVhbGx5XG4gICAgICAgICAgLy8gYW4gZXZlbnQgb2JqZWN0IHdpdGggc3R1ZmYgd2UgY2FuJ3QgdXNlIGF0IGFsbCAoYW4gZXh0ZXJuYWwgYnVnKVxuICAgICAgICAgIHNlbGYuZW1pdChFdmVudHMuRVJST1IsIFZpZGVvbWFpbEVycm9yLmNyZWF0ZShcbiAgICAgICAgICAgICdDb25uZWN0aW9uIGVycm9yJyxcbiAgICAgICAgICAgICdEYXRhIGV4Y2hhbmdlIGhhcyBiZWVuIGludGVycnVwdGVkLiBQbGVhc2UgcmVsb2FkLicsXG4gICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgKSlcbiAgICAgICAgfSlcblxuICAgICAgICAvLyBqdXN0IGV4cGVyaW1lbnRhbFxuXG4gICAgICAgIHN0cmVhbS5vbignZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGVidWcoUElQRV9TWU1CT0wgKyAnU3RyZWFtICpkcmFpbiogZXZlbnQgZW1pdHRlZCAoc2hvdWxkIG5vdCBoYXBwZW4hKScpXG4gICAgICAgIH0pXG5cbiAgICAgICAgc3RyZWFtLm9uKCdwcmVlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGVidWcoUElQRV9TWU1CT0wgKyAnU3RyZWFtICpwcmVlbmQqIGV2ZW50IGVtaXR0ZWQnKVxuICAgICAgICB9KVxuXG4gICAgICAgIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRlYnVnKFBJUEVfU1lNQk9MICsgJ1N0cmVhbSAqZW5kKiBldmVudCBlbWl0dGVkJylcbiAgICAgICAgfSlcblxuICAgICAgICBzdHJlYW0ub24oJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRlYnVnKFBJUEVfU1lNQk9MICsgJ1N0cmVhbSAqZHJhaW4qIGV2ZW50IGVtaXR0ZWQnKVxuICAgICAgICB9KVxuXG4gICAgICAgIHN0cmVhbS5vbigncGlwZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkZWJ1ZyhQSVBFX1NZTUJPTCArICdTdHJlYW0gKnBpcGUqIGV2ZW50IGVtaXR0ZWQnKVxuICAgICAgICB9KVxuXG4gICAgICAgIHN0cmVhbS5vbigndW5waXBlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRlYnVnKFBJUEVfU1lNQk9MICsgJ1N0cmVhbSAqdW5waXBlKiBldmVudCBlbWl0dGVkJylcbiAgICAgICAgfSlcblxuICAgICAgICBzdHJlYW0ub24oJ3Jlc3VtZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkZWJ1ZyhQSVBFX1NZTUJPTCArICdTdHJlYW0gKnJlc3VtZSogZXZlbnQgZW1pdHRlZCcpXG4gICAgICAgIH0pXG5cbiAgICAgICAgc3RyZWFtLm9uKCd1bmNvcmsnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGVidWcoUElQRV9TWU1CT0wgKyAnU3RyZWFtICp1bmNvcmsqIGV2ZW50IGVtaXR0ZWQnKVxuICAgICAgICB9KVxuXG4gICAgICAgIHN0cmVhbS5vbigncmVhZGFibGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGVidWcoUElQRV9TWU1CT0wgKyAnU3RyZWFtICpwcmVlbmQqIGV2ZW50IGVtaXR0ZWQnKVxuICAgICAgICB9KVxuXG4gICAgICAgIHN0cmVhbS5vbigncHJlZmluaXNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRlYnVnKFBJUEVfU1lNQk9MICsgJ1N0cmVhbSAqcHJlZW5kKiBldmVudCBlbWl0dGVkJylcbiAgICAgICAgfSlcblxuICAgICAgICBzdHJlYW0ub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkZWJ1ZyhQSVBFX1NZTUJPTCArICdTdHJlYW0gKnByZWVuZCogZXZlbnQgZW1pdHRlZCcpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2hvd1VzZXJNZWRpYSAoKSB7XG4gICAgLy8gdXNlIGNvbm5lY3RlZCBmbGFnIHRvIHByZXZlbnQgdGhpcyBmcm9tIGhhcHBlbmluZ1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC5pby9pc3N1ZXMvMzIzXG4gICAgcmV0dXJuIGNvbm5lY3RlZCAmJiAoaXNOb3RpZnlpbmcoKSB8fCAhaXNIaWRkZW4oKSB8fCBibG9ja2luZylcbiAgfVxuXG4gIGZ1bmN0aW9uIHVzZXJNZWRpYUVycm9yQ2FsbGJhY2sgKGVycikge1xuICAgIHVzZXJNZWRpYUxvYWRpbmcgPSBmYWxzZVxuICAgIGNsZWFyVXNlck1lZGlhVGltZW91dCgpXG5cbiAgICBkZWJ1ZyhcbiAgICAgICdSZWNvcmRlcjogdXNlck1lZGlhRXJyb3JDYWxsYmFjaygpJyxcbiAgICAgICcsIFdlYmNhbSBjaGFyYWN0ZXJpc3RpY3M6JyxcbiAgICAgIHVzZXJNZWRpYS5nZXRDaGFyYWN0ZXJpc3RpY3MoKVxuICAgIClcblxuICAgIGNvbnN0IGVycm9yTGlzdGVuZXJzID0gc2VsZi5saXN0ZW5lcnMoRXZlbnRzLkVSUk9SKVxuXG4gICAgaWYgKGVycm9yTGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgaWYgKGVyci5uYW1lICE9PSBWaWRlb21haWxFcnJvci5NRURJQV9ERVZJQ0VfTk9UX1NVUFBPUlRFRCkge1xuICAgICAgICBzZWxmLmVtaXQoRXZlbnRzLkVSUk9SLCBWaWRlb21haWxFcnJvci5jcmVhdGUoXG4gICAgICAgICAgZXJyLFxuICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgKSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRvIG5vdCBlbWl0IGJ1dCByZXRyeSBzaW5jZSBNRURJQV9ERVZJQ0VfTk9UX1NVUFBPUlRFRCBjYW4gYmUgYSByYWNlIGNvbmRpdGlvblxuICAgICAgICBkZWJ1ZygnUmVjb3JkZXI6IGlnbm9yZSB1c2VyIG1lZGlhIGVycm9yJywgZXJyKVxuICAgICAgfVxuXG4gICAgICAvLyByZXRyeSBhZnRlciBhIHdoaWxlXG4gICAgICByZXRyeVRpbWVvdXQgPSBzZXRUaW1lb3V0KGluaXRTb2NrZXQsIG9wdGlvbnMudGltZW91dHMudXNlck1lZGlhKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodW5sb2FkZWQpIHtcbiAgICAgICAgLy8gY2FuIGhhcHBlbiB0aGF0IGNvbnRhaW5lciBpcyB1bmxvYWRlZCBidXQgc29tZSB1c2VyIG1lZGlhIHJlbGF0ZWQgY2FsbGJhY2tzXG4gICAgICAgIC8vIGFyZSBzdGlsbCBpbiBwcm9jZXNzLiBpbiB0aGF0IGNhc2UgaWdub3JlIGVycm9yLlxuICAgICAgICBkZWJ1ZygnUmVjb3JkZXI6IGFscmVhZHkgdW5sb2FkZWQuIE5vdCBnb2luZyB0byB0aHJvdyBlcnJvcicsIGVycilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnKCdSZWNvcmRlcjogbm8gZXJyb3IgbGlzdGVuZXJzIGF0dGFjaGVkIGJ1dCB0aHJvd2luZyBlcnJvcicsIGVycilcblxuICAgICAgICAvLyB3ZWlyZCBzaXR1YXRpb24sIHRocm93IGl0IGluc3RlYWQgb2YgZW1pdHRpbmcgc2luY2UgdGhlcmUgYXJlIG5vIGVycm9yIGxpc3RlbmVyc1xuICAgICAgICB0aHJvdyBWaWRlb21haWxFcnJvci5jcmVhdGUoXG4gICAgICAgICAgZXJyLFxuICAgICAgICAgICdVbmFibGUgdG8gcHJvY2VzcyB0aGlzIGVycm9yIHNpbmNlIHRoZXJlIGFyZSBubyBlcnJvciBsaXN0ZW5lcnMgYW55bW9yZS4nLFxuICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFVzZXJNZWRpYUNhbGxiYWNrIChsb2NhbFN0cmVhbSkge1xuICAgIGRlYnVnKCdSZWNvcmRlcjogZ2V0VXNlck1lZGlhQ2FsbGJhY2soKScpXG5cbiAgICBpZiAoc2hvd1VzZXJNZWRpYSgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjbGVhclVzZXJNZWRpYVRpbWVvdXQoKVxuXG4gICAgICAgIHVzZXJNZWRpYS5pbml0KFxuICAgICAgICAgIGxvY2FsU3RyZWFtLFxuICAgICAgICAgIG9uVXNlck1lZGlhUmVhZHkuYmluZChzZWxmKSxcbiAgICAgICAgICBvbkF1ZGlvU2FtcGxlLmJpbmQoc2VsZiksXG4gICAgICAgICAgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgZXJyKVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgfSBjYXRjaCAoZXhjKSB7XG4gICAgICAgIHNlbGYuZW1pdChFdmVudHMuRVJST1IsIGV4YylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkR2VudWluZVVzZXJNZWRpYSAoKSB7XG4gICAgaWYgKCFuYXZpZ2F0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTmF2aWdhdG9yIGlzIG1pc3NpbmchJylcbiAgICB9XG5cbiAgICBkZWJ1ZygnUmVjb3JkZXI6IGxvYWRHZW51aW5lVXNlck1lZGlhKCknKVxuXG4gICAgc2VsZi5lbWl0KEV2ZW50cy5BU0tJTkdfV0VCQ0FNX1BFUk1JU1NJT04pXG5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTWVkaWFEZXZpY2VzL2dldFVzZXJNZWRpYVxuICAgIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKSB7XG4gICAgICAvLyBwcmVmZXIgdGhlIGZyb250IGNhbWVyYSAoaWYgb25lIGlzIGF2YWlsYWJsZSkgb3ZlciB0aGUgcmVhciBvbmVcbiAgICAgIGNvbnN0IGNvbnN0cmFpbnRzID0ge1xuICAgICAgICB2aWRlbzoge1xuICAgICAgICAgIGZhY2luZ01vZGU6IG9wdGlvbnMudmlkZW8uZmFjaW5nTW9kZSwgLy8gZGVmYXVsdCBpcyAndXNlcidcbiAgICAgICAgICBmcmFtZVJhdGU6IHsgaWRlYWw6IG9wdGlvbnMudmlkZW8uZnBzIH1cbiAgICAgICAgfSxcbiAgICAgICAgYXVkaW86IG9wdGlvbnMuaXNBdWRpb0VuYWJsZWQoKVxuICAgICAgfVxuXG4gICAgICBpZiAoYnJvd3Nlci5pc09rU2FmYXJpKCkpIHtcbiAgICAgICAgLy8gZG8gbm90IHVzZSB0aG9zZSB3aWR0aC9oZWlnaHQgY29uc3RyYWludHMgeWV0LFxuICAgICAgICAvLyBjdXJyZW50IHNhZmFyaSB3b3VsZCB0aHJvdyBhbiBlcnJvclxuICAgICAgICAvLyB0b2RvIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC1jbGllbnQvaXNzdWVzLzE0MlxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAob3B0aW9ucy5oYXNEZWZpbmVkV2lkdGgoKSkge1xuICAgICAgICAgIGNvbnN0cmFpbnRzLnZpZGVvLndpZHRoID0geyBpZGVhbDogb3B0aW9ucy52aWRlby53aWR0aCB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gb3RoZXJ3aXNlIHRyeSB0byBhcHBseSB0aGUgc2FtZSB3aWR0aCBhcyB0aGUgZWxlbWVudCBpcyBoYXZpbmdcbiAgICAgICAgICAvLyBidXQgdGhlcmUgaXMgbm8gMTAwJSBndWFyYW50ZWUgdGhhdCB0aGlzIHdpbGwgaGFwcGVuLiBub3RcbiAgICAgICAgICAvLyBhbGwgd2ViY2FtIGRyaXZlcnMgYmVoYXZlIHRoZSBzYW1lIHdheVxuICAgICAgICAgIGNvbnN0cmFpbnRzLnZpZGVvLndpZHRoID0geyBpZGVhbDogc2VsZi5saW1pdFdpZHRoKCkgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzRGVmaW5lZEhlaWdodCgpKSB7XG4gICAgICAgICAgY29uc3RyYWludHMudmlkZW8uaGVpZ2h0ID0geyBpZGVhbDogb3B0aW9ucy52aWRlby5oZWlnaHQgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGRlYnVnKCdSZWNvcmRlcjogbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoKScsIGNvbnN0cmFpbnRzKVxuXG4gICAgICBjb25zdCBnZW51aW5lVXNlck1lZGlhUmVxdWVzdCA9IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKVxuXG4gICAgICBpZiAoZ2VudWluZVVzZXJNZWRpYVJlcXVlc3QpIHtcbiAgICAgICAgZ2VudWluZVVzZXJNZWRpYVJlcXVlc3RcbiAgICAgICAgICAudGhlbihnZXRVc2VyTWVkaWFDYWxsYmFjaylcbiAgICAgICAgICAuY2F0Y2godXNlck1lZGlhRXJyb3JDYWxsYmFjaylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHRoaXMgdG8gdHJhcCBlcnJvcnMgbGlrZSB0aGVzZVxuICAgICAgICAvLyBDYW5ub3QgcmVhZCBwcm9wZXJ0eSAndGhlbicgb2YgdW5kZWZpbmVkXG5cbiAgICAgICAgLy8gdG9kbyByZXRyeSB3aXRoIG5hdmlnYXRvci5nZXRVc2VyTWVkaWFfKCkgbWF5YmU/XG4gICAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZShcbiAgICAgICAgICAnU29ycnksIHlvdXIgYnJvd3NlciBpcyB1bmFibGUgdG8gdXNlIGNhbWVyYXMuJyxcbiAgICAgICAgICAnVHJ5IGEgZGlmZmVyZW50IGJyb3dzZXIgd2l0aCBiZXR0ZXIgdXNlciBtZWRpYSBmdW5jdGlvbmFsaXRpZXMuJyxcbiAgICAgICAgICBvcHRpb25zXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ1JlY29yZGVyOiBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhKCknKVxuXG4gICAgICBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhXyh7XG4gICAgICAgIHZpZGVvOiB0cnVlLFxuICAgICAgICBhdWRpbzogb3B0aW9ucy5pc0F1ZGlvRW5hYmxlZCgpXG4gICAgICB9LCBnZXRVc2VyTWVkaWFDYWxsYmFjaywgdXNlck1lZGlhRXJyb3JDYWxsYmFjaylcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkVXNlck1lZGlhICgpIHtcbiAgICBpZiAodXNlck1lZGlhTG9hZGVkKSB7XG4gICAgICBkZWJ1ZygnUmVjb3JkZXI6IHNraXBwaW5nIGxvYWRVc2VyTWVkaWEoKSBiZWNhdXNlIGl0IGlzIGFscmVhZHkgbG9hZGVkJylcbiAgICAgIG9uVXNlck1lZGlhUmVhZHkoKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIGlmICh1c2VyTWVkaWFMb2FkaW5nKSB7XG4gICAgICBkZWJ1ZygnUmVjb3JkZXI6IHNraXBwaW5nIGxvYWRVc2VyTWVkaWEoKSBiZWNhdXNlIGl0IGlzIGFscmVhZHkgYXNraW5nIGZvciBwZXJtaXNzaW9uJylcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGRlYnVnKCdSZWNvcmRlcjogbG9hZFVzZXJNZWRpYSgpJylcblxuICAgIHNlbGYuZW1pdChFdmVudHMuTE9BRElOR19VU0VSX01FRElBKVxuXG4gICAgdHJ5IHtcbiAgICAgIHVzZXJNZWRpYVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFzZWxmLmlzUmVhZHkoKSkge1xuICAgICAgICAgIHNlbGYuZW1pdChFdmVudHMuRVJST1IsIGJyb3dzZXIuZ2V0Tm9BY2Nlc3NJc3N1ZSgpKVxuICAgICAgICB9XG4gICAgICB9LCBvcHRpb25zLnRpbWVvdXRzLnVzZXJNZWRpYSlcblxuICAgICAgdXNlck1lZGlhTG9hZGluZyA9IHRydWVcblxuICAgICAgbG9hZEdlbnVpbmVVc2VyTWVkaWEoKVxuICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgZGVidWcoJ1JlY29yZGVyOiBmYWlsZWQgdG8gbG9hZCBnZW51aW5lIHVzZXIgbWVkaWEnKVxuXG4gICAgICB1c2VyTWVkaWFMb2FkaW5nID0gZmFsc2VcblxuICAgICAgY29uc3QgZXJyb3JMaXN0ZW5lcnMgPSBzZWxmLmxpc3RlbmVycyhFdmVudHMuRVJST1IpXG5cbiAgICAgIGlmIChlcnJvckxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgZXhjKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWcoJ1JlY29yZGVyOiBubyBlcnJvciBsaXN0ZW5lcnMgYXR0YWNoZWQgYnV0IHRocm93aW5nIGV4Y2VwdGlvbicsIGV4YylcbiAgICAgICAgdGhyb3cgZXhjIC8vIHRocm93IGl0IGZ1cnRoZXJcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBleGVjdXRlQ29tbWFuZCAoY29tbWFuZCkge1xuICAgIHRyeSB7XG4gICAgICBkZWJ1ZyhcbiAgICAgICAgJ1NlcnZlciBjb21tYW5kZWQ6ICVzJyxcbiAgICAgICAgY29tbWFuZC5jb21tYW5kLFxuICAgICAgICBjb21tYW5kLmFyZ3MgPyAnLCAnICsgc3RyaW5naWZ5KGNvbW1hbmQuYXJncykgOiAnJ1xuICAgICAgKVxuXG4gICAgICBzd2l0Y2ggKGNvbW1hbmQuY29tbWFuZCkge1xuICAgICAgICBjYXNlICdyZWFkeSc6XG4gICAgICAgICAgaWYgKCF1c2VyTWVkaWFUaW1lb3V0KSB7IGxvYWRVc2VyTWVkaWEoKSB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAncHJldmlldyc6XG4gICAgICAgICAgcHJldmlldyhjb21tYW5kLmFyZ3MpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICAgIHRoaXMuZW1pdChFdmVudHMuRVJST1IsIFZpZGVvbWFpbEVycm9yLmNyZWF0ZShcbiAgICAgICAgICAgICdPaCBubywgc2VydmVyIGVycm9yIScsXG4gICAgICAgICAgICBjb21tYW5kLmFyZ3MuZXJyLnRvU3RyaW5nKCkgfHwgJyhObyBleHBsYW5hdGlvbiBnaXZlbiknLFxuICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnY29uZmlybUZyYW1lJzpcbiAgICAgICAgICB1cGRhdGVGcmFtZVByb2dyZXNzKGNvbW1hbmQuYXJncylcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdjb25maXJtU2FtcGxlJzpcbiAgICAgICAgICB1cGRhdGVTYW1wbGVQcm9ncmVzcyhjb21tYW5kLmFyZ3MpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnYmVnaW5BdWRpb0VuY29kaW5nJzpcbiAgICAgICAgICB0aGlzLmVtaXQoRXZlbnRzLkJFR0lOX0FVRElPX0VOQ09ESU5HKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2JlZ2luVmlkZW9FbmNvZGluZyc6XG4gICAgICAgICAgdGhpcy5lbWl0KEV2ZW50cy5CRUdJTl9WSURFT19FTkNPRElORylcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRoaXMuZW1pdChFdmVudHMuRVJST1IsICdVbmtub3duIHNlcnZlciBjb21tYW5kOiAnICsgY29tbWFuZC5jb21tYW5kKVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXhjKSB7XG4gICAgICBzZWxmLmVtaXQoRXZlbnRzLkVSUk9SLCBleGMpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNOb3RpZnlpbmcgKCkge1xuICAgIHJldHVybiB2aXN1YWxzLmlzTm90aWZ5aW5nKClcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSGlkZGVuICgpIHtcbiAgICByZXR1cm4gIXJlY29yZGVyRWxlbWVudCB8fCBoaWRkZW4ocmVjb3JkZXJFbGVtZW50KVxuICB9XG5cbiAgZnVuY3Rpb24gd3JpdGVDb21tYW5kIChjb21tYW5kLCBhcmdzLCBjYikge1xuICAgIGlmICghY2IgJiYgYXJncyAmJiBhcmdzLmNvbnN0cnVjdG9yID09PSBGdW5jdGlvbikge1xuICAgICAgY2IgPSBhcmdzXG4gICAgICBhcmdzID0gbnVsbFxuICAgIH1cblxuICAgIGlmICghY29ubmVjdGVkKSB7XG4gICAgICBkZWJ1ZygnUmVjb25uZWN0aW5nIGZvciB0aGUgY29tbWFuZCcsIGNvbW1hbmQsICfigKYnKVxuXG4gICAgICBpbml0U29ja2V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd3JpdGVDb21tYW5kKGNvbW1hbmQsIGFyZ3MpXG4gICAgICAgIGNiICYmIGNiKClcbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmIChzdHJlYW0pIHtcbiAgICAgIGRlYnVnKCckICVzJywgY29tbWFuZCwgYXJncyA/IHN0cmluZ2lmeShhcmdzKSA6ICcnKVxuXG4gICAgICBjb25zdCBjb21tYW5kT2JqID0ge1xuICAgICAgICBjb21tYW5kOiBjb21tYW5kLFxuICAgICAgICBhcmdzOiBhcmdzXG4gICAgICB9XG5cbiAgICAgIC8vIHRvZG8gY29tbWVudGVkIG91dCBiZWNhdXNlIGZvciBzb21lIHJlYXNvbnMgc2VydmVyIGRvZXMgbm90IGFjY2VwdCBzdWNoIGEgbG9uZ1xuICAgICAgLy8gYXJyYXkgb2YgbWFueSBsb2cgbGluZXMuIHRvIGV4YW1pbmUgbGF0ZXIuXG4gICAgICAvL1xuICAgICAgLy8gYWRkIHNvbWUgdXNlZnVsIGRlYnVnIGluZm8gdG8gZXhhbWluZSB3ZWlyZCBzdHVmZiBsaWtlIHRoaXMgb25lXG4gICAgICAvLyBVbnByb2Nlc3NhYmxlRXJyb3I6IFVuYWJsZSB0byBlbmNvZGUgYSB2aWRlbyB3aXRoIEZQUyBuZWFyIHplcm8uXG4gICAgICAvLyB0b2RvIGNvbnNpZGVyIHJlbW92aW5nIHRoaXMgbGF0ZXIgb3IgaGF2ZSBpdCBmb3IgZGVidWc9MSBvbmx5P1xuICAgICAgLy9cbiAgICAgIC8vIGlmIChvcHRpb25zLmxvZ2dlciAmJiBvcHRpb25zLmxvZ2dlci5nZXRMaW5lcykge1xuICAgICAgLy8gICBjb21tYW5kT2JqLmxvZ0xpbmVzID0gb3B0aW9ucy5sb2dnZXIuZ2V0TGluZXMoKVxuICAgICAgLy8gfVxuXG4gICAgICB3cml0ZVN0cmVhbShCdWZmZXIuZnJvbShzdHJpbmdpZnkoY29tbWFuZE9iaikpKVxuXG4gICAgICBpZiAoY2IpIHtcbiAgICAgICAgLy8ga2VlcCBhbGwgY2FsbGJhY2tzIGFzeW5jXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNiKClcbiAgICAgICAgfSwgMClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkaXNjb25uZWN0ICgpIHtcbiAgICBpZiAoY29ubmVjdGVkKSB7XG4gICAgICBkZWJ1ZygnUmVjb3JkZXI6IGRpc2Nvbm5lY3QoKScpXG5cbiAgICAgIGlmICh1c2VyTWVkaWEpIHtcbiAgICAgICAgLy8gcHJldmVudHMgaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLWNsaWVudC9pc3N1ZXMvMTE0XG4gICAgICAgIHVzZXJNZWRpYS51bmxvYWRSZW1haW5pbmdFdmVudExpc3RlbmVycygpXG4gICAgICB9XG5cbiAgICAgIGlmIChzdWJtaXR0aW5nKSB7XG4gICAgICAgIC8vIHNlcnZlciB3aWxsIGRpc2Nvbm5lY3Qgc29ja2V0IGF1dG9tYXRpY2FsbHkgYWZ0ZXIgc3VibWl0dGluZ1xuICAgICAgICBjb25uZWN0aW5nID0gY29ubmVjdGVkID0gZmFsc2VcbiAgICAgIH0gZWxzZSBpZiAoc3RyZWFtKSB7XG4gICAgICAgIC8vIGZvcmNlIHRvIGRpc2Nvbm5lY3Qgc29ja2V0IHJpZ2h0IG5vdyB0byBjbGVhbiB0ZW1wIGZpbGVzIG9uIHNlcnZlclxuICAgICAgICAvLyBldmVudCBsaXN0ZW5lcnMgd2lsbCBkbyB0aGUgcmVzdFxuICAgICAgICBzdHJlYW0uZW5kKClcbiAgICAgICAgc3RyZWFtID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsQW5pbWF0aW9uRnJhbWUgKCkge1xuICAgIGxvb3AgJiYgbG9vcC5kaXNwb3NlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEludGVydmFsU3VtICgpIHtcbiAgICByZXR1cm4gbG9vcC5nZXRFbGFwc2VkVGltZSgpXG4gIH1cblxuICBmdW5jdGlvbiBnZXRBdmdJbnRlcnZhbCAoKSB7XG4gICAgcmV0dXJuIChnZXRJbnRlcnZhbFN1bSgpIC8gZnJhbWVzQ291bnQpXG4gIH1cblxuICB0aGlzLmdldFJlY29yZGluZ1N0YXRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZWNvcmRpbmdTdGF0c1xuICB9XG5cbiAgdGhpcy5nZXRBdWRpb1NhbXBsZVJhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZXJNZWRpYS5nZXRBdWRpb1NhbXBsZVJhdGUoKVxuICB9XG5cbiAgdGhpcy5zdG9wID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIGRlYnVnKCdzdG9wKCknLCBwYXJhbXMpXG5cbiAgICBjb25zdCBsaW1pdFJlYWNoZWQgPSBwYXJhbXMubGltaXRSZWFjaGVkXG5cbiAgICB0aGlzLmVtaXQoRXZlbnRzLlNUT1BQSU5HLCBsaW1pdFJlYWNoZWQpXG5cbiAgICBsb29wLmNvbXBsZXRlKClcblxuICAgIHN0b3BUaW1lID0gRGF0ZS5ub3coKVxuXG4gICAgcmVjb3JkaW5nU3RhdHMgPSB7XG4gICAgICBhdmdGcHM6IGxvb3AuZ2V0RlBTKCksXG4gICAgICB3YW50ZWRGcHM6IG9wdGlvbnMudmlkZW8uZnBzLFxuICAgICAgYXZnSW50ZXJ2YWw6IGdldEF2Z0ludGVydmFsKCksXG4gICAgICB3YW50ZWRJbnRlcnZhbDogMWUzIC8gb3B0aW9ucy52aWRlby5mcHMsXG5cbiAgICAgIGludGVydmFsU3VtOiBnZXRJbnRlcnZhbFN1bSgpLFxuICAgICAgZnJhbWVzQ291bnQ6IGZyYW1lc0NvdW50LFxuICAgICAgdmlkZW9UeXBlOiByZXBsYXkuZ2V0VmlkZW9UeXBlKClcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pc0F1ZGlvRW5hYmxlZCgpKSB7XG4gICAgICByZWNvcmRpbmdTdGF0cy5zYW1wbGVzQ291bnQgPSBzYW1wbGVzQ291bnRcbiAgICAgIHJlY29yZGluZ1N0YXRzLnNhbXBsZVJhdGUgPSB1c2VyTWVkaWEuZ2V0QXVkaW9TYW1wbGVSYXRlKClcbiAgICB9XG5cbiAgICB3cml0ZUNvbW1hbmQoJ3N0b3AnLCByZWNvcmRpbmdTdGF0cylcblxuICAgIC8vIGJld2FyZSwgcmVzZXR0aW5nIHdpbGwgc2V0IGZyYW1lc0NvdW50IHRvIHplcm8sIHNvIGxlYXZlIHRoaXMgaGVyZVxuICAgIHRoaXMucmVzZXQoKVxuICB9XG5cbiAgdGhpcy5iYWNrID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgdGhpcy5lbWl0KEV2ZW50cy5HT0lOR19CQUNLKVxuXG4gICAgc2hvdygpXG4gICAgdGhpcy5yZXNldCgpXG5cbiAgICB3cml0ZUNvbW1hbmQoJ2JhY2snLCBjYilcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlSW5pdGlhbGlzZUF1ZGlvICgpIHtcbiAgICBkZWJ1ZygnUmVjb3JkZXI6IHJlSW5pdGlhbGlzZUF1ZGlvKCknKVxuXG4gICAgY2xlYXJVc2VyTWVkaWFUaW1lb3V0KClcblxuICAgIC8vIGltcG9ydGFudCB0byBmcmVlIG1lbW9yeVxuICAgIHVzZXJNZWRpYSAmJiB1c2VyTWVkaWEuc3RvcCgpXG5cbiAgICB1c2VyTWVkaWFMb2FkZWQgPSBrZXkgPSBjYW52YXMgPSBjdHggPSBudWxsXG5cbiAgICBsb2FkVXNlck1lZGlhKClcbiAgfVxuXG4gIHRoaXMudW5sb2FkID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoIXVubG9hZGVkKSB7XG4gICAgICB2YXIgY2F1c2VcblxuICAgICAgaWYgKGUpIHtcbiAgICAgICAgY2F1c2UgPSBlLm5hbWUgfHwgZS5zdGF0dXNUZXh0IHx8IGUudG9TdHJpbmcoKVxuICAgICAgfVxuXG4gICAgICBkZWJ1ZygnUmVjb3JkZXI6IHVubG9hZCgpJyArIChjYXVzZSA/ICcsIGNhdXNlOiAnICsgY2F1c2UgOiAnJykpXG5cbiAgICAgIHRoaXMucmVzZXQoKVxuXG4gICAgICBjbGVhclVzZXJNZWRpYVRpbWVvdXQoKVxuXG4gICAgICBkaXNjb25uZWN0KClcblxuICAgICAgdW5sb2FkZWQgPSB0cnVlXG5cbiAgICAgIGJ1aWx0ID0gZmFsc2VcbiAgICB9XG4gIH1cblxuICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIG5vIG5lZWQgdG8gcmVzZXQgd2hlbiBhbHJlYWR5IHVubG9hZGVkXG4gICAgaWYgKCF1bmxvYWRlZCkge1xuICAgICAgZGVidWcoJ1JlY29yZGVyOiByZXNldCgpJylcblxuICAgICAgdGhpcy5lbWl0KEV2ZW50cy5SRVNFVFRJTkcpXG5cbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKClcblxuICAgICAgLy8gaW1wb3J0YW50IHRvIGZyZWUgbWVtb3J5XG4gICAgICB1c2VyTWVkaWEgJiYgdXNlck1lZGlhLnN0b3AoKVxuXG4gICAgICByZXBsYXkucmVzZXQoKVxuXG4gICAgICB1c2VyTWVkaWFMb2FkZWQgPSBrZXkgPSBjYW52YXMgPSBjdHggPSB3YWl0aW5nVGltZSA9IG51bGxcbiAgICB9XG4gIH1cblxuICB0aGlzLnZhbGlkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjb25uZWN0ZWQgJiYgZnJhbWVzQ291bnQgPiAwICYmIGNhbnZhcyA9PT0gbnVsbFxuICB9XG5cbiAgdGhpcy5pc1JlYWR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VyTWVkaWEuaXNSZWFkeSgpXG4gIH1cblxuICB0aGlzLnBhdXNlID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIGNvbnN0IGUgPSBwYXJhbXMgJiYgcGFyYW1zLmV2ZW50XG5cbiAgICBpZiAoZSBpbnN0YW5jZW9mIHdpbmRvdy5FdmVudCkge1xuICAgICAgcGFyYW1zLmV2ZW50VHlwZSA9IGUudHlwZVxuICAgIH1cblxuICAgIGRlYnVnKCdwYXVzZSgpJywgcGFyYW1zKVxuXG4gICAgdXNlck1lZGlhLnBhdXNlKClcbiAgICBsb29wLnN0b3AoKVxuXG4gICAgdGhpcy5lbWl0KEV2ZW50cy5QQVVTRUQpXG5cbiAgICBzZW5kUGluZ3MoKVxuICB9XG5cbiAgdGhpcy5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlck1lZGlhICYmIHVzZXJNZWRpYS5pc1BhdXNlZCgpXG4gIH1cblxuICB0aGlzLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1ZygnUmVjb3JkZXI6IHJlc3VtZSgpJylcblxuICAgIHN0b3BQaW5ncygpXG5cbiAgICB0aGlzLmVtaXQoRXZlbnRzLlJFU1VNSU5HKVxuXG4gICAgdXNlck1lZGlhLnJlc3VtZSgpXG4gICAgbG9vcC5zdGFydCgpXG4gIH1cblxuICBmdW5jdGlvbiBvbkZsdXNoZWQgKG9wdHMpIHtcbiAgICBjb25zdCBmcmFtZU51bWJlciA9IG9wdHMgJiYgb3B0cy5mcmFtZU51bWJlclxuXG4gICAgaWYgKGZyYW1lTnVtYmVyID09PSAxKSB7XG4gICAgICBzZWxmLmVtaXQoRXZlbnRzLkZJUlNUX0ZSQU1FX1NFTlQpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTG9vcCAoKSB7XG4gICAgY29uc3QgbmV3TG9vcCA9IGFuaW1pdHRlcih7IGZwczogb3B0aW9ucy52aWRlby5mcHMgfSwgZHJhdylcblxuICAgIC8vIHJlbWVtYmVyIGl0IGZpcnN0XG4gICAgb3JpZ2luYWxBbmltYXRpb25GcmFtZU9iamVjdCA9IG5ld0xvb3AuZ2V0UmVxdWVzdEFuaW1hdGlvbkZyYW1lT2JqZWN0KClcblxuICAgIHJldHVybiBuZXdMb29wXG4gIH1cblxuICBmdW5jdGlvbiBkcmF3IChkZWx0YVRpbWUsIGVsYXBzZWRUaW1lKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIGN0eCBhbmQgc3RyZWFtIG1pZ2h0IGJlY29tZSBudWxsIHdoaWxlIHVubG9hZGluZ1xuICAgICAgaWYgKCFzZWxmLmlzUGF1c2VkKCkgJiYgc3RyZWFtICYmIGN0eCkge1xuICAgICAgICBpZiAoZnJhbWVzQ291bnQgPT09IDApIHtcbiAgICAgICAgICBzZWxmLmVtaXQoRXZlbnRzLlNFTkRJTkdfRklSU1RfRlJBTUUpXG4gICAgICAgIH1cblxuICAgICAgICBmcmFtZXNDb3VudCsrXG5cbiAgICAgICAgY3R4LmRyYXdJbWFnZShcbiAgICAgICAgICB1c2VyTWVkaWEuZ2V0UmF3VmlzdWFscygpLFxuICAgICAgICAgIDAsXG4gICAgICAgICAgMCxcbiAgICAgICAgICBjYW52YXMud2lkdGgsXG4gICAgICAgICAgY2FudmFzLmhlaWdodFxuICAgICAgICApXG5cbiAgICAgICAgcmVjb3JkaW5nQnVmZmVyID0gZnJhbWUudG9CdWZmZXIoKVxuICAgICAgICByZWNvcmRpbmdCdWZmZXJMZW5ndGggPSByZWNvcmRpbmdCdWZmZXIubGVuZ3RoXG5cbiAgICAgICAgaWYgKHJlY29yZGluZ0J1ZmZlckxlbmd0aCA8IDEpIHtcbiAgICAgICAgICB0aHJvdyBWaWRlb21haWxFcnJvci5jcmVhdGUoJ0ZhaWxlZCB0byBleHRyYWN0IHdlYmNhbSBkYXRhLicsIG9wdGlvbnMpXG4gICAgICAgIH1cblxuICAgICAgICBieXRlc1N1bSArPSByZWNvcmRpbmdCdWZmZXJMZW5ndGhcblxuICAgICAgICB3cml0ZVN0cmVhbShyZWNvcmRpbmdCdWZmZXIsIHtcbiAgICAgICAgICBmcmFtZU51bWJlcjogZnJhbWVzQ291bnQsXG4gICAgICAgICAgb25GbHVzaGVkQ2FsbGJhY2s6IG9uRmx1c2hlZFxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIGlmIChvcHRpb25zLnZlcmJvc2UpIHtcbiAgICAgICAgLy8gICBkZWJ1ZyhcbiAgICAgICAgLy8gICAgICdGcmFtZSAjJyArIGZyYW1lc0NvdW50ICsgJyAoJyArIHJlY29yZGluZ0J1ZmZlckxlbmd0aCArICcgYnl0ZXMpOicsXG4gICAgICAgIC8vICAgICAnIGRlbHRhPScgKyBkZWx0YVRpbWUgKyAnbXMsICcgK1xuICAgICAgICAvLyAgICAgJyBlbGFwc2VkPScgKyBlbGFwc2VkVGltZSArICdtcydcbiAgICAgICAgLy8gICApXG4gICAgICAgIC8vIH1cblxuICAgICAgICB2aXN1YWxzLmNoZWNrVGltZXIoeyBpbnRlcnZhbFN1bTogZWxhcHNlZFRpbWUgfSlcbiAgICAgIH1cbiAgICB9IGNhdGNoIChleGMpIHtcbiAgICAgIHNlbGYuZW1pdChFdmVudHMuRVJST1IsIGV4YylcbiAgICB9XG4gIH1cblxuICB0aGlzLnJlY29yZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodW5sb2FkZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIC8vIHJlY29ubmVjdCB3aGVuIG5lZWRlZFxuICAgIGlmICghY29ubmVjdGVkKSB7XG4gICAgICBkZWJ1ZygnUmVjb3JkZXI6IHJlY29ubmVjdGluZyBiZWZvcmUgcmVjb3JkaW5nIC4uLicpXG5cbiAgICAgIGluaXRTb2NrZXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLm9uY2UoRXZlbnRzLlVTRVJfTUVESUFfUkVBRFksIHNlbGYucmVjb3JkKVxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNhbnZhcyA9IHVzZXJNZWRpYS5jcmVhdGVDYW52YXMoKVxuICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgc2VsZi5lbWl0KFxuICAgICAgICBFdmVudHMuRVJST1IsXG4gICAgICAgIFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnRmFpbGVkIHRvIGNyZWF0ZSBjYW52YXMuJywgZXhjLCBvcHRpb25zKVxuICAgICAgKVxuXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuXG4gICAgaWYgKCFjYW52YXMud2lkdGgpIHtcbiAgICAgIHNlbGYuZW1pdChcbiAgICAgICAgRXZlbnRzLkVSUk9SLFxuICAgICAgICBWaWRlb21haWxFcnJvci5jcmVhdGUoJ0NhbnZhcyBoYXMgYW4gaW52YWxpZCB3aWR0aC4nLCBvcHRpb25zKVxuICAgICAgKVxuXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoIWNhbnZhcy5oZWlnaHQpIHtcbiAgICAgIHNlbGYuZW1pdChcbiAgICAgICAgRXZlbnRzLkVSUk9SLFxuICAgICAgICBWaWRlb21haWxFcnJvci5jcmVhdGUoJ0NhbnZhcyBoYXMgYW4gaW52YWxpZCBoZWlnaHQuJywgb3B0aW9ucylcbiAgICAgIClcblxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgYnl0ZXNTdW0gPSAwXG5cbiAgICBmcmFtZSA9IG5ldyBGcmFtZShjYW52YXMsIG9wdGlvbnMpXG5cbiAgICBkZWJ1ZygnUmVjb3JkZXI6IHJlY29yZCgpJylcbiAgICB1c2VyTWVkaWEucmVjb3JkKClcblxuICAgIHNlbGYuZW1pdChFdmVudHMuUkVDT1JESU5HLCBmcmFtZXNDb3VudClcblxuICAgIGxvb3Auc3RhcnQoKVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0QW5pbWF0aW9uRnJhbWVPYmplY3QgKG5ld09iaikge1xuICAgIC8vIG11c3Qgc3RvcCBhbmQgdGhlbiBzdGFydCB0byBtYWtlIGl0IGJlY29tZSBlZmZlY3RpdmUsIHNlZVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9oYXB0aWNkYXRhL2FuaW1pdHRlci9pc3N1ZXMvNSNpc3N1ZWNvbW1lbnQtMjkyMDE5MTY4XG4gICAgaWYgKGxvb3ApIHtcbiAgICAgIGNvbnN0IGlzUmVjb3JkaW5nID0gc2VsZi5pc1JlY29yZGluZygpXG5cbiAgICAgIGxvb3Auc3RvcCgpXG4gICAgICBsb29wLnNldFJlcXVlc3RBbmltYXRpb25GcmFtZU9iamVjdChuZXdPYmopXG5cbiAgICAgIGlmIChpc1JlY29yZGluZykge1xuICAgICAgICBsb29wLnN0YXJ0KClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXN0b3JlQW5pbWF0aW9uRnJhbWVPYmplY3QgKCkge1xuICAgIGRlYnVnKCdSZWNvcmRlcjogcmVzdG9yZUFuaW1hdGlvbkZyYW1lT2JqZWN0KCknKVxuXG4gICAgc2V0QW5pbWF0aW9uRnJhbWVPYmplY3Qob3JpZ2luYWxBbmltYXRpb25GcmFtZU9iamVjdClcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvb3BXaXRoVGltZW91dHMgKCkge1xuICAgIGRlYnVnKCdSZWNvcmRlcjogbG9vcFdpdGhUaW1lb3V0cygpJylcblxuICAgIGNvbnN0IHdhbnRlZEludGVydmFsID0gMWUzIC8gb3B0aW9ucy52aWRlby5mcHNcblxuICAgIHZhciBwcm9jZXNzaW5nVGltZSA9IDBcbiAgICB2YXIgc3RhcnRcblxuICAgIGZ1bmN0aW9uIHJhZiAoZm4pIHtcbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgICAgICAgZm4oKVxuICAgICAgICAgIHByb2Nlc3NpbmdUaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHJlZHVjaW5nIHdhbnRlZCBpbnRlcnZhbCBieSByZXNwZWN0aW5nIHRoZSB0aW1lIGl0IHRha2VzIHRvXG4gICAgICAgIC8vIGNvbXB1dGUgaW50ZXJuYWxseSBzaW5jZSB0aGlzIGlzIG5vdCBtdWx0aS10aHJlYWRlZCBsaWtlXG4gICAgICAgIC8vIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgICB3YW50ZWRJbnRlcnZhbCAtIHByb2Nlc3NpbmdUaW1lXG4gICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuY2VsIChpZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGlkKVxuICAgIH1cblxuICAgIHNldEFuaW1hdGlvbkZyYW1lT2JqZWN0KHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZTogcmFmLFxuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWU6IGNhbmNlbFxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBidWlsZEVsZW1lbnQgKCkge1xuICAgIHJlY29yZGVyRWxlbWVudCA9IGgoJ3ZpZGVvLicgKyBvcHRpb25zLnNlbGVjdG9ycy51c2VyTWVkaWFDbGFzcylcbiAgICB2aXN1YWxzLmFwcGVuZENoaWxkKHJlY29yZGVyRWxlbWVudClcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvcnJlY3REaW1lbnNpb25zICgpIHtcbiAgICBpZiAob3B0aW9ucy5oYXNEZWZpbmVkV2lkdGgoKSkge1xuICAgICAgcmVjb3JkZXJFbGVtZW50LndpZHRoID0gc2VsZi5nZXRSZWNvcmRlcldpZHRoKHRydWUpXG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaGFzRGVmaW5lZEhlaWdodCgpKSB7XG4gICAgICByZWNvcmRlckVsZW1lbnQuaGVpZ2h0ID0gc2VsZi5nZXRSZWNvcmRlckhlaWdodCh0cnVlKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRFdmVudHMgKCkge1xuICAgIGRlYnVnKCdSZWNvcmRlcjogaW5pdEV2ZW50cygpJylcblxuICAgIHNlbGZcbiAgICAgIC5vbihFdmVudHMuU1VCTUlUVElORywgZnVuY3Rpb24gKCkge1xuICAgICAgICBzdWJtaXR0aW5nID0gdHJ1ZVxuICAgICAgfSlcbiAgICAgIC5vbihFdmVudHMuU1VCTUlUVEVELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN1Ym1pdHRpbmcgPSBmYWxzZVxuICAgICAgICBzZWxmLnVubG9hZCgpXG4gICAgICB9KVxuICAgICAgLm9uKEV2ZW50cy5CTE9DS0lORywgZnVuY3Rpb24gKCkge1xuICAgICAgICBibG9ja2luZyA9IHRydWVcbiAgICAgICAgY2xlYXJVc2VyTWVkaWFUaW1lb3V0KClcbiAgICAgIH0pXG4gICAgICAub24oRXZlbnRzLkhJREUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5oaWRlKClcbiAgICAgIH0pXG4gICAgICAub24oRXZlbnRzLkxPQURFRF9NRVRBX0RBVEEsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29ycmVjdERpbWVuc2lvbnMoKVxuICAgICAgfSlcbiAgICAgIC5vbihFdmVudHMuRElTQUJMSU5HX0FVRElPLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlSW5pdGlhbGlzZUF1ZGlvKClcbiAgICAgIH0pXG4gICAgICAub24oRXZlbnRzLkVOQUJMSU5HX0FVRElPLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlSW5pdGlhbGlzZUF1ZGlvKClcbiAgICAgIH0pXG4gICAgICAub24oRXZlbnRzLklOVklTSUJMRSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBsb29wV2l0aFRpbWVvdXRzKClcbiAgICAgIH0pXG4gICAgICAub24oRXZlbnRzLlZJU0lCTEUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVzdG9yZUFuaW1hdGlvbkZyYW1lT2JqZWN0KClcbiAgICAgIH0pXG4gIH1cblxuICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlcnIgPSBicm93c2VyLmNoZWNrUmVjb3JkaW5nQ2FwYWJpbGl0aWVzKClcblxuICAgIGlmICghZXJyKSB7XG4gICAgICBlcnIgPSBicm93c2VyLmNoZWNrQnVmZmVyVHlwZXMoKVxuICAgIH1cblxuICAgIGlmIChlcnIpIHtcbiAgICAgIHRoaXMuZW1pdChFdmVudHMuRVJST1IsIGVycilcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjb3JkZXJFbGVtZW50ID0gdmlzdWFscy5xdWVyeVNlbGVjdG9yKCd2aWRlby4nICsgb3B0aW9ucy5zZWxlY3RvcnMudXNlck1lZGlhQ2xhc3MpXG5cbiAgICAgIGlmICghcmVjb3JkZXJFbGVtZW50KSB7XG4gICAgICAgIGJ1aWxkRWxlbWVudCgpXG4gICAgICB9XG5cbiAgICAgIGNvcnJlY3REaW1lbnNpb25zKClcblxuICAgICAgLy8gcHJldmVudCBhdWRpbyBmZWVkYmFjaywgc2VlXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYmluYXJ5a2l0Y2hlbi92aWRlb21haWwtY2xpZW50L2lzc3Vlcy8zNVxuICAgICAgcmVjb3JkZXJFbGVtZW50Lm11dGVkID0gdHJ1ZVxuXG4gICAgICAvLyBmb3IgaXBob25lcywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJydGMvc2FtcGxlcy9pc3N1ZXMvOTI5XG4gICAgICByZWNvcmRlckVsZW1lbnQuc2V0QXR0cmlidXRlKCdwbGF5c2lubGluZScsIHRydWUpXG4gICAgICByZWNvcmRlckVsZW1lbnQuc2V0QXR0cmlidXRlKCd3ZWJraXQtcGxheXNpbmxpbmUnLCAnd2Via2l0LXBsYXlzaW5saW5lJylcblxuICAgICAgaWYgKCF1c2VyTWVkaWEpIHtcbiAgICAgICAgdXNlck1lZGlhID0gbmV3IFVzZXJNZWRpYSh0aGlzLCBvcHRpb25zKVxuICAgICAgfVxuXG4gICAgICBzaG93KClcblxuICAgICAgaWYgKCFidWlsdCkge1xuICAgICAgICBpbml0RXZlbnRzKClcblxuICAgICAgICBpZiAoIWNvbm5lY3RlZCkge1xuICAgICAgICAgIGluaXRTb2NrZXQoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvYWRVc2VyTWVkaWEoKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2FkVXNlck1lZGlhKClcbiAgICAgIH1cblxuICAgICAgYnVpbHQgPSB0cnVlXG4gICAgfVxuICB9XG5cbiAgdGhpcy5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlck1lZGlhICYmIHVzZXJNZWRpYS5pc1BhdXNlZCgpICYmICFsb29wLmlzUnVubmluZygpXG4gIH1cblxuICB0aGlzLmlzUmVjb3JkaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIGNoZWNraW5nIGZvciBzdHJlYW0uZGVzdHJveWVkIG5lZWRlZCBzaW5jZVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC5pby9pc3N1ZXMvMjk2XG4gICAgcmV0dXJuIGxvb3AgJiYgbG9vcC5pc1J1bm5pbmcoKSAmJiAhdGhpcy5pc1BhdXNlZCgpICYmICFpc05vdGlmeWluZygpICYmIHN0cmVhbSAmJiAhc3RyZWFtLmRlc3Ryb3llZFxuICB9XG5cbiAgdGhpcy5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghaXNIaWRkZW4oKSkge1xuICAgICAgcmVjb3JkZXJFbGVtZW50ICYmIGhpZGRlbihyZWNvcmRlckVsZW1lbnQsIHRydWUpXG5cbiAgICAgIGNsZWFyVXNlck1lZGlhVGltZW91dCgpXG4gICAgICBjbGVhclJldHJ5VGltZW91dCgpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5pc1VubG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1bmxvYWRlZFxuICB9XG5cbiAgLy8gdGhlc2UgdHdvIHJldHVybiB0aGUgdHJ1ZSBkaW1lbnNpb25zIG9mIHRoZSB3ZWJjYW0gYXJlYS5cbiAgLy8gbmVlZGVkIGJlY2F1c2Ugb24gbW9iaWxlcyB0aGV5IG1pZ2h0IGJlIGRpZmZlcmVudC5cblxuICB0aGlzLmdldFJlY29yZGVyV2lkdGggPSBmdW5jdGlvbiAocmVzcG9uc2l2ZSkge1xuICAgIGlmICh1c2VyTWVkaWEgJiYgdXNlck1lZGlhLmhhc1ZpZGVvV2lkdGgoKSkge1xuICAgICAgcmV0dXJuIHVzZXJNZWRpYS5nZXRSYXdXaWR0aChyZXNwb25zaXZlKVxuICAgIH0gZWxzZSBpZiAocmVzcG9uc2l2ZSAmJiBvcHRpb25zLmhhc0RlZmluZWRXaWR0aCgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5saW1pdFdpZHRoKG9wdGlvbnMudmlkZW8ud2lkdGgpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5nZXRSZWNvcmRlckhlaWdodCA9IGZ1bmN0aW9uIChyZXNwb25zaXZlKSB7XG4gICAgaWYgKHVzZXJNZWRpYSkge1xuICAgICAgcmV0dXJuIHVzZXJNZWRpYS5nZXRSYXdIZWlnaHQocmVzcG9uc2l2ZSlcbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNpdmUgJiYgb3B0aW9ucy5oYXNEZWZpbmVkSGVpZ2h0KCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZUhlaWdodChyZXNwb25zaXZlKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJhdGlvICgpIHtcbiAgICB2YXIgcmF0aW9cblxuICAgIGlmICh1c2VyTWVkaWEpIHtcbiAgICAgIGNvbnN0IHVzZXJNZWRpYVZpZGVvV2lkdGggPSB1c2VyTWVkaWEuZ2V0VmlkZW9XaWR0aCgpXG5cbiAgICAgIC8vIGF2b2lkIGRpdmlzaW9uIGJ5IHplcm9cbiAgICAgIGlmICh1c2VyTWVkaWFWaWRlb1dpZHRoIDwgMSkge1xuICAgICAgICAvLyB1c2UgYXMgYSBsYXN0IHJlc29ydCBmYWxsYmFjayBjb21wdXRhdGlvbiAobmVlZGVkIGZvciBzYWZhcmkgMTEpXG4gICAgICAgIHJhdGlvID0gdmlzdWFscy5nZXRSYXRpbygpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByYXRpbyA9IHVzZXJNZWRpYS5nZXRWaWRlb0hlaWdodCgpIC8gdXNlck1lZGlhVmlkZW9XaWR0aFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByYXRpbyA9IG9wdGlvbnMuZ2V0UmF0aW8oKVxuICAgIH1cblxuICAgIHJldHVybiByYXRpb1xuICB9XG5cbiAgdGhpcy5jYWxjdWxhdGVXaWR0aCA9IGZ1bmN0aW9uIChyZXNwb25zaXZlKSB7XG4gICAgdmFyIHZpZGVvSGVpZ2h0XG5cbiAgICBpZiAodXNlck1lZGlhKSB7XG4gICAgICB2aWRlb0hlaWdodCA9IHVzZXJNZWRpYS5nZXRWaWRlb0hlaWdodCgpXG4gICAgfSBlbHNlIGlmIChyZWNvcmRlckVsZW1lbnQpIHtcbiAgICAgIHZpZGVvSGVpZ2h0ID0gcmVjb3JkZXJFbGVtZW50LnZpZGVvSGVpZ2h0IHx8IHJlY29yZGVyRWxlbWVudC5oZWlnaHRcbiAgICB9XG5cbiAgICByZXR1cm4gdmlzdWFscy5jYWxjdWxhdGVXaWR0aCh7XG4gICAgICByZXNwb25zaXZlOiByZXNwb25zaXZlLFxuICAgICAgcmF0aW86IGdldFJhdGlvKCksXG4gICAgICB2aWRlb0hlaWdodDogdmlkZW9IZWlnaHRcbiAgICB9KVxuICB9XG5cbiAgdGhpcy5jYWxjdWxhdGVIZWlnaHQgPSBmdW5jdGlvbiAocmVzcG9uc2l2ZSkge1xuICAgIHZhciB2aWRlb1dpZHRoXG5cbiAgICBpZiAodXNlck1lZGlhKSB7XG4gICAgICB2aWRlb1dpZHRoID0gdXNlck1lZGlhLmdldFZpZGVvV2lkdGgoKVxuICAgIH0gZWxzZSBpZiAocmVjb3JkZXJFbGVtZW50KSB7XG4gICAgICB2aWRlb1dpZHRoID0gcmVjb3JkZXJFbGVtZW50LnZpZGVvV2lkdGggfHwgcmVjb3JkZXJFbGVtZW50LndpZHRoXG4gICAgfVxuXG4gICAgcmV0dXJuIHZpc3VhbHMuY2FsY3VsYXRlSGVpZ2h0KHtcbiAgICAgIHJlc3BvbnNpdmU6IHJlc3BvbnNpdmUsXG4gICAgICByYXRpbzogZ2V0UmF0aW8oKSxcbiAgICAgIHZpZGVvV2lkdGg6IHZpZGVvV2lkdGhcbiAgICB9KVxuICB9XG5cbiAgdGhpcy5nZXRSYXdWaXN1YWxVc2VyTWVkaWEgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlY29yZGVyRWxlbWVudFxuICB9XG5cbiAgdGhpcy5pc0Nvbm5lY3RlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29ubmVjdGVkXG4gIH1cblxuICB0aGlzLmlzQ29ubmVjdGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29ubmVjdGluZ1xuICB9XG5cbiAgdGhpcy5saW1pdFdpZHRoID0gZnVuY3Rpb24gKHdpZHRoKSB7XG4gICAgcmV0dXJuIHZpc3VhbHMubGltaXRXaWR0aCh3aWR0aClcbiAgfVxuXG4gIHRoaXMubGltaXRIZWlnaHQgPSBmdW5jdGlvbiAoaGVpZ2h0KSB7XG4gICAgcmV0dXJuIHZpc3VhbHMubGltaXRIZWlnaHQoaGVpZ2h0KVxuICB9XG5cbiAgdGhpcy5pc1VzZXJNZWRpYUxvYWRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlck1lZGlhTG9hZGVkXG4gIH1cbn1cblxudXRpbC5pbmhlcml0cyhSZWNvcmRlciwgRXZlbnRFbWl0dGVyKVxuXG5leHBvcnQgZGVmYXVsdCBSZWNvcmRlclxuIiwiaW1wb3J0IHV0aWwgZnJvbSAndXRpbCdcbmltcG9ydCBoIGZyb20gJ2h5cGVyc2NyaXB0J1xuaW1wb3J0IGhpZGRlbiBmcm9tICdoaWRkZW4nXG5pbXBvcnQgYWRkRXZlbnRMaXN0ZW5lcldpdGhPcHRpb25zIGZyb20gJ2FkZC1ldmVudGxpc3RlbmVyLXdpdGgtb3B0aW9ucydcblxuaW1wb3J0IEV2ZW50cyBmcm9tICcuLy4uLy4uL2V2ZW50cydcbmltcG9ydCBCcm93c2VyIGZyb20gJy4vLi4vLi4vdXRpbC9icm93c2VyJ1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLy4uLy4uL3V0aWwvZXZlbnRFbWl0dGVyJ1xuaW1wb3J0IFZpZGVvbWFpbEVycm9yIGZyb20gJy4vLi4vLi4vdXRpbC92aWRlb21haWxFcnJvcidcblxuaW1wb3J0IGVuYWJsZUlubGluZVZpZGVvIGZyb20gJ2lwaG9uZS1pbmxpbmUtdmlkZW8nXG5cbmNvbnN0IFJlcGxheSA9IGZ1bmN0aW9uIChwYXJlbnRFbGVtZW50LCBvcHRpb25zKSB7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMsIG9wdGlvbnMsICdSZXBsYXknKVxuXG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGNvbnN0IGJyb3dzZXIgPSBuZXcgQnJvd3NlcihvcHRpb25zKVxuICBjb25zdCBkZWJ1ZyA9IG9wdGlvbnMuZGVidWdcblxuICB2YXIgYnVpbHRcbiAgdmFyIHJlcGxheUVsZW1lbnRcbiAgdmFyIHZpZGVvbWFpbFxuXG4gIGZ1bmN0aW9uIGJ1aWxkRWxlbWVudCAoKSB7XG4gICAgZGVidWcoJ1JlcGxheTogYnVpbGRFbGVtZW50KCknKVxuXG4gICAgcmVwbGF5RWxlbWVudCA9IGgoJ3ZpZGVvLicgKyBvcHRpb25zLnNlbGVjdG9ycy5yZXBsYXlDbGFzcylcblxuICAgIGlmICghcmVwbGF5RWxlbWVudC5zZXRBdHRyaWJ1dGUpIHtcbiAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnUGxlYXNlIHVwZ3JhZGUgYnJvd3NlcicsIG9wdGlvbnMpXG4gICAgfVxuXG4gICAgcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChyZXBsYXlFbGVtZW50KVxuICB9XG5cbiAgZnVuY3Rpb24gaXNTdGFuZGFsb25lICgpIHtcbiAgICByZXR1cm4gcGFyZW50RWxlbWVudC5jb25zdHJ1Y3Rvci5uYW1lID09PSAnSFRNTERpdkVsZW1lbnQnXG4gIH1cblxuICBmdW5jdGlvbiBjb3B5QXR0cmlidXRlcyAobmV3VmlkZW9tYWlsKSB7XG4gICAgdmFyIGF0dHJpYnV0ZUNvbnRhaW5lclxuXG4gICAgT2JqZWN0LmtleXMobmV3VmlkZW9tYWlsKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgIGF0dHJpYnV0ZUNvbnRhaW5lciA9IHBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBhdHRyaWJ1dGUpXG5cbiAgICAgIGlmIChhdHRyaWJ1dGVDb250YWluZXIpIHtcbiAgICAgICAgYXR0cmlidXRlQ29udGFpbmVyLmlubmVySFRNTCA9IG5ld1ZpZGVvbWFpbFthdHRyaWJ1dGVdXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvcnJlY3REaW1lbnNpb25zIChvcHRpb25zKSB7XG4gICAgdmFyIHdpZHRoLCBoZWlnaHRcblxuICAgIGlmICh2aWRlb21haWwgJiYgdmlkZW9tYWlsLnBsYXllcldpZHRoKSB7XG4gICAgICB3aWR0aCA9IHZpZGVvbWFpbC5wbGF5ZXJXaWR0aFxuICAgIH0gZWxzZSBpZiAocGFyZW50RWxlbWVudC5jYWxjdWxhdGVXaWR0aCkge1xuICAgICAgd2lkdGggPSBwYXJlbnRFbGVtZW50LmNhbGN1bGF0ZVdpZHRoKG9wdGlvbnMpXG4gICAgfVxuXG4gICAgaWYgKHZpZGVvbWFpbCAmJiB2aWRlb21haWwucGxheWVySGVpZ2h0KSB7XG4gICAgICBoZWlnaHQgPSB2aWRlb21haWwucGxheWVySGVpZ2h0XG4gICAgfSBlbHNlIGlmIChwYXJlbnRFbGVtZW50LmNhbGN1bGF0ZUhlaWdodCkge1xuICAgICAgaGVpZ2h0ID0gcGFyZW50RWxlbWVudC5jYWxjdWxhdGVIZWlnaHQob3B0aW9ucylcbiAgICB9XG5cbiAgICBpZiAod2lkdGggPiAwKSB7XG4gICAgICByZXBsYXlFbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcGxheUVsZW1lbnQuc3R5bGUud2lkdGggPSAnYXV0bydcbiAgICB9XG5cbiAgICBpZiAoaGVpZ2h0ID4gMCkge1xuICAgICAgcmVwbGF5RWxlbWVudC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcGxheUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nXG4gICAgfVxuICB9XG5cbiAgdGhpcy5zZXRWaWRlb21haWwgPSBmdW5jdGlvbiAobmV3VmlkZW9tYWlsKSB7XG4gICAgdmlkZW9tYWlsID0gbmV3VmlkZW9tYWlsXG5cbiAgICBpZiAodmlkZW9tYWlsKSB7XG4gICAgICBpZiAodmlkZW9tYWlsLndlYm0pIHtcbiAgICAgICAgdGhpcy5zZXRXZWJNU291cmNlKHZpZGVvbWFpbC53ZWJtKVxuICAgICAgfVxuXG4gICAgICBpZiAodmlkZW9tYWlsLm1wNCkge1xuICAgICAgICB0aGlzLnNldE1wNFNvdXJjZSh2aWRlb21haWwubXA0KVxuICAgICAgfVxuXG4gICAgICBpZiAodmlkZW9tYWlsLnBvc3Rlcikge1xuICAgICAgICByZXBsYXlFbGVtZW50LnNldEF0dHJpYnV0ZSgncG9zdGVyJywgdmlkZW9tYWlsLnBvc3RlcilcbiAgICAgIH1cblxuICAgICAgY29weUF0dHJpYnV0ZXModmlkZW9tYWlsKVxuICAgIH1cblxuICAgIGNvbnN0IGhhc0F1ZGlvID0gdmlkZW9tYWlsICYmIHZpZGVvbWFpbC5yZWNvcmRpbmdTdGF0cyAmJiB2aWRlb21haWwucmVjb3JkaW5nU3RhdHMuc2FtcGxlUmF0ZSA+IDBcblxuICAgIHRoaXMuc2hvdyhcbiAgICAgIHZpZGVvbWFpbCAmJiB2aWRlb21haWwud2lkdGgsXG4gICAgICB2aWRlb21haWwgJiYgdmlkZW9tYWlsLmhlaWdodCxcbiAgICAgIGhhc0F1ZGlvXG4gICAgKVxuICB9XG5cbiAgdGhpcy5zaG93ID0gZnVuY3Rpb24gKHJlY29yZGVyV2lkdGgsIHJlY29yZGVySGVpZ2h0LCBoYXNBdWRpbykge1xuICAgIGlmICh2aWRlb21haWwpIHtcbiAgICAgIGNvcnJlY3REaW1lbnNpb25zKHtcbiAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICAgICAgLy8gYmV3YXJlIHRoYXQgcmVjb3JkZXJXaWR0aCBhbmQgcmVjb3JkZXJIZWlnaHQgY2FuIGJlIG51bGwgc29tZXRpbWVzXG4gICAgICAgIHZpZGVvV2lkdGg6IHJlY29yZGVyV2lkdGggfHwgcmVwbGF5RWxlbWVudC52aWRlb1dpZHRoLFxuICAgICAgICB2aWRlb0hlaWdodDogcmVjb3JkZXJIZWlnaHQgfHwgcmVwbGF5RWxlbWVudC52aWRlb0hlaWdodFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBoaWRkZW4ocmVwbGF5RWxlbWVudCwgZmFsc2UpXG5cbiAgICAvLyBwYXJlbnQgZWxlbWVudCBjYW4gYmUgYW55IG9iamVjdCwgYmUgY2FyZWZ1bCFcbiAgICBpZiAocGFyZW50RWxlbWVudCkge1xuICAgICAgaWYgKHBhcmVudEVsZW1lbnQuc3R5bGUpIHtcbiAgICAgICAgaGlkZGVuKHBhcmVudEVsZW1lbnQsIGZhbHNlKVxuICAgICAgfSBlbHNlIGlmIChwYXJlbnRFbGVtZW50LnNob3cpIHtcbiAgICAgICAgcGFyZW50RWxlbWVudC5zaG93KClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaGFzQXVkaW8pIHtcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC1jbGllbnQvaXNzdWVzLzExNVxuICAgICAgLy8gZG8gbm90IHNldCBtdXRlIHRvIGZhbHNlIGFzIHRoaXMgd2lsbCBtZXNzIHVwLiBqdXN0IGRvIG5vdCBtZW50aW9uIHRoaXMgYXR0cmlidXRlIGF0IGFsbFxuICAgICAgcmVwbGF5RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3ZvbHVtZScsIDEpXG4gICAgfSBlbHNlIGlmICghb3B0aW9ucy5pc0F1ZGlvRW5hYmxlZCgpKSB7XG4gICAgICByZXBsYXlFbGVtZW50LnNldEF0dHJpYnV0ZSgnbXV0ZWQnLCB0cnVlKVxuICAgIH1cblxuICAgIC8vIHRoaXMgbXVzdCBiZSBjYWxsZWQgYWZ0ZXIgc2V0dGluZyB0aGUgc291cmNlcyBhbmQgd2hlbiBiZWNvbWluZyB2aXNpYmxlXG4gICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iZnJlZC1pdC9pcGhvbmUtaW5saW5lLXZpZGVvL2lzc3Vlcy8xNlxuICAgIGVuYWJsZUlubGluZVZpZGVvICYmIGVuYWJsZUlubGluZVZpZGVvKHJlcGxheUVsZW1lbnQsIHtcbiAgICAgIGlQYWQ6IHRydWVcbiAgICB9KVxuXG4gICAgLy8gdGhpcyBmb3JjZXMgdG8gYWN0dWFsbHkgZmV0Y2ggdGhlIHZpZGVvcyBmcm9tIHRoZSBzZXJ2ZXJcbiAgICByZXBsYXlFbGVtZW50LmxvYWQoKVxuXG4gICAgaWYgKCF2aWRlb21haWwpIHtcbiAgICAgIHNlbGYuZW1pdChFdmVudHMuUFJFVklFV19TSE9XTilcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5lbWl0KEV2ZW50cy5SRVBMQVlfU0hPV04pXG4gICAgfVxuICB9XG5cbiAgdGhpcy5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1ZygnUmVwbGF5OiBidWlsZCgpJylcblxuICAgIHJlcGxheUVsZW1lbnQgPSBwYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3ZpZGVvLicgKyBvcHRpb25zLnNlbGVjdG9ycy5yZXBsYXlDbGFzcylcblxuICAgIGlmICghcmVwbGF5RWxlbWVudCkge1xuICAgICAgYnVpbGRFbGVtZW50KClcbiAgICB9XG5cbiAgICB0aGlzLmhpZGUoKVxuXG4gICAgcmVwbGF5RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2F1dG9wbGF5JywgdHJ1ZSlcbiAgICByZXBsYXlFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXV0b3N0YXJ0JywgdHJ1ZSlcbiAgICByZXBsYXlFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXV0b2J1ZmZlcicsIHRydWUpXG4gICAgcmVwbGF5RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3BsYXlzaW5saW5lJywgdHJ1ZSlcbiAgICByZXBsYXlFbGVtZW50LnNldEF0dHJpYnV0ZSgnd2Via2l0LXBsYXlzaW5saW5lJywgJ3dlYmtpdC1wbGF5c2lubGluZScpXG4gICAgcmVwbGF5RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NvbnRyb2xzJywgJ2NvbnRyb2xzJylcbiAgICByZXBsYXlFbGVtZW50LnNldEF0dHJpYnV0ZSgncHJlbG9hZCcsICdhdXRvJylcblxuICAgIGlmICghYnVpbHQpIHtcbiAgICAgIGlmICghaXNTdGFuZGFsb25lKCkpIHtcbiAgICAgICAgdGhpcy5vbihFdmVudHMuUFJFVklFVywgZnVuY3Rpb24gKGtleSwgcmVjb3JkZXJXaWR0aCwgcmVjb3JkZXJIZWlnaHQpIHtcbiAgICAgICAgICBzZWxmLnNob3cocmVjb3JkZXJXaWR0aCwgcmVjb3JkZXJIZWlnaHQpXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIC8vIG1ha2VzIHVzZSBvZiBwYXNzaXZlIG9wdGlvbiBhdXRvbWF0aWNhbGx5IGZvciBiZXR0ZXIgcGVyZm9ybWFuY2VcbiAgICAgIC8vIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2FkZC1ldmVudGxpc3RlbmVyLXdpdGgtb3B0aW9uc1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcldpdGhPcHRpb25zKHJlcGxheUVsZW1lbnQsICd0b3VjaHN0YXJ0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBlICYmIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICB9IGNhdGNoIChleGMpIHtcbiAgICAgICAgICAvLyBpZ25vcmUgZXJyb3JzIGxpa2VcbiAgICAgICAgICAvLyBVbmFibGUgdG8gcHJldmVudERlZmF1bHQgaW5zaWRlIHBhc3NpdmUgZXZlbnQgbGlzdGVuZXIgaW52b2NhdGlvbi5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnBhdXNlZCkge1xuICAgICAgICAgIHBsYXkoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhdXNlKClcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgcmVwbGF5RWxlbWVudC5vbmNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZSAmJiBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICAgICBpZiAodGhpcy5wYXVzZWQpIHtcbiAgICAgICAgICBwbGF5KClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXVzZSgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBidWlsdCA9IHRydWVcblxuICAgIGRlYnVnKCdSZXBsYXk6IGJ1aWx0LicpXG4gIH1cblxuICB0aGlzLnVubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBidWlsdCA9IGZhbHNlXG4gIH1cblxuICB0aGlzLmdldFZpZGVvU291cmNlID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBjb25zdCBzb3VyY2VzID0gcmVwbGF5RWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc291cmNlJylcbiAgICBjb25zdCBsID0gc291cmNlcy5sZW5ndGhcbiAgICBjb25zdCB2aWRlb1R5cGUgPSAndmlkZW8vJyArIHR5cGVcblxuICAgIHZhciBzb3VyY2VcblxuICAgIGlmIChsKSB7XG4gICAgICB2YXIgaVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbCAmJiAhc291cmNlOyBpKyspIHtcbiAgICAgICAgaWYgKHNvdXJjZXNbaV0uZ2V0QXR0cmlidXRlKCd0eXBlJykgPT09IHZpZGVvVHlwZSkge1xuICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZXNbaV1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzb3VyY2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFZpZGVvU291cmNlICh0eXBlLCBzcmMsIGJ1c3RDYWNoZSkge1xuICAgIHZhciBzb3VyY2UgPSBzZWxmLmdldFZpZGVvU291cmNlKHR5cGUpXG5cbiAgICBpZiAoc3JjICYmIGJ1c3RDYWNoZSkge1xuICAgICAgc3JjICs9ICc/JyArIERhdGUubm93KClcbiAgICB9XG5cbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgaWYgKHNyYykge1xuICAgICAgICBzb3VyY2UgPSBoKCdzb3VyY2UnLCB7XG4gICAgICAgICAgc3JjOiBzcmMsXG4gICAgICAgICAgdHlwZTogJ3ZpZGVvLycgKyB0eXBlXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmVwbGF5RWxlbWVudC5hcHBlbmRDaGlsZChzb3VyY2UpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgc291cmNlLnNldEF0dHJpYnV0ZSgnc3JjJywgc3JjKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVwbGF5RWxlbWVudC5yZW1vdmVDaGlsZChzb3VyY2UpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5zZXRNcDRTb3VyY2UgPSBmdW5jdGlvbiAoc3JjLCBidXN0Q2FjaGUpIHtcbiAgICBzZXRWaWRlb1NvdXJjZSgnbXA0Jywgc3JjLCBidXN0Q2FjaGUpXG4gIH1cblxuICB0aGlzLnNldFdlYk1Tb3VyY2UgPSBmdW5jdGlvbiAoc3JjLCBidXN0Q2FjaGUpIHtcbiAgICBzZXRWaWRlb1NvdXJjZSgnd2VibScsIHNyYywgYnVzdENhY2hlKVxuICB9XG5cbiAgdGhpcy5nZXRWaWRlb1R5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGJyb3dzZXIuZ2V0VmlkZW9UeXBlKHJlcGxheUVsZW1lbnQpXG4gIH1cblxuICBmdW5jdGlvbiBwYXVzZSAoY2IpIHtcbiAgICAvLyBhdm9pZHMgcmFjZSBjb25kaXRpb24sIGluc3BpcmVkIGJ5XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNjgwMzE3Ni9ob3ctdG8tcHJldmVudC10aGUtcGxheS1yZXF1ZXN0LXdhcy1pbnRlcnJ1cHRlZC1ieS1hLWNhbGwtdG8tcGF1c2UtZXJyb3JcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcGxheUVsZW1lbnQucGF1c2UoKVxuICAgICAgfSBjYXRjaCAoZXhjKSB7XG4gICAgICAgIC8vIGp1c3QgaWdub3JlLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLmlvL2lzc3Vlcy8zODZcbiAgICAgICAgb3B0aW9ucy5sb2dnZXIud2FybihleGMpXG4gICAgICB9XG5cbiAgICAgIGNiICYmIGNiKClcbiAgICB9LCAxNSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYXkgKCkge1xuICAgIGlmIChyZXBsYXlFbGVtZW50ICYmIHJlcGxheUVsZW1lbnQucGxheSkge1xuICAgICAgdmFyIHBcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcCA9IHJlcGxheUVsZW1lbnQucGxheSgpXG4gICAgICB9IGNhdGNoIChleGMpIHtcbiAgICAgICAgLy8gdGhpcyBpbiB0aGUgaG9wZSB0byBjYXRjaCBJbnZhbGlkU3RhdGVFcnJvciwgc2VlXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC1jbGllbnQvaXNzdWVzLzE0OVxuICAgICAgICBvcHRpb25zLmxvZ2dlci53YXJuKCdDYXVnaHQgcmVwbGF5IGV4Y2VwdGlvbjonLCBleGMpXG4gICAgICB9XG5cbiAgICAgIGlmIChwICYmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpICYmIChwIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgICAgcC5jYXRjaCgocmVhc29uKSA9PiB7XG4gICAgICAgICAgb3B0aW9ucy5sb2dnZXIud2FybignQ2F1Z2h0IHBlbmRpbmcgcmVwbGF5IHByb21pc2UgZXhjZXB0aW9uOiAlcycsIHJlYXNvbilcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgLy8gcGF1c2UgdmlkZW8gdG8gbWFrZSBzdXJlIGl0IHdvbid0IGNvbnN1bWUgYW55IG1lbW9yeVxuICAgIHBhdXNlKCgpID0+IHtcbiAgICAgIGlmIChyZXBsYXlFbGVtZW50KSB7XG4gICAgICAgIHNlbGYuc2V0TXA0U291cmNlKG51bGwpXG4gICAgICAgIHNlbGYuc2V0V2ViTVNvdXJjZShudWxsKVxuICAgICAgfVxuXG4gICAgICBjYiAmJiBjYigpXG4gICAgfSlcbiAgfVxuXG4gIHRoaXMuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaXNTdGFuZGFsb25lKCkpIHtcbiAgICAgIGhpZGRlbihwYXJlbnRFbGVtZW50LCB0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXBsYXlFbGVtZW50ICYmIGhpZGRlbihyZXBsYXlFbGVtZW50LCB0cnVlKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuaXNTaG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmVwbGF5RWxlbWVudCAmJiAhaGlkZGVuKHJlcGxheUVsZW1lbnQpXG4gIH1cblxuICB0aGlzLmdldFBhcmVudEVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHBhcmVudEVsZW1lbnRcbiAgfVxufVxuXG51dGlsLmluaGVyaXRzKFJlcGxheSwgRXZlbnRFbWl0dGVyKVxuXG5leHBvcnQgZGVmYXVsdCBSZXBsYXlcbiIsImltcG9ydCBoIGZyb20gJ2h5cGVyc2NyaXB0J1xuaW1wb3J0IHN0cmluZ2lmeSBmcm9tICdzYWZlLWpzb24tc3RyaW5naWZ5J1xuXG5pbXBvcnQgQXVkaW9SZWNvcmRlciBmcm9tICcuLy4uLy4uL3V0aWwvYXVkaW9SZWNvcmRlcidcbmltcG9ydCBWaWRlb21haWxFcnJvciBmcm9tICcuLy4uLy4uL3V0aWwvdmlkZW9tYWlsRXJyb3InXG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJy4vLi4vLi4vdXRpbC9ldmVudEVtaXR0ZXInXG5pbXBvcnQgTUVESUFfRVZFTlRTIGZyb20gJy4vLi4vLi4vdXRpbC9tZWRpYUV2ZW50cydcbmltcG9ydCBwcmV0dHkgZnJvbSAnLi8uLi8uLi91dGlsL3ByZXR0eSdcbmltcG9ydCBCcm93c2VyIGZyb20gJy4vLi4vLi4vdXRpbC9icm93c2VyJ1xuaW1wb3J0IEV2ZW50cyBmcm9tICcuLy4uLy4uL2V2ZW50cydcblxuY29uc3QgRVZFTlRfQVNDSUkgPSAnfOKAlE/igJR8J1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAocmVjb3JkZXIsIG9wdGlvbnMpIHtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcywgb3B0aW9ucywgJ1VzZXJNZWRpYScpXG5cbiAgY29uc3QgcmF3VmlzdWFsVXNlck1lZGlhID0gcmVjb3JkZXIgJiYgcmVjb3JkZXIuZ2V0UmF3VmlzdWFsVXNlck1lZGlhKClcbiAgY29uc3QgYnJvd3NlciA9IG5ldyBCcm93c2VyKG9wdGlvbnMpXG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgdmFyIHBhdXNlZCA9IGZhbHNlXG4gIHZhciByZWNvcmQgPSBmYWxzZVxuXG4gIHZhciBhdWRpb1JlY29yZGVyXG4gIHZhciBjdXJyZW50VmlzdWFsU3RyZWFtXG5cbiAgZnVuY3Rpb24gYXR0YWNoTWVkaWFTdHJlYW0gKHN0cmVhbSkge1xuICAgIGN1cnJlbnRWaXN1YWxTdHJlYW0gPSBzdHJlYW1cblxuICAgIGlmICh0eXBlb2YgcmF3VmlzdWFsVXNlck1lZGlhLnNyY09iamVjdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJhd1Zpc3VhbFVzZXJNZWRpYS5zcmNPYmplY3QgPSBzdHJlYW1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiByYXdWaXN1YWxVc2VyTWVkaWEuc3JjICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgVVJMID0gd2luZG93LlVSTCB8fCB3aW5kb3cud2Via2l0VVJMXG4gICAgICByYXdWaXN1YWxVc2VyTWVkaWEuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChzdHJlYW0pIHx8IHN0cmVhbVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBWaWRlb21haWxFcnJvci5jcmVhdGUoXG4gICAgICAgICdFcnJvciBhdHRhY2hpbmcgc3RyZWFtIHRvIGVsZW1lbnQuJyxcbiAgICAgICAgJ0NvbnRhY3QgdGhlIGRldmVsb3BlciBhYm91dCB0aGlzJyxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFZpc3VhbFN0cmVhbSAobG9jYWxNZWRpYVN0cmVhbSkge1xuICAgIGlmIChsb2NhbE1lZGlhU3RyZWFtKSB7XG4gICAgICBhdHRhY2hNZWRpYVN0cmVhbShsb2NhbE1lZGlhU3RyZWFtKVxuICAgIH0gZWxzZSB7XG4gICAgICByYXdWaXN1YWxVc2VyTWVkaWEucmVtb3ZlQXR0cmlidXRlKCdzcmNPYmplY3QnKVxuICAgICAgcmF3VmlzdWFsVXNlck1lZGlhLnJlbW92ZUF0dHJpYnV0ZSgnc3JjJylcblxuICAgICAgY3VycmVudFZpc3VhbFN0cmVhbSA9IG51bGxcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRWaXN1YWxTdHJlYW0gKCkge1xuICAgIGlmIChyYXdWaXN1YWxVc2VyTWVkaWEubW96U3JjT2JqZWN0KSB7XG4gICAgICByZXR1cm4gcmF3VmlzdWFsVXNlck1lZGlhLm1velNyY09iamVjdFxuICAgIH0gZWxzZSBpZiAocmF3VmlzdWFsVXNlck1lZGlhLnNyY09iamVjdCkge1xuICAgICAgcmV0dXJuIHJhd1Zpc3VhbFVzZXJNZWRpYS5zcmNPYmplY3RcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN1cnJlbnRWaXN1YWxTdHJlYW1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYXNFbmRlZCAoKSB7XG4gICAgaWYgKHJhd1Zpc3VhbFVzZXJNZWRpYS5lbmRlZCkge1xuICAgICAgcmV0dXJuIHJhd1Zpc3VhbFVzZXJNZWRpYS5lbmRlZFxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB2aXN1YWxTdHJlYW0gPSBnZXRWaXN1YWxTdHJlYW0oKVxuICAgICAgcmV0dXJuIHZpc3VhbFN0cmVhbSAmJiB2aXN1YWxTdHJlYW0uZW5kZWRcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYXNJbnZhbGlkRGltZW5zaW9ucyAoKSB7XG4gICAgaWYgKChyYXdWaXN1YWxVc2VyTWVkaWEudmlkZW9XaWR0aCAmJiByYXdWaXN1YWxVc2VyTWVkaWEudmlkZW9XaWR0aCA8IDMpIHx8XG4gICAgICAgIChyYXdWaXN1YWxVc2VyTWVkaWEuaGVpZ2h0ICYmIHJhd1Zpc3VhbFVzZXJNZWRpYS5oZWlnaHQgPCAzKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUcmFja3MgKGxvY2FsTWVkaWFTdHJlYW0pIHtcbiAgICB2YXIgdHJhY2tzXG5cbiAgICBpZiAobG9jYWxNZWRpYVN0cmVhbSAmJiBsb2NhbE1lZGlhU3RyZWFtLmdldFRyYWNrcykge1xuICAgICAgdHJhY2tzID0gbG9jYWxNZWRpYVN0cmVhbS5nZXRUcmFja3MoKVxuICAgIH1cblxuICAgIHJldHVybiB0cmFja3NcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFZpZGVvVHJhY2tzIChsb2NhbE1lZGlhU3RyZWFtKSB7XG4gICAgdmFyIHZpZGVvVHJhY2tzXG5cbiAgICBpZiAobG9jYWxNZWRpYVN0cmVhbSAmJiBsb2NhbE1lZGlhU3RyZWFtLmdldFZpZGVvVHJhY2tzKSB7XG4gICAgICB2aWRlb1RyYWNrcyA9IGxvY2FsTWVkaWFTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKVxuICAgIH1cblxuICAgIHJldHVybiB2aWRlb1RyYWNrc1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Rmlyc3RWaWRlb1RyYWNrIChsb2NhbE1lZGlhU3RyZWFtKSB7XG4gICAgY29uc3QgdmlkZW9UcmFja3MgPSBnZXRWaWRlb1RyYWNrcyhsb2NhbE1lZGlhU3RyZWFtKVxuICAgIHZhciB2aWRlb1RyYWNrXG5cbiAgICBpZiAodmlkZW9UcmFja3MgJiYgdmlkZW9UcmFja3NbMF0pIHtcbiAgICAgIHZpZGVvVHJhY2sgPSB2aWRlb1RyYWNrc1swXVxuICAgIH1cblxuICAgIHJldHVybiB2aWRlb1RyYWNrXG4gIH1cblxuICBmdW5jdGlvbiBsb2dFdmVudCAoZXZlbnQsIHBhcmFtcykge1xuICAgIG9wdGlvbnMuZGVidWcoJ1VzZXJNZWRpYTogLi4uJywgRVZFTlRfQVNDSUksICdldmVudCcsIGV2ZW50LCBzdHJpbmdpZnkocGFyYW1zKSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUHJvbWlzZSAoYW55dGhpbmcpIHtcbiAgICByZXR1cm4gKGFueXRoaW5nICYmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpICYmIChhbnl0aGluZyBpbnN0YW5jZW9mIFByb21pc2UpKVxuICB9XG5cbiAgZnVuY3Rpb24gb3V0cHV0RXZlbnQgKGUpIHtcbiAgICBsb2dFdmVudChlLnR5cGUsIHsgcmVhZHlTdGF0ZTogcmF3VmlzdWFsVXNlck1lZGlhLnJlYWR5U3RhdGUgfSlcblxuICAgIC8vIHJlbW92ZSBteXNlbGZcbiAgICByYXdWaXN1YWxVc2VyTWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lciAmJlxuICAgIHJhd1Zpc3VhbFVzZXJNZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKGUudHlwZSwgb3V0cHV0RXZlbnQpXG4gIH1cblxuICB0aGlzLnVubG9hZFJlbWFpbmluZ0V2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgIG9wdGlvbnMuZGVidWcoJ1VzZXJNZWRpYTogdW5sb2FkUmVtYWluaW5nRXZlbnRMaXN0ZW5lcnMoKScpXG5cbiAgICBNRURJQV9FVkVOVFMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICByYXdWaXN1YWxVc2VyTWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG91dHB1dEV2ZW50KVxuICAgIH0pXG4gIH1cblxuICB0aGlzLmluaXQgPSBmdW5jdGlvbiAobG9jYWxNZWRpYVN0cmVhbSwgdmlkZW9DYWxsYmFjaywgYXVkaW9DYWxsYmFjaywgZW5kZWRFYXJseUNhbGxiYWNrKSB7XG4gICAgdGhpcy5zdG9wKGxvY2FsTWVkaWFTdHJlYW0sIHRydWUpXG5cbiAgICB2YXIgb25QbGF5UmVhY2hlZCA9IGZhbHNlXG4gICAgdmFyIG9uTG9hZGVkTWV0YURhdGFSZWFjaGVkID0gZmFsc2VcbiAgICB2YXIgcGxheWluZ1Byb21pc2VSZWFjaGVkID0gZmFsc2VcblxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaXNBdWRpb0VuYWJsZWQoKSkge1xuICAgICAgYXVkaW9SZWNvcmRlciA9IGF1ZGlvUmVjb3JkZXIgfHwgbmV3IEF1ZGlvUmVjb3JkZXIodGhpcywgb3B0aW9ucylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdWRpb1JlY29yZCAoKSB7XG4gICAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKEV2ZW50cy5TRU5ESU5HX0ZJUlNUX0ZSQU1FLCBhdWRpb1JlY29yZClcbiAgICAgIGF1ZGlvUmVjb3JkZXIgJiYgYXVkaW9SZWNvcmRlci5yZWNvcmQoYXVkaW9DYWxsYmFjaylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bmxvYWRBbGxFdmVudExpc3RlbmVycyAoKSB7XG4gICAgICBvcHRpb25zLmRlYnVnKCdVc2VyTWVkaWE6IHVubG9hZEFsbEV2ZW50TGlzdGVuZXJzKCknKVxuXG4gICAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKEV2ZW50cy5TRU5ESU5HX0ZJUlNUX0ZSQU1FLCBhdWRpb1JlY29yZClcblxuICAgICAgcmF3VmlzdWFsVXNlck1lZGlhLnJlbW92ZUV2ZW50TGlzdGVuZXIgJiZcbiAgICAgIHJhd1Zpc3VhbFVzZXJNZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCdwbGF5Jywgb25QbGF5KVxuXG4gICAgICByYXdWaXN1YWxVc2VyTWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lciAmJlxuICAgICAgcmF3VmlzdWFsVXNlck1lZGlhLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWRlZG1ldGFkYXRhJywgb25Mb2FkZWRNZXRhRGF0YSlcblxuICAgICAgc2VsZi51bmxvYWRSZW1haW5pbmdFdmVudExpc3RlbmVycygpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGxheSAoKSB7XG4gICAgICAvLyBSZXNldHMgdGhlIG1lZGlhIGVsZW1lbnQgYW5kIHJlc3RhcnRzIHRoZSBtZWRpYSByZXNvdXJjZS4gQW55IHBlbmRpbmcgZXZlbnRzIGFyZSBkaXNjYXJkZWQuXG4gICAgICB0cnkge1xuICAgICAgICByYXdWaXN1YWxVc2VyTWVkaWEubG9hZCgpXG5cbiAgICAgICAgLy8gZml4ZXMgaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLmlvL2lzc3Vlcy80MDFcbiAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnRFZGdlL0RlbW9zL2Jsb2IvbWFzdGVyL3Bob3RvY2FwdHVyZS9zY3JpcHRzL2RlbW8uanMjTDI3XG4gICAgICAgIGlmIChyYXdWaXN1YWxVc2VyTWVkaWEucGF1c2VkKSB7XG4gICAgICAgICAgb3B0aW9ucy5kZWJ1ZyhcbiAgICAgICAgICAgICdVc2VyTWVkaWE6IHBsYXkoKScsXG4gICAgICAgICAgICAnbWVkaWEucmVhZHlTdGF0ZT0nICsgcmF3VmlzdWFsVXNlck1lZGlhLnJlYWR5U3RhdGUsXG4gICAgICAgICAgICAnbWVkaWEucGF1c2VkPScgKyByYXdWaXN1YWxVc2VyTWVkaWEucGF1c2VkLFxuICAgICAgICAgICAgJ21lZGlhLmVuZGVkPScgKyByYXdWaXN1YWxVc2VyTWVkaWEuZW5kZWQsXG4gICAgICAgICAgICAnbWVkaWEucGxheWVkPScgKyBwcmV0dHkocmF3VmlzdWFsVXNlck1lZGlhLnBsYXllZClcbiAgICAgICAgICApXG5cbiAgICAgICAgICB2YXIgcFxuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHAgPSByYXdWaXN1YWxVc2VyTWVkaWEucGxheSgpXG4gICAgICAgICAgfSBjYXRjaCAoZXhjKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGluIHRoZSBob3BlIHRvIGNhdGNoIEludmFsaWRTdGF0ZUVycm9yLCBzZWVcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC1jbGllbnQvaXNzdWVzLzE0OVxuICAgICAgICAgICAgb3B0aW9ucy5sb2dnZXIud2FybignQ2F1Z2h0IHJhdyB1c2VybWVkaWEgcGxheSBleGNlcHRpb246JywgZXhjKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHVzaW5nIHRoZSBwcm9taXNlIGhlcmUganVzdCBleHBlcmltZW50YWwgZm9yIG5vd1xuICAgICAgICAgIC8vIGFuZCB0aGlzIHRvIGNhdGNoIGFueSB3ZWlyZCBlcnJvcnMgZWFybHkgaWYgcG9zc2libGVcbiAgICAgICAgICBpZiAoaXNQcm9taXNlKHApKSB7XG4gICAgICAgICAgICBwLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoIXBsYXlpbmdQcm9taXNlUmVhY2hlZCkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZGVidWcoJ1VzZXJNZWRpYTogcGxheSBwcm9taXNlIHN1Y2Nlc3NmdWwuIFBsYXlpbmcgbm93LicpXG4gICAgICAgICAgICAgICAgcGxheWluZ1Byb21pc2VSZWFjaGVkID0gdHJ1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICAgIC8vIHByb21pc2UgY2FuIGJlIGludGVycnVwdGVkLCBpLkUuIHdoZW4gc3dpdGNoaW5nIHRhYnNcbiAgICAgICAgICAgICAgLy8gYW5kIHByb21pc2UgY2FuIGdldCByZXN1bWVkIHdoZW4gc3dpdGNoaW5nIGJhY2sgdG8gdGFiLCBoZW5jZVxuICAgICAgICAgICAgICAvLyBkbyBub3QgdHJlYXQgdGhpcyBsaWtlIGFuIGVycm9yXG4gICAgICAgICAgICAgIG9wdGlvbnMubG9nZ2VyLndhcm4oJ0NhdWdodCBwZW5kaW5nIHVzZXJtZWRpYSBwcm9taXNlIGV4Y2VwdGlvbjogJXMnLCByZWFzb24udG9TdHJpbmcoKSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChleGMpIHtcbiAgICAgICAgdW5sb2FkQWxsRXZlbnRMaXN0ZW5lcnMoKVxuICAgICAgICBlbmRlZEVhcmx5Q2FsbGJhY2soZXhjKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpcmVDYWxsYmFja3MgKCkge1xuICAgICAgY29uc3QgcmVhZHlTdGF0ZSA9IHJhd1Zpc3VhbFVzZXJNZWRpYS5yZWFkeVN0YXRlXG5cbiAgICAgIC8vIHJlYWR5IHN0YXRlLCBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxNZWRpYUVsZW1lbnQvcmVhZHlTdGF0ZVxuICAgICAgb3B0aW9ucy5kZWJ1ZyhcbiAgICAgICAgJ1VzZXJNZWRpYTogZmlyZUNhbGxiYWNrcygnICtcbiAgICAgICAgJ3JlYWR5U3RhdGU9JyArIHJlYWR5U3RhdGUgKyAnLCAnICtcbiAgICAgICAgJ29uUGxheVJlYWNoZWQ9JyArIG9uUGxheVJlYWNoZWQgKyAnLCAnICtcbiAgICAgICAgJ29uTG9hZGVkTWV0YURhdGFSZWFjaGVkPScgKyBvbkxvYWRlZE1ldGFEYXRhUmVhY2hlZCArICcpJ1xuICAgICAgKVxuXG4gICAgICBpZiAob25QbGF5UmVhY2hlZCAmJiBvbkxvYWRlZE1ldGFEYXRhUmVhY2hlZCkge1xuICAgICAgICB2aWRlb0NhbGxiYWNrKClcblxuICAgICAgICBpZiAoYXVkaW9SZWNvcmRlciAmJiBhdWRpb0NhbGxiYWNrKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF1ZGlvUmVjb3JkZXIuaW5pdChsb2NhbE1lZGlhU3RyZWFtKVxuICAgICAgICAgICAgc2VsZi5vbihFdmVudHMuU0VORElOR19GSVJTVF9GUkFNRSwgYXVkaW9SZWNvcmQpXG4gICAgICAgICAgfSBjYXRjaCAoZXhjKSB7XG4gICAgICAgICAgICB1bmxvYWRBbGxFdmVudExpc3RlbmVycygpXG4gICAgICAgICAgICBlbmRlZEVhcmx5Q2FsbGJhY2soZXhjKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uUGxheSAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBsb2dFdmVudCgncGxheScsIHtcbiAgICAgICAgICByZWFkeVN0YXRlOiByYXdWaXN1YWxVc2VyTWVkaWEucmVhZHlTdGF0ZSxcbiAgICAgICAgICBhdWRpbzogb3B0aW9ucy5pc0F1ZGlvRW5hYmxlZCgpLFxuICAgICAgICAgIHdpZHRoOiByYXdWaXN1YWxVc2VyTWVkaWEud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiByYXdWaXN1YWxVc2VyTWVkaWEuaGVpZ2h0LFxuICAgICAgICAgIHZpZGVvV2lkdGg6IHJhd1Zpc3VhbFVzZXJNZWRpYS52aWRlb1dpZHRoLFxuICAgICAgICAgIHZpZGVvSGVpZ2h0OiByYXdWaXN1YWxVc2VyTWVkaWEudmlkZW9IZWlnaHRcbiAgICAgICAgfSlcblxuICAgICAgICByYXdWaXN1YWxVc2VyTWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lciAmJlxuICAgICAgICByYXdWaXN1YWxVc2VyTWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lcigncGxheScsIG9uUGxheSlcblxuICAgICAgICBpZiAoaGFzRW5kZWQoKSB8fCBoYXNJbnZhbGlkRGltZW5zaW9ucygpKSB7XG4gICAgICAgICAgZW5kZWRFYXJseUNhbGxiYWNrKFxuICAgICAgICAgICAgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKFxuICAgICAgICAgICAgICAnQWxyZWFkeSBidXN5JyxcbiAgICAgICAgICAgICAgJ1Byb2JhYmx5IGFub3RoZXIgYnJvd3NlciB3aW5kb3cgaXMgdXNpbmcgeW91ciB3ZWJjYW0/JyxcbiAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvblBsYXlSZWFjaGVkID0gdHJ1ZVxuICAgICAgICAgIGZpcmVDYWxsYmFja3MoKVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChleGMpIHtcbiAgICAgICAgdW5sb2FkQWxsRXZlbnRMaXN0ZW5lcnMoKVxuICAgICAgICBlbmRlZEVhcmx5Q2FsbGJhY2soZXhjKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHBsYXllciBtb2RpZmljYXRpb25zIHRvIHBlcmZvcm0gdGhhdCBtdXN0IHdhaXQgdW50aWwgYGxvYWRlZG1ldGFkYXRhYCBoYXMgYmVlbiB0cmlnZ2VyZWRcbiAgICBmdW5jdGlvbiBvbkxvYWRlZE1ldGFEYXRhICgpIHtcbiAgICAgIGxvZ0V2ZW50KCdsb2FkZWRtZXRhZGF0YScsIHtcbiAgICAgICAgcmVhZHlTdGF0ZTogcmF3VmlzdWFsVXNlck1lZGlhLnJlYWR5U3RhdGUsXG4gICAgICAgIHBhdXNlZDogcmF3VmlzdWFsVXNlck1lZGlhLnBhdXNlZCxcbiAgICAgICAgd2lkdGg6IHJhd1Zpc3VhbFVzZXJNZWRpYS53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiByYXdWaXN1YWxVc2VyTWVkaWEuaGVpZ2h0LFxuICAgICAgICB2aWRlb1dpZHRoOiByYXdWaXN1YWxVc2VyTWVkaWEudmlkZW9XaWR0aCxcbiAgICAgICAgdmlkZW9IZWlnaHQ6IHJhd1Zpc3VhbFVzZXJNZWRpYS52aWRlb0hlaWdodFxuICAgICAgfSlcblxuICAgICAgcmF3VmlzdWFsVXNlck1lZGlhLnJlbW92ZUV2ZW50TGlzdGVuZXIgJiZcbiAgICAgIHJhd1Zpc3VhbFVzZXJNZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkZWRtZXRhZGF0YScsIG9uTG9hZGVkTWV0YURhdGEpXG5cbiAgICAgIGlmICghaGFzRW5kZWQoKSAmJiAhaGFzSW52YWxpZERpbWVuc2lvbnMoKSkge1xuICAgICAgICBzZWxmLmVtaXQoRXZlbnRzLkxPQURFRF9NRVRBX0RBVEEpXG5cbiAgICAgICAgLy8gZm9yIGFuZHJvaWQgZGV2aWNlcywgd2UgY2Fubm90IGNhbGwgcGxheSgpIHVubGVzcyBtZXRhIGRhdGEgaGFzIGJlZW4gbG9hZGVkIVxuICAgICAgICAvLyB0b2RvIGNvbnNpZGVyIHJlbW92aW5nIHRoYXQgaWYgaXQncyBub3QgdGhlIGNhc2UgYW55bW9yZSAoZm9yIGJldHRlciBwZXJmb3JtYW5jZSlcbiAgICAgICAgaWYgKGJyb3dzZXIuaXNBbmRyb2lkKCkpIHtcbiAgICAgICAgICBwbGF5KClcbiAgICAgICAgfVxuXG4gICAgICAgIG9uTG9hZGVkTWV0YURhdGFSZWFjaGVkID0gdHJ1ZVxuICAgICAgICBmaXJlQ2FsbGJhY2tzKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgdmlkZW9UcmFjayA9IGdldEZpcnN0VmlkZW9UcmFjayhsb2NhbE1lZGlhU3RyZWFtKVxuXG4gICAgICBpZiAoIXZpZGVvVHJhY2spIHtcbiAgICAgICAgb3B0aW9ucy5kZWJ1ZygnVXNlck1lZGlhOiBkZXRlY3RlZCAoYnV0IG5vIHZpZGVvIHRyYWNrcyBleGlzdCcpXG4gICAgICB9IGVsc2UgaWYgKCF2aWRlb1RyYWNrLmVuYWJsZWQpIHtcbiAgICAgICAgdGhyb3cgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKFxuICAgICAgICAgICdXZWJjYW0gaXMgZGlzYWJsZWQnLFxuICAgICAgICAgICdUaGUgdmlkZW8gdHJhY2sgc2VlbXMgdG8gYmUgZGlzYWJsZWQuIEVuYWJsZSBpdCBpbiB5b3VyIHN5c3RlbS4nLFxuICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0aW9uXG5cbiAgICAgICAgaWYgKHZpZGVvVHJhY2subGFiZWwgJiYgdmlkZW9UcmFjay5sYWJlbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZGVzY3JpcHRpb24gPSB2aWRlb1RyYWNrLmxhYmVsXG4gICAgICAgIH1cblxuICAgICAgICBkZXNjcmlwdGlvbiArPSAnIHdpdGggZW5hYmxlZD0nICsgdmlkZW9UcmFjay5lbmFibGVkXG4gICAgICAgIGRlc2NyaXB0aW9uICs9ICcsIG11dGVkPScgKyB2aWRlb1RyYWNrLm11dGVkXG4gICAgICAgIGRlc2NyaXB0aW9uICs9ICcsIHJlbW90ZT0nICsgdmlkZW9UcmFjay5yZW1vdGVcbiAgICAgICAgZGVzY3JpcHRpb24gKz0gJywgcmVhZHlTdGF0ZT0nICsgdmlkZW9UcmFjay5yZWFkeVN0YXRlXG4gICAgICAgIGRlc2NyaXB0aW9uICs9ICcsIGVycm9yPScgKyB2aWRlb1RyYWNrLmVycm9yXG5cbiAgICAgICAgb3B0aW9ucy5kZWJ1ZyhcbiAgICAgICAgICAnVXNlck1lZGlhOiAnICsgdmlkZW9UcmFjay5raW5kICsgJyBkZXRlY3RlZC4nLFxuICAgICAgICAgIGRlc2NyaXB0aW9uIHx8ICcnXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgLy8gdmVyeSB1c2VmdWwgaSB0aGluaywgc28gbGVhdmUgdGhpcyBhbmQganVzdCB1c2Ugb3B0aW9ucy5kZWJ1ZygpXG4gICAgICBjb25zdCBoZWF2eURlYnVnZ2luZyA9IHRydWVcblxuICAgICAgaWYgKGhlYXZ5RGVidWdnaW5nKSB7XG4gICAgICAgIE1FRElBX0VWRU5UUy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgICByYXdWaXN1YWxVc2VyTWVkaWEuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG91dHB1dEV2ZW50LCBmYWxzZSlcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgcmF3VmlzdWFsVXNlck1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZG1ldGFkYXRhJywgb25Mb2FkZWRNZXRhRGF0YSlcbiAgICAgIHJhd1Zpc3VhbFVzZXJNZWRpYS5hZGRFdmVudExpc3RlbmVyKCdwbGF5Jywgb25QbGF5KVxuXG4gICAgICAvLyBleHBlcmltZW50YWwsIG5vdCBzdXJlIGlmIHRoaXMgaXMgZXZlciBuZWVkZWQvY2FsbGVkPyBzaW5jZSAyIGFwciAyMDE3XG4gICAgICAvLyBBbiBlcnJvciBvY2N1cnMgd2hpbGUgZmV0Y2hpbmcgdGhlIG1lZGlhIGRhdGEuXG4gICAgICAvLyBFcnJvciBjYW4gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGNvZGUgTUVESUFfRVJSX05FVFdPUksgb3IgaGlnaGVyLlxuICAgICAgLy8gbmV0d29ya1N0YXRlIGVxdWFscyBlaXRoZXIgTkVUV09SS19FTVBUWSBvciBORVRXT1JLX0lETEUsIGRlcGVuZGluZyBvbiB3aGVuIHRoZSBkb3dubG9hZCB3YXMgYWJvcnRlZC5cbiAgICAgIHJhd1Zpc3VhbFVzZXJNZWRpYS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgb3B0aW9ucy5sb2dnZXIud2FybihcbiAgICAgICAgICAnQ2F1Z2h0IHZpZGVvIGVsZW1lbnQgZXJyb3IgZXZlbnQ6ICVzJyxcbiAgICAgICAgICBwcmV0dHkoZXJyKVxuICAgICAgICApXG4gICAgICB9KVxuXG4gICAgICBzZXRWaXN1YWxTdHJlYW0obG9jYWxNZWRpYVN0cmVhbSlcblxuICAgICAgcGxheSgpXG4gICAgfSBjYXRjaCAoZXhjKSB7XG4gICAgICBzZWxmLmVtaXQoRXZlbnRzLkVSUk9SLCBleGMpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5pc1JlYWR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXJhd1Zpc3VhbFVzZXJNZWRpYS5zcmNcbiAgfVxuXG4gIHRoaXMuc3RvcCA9IGZ1bmN0aW9uICh2aXN1YWxTdHJlYW0sIGFib3V0VG9Jbml0aWFsaXplKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIGRvIG5vdCBzdG9wIFwidG9vIG11Y2hcIiB3aGVuIGdvaW5nIHRvIGluaXRpYWxpemUgYW55d2F5XG4gICAgICBpZiAoIWFib3V0VG9Jbml0aWFsaXplKSB7XG4gICAgICAgIGlmICghdmlzdWFsU3RyZWFtKSB7XG4gICAgICAgICAgdmlzdWFsU3RyZWFtID0gZ2V0VmlzdWFsU3RyZWFtKClcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRyYWNrcyA9IGdldFRyYWNrcyh2aXN1YWxTdHJlYW0pXG4gICAgICAgIHZhciBuZXdTdG9wQXBpRm91bmQgPSBmYWxzZVxuXG4gICAgICAgIGlmICh0cmFja3MpIHtcbiAgICAgICAgICB0cmFja3MuZm9yRWFjaChmdW5jdGlvbiAodHJhY2spIHtcbiAgICAgICAgICAgIGlmICh0cmFjay5zdG9wKSB7XG4gICAgICAgICAgICAgIG5ld1N0b3BBcGlGb3VuZCA9IHRydWVcbiAgICAgICAgICAgICAgdHJhY2suc3RvcCgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdpbGwgcHJvYmFibHkgYmVjb21lIG9ic29sZXRlIGluIG9uZSB5ZWFyIChhZnRlciBqdW5lIDIwMTcpXG4gICAgICAgICFuZXdTdG9wQXBpRm91bmQgJiYgdmlzdWFsU3RyZWFtICYmIHZpc3VhbFN0cmVhbS5zdG9wICYmIHZpc3VhbFN0cmVhbS5zdG9wKClcblxuICAgICAgICBzZXRWaXN1YWxTdHJlYW0obnVsbClcblxuICAgICAgICBhdWRpb1JlY29yZGVyICYmIGF1ZGlvUmVjb3JkZXIuc3RvcCgpXG5cbiAgICAgICAgYXVkaW9SZWNvcmRlciA9IG51bGxcbiAgICAgIH1cblxuICAgICAgcGF1c2VkID0gcmVjb3JkID0gZmFsc2VcbiAgICB9IGNhdGNoIChleGMpIHtcbiAgICAgIHNlbGYuZW1pdChFdmVudHMuRVJST1IsIGV4YylcbiAgICB9XG4gIH1cblxuICB0aGlzLmNyZWF0ZUNhbnZhcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaCgnY2FudmFzJywge1xuICAgICAgd2lkdGg6IHRoaXMuZ2V0UmF3V2lkdGgodHJ1ZSksXG4gICAgICBoZWlnaHQ6IHRoaXMuZ2V0UmF3SGVpZ2h0KHRydWUpXG4gICAgfSlcbiAgfVxuXG4gIHRoaXMuZ2V0VmlkZW9IZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJhd1Zpc3VhbFVzZXJNZWRpYS52aWRlb0hlaWdodFxuICB9XG5cbiAgdGhpcy5nZXRWaWRlb1dpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByYXdWaXN1YWxVc2VyTWVkaWEudmlkZW9XaWR0aFxuICB9XG5cbiAgdGhpcy5oYXNWaWRlb1dpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFZpZGVvV2lkdGgoKSA+IDBcbiAgfVxuXG4gIHRoaXMuZ2V0UmF3V2lkdGggPSBmdW5jdGlvbiAocmVzcG9uc2l2ZSkge1xuICAgIHZhciByYXdXaWR0aCA9IHRoaXMuZ2V0VmlkZW9XaWR0aCgpXG4gICAgY29uc3Qgd2lkdGhEZWZpbmVkID0gb3B0aW9ucy5oYXNEZWZpbmVkV2lkdGgoKVxuXG4gICAgaWYgKHdpZHRoRGVmaW5lZCB8fCBvcHRpb25zLmhhc0RlZmluZWRIZWlnaHQoKSkge1xuICAgICAgaWYgKCFyZXNwb25zaXZlICYmIHdpZHRoRGVmaW5lZCkge1xuICAgICAgICByYXdXaWR0aCA9IG9wdGlvbnMudmlkZW8ud2lkdGhcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJhd1dpZHRoID0gcmVjb3JkZXIuY2FsY3VsYXRlV2lkdGgocmVzcG9uc2l2ZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocmVzcG9uc2l2ZSkge1xuICAgICAgcmF3V2lkdGggPSByZWNvcmRlci5saW1pdFdpZHRoKHJhd1dpZHRoKVxuICAgIH1cblxuICAgIHJldHVybiByYXdXaWR0aFxuICB9XG5cbiAgdGhpcy5nZXRSYXdIZWlnaHQgPSBmdW5jdGlvbiAocmVzcG9uc2l2ZSkge1xuICAgIHZhciByYXdIZWlnaHRcblxuICAgIGlmIChvcHRpb25zLmhhc0RlZmluZWREaW1lbnNpb24oKSkge1xuICAgICAgcmF3SGVpZ2h0ID0gcmVjb3JkZXIuY2FsY3VsYXRlSGVpZ2h0KHJlc3BvbnNpdmUpXG5cbiAgICAgIGlmIChyYXdIZWlnaHQgPCAxKSB7XG4gICAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZShcbiAgICAgICAgICAnQmFkIGRpbWVuc2lvbnMnLFxuICAgICAgICAgICdDYWxjdWxhdGVkIHJhdyBoZWlnaHQgY2Fubm90IGJlIGxlc3MgdGhhbiAxIScsXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICApXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhd0hlaWdodCA9IHRoaXMuZ2V0VmlkZW9IZWlnaHQoKVxuXG4gICAgICBpZiAocmF3SGVpZ2h0IDwgMSkge1xuICAgICAgICB0aHJvdyBWaWRlb21haWxFcnJvci5jcmVhdGUoXG4gICAgICAgICAgJ0JhZCBkaW1lbnNpb25zJyxcbiAgICAgICAgICAnUmF3IHZpZGVvIGhlaWdodCBmcm9tIERPTSBlbGVtZW50IGNhbm5vdCBiZSBsZXNzIHRoYW4gMSEnLFxuICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyZXNwb25zaXZlKSB7XG4gICAgICByYXdIZWlnaHQgPSByZWNvcmRlci5saW1pdEhlaWdodChyYXdIZWlnaHQpXG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0hlaWdodFxuICB9XG5cbiAgdGhpcy5nZXRSYXdWaXN1YWxzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByYXdWaXN1YWxVc2VyTWVkaWFcbiAgfVxuXG4gIHRoaXMucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcGF1c2VkID0gdHJ1ZVxuICB9XG5cbiAgdGhpcy5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcGF1c2VkXG4gIH1cblxuICB0aGlzLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBwYXVzZWQgPSBmYWxzZVxuICB9XG5cbiAgdGhpcy5yZWNvcmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmVjb3JkID0gdHJ1ZVxuICB9XG5cbiAgdGhpcy5pc1JlY29yZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmVjb3JkXG4gIH1cblxuICB0aGlzLmdldEF1ZGlvU2FtcGxlUmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoYXVkaW9SZWNvcmRlcikge1xuICAgICAgcmV0dXJuIGF1ZGlvUmVjb3JkZXIuZ2V0U2FtcGxlUmF0ZSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuZ2V0Q2hhcmFjdGVyaXN0aWNzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhdWRpb1NhbXBsZVJhdGU6IHRoaXMuZ2V0QXVkaW9TYW1wbGVSYXRlKCksXG4gICAgICBtdXRlZDogcmF3VmlzdWFsVXNlck1lZGlhICYmIHJhd1Zpc3VhbFVzZXJNZWRpYS5tdXRlZCxcbiAgICAgIHdpZHRoOiByYXdWaXN1YWxVc2VyTWVkaWEgJiYgcmF3VmlzdWFsVXNlck1lZGlhLndpZHRoLFxuICAgICAgaGVpZ2h0OiByYXdWaXN1YWxVc2VyTWVkaWEgJiYgcmF3VmlzdWFsVXNlck1lZGlhLmhlaWdodCxcbiAgICAgIHZpZGVvV2lkdGg6IHJhd1Zpc3VhbFVzZXJNZWRpYSAmJiByYXdWaXN1YWxVc2VyTWVkaWEudmlkZW9XaWR0aCxcbiAgICAgIHZpZGVvSGVpZ2h0OiByYXdWaXN1YWxVc2VyTWVkaWEgJiYgcmF3VmlzdWFsVXNlck1lZGlhLnZpZGVvSGVpZ2h0XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgc3RhbmRhcmRpemUgZnJvbSAnLi91dGlsL3N0YW5kYXJkaXplJ1xuaW1wb3J0IENsaWVudCBmcm9tICcuL2NsaWVudCdcblxuaWYgKCFuYXZpZ2F0b3IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOYXZpZ2F0b3IgaXMgbWlzc2luZyEnKVxufSBlbHNlIHtcbiAgLy8gRW5zdXJlcyBWaWRlb21haWwgZnVuY3Rpb25hbGl0eSBpcyBub3QgYnJva2VuIG9uIGV4b3RpYyBicm93c2VycyB3aXRoIHNoaW1zLlxuICBzdGFuZGFyZGl6ZSh3aW5kb3csIG5hdmlnYXRvcilcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xpZW50XG5cbi8vIGFsc28gYWRkIHRoYXQgc28gdGhhdCB3ZSBjYW4gcmVxdWlyZSgpIGl0IHRoZSBub3JtYWwgRVM1IHdheVxubW9kdWxlLmV4cG9ydHMgPSBDbGllbnRcbiJdfQ==
