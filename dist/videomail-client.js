(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.VideomailClient = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["add-eventlistener-with-options"] = factory();
	else
		root["add-eventlistener-with-options"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = addEventListenerWithOptions;

	var _checkSupport = __webpack_require__(1);

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	/**
	 * Add event listener with additional options
	 * @param {EventTarget} target - The EventTarget element
	 * @param {string} name - The name of the event
	 * @param {function} listener - The event listener callback
	 * @param {object} options - The options explicitly passed from caller
	 * @param {string} optionName - The additioanl option to add to the event listener 
	 */
	function addEventListenerWithOptions(target, name, listener, options) {
	    var optionName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'passive';

	    if (target.addEventListener !== undefined) {
	        var listenerOptions = _checkSupport.SupportMap[optionName] ? Object.assign({}, options, _defineProperty({}, optionName, true)) : options;
	        target.addEventListener(name, listener, listenerOptions);
	    }
	}

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.SupportMap = undefined;

	var _OptionsMap;

	var _constants = __webpack_require__(2);

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var OptionsMap = (_OptionsMap = {}, _defineProperty(_OptionsMap, _constants.PASSIVE, false), _defineProperty(_OptionsMap, _constants.CAPTURE, false), _defineProperty(_OptionsMap, _constants.ONCE, false), _OptionsMap);

	var getOptionsMap = function getOptionsMap() {
	    Object.keys(OptionsMap).forEach(function (k, i) {
	        OptionsMap[k] = checkSupportForProperty(k);
	    });

	    return OptionsMap;
	};

	function checkSupportForProperty(property) {
	    if (!!OptionsMap[property]) {
	        return OptionsMap[property];
	    }

	    try {
	        var opts = Object.defineProperty({}, property, {
	            get: function get() {
	                OptionsMap[property] = true;
	            }
	        });
	        window.addEventListener("test", null, opts);
	        window.removeListener("test", null);
	    } catch (e) {}

	    return OptionsMap[property];
	}

	var SupportMap = exports.SupportMap = getOptionsMap();

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var PASSIVE = exports.PASSIVE = 'passive';
	var CAPTURE = exports.CAPTURE = 'capture';
	var ONCE = exports.ONCE = 'once';

/***/ }
/******/ ])
});
;
},{}],2:[function(_dereq_,module,exports){
var EventEmitter          = _dereq_('events').EventEmitter,
    inherits              = _dereq_('inherits'),
    raf                   = _dereq_('raf'),
    methods;


//the same as off window unless polyfilled or in node
var defaultRAFObject = {
    requestAnimationFrame: raf,
    cancelAnimationFrame: raf.cancel
};

function returnTrue(){ return true; }

//manage FPS if < 60, else return true;
function makeThrottle(fps){
    var delay = 1000/fps;
    var lastTime = Date.now();


    if( fps<=0 || fps === Infinity ){
        return returnTrue;
    }

    //if an fps throttle has been set then we'll assume
    //it natively runs at 60fps,
    var half = Math.ceil(1000 / 60) / 2;

    return function(){
        //if a custom fps is requested
        var now = Date.now();
        //is this frame within 8.5ms of the target?
        //if so then next frame is gonna be too late
        if(now - lastTime < delay - half){
            return false;
        }
        lastTime = now;
        return true;
    };
}


/**
 * Animitter provides event-based loops for the browser and node,
 * using `requestAnimationFrame`
 * @param {Object} [opts]
 * @param {Number} [opts.fps=Infinity] the framerate requested, defaults to as fast as it can (60fps on window)
 * @param {Number} [opts.delay=0] milliseconds delay between invoking `start` and initializing the loop
 * @param {Object} [opts.requestAnimationFrameObject=global] the object on which to find `requestAnimationFrame` and `cancelAnimationFrame` methods
 * @param {Boolean} [opts.fixedDelta=false] if true, timestamps will pretend to be executed at fixed intervals always
 * @constructor
 */
function Animitter( opts ){
    opts = opts || {};

    this.__delay = opts.delay || 0;

    /** @expose */
    this.fixedDelta = !!opts.fixedDelta;

    /** @expose */
    this.frameCount = 0;
    /** @expose */
    this.deltaTime = 0;
    /** @expose */
    this.elapsedTime = 0;

    /** @private */
    this.__running = false;
    /** @private */
    this.__completed = false;

    this.setFPS(opts.fps || Infinity);
    this.setRequestAnimationFrameObject(opts.requestAnimationFrameObject || defaultRAFObject);
}

inherits(Animitter, EventEmitter);

function onStart(scope){
    var now = Date.now();
    var rAFID;
    //dont let a second animation start on the same object
    //use *.on('update',fn)* instead
    if(scope.__running){
        return scope;
    }

    exports.running += 1;
    scope.__running = true;
    scope.__lastTime = now;
    scope.deltaTime = 0;

    //emit **start** once at the beginning
    scope.emit('start', scope.deltaTime, 0, scope.frameCount);

    var lastRAFObject = scope.requestAnimationFrameObject;

    var drawFrame = function(){
        if(lastRAFObject !== scope.requestAnimationFrameObject){
            //if the requestAnimationFrameObject switched in-between,
            //then re-request with the new one to ensure proper update execution context
            //i.e. VRDisplay#submitFrame() may only be requested through VRDisplay#requestAnimationFrame(drawFrame)
            lastRAFObject = scope.requestAnimationFrameObject;
            scope.requestAnimationFrameObject.requestAnimationFrame(drawFrame);
            return;
        }
        if(scope.__isReadyForUpdate()){
            scope.update();
        }
        if(scope.__running){
            rAFID = scope.requestAnimationFrameObject.requestAnimationFrame(drawFrame);
        } else {
            scope.requestAnimationFrameObject.cancelAnimationFrame(rAFID);
        }
    };

    scope.requestAnimationFrameObject.requestAnimationFrame(drawFrame);

    return scope;
}

methods = {
    //EventEmitter Aliases
    off     : EventEmitter.prototype.removeListener,
    trigger : EventEmitter.prototype.emit,

    /**
     * stops the animation and marks it as completed
     * @emit Animitter#complete
     * @returns {Animitter}
     */
    complete: function(){
        this.stop();
        this.__completed = true;
        this.emit('complete', this.frameCount, this.deltaTime);
        return this;
    },

    /**
     * stops the animation and removes all listeners
     * @emit Animitter#stop
     * @returns {Animitter}
     */
    dispose: function(){
        this.stop();
        this.removeAllListeners();
        return this;
    },

    /**
     * get milliseconds between the last 2 updates
     *
     * @return {Number}
     */
    getDeltaTime: function(){
        return this.deltaTime;
    },

    /**
     * get the total milliseconds that the animation has ran.
     * This is the cumlative value of the deltaTime between frames
     *
     * @return {Number}
     */
    getElapsedTime: function(){
        return this.elapsedTime;
    },

    /**
     * get the instances frames per second as calculated by the last delta
     *
     * @return {Number}
     */
    getFPS: function(){
        return this.deltaTime > 0 ? 1000 / this.deltaTime : 0;
        if(this.deltaTime){
            return 1000 / this.deltaTime;
        }
    },

    /**
     * get the explicit FPS limit set via `Animitter#setFPS(fps)` or
     * via the initial `options.fps` property
     *
     * @returns {Number} either as set or Infinity
     */
    getFPSLimit: function(){
        return this.__fps;
    },

    /**
     * get the number of frames that have occurred
     *
     * @return {Number}
     */
    getFrameCount: function(){
        return this.frameCount;
    },


    /**
     * get the object providing `requestAnimationFrame`
     * and `cancelAnimationFrame` methods
     * @return {Object}
     */
    getRequestAnimationFrameObject: function(){
        return this.requestAnimationFrameObject;
    },

    /**
     * is the animation loop active
     *
     * @return {boolean}
     */
    isRunning: function(){
        return this.__running;
    },

    /**
     * is the animation marked as completed
     *
     * @return {boolean}
     */
    isCompleted: function(){
        return this.__completed;
    },

    /**
     * reset the animation loop, marks as incomplete,
     * leaves listeners intact
     *
     * @emit Animitter#reset
     * @return {Animitter}
     */
    reset: function(){
        this.stop();
        this.__completed = false;
        this.__lastTime = 0;
        this.deltaTime = 0;
        this.elapsedTime = 0;
        this.frameCount = 0;

        this.emit('reset', 0, 0, this.frameCount);
        return this;
    },

    /**
     * set the framerate for the animation loop
     *
     * @param {Number} fps
     * @return {Animitter}
     */
    setFPS: function(fps){
        this.__fps = fps;
        this.__isReadyForUpdate = makeThrottle(fps);
        return this;
    },

    /**
     * set the object that will provide `requestAnimationFrame`
     * and `cancelAnimationFrame` methods to this instance
     * @param {Object} object
     * @return {Animitter}
     */
    setRequestAnimationFrameObject: function(object){
        if(typeof object.requestAnimationFrame !== 'function' || typeof object.cancelAnimationFrame !== 'function'){
            throw new Error("Invalid object provide to `setRequestAnimationFrameObject`");
        }
        this.requestAnimationFrameObject = object;
        return this;
    },

    /**
     * start an animation loop
     * @emit Animitter#start
     * @return {Animitter}
     */
    start: function(){
        var self = this;
        if(this.__delay){
            setTimeout(function(){
                onStart(self);
            }, this.__delay);
        } else {
            onStart(this);
        }
        return this;
    },

    /**
     * stops the animation loop, does not mark as completed
     *
     * @emit Animitter#stop
     * @return {Animitter}
     */
    stop: function(){
        if( this.__running ){
            this.__running = false;
            exports.running -= 1;
            this.emit('stop', this.deltaTime, this.elapsedTime, this.frameCount);
        }
        return this;
    },

    /**
     * update the animation loop once
     *
     * @emit Animitter#update
     * @return {Animitter}
     */
    update: function(){
        this.frameCount++;
        /** @private */
        var now = Date.now();
        this.__lastTime = this.__lastTime || now;
        this.deltaTime = (this.fixedDelta || exports.globalFixedDelta) ? 1000/Math.min(60, this.__fps) : now - this.__lastTime;
        this.elapsedTime += this.deltaTime;
        this.__lastTime = now;

        this.emit('update', this.deltaTime, this.elapsedTime, this.frameCount);
        return this;
    }
};



for(var method in methods){
    Animitter.prototype[method] = methods[method];
}


/**
 * create an animitter instance,
 * @param {Object} [options]
 * @param {Function} fn( deltaTime:Number, elapsedTime:Number, frameCount:Number )
 * @returns {Animitter}
 */
function createAnimitter(options, fn){

    if( arguments.length === 1 && typeof options === 'function'){
        fn = options;
        options = {};
    }

    var _instance = new Animitter( options );

    if( fn ){
        _instance.on('update', fn);
    }

    return _instance;
}

module.exports = exports = createAnimitter;

/**
 * create an animitter instance,
 * where the scope is bound in all functions
 * @param {Object} [options]
 * @param {Function} fn( deltaTime:Number, elapsedTime:Number, frameCount:Number )
 * @returns {Animitter}
 */
exports.bound = function(options, fn){

    var loop = createAnimitter(options, fn),
        functionKeys = functions(Animitter.prototype),
        hasBind = !!Function.prototype.bind,
        fnKey;

    for(var i=0; i<functionKeys.length; i++){
        fnKey = functionKeys[i];
        loop[fnKey] = hasBind ? loop[fnKey].bind(loop) : bind(loop[fnKey], loop);
    }

    return loop;
};


exports.Animitter = Animitter;

/**
 * if true, all `Animitter` instances will behave as if `options.fixedDelta = true`
 */
exports.globalFixedDelta = false;

//helpful to inherit from when using bundled
exports.EventEmitter = EventEmitter;
//keep a global counter of all loops running, helpful to watch in dev tools
exports.running = 0;

function bind(fn, scope){
    if(typeof fn.bind === 'function'){
        return fn.bind(scope);
    }
    return function(){
        return fn.apply(scope, arguments);
    };
}

function functions(obj){
    var keys = Object.keys(obj);
    var arr = [];
    for(var i=0; i<keys.length; i++){
        if(typeof obj[keys[i]] === 'function'){
            arr.push(keys[i]);
        }
    }
    return arr;
}



//polyfill Date.now for real-old browsers
Date.now = Date.now || function now() {
    return new Date().getTime();
};

},{"events":23,"inherits":35,"raf":51}],3:[function(_dereq_,module,exports){
var toBuffer       = _dereq_('typedarray-to-buffer'),
    isFloat32Array = _dereq_('validate.io-float32array')

module.exports = function(float32Array) {

    if (!float32Array)
        throw new Error('A Float32Array parameter is missing.')

    if (!isFloat32Array(float32Array))
        throw new Error('The parameter is not a Float32Array.')

    this.toBuffer = function() {

        var l   = float32Array.length,
            arr = new Int16Array(l),
            i

        for (i = 0; i < l; i++) {
            arr[i] = Math.min(1, float32Array[i]) * 0x7FFF
        }

        return toBuffer(arr)
    }
}

},{"typedarray-to-buffer":73,"validate.io-float32array":79}],4:[function(_dereq_,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],5:[function(_dereq_,module,exports){

},{}],6:[function(_dereq_,module,exports){
/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */

/**
 * Splits a string into an array of strings using a regex or string separator. Matches of the
 * separator are not included in the result array. However, if `separator` is a regex that contains
 * capturing groups, backreferences are spliced into the result each time `separator` is matched.
 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
 * cross-browser.
 * @param {String} str String to split.
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 * @example
 *
 * // Basic use
 * split('a b c d', ' ');
 * // -> ['a', 'b', 'c', 'd']
 *
 * // With limit
 * split('a b c d', ' ', 2);
 * // -> ['a', 'b']
 *
 * // Backreferences in result array
 * split('..word1 word2..', /([a-z]+)(\d+)/i);
 * // -> ['..', 'word', '1', ' ', 'word', '2', '..']
 */
module.exports = (function split(undef) {

  var nativeSplit = String.prototype.split,
    compliantExecNpcg = /()??/.exec("")[1] === undef,
    // NPCG: nonparticipating capturing group
    self;

  self = function(str, separator, limit) {
    // If `separator` is not a regex, use `nativeSplit`
    if (Object.prototype.toString.call(separator) !== "[object RegExp]") {
      return nativeSplit.call(str, separator, limit);
    }
    var output = [],
      flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.extended ? "x" : "") + // Proposed for ES6
      (separator.sticky ? "y" : ""),
      // Firefox 3+
      lastLastIndex = 0,
      // Make `global` and avoid `lastIndex` issues by working with a copy
      separator = new RegExp(separator.source, flags + "g"),
      separator2, match, lastIndex, lastLength;
    str += ""; // Type-convert
    if (!compliantExecNpcg) {
      // Doesn't need flags gy, but they don't hurt
      separator2 = new RegExp("^" + separator.source + "$(?!\\s)", flags);
    }
    /* Values for `limit`, per the spec:
     * If undefined: 4294967295 // Math.pow(2, 32) - 1
     * If 0, Infinity, or NaN: 0
     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
     * If negative number: 4294967296 - Math.floor(Math.abs(limit))
     * If other: Type-convert, then use the above rules
     */
    limit = limit === undef ? -1 >>> 0 : // Math.pow(2, 32) - 1
    limit >>> 0; // ToUint32(limit)
    while (match = separator.exec(str)) {
      // `separator.lastIndex` is not reliable cross-browser
      lastIndex = match.index + match[0].length;
      if (lastIndex > lastLastIndex) {
        output.push(str.slice(lastLastIndex, match.index));
        // Fix browsers whose `exec` methods don't consistently return `undefined` for
        // nonparticipating capturing groups
        if (!compliantExecNpcg && match.length > 1) {
          match[0].replace(separator2, function() {
            for (var i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === undef) {
                match[i] = undef;
              }
            }
          });
        }
        if (match.length > 1 && match.index < str.length) {
          Array.prototype.push.apply(output, match.slice(1));
        }
        lastLength = match[0].length;
        lastLastIndex = lastIndex;
        if (output.length >= limit) {
          break;
        }
      }
      if (separator.lastIndex === match.index) {
        separator.lastIndex++; // Avoid an infinite loop
      }
    }
    if (lastLastIndex === str.length) {
      if (lastLength || !separator.test("")) {
        output.push("");
      }
    } else {
      output.push(str.slice(lastLastIndex));
    }
    return output.length > limit ? output.slice(0, limit) : output;
  };

  return self;
})();

},{}],7:[function(_dereq_,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = _dereq_('base64-js')
var ieee754 = _dereq_('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":4,"ieee754":33}],8:[function(_dereq_,module,exports){
var toBuffer  = _dereq_('typedarray-to-buffer'),
    isBrowser = typeof(document) !== 'undefined' && typeof(document.createElement) === 'function',

    // cached, used only once for browser environments
    verifiedImageType

module.exports = function(canvas, options) {

    var self = this, quality

    options             = options               ? options :             {}
    options.image       = options.image         ? options.image :       {}
    options.image.types = options.image.types   ? options.image.types : []

    // validate some options this class needs
    if (options.image.types.length > 2)
        throw new Error('Too many image types are specified!')

    else if (options.image.types.length < 1) {

        // Set a default image type, just to be robust
        options.image.types = isBrowser ? ['webp', 'jpeg'] : ['png']
    }

    if (!options.image.quality)
        options.image.quality = .5 // default

    quality = parseFloat(options.image.quality)

    function composeImageType(index) {
        var imageType

        if (options.image.types[index])
            imageType = 'image/' + options.image.types[index]

        return imageType
    }

    function isMatch(uri, imageType) {
        var match = uri && uri.match(imageType)

        match && options.debug && options.debug('Image type %s verified', imageType)

        return match
    }

    // Performance tweak, we do not need a big canvas for finding out the supported image type
    function getTestCanvas() {

        var testCanvas

        if (isBrowser) {
            testCanvas = document.createElement('canvas')
            testCanvas.width = testCanvas.height = 1
        } else
            testCanvas = canvas

        return testCanvas
    }

    function canvasSupportsImageTypeAsync(imageType, cb) {
        try {
            getTestCanvas().toDataURL(imageType, function(err, uri) {
                if (err)
                    cb(err)
                else
                    cb(null, isMatch(uri, imageType))
            })
        } catch (exc) {
            cb(null, false)
        }
    }

    function canvasSupportsImageTypeSync(imageType) {
        var match

        try {
            var testCanvas = getTestCanvas(),
                uri        = testCanvas.toDataURL && testCanvas.toDataURL(imageType)

            match = isMatch(uri, imageType)
        } catch (exc) {

            // Can happen when i.E. a spider is coming. Just be robust here and continue.
            options.debug &&
            options.logger.debug('Failed to call toDataURL() on canvas for image type %s', imageType)
        }

        return match
    }

    function verifyImageTypeAsync(imageType, cb) {
        canvasSupportsImageTypeAsync(imageType, function(err, match) {
            if (err)
                cb(err)
            else {

                if (match)
                    cb(null, imageType)
                else {
                    imageType = composeImageType(1)

                    canvasSupportsImageTypeAsync(imageType, function(err, match) {
                        if (err)
                            cb(err)
                        else
                            cb(null, match ? imageType: null)
                    })
                }
            }
        })
    }

    function verifyImageTypeSync(imageType) {
        if (!canvasSupportsImageTypeSync(imageType)) {

            if (options.image.types[1]) {
                imageType = composeImageType(1)

                if (!canvasSupportsImageTypeSync(imageType))
                    imageType = null
            } else
                imageType = null
        }

        !imageType && options.debug && options.logger.debug('Unable to verify image type')

        return imageType
    }

    // callbacks are needed for server side tests
    function verifyImageType(cb) {
        var imageType = composeImageType(0)

        if (cb) {
            verifyImageTypeAsync(imageType, cb)
        } else {
            return verifyImageTypeSync(imageType)
        }
    }

    // this method is proven to be fast, see
    // http://jsperf.com/data-uri-to-buffer-performance/3
    function uriToBuffer(uri) {

        var uri = uri.split(',')[1],
            bytes

        // Beware that the atob function might be a static one for server side tests
        if (typeof(atob) === 'function')
            bytes = atob(uri)
        else if (typeof(self.constructor.atob) === 'function')
            bytes = self.constructor.atob(uri)
        else
            throw new Error('atob function is missing')

        var arr = new Uint8Array(bytes.length)

        // http://mrale.ph/blog/2014/12/24/array-length-caching.html
        for (var i = 0, l = bytes.length; i < l; i++) {
            arr[i] = bytes.charCodeAt(i)
        }

        return toBuffer(arr)
    }

    function toBufferSync() {
        var imageType = self.getImageType(),
            buffer

        if (imageType) {
            var uri = canvas.toDataURL(imageType, quality)
            buffer = uriToBuffer(uri)
        }

        return buffer
    }

    function toBufferAsync(cb) {
        self.getImageType(function(err, imageType) {
            if (err)
                cb(err)
            else if (!imageType)
                cb()
            else
                canvas.toDataURL(imageType, function(err, uri) {
                    if (err)
                        cb(err)
                    else
                        cb(null, uriToBuffer(uri))
                })
        })
    }

    this.toBuffer = function(cb) {
        if (cb)
            toBufferAsync(cb)
        else
            return toBufferSync()
    }

    // browsers do not need a callback, but tests do
    this.getImageType = function(cb) {

        // only run for the first time this constructor is called and
        // cache result for the next calls

        if (cb) {
            if (!verifiedImageType || !isBrowser)
                verifyImageType(function(err, newVerifiedImageType) {
                    if (err)
                        cb(err)
                    else {
                        verifiedImageType = newVerifiedImageType
                        cb(null, verifiedImageType)
                    }
                })
            else
                cb(null, verifiedImageType)

        } else {
            // on the browser side we do cache it for speed
            if (!verifiedImageType || !isBrowser)
                verifiedImageType = verifyImageType()

            return verifiedImageType
        }
    }
}

},{"typedarray-to-buffer":73}],9:[function(_dereq_,module,exports){
// contains, add, remove, toggle
var indexof = _dereq_('indexof')

module.exports = ClassList

function ClassList(elem) {
    var cl = elem.classList

    if (cl) {
        return cl
    }

    var classList = {
        add: add
        , remove: remove
        , contains: contains
        , toggle: toggle
        , toString: $toString
        , length: 0
        , item: item
    }

    return classList

    function add(token) {
        var list = getTokens()
        if (indexof(list, token) > -1) {
            return
        }
        list.push(token)
        setTokens(list)
    }

    function remove(token) {
        var list = getTokens()
            , index = indexof(list, token)

        if (index === -1) {
            return
        }

        list.splice(index, 1)
        setTokens(list)
    }

    function contains(token) {
        return indexof(getTokens(), token) > -1
    }

    function toggle(token) {
        if (contains(token)) {
            remove(token)
            return false
        } else {
            add(token)
            return true
        }
    }

    function $toString() {
        return elem.className
    }

    function item(index) {
        var tokens = getTokens()
        return tokens[index] || null
    }

    function getTokens() {
        var className = elem.className

        return filter(className.split(" "), isTruthy)
    }

    function setTokens(list) {
        var length = list.length

        elem.className = list.join(" ")
        classList.length = length

        for (var i = 0; i < list.length; i++) {
            classList[i] = list[i]
        }

        delete list[length]
    }
}

function filter (arr, fn) {
    var ret = []
    for (var i = 0; i < arr.length; i++) {
        if (fn(arr[i])) ret.push(arr[i])
    }
    return ret
}

function isTruthy(value) {
    return !!value
}

},{"indexof":34}],10:[function(_dereq_,module,exports){
/*
 * classList.js: Cross-browser full element.classList implementation.
 * 1.1.20150312
 *
 * By Eli Grey, http://eligrey.com
 * License: Dedicated to the public domain.
 *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md
 */

/*global self, document, DOMException */

/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */

if ("document" in self) {

// Full polyfill for browsers with no classList support
// Including IE < Edge missing SVGElement.classList
if (!("classList" in document.createElement("_")) 
	|| document.createElementNS && !("classList" in document.createElementNS("http://www.w3.org/2000/svg","g"))) {

(function (view) {

"use strict";

if (!('Element' in view)) return;

var
	  classListProp = "classList"
	, protoProp = "prototype"
	, elemCtrProto = view.Element[protoProp]
	, objCtr = Object
	, strTrim = String[protoProp].trim || function () {
		return this.replace(/^\s+|\s+$/g, "");
	}
	, arrIndexOf = Array[protoProp].indexOf || function (item) {
		var
			  i = 0
			, len = this.length
		;
		for (; i < len; i++) {
			if (i in this && this[i] === item) {
				return i;
			}
		}
		return -1;
	}
	// Vendors: please allow content code to instantiate DOMExceptions
	, DOMEx = function (type, message) {
		this.name = type;
		this.code = DOMException[type];
		this.message = message;
	}
	, checkTokenAndGetIndex = function (classList, token) {
		if (token === "") {
			throw new DOMEx(
				  "SYNTAX_ERR"
				, "An invalid or illegal string was specified"
			);
		}
		if (/\s/.test(token)) {
			throw new DOMEx(
				  "INVALID_CHARACTER_ERR"
				, "String contains an invalid character"
			);
		}
		return arrIndexOf.call(classList, token);
	}
	, ClassList = function (elem) {
		var
			  trimmedClasses = strTrim.call(elem.getAttribute("class") || "")
			, classes = trimmedClasses ? trimmedClasses.split(/\s+/) : []
			, i = 0
			, len = classes.length
		;
		for (; i < len; i++) {
			this.push(classes[i]);
		}
		this._updateClassName = function () {
			elem.setAttribute("class", this.toString());
		};
	}
	, classListProto = ClassList[protoProp] = []
	, classListGetter = function () {
		return new ClassList(this);
	}
;
// Most DOMException implementations don't allow calling DOMException's toString()
// on non-DOMExceptions. Error's toString() is sufficient here.
DOMEx[protoProp] = Error[protoProp];
classListProto.item = function (i) {
	return this[i] || null;
};
classListProto.contains = function (token) {
	token += "";
	return checkTokenAndGetIndex(this, token) !== -1;
};
classListProto.add = function () {
	var
		  tokens = arguments
		, i = 0
		, l = tokens.length
		, token
		, updated = false
	;
	do {
		token = tokens[i] + "";
		if (checkTokenAndGetIndex(this, token) === -1) {
			this.push(token);
			updated = true;
		}
	}
	while (++i < l);

	if (updated) {
		this._updateClassName();
	}
};
classListProto.remove = function () {
	var
		  tokens = arguments
		, i = 0
		, l = tokens.length
		, token
		, updated = false
		, index
	;
	do {
		token = tokens[i] + "";
		index = checkTokenAndGetIndex(this, token);
		while (index !== -1) {
			this.splice(index, 1);
			updated = true;
			index = checkTokenAndGetIndex(this, token);
		}
	}
	while (++i < l);

	if (updated) {
		this._updateClassName();
	}
};
classListProto.toggle = function (token, force) {
	token += "";

	var
		  result = this.contains(token)
		, method = result ?
			force !== true && "remove"
		:
			force !== false && "add"
	;

	if (method) {
		this[method](token);
	}

	if (force === true || force === false) {
		return force;
	} else {
		return !result;
	}
};
classListProto.toString = function () {
	return this.join(" ");
};

if (objCtr.defineProperty) {
	var classListPropDesc = {
		  get: classListGetter
		, enumerable: true
		, configurable: true
	};
	try {
		objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
	} catch (ex) { // IE 8 doesn't support enumerable:true
		if (ex.number === -0x7FF5EC54) {
			classListPropDesc.enumerable = false;
			objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
		}
	}
} else if (objCtr[protoProp].__defineGetter__) {
	elemCtrProto.__defineGetter__(classListProp, classListGetter);
}

}(self));

} else {
// There is full or partial native classList support, so just check if we need
// to normalize the add/remove and toggle APIs.

(function () {
	"use strict";

	var testElement = document.createElement("_");

	testElement.classList.add("c1", "c2");

	// Polyfill for IE 10/11 and Firefox <26, where classList.add and
	// classList.remove exist but support only one argument at a time.
	if (!testElement.classList.contains("c2")) {
		var createMethod = function(method) {
			var original = DOMTokenList.prototype[method];

			DOMTokenList.prototype[method] = function(token) {
				var i, len = arguments.length;

				for (i = 0; i < len; i++) {
					token = arguments[i];
					original.call(this, token);
				}
			};
		};
		createMethod('add');
		createMethod('remove');
	}

	testElement.classList.toggle("c3", false);

	// Polyfill for IE 10 and Firefox <24, where classList.toggle does not
	// support the second argument.
	if (testElement.classList.contains("c3")) {
		var _toggle = DOMTokenList.prototype.toggle;

		DOMTokenList.prototype.toggle = function(token, force) {
			if (1 in arguments && !this.contains(token) === !force) {
				return force;
			} else {
				return _toggle.call(this, token);
			}
		};

	}

	testElement = null;
}());

}

}


},{}],11:[function(_dereq_,module,exports){

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],12:[function(_dereq_,module,exports){
var DOCUMENT_POSITION_CONTAINED_BY = 16

module.exports = contains

function contains(container, elem) {
    if (container.contains) {
        return container.contains(elem)
    }

    var comparison = container.compareDocumentPosition(elem)

    return comparison === 0 || comparison & DOCUMENT_POSITION_CONTAINED_BY
}

},{}],13:[function(_dereq_,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":_dereq_("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":39}],14:[function(_dereq_,module,exports){
//     create-error.js 0.3.1
//     (c) 2013 Tim Griesser
//     This source may be freely distributed under the MIT license.
(function(factory) {

"use strict";

// A simple utility for subclassing the "Error"
// object in multiple environments, while maintaining
// relevant stack traces, messages, and prototypes.
factory(function() {

var toString = Object.prototype.toString;

// Creates an new error type with a "name",
// and any additional properties that should be set
// on the error instance.
return function() {
  var args = new Array(arguments.length);
  for (var i = 0; i < args.length; ++i) {
    args[i] = arguments[i];
  }
  var name       = getName(args);
  var target     = getTarget(args);
  var properties = getProps(args);
  function ErrorCtor(message, obj) {
    attachProps(this, properties);
    attachProps(this, obj);
    this.message = (message || this.message);
    if (message instanceof Error) {
      this.message = message.message;
      this.stack = message.stack;
    } else if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
  }
  function Err() { this.constructor = ErrorCtor; }
  Err.prototype = target['prototype'];
  ErrorCtor.prototype = new Err();
  ErrorCtor.prototype.name = ('' + name) || 'CustomError';
  return ErrorCtor;
};

// Just a few helpers to clean up the function above
// https://github.com/petkaantonov/bluebird/wiki/Optimization-killers
function getName(args) {
  if (args.length === 0) return '';
  return isError(args[0]) ? (args[1] || '') : args[0];
}
function getTarget(args) {
  if (args.length === 0) return Error;
  return isError(args[0]) ? args[0] : Error;
}
function getProps(args) {
  if (args.length === 0) return null;
  return isError(args[0]) ? args[2] : args[1];
}
function inheritedKeys(obj) {
  var ret = [];
  for (var key in obj) {
    ret.push(key);
  }
  return ret;
}

// Right now we're just assuming that a function in the first argument is an error.
function isError(obj) {
  return (typeof obj === "function");
}

// We don't need the full underscore check here, since it should either be
// an object-literal, or nothing at all.
function isObject(obj) {
  return (obj && typeof obj === "object" && toString.call(obj) === "[object Object]");
}

// Used to attach attributes to the error object in the constructor.
function attachProps(context, target) {
  if (isObject(target)) {
    var keys = inheritedKeys(target);
    for (var i = 0, l = keys.length; i < l; ++i) {
      context[keys[i]] = clone(target[keys[i]]);
    }
  }
}

// Don't need the full-out "clone" mechanism here, since if you're
// trying to set things other than empty arrays/objects on your
// sub-classed `Error` object, you're probably doing it wrong.
function clone(target) {
  if (target == null || typeof target !== "object") return target;
  var cloned = target.constructor ? target.constructor() : Object.create(null);
  for (var attr in target) {
    if (target.hasOwnProperty(attr)) {
      cloned[attr] = target[attr];
    }
  }
  return cloned;
}

});

// Boilerplate UMD definition block...
})(function(createErrorLib) {
  if (typeof define === "function" && define.amd) {
    define(createErrorLib);
  } else if (typeof exports === 'object') {
    module.exports = createErrorLib();
  } else {
    var root = this;
    var lastcreateError = root.createError;
    var createError = root.createError = createErrorLib();
    createError.noConflict = function() {
      root.createError = lastcreateError;
      return createError;
    };
  }
});

},{}],15:[function(_dereq_,module,exports){
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.deepmerge = factory());
}(this, (function () { 'use strict';

var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}

function cloneUnlessOtherwiseSpecified(value, optionsArgument) {
	var clone = !optionsArgument || optionsArgument.clone !== false;

	return (clone && isMergeableObject(value))
		? deepmerge(emptyTarget(value), value, optionsArgument)
		: value
}

function defaultArrayMerge(target, source, optionsArgument) {
	return target.concat(source).map(function(element) {
		return cloneUnlessOtherwiseSpecified(element, optionsArgument)
	})
}

function mergeObject(target, source, optionsArgument) {
	var destination = {};
	if (isMergeableObject(target)) {
		Object.keys(target).forEach(function(key) {
			destination[key] = cloneUnlessOtherwiseSpecified(target[key], optionsArgument);
		});
	}
	Object.keys(source).forEach(function(key) {
		if (!isMergeableObject(source[key]) || !target[key]) {
			destination[key] = cloneUnlessOtherwiseSpecified(source[key], optionsArgument);
		} else {
			destination[key] = deepmerge(target[key], source[key], optionsArgument);
		}
	});
	return destination
}

function deepmerge(target, source, optionsArgument) {
	var sourceIsArray = Array.isArray(source);
	var targetIsArray = Array.isArray(target);
	var options = optionsArgument || { arrayMerge: defaultArrayMerge };
	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	if (!sourceAndTargetTypesMatch) {
		return cloneUnlessOtherwiseSpecified(source, optionsArgument)
	} else if (sourceIsArray) {
		var arrayMerge = options.arrayMerge || defaultArrayMerge;
		return arrayMerge(target, source, optionsArgument)
	} else {
		return mergeObject(target, source, optionsArgument)
	}
}

deepmerge.all = function deepmergeAll(array, optionsArgument) {
	if (!Array.isArray(array)) {
		throw new Error('first argument should be an array')
	}

	return array.reduce(function(prev, next) {
		return deepmerge(prev, next, optionsArgument)
	}, {})
};

var deepmerge_1 = deepmerge;

return deepmerge_1;

})));

},{}],16:[function(_dereq_,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],17:[function(_dereq_,module,exports){
var util = _dereq_('util')
var global = _dereq_('global')
var EventEmitter = _dereq_('events')

var makeDespot = function () {
  var Despot = function () {
    if (global._singletonDespotInstance) {
      return global._singletonDespotInstance
    } else {
      global._singletonDespotInstance = this
      EventEmitter.call(this)
    }
  }

  util.inherits(Despot, EventEmitter)

  return new Despot()
}

module.exports = makeDespot()

},{"events":23,"global":29,"util":78}],18:[function(_dereq_,module,exports){
'use strict'

var document = _dereq_('global/document')
var Event = _dereq_('geval')
var Keys = _dereq_('./keys')

module.exports = Visibility

function Visibility () {
  var keys = Keys(document)
  if (!keys) return noopShim()

  return {
    visible: visible,
    onChange: Event(listen)
  }

  function visible () {
    return !document[keys.hidden]
  }

  function listen (broadcast) {
    document.addEventListener(keys.event, function onVisibilityChange () {
      broadcast(visible())
    })
  }
}

function noopShim () {
  return {
    visible: function () {
      return true
    },
    onChange: noop
  }
}

function noop () {}

},{"./keys":19,"geval":27,"global/document":28}],19:[function(_dereq_,module,exports){
'use strict'

module.exports = keys

function keys (document) {
  var prefix = detectPrefix(document)
  if (prefix == null) return
  return {
    hidden: lowercaseFirst(prefix + 'Hidden'),
    event: prefix + 'visibilitychange'
  }
}

function detectPrefix (document) {
  if (document.hidden != null) return ''
  if (document.mozHidden != null) return 'moz'
  if (document.msHidden != null) return 'ms'
  if (document.webkitHidden != null) return 'webkit'
}

function lowercaseFirst (string) {
  return string.substring(0, 1).toLowerCase() + string.substring(1)
}

},{}],20:[function(_dereq_,module,exports){
(function (process,Buffer){
var stream = _dereq_('readable-stream')
var eos = _dereq_('end-of-stream')
var inherits = _dereq_('inherits')
var shift = _dereq_('stream-shift')

var SIGNAL_FLUSH = new Buffer([0])

var onuncork = function(self, fn) {
  if (self._corked) self.once('uncork', fn)
  else fn()
}

var destroyer = function(self, end) {
  return function(err) {
    if (err) self.destroy(err.message === 'premature close' ? null : err)
    else if (end && !self._ended) self.end()
  }
}

var end = function(ws, fn) {
  if (!ws) return fn()
  if (ws._writableState && ws._writableState.finished) return fn()
  if (ws._writableState) return ws.end(fn)
  ws.end()
  fn()
}

var toStreams2 = function(rs) {
  return new (stream.Readable)({objectMode:true, highWaterMark:16}).wrap(rs)
}

var Duplexify = function(writable, readable, opts) {
  if (!(this instanceof Duplexify)) return new Duplexify(writable, readable, opts)
  stream.Duplex.call(this, opts)

  this._writable = null
  this._readable = null
  this._readable2 = null

  this._forwardDestroy = !opts || opts.destroy !== false
  this._forwardEnd = !opts || opts.end !== false
  this._corked = 1 // start corked
  this._ondrain = null
  this._drained = false
  this._forwarding = false
  this._unwrite = null
  this._unread = null
  this._ended = false

  this.destroyed = false

  if (writable) this.setWritable(writable)
  if (readable) this.setReadable(readable)
}

inherits(Duplexify, stream.Duplex)

Duplexify.obj = function(writable, readable, opts) {
  if (!opts) opts = {}
  opts.objectMode = true
  opts.highWaterMark = 16
  return new Duplexify(writable, readable, opts)
}

Duplexify.prototype.cork = function() {
  if (++this._corked === 1) this.emit('cork')
}

Duplexify.prototype.uncork = function() {
  if (this._corked && --this._corked === 0) this.emit('uncork')
}

Duplexify.prototype.setWritable = function(writable) {
  if (this._unwrite) this._unwrite()

  if (this.destroyed) {
    if (writable && writable.destroy) writable.destroy()
    return
  }

  if (writable === null || writable === false) {
    this.end()
    return
  }

  var self = this
  var unend = eos(writable, {writable:true, readable:false}, destroyer(this, this._forwardEnd))

  var ondrain = function() {
    var ondrain = self._ondrain
    self._ondrain = null
    if (ondrain) ondrain()
  }

  var clear = function() {
    self._writable.removeListener('drain', ondrain)
    unend()
  }

  if (this._unwrite) process.nextTick(ondrain) // force a drain on stream reset to avoid livelocks

  this._writable = writable
  this._writable.on('drain', ondrain)
  this._unwrite = clear

  this.uncork() // always uncork setWritable
}

Duplexify.prototype.setReadable = function(readable) {
  if (this._unread) this._unread()

  if (this.destroyed) {
    if (readable && readable.destroy) readable.destroy()
    return
  }

  if (readable === null || readable === false) {
    this.push(null)
    this.resume()
    return
  }

  var self = this
  var unend = eos(readable, {writable:false, readable:true}, destroyer(this))

  var onreadable = function() {
    self._forward()
  }

  var onend = function() {
    self.push(null)
  }

  var clear = function() {
    self._readable2.removeListener('readable', onreadable)
    self._readable2.removeListener('end', onend)
    unend()
  }

  this._drained = true
  this._readable = readable
  this._readable2 = readable._readableState ? readable : toStreams2(readable)
  this._readable2.on('readable', onreadable)
  this._readable2.on('end', onend)
  this._unread = clear

  this._forward()
}

Duplexify.prototype._read = function() {
  this._drained = true
  this._forward()
}

Duplexify.prototype._forward = function() {
  if (this._forwarding || !this._readable2 || !this._drained) return
  this._forwarding = true

  var data

  while (this._drained && (data = shift(this._readable2)) !== null) {
    if (this.destroyed) continue
    this._drained = this.push(data)
  }

  this._forwarding = false
}

Duplexify.prototype.destroy = function(err) {
  if (this.destroyed) return
  this.destroyed = true

  var self = this
  process.nextTick(function() {
    self._destroy(err)
  })
}

Duplexify.prototype._destroy = function(err) {
  if (err) {
    var ondrain = this._ondrain
    this._ondrain = null
    if (ondrain) ondrain(err)
    else this.emit('error', err)
  }

  if (this._forwardDestroy) {
    if (this._readable && this._readable.destroy) this._readable.destroy()
    if (this._writable && this._writable.destroy) this._writable.destroy()
  }

  this.emit('close')
}

Duplexify.prototype._write = function(data, enc, cb) {
  if (this.destroyed) return cb()
  if (this._corked) return onuncork(this, this._write.bind(this, data, enc, cb))
  if (data === SIGNAL_FLUSH) return this._finish(cb)
  if (!this._writable) return cb()

  if (this._writable.write(data) === false) this._ondrain = cb
  else cb()
}


Duplexify.prototype._finish = function(cb) {
  var self = this
  this.emit('preend')
  onuncork(this, function() {
    end(self._forwardEnd && self._writable, function() {
      // haxx to not emit prefinish twice
      if (self._writableState.prefinished === false) self._writableState.prefinished = true
      self.emit('prefinish')
      onuncork(self, cb)
    })
  })
}

Duplexify.prototype.end = function(data, enc, cb) {
  if (typeof data === 'function') return this.end(null, null, data)
  if (typeof enc === 'function') return this.end(data, null, enc)
  this._ended = true
  if (data) this.write(data)
  if (!this._writableState.ending) this.write(SIGNAL_FLUSH)
  return stream.Writable.prototype.end.call(this, cb)
}

module.exports = Duplexify

}).call(this,_dereq_('_process'),_dereq_("buffer").Buffer)

},{"_process":50,"buffer":7,"end-of-stream":22,"inherits":35,"readable-stream":61,"stream-shift":66}],21:[function(_dereq_,module,exports){
// element-closest | CC0-1.0 | github.com/jonathantneal/closest

(function (ElementProto) {
	if (typeof ElementProto.matches !== 'function') {
		ElementProto.matches = ElementProto.msMatchesSelector || ElementProto.mozMatchesSelector || ElementProto.webkitMatchesSelector || function matches(selector) {
			var element = this;
			var elements = (element.document || element.ownerDocument).querySelectorAll(selector);
			var index = 0;

			while (elements[index] && elements[index] !== element) {
				++index;
			}

			return Boolean(elements[index]);
		};
	}

	if (typeof ElementProto.closest !== 'function') {
		ElementProto.closest = function closest(selector) {
			var element = this;

			while (element && element.nodeType === 1) {
				if (element.matches(selector)) {
					return element;
				}

				element = element.parentNode;
			}

			return null;
		};
	}
})(window.Element.prototype);

},{}],22:[function(_dereq_,module,exports){
var once = _dereq_('once');

var noop = function() {};

var isRequest = function(stream) {
	return stream.setHeader && typeof stream.abort === 'function';
};

var isChildProcess = function(stream) {
	return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3
};

var eos = function(stream, opts, callback) {
	if (typeof opts === 'function') return eos(stream, null, opts);
	if (!opts) opts = {};

	callback = once(callback || noop);

	var ws = stream._writableState;
	var rs = stream._readableState;
	var readable = opts.readable || (opts.readable !== false && stream.readable);
	var writable = opts.writable || (opts.writable !== false && stream.writable);

	var onlegacyfinish = function() {
		if (!stream.writable) onfinish();
	};

	var onfinish = function() {
		writable = false;
		if (!readable) callback.call(stream);
	};

	var onend = function() {
		readable = false;
		if (!writable) callback.call(stream);
	};

	var onexit = function(exitCode) {
		callback.call(stream, exitCode ? new Error('exited with error code: ' + exitCode) : null);
	};

	var onclose = function() {
		if (readable && !(rs && rs.ended)) return callback.call(stream, new Error('premature close'));
		if (writable && !(ws && ws.ended)) return callback.call(stream, new Error('premature close'));
	};

	var onrequest = function() {
		stream.req.on('finish', onfinish);
	};

	if (isRequest(stream)) {
		stream.on('complete', onfinish);
		stream.on('abort', onclose);
		if (stream.req) onrequest();
		else stream.on('request', onrequest);
	} else if (writable && !ws) { // legacy streams
		stream.on('end', onlegacyfinish);
		stream.on('close', onlegacyfinish);
	}

	if (isChildProcess(stream)) stream.on('exit', onexit);

	stream.on('end', onend);
	stream.on('finish', onfinish);
	if (opts.error !== false) stream.on('error', callback);
	stream.on('close', onclose);

	return function() {
		stream.removeListener('complete', onfinish);
		stream.removeListener('abort', onclose);
		stream.removeListener('request', onrequest);
		if (stream.req) stream.req.removeListener('finish', onfinish);
		stream.removeListener('end', onlegacyfinish);
		stream.removeListener('close', onlegacyfinish);
		stream.removeListener('finish', onfinish);
		stream.removeListener('exit', onexit);
		stream.removeListener('end', onend);
		stream.removeListener('error', callback);
		stream.removeListener('close', onclose);
	};
};

module.exports = eos;

},{"once":47}],23:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],24:[function(_dereq_,module,exports){
(function (global){
"use strict";

/**
 * filesize
 *
 * @copyright 2017 Jason Mulligan <jason.mulligan@avoidwork.com>
 * @license BSD-3-Clause
 * @version 3.5.10
 */
(function (global) {
	var b = /^(b|B)$/,
	    symbol = {
		iec: {
			bits: ["b", "Kib", "Mib", "Gib", "Tib", "Pib", "Eib", "Zib", "Yib"],
			bytes: ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"]
		},
		jedec: {
			bits: ["b", "Kb", "Mb", "Gb", "Tb", "Pb", "Eb", "Zb", "Yb"],
			bytes: ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]
		}
	},
	    fullform = {
		iec: ["", "kibi", "mebi", "gibi", "tebi", "pebi", "exbi", "zebi", "yobi"],
		jedec: ["", "kilo", "mega", "giga", "tera", "peta", "exa", "zetta", "yotta"]
	};

	/**
  * filesize
  *
  * @method filesize
  * @param  {Mixed}   arg        String, Int or Float to transform
  * @param  {Object}  descriptor [Optional] Flags
  * @return {String}             Readable file size String
  */
	function filesize(arg) {
		var descriptor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		var result = [],
		    val = 0,
		    e = void 0,
		    base = void 0,
		    bits = void 0,
		    ceil = void 0,
		    full = void 0,
		    fullforms = void 0,
		    neg = void 0,
		    num = void 0,
		    output = void 0,
		    round = void 0,
		    unix = void 0,
		    spacer = void 0,
		    standard = void 0,
		    symbols = void 0;

		if (isNaN(arg)) {
			throw new Error("Invalid arguments");
		}

		bits = descriptor.bits === true;
		unix = descriptor.unix === true;
		base = descriptor.base || 2;
		round = descriptor.round !== undefined ? descriptor.round : unix ? 1 : 2;
		spacer = descriptor.spacer !== undefined ? descriptor.spacer : unix ? "" : " ";
		symbols = descriptor.symbols || descriptor.suffixes || {};
		standard = base === 2 ? descriptor.standard || "jedec" : "jedec";
		output = descriptor.output || "string";
		full = descriptor.fullform === true;
		fullforms = descriptor.fullforms instanceof Array ? descriptor.fullforms : [];
		e = descriptor.exponent !== undefined ? descriptor.exponent : -1;
		num = Number(arg);
		neg = num < 0;
		ceil = base > 2 ? 1000 : 1024;

		// Flipping a negative number to determine the size
		if (neg) {
			num = -num;
		}

		// Determining the exponent
		if (e === -1 || isNaN(e)) {
			e = Math.floor(Math.log(num) / Math.log(ceil));

			if (e < 0) {
				e = 0;
			}
		}

		// Exceeding supported length, time to reduce & multiply
		if (e > 8) {
			e = 8;
		}

		// Zero is now a special case because bytes divide by 1
		if (num === 0) {
			result[0] = 0;
			result[1] = unix ? "" : symbol[standard][bits ? "bits" : "bytes"][e];
		} else {
			val = num / (base === 2 ? Math.pow(2, e * 10) : Math.pow(1000, e));

			if (bits) {
				val = val * 8;

				if (val >= ceil && e < 8) {
					val = val / ceil;
					e++;
				}
			}

			result[0] = Number(val.toFixed(e > 0 ? round : 0));
			result[1] = base === 10 && e === 1 ? bits ? "kb" : "kB" : symbol[standard][bits ? "bits" : "bytes"][e];

			if (unix) {
				result[1] = standard === "jedec" ? result[1].charAt(0) : e > 0 ? result[1].replace(/B$/, "") : result[1];

				if (b.test(result[1])) {
					result[0] = Math.floor(result[0]);
					result[1] = "";
				}
			}
		}

		// Decorating a 'diff'
		if (neg) {
			result[0] = -result[0];
		}

		// Applying custom symbol
		result[1] = symbols[result[1]] || result[1];

		// Returning Array, Object, or String (default)
		if (output === "array") {
			return result;
		}

		if (output === "exponent") {
			return e;
		}

		if (output === "object") {
			return { value: result[0], suffix: result[1], symbol: result[1] };
		}

		if (full) {
			result[1] = fullforms[e] ? fullforms[e] : fullform[standard][e] + (bits ? "bit" : "byte") + (result[0] === 1 ? "" : "s");
		}

		return result.join(spacer);
	}

	// Partial application for functional programming
	filesize.partial = function (opt) {
		return function (arg) {
			return filesize(arg, opt);
		};
	};

	// CommonJS, AMD, script tag
	if (typeof exports !== "undefined") {
		module.exports = filesize;
	} else if (typeof define === "function" && define.amd) {
		define(function () {
			return filesize;
		});
	} else {
		global.filesize = filesize;
	}
})(typeof window !== "undefined" ? window : global);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],25:[function(_dereq_,module,exports){
'use strict';

exports.__esModule = true;
var NODE_LIST_CLASSES = {
  '[object HTMLCollection]': true,
  '[object NodeList]': true,
  '[object RadioNodeList]': true
};

// .type values for elements which can appear in .elements and should be ignored
var IGNORED_ELEMENT_TYPES = {
  'button': true,
  'fieldset': true,
  // 'keygen': true,
  // 'output': true,
  'reset': true,
  'submit': true
};

var CHECKED_INPUT_TYPES = {
  'checkbox': true,
  'radio': true
};

var TRIM_RE = /^\s+|\s+$/g;

var slice = Array.prototype.slice;
var toString = Object.prototype.toString;

/**
 * @param {HTMLFormElement} form
 * @param {Object} options
 * @return {Object.<string,(string|Array.<string>)>} an object containing
 *   submittable value(s) held in the form's .elements collection, with
 *   properties named as per element names or ids.
 */
function getFormData(form) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? { trim: false } : arguments[1];

  if (!form) {
    throw new Error('A form is required by getFormData, was given form=' + form);
  }

  var data = {};
  var elementName = undefined;
  var elementNames = [];
  var elementNameLookup = {};

  // Get unique submittable element names for the form
  for (var i = 0, l = form.elements.length; i < l; i++) {
    var element = form.elements[i];
    if (IGNORED_ELEMENT_TYPES[element.type] || element.disabled) {
      continue;
    }
    elementName = element.name || element.id;
    if (elementName && !elementNameLookup[elementName]) {
      elementNames.push(elementName);
      elementNameLookup[elementName] = true;
    }
  }

  // Extract element data name-by-name for consistent handling of special cases
  // around elements which contain multiple inputs.
  for (var i = 0, l = elementNames.length; i < l; i++) {
    elementName = elementNames[i];
    var value = getNamedFormElementData(form, elementName, options);
    if (value != null) {
      data[elementName] = value;
    }
  }

  return data;
}

/**
 * @param {HTMLFormElement} form
 * @param {string} elementName
 * @param {Object} options
 * @return {(string|Array.<string>)} submittable value(s) in the form for a
 *   named element from its .elements collection, or null if there was no
 *   element with that name or the element had no submittable value(s).
 */
function getNamedFormElementData(form, elementName) {
  var options = arguments.length <= 2 || arguments[2] === undefined ? { trim: false } : arguments[2];

  if (!form) {
    throw new Error('A form is required by getNamedFormElementData, was given form=' + form);
  }
  if (!elementName && toString.call(elementName) !== '[object String]') {
    throw new Error('A form element name is required by getNamedFormElementData, was given elementName=' + elementName);
  }

  var element = form.elements[elementName];
  if (!element || element.disabled) {
    return null;
  }

  if (!NODE_LIST_CLASSES[toString.call(element)]) {
    return getFormElementValue(element, options.trim);
  }

  // Deal with multiple form controls which have the same name
  var data = [];
  var allRadios = true;
  for (var i = 0, l = element.length; i < l; i++) {
    if (element[i].disabled) {
      continue;
    }
    if (allRadios && element[i].type !== 'radio') {
      allRadios = false;
    }
    var value = getFormElementValue(element[i], options.trim);
    if (value != null) {
      data = data.concat(value);
    }
  }

  // Special case for an element with multiple same-named inputs which were all
  // radio buttons: if there was a selected value, only return the value.
  if (allRadios && data.length === 1) {
    return data[0];
  }

  return data.length > 0 ? data : null;
}

/**
 * @param {HTMLElement} element a form element.
 * @param {booleam} trim should values for text entry inputs be trimmed?
 * @return {(string|Array.<string>|File|Array.<File>)} the element's submittable
 *   value(s), or null if it had none.
 */
function getFormElementValue(element, trim) {
  var value = null;
  var type = element.type;

  if (type === 'select-one') {
    if (element.options.length) {
      value = element.options[element.selectedIndex].value;
    }
    return value;
  }

  if (type === 'select-multiple') {
    value = [];
    for (var i = 0, l = element.options.length; i < l; i++) {
      if (element.options[i].selected) {
        value.push(element.options[i].value);
      }
    }
    if (value.length === 0) {
      value = null;
    }
    return value;
  }

  // If a file input doesn't have a files attribute, fall through to using its
  // value attribute.
  if (type === 'file' && 'files' in element) {
    if (element.multiple) {
      value = slice.call(element.files);
      if (value.length === 0) {
        value = null;
      }
    } else {
      // Should be null if not present, according to the spec
      value = element.files[0];
    }
    return value;
  }

  if (!CHECKED_INPUT_TYPES[type]) {
    value = trim ? element.value.replace(TRIM_RE, '') : element.value;
  } else if (element.checked) {
    value = element.value;
  }

  return value;
}

getFormData.getNamedFormElementData = getNamedFormElementData;

exports['default'] = getFormData;
module.exports = exports['default'];
},{}],26:[function(_dereq_,module,exports){
module.exports = Event

function Event() {
    var listeners = []

    return { broadcast: broadcast, listen: event }

    function broadcast(value) {
        for (var i = 0; i < listeners.length; i++) {
            listeners[i](value)
        }
    }

    function event(listener) {
        listeners.push(listener)

        return removeListener

        function removeListener() {
            var index = listeners.indexOf(listener)
            if (index !== -1) {
                listeners.splice(index, 1)
            }
        }
    }
}

},{}],27:[function(_dereq_,module,exports){
var Event = _dereq_('./event.js')

module.exports = Source

function Source(broadcaster) {
    var tuple = Event()

    broadcaster(tuple.broadcast)

    return tuple.listen
}

},{"./event.js":26}],28:[function(_dereq_,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = _dereq_('min-document');

var doccy;

if (typeof document !== 'undefined') {
    doccy = document;
} else {
    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }
}

module.exports = doccy;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"min-document":5}],29:[function(_dereq_,module,exports){
(function (global){
var win;

if (typeof window !== "undefined") {
    win = window;
} else if (typeof global !== "undefined") {
    win = global;
} else if (typeof self !== "undefined"){
    win = self;
} else {
    win = {};
}

module.exports = win;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],30:[function(_dereq_,module,exports){
module.exports = shim

function shim (element, value) {
    if (value === undefined) {
        return element.style.display === 'none'
    }

    element.style.display = value ? 'none' : ''
}

},{}],31:[function(_dereq_,module,exports){
// HumanizeDuration.js - http://git.io/j0HgmQ

;(function () {
  var languages = {
    ar: {
      y: function (c) { return c === 1 ? 'سنة' : 'سنوات' },
      mo: function (c) { return c === 1 ? 'شهر' : 'أشهر' },
      w: function (c) { return c === 1 ? 'أسبوع' : 'أسابيع' },
      d: function (c) { return c === 1 ? 'يوم' : 'أيام' },
      h: function (c) { return c === 1 ? 'ساعة' : 'ساعات' },
      m: function (c) { return c === 1 ? 'دقيقة' : 'دقائق' },
      s: function (c) { return c === 1 ? 'ثانية' : 'ثواني' },
      ms: function (c) { return c === 1 ? 'جزء من الثانية' : 'أجزاء من الثانية' },
      decimal: ','
    },
    ca: {
      y: function (c) { return 'any' + (c === 1 ? '' : 's') },
      mo: function (c) { return 'mes' + (c === 1 ? '' : 'os') },
      w: function (c) { return 'setman' + (c === 1 ? 'a' : 'es') },
      d: function (c) { return 'di' + (c === 1 ? 'a' : 'es') },
      h: function (c) { return 'hor' + (c === 1 ? 'a' : 'es') },
      m: function (c) { return 'minut' + (c === 1 ? '' : 's') },
      s: function (c) { return 'segon' + (c === 1 ? '' : 's') },
      ms: function (c) { return 'milisegon' + (c === 1 ? '' : 's') },
      decimal: ','
    },
    cs: {
      y: function (c) { return ['rok', 'roku', 'roky', 'let'][getCzechForm(c)] },
      mo: function (c) { return ['měsíc', 'měsíce', 'měsíce', 'měsíců'][getCzechForm(c)] },
      w: function (c) { return ['týden', 'týdne', 'týdny', 'týdnů'][getCzechForm(c)] },
      d: function (c) { return ['den', 'dne', 'dny', 'dní'][getCzechForm(c)] },
      h: function (c) { return ['hodina', 'hodiny', 'hodiny', 'hodin'][getCzechForm(c)] },
      m: function (c) { return ['minuta', 'minuty', 'minuty', 'minut'][getCzechForm(c)] },
      s: function (c) { return ['sekunda', 'sekundy', 'sekundy', 'sekund'][getCzechForm(c)] },
      ms: function (c) { return ['milisekunda', 'milisekundy', 'milisekundy', 'milisekund'][getCzechForm(c)] },
      decimal: ','
    },
    da: {
      y: 'år',
      mo: function (c) { return 'måned' + (c === 1 ? '' : 'er') },
      w: function (c) { return 'uge' + (c === 1 ? '' : 'r') },
      d: function (c) { return 'dag' + (c === 1 ? '' : 'e') },
      h: function (c) { return 'time' + (c === 1 ? '' : 'r') },
      m: function (c) { return 'minut' + (c === 1 ? '' : 'ter') },
      s: function (c) { return 'sekund' + (c === 1 ? '' : 'er') },
      ms: function (c) { return 'millisekund' + (c === 1 ? '' : 'er') },
      decimal: ','
    },
    de: {
      y: function (c) { return 'Jahr' + (c === 1 ? '' : 'e') },
      mo: function (c) { return 'Monat' + (c === 1 ? '' : 'e') },
      w: function (c) { return 'Woche' + (c === 1 ? '' : 'n') },
      d: function (c) { return 'Tag' + (c === 1 ? '' : 'e') },
      h: function (c) { return 'Stunde' + (c === 1 ? '' : 'n') },
      m: function (c) { return 'Minute' + (c === 1 ? '' : 'n') },
      s: function (c) { return 'Sekunde' + (c === 1 ? '' : 'n') },
      ms: function (c) { return 'Millisekunde' + (c === 1 ? '' : 'n') },
      decimal: ','
    },
    en: {
      y: function (c) { return 'year' + (c === 1 ? '' : 's') },
      mo: function (c) { return 'month' + (c === 1 ? '' : 's') },
      w: function (c) { return 'week' + (c === 1 ? '' : 's') },
      d: function (c) { return 'day' + (c === 1 ? '' : 's') },
      h: function (c) { return 'hour' + (c === 1 ? '' : 's') },
      m: function (c) { return 'minute' + (c === 1 ? '' : 's') },
      s: function (c) { return 'second' + (c === 1 ? '' : 's') },
      ms: function (c) { return 'millisecond' + (c === 1 ? '' : 's') },
      decimal: '.'
    },
    es: {
      y: function (c) { return 'año' + (c === 1 ? '' : 's') },
      mo: function (c) { return 'mes' + (c === 1 ? '' : 'es') },
      w: function (c) { return 'semana' + (c === 1 ? '' : 's') },
      d: function (c) { return 'día' + (c === 1 ? '' : 's') },
      h: function (c) { return 'hora' + (c === 1 ? '' : 's') },
      m: function (c) { return 'minuto' + (c === 1 ? '' : 's') },
      s: function (c) { return 'segundo' + (c === 1 ? '' : 's') },
      ms: function (c) { return 'milisegundo' + (c === 1 ? '' : 's') },
      decimal: ','
    },
    fi: {
      y: function (c) { return c === 1 ? 'vuosi' : 'vuotta' },
      mo: function (c) { return c === 1 ? 'kuukausi' : 'kuukautta' },
      w: function (c) { return 'viikko' + (c === 1 ? '' : 'a') },
      d: function (c) { return 'päivä' + (c === 1 ? '' : 'ä') },
      h: function (c) { return 'tunti' + (c === 1 ? '' : 'a') },
      m: function (c) { return 'minuutti' + (c === 1 ? '' : 'a') },
      s: function (c) { return 'sekunti' + (c === 1 ? '' : 'a') },
      ms: function (c) { return 'millisekunti' + (c === 1 ? '' : 'a') },
      decimal: ','
    },
    fr: {
      y: function (c) { return 'an' + (c >= 2 ? 's' : '') },
      mo: 'mois',
      w: function (c) { return 'semaine' + (c >= 2 ? 's' : '') },
      d: function (c) { return 'jour' + (c >= 2 ? 's' : '') },
      h: function (c) { return 'heure' + (c >= 2 ? 's' : '') },
      m: function (c) { return 'minute' + (c >= 2 ? 's' : '') },
      s: function (c) { return 'seconde' + (c >= 2 ? 's' : '') },
      ms: function (c) { return 'milliseconde' + (c >= 2 ? 's' : '') },
      decimal: ','
    },
    gr: {
      y: function (c) { return c === 1 ? 'χρόνος' : 'χρόνια' },
      mo: function (c) { return c === 1 ? 'μήνας' : 'μήνες' },
      w: function (c) { return c === 1 ? 'εβδομάδα' : 'εβδομάδες' },
      d: function (c) { return c === 1 ? 'μέρα' : 'μέρες' },
      h: function (c) { return c === 1 ? 'ώρα' : 'ώρες' },
      m: function (c) { return c === 1 ? 'λεπτό' : 'λεπτά' },
      s: function (c) { return c === 1 ? 'δευτερόλεπτο' : 'δευτερόλεπτα' },
      ms: function (c) { return c === 1 ? 'χιλιοστό του δευτερολέπτου' : 'χιλιοστά του δευτερολέπτου' },
      decimal: ','
    },
    hu: {
      y: 'év',
      mo: 'hónap',
      w: 'hét',
      d: 'nap',
      h: 'óra',
      m: 'perc',
      s: 'másodperc',
      ms: 'ezredmásodperc',
      decimal: ','
    },
    id: {
      y: 'tahun',
      mo: 'bulan',
      w: 'minggu',
      d: 'hari',
      h: 'jam',
      m: 'menit',
      s: 'detik',
      ms: 'milidetik',
      decimal: '.'
    },
    is: {
      y: 'ár',
      mo: function (c) { return 'mánuð' + (c === 1 ? 'ur' : 'ir') },
      w: function (c) { return 'vik' + (c === 1 ? 'a' : 'ur') },
      d: function (c) { return 'dag' + (c === 1 ? 'ur' : 'ar') },
      h: function (c) { return 'klukkutím' + (c === 1 ? 'i' : 'ar') },
      m: function (c) { return 'mínút' + (c === 1 ? 'a' : 'ur') },
      s: function (c) { return 'sekúnd' + (c === 1 ? 'a' : 'ur') },
      ms: function (c) { return 'millisekúnd' + (c === 1 ? 'a' : 'ur') },
      decimal: '.'
    },
    it: {
      y: function (c) { return 'ann' + (c === 1 ? 'o' : 'i') },
      mo: function (c) { return 'mes' + (c === 1 ? 'e' : 'i') },
      w: function (c) { return 'settiman' + (c === 1 ? 'a' : 'e') },
      d: function (c) { return 'giorn' + (c === 1 ? 'o' : 'i') },
      h: function (c) { return 'or' + (c === 1 ? 'a' : 'e') },
      m: function (c) { return 'minut' + (c === 1 ? 'o' : 'i') },
      s: function (c) { return 'second' + (c === 1 ? 'o' : 'i') },
      ms: function (c) { return 'millisecond' + (c === 1 ? 'o' : 'i') },
      decimal: ','
    },
    ja: {
      y: '年',
      mo: '月',
      w: '週',
      d: '日',
      h: '時間',
      m: '分',
      s: '秒',
      ms: 'ミリ秒',
      decimal: '.'
    },
    ko: {
      y: '년',
      mo: '개월',
      w: '주일',
      d: '일',
      h: '시간',
      m: '분',
      s: '초',
      ms: '밀리 초',
      decimal: '.'
    },
    lt: {
      y: function (c) { return ((c % 10 === 0) || (c % 100 >= 10 && c % 100 <= 20)) ? 'metų' : 'metai' },
      mo: function (c) { return ['mėnuo', 'mėnesiai', 'mėnesių'][getLithuanianForm(c)] },
      w: function (c) { return ['savaitė', 'savaitės', 'savaičių'][getLithuanianForm(c)] },
      d: function (c) { return ['diena', 'dienos', 'dienų'][getLithuanianForm(c)] },
      h: function (c) { return ['valanda', 'valandos', 'valandų'][getLithuanianForm(c)] },
      m: function (c) { return ['minutė', 'minutės', 'minučių'][getLithuanianForm(c)] },
      s: function (c) { return ['sekundė', 'sekundės', 'sekundžių'][getLithuanianForm(c)] },
      ms: function (c) { return ['milisekundė', 'milisekundės', 'milisekundžių'][getLithuanianForm(c)] },
      decimal: ','
    },
    ms: {
      y: 'tahun',
      mo: 'bulan',
      w: 'minggu',
      d: 'hari',
      h: 'jam',
      m: 'minit',
      s: 'saat',
      ms: 'milisaat',
      decimal: '.'
    },
    nl: {
      y: 'jaar',
      mo: function (c) { return c === 1 ? 'maand' : 'maanden' },
      w: function (c) { return c === 1 ? 'week' : 'weken' },
      d: function (c) { return c === 1 ? 'dag' : 'dagen' },
      h: 'uur',
      m: function (c) { return c === 1 ? 'minuut' : 'minuten' },
      s: function (c) { return c === 1 ? 'seconde' : 'seconden' },
      ms: function (c) { return c === 1 ? 'milliseconde' : 'milliseconden' },
      decimal: ','
    },
    no: {
      y: 'år',
      mo: function (c) { return 'måned' + (c === 1 ? '' : 'er') },
      w: function (c) { return 'uke' + (c === 1 ? '' : 'r') },
      d: function (c) { return 'dag' + (c === 1 ? '' : 'er') },
      h: function (c) { return 'time' + (c === 1 ? '' : 'r') },
      m: function (c) { return 'minutt' + (c === 1 ? '' : 'er') },
      s: function (c) { return 'sekund' + (c === 1 ? '' : 'er') },
      ms: function (c) { return 'millisekund' + (c === 1 ? '' : 'er') },
      decimal: ','
    },
    pl: {
      y: function (c) { return ['rok', 'roku', 'lata', 'lat'][getPolishForm(c)] },
      mo: function (c) { return ['miesiąc', 'miesiąca', 'miesiące', 'miesięcy'][getPolishForm(c)] },
      w: function (c) { return ['tydzień', 'tygodnia', 'tygodnie', 'tygodni'][getPolishForm(c)] },
      d: function (c) { return ['dzień', 'dnia', 'dni', 'dni'][getPolishForm(c)] },
      h: function (c) { return ['godzina', 'godziny', 'godziny', 'godzin'][getPolishForm(c)] },
      m: function (c) { return ['minuta', 'minuty', 'minuty', 'minut'][getPolishForm(c)] },
      s: function (c) { return ['sekunda', 'sekundy', 'sekundy', 'sekund'][getPolishForm(c)] },
      ms: function (c) { return ['milisekunda', 'milisekundy', 'milisekundy', 'milisekund'][getPolishForm(c)] },
      decimal: ','
    },
    pt: {
      y: function (c) { return 'ano' + (c === 1 ? '' : 's') },
      mo: function (c) { return c !== 1 ? 'meses' : 'mês' },
      w: function (c) { return 'semana' + (c === 1 ? '' : 's') },
      d: function (c) { return 'dia' + (c === 1 ? '' : 's') },
      h: function (c) { return 'hora' + (c === 1 ? '' : 's') },
      m: function (c) { return 'minuto' + (c === 1 ? '' : 's') },
      s: function (c) { return 'segundo' + (c === 1 ? '' : 's') },
      ms: function (c) { return 'milissegundo' + (c === 1 ? '' : 's') },
      decimal: ','
    },
    ru: {
      y: function (c) { return ['лет', 'год', 'года'][getSlavicForm(c)] },
      mo: function (c) { return ['месяцев', 'месяц', 'месяца'][getSlavicForm(c)] },
      w: function (c) { return ['недель', 'неделя', 'недели'][getSlavicForm(c)] },
      d: function (c) { return ['дней', 'день', 'дня'][getSlavicForm(c)] },
      h: function (c) { return ['часов', 'час', 'часа'][getSlavicForm(c)] },
      m: function (c) { return ['минут', 'минута', 'минуты'][getSlavicForm(c)] },
      s: function (c) { return ['секунд', 'секунда', 'секунды'][getSlavicForm(c)] },
      ms: function (c) { return ['миллисекунд', 'миллисекунда', 'миллисекунды'][getSlavicForm(c)] },
      decimal: ','
    },
    uk: {
      y: function (c) { return ['років', 'рік', 'роки'][getSlavicForm(c)] },
      mo: function (c) { return ['місяців', 'місяць', 'місяці'][getSlavicForm(c)] },
      w: function (c) { return ['неділь', 'неділя', 'неділі'][getSlavicForm(c)] },
      d: function (c) { return ['днів', 'день', 'дні'][getSlavicForm(c)] },
      h: function (c) { return ['годин', 'година', 'години'][getSlavicForm(c)] },
      m: function (c) { return ['хвилин', 'хвилина', 'хвилини'][getSlavicForm(c)] },
      s: function (c) { return ['секунд', 'секунда', 'секунди'][getSlavicForm(c)] },
      ms: function (c) { return ['мілісекунд', 'мілісекунда', 'мілісекунди'][getSlavicForm(c)] },
      decimal: ','
    },
    sv: {
      y: 'år',
      mo: function (c) { return 'månad' + (c === 1 ? '' : 'er') },
      w: function (c) { return 'veck' + (c === 1 ? 'a' : 'or') },
      d: function (c) { return 'dag' + (c === 1 ? '' : 'ar') },
      h: function (c) { return 'timm' + (c === 1 ? 'e' : 'ar') },
      m: function (c) { return 'minut' + (c === 1 ? '' : 'er') },
      s: function (c) { return 'sekund' + (c === 1 ? '' : 'er') },
      ms: function (c) { return 'millisekund' + (c === 1 ? '' : 'er') },
      decimal: ','
    },
    tr: {
      y: 'yıl',
      mo: 'ay',
      w: 'hafta',
      d: 'gün',
      h: 'saat',
      m: 'dakika',
      s: 'saniye',
      ms: 'milisaniye',
      decimal: ','
    },
    vi: {
      y: 'năm',
      mo: 'tháng',
      w: 'tuần',
      d: 'ngày',
      h: 'giờ',
      m: 'phút',
      s: 'giây',
      ms: 'mili giây',
      decimal: ','
    },
    zh_CN: {
      y: '年',
      mo: '个月',
      w: '周',
      d: '天',
      h: '小时',
      m: '分钟',
      s: '秒',
      ms: '毫秒',
      decimal: '.'
    },
    zh_TW: {
      y: '年',
      mo: '個月',
      w: '周',
      d: '天',
      h: '小時',
      m: '分鐘',
      s: '秒',
      ms: '毫秒',
      decimal: '.'
    }
  }

  // You can create a humanizer, which returns a function with default
  // parameters.
  function humanizer (passedOptions) {
    var result = function humanizer (ms, humanizerOptions) {
      var options = extend({}, result, humanizerOptions || {})
      return doHumanization(ms, options)
    }

    return extend(result, {
      language: 'en',
      delimiter: ', ',
      spacer: ' ',
      conjunction: '',
      serialComma: true,
      units: ['y', 'mo', 'w', 'd', 'h', 'm', 's'],
      languages: {},
      round: false,
      unitMeasures: {
        y: 31557600000,
        mo: 2629800000,
        w: 604800000,
        d: 86400000,
        h: 3600000,
        m: 60000,
        s: 1000,
        ms: 1
      }
    }, passedOptions)
  }

  // The main function is just a wrapper around a default humanizer.
  var humanizeDuration = humanizer({})

  // doHumanization does the bulk of the work.
  function doHumanization (ms, options) {
    var i, len, piece

    // Make sure we have a positive number.
    // Has the nice sideffect of turning Number objects into primitives.
    ms = Math.abs(ms)

    var dictionary = options.languages[options.language] || languages[options.language]
    if (!dictionary) {
      throw new Error('No language ' + dictionary + '.')
    }

    var pieces = []

    // Start at the top and keep removing units, bit by bit.
    var unitName, unitMS, unitCount
    for (i = 0, len = options.units.length; i < len; i++) {
      unitName = options.units[i]
      unitMS = options.unitMeasures[unitName]

      // What's the number of full units we can fit?
      if (i + 1 === len) {
        unitCount = ms / unitMS
      } else {
        unitCount = Math.floor(ms / unitMS)
      }

      // Add the string.
      pieces.push({
        unitCount: unitCount,
        unitName: unitName
      })

      // Remove what we just figured out.
      ms -= unitCount * unitMS
    }

    var firstOccupiedUnitIndex = 0
    for (i = 0; i < pieces.length; i++) {
      if (pieces[i].unitCount) {
        firstOccupiedUnitIndex = i
        break
      }
    }

    if (options.round) {
      var ratioToLargerUnit, previousPiece
      for (i = pieces.length - 1; i >= 0; i--) {
        piece = pieces[i]
        piece.unitCount = Math.round(piece.unitCount)

        if (i === 0) { break }

        previousPiece = pieces[i - 1]

        ratioToLargerUnit = options.unitMeasures[previousPiece.unitName] / options.unitMeasures[piece.unitName]
        if ((piece.unitCount % ratioToLargerUnit) === 0 || (options.largest && ((options.largest - 1) < (i - firstOccupiedUnitIndex)))) {
          previousPiece.unitCount += piece.unitCount / ratioToLargerUnit
          piece.unitCount = 0
        }
      }
    }

    var result = []
    for (i = 0, pieces.length; i < len; i++) {
      piece = pieces[i]
      if (piece.unitCount) {
        result.push(render(piece.unitCount, piece.unitName, dictionary, options))
      }

      if (result.length === options.largest) { break }
    }

    if (result.length) {
      if (!options.conjunction || result.length === 1) {
        return result.join(options.delimiter)
      } else if (result.length === 2) {
        return result.join(options.conjunction)
      } else if (result.length > 2) {
        return result.slice(0, -1).join(options.delimiter) + (options.serialComma ? ',' : '') + options.conjunction + result.slice(-1)
      }
    } else {
      return render(0, options.units[options.units.length - 1], dictionary, options)
    }
  }

  function render (count, type, dictionary, options) {
    var decimal
    if (options.decimal === void 0) {
      decimal = dictionary.decimal
    } else {
      decimal = options.decimal
    }

    var countStr = count.toString().replace('.', decimal)

    var dictionaryValue = dictionary[type]
    var word
    if (typeof dictionaryValue === 'function') {
      word = dictionaryValue(count)
    } else {
      word = dictionaryValue
    }

    return countStr + options.spacer + word
  }

  function extend (destination) {
    var source
    for (var i = 1; i < arguments.length; i++) {
      source = arguments[i]
      for (var prop in source) {
        if (source.hasOwnProperty(prop)) {
          destination[prop] = source[prop]
        }
      }
    }
    return destination
  }

  // Internal helper function for Czech language.
  function getCzechForm (c) {
    if (c === 1) {
      return 0
    } else if (Math.floor(c) !== c) {
      return 1
    } else if (c % 10 >= 2 && c % 10 <= 4 && c % 100 < 10) {
      return 2
    } else {
      return 3
    }
  }

  // Internal helper function for Polish language.
  function getPolishForm (c) {
    if (c === 1) {
      return 0
    } else if (Math.floor(c) !== c) {
      return 1
    } else if (c % 10 >= 2 && c % 10 <= 4 && !(c % 100 > 10 && c % 100 < 20)) {
      return 2
    } else {
      return 3
    }
  }

  // Internal helper function for Russian and Ukranian languages.
  function getSlavicForm (c) {
    if (Math.floor(c) !== c) {
      return 2
    } else if ((c % 100 >= 5 && c % 100 <= 20) || (c % 10 >= 5 && c % 10 <= 9) || c % 10 === 0) {
      return 0
    } else if (c % 10 === 1) {
      return 1
    } else if (c > 1) {
      return 2
    } else {
      return 0
    }
  }

  // Internal helper function for Lithuanian language.
  function getLithuanianForm (c) {
    if (c === 1 || (c % 10 === 1 && c % 100 > 20)) {
      return 0
    } else if (Math.floor(c) !== c || (c % 10 >= 2 && c % 100 > 20) || (c % 10 >= 2 && c % 100 < 10)) {
      return 1
    } else {
      return 2
    }
  }

  humanizeDuration.getSupportedLanguages = function getSupportedLanguages () {
    var result = []
    for (var language in languages) {
      if (languages.hasOwnProperty(language)) {
        result.push(language)
      }
    }
    return result
  }

  humanizeDuration.humanizer = humanizer

  if (typeof define === 'function' && define.amd) {
    define(function () {
      return humanizeDuration
    })
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = humanizeDuration
  } else {
    this.humanizeDuration = humanizeDuration
  }
})();  // eslint-disable-line semi

},{}],32:[function(_dereq_,module,exports){
var split = _dereq_('browser-split')
var ClassList = _dereq_('class-list')

var w = typeof window === 'undefined' ? _dereq_('html-element') : window
var document = w.document
var Text = w.Text

function context () {

  var cleanupFuncs = []

  function h() {
    var args = [].slice.call(arguments), e = null
    function item (l) {
      var r
      function parseClass (string) {
        // Our minimal parser doesn’t understand escaping CSS special
        // characters like `#`. Don’t use them. More reading:
        // https://mathiasbynens.be/notes/css-escapes .

        var m = split(string, /([\.#]?[^\s#.]+)/)
        if(/^\.|#/.test(m[1]))
          e = document.createElement('div')
        forEach(m, function (v) {
          var s = v.substring(1,v.length)
          if(!v) return
          if(!e)
            e = document.createElement(v)
          else if (v[0] === '.')
            ClassList(e).add(s)
          else if (v[0] === '#')
            e.setAttribute('id', s)
        })
      }

      if(l == null)
        ;
      else if('string' === typeof l) {
        if(!e)
          parseClass(l)
        else
          e.appendChild(r = document.createTextNode(l))
      }
      else if('number' === typeof l
        || 'boolean' === typeof l
        || l instanceof Date
        || l instanceof RegExp ) {
          e.appendChild(r = document.createTextNode(l.toString()))
      }
      //there might be a better way to handle this...
      else if (isArray(l))
        forEach(l, item)
      else if(isNode(l))
        e.appendChild(r = l)
      else if(l instanceof Text)
        e.appendChild(r = l)
      else if ('object' === typeof l) {
        for (var k in l) {
          if('function' === typeof l[k]) {
            if(/^on\w+/.test(k)) {
              (function (k, l) { // capture k, l in the closure
                if (e.addEventListener){
                  e.addEventListener(k.substring(2), l[k], false)
                  cleanupFuncs.push(function(){
                    e.removeEventListener(k.substring(2), l[k], false)
                  })
                }else{
                  e.attachEvent(k, l[k])
                  cleanupFuncs.push(function(){
                    e.detachEvent(k, l[k])
                  })
                }
              })(k, l)
            } else {
              // observable
              e[k] = l[k]()
              cleanupFuncs.push(l[k](function (v) {
                e[k] = v
              }))
            }
          }
          else if(k === 'style') {
            if('string' === typeof l[k]) {
              e.style.cssText = l[k]
            }else{
              for (var s in l[k]) (function(s, v) {
                if('function' === typeof v) {
                  // observable
                  e.style.setProperty(s, v())
                  cleanupFuncs.push(v(function (val) {
                    e.style.setProperty(s, val)
                  }))
                } else
                  var match = l[k][s].match(/(.*)\W+!important\W*$/);
                  if (match) {
                    e.style.setProperty(s, match[1], 'important')
                  } else {
                    e.style.setProperty(s, l[k][s])
                  }
              })(s, l[k][s])
            }
          } else if(k === 'attrs') {
            for (var v in l[k]) {
              e.setAttribute(v, l[k][v])
            }
          }
          else if (k.substr(0, 5) === "data-") {
            e.setAttribute(k, l[k])
          } else {
            e[k] = l[k]
          }
        }
      } else if ('function' === typeof l) {
        //assume it's an observable!
        var v = l()
        e.appendChild(r = isNode(v) ? v : document.createTextNode(v))

        cleanupFuncs.push(l(function (v) {
          if(isNode(v) && r.parentElement)
            r.parentElement.replaceChild(v, r), r = v
          else
            r.textContent = v
        }))
      }

      return r
    }
    while(args.length)
      item(args.shift())

    return e
  }

  h.cleanup = function () {
    for (var i = 0; i < cleanupFuncs.length; i++){
      cleanupFuncs[i]()
    }
    cleanupFuncs.length = 0
  }

  return h
}

var h = module.exports = context()
h.context = context

function isNode (el) {
  return el && el.nodeName && el.nodeType
}

function forEach (arr, fn) {
  if (arr.forEach) return arr.forEach(fn)
  for (var i = 0; i < arr.length; i++) fn(arr[i], i)
}

function isArray (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]'
}



},{"browser-split":6,"class-list":9,"html-element":5}],33:[function(_dereq_,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],34:[function(_dereq_,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],35:[function(_dereq_,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],36:[function(_dereq_,module,exports){
var containers = []; // will store container HTMLElement references
var styleElements = []; // will store {prepend: HTMLElement, append: HTMLElement}

var usage = 'insert-css: You need to provide a CSS string. Usage: insertCss(cssString[, options]).';

function insertCss(css, options) {
    options = options || {};

    if (css === undefined) {
        throw new Error(usage);
    }

    var position = options.prepend === true ? 'prepend' : 'append';
    var container = options.container !== undefined ? options.container : document.querySelector('head');
    var containerId = containers.indexOf(container);

    // first time we see this container, create the necessary entries
    if (containerId === -1) {
        containerId = containers.push(container) - 1;
        styleElements[containerId] = {};
    }

    // try to get the correponding container + position styleElement, create it otherwise
    var styleElement;

    if (styleElements[containerId] !== undefined && styleElements[containerId][position] !== undefined) {
        styleElement = styleElements[containerId][position];
    } else {
        styleElement = styleElements[containerId][position] = createStyleElement();

        if (position === 'prepend') {
            container.insertBefore(styleElement, container.childNodes[0]);
        } else {
            container.appendChild(styleElement);
        }
    }

    // strip potential UTF-8 BOM if css was read from a file
    if (css.charCodeAt(0) === 0xFEFF) { css = css.substr(1, css.length); }

    // actually add the stylesheet
    if (styleElement.styleSheet) {
        styleElement.styleSheet.cssText += css
    } else {
        styleElement.textContent += css;
    }

    return styleElement;
};

function createStyleElement() {
    var styleElement = document.createElement('style');
    styleElement.setAttribute('type', 'text/css');
    return styleElement;
}

module.exports = insertCss;
module.exports.insertCss = insertCss;

},{}],37:[function(_dereq_,module,exports){
/*! npm.im/intervalometer */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function intervalometer(cb, request, cancel, requestParameter) {
	var requestId;
	var previousLoopTime;
	function loop(now) {
		// must be requested before cb() because that might call .stop()
		requestId = request(loop, requestParameter);

		// called with "ms since last call". 0 on start()
		cb(now - (previousLoopTime || now));

		previousLoopTime = now;
	}
	return {
		start: function start() {
			if (!requestId) { // prevent double starts
				loop(0);
			}
		},
		stop: function stop() {
			cancel(requestId);
			requestId = null;
			previousLoopTime = 0;
		}
	};
}

function frameIntervalometer(cb) {
	return intervalometer(cb, requestAnimationFrame, cancelAnimationFrame);
}

function timerIntervalometer(cb, delay) {
	return intervalometer(cb, setTimeout, clearTimeout, delay);
}

exports.intervalometer = intervalometer;
exports.frameIntervalometer = frameIntervalometer;
exports.timerIntervalometer = timerIntervalometer;
},{}],38:[function(_dereq_,module,exports){
/*! npm.im/iphone-inline-video 2.2.2 */
'use strict';

var intervalometer = _dereq_('intervalometer');

function preventEvent(element, eventName, test) {
	function handler(e) {
		if (!test || test(element, eventName)) {
			e.stopImmediatePropagation();
			// // console.log(eventName, 'prevented on', element);
		}
	}
	element.addEventListener(eventName, handler);

	// Return handler to allow to disable the prevention. Usage:
	// const preventionHandler = preventEvent(el, 'click');
	// el.removeEventHandler('click', preventionHandler);
	return handler;
}

function proxyProperty(object, propertyName, sourceObject, copyFirst) {
	function get() {
		return sourceObject[propertyName];
	}
	function set(value) {
		sourceObject[propertyName] = value;
	}

	if (copyFirst) {
		set(object[propertyName]);
	}

	Object.defineProperty(object, propertyName, {get: get, set: set});
}

function proxyEvent(object, eventName, sourceObject) {
	sourceObject.addEventListener(eventName, function () { return object.dispatchEvent(new Event(eventName)); });
}

function dispatchEventAsync(element, type) {
	Promise.resolve().then(function () {
		element.dispatchEvent(new Event(type));
	});
}

var iOS8or9 = typeof document === 'object' && 'object-fit' in document.head.style && !matchMedia('(-webkit-video-playable-inline)').matches;

var IIV = 'bfred-it:iphone-inline-video';
var IIVEvent = 'bfred-it:iphone-inline-video:event';
var IIVPlay = 'bfred-it:iphone-inline-video:nativeplay';
var IIVPause = 'bfred-it:iphone-inline-video:nativepause';

/**
 * UTILS
 */

function getAudioFromVideo(video) {
	var audio = new Audio();
	proxyEvent(video, 'play', audio);
	proxyEvent(video, 'playing', audio);
	proxyEvent(video, 'pause', audio);
	audio.crossOrigin = video.crossOrigin;

	// 'data:' causes audio.networkState > 0
	// which then allows to keep <audio> in a resumable playing state
	// i.e. once you set a real src it will keep playing if it was if .play() was called
	audio.src = video.src || video.currentSrc || 'data:';

	// // if (audio.src === 'data:') {
	//   TODO: wait for video to be selected
	// // }
	return audio;
}

var lastRequests = [];
var requestIndex = 0;
var lastTimeupdateEvent;

function setTime(video, time, rememberOnly) {
	// Allow one timeupdate event every 200+ ms
	if ((lastTimeupdateEvent || 0) + 200 < Date.now()) {
		video[IIVEvent] = true;
		lastTimeupdateEvent = Date.now();
	}
	if (!rememberOnly) {
		video.currentTime = time;
	}
	lastRequests[++requestIndex % 3] = time * 100 | 0 / 100;
}

function isPlayerEnded(player) {
	return player.driver.currentTime >= player.video.duration;
}

function update(timeDiff) {
	var player = this;
	// // console.log('update', player.video.readyState, player.video.networkState, player.driver.readyState, player.driver.networkState, player.driver.paused);
	if (player.video.readyState >= player.video.HAVE_FUTURE_DATA) {
		if (!player.hasAudio) {
			player.driver.currentTime = player.video.currentTime + ((timeDiff * player.video.playbackRate) / 1000);
			if (player.video.loop && isPlayerEnded(player)) {
				player.driver.currentTime = 0;
			}
		}
		setTime(player.video, player.driver.currentTime);
	} else if (player.video.networkState === player.video.NETWORK_IDLE && player.video.buffered.length === 0) {
		// This should happen when the source is available but:
		// - it's potentially playing (.paused === false)
		// - it's not ready to play
		// - it's not loading
		// If it hasAudio, that will be loaded in the 'emptied' handler below
		player.video.load();
		// // console.log('Will load');
	}

	// // console.assert(player.video.currentTime === player.driver.currentTime, 'Video not updating!');

	if (player.video.ended) {
		delete player.video[IIVEvent]; // Allow timeupdate event
		player.video.pause(true);
	}
}

/**
 * METHODS
 */

function play() {
	// // console.log('play');
	var video = this;
	var player = video[IIV];

	// If it's fullscreen, use the native player
	if (video.webkitDisplayingFullscreen) {
		video[IIVPlay]();
		return;
	}

	if (player.driver.src !== 'data:' && player.driver.src !== video.src) {
		// // console.log('src changed on play', video.src);
		setTime(video, 0, true);
		player.driver.src = video.src;
	}

	if (!video.paused) {
		return;
	}
	player.paused = false;

	if (video.buffered.length === 0) {
		// .load() causes the emptied event
		// the alternative is .play()+.pause() but that triggers play/pause events, even worse
		// possibly the alternative is preventing this event only once
		video.load();
	}

	player.driver.play();
	player.updater.start();

	if (!player.hasAudio) {
		dispatchEventAsync(video, 'play');
		if (player.video.readyState >= player.video.HAVE_ENOUGH_DATA) {
			// // console.log('onplay');
			dispatchEventAsync(video, 'playing');
		}
	}
}
function pause(forceEvents) {
	// // console.log('pause');
	var video = this;
	var player = video[IIV];

	player.driver.pause();
	player.updater.stop();

	// If it's fullscreen, the developer the native player.pause()
	// This is at the end of pause() because it also
	// needs to make sure that the simulation is paused
	if (video.webkitDisplayingFullscreen) {
		video[IIVPause]();
	}

	if (player.paused && !forceEvents) {
		return;
	}

	player.paused = true;
	if (!player.hasAudio) {
		dispatchEventAsync(video, 'pause');
	}

	// Handle the 'ended' event only if it's not fullscreen
	if (video.ended && !video.webkitDisplayingFullscreen) {
		video[IIVEvent] = true;
		dispatchEventAsync(video, 'ended');
	}
}

/**
 * SETUP
 */

function addPlayer(video, hasAudio) {
	var player = {};
	video[IIV] = player;
	player.paused = true; // Track whether 'pause' events have been fired
	player.hasAudio = hasAudio;
	player.video = video;
	player.updater = intervalometer.frameIntervalometer(update.bind(player));

	if (hasAudio) {
		player.driver = getAudioFromVideo(video);
	} else {
		video.addEventListener('canplay', function () {
			if (!video.paused) {
				// // console.log('oncanplay');
				dispatchEventAsync(video, 'playing');
			}
		});
		player.driver = {
			src: video.src || video.currentSrc || 'data:',
			muted: true,
			paused: true,
			pause: function () {
				player.driver.paused = true;
			},
			play: function () {
				player.driver.paused = false;
				// Media automatically goes to 0 if .play() is called when it's done
				if (isPlayerEnded(player)) {
					setTime(video, 0);
				}
			},
			get ended() {
				return isPlayerEnded(player);
			}
		};
	}

	// .load() causes the emptied event
	video.addEventListener('emptied', function () {
		// // console.log('driver src is', player.driver.src);
		var wasEmpty = !player.driver.src || player.driver.src === 'data:';
		if (player.driver.src && player.driver.src !== video.src) {
			// // console.log('src changed to', video.src);
			setTime(video, 0, true);
			player.driver.src = video.src;
			// Playing videos will only keep playing if no src was present when .play()’ed
			if (wasEmpty || (!hasAudio && video.autoplay)) {
				player.driver.play();
			} else {
				player.updater.stop();
			}
		}
	}, false);

	// Stop programmatic player when OS takes over
	video.addEventListener('webkitbeginfullscreen', function () {
		if (!video.paused) {
			// Make sure that the <audio> and the syncer/updater are stopped
			video.pause();

			// Play video natively
			video[IIVPlay]();
		} else if (hasAudio && player.driver.buffered.length === 0) {
			// If the first play is native,
			// the <audio> needs to be buffered manually
			// so when the fullscreen ends, it can be set to the same current time
			player.driver.load();
		}
	});
	if (hasAudio) {
		video.addEventListener('webkitendfullscreen', function () {
			// Sync audio to new video position
			player.driver.currentTime = video.currentTime;
			// // console.assert(player.driver.currentTime === video.currentTime, 'Audio not synced');
		});

		// Allow seeking
		video.addEventListener('seeking', function () {
			if (lastRequests.indexOf(video.currentTime * 100 | 0 / 100) < 0) {
				// // console.log('User-requested seeking');
				player.driver.currentTime = video.currentTime;
			}
		});
	}
}

function preventWithPropOrFullscreen(el) {
	var isAllowed = el[IIVEvent];
	delete el[IIVEvent];
	return !el.webkitDisplayingFullscreen && !isAllowed;
}

function overloadAPI(video) {
	var player = video[IIV];
	video[IIVPlay] = video.play;
	video[IIVPause] = video.pause;
	video.play = play;
	video.pause = pause;
	proxyProperty(video, 'paused', player.driver);
	proxyProperty(video, 'muted', player.driver, true);
	proxyProperty(video, 'playbackRate', player.driver, true);
	proxyProperty(video, 'ended', player.driver);
	proxyProperty(video, 'loop', player.driver, true);

	// IIV works by seeking 60 times per second.
	// These events are now useless.
	preventEvent(video, 'seeking', function (el) { return !el.webkitDisplayingFullscreen; });
	preventEvent(video, 'seeked', function (el) { return !el.webkitDisplayingFullscreen; });

	// Limit timeupdate events
	preventEvent(video, 'timeupdate', preventWithPropOrFullscreen);

	// Prevent occasional native ended events
	preventEvent(video, 'ended', preventWithPropOrFullscreen);
}

function enableInlineVideo(video, opts) {
	if ( opts === void 0 ) opts = {};

	// Stop if already enabled
	if (video[IIV]) {
		return;
	}

	// Allow the user to skip detection
	if (!opts.everywhere) {
		// Only iOS8 and 9 are supported
		if (!iOS8or9) {
			return;
		}

		// Stop if it's not an allowed device
		if (!(opts.iPad || opts.ipad ? /iPhone|iPod|iPad/ : /iPhone|iPod/).test(navigator.userAgent)) {
			return;
		}
	}

	// Try to pause
	video.pause();

	// Prevent autoplay.
	// An non-started autoplaying video can't be .pause()'d
	var willAutoplay = video.autoplay;
	video.autoplay = false;

	addPlayer(video, !video.muted);
	overloadAPI(video);
	video.classList.add('IIV');

	// Autoplay
	if (video.muted && willAutoplay) {
		video.play();
		video.addEventListener('playing', function restoreAutoplay() {
			video.autoplay = true;
			video.removeEventListener('playing', restoreAutoplay);
		});
	}

	if (!/iPhone|iPod|iPad/.test(navigator.platform)) {
		console.warn('iphone-inline-video is not guaranteed to work in emulated environments');
	}
}

module.exports = enableInlineVideo;

},{"intervalometer":37}],39:[function(_dereq_,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],40:[function(_dereq_,module,exports){
'use strict';
var numberIsNan = _dereq_('number-is-nan');

module.exports = Number.isFinite || function (val) {
	return !(typeof val !== 'number' || numberIsNan(val) || val === Infinity || val === -Infinity);
};

},{"number-is-nan":46}],41:[function(_dereq_,module,exports){
module.exports = isPowerOfTwo

function isPowerOfTwo(n) {
  return n !== 0 && (n & (n - 1)) === 0
}
},{}],42:[function(_dereq_,module,exports){
module.exports      = isTypedArray
isTypedArray.strict = isStrictTypedArray
isTypedArray.loose  = isLooseTypedArray

var toString = Object.prototype.toString
var names = {
    '[object Int8Array]': true
  , '[object Int16Array]': true
  , '[object Int32Array]': true
  , '[object Uint8Array]': true
  , '[object Uint8ClampedArray]': true
  , '[object Uint16Array]': true
  , '[object Uint32Array]': true
  , '[object Float32Array]': true
  , '[object Float64Array]': true
}

function isTypedArray(arr) {
  return (
       isStrictTypedArray(arr)
    || isLooseTypedArray(arr)
  )
}

function isStrictTypedArray(arr) {
  return (
       arr instanceof Int8Array
    || arr instanceof Int16Array
    || arr instanceof Int32Array
    || arr instanceof Uint8Array
    || arr instanceof Uint8ClampedArray
    || arr instanceof Uint16Array
    || arr instanceof Uint32Array
    || arr instanceof Float32Array
    || arr instanceof Float64Array
  )
}

function isLooseTypedArray(arr) {
  return names[toString.call(arr)]
}

},{}],43:[function(_dereq_,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],44:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

"use strict";

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  if (!(obj instanceof Object && !Array.isArray(obj))) {
    throw new Error('keyMirror(...): Argument must be an object.');
  }
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{}],45:[function(_dereq_,module,exports){
'use strict';
var numberIsFinite = _dereq_('is-finite');

module.exports = Number.isInteger || function (x) {
	return numberIsFinite(x) && Math.floor(x) === x;
};

},{"is-finite":40}],46:[function(_dereq_,module,exports){
'use strict';
module.exports = Number.isNaN || function (x) {
	return x !== x;
};

},{}],47:[function(_dereq_,module,exports){
var wrappy = _dereq_('wrappy')
module.exports = wrappy(once)
module.exports.strict = wrappy(onceStrict)

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })

  Object.defineProperty(Function.prototype, 'onceStrict', {
    value: function () {
      return onceStrict(this)
    },
    configurable: true
  })
})

function once (fn) {
  var f = function () {
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  f.called = false
  return f
}

function onceStrict (fn) {
  var f = function () {
    if (f.called)
      throw new Error(f.onceError)
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  var name = fn.name || 'Function wrapped with `once`'
  f.onceError = name + " shouldn't be called more than once"
  f.called = false
  return f
}

},{"wrappy":82}],48:[function(_dereq_,module,exports){
(function (process){
// Generated by CoffeeScript 1.12.2
(function() {
  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - nodeLoadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    moduleLoadTime = getNanoSeconds();
    upTime = process.uptime() * 1e9;
    nodeLoadTime = moduleLoadTime - upTime;
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);



}).call(this,_dereq_('_process'))

},{"_process":50}],49:[function(_dereq_,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,_dereq_('_process'))

},{"_process":50}],50:[function(_dereq_,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],51:[function(_dereq_,module,exports){
(function (global){
var now = _dereq_('performance-now')
  , root = typeof window === 'undefined' ? global : window
  , vendors = ['moz', 'webkit']
  , suffix = 'AnimationFrame'
  , raf = root['request' + suffix]
  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]

for(var i = 0; !raf && i < vendors.length; i++) {
  raf = root[vendors[i] + 'Request' + suffix]
  caf = root[vendors[i] + 'Cancel' + suffix]
      || root[vendors[i] + 'CancelRequest' + suffix]
}

// Some versions of FF have rAF but not cAF
if(!raf || !caf) {
  var last = 0
    , id = 0
    , queue = []
    , frameDuration = 1000 / 60

  raf = function(callback) {
    if(queue.length === 0) {
      var _now = now()
        , next = Math.max(0, frameDuration - (_now - last))
      last = next + _now
      setTimeout(function() {
        var cp = queue.slice(0)
        // Clear queue here to prevent
        // callbacks from appending listeners
        // to the current frame's queue
        queue.length = 0
        for(var i = 0; i < cp.length; i++) {
          if(!cp[i].cancelled) {
            try{
              cp[i].callback(last)
            } catch(e) {
              setTimeout(function() { throw e }, 0)
            }
          }
        }
      }, Math.round(next))
    }
    queue.push({
      handle: ++id,
      callback: callback,
      cancelled: false
    })
    return id
  }

  caf = function(handle) {
    for(var i = 0; i < queue.length; i++) {
      if(queue[i].handle === handle) {
        queue[i].cancelled = true
      }
    }
  }
}

module.exports = function(fn) {
  // Wrap in a new function to prevent
  // `cancel` potentially being assigned
  // to the native rAF function
  return raf.call(root, fn)
}
module.exports.cancel = function() {
  caf.apply(root, arguments)
}
module.exports.polyfill = function() {
  root.requestAnimationFrame = raf
  root.cancelAnimationFrame = caf
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"performance-now":48}],52:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var processNextTick = _dereq_('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = _dereq_('core-util-is');
util.inherits = _dereq_('inherits');
/*</replacement>*/

var Readable = _dereq_('./_stream_readable');
var Writable = _dereq_('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":54,"./_stream_writable":56,"core-util-is":13,"inherits":35,"process-nextick-args":49}],53:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = _dereq_('./_stream_transform');

/*<replacement>*/
var util = _dereq_('core-util-is');
util.inherits = _dereq_('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":55,"core-util-is":13,"inherits":35}],54:[function(_dereq_,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var processNextTick = _dereq_('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = _dereq_('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = _dereq_('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = _dereq_('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = _dereq_('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = _dereq_('core-util-is');
util.inherits = _dereq_('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = _dereq_('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = _dereq_('./internal/streams/BufferList');
var destroyImpl = _dereq_('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || _dereq_('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = _dereq_('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || _dereq_('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = _dereq_('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./_stream_duplex":52,"./internal/streams/BufferList":57,"./internal/streams/destroy":58,"./internal/streams/stream":59,"_process":50,"core-util-is":13,"events":23,"inherits":35,"isarray":43,"process-nextick-args":49,"safe-buffer":65,"string_decoder/":60,"util":5}],55:[function(_dereq_,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = _dereq_('./_stream_duplex');

/*<replacement>*/
var util = _dereq_('core-util-is');
util.inherits = _dereq_('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":52,"core-util-is":13,"inherits":35}],56:[function(_dereq_,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var processNextTick = _dereq_('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = _dereq_('core-util-is');
util.inherits = _dereq_('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: _dereq_('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = _dereq_('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = _dereq_('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = _dereq_('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || _dereq_('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || _dereq_('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./_stream_duplex":52,"./internal/streams/destroy":58,"./internal/streams/stream":59,"_process":50,"core-util-is":13,"inherits":35,"process-nextick-args":49,"safe-buffer":65,"util-deprecate":75}],57:[function(_dereq_,module,exports){
'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = _dereq_('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();
},{"safe-buffer":65}],58:[function(_dereq_,module,exports){
'use strict';

/*<replacement>*/

var processNextTick = _dereq_('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":49}],59:[function(_dereq_,module,exports){
module.exports = _dereq_('events').EventEmitter;

},{"events":23}],60:[function(_dereq_,module,exports){
'use strict';

var Buffer = _dereq_('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":65}],61:[function(_dereq_,module,exports){
exports = module.exports = _dereq_('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = _dereq_('./lib/_stream_writable.js');
exports.Duplex = _dereq_('./lib/_stream_duplex.js');
exports.Transform = _dereq_('./lib/_stream_transform.js');
exports.PassThrough = _dereq_('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":52,"./lib/_stream_passthrough.js":53,"./lib/_stream_readable.js":54,"./lib/_stream_transform.js":55,"./lib/_stream_writable.js":56}],62:[function(_dereq_,module,exports){
'use strict';

var readystate = module.exports = _dereq_('./readystate')
  , win = (new Function('return this'))()
  , complete = 'complete'
  , root = true
  , doc = win.document
  , html = doc.documentElement;

(function wrapper() {
  //
  // Bail out early if the document is already fully loaded. This means that this
  // script is loaded after the onload event.
  //
  if (complete === doc.readyState) {
    return readystate.change(complete);
  }

  //
  // Use feature detection to see what kind of browser environment we're dealing
  // with. Old versions of Internet Explorer do not support the addEventListener
  // interface so we can also safely assume that we need to fall back to polling.
  //
  var modern = !!doc.addEventListener
    , prefix = modern ? '' : 'on'
    , on = modern ? 'addEventListener' : 'attachEvent'
    , off = modern ? 'removeEventListener' : 'detachEvent';

  if (!modern && 'function' === typeof html.doScroll) {
    try { root = !win.frameElement; }
    catch (e) {}

    if (root) (function polling() {
      try { html.doScroll('left'); }
      catch (e) { return setTimeout(polling, 50); }

      readystate.change('interactive');
    }());
  }

  /**
   * Handle the various of event listener calls.
   *
   * @param {Event} evt Simple DOM event.
   * @api private
   */
  function change(evt) {
    evt = evt || win.event;

    if ('readystatechange' === evt.type) {
      readystate.change(doc.readyState);
      if (complete !== doc.readyState) return;
    }

    if ('load' === evt.type) readystate.change('complete');
    else readystate.change('interactive');

    //
    // House keeping, remove our assigned event listeners.
    //
    (evt.type === 'load' ? win : doc)[off](evt.type, change, false);
  }

  //
  // Assign a shit load of event listeners so we can update our internal state.
  //
  doc[on](prefix +'DOMContentLoaded', change, false);
  doc[on](prefix +'readystatechange', change, false);
  win[on](prefix +'load', change, false);
} ());


},{"./readystate":63}],63:[function(_dereq_,module,exports){
'use strict';

/**
 * Generate a new prototype method which will the given function once the
 * desired state has been reached. The returned function accepts 2 arguments:
 *
 * - fn: The assigned function which needs to be called.
 * - context: Context/this value of the function we need to execute.
 *
 * @param {String} state The state we need to operate upon.
 * @returns {Function}
 * @api private
 */
function generate(state) {
  return function proxy(fn, context) {
    var rs = this;

    if (rs.is(state)) {
      setTimeout(function () {
        fn.call(context, rs.readyState);
      }, 0);
    } else {
      if (!rs._events[state]) rs._events[state] = [];
      rs._events[state].push({ fn: fn, context: context });
    }

    return rs;
  };
}

/**
 * RS (readyState) instance.
 *
 * @constructor
 * @api public
 */
function RS() {
  this.readyState = RS.UNKNOWN;
  this._events = {};
}

/**
 * The environment can be in different states. The following states are
 * generated:
 *
 * - ALL:         The I don't really give a fuck state.
 * - UNKNOWN:     We got an unknown readyState we should start listening for events.
 * - LOADING:     Environment is currently loading.
 * - INTERACTIVE: Environment is ready for modification.
 * - COMPLETE:    All resources have been loaded.
 *
 * Please note that the order of the `states` string/array is of vital
 * importance as it's used in the readyState check.
 *
 * @type {Number}
 * @private
 */
RS.states = 'ALL,UNKNOWN,LOADING,INTERACTIVE,COMPLETE'.split(',');

for (var s = 0, state; s < RS.states.length; s++) {
  state = RS.states[s];

  RS[state] = RS.prototype[state] = s;
  RS.prototype[state.toLowerCase()] = generate(state);
}

/**
 * A change in the environment has been detected so we need to change our
 * readyState and call assigned event listeners and those of the previous
 * states.
 *
 * @param {Number} state The new readyState that we detected.
 * @returns {RS}
 * @api private
 */
RS.prototype.change = function change(state) {
  state = this.clean(state, true);

  var j
    , name
    , i = 0
    , listener
    , rs = this
    , previously = rs.readyState;

  if (previously >= state) return rs;

  rs.readyState = state;

  for (; i < RS.states.length; i++) {
    if (i > state) break;
    name = RS.states[i];

    if (name in rs._events) {
      for (j = 0; j < rs._events[name].length; j++) {
        listener = rs._events[name][j];
        listener.fn.call(listener.context || rs, previously);
      }

      delete rs._events[name];
    }
  }

  return rs;
};

/**
 * Check if we're currently in a given readyState.
 *
 * @param {String|Number} state The required readyState.
 * @returns {Boolean} Indication if this state has been reached.
 * @api public
 */
RS.prototype.is = function is(state) {
  return this.readyState >= this.clean(state, true);
};

/**
 * Transform a state to a number or toUpperCase.
 *
 * @param {Mixed} state State to transform.
 * @param {Boolean} nr Change to number.
 * @returns {Mixed}
 * @api public
 */
RS.prototype.clean = function transform(state, nr) {
  var type = typeof state;

  if (nr) return 'number' !== type
  ? +RS[state.toUpperCase()] || 0
  : state;

  return ('number' === type ? RS.states[state] : state).toUpperCase();
};

/**
 * Removes all event listeners. Useful when you want to unload readystatechange
 * completely so that it won't react to any events anymore. See
 * https://github.com/unshiftio/readystate/issues/8
 *
 * @returns {Function} rs so that calls can be chained.
 * @api public
 */
RS.prototype.removeAllListeners = function removeAllListeners() {
  this._events = {};
  return this;
}

//
// Expose the module.
//
module.exports = new RS();

},{}],64:[function(_dereq_,module,exports){
/**
 * request-frame - requestAnimationFrame & cancelAnimationFrame polyfill for optimal cross-browser development.
 * @version v1.5.3
 * @license MIT
 * Copyright Julien Etienne 2015 All Rights Reserved.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.requestFrame = factory());
}(this, (function () { 'use strict';

/**
 * @param  {String} type - request | cancel | native.
 * @return {Function} Timing function.
 */
function requestFrame(type) {
    // The only vendor prefixes required.
    var vendors = ['moz', 'webkit'];

    // Disassembled timing function abbreviations.
    var aF = 'AnimationFrame';
    var rqAF = 'Request' + aF;

    // Checks for firefox 4 - 10 function pair mismatch.
    var mozRAF = window.mozRequestAnimationFrame;
    var mozCAF = window.mozCancelAnimationFrame;
    var hasMozMismatch = mozRAF && !mozCAF;

    // Final assigned functions.
    var assignedRequestAnimationFrame;
    var assignedCancelAnimationFrame;

    // Initial time of the timing lapse.
    var previousTime = 0;

    var requestFrameMain;

    // Date.now polyfill, mainly for legacy IE versions.
    if (!Date.now) {
        Date.now = function () {
            return new Date().getTime();
        };
    }

    /**
     * hasIOS6RequestAnimationFrameBug.
     * @See {@Link https://gist.github.com/julienetie/86ac394ec41f1271ff0a}
     * - for Commentary.
     * @Copyright 2015 - Julien Etienne. 
     * @License: MIT.
     */
    function hasIOS6RequestAnimationFrameBug() {
        var webkitRAF = window.webkitRequestAnimationFrame;
        var rAF = window.requestAnimationFrame;

        // CSS/ Device with max for iOS6 Devices.
        var hasMobileDeviceWidth = screen.width <= 768 ? true : false;

        // Only supports webkit prefixed requestAnimtionFrane.
        var requiresWebkitprefix = !(webkitRAF && rAF);

        // iOS6 webkit browsers don't support performance now.
        var hasNoNavigationTiming = window.performance ? false : true;

        var iOS6Notice = 'setTimeout is being used as a substitiue for \n            requestAnimationFrame due to a bug within iOS 6 builds';

        var hasIOS6Bug = requiresWebkitprefix && hasMobileDeviceWidth && hasNoNavigationTiming;

        var bugCheckresults = function bugCheckresults(timingFnA, timingFnB, notice) {
            if (timingFnA || timingFnB) {
                console.warn(notice);
                return true;
            } else {
                return false;
            }
        };

        var displayResults = function displayResults(hasBug, hasBugNotice, webkitFn, nativeFn) {
            if (hasBug) {
                return bugCheckresults(webkitFn, nativeFn, hasBugNotice);
            } else {
                return false;
            }
        };

        return displayResults(hasIOS6Bug, iOS6Notice, webkitRAF, rAF);
    }

    /**
     * Native clearTimeout function.
     * @return {Function}
     */
    function clearTimeoutWithId(id) {
        clearTimeout(id);
    }

    /**
     * Based on a polyfill by Erik, introduced by Paul Irish & 
     * further improved by Darius Bacon.
     * @see  {@link http://www.paulirish.com/2011/
     * requestanimationframe-for-smart-animating}
     * @see  {@link https://github.com/darius/requestAnimationFrame/blob/
     * master/requestAnimationFrame.js}
     * @callback {Number} Timestamp.
     * @return {Function} setTimeout Function.
     */
    function setTimeoutWithTimestamp(callback) {
        var immediateTime = Date.now();
        var lapsedTime = Math.max(previousTime + 16, immediateTime);
        return setTimeout(function () {
            callback(previousTime = lapsedTime);
        }, lapsedTime - immediateTime);
    }

    /**
     * Queries the native function, prefixed function 
     * or use the setTimeoutWithTimestamp function.
     * @return {Function}
     */
    function queryRequestAnimationFrame() {
        if (Array.prototype.filter) {
            assignedRequestAnimationFrame = window['request' + aF] || window[vendors.filter(function (vendor) {
                if (window[vendor + rqAF] !== undefined) return vendor;
            }) + rqAF] || setTimeoutWithTimestamp;
        } else {
            return setTimeoutWithTimestamp;
        }
        if (!hasIOS6RequestAnimationFrameBug()) {
            return assignedRequestAnimationFrame;
        } else {
            return setTimeoutWithTimestamp;
        }
    }

    /**
     * Queries the native function, prefixed function 
     * or use the clearTimeoutWithId function.
     * @return {Function}
     */
    function queryCancelAnimationFrame() {
        var cancellationNames = [];
        if (Array.prototype.map) {
            vendors.map(function (vendor) {
                return ['Cancel', 'CancelRequest'].map(function (cancellationNamePrefix) {
                    cancellationNames.push(vendor + cancellationNamePrefix + aF);
                });
            });
        } else {
            return clearTimeoutWithId;
        }

        /**
         * Checks for the prefixed cancelAnimationFrame implementation.
         * @param  {Array} prefixedNames - An array of the prefixed names. 
         * @param  {Number} i - Iteration start point.
         * @return {Function} prefixed cancelAnimationFrame function.
         */
        function prefixedCancelAnimationFrame(prefixedNames, i) {
            var cancellationFunction = void 0;
            for (; i < prefixedNames.length; i++) {
                if (window[prefixedNames[i]]) {
                    cancellationFunction = window[prefixedNames[i]];
                    break;
                }
            }
            return cancellationFunction;
        }

        // Use truthly function
        assignedCancelAnimationFrame = window['cancel' + aF] || prefixedCancelAnimationFrame(cancellationNames, 0) || clearTimeoutWithId;

        // Check for iOS 6 bug
        if (!hasIOS6RequestAnimationFrameBug()) {
            return assignedCancelAnimationFrame;
        } else {
            return clearTimeoutWithId;
        }
    }

    function getRequestFn() {
        if (hasMozMismatch) {
            return setTimeoutWithTimestamp;
        } else {
            return queryRequestAnimationFrame();
        }
    }

    function getCancelFn() {
        return queryCancelAnimationFrame();
    }

    function setNativeFn() {
        if (hasMozMismatch) {
            window.requestAnimationFrame = setTimeoutWithTimestamp;
            window.cancelAnimationFrame = clearTimeoutWithId;
        } else {
            window.requestAnimationFrame = queryRequestAnimationFrame();
            window.cancelAnimationFrame = queryCancelAnimationFrame();
        }
    }

    /**
     * The type value "request" singles out firefox 4 - 10 and 
     * assigns the setTimeout function if plausible.
     */

    switch (type) {
        case 'request':
        case '':
            requestFrameMain = getRequestFn();
            break;

        case 'cancel':
            requestFrameMain = getCancelFn();
            break;

        case 'native':
            setNativeFn();
            break;
        default:
            throw new Error('RequestFrame parameter is not a type.');
    }
    return requestFrameMain;
}

return requestFrame;

})));

},{}],65:[function(_dereq_,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = _dereq_('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":7}],66:[function(_dereq_,module,exports){
module.exports = shift

function shift (stream) {
  var rs = stream._readableState
  if (!rs) return null
  return rs.objectMode ? stream.read() : stream.read(getStateLength(rs))
}

function getStateLength (state) {
  if (state.buffer.length) {
    // Since node 6.3.0 state.buffer is a BufferList not an array
    if (state.buffer.head) {
      return state.buffer.head.data.length
    }

    return state.buffer[0].length
  }

  return state.length
}

},{}],67:[function(_dereq_,module,exports){
/**
 * Root reference for iframes.
 */

var root;
if (typeof window !== 'undefined') { // Browser window
  root = window;
} else if (typeof self !== 'undefined') { // Web Worker
  root = self;
} else { // Other environments
  console.warn("Using browser-only version of superagent in non-browser environment");
  root = this;
}

var Emitter = _dereq_('component-emitter');
var RequestBase = _dereq_('./request-base');
var isObject = _dereq_('./is-object');
var ResponseBase = _dereq_('./response-base');
var shouldRetry = _dereq_('./should-retry');

/**
 * Noop.
 */

function noop(){};

/**
 * Expose `request`.
 */

var request = exports = module.exports = function(method, url) {
  // callback
  if ('function' == typeof url) {
    return new exports.Request('GET', method).end(url);
  }

  // url first
  if (1 == arguments.length) {
    return new exports.Request('GET', method);
  }

  return new exports.Request(method, url);
}

exports.Request = Request;

/**
 * Determine XHR.
 */

request.getXHR = function () {
  if (root.XMLHttpRequest
      && (!root.location || 'file:' != root.location.protocol
          || !root.ActiveXObject)) {
    return new XMLHttpRequest;
  } else {
    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
  }
  throw Error("Browser-only version of superagent could not find XHR");
};

/**
 * Removes leading and trailing whitespace, added to support IE.
 *
 * @param {String} s
 * @return {String}
 * @api private
 */

var trim = ''.trim
  ? function(s) { return s.trim(); }
  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

/**
 * Serialize the given `obj`.
 *
 * @param {Object} obj
 * @return {String}
 * @api private
 */

function serialize(obj) {
  if (!isObject(obj)) return obj;
  var pairs = [];
  for (var key in obj) {
    pushEncodedKeyValuePair(pairs, key, obj[key]);
  }
  return pairs.join('&');
}

/**
 * Helps 'serialize' with serializing arrays.
 * Mutates the pairs array.
 *
 * @param {Array} pairs
 * @param {String} key
 * @param {Mixed} val
 */

function pushEncodedKeyValuePair(pairs, key, val) {
  if (val != null) {
    if (Array.isArray(val)) {
      val.forEach(function(v) {
        pushEncodedKeyValuePair(pairs, key, v);
      });
    } else if (isObject(val)) {
      for(var subkey in val) {
        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);
      }
    } else {
      pairs.push(encodeURIComponent(key)
        + '=' + encodeURIComponent(val));
    }
  } else if (val === null) {
    pairs.push(encodeURIComponent(key));
  }
}

/**
 * Expose serialization method.
 */

 request.serializeObject = serialize;

 /**
  * Parse the given x-www-form-urlencoded `str`.
  *
  * @param {String} str
  * @return {Object}
  * @api private
  */

function parseString(str) {
  var obj = {};
  var pairs = str.split('&');
  var pair;
  var pos;

  for (var i = 0, len = pairs.length; i < len; ++i) {
    pair = pairs[i];
    pos = pair.indexOf('=');
    if (pos == -1) {
      obj[decodeURIComponent(pair)] = '';
    } else {
      obj[decodeURIComponent(pair.slice(0, pos))] =
        decodeURIComponent(pair.slice(pos + 1));
    }
  }

  return obj;
}

/**
 * Expose parser.
 */

request.parseString = parseString;

/**
 * Default MIME type map.
 *
 *     superagent.types.xml = 'application/xml';
 *
 */

request.types = {
  html: 'text/html',
  json: 'application/json',
  xml: 'text/xml',
  urlencoded: 'application/x-www-form-urlencoded',
  'form': 'application/x-www-form-urlencoded',
  'form-data': 'application/x-www-form-urlencoded'
};

/**
 * Default serialization map.
 *
 *     superagent.serialize['application/xml'] = function(obj){
 *       return 'generated xml here';
 *     };
 *
 */

 request.serialize = {
   'application/x-www-form-urlencoded': serialize,
   'application/json': JSON.stringify
 };

 /**
  * Default parsers.
  *
  *     superagent.parse['application/xml'] = function(str){
  *       return { object parsed from str };
  *     };
  *
  */

request.parse = {
  'application/x-www-form-urlencoded': parseString,
  'application/json': JSON.parse
};

/**
 * Parse the given header `str` into
 * an object containing the mapped fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function parseHeader(str) {
  var lines = str.split(/\r?\n/);
  var fields = {};
  var index;
  var line;
  var field;
  var val;

  lines.pop(); // trailing CRLF

  for (var i = 0, len = lines.length; i < len; ++i) {
    line = lines[i];
    index = line.indexOf(':');
    field = line.slice(0, index).toLowerCase();
    val = trim(line.slice(index + 1));
    fields[field] = val;
  }

  return fields;
}

/**
 * Check if `mime` is json or has +json structured syntax suffix.
 *
 * @param {String} mime
 * @return {Boolean}
 * @api private
 */

function isJSON(mime) {
  return /[\/+]json\b/.test(mime);
}

/**
 * Initialize a new `Response` with the given `xhr`.
 *
 *  - set flags (.ok, .error, etc)
 *  - parse header
 *
 * Examples:
 *
 *  Aliasing `superagent` as `request` is nice:
 *
 *      request = superagent;
 *
 *  We can use the promise-like API, or pass callbacks:
 *
 *      request.get('/').end(function(res){});
 *      request.get('/', function(res){});
 *
 *  Sending data can be chained:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' })
 *        .end(function(res){});
 *
 *  Or passed to `.send()`:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' }, function(res){});
 *
 *  Or passed to `.post()`:
 *
 *      request
 *        .post('/user', { name: 'tj' })
 *        .end(function(res){});
 *
 * Or further reduced to a single call for simple cases:
 *
 *      request
 *        .post('/user', { name: 'tj' }, function(res){});
 *
 * @param {XMLHTTPRequest} xhr
 * @param {Object} options
 * @api private
 */

function Response(req) {
  this.req = req;
  this.xhr = this.req.xhr;
  // responseText is accessible only if responseType is '' or 'text' and on older browsers
  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
     ? this.xhr.responseText
     : null;
  this.statusText = this.req.xhr.statusText;
  var status = this.xhr.status;
  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
  if (status === 1223) {
      status = 204;
  }
  this._setStatusProperties(status);
  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
  // getResponseHeader still works. so we get content-type even if getting
  // other headers fails.
  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
  this._setHeaderProperties(this.header);

  if (null === this.text && req._responseType) {
    this.body = this.xhr.response;
  } else {
    this.body = this.req.method != 'HEAD'
      ? this._parseBody(this.text ? this.text : this.xhr.response)
      : null;
  }
}

ResponseBase(Response.prototype);

/**
 * Parse the given body `str`.
 *
 * Used for auto-parsing of bodies. Parsers
 * are defined on the `superagent.parse` object.
 *
 * @param {String} str
 * @return {Mixed}
 * @api private
 */

Response.prototype._parseBody = function(str){
  var parse = request.parse[this.type];
  if(this.req._parser) {
    return this.req._parser(this, str);
  }
  if (!parse && isJSON(this.type)) {
    parse = request.parse['application/json'];
  }
  return parse && str && (str.length || str instanceof Object)
    ? parse(str)
    : null;
};

/**
 * Return an `Error` representative of this response.
 *
 * @return {Error}
 * @api public
 */

Response.prototype.toError = function(){
  var req = this.req;
  var method = req.method;
  var url = req.url;

  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
  var err = new Error(msg);
  err.status = this.status;
  err.method = method;
  err.url = url;

  return err;
};

/**
 * Expose `Response`.
 */

request.Response = Response;

/**
 * Initialize a new `Request` with the given `method` and `url`.
 *
 * @param {String} method
 * @param {String} url
 * @api public
 */

function Request(method, url) {
  var self = this;
  this._query = this._query || [];
  this.method = method;
  this.url = url;
  this.header = {}; // preserves header name case
  this._header = {}; // coerces header names to lowercase
  this.on('end', function(){
    var err = null;
    var res = null;

    try {
      res = new Response(self);
    } catch(e) {
      err = new Error('Parser is unable to parse the response');
      err.parse = true;
      err.original = e;
      // issue #675: return the raw response if the response parsing fails
      if (self.xhr) {
        // ie9 doesn't have 'response' property
        err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response;
        // issue #876: return the http status code if the response parsing fails
        err.status = self.xhr.status ? self.xhr.status : null;
        err.statusCode = err.status; // backwards-compat only
      } else {
        err.rawResponse = null;
        err.status = null;
      }

      return self.callback(err);
    }

    self.emit('response', res);

    var new_err;
    try {
      if (!self._isResponseOK(res)) {
        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
        new_err.original = err;
        new_err.response = res;
        new_err.status = res.status;
      }
    } catch(e) {
      new_err = e; // #985 touching res may cause INVALID_STATE_ERR on old Android
    }

    // #1000 don't catch errors from the callback to avoid double calling it
    if (new_err) {
      self.callback(new_err, res);
    } else {
      self.callback(null, res);
    }
  });
}

/**
 * Mixin `Emitter` and `RequestBase`.
 */

Emitter(Request.prototype);
RequestBase(Request.prototype);

/**
 * Set Content-Type to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.xml = 'application/xml';
 *
 *      request.post('/')
 *        .type('xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('application/xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 * @param {String} type
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.type = function(type){
  this.set('Content-Type', request.types[type] || type);
  return this;
};

/**
 * Set Accept to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.json = 'application/json';
 *
 *      request.get('/agent')
 *        .accept('json')
 *        .end(callback);
 *
 *      request.get('/agent')
 *        .accept('application/json')
 *        .end(callback);
 *
 * @param {String} accept
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.accept = function(type){
  this.set('Accept', request.types[type] || type);
  return this;
};

/**
 * Set Authorization field value with `user` and `pass`.
 *
 * @param {String} user
 * @param {String} [pass] optional in case of using 'bearer' as type
 * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.auth = function(user, pass, options){
  if (typeof pass === 'object' && pass !== null) { // pass is optional and can substitute for options
    options = pass;
  }
  if (!options) {
    options = {
      type: 'function' === typeof btoa ? 'basic' : 'auto',
    }
  }

  switch (options.type) {
    case 'basic':
      this.set('Authorization', 'Basic ' + btoa(user + ':' + pass));
    break;

    case 'auto':
      this.username = user;
      this.password = pass;
    break;

    case 'bearer': // usage would be .auth(accessToken, { type: 'bearer' })
      this.set('Authorization', 'Bearer ' + user);
    break;
  }
  return this;
};

/**
 * Add query-string `val`.
 *
 * Examples:
 *
 *   request.get('/shoes')
 *     .query('size=10')
 *     .query({ color: 'blue' })
 *
 * @param {Object|String} val
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.query = function(val){
  if ('string' != typeof val) val = serialize(val);
  if (val) this._query.push(val);
  return this;
};

/**
 * Queue the given `file` as an attachment to the specified `field`,
 * with optional `options` (or filename).
 *
 * ``` js
 * request.post('/upload')
 *   .attach('content', new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
 *   .end(callback);
 * ```
 *
 * @param {String} field
 * @param {Blob|File} file
 * @param {String|Object} options
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.attach = function(field, file, options){
  if (file) {
    if (this._data) {
      throw Error("superagent can't mix .send() and .attach()");
    }

    this._getFormData().append(field, file, options || file.name);
  }
  return this;
};

Request.prototype._getFormData = function(){
  if (!this._formData) {
    this._formData = new root.FormData();
  }
  return this._formData;
};

/**
 * Invoke the callback with `err` and `res`
 * and handle arity check.
 *
 * @param {Error} err
 * @param {Response} res
 * @api private
 */

Request.prototype.callback = function(err, res){
  // console.log(this._retries, this._maxRetries)
  if (this._maxRetries && this._retries++ < this._maxRetries && shouldRetry(err, res)) {
    return this._retry();
  }

  var fn = this._callback;
  this.clearTimeout();

  if (err) {
    if (this._maxRetries) err.retries = this._retries - 1;
    this.emit('error', err);
  }

  fn(err, res);
};

/**
 * Invoke callback with x-domain error.
 *
 * @api private
 */

Request.prototype.crossDomainError = function(){
  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
  err.crossDomain = true;

  err.status = this.status;
  err.method = this.method;
  err.url = this.url;

  this.callback(err);
};

// This only warns, because the request is still likely to work
Request.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function(){
  console.warn("This is not supported in browser version of superagent");
  return this;
};

// This throws, because it can't send/receive data as expected
Request.prototype.pipe = Request.prototype.write = function(){
  throw Error("Streaming is not supported in browser version of superagent");
};

/**
 * Check if `obj` is a host object,
 * we don't want to serialize these :)
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */
Request.prototype._isHost = function _isHost(obj) {
  // Native objects stringify to [object File], [object Blob], [object FormData], etc.
  return obj && 'object' === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';
}

/**
 * Initiate request, invoking callback `fn(res)`
 * with an instanceof `Response`.
 *
 * @param {Function} fn
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.end = function(fn){
  if (this._endCalled) {
    console.warn("Warning: .end() was called twice. This is not supported in superagent");
  }
  this._endCalled = true;

  // store callback
  this._callback = fn || noop;

  // querystring
  this._finalizeQueryString();

  return this._end();
};

Request.prototype._end = function() {
  var self = this;
  var xhr = this.xhr = request.getXHR();
  var data = this._formData || this._data;

  this._setTimeouts();

  // state change
  xhr.onreadystatechange = function(){
    var readyState = xhr.readyState;
    if (readyState >= 2 && self._responseTimeoutTimer) {
      clearTimeout(self._responseTimeoutTimer);
    }
    if (4 != readyState) {
      return;
    }

    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
    // result in the error "Could not complete the operation due to error c00c023f"
    var status;
    try { status = xhr.status } catch(e) { status = 0; }

    if (!status) {
      if (self.timedout || self._aborted) return;
      return self.crossDomainError();
    }
    self.emit('end');
  };

  // progress
  var handleProgress = function(direction, e) {
    if (e.total > 0) {
      e.percent = e.loaded / e.total * 100;
    }
    e.direction = direction;
    self.emit('progress', e);
  }
  if (this.hasListeners('progress')) {
    try {
      xhr.onprogress = handleProgress.bind(null, 'download');
      if (xhr.upload) {
        xhr.upload.onprogress = handleProgress.bind(null, 'upload');
      }
    } catch(e) {
      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
      // Reported here:
      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
    }
  }

  // initiate request
  try {
    if (this.username && this.password) {
      xhr.open(this.method, this.url, true, this.username, this.password);
    } else {
      xhr.open(this.method, this.url, true);
    }
  } catch (err) {
    // see #1149
    return this.callback(err);
  }

  // CORS
  if (this._withCredentials) xhr.withCredentials = true;

  // body
  if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {
    // serialize stuff
    var contentType = this._header['content-type'];
    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];
    if (!serialize && isJSON(contentType)) {
      serialize = request.serialize['application/json'];
    }
    if (serialize) data = serialize(data);
  }

  // set header fields
  for (var field in this.header) {
    if (null == this.header[field]) continue;

    if (this.header.hasOwnProperty(field))
      xhr.setRequestHeader(field, this.header[field]);
  }

  if (this._responseType) {
    xhr.responseType = this._responseType;
  }

  // send stuff
  this.emit('request', this);

  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
  // We need null here if data is undefined
  xhr.send(typeof data !== 'undefined' ? data : null);
  return this;
};

/**
 * GET `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.get = function(url, data, fn){
  var req = request('GET', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * HEAD `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.head = function(url, data, fn){
  var req = request('HEAD', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * OPTIONS query to `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.options = function(url, data, fn){
  var req = request('OPTIONS', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * DELETE `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

function del(url, data, fn){
  var req = request('DELETE', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

request['del'] = del;
request['delete'] = del;

/**
 * PATCH `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.patch = function(url, data, fn){
  var req = request('PATCH', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * POST `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.post = function(url, data, fn){
  var req = request('POST', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * PUT `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.put = function(url, data, fn){
  var req = request('PUT', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

},{"./is-object":68,"./request-base":69,"./response-base":70,"./should-retry":71,"component-emitter":11}],68:[function(_dereq_,module,exports){
/**
 * Check if `obj` is an object.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isObject(obj) {
  return null !== obj && 'object' === typeof obj;
}

module.exports = isObject;

},{}],69:[function(_dereq_,module,exports){
/**
 * Module of mixed-in functions shared between node and client code
 */
var isObject = _dereq_('./is-object');

/**
 * Expose `RequestBase`.
 */

module.exports = RequestBase;

/**
 * Initialize a new `RequestBase`.
 *
 * @api public
 */

function RequestBase(obj) {
  if (obj) return mixin(obj);
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in RequestBase.prototype) {
    obj[key] = RequestBase.prototype[key];
  }
  return obj;
}

/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.clearTimeout = function _clearTimeout(){
  clearTimeout(this._timer);
  clearTimeout(this._responseTimeoutTimer);
  delete this._timer;
  delete this._responseTimeoutTimer;
  return this;
};

/**
 * Override default response body parser
 *
 * This function will be called to convert incoming data into request.body
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.parse = function parse(fn){
  this._parser = fn;
  return this;
};

/**
 * Set format of binary response body.
 * In browser valid formats are 'blob' and 'arraybuffer',
 * which return Blob and ArrayBuffer, respectively.
 *
 * In Node all values result in Buffer.
 *
 * Examples:
 *
 *      req.get('/')
 *        .responseType('blob')
 *        .end(callback);
 *
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.responseType = function(val){
  this._responseType = val;
  return this;
};

/**
 * Override default request body serializer
 *
 * This function will be called to convert data set via .send or .attach into payload to send
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.serialize = function serialize(fn){
  this._serializer = fn;
  return this;
};

/**
 * Set timeouts.
 *
 * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.
 * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.
 *
 * Value of 0 or false means no timeout.
 *
 * @param {Number|Object} ms or {response, deadline}
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.timeout = function timeout(options){
  if (!options || 'object' !== typeof options) {
    this._timeout = options;
    this._responseTimeout = 0;
    return this;
  }

  for(var option in options) {
    switch(option) {
      case 'deadline':
        this._timeout = options.deadline;
        break;
      case 'response':
        this._responseTimeout = options.response;
        break;
      default:
        console.warn("Unknown timeout option", option);
    }
  }
  return this;
};

/**
 * Set number of retry attempts on error.
 *
 * Failed requests will be retried 'count' times if timeout or err.code >= 500.
 *
 * @param {Number} count
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.retry = function retry(count){
  // Default to 1 if no count passed or true
  if (arguments.length === 0 || count === true) count = 1;
  if (count <= 0) count = 0;
  this._maxRetries = count;
  this._retries = 0;
  return this;
};

/**
 * Retry request
 *
 * @return {Request} for chaining
 * @api private
 */

RequestBase.prototype._retry = function() {
  this.clearTimeout();

  // node
  if (this.req) {
    this.req = null;
    this.req = this.request();
  }

  this._aborted = false;
  this.timedout = false;

  return this._end();
};

/**
 * Promise support
 *
 * @param {Function} resolve
 * @param {Function} [reject]
 * @return {Request}
 */

RequestBase.prototype.then = function then(resolve, reject) {
  if (!this._fullfilledPromise) {
    var self = this;
    if (this._endCalled) {
      console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
    }
    this._fullfilledPromise = new Promise(function(innerResolve, innerReject){
      self.end(function(err, res){
        if (err) innerReject(err); else innerResolve(res);
      });
    });
  }
  return this._fullfilledPromise.then(resolve, reject);
}

RequestBase.prototype.catch = function(cb) {
  return this.then(undefined, cb);
};

/**
 * Allow for extension
 */

RequestBase.prototype.use = function use(fn) {
  fn(this);
  return this;
}

RequestBase.prototype.ok = function(cb) {
  if ('function' !== typeof cb) throw Error("Callback required");
  this._okCallback = cb;
  return this;
};

RequestBase.prototype._isResponseOK = function(res) {
  if (!res) {
    return false;
  }

  if (this._okCallback) {
    return this._okCallback(res);
  }

  return res.status >= 200 && res.status < 300;
};


/**
 * Get request header `field`.
 * Case-insensitive.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

RequestBase.prototype.get = function(field){
  return this._header[field.toLowerCase()];
};

/**
 * Get case-insensitive header `field` value.
 * This is a deprecated internal API. Use `.get(field)` instead.
 *
 * (getHeader is no longer used internally by the superagent code base)
 *
 * @param {String} field
 * @return {String}
 * @api private
 * @deprecated
 */

RequestBase.prototype.getHeader = RequestBase.prototype.get;

/**
 * Set header `field` to `val`, or multiple fields with one object.
 * Case-insensitive.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.set = function(field, val){
  if (isObject(field)) {
    for (var key in field) {
      this.set(key, field[key]);
    }
    return this;
  }
  this._header[field.toLowerCase()] = val;
  this.header[field] = val;
  return this;
};

/**
 * Remove header `field`.
 * Case-insensitive.
 *
 * Example:
 *
 *      req.get('/')
 *        .unset('User-Agent')
 *        .end(callback);
 *
 * @param {String} field
 */
RequestBase.prototype.unset = function(field){
  delete this._header[field.toLowerCase()];
  delete this.header[field];
  return this;
};

/**
 * Write the field `name` and `val`, or multiple fields with one object
 * for "multipart/form-data" request bodies.
 *
 * ``` js
 * request.post('/upload')
 *   .field('foo', 'bar')
 *   .end(callback);
 *
 * request.post('/upload')
 *   .field({ foo: 'bar', baz: 'qux' })
 *   .end(callback);
 * ```
 *
 * @param {String|Object} name
 * @param {String|Blob|File|Buffer|fs.ReadStream} val
 * @return {Request} for chaining
 * @api public
 */
RequestBase.prototype.field = function(name, val) {

  // name should be either a string or an object.
  if (null === name ||  undefined === name) {
    throw new Error('.field(name, val) name can not be empty');
  }

  if (this._data) {
    console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObject(name)) {
    for (var key in name) {
      this.field(key, name[key]);
    }
    return this;
  }

  if (Array.isArray(val)) {
    for (var i in val) {
      this.field(name, val[i]);
    }
    return this;
  }

  // val should be defined now
  if (null === val || undefined === val) {
    throw new Error('.field(name, val) val can not be empty');
  }
  if ('boolean' === typeof val) {
    val = '' + val;
  }
  this._getFormData().append(name, val);
  return this;
};

/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */
RequestBase.prototype.abort = function(){
  if (this._aborted) {
    return this;
  }
  this._aborted = true;
  this.xhr && this.xhr.abort(); // browser
  this.req && this.req.abort(); // node
  this.clearTimeout();
  this.emit('abort');
  return this;
};

/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */

RequestBase.prototype.withCredentials = function(on){
  // This is browser-only functionality. Node side is no-op.
  if(on==undefined) on = true;
  this._withCredentials = on;
  return this;
};

/**
 * Set the max redirects to `n`. Does noting in browser XHR implementation.
 *
 * @param {Number} n
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.redirects = function(n){
  this._maxRedirects = n;
  return this;
};

/**
 * Convert to a plain javascript object (not JSON string) of scalar properties.
 * Note as this method is designed to return a useful non-this value,
 * it cannot be chained.
 *
 * @return {Object} describing method, url, and data of this request
 * @api public
 */

RequestBase.prototype.toJSON = function(){
  return {
    method: this.method,
    url: this.url,
    data: this._data,
    headers: this._header
  };
};


/**
 * Send `data` as the request body, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"}')
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
 *      request.post('/user')
 *        .send('name=tobi')
 *        .send('species=ferret')
 *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.send = function(data){
  var isObj = isObject(data);
  var type = this._header['content-type'];

  if (this._formData) {
    console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObj && !this._data) {
    if (Array.isArray(data)) {
      this._data = [];
    } else if (!this._isHost(data)) {
      this._data = {};
    }
  } else if (data && this._data && this._isHost(this._data)) {
    throw Error("Can't merge these send calls");
  }

  // merge
  if (isObj && isObject(this._data)) {
    for (var key in data) {
      this._data[key] = data[key];
    }
  } else if ('string' == typeof data) {
    // default to x-www-form-urlencoded
    if (!type) this.type('form');
    type = this._header['content-type'];
    if ('application/x-www-form-urlencoded' == type) {
      this._data = this._data
        ? this._data + '&' + data
        : data;
    } else {
      this._data = (this._data || '') + data;
    }
  } else {
    this._data = data;
  }

  if (!isObj || this._isHost(data)) {
    return this;
  }

  // default to json
  if (!type) this.type('json');
  return this;
};


/**
 * Sort `querystring` by the sort function
 *
 *
 * Examples:
 *
 *       // default order
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery()
 *         .end(callback)
 *
 *       // customized sort function
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery(function(a, b){
 *           return a.length - b.length;
 *         })
 *         .end(callback)
 *
 *
 * @param {Function} sort
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.sortQuery = function(sort) {
  // _sort default to true but otherwise can be a function or boolean
  this._sort = typeof sort === 'undefined' ? true : sort;
  return this;
};

/**
 * Compose querystring to append to req.url
 *
 * @api private
 */
RequestBase.prototype._finalizeQueryString = function(){
  var query = this._query.join('&');
  if (query) {
    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;
  }
  this._query.length = 0; // Makes the call idempotent

  if (this._sort) {
    var index = this.url.indexOf('?');
    if (index >= 0) {
      var queryArr = this.url.substring(index + 1).split('&');
      if ('function' === typeof this._sort) {
        queryArr.sort(this._sort);
      } else {
        queryArr.sort();
      }
      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');
    }
  }
};

// For backwards compat only
RequestBase.prototype._appendQueryString = function() {console.trace("Unsupported");}

/**
 * Invoke callback with timeout error.
 *
 * @api private
 */

RequestBase.prototype._timeoutError = function(reason, timeout, errno){
  if (this._aborted) {
    return;
  }
  var err = new Error(reason + timeout + 'ms exceeded');
  err.timeout = timeout;
  err.code = 'ECONNABORTED';
  err.errno = errno;
  this.timedout = true;
  this.abort();
  this.callback(err);
};

RequestBase.prototype._setTimeouts = function() {
  var self = this;

  // deadline
  if (this._timeout && !this._timer) {
    this._timer = setTimeout(function(){
      self._timeoutError('Timeout of ', self._timeout, 'ETIME');
    }, this._timeout);
  }
  // response timeout
  if (this._responseTimeout && !this._responseTimeoutTimer) {
    this._responseTimeoutTimer = setTimeout(function(){
      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');
    }, this._responseTimeout);
  }
}

},{"./is-object":68}],70:[function(_dereq_,module,exports){

/**
 * Module dependencies.
 */

var utils = _dereq_('./utils');

/**
 * Expose `ResponseBase`.
 */

module.exports = ResponseBase;

/**
 * Initialize a new `ResponseBase`.
 *
 * @api public
 */

function ResponseBase(obj) {
  if (obj) return mixin(obj);
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in ResponseBase.prototype) {
    obj[key] = ResponseBase.prototype[key];
  }
  return obj;
}

/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

ResponseBase.prototype.get = function(field){
    return this.header[field.toLowerCase()];
};

/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */

ResponseBase.prototype._setHeaderProperties = function(header){
    // TODO: moar!
    // TODO: make this a util

    // content-type
    var ct = header['content-type'] || '';
    this.type = utils.type(ct);

    // params
    var params = utils.params(ct);
    for (var key in params) this[key] = params[key];

    this.links = {};

    // links
    try {
        if (header.link) {
            this.links = utils.parseLinks(header.link);
        }
    } catch (err) {
        // ignore
    }
};

/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */

ResponseBase.prototype._setStatusProperties = function(status){
    var type = status / 100 | 0;

    // status / class
    this.status = this.statusCode = status;
    this.statusType = type;

    // basics
    this.info = 1 == type;
    this.ok = 2 == type;
    this.redirect = 3 == type;
    this.clientError = 4 == type;
    this.serverError = 5 == type;
    this.error = (4 == type || 5 == type)
        ? this.toError()
        : false;

    // sugar
    this.accepted = 202 == status;
    this.noContent = 204 == status;
    this.badRequest = 400 == status;
    this.unauthorized = 401 == status;
    this.notAcceptable = 406 == status;
    this.forbidden = 403 == status;
    this.notFound = 404 == status;
};

},{"./utils":72}],71:[function(_dereq_,module,exports){
var ERROR_CODES = [
  'ECONNRESET',
  'ETIMEDOUT',
  'EADDRINFO',
  'ESOCKETTIMEDOUT'
];

/**
 * Determine if a request should be retried.
 * (Borrowed from segmentio/superagent-retry)
 *
 * @param {Error} err
 * @param {Response} [res]
 * @returns {Boolean}
 */
module.exports = function shouldRetry(err, res) {
  if (err && err.code && ~ERROR_CODES.indexOf(err.code)) return true;
  if (res && res.status && res.status >= 500) return true;
  // Superagent timeout
  if (err && 'timeout' in err && err.code == 'ECONNABORTED') return true;
  if (err && 'crossDomain' in err) return true;
  return false;
};

},{}],72:[function(_dereq_,module,exports){

/**
 * Return the mime type for the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

exports.type = function(str){
  return str.split(/ *; */).shift();
};

/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.params = function(str){
  return str.split(/ *; */).reduce(function(obj, str){
    var parts = str.split(/ *= */);
    var key = parts.shift();
    var val = parts.shift();

    if (key && val) obj[key] = val;
    return obj;
  }, {});
};

/**
 * Parse Link header fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.parseLinks = function(str){
  return str.split(/ *, */).reduce(function(obj, str){
    var parts = str.split(/ *; */);
    var url = parts[0].slice(1, -1);
    var rel = parts[1].split(/ *= */)[1].slice(1, -1);
    obj[rel] = url;
    return obj;
  }, {});
};

/**
 * Strip content related fields from `header`.
 *
 * @param {Object} header
 * @return {Object} header
 * @api private
 */

exports.cleanHeader = function(header, shouldStripCookie){
  delete header['content-type'];
  delete header['content-length'];
  delete header['transfer-encoding'];
  delete header['host'];
  if (shouldStripCookie) {
    delete header['cookie'];
  }
  return header;
};
},{}],73:[function(_dereq_,module,exports){
(function (Buffer){
/**
 * Convert a typed array to a Buffer without a copy
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install typedarray-to-buffer`
 */

var isTypedArray = _dereq_('is-typedarray').strict

module.exports = function typedarrayToBuffer (arr) {
  if (isTypedArray(arr)) {
    // To avoid a copy, use the typed array's underlying ArrayBuffer to back new Buffer
    var buf = new Buffer(arr.buffer)
    if (arr.byteLength !== arr.buffer.byteLength) {
      // Respect the "view", i.e. byteOffset and byteLength, without doing a copy
      buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength)
    }
    return buf
  } else {
    // Pass through all other types to the `Buffer` constructor
    return new Buffer(arr)
  }
}

}).call(this,_dereq_("buffer").Buffer)

},{"buffer":7,"is-typedarray":42}],74:[function(_dereq_,module,exports){
/**
 * UAParser.js v0.7.14
 * Lightweight JavaScript-based User-Agent string parser
 * https://github.com/faisalman/ua-parser-js
 *
 * Copyright © 2012-2016 Faisal Salman <fyzlman@gmail.com>
 * Dual licensed under GPLv2 & MIT
 */

(function (window, undefined) {

    'use strict';

    //////////////
    // Constants
    /////////////


    var LIBVERSION  = '0.7.14',
        EMPTY       = '',
        UNKNOWN     = '?',
        FUNC_TYPE   = 'function',
        UNDEF_TYPE  = 'undefined',
        OBJ_TYPE    = 'object',
        STR_TYPE    = 'string',
        MAJOR       = 'major', // deprecated
        MODEL       = 'model',
        NAME        = 'name',
        TYPE        = 'type',
        VENDOR      = 'vendor',
        VERSION     = 'version',
        ARCHITECTURE= 'architecture',
        CONSOLE     = 'console',
        MOBILE      = 'mobile',
        TABLET      = 'tablet',
        SMARTTV     = 'smarttv',
        WEARABLE    = 'wearable',
        EMBEDDED    = 'embedded';


    ///////////
    // Helper
    //////////


    var util = {
        extend : function (regexes, extensions) {
            var margedRegexes = {};
            for (var i in regexes) {
                if (extensions[i] && extensions[i].length % 2 === 0) {
                    margedRegexes[i] = extensions[i].concat(regexes[i]);
                } else {
                    margedRegexes[i] = regexes[i];
                }
            }
            return margedRegexes;
        },
        has : function (str1, str2) {
          if (typeof str1 === "string") {
            return str2.toLowerCase().indexOf(str1.toLowerCase()) !== -1;
          } else {
            return false;
          }
        },
        lowerize : function (str) {
            return str.toLowerCase();
        },
        major : function (version) {
            return typeof(version) === STR_TYPE ? version.replace(/[^\d\.]/g,'').split(".")[0] : undefined;
        },
        trim : function (str) {
          return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
        }
    };


    ///////////////
    // Map helper
    //////////////


    var mapper = {

        rgx : function (ua, arrays) {

            //var result = {},
            var i = 0, j, k, p, q, matches, match;//, args = arguments;

            /*// construct object barebones
            for (p = 0; p < args[1].length; p++) {
                q = args[1][p];
                result[typeof q === OBJ_TYPE ? q[0] : q] = undefined;
            }*/

            // loop through all regexes maps
            while (i < arrays.length && !matches) {

                var regex = arrays[i],       // even sequence (0,2,4,..)
                    props = arrays[i + 1];   // odd sequence (1,3,5,..)
                j = k = 0;

                // try matching uastring with regexes
                while (j < regex.length && !matches) {

                    matches = regex[j++].exec(ua);

                    if (!!matches) {
                        for (p = 0; p < props.length; p++) {
                            match = matches[++k];
                            q = props[p];
                            // check if given property is actually array
                            if (typeof q === OBJ_TYPE && q.length > 0) {
                                if (q.length == 2) {
                                    if (typeof q[1] == FUNC_TYPE) {
                                        // assign modified match
                                        this[q[0]] = q[1].call(this, match);
                                    } else {
                                        // assign given value, ignore regex match
                                        this[q[0]] = q[1];
                                    }
                                } else if (q.length == 3) {
                                    // check whether function or regex
                                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                                        // call function (usually string mapper)
                                        this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
                                    } else {
                                        // sanitize match using given regex
                                        this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
                                    }
                                } else if (q.length == 4) {
                                        this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;
                                }
                            } else {
                                this[q] = match ? match : undefined;
                            }
                        }
                    }
                }
                i += 2;
            }
            //console.log(this);
            //return this;
        },

        str : function (str, map) {

            for (var i in map) {
                // check if array
                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
                    for (var j = 0; j < map[i].length; j++) {
                        if (util.has(map[i][j], str)) {
                            return (i === UNKNOWN) ? undefined : i;
                        }
                    }
                } else if (util.has(map[i], str)) {
                    return (i === UNKNOWN) ? undefined : i;
                }
            }
            return str;
        }
    };


    ///////////////
    // String map
    //////////////


    var maps = {

        browser : {
            oldsafari : {
                version : {
                    '1.0'   : '/8',
                    '1.2'   : '/1',
                    '1.3'   : '/3',
                    '2.0'   : '/412',
                    '2.0.2' : '/416',
                    '2.0.3' : '/417',
                    '2.0.4' : '/419',
                    '?'     : '/'
                }
            }
        },

        device : {
            amazon : {
                model : {
                    'Fire Phone' : ['SD', 'KF']
                }
            },
            sprint : {
                model : {
                    'Evo Shift 4G' : '7373KT'
                },
                vendor : {
                    'HTC'       : 'APA',
                    'Sprint'    : 'Sprint'
                }
            }
        },

        os : {
            windows : {
                version : {
                    'ME'        : '4.90',
                    'NT 3.11'   : 'NT3.51',
                    'NT 4.0'    : 'NT4.0',
                    '2000'      : 'NT 5.0',
                    'XP'        : ['NT 5.1', 'NT 5.2'],
                    'Vista'     : 'NT 6.0',
                    '7'         : 'NT 6.1',
                    '8'         : 'NT 6.2',
                    '8.1'       : 'NT 6.3',
                    '10'        : ['NT 6.4', 'NT 10.0'],
                    'RT'        : 'ARM'
                }
            }
        }
    };


    //////////////
    // Regex map
    /////////////


    var regexes = {

        browser : [[

            // Presto based
            /(opera\smini)\/([\w\.-]+)/i,                                       // Opera Mini
            /(opera\s[mobiletab]+).+version\/([\w\.-]+)/i,                      // Opera Mobi/Tablet
            /(opera).+version\/([\w\.]+)/i,                                     // Opera > 9.80
            /(opera)[\/\s]+([\w\.]+)/i                                          // Opera < 9.80
            ], [NAME, VERSION], [

            /(opios)[\/\s]+([\w\.]+)/i                                          // Opera mini on iphone >= 8.0
            ], [[NAME, 'Opera Mini'], VERSION], [

            /\s(opr)\/([\w\.]+)/i                                               // Opera Webkit
            ], [[NAME, 'Opera'], VERSION], [

            // Mixed
            /(kindle)\/([\w\.]+)/i,                                             // Kindle
            /(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]+)*/i,
                                                                                // Lunascape/Maxthon/Netfront/Jasmine/Blazer

            // Trident based
            /(avant\s|iemobile|slim|baidu)(?:browser)?[\/\s]?([\w\.]*)/i,
                                                                                // Avant/IEMobile/SlimBrowser/Baidu
            /(?:ms|\()(ie)\s([\w\.]+)/i,                                        // Internet Explorer

            // Webkit/KHTML based
            /(rekonq)\/([\w\.]+)*/i,                                            // Rekonq
            /(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser)\/([\w\.-]+)/i
                                                                                // Chromium/Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser
            ], [NAME, VERSION], [

            /(trident).+rv[:\s]([\w\.]+).+like\sgecko/i                         // IE11
            ], [[NAME, 'IE'], VERSION], [

            /(edge)\/((\d+)?[\w\.]+)/i                                          // Microsoft Edge
            ], [NAME, VERSION], [

            /(yabrowser)\/([\w\.]+)/i                                           // Yandex
            ], [[NAME, 'Yandex'], VERSION], [

            /(puffin)\/([\w\.]+)/i                                              // Puffin
            ], [[NAME, 'Puffin'], VERSION], [

            /((?:[\s\/])uc?\s?browser|(?:juc.+)ucweb)[\/\s]?([\w\.]+)/i
                                                                                // UCBrowser
            ], [[NAME, 'UCBrowser'], VERSION], [

            /(comodo_dragon)\/([\w\.]+)/i                                       // Comodo Dragon
            ], [[NAME, /_/g, ' '], VERSION], [

            /(micromessenger)\/([\w\.]+)/i                                      // WeChat
            ], [[NAME, 'WeChat'], VERSION], [

            /(QQ)\/([\d\.]+)/i                                                  // QQ, aka ShouQ
            ], [NAME, VERSION], [

            /m?(qqbrowser)[\/\s]?([\w\.]+)/i                                    // QQBrowser
            ], [NAME, VERSION], [

            /xiaomi\/miuibrowser\/([\w\.]+)/i                                   // MIUI Browser
            ], [VERSION, [NAME, 'MIUI Browser']], [

            /;fbav\/([\w\.]+);/i                                                // Facebook App for iOS & Android
            ], [VERSION, [NAME, 'Facebook']], [

            /(headlesschrome) ([\w\.]+)/i                                       // Chrome Headless
            ], [VERSION, [NAME, 'Chrome Headless']], [

            /\swv\).+(chrome)\/([\w\.]+)/i                                      // Chrome WebView
            ], [[NAME, /(.+)/, '$1 WebView'], VERSION], [

            /((?:oculus|samsung)browser)\/([\w\.]+)/i
            ], [[NAME, /(.+(?:g|us))(.+)/, '$1 $2'], VERSION], [                // Oculus / Samsung Browser

            /android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)*/i        // Android Browser
            ], [VERSION, [NAME, 'Android Browser']], [

            /(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i
                                                                                // Chrome/OmniWeb/Arora/Tizen/Nokia
            ], [NAME, VERSION], [

            /(dolfin)\/([\w\.]+)/i                                              // Dolphin
            ], [[NAME, 'Dolphin'], VERSION], [

            /((?:android.+)crmo|crios)\/([\w\.]+)/i                             // Chrome for Android/iOS
            ], [[NAME, 'Chrome'], VERSION], [

            /(coast)\/([\w\.]+)/i                                               // Opera Coast
            ], [[NAME, 'Opera Coast'], VERSION], [

            /fxios\/([\w\.-]+)/i                                                // Firefox for iOS
            ], [VERSION, [NAME, 'Firefox']], [

            /version\/([\w\.]+).+?mobile\/\w+\s(safari)/i                       // Mobile Safari
            ], [VERSION, [NAME, 'Mobile Safari']], [

            /version\/([\w\.]+).+?(mobile\s?safari|safari)/i                    // Safari & Safari Mobile
            ], [VERSION, NAME], [

            /webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i                     // Safari < 3.0
            ], [NAME, [VERSION, mapper.str, maps.browser.oldsafari.version]], [

            /(konqueror)\/([\w\.]+)/i,                                          // Konqueror
            /(webkit|khtml)\/([\w\.]+)/i
            ], [NAME, VERSION], [

            // Gecko based
            /(navigator|netscape)\/([\w\.-]+)/i                                 // Netscape
            ], [[NAME, 'Netscape'], VERSION], [
            /(swiftfox)/i,                                                      // Swiftfox
            /(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,
                                                                                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror
            /(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix)\/([\w\.-]+)/i,
                                                                                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
            /(mozilla)\/([\w\.]+).+rv\:.+gecko\/\d+/i,                          // Mozilla

            // Other
            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i,
                                                                                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir
            /(links)\s\(([\w\.]+)/i,                                            // Links
            /(gobrowser)\/?([\w\.]+)*/i,                                        // GoBrowser
            /(ice\s?browser)\/v?([\w\._]+)/i,                                   // ICE Browser
            /(mosaic)[\/\s]([\w\.]+)/i                                          // Mosaic
            ], [NAME, VERSION]

            /* /////////////////////
            // Media players BEGIN
            ////////////////////////

            , [

            /(apple(?:coremedia|))\/((\d+)[\w\._]+)/i,                          // Generic Apple CoreMedia
            /(coremedia) v((\d+)[\w\._]+)/i
            ], [NAME, VERSION], [

            /(aqualung|lyssna|bsplayer)\/((\d+)?[\w\.-]+)/i                     // Aqualung/Lyssna/BSPlayer
            ], [NAME, VERSION], [

            /(ares|ossproxy)\s((\d+)[\w\.-]+)/i                                 // Ares/OSSProxy
            ], [NAME, VERSION], [

            /(audacious|audimusicstream|amarok|bass|core|dalvik|gnomemplayer|music on console|nsplayer|psp-internetradioplayer|videos)\/((\d+)[\w\.-]+)/i,
                                                                                // Audacious/AudiMusicStream/Amarok/BASS/OpenCORE/Dalvik/GnomeMplayer/MoC
                                                                                // NSPlayer/PSP-InternetRadioPlayer/Videos
            /(clementine|music player daemon)\s((\d+)[\w\.-]+)/i,               // Clementine/MPD
            /(lg player|nexplayer)\s((\d+)[\d\.]+)/i,
            /player\/(nexplayer|lg player)\s((\d+)[\w\.-]+)/i                   // NexPlayer/LG Player
            ], [NAME, VERSION], [
            /(nexplayer)\s((\d+)[\w\.-]+)/i                                     // Nexplayer
            ], [NAME, VERSION], [

            /(flrp)\/((\d+)[\w\.-]+)/i                                          // Flip Player
            ], [[NAME, 'Flip Player'], VERSION], [

            /(fstream|nativehost|queryseekspider|ia-archiver|facebookexternalhit)/i
                                                                                // FStream/NativeHost/QuerySeekSpider/IA Archiver/facebookexternalhit
            ], [NAME], [

            /(gstreamer) souphttpsrc (?:\([^\)]+\)){0,1} libsoup\/((\d+)[\w\.-]+)/i
                                                                                // Gstreamer
            ], [NAME, VERSION], [

            /(htc streaming player)\s[\w_]+\s\/\s((\d+)[\d\.]+)/i,              // HTC Streaming Player
            /(java|python-urllib|python-requests|wget|libcurl)\/((\d+)[\w\.-_]+)/i,
                                                                                // Java/urllib/requests/wget/cURL
            /(lavf)((\d+)[\d\.]+)/i                                             // Lavf (FFMPEG)
            ], [NAME, VERSION], [

            /(htc_one_s)\/((\d+)[\d\.]+)/i                                      // HTC One S
            ], [[NAME, /_/g, ' '], VERSION], [

            /(mplayer)(?:\s|\/)(?:(?:sherpya-){0,1}svn)(?:-|\s)(r\d+(?:-\d+[\w\.-]+){0,1})/i
                                                                                // MPlayer SVN
            ], [NAME, VERSION], [

            /(mplayer)(?:\s|\/|[unkow-]+)((\d+)[\w\.-]+)/i                      // MPlayer
            ], [NAME, VERSION], [

            /(mplayer)/i,                                                       // MPlayer (no other info)
            /(yourmuze)/i,                                                      // YourMuze
            /(media player classic|nero showtime)/i                             // Media Player Classic/Nero ShowTime
            ], [NAME], [

            /(nero (?:home|scout))\/((\d+)[\w\.-]+)/i                           // Nero Home/Nero Scout
            ], [NAME, VERSION], [

            /(nokia\d+)\/((\d+)[\w\.-]+)/i                                      // Nokia
            ], [NAME, VERSION], [

            /\s(songbird)\/((\d+)[\w\.-]+)/i                                    // Songbird/Philips-Songbird
            ], [NAME, VERSION], [

            /(winamp)3 version ((\d+)[\w\.-]+)/i,                               // Winamp
            /(winamp)\s((\d+)[\w\.-]+)/i,
            /(winamp)mpeg\/((\d+)[\w\.-]+)/i
            ], [NAME, VERSION], [

            /(ocms-bot|tapinradio|tunein radio|unknown|winamp|inlight radio)/i  // OCMS-bot/tap in radio/tunein/unknown/winamp (no other info)
                                                                                // inlight radio
            ], [NAME], [

            /(quicktime|rma|radioapp|radioclientapplication|soundtap|totem|stagefright|streamium)\/((\d+)[\w\.-]+)/i
                                                                                // QuickTime/RealMedia/RadioApp/RadioClientApplication/
                                                                                // SoundTap/Totem/Stagefright/Streamium
            ], [NAME, VERSION], [

            /(smp)((\d+)[\d\.]+)/i                                              // SMP
            ], [NAME, VERSION], [

            /(vlc) media player - version ((\d+)[\w\.]+)/i,                     // VLC Videolan
            /(vlc)\/((\d+)[\w\.-]+)/i,
            /(xbmc|gvfs|xine|xmms|irapp)\/((\d+)[\w\.-]+)/i,                    // XBMC/gvfs/Xine/XMMS/irapp
            /(foobar2000)\/((\d+)[\d\.]+)/i,                                    // Foobar2000
            /(itunes)\/((\d+)[\d\.]+)/i                                         // iTunes
            ], [NAME, VERSION], [

            /(wmplayer)\/((\d+)[\w\.-]+)/i,                                     // Windows Media Player
            /(windows-media-player)\/((\d+)[\w\.-]+)/i
            ], [[NAME, /-/g, ' '], VERSION], [

            /windows\/((\d+)[\w\.-]+) upnp\/[\d\.]+ dlnadoc\/[\d\.]+ (home media server)/i
                                                                                // Windows Media Server
            ], [VERSION, [NAME, 'Windows']], [

            /(com\.riseupradioalarm)\/((\d+)[\d\.]*)/i                          // RiseUP Radio Alarm
            ], [NAME, VERSION], [

            /(rad.io)\s((\d+)[\d\.]+)/i,                                        // Rad.io
            /(radio.(?:de|at|fr))\s((\d+)[\d\.]+)/i
            ], [[NAME, 'rad.io'], VERSION]

            //////////////////////
            // Media players END
            ////////////////////*/

        ],

        cpu : [[

            /(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i                     // AMD64
            ], [[ARCHITECTURE, 'amd64']], [

            /(ia32(?=;))/i                                                      // IA32 (quicktime)
            ], [[ARCHITECTURE, util.lowerize]], [

            /((?:i[346]|x)86)[;\)]/i                                            // IA32
            ], [[ARCHITECTURE, 'ia32']], [

            // PocketPC mistakenly identified as PowerPC
            /windows\s(ce|mobile);\sppc;/i
            ], [[ARCHITECTURE, 'arm']], [

            /((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i                           // PowerPC
            ], [[ARCHITECTURE, /ower/, '', util.lowerize]], [

            /(sun4\w)[;\)]/i                                                    // SPARC
            ], [[ARCHITECTURE, 'sparc']], [

            /((?:avr32|ia64(?=;))|68k(?=\))|arm(?:64|(?=v\d+;))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?(?=;)|pa-risc)/i
                                                                                // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
            ], [[ARCHITECTURE, util.lowerize]]
        ],

        device : [[

            /\((ipad|playbook);[\w\s\);-]+(rim|apple)/i                         // iPad/PlayBook
            ], [MODEL, VENDOR, [TYPE, TABLET]], [

            /applecoremedia\/[\w\.]+ \((ipad)/                                  // iPad
            ], [MODEL, [VENDOR, 'Apple'], [TYPE, TABLET]], [

            /(apple\s{0,1}tv)/i                                                 // Apple TV
            ], [[MODEL, 'Apple TV'], [VENDOR, 'Apple']], [

            /(archos)\s(gamepad2?)/i,                                           // Archos
            /(hp).+(touchpad)/i,                                                // HP TouchPad
            /(hp).+(tablet)/i,                                                  // HP Tablet
            /(kindle)\/([\w\.]+)/i,                                             // Kindle
            /\s(nook)[\w\s]+build\/(\w+)/i,                                     // Nook
            /(dell)\s(strea[kpr\s\d]*[\dko])/i                                  // Dell Streak
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /(kf[A-z]+)\sbuild\/[\w\.]+.*silk\//i                               // Kindle Fire HD
            ], [MODEL, [VENDOR, 'Amazon'], [TYPE, TABLET]], [
            /(sd|kf)[0349hijorstuw]+\sbuild\/[\w\.]+.*silk\//i                  // Fire Phone
            ], [[MODEL, mapper.str, maps.device.amazon.model], [VENDOR, 'Amazon'], [TYPE, MOBILE]], [

            /\((ip[honed|\s\w*]+);.+(apple)/i                                   // iPod/iPhone
            ], [MODEL, VENDOR, [TYPE, MOBILE]], [
            /\((ip[honed|\s\w*]+);/i                                            // iPod/iPhone
            ], [MODEL, [VENDOR, 'Apple'], [TYPE, MOBILE]], [

            /(blackberry)[\s-]?(\w+)/i,                                         // BlackBerry
            /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[\s_-]?([\w-]+)*/i,
                                                                                // BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
            /(hp)\s([\w\s]+\w)/i,                                               // HP iPAQ
            /(asus)-?(\w+)/i                                                    // Asus
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [
            /\(bb10;\s(\w+)/i                                                   // BlackBerry 10
            ], [MODEL, [VENDOR, 'BlackBerry'], [TYPE, MOBILE]], [
                                                                                // Asus Tablets
            /android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7|padfone)/i
            ], [MODEL, [VENDOR, 'Asus'], [TYPE, TABLET]], [

            /(sony)\s(tablet\s[ps])\sbuild\//i,                                  // Sony
            /(sony)?(?:sgp.+)\sbuild\//i
            ], [[VENDOR, 'Sony'], [MODEL, 'Xperia Tablet'], [TYPE, TABLET]], [
            /android.+\s([c-g]\d{4}|so[-l]\w+)\sbuild\//i
            ], [MODEL, [VENDOR, 'Sony'], [TYPE, MOBILE]], [

            /\s(ouya)\s/i,                                                      // Ouya
            /(nintendo)\s([wids3u]+)/i                                          // Nintendo
            ], [VENDOR, MODEL, [TYPE, CONSOLE]], [

            /android.+;\s(shield)\sbuild/i                                      // Nvidia
            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [

            /(playstation\s[34portablevi]+)/i                                   // Playstation
            ], [MODEL, [VENDOR, 'Sony'], [TYPE, CONSOLE]], [

            /(sprint\s(\w+))/i                                                  // Sprint Phones
            ], [[VENDOR, mapper.str, maps.device.sprint.vendor], [MODEL, mapper.str, maps.device.sprint.model], [TYPE, MOBILE]], [

            /(lenovo)\s?(S(?:5000|6000)+(?:[-][\w+]))/i                         // Lenovo tablets
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /(htc)[;_\s-]+([\w\s]+(?=\))|\w+)*/i,                               // HTC
            /(zte)-(\w+)*/i,                                                    // ZTE
            /(alcatel|geeksphone|lenovo|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]+)*/i
                                                                                // Alcatel/GeeksPhone/Lenovo/Nexian/Panasonic/Sony
            ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [

            /(nexus\s9)/i                                                       // HTC Nexus 9
            ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [

            /d\/huawei([\w\s-]+)[;\)]/i,
            /(nexus\s6p)/i                                                      // Huawei
            ], [MODEL, [VENDOR, 'Huawei'], [TYPE, MOBILE]], [

            /(microsoft);\s(lumia[\s\w]+)/i                                     // Microsoft Lumia
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

            /[\s\(;](xbox(?:\sone)?)[\s\);]/i                                   // Microsoft Xbox
            ], [MODEL, [VENDOR, 'Microsoft'], [TYPE, CONSOLE]], [
            /(kin\.[onetw]{3})/i                                                // Microsoft Kin
            ], [[MODEL, /\./g, ' '], [VENDOR, 'Microsoft'], [TYPE, MOBILE]], [

                                                                                // Motorola
            /\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?(:?\s4g)?)[\w\s]+build\//i,
            /mot[\s-]?(\w+)*/i,
            /(XT\d{3,4}) build\//i,
            /(nexus\s6)/i
            ], [MODEL, [VENDOR, 'Motorola'], [TYPE, MOBILE]], [
            /android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i
            ], [MODEL, [VENDOR, 'Motorola'], [TYPE, TABLET]], [

            /hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i            // HbbTV devices
            ], [[VENDOR, util.trim], [MODEL, util.trim], [TYPE, SMARTTV]], [

            /hbbtv.+maple;(\d+)/i
            ], [[MODEL, /^/, 'SmartTV'], [VENDOR, 'Samsung'], [TYPE, SMARTTV]], [

            /\(dtv[\);].+(aquos)/i                                              // Sharp
            ], [MODEL, [VENDOR, 'Sharp'], [TYPE, SMARTTV]], [

            /android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n\d+|sgh-t8[56]9|nexus 10))/i,
            /((SM-T\w+))/i
            ], [[VENDOR, 'Samsung'], MODEL, [TYPE, TABLET]], [                  // Samsung
            /smart-tv.+(samsung)/i
            ], [VENDOR, [TYPE, SMARTTV], MODEL], [
            /((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-\w[\w\d]+))/i,
            /(sam[sung]*)[\s-]*(\w+-?[\w-]*)*/i,
            /sec-((sgh\w+))/i
            ], [[VENDOR, 'Samsung'], MODEL, [TYPE, MOBILE]], [

            /sie-(\w+)*/i                                                       // Siemens
            ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [

            /(maemo|nokia).*(n900|lumia\s\d+)/i,                                // Nokia
            /(nokia)[\s_-]?([\w-]+)*/i
            ], [[VENDOR, 'Nokia'], MODEL, [TYPE, MOBILE]], [

            /android\s3\.[\s\w;-]{10}(a\d{3})/i                                 // Acer
            ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [

            /android.+([vl]k\-?\d{3})\s+build/i                                 // LG Tablet
            ], [MODEL, [VENDOR, 'LG'], [TYPE, TABLET]], [
            /android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i                     // LG Tablet
            ], [[VENDOR, 'LG'], MODEL, [TYPE, TABLET]], [
            /(lg) netcast\.tv/i                                                 // LG SmartTV
            ], [VENDOR, MODEL, [TYPE, SMARTTV]], [
            /(nexus\s[45])/i,                                                   // LG
            /lg[e;\s\/-]+(\w+)*/i,
            /android.+lg(\-?[\d\w]+)\s+build/i
            ], [MODEL, [VENDOR, 'LG'], [TYPE, MOBILE]], [

            /android.+(ideatab[a-z0-9\-\s]+)/i                                  // Lenovo
            ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [

            /linux;.+((jolla));/i                                               // Jolla
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

            /((pebble))app\/[\d\.]+\s/i                                         // Pebble
            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [

            /android.+;\s(oppo)\s?([\w\s]+)\sbuild/i                            // OPPO
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

            /crkey/i                                                            // Google Chromecast
            ], [[MODEL, 'Chromecast'], [VENDOR, 'Google']], [

            /android.+;\s(glass)\s\d/i                                          // Google Glass
            ], [MODEL, [VENDOR, 'Google'], [TYPE, WEARABLE]], [

            /android.+;\s(pixel c)\s/i                                          // Google Pixel C
            ], [MODEL, [VENDOR, 'Google'], [TYPE, TABLET]], [

            /android.+;\s(pixel xl|pixel)\s/i                                   // Google Pixel
            ], [MODEL, [VENDOR, 'Google'], [TYPE, MOBILE]], [

            /android.+(\w+)\s+build\/hm\1/i,                                    // Xiaomi Hongmi 'numeric' models
            /android.+(hm[\s\-_]*note?[\s_]*(?:\d\w)?)\s+build/i,               // Xiaomi Hongmi
            /android.+(mi[\s\-_]*(?:one|one[\s_]plus|note lte)?[\s_]*(?:\d\w)?)\s+build/i    // Xiaomi Mi
            ], [[MODEL, /_/g, ' '], [VENDOR, 'Xiaomi'], [TYPE, MOBILE]], [

            /android.+;\s(m[1-5]\snote)\sbuild/i                                // Meizu Tablet
            ], [MODEL, [VENDOR, 'Meizu'], [TYPE, TABLET]], [

            /android.+a000(1)\s+build/i                                         // OnePlus
            ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [

            /android.+[;\/]\s*(RCT[\d\w]+)\s+build/i                            // RCA Tablets
            ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [

            /android.+[;\/]\s*(Venue[\d\s]*)\s+build/i                          // Dell Venue Tablets
            ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [

            /android.+[;\/]\s*(Q[T|M][\d\w]+)\s+build/i                         // Verizon Tablet
            ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [

            /android.+[;\/]\s+(Barnes[&\s]+Noble\s+|BN[RT])(V?.*)\s+build/i     // Barnes & Noble Tablet
            ], [[VENDOR, 'Barnes & Noble'], MODEL, [TYPE, TABLET]], [

            /android.+[;\/]\s+(TM\d{3}.*\b)\s+build/i                           // Barnes & Noble Tablet
            ], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [

            /android.+[;\/]\s*(zte)?.+(k\d{2})\s+build/i                        // ZTE K Series Tablet
            ], [[VENDOR, 'ZTE'], MODEL, [TYPE, TABLET]], [

            /android.+[;\/]\s*(gen\d{3})\s+build.*49h/i                         // Swiss GEN Mobile
            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [

            /android.+[;\/]\s*(zur\d{3})\s+build/i                              // Swiss ZUR Tablet
            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [

            /android.+[;\/]\s*((Zeki)?TB.*\b)\s+build/i                         // Zeki Tablets
            ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [

            /(android).+[;\/]\s+([YR]\d{2}x?.*)\s+build/i,
            /android.+[;\/]\s+(Dragon[\-\s]+Touch\s+|DT)(.+)\s+build/i          // Dragon Touch Tablet
            ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [

            /android.+[;\/]\s*(NS-?.+)\s+build/i                                // Insignia Tablets
            ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [

            /android.+[;\/]\s*((NX|Next)-?.+)\s+build/i                         // NextBook Tablets
            ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [

            /android.+[;\/]\s*(Xtreme\_?)?(V(1[045]|2[015]|30|40|60|7[05]|90))\s+build/i
            ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [                    // Voice Xtreme Phones

            /android.+[;\/]\s*(LVTEL\-?)?(V1[12])\s+build/i                     // LvTel Phones
            ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [

            /android.+[;\/]\s*(V(100MD|700NA|7011|917G).*\b)\s+build/i          // Envizen Tablets
            ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [

            /android.+[;\/]\s*(Le[\s\-]+Pan)[\s\-]+(.*\b)\s+build/i             // Le Pan Tablets
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /android.+[;\/]\s*(Trio[\s\-]*.*)\s+build/i                         // MachSpeed Tablets
            ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [

            /android.+[;\/]\s*(Trinity)[\-\s]*(T\d{3})\s+build/i                // Trinity Tablets
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /android.+[;\/]\s*TU_(1491)\s+build/i                               // Rotor Tablets
            ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [

            /android.+(KS(.+))\s+build/i                                        // Amazon Kindle Tablets
            ], [MODEL, [VENDOR, 'Amazon'], [TYPE, TABLET]], [

            /android.+(Gigaset)[\s\-]+(Q.+)\s+build/i                           // Gigaset Tablets
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /\s(tablet|tab)[;\/]/i,                                             // Unidentifiable Tablet
            /\s(mobile)(?:[;\/]|\ssafari)/i                                     // Unidentifiable Mobile
            ], [[TYPE, util.lowerize], VENDOR, MODEL], [

            /(android.+)[;\/].+build/i                                          // Generic Android Device
            ], [MODEL, [VENDOR, 'Generic']]


        /*//////////////////////////
            // TODO: move to string map
            ////////////////////////////

            /(C6603)/i                                                          // Sony Xperia Z C6603
            ], [[MODEL, 'Xperia Z C6603'], [VENDOR, 'Sony'], [TYPE, MOBILE]], [
            /(C6903)/i                                                          // Sony Xperia Z 1
            ], [[MODEL, 'Xperia Z 1'], [VENDOR, 'Sony'], [TYPE, MOBILE]], [

            /(SM-G900[F|H])/i                                                   // Samsung Galaxy S5
            ], [[MODEL, 'Galaxy S5'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
            /(SM-G7102)/i                                                       // Samsung Galaxy Grand 2
            ], [[MODEL, 'Galaxy Grand 2'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
            /(SM-G530H)/i                                                       // Samsung Galaxy Grand Prime
            ], [[MODEL, 'Galaxy Grand Prime'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
            /(SM-G313HZ)/i                                                      // Samsung Galaxy V
            ], [[MODEL, 'Galaxy V'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
            /(SM-T805)/i                                                        // Samsung Galaxy Tab S 10.5
            ], [[MODEL, 'Galaxy Tab S 10.5'], [VENDOR, 'Samsung'], [TYPE, TABLET]], [
            /(SM-G800F)/i                                                       // Samsung Galaxy S5 Mini
            ], [[MODEL, 'Galaxy S5 Mini'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
            /(SM-T311)/i                                                        // Samsung Galaxy Tab 3 8.0
            ], [[MODEL, 'Galaxy Tab 3 8.0'], [VENDOR, 'Samsung'], [TYPE, TABLET]], [

            /(T3C)/i                                                            // Advan Vandroid T3C
            ], [MODEL, [VENDOR, 'Advan'], [TYPE, TABLET]], [
            /(ADVAN T1J\+)/i                                                    // Advan Vandroid T1J+
            ], [[MODEL, 'Vandroid T1J+'], [VENDOR, 'Advan'], [TYPE, TABLET]], [
            /(ADVAN S4A)/i                                                      // Advan Vandroid S4A
            ], [[MODEL, 'Vandroid S4A'], [VENDOR, 'Advan'], [TYPE, MOBILE]], [

            /(V972M)/i                                                          // ZTE V972M
            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [

            /(i-mobile)\s(IQ\s[\d\.]+)/i                                        // i-mobile IQ
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [
            /(IQ6.3)/i                                                          // i-mobile IQ IQ 6.3
            ], [[MODEL, 'IQ 6.3'], [VENDOR, 'i-mobile'], [TYPE, MOBILE]], [
            /(i-mobile)\s(i-style\s[\d\.]+)/i                                   // i-mobile i-STYLE
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [
            /(i-STYLE2.1)/i                                                     // i-mobile i-STYLE 2.1
            ], [[MODEL, 'i-STYLE 2.1'], [VENDOR, 'i-mobile'], [TYPE, MOBILE]], [

            /(mobiistar touch LAI 512)/i                                        // mobiistar touch LAI 512
            ], [[MODEL, 'Touch LAI 512'], [VENDOR, 'mobiistar'], [TYPE, MOBILE]], [

            /////////////
            // END TODO
            ///////////*/

        ],

        engine : [[

            /windows.+\sedge\/([\w\.]+)/i                                       // EdgeHTML
            ], [VERSION, [NAME, 'EdgeHTML']], [

            /(presto)\/([\w\.]+)/i,                                             // Presto
            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m)\/([\w\.]+)/i,     // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m
            /(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i,                          // KHTML/Tasman/Links
            /(icab)[\/\s]([23]\.[\d\.]+)/i                                      // iCab
            ], [NAME, VERSION], [

            /rv\:([\w\.]+).*(gecko)/i                                           // Gecko
            ], [VERSION, NAME]
        ],

        os : [[

            // Windows based
            /microsoft\s(windows)\s(vista|xp)/i                                 // Windows (iTunes)
            ], [NAME, VERSION], [
            /(windows)\snt\s6\.2;\s(arm)/i,                                     // Windows RT
            /(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s]+\w)*/i,                  // Windows Phone
            /(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i
            ], [NAME, [VERSION, mapper.str, maps.os.windows.version]], [
            /(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i
            ], [[NAME, 'Windows'], [VERSION, mapper.str, maps.os.windows.version]], [

            // Mobile/Embedded OS
            /\((bb)(10);/i                                                      // BlackBerry 10
            ], [[NAME, 'BlackBerry'], VERSION], [
            /(blackberry)\w*\/?([\w\.]+)*/i,                                    // Blackberry
            /(tizen)[\/\s]([\w\.]+)/i,                                          // Tizen
            /(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|contiki)[\/\s-]?([\w\.]+)*/i,
                                                                                // Android/WebOS/Palm/QNX/Bada/RIM/MeeGo/Contiki
            /linux;.+(sailfish);/i                                              // Sailfish OS
            ], [NAME, VERSION], [
            /(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]+)*/i                 // Symbian
            ], [[NAME, 'Symbian'], VERSION], [
            /\((series40);/i                                                    // Series 40
            ], [NAME], [
            /mozilla.+\(mobile;.+gecko.+firefox/i                               // Firefox OS
            ], [[NAME, 'Firefox OS'], VERSION], [

            // Console
            /(nintendo|playstation)\s([wids34portablevu]+)/i,                   // Nintendo/Playstation

            // GNU/Linux based
            /(mint)[\/\s\(]?(\w+)*/i,                                           // Mint
            /(mageia|vectorlinux)[;\s]/i,                                       // Mageia/VectorLinux
            /(joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?(?!chrom)([\w\.-]+)*/i,
                                                                                // Joli/Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware
                                                                                // Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus
            /(hurd|linux)\s?([\w\.]+)*/i,                                       // Hurd/Linux
            /(gnu)\s?([\w\.]+)*/i                                               // GNU
            ], [NAME, VERSION], [

            /(cros)\s[\w]+\s([\w\.]+\w)/i                                       // Chromium OS
            ], [[NAME, 'Chromium OS'], VERSION],[

            // Solaris
            /(sunos)\s?([\w\.]+\d)*/i                                           // Solaris
            ], [[NAME, 'Solaris'], VERSION], [

            // BSD based
            /\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]+)*/i                   // FreeBSD/NetBSD/OpenBSD/PC-BSD/DragonFly
            ], [NAME, VERSION],[

            /(haiku)\s(\w+)/i                                                  // Haiku
            ], [NAME, VERSION],[

            /cfnetwork\/.+darwin/i,
            /ip[honead]+(?:.*os\s([\w]+)*\slike\smac|;\sopera)/i                // iOS
            ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [

            /(mac\sos\sx)\s?([\w\s\.]+\w)*/i,
            /(macintosh|mac(?=_powerpc)\s)/i                                    // Mac OS
            ], [[NAME, 'Mac OS'], [VERSION, /_/g, '.']], [

            // Other
            /((?:open)?solaris)[\/\s-]?([\w\.]+)*/i,                            // Solaris
            /(aix)\s((\d)(?=\.|\)|\s)[\w\.]*)*/i,                               // AIX
            /(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms)/i,
                                                                                // Plan9/Minix/BeOS/OS2/AmigaOS/MorphOS/RISCOS/OpenVMS
            /(unix)\s?([\w\.]+)*/i                                              // UNIX
            ], [NAME, VERSION]
        ]
    };


    /////////////////
    // Constructor
    ////////////////

    var Browser = function (name, version) {
        this[NAME] = name;
        this[VERSION] = version;
    };
    var CPU = function (arch) {
        this[ARCHITECTURE] = arch;
    };
    var Device = function (vendor, model, type) {
        this[VENDOR] = vendor;
        this[MODEL] = model;
        this[TYPE] = type;
    };
    var Engine = Browser;
    var OS = Browser;

    var UAParser = function (uastring, extensions) {

        if (typeof uastring === 'object') {
            extensions = uastring;
            uastring = undefined;
        }

        if (!(this instanceof UAParser)) {
            return new UAParser(uastring, extensions).getResult();
        }

        var ua = uastring || ((window && window.navigator && window.navigator.userAgent) ? window.navigator.userAgent : EMPTY);
        var rgxmap = extensions ? util.extend(regexes, extensions) : regexes;
        var browser = new Browser();
        var cpu = new CPU();
        var device = new Device();
        var engine = new Engine();
        var os = new OS();

        this.getBrowser = function () {
            mapper.rgx.call(browser, ua, rgxmap.browser);
            browser.major = util.major(browser.version); // deprecated
            return browser;
        };
        this.getCPU = function () {
            mapper.rgx.call(cpu, ua, rgxmap.cpu);
            return cpu;
        };
        this.getDevice = function () {
            mapper.rgx.call(device, ua, rgxmap.device);
            return device;
        };
        this.getEngine = function () {
            mapper.rgx.call(engine, ua, rgxmap.engine);
            return engine;
        };
        this.getOS = function () {
            mapper.rgx.call(os, ua, rgxmap.os);
            return os;
        };
        this.getResult = function () {
            return {
                ua      : this.getUA(),
                browser : this.getBrowser(),
                engine  : this.getEngine(),
                os      : this.getOS(),
                device  : this.getDevice(),
                cpu     : this.getCPU()
            };
        };
        this.getUA = function () {
            return ua;
        };
        this.setUA = function (uastring) {
            ua = uastring;
            browser = new Browser();
            cpu = new CPU();
            device = new Device();
            engine = new Engine();
            os = new OS();
            return this;
        };
        return this;
    };

    UAParser.VERSION = LIBVERSION;
    UAParser.BROWSER = {
        NAME    : NAME,
        MAJOR   : MAJOR, // deprecated
        VERSION : VERSION
    };
    UAParser.CPU = {
        ARCHITECTURE : ARCHITECTURE
    };
    UAParser.DEVICE = {
        MODEL   : MODEL,
        VENDOR  : VENDOR,
        TYPE    : TYPE,
        CONSOLE : CONSOLE,
        MOBILE  : MOBILE,
        SMARTTV : SMARTTV,
        TABLET  : TABLET,
        WEARABLE: WEARABLE,
        EMBEDDED: EMBEDDED
    };
    UAParser.ENGINE = {
        NAME    : NAME,
        VERSION : VERSION
    };
    UAParser.OS = {
        NAME    : NAME,
        VERSION : VERSION
    };
    //UAParser.Utils = util;

    ///////////
    // Export
    //////////


    // check js environment
    if (typeof(exports) !== UNDEF_TYPE) {
        // nodejs env
        if (typeof module !== UNDEF_TYPE && module.exports) {
            exports = module.exports = UAParser;
        }
        exports.UAParser = UAParser;
    } else {
        // requirejs env (optional)
        if (typeof(define) === FUNC_TYPE && define.amd) {
            define(function () {
                return UAParser;
            });
        } else if (window) {
            // browser env
            window.UAParser = UAParser;
        }
    }

    // jQuery/Zepto specific (optional)
    // Note:
    //   In AMD env the global scope should be kept clean, but jQuery is an exception.
    //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
    //   and we should catch that.
    var $ = window && (window.jQuery || window.Zepto);
    if (typeof $ !== UNDEF_TYPE) {
        var parser = new UAParser();
        $.ua = parser.getResult();
        $.ua.get = function () {
            return parser.getUA();
        };
        $.ua.set = function (uastring) {
            parser.setUA(uastring);
            var result = parser.getResult();
            for (var prop in result) {
                $.ua[prop] = result[prop];
            }
        };
    }

})(typeof window === 'object' ? window : this);

},{}],75:[function(_dereq_,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],76:[function(_dereq_,module,exports){
arguments[4][35][0].apply(exports,arguments)
},{"dup":35}],77:[function(_dereq_,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],78:[function(_dereq_,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = _dereq_('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = _dereq_('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":77,"_process":50,"inherits":76}],79:[function(_dereq_,module,exports){
'use strict';

// FUNCTIONS //

var isStr = Object.prototype.toString;


// IS FLOAT32ARRAY //

/**
* FUNCTION: isFloat32Array( value )
*	Validates if a value is a Float32Array.
*
* @param {*} value - value to validate
* @returns {Boolean} boolean indicating if a value is a Float32Array
*/
function isFloat32Array( value ) {
	return isStr.call( value ) === '[object Float32Array]';
} // end FUNCTION isFloat32Array()


// EXPORTS //

module.exports = isFloat32Array;

},{}],80:[function(_dereq_,module,exports){
(function (process,global){
'use strict'

var Transform = _dereq_('readable-stream').Transform
var duplexify = _dereq_('duplexify')
var WS = _dereq_('ws')
var Buffer = _dereq_('safe-buffer').Buffer

module.exports = WebSocketStream

function buildProxy (options, socketWrite, socketEnd) {
  var proxy = new Transform({
    objectMode: options.objectMode
  })

  proxy._destroyed = false
  proxy._write = socketWrite
  proxy._flush = socketEnd

  proxy.destroy = function(err) {
    if (this._destroyed) return
      this._destroyed = true

    var self = this
    process.nextTick(function() {
      if (err)
        self.emit('error', err)
      self.emit('close')
    })
  }

  return proxy
}

function WebSocketStream(target, protocols, options) {
  var stream, socket

  var isBrowser = process.title === 'browser'
  var isNative = !!global.WebSocket
  var socketWrite = isBrowser ? socketWriteBrowser : socketWriteNode

  if (protocols && !Array.isArray(protocols) && 'object' === typeof protocols) {
    // accept the "options" Object as the 2nd argument
    options = protocols
    protocols = null

    if (typeof options.protocol === 'string' || Array.isArray(options.protocol)) {
      protocols = options.protocol;
    }
  }

  if (!options) options = {}

  if (options.objectMode === undefined) {
    options.objectMode = !(options.binary === true || options.binary === undefined)
  }

  var proxy = buildProxy(options, socketWrite, socketEnd)

  if (!options.objectMode) {
    proxy._writev = writev
  }

  // browser only: sets the maximum socket buffer size before throttling
  var bufferSize = options.browserBufferSize || 1024 * 512

  // browser only: how long to wait when throttling
  var bufferTimeout = options.browserBufferTimeout || 1000

  // use existing WebSocket object that was passed in
  if (typeof target === 'object') {
    socket = target
  // otherwise make a new one
  } else {
    // special constructor treatment for native websockets in browsers, see
    // https://github.com/maxogden/websocket-stream/issues/82
    if (isNative && isBrowser) {
      socket = new WS(target, protocols)
    } else {
      socket = new WS(target, protocols, options)
    }

    socket.binaryType = 'arraybuffer'
  }

  // was already open when passed in
  if (socket.readyState === socket.OPEN) {
    stream = proxy
  } else {
    stream = duplexify.obj()
    socket.onopen = onopen
  }

  stream.socket = socket

  socket.onclose = onclose
  socket.onerror = onerror
  socket.onmessage = onmessage

  proxy.on('close', destroy)

  var coerceToBuffer = !options.objectMode

  function socketWriteNode(chunk, enc, next) {
    // avoid errors, this never happens unless
    // destroy() is called
    if (socket.readyState !== socket.OPEN) {
      next()
      return
    }

    if (coerceToBuffer && typeof chunk === 'string') {
      chunk = new Buffer(chunk, 'utf8')
    }
    socket.send(chunk, next)
  }

  function socketWriteBrowser(chunk, enc, next) {
    if (socket.bufferedAmount > bufferSize) {
      setTimeout(socketWriteBrowser, bufferTimeout, chunk, enc, next)
      return
    }

    if (coerceToBuffer && typeof chunk === 'string') {
      chunk = new Buffer(chunk, 'utf8')
    }

    try {
      socket.send(chunk)
    } catch(err) {
      return next(err)
    }

    next()
  }

  function socketEnd(done) {
    socket.close()
    done()
  }

  function onopen() {
    stream.setReadable(proxy)
    stream.setWritable(proxy)
    stream.emit('connect')
  }

  function onclose() {
    stream.end()
    stream.destroy()
  }

  function onerror(err) {
    stream.destroy(err)
  }

  function onmessage(event) {
    var data = event.data
    if (data instanceof ArrayBuffer) data = Buffer.from(new Uint8Array(data))
    else data = Buffer.from(data, 'utf8')
    proxy.push(data)
  }

  function destroy() {
    socket.close()
  }

  // this is to be enabled only if objectMode is false
  function writev (chunks, cb) {
    var buffers = new Array(chunks.length)
    for (var i = 0; i < chunks.length; i++) {
      if (typeof chunks[i].chunk === 'string') {
        buffers[i] = Buffer.from(chunks[i], 'utf8')
      } else {
        buffers[i] = chunks[i].chunk
      }
    }

    this._write(Buffer.concat(buffers), 'binary', cb)
  }

  return stream
}

}).call(this,_dereq_('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":50,"duplexify":20,"readable-stream":61,"safe-buffer":65,"ws":81}],81:[function(_dereq_,module,exports){

var ws = null

if (typeof WebSocket !== 'undefined') {
  ws = WebSocket
} else if (typeof MozWebSocket !== 'undefined') {
  ws = MozWebSocket
} else if (typeof window !== 'undefined') {
  ws = window.WebSocket || window.MozWebSocket
}

module.exports = ws

},{}],82:[function(_dereq_,module,exports){
// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy
function wrappy (fn, cb) {
  if (fn && cb) return wrappy(fn)(cb)

  if (typeof fn !== 'function')
    throw new TypeError('need wrapper function')

  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k]
  })

  return wrapper

  function wrapper() {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }
    var ret = fn.apply(this, args)
    var cb = args[args.length-1]
    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k]
      })
    }
    return ret
  }
}

},{}],83:[function(_dereq_,module,exports){
module.exports={
  "name": "videomail-client",
  "version": "2.1.19",
  "description": "A wicked npm package to record videos directly in the browser, wohooo!",
  "author": "Michael Heuberger <michael.heuberger@binarykitchen.com>",
  "contributors": [
    {
      "name": "Michael Heuberger",
      "email": "michael.heuberger@binarykitchen.com"
    }
  ],
  "homepage": "https://videomail.io",
  "repository": {
    "type": "git",
    "url": "https://github.com/binarykitchen/videomail-client.git"
  },
  "license": "CC0-1.0",
  "readmeFilename": "README.md",
  "module": "src/index.js",
  "main": "dist/videomail-client.js",
  "scripts": {
    "test": "gulp test",
    "start": "gulp examples",
    "patch": "./env/dev/release.sh --importance=patch",
    "minor": "./env/dev/release.sh --importance=minor",
    "major": "./env/dev/release.sh --importance=major"
  },
  "engines": {
    "node": "^8.3.0",
    "yarn": "^1.1.0"
  },
  "keywords": [
    "webcam",
    "video",
    "videomail",
    "encoder",
    "getusermedia",
    "audio",
    "recorder"
  ],
  "dependencies": {
    "add-eventlistener-with-options": "1.25.0",
    "animitter": "3.0.0",
    "audio-sample": "1.0.3",
    "canvas-to-buffer": "1.0.9",
    "classlist.js": "1.1.20150312",
    "contains": "0.1.1",
    "create-error": "0.3.1",
    "deepmerge": "2.0.0",
    "defined": "1.0.0",
    "despot": "1.1.3",
    "document-visibility": "1.0.1",
    "element-closest": "2.0.2",
    "filesize": "3.5.10",
    "get-form-data": "1.2.5",
    "hidden": "1.1.1",
    "humanize-duration": "3.10.1",
    "hyperscript": "2.0.2",
    "insert-css": "2.0.0",
    "iphone-inline-video": "2.2.2",
    "is-power-of-two": "1.0.0",
    "keymirror": "0.1.1",
    "number-is-integer": "1.0.1",
    "readystate": "0.3.0",
    "request-frame": "1.5.3",
    "superagent": "3.6.3",
    "ua-parser-js": "0.7.14",
    "websocket-stream": "5.0.1"
  },
  "devDependencies": {
    "babel-polyfill": "6.26.0",
    "babel-preset-env": "1.6.0",
    "babelify": "7.3.0",
    "body-parser": "1.18.2",
    "browserify": "14.4.0",
    "connect-send-json": "1.0.0",
    "del": "3.0.0",
    "glob": "7.1.2",
    "gulp": "3.9.1",
    "gulp-autoprefixer": "4.0.0",
    "gulp-bump": "2.8.0",
    "gulp-bytediff": "1.0.0",
    "gulp-concat": "2.6.1",
    "gulp-connect": "5.0.0",
    "gulp-cssnano": "2.1.2",
    "gulp-derequire": "2.1.0",
    "gulp-if": "2.0.2",
    "gulp-inject-string": "1.1.0",
    "gulp-load-plugins": "1.5.0",
    "gulp-plumber": "1.1.0",
    "gulp-rename": "1.2.2",
    "gulp-sourcemaps": "2.6.1",
    "gulp-standard": "10.1.1",
    "gulp-stylus": "2.6.0",
    "gulp-todo": "5.4.0",
    "gulp-uglify": "3.0.0",
    "gulp-util": "3.0.8",
    "minimist": "1.2.0",
    "nib": "1.1.2",
    "router": "1.3.2",
    "ssl-root-cas": "1.2.4",
    "standard": "10.0.3",
    "tap-summary": "4.0.0",
    "tape": "4.8.0",
    "tape-catch": "1.0.6",
    "tape-run": "3.0.0",
    "vinyl-buffer": "1.0.0",
    "vinyl-source-stream": "1.1.0",
    "watchify": "3.9.0"
  }
}

},{}],84:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _deepmerge = _dereq_('deepmerge');

var _deepmerge2 = _interopRequireDefault(_deepmerge);

var _readystate = _dereq_('readystate');

var _readystate2 = _interopRequireDefault(_readystate);

var _util = _dereq_('util');

var _util2 = _interopRequireDefault(_util);

var _options = _dereq_('./options');

var _options2 = _interopRequireDefault(_options);

var _constants = _dereq_('./constants');

var _constants2 = _interopRequireDefault(_constants);

var _events = _dereq_('./events');

var _events2 = _interopRequireDefault(_events);

var _collectLogger = _dereq_('./util/collectLogger');

var _collectLogger2 = _interopRequireDefault(_collectLogger);

var _eventEmitter = _dereq_('./util/eventEmitter');

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _container = _dereq_('./wrappers/container');

var _container2 = _interopRequireDefault(_container);

var _replay = _dereq_('./wrappers/visuals/replay');

var _replay2 = _interopRequireDefault(_replay);

var _optionsWrapper = _dereq_('./wrappers/optionsWrapper');

var _optionsWrapper2 = _interopRequireDefault(_optionsWrapper);

var _browser = _dereq_('./util/browser');

var _browser2 = _interopRequireDefault(_browser);

var _resource = _dereq_('./resource');

var _resource2 = _interopRequireDefault(_resource);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var collectLogger;
var browser;

function adjustOptions() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var localOptions = (0, _deepmerge2.default)(_options2.default, options);

  collectLogger = collectLogger || new _collectLogger2.default(localOptions);

  localOptions.logger = collectLogger;
  localOptions.debug = localOptions.logger.debug;

  _optionsWrapper2.default.addFunctions(localOptions);

  return localOptions;
}

function getBrowser(localOptions) {
  if (!browser) {
    browser = new _browser2.default(localOptions);
  }

  return browser;
}

var VideomailClient = function VideomailClient(options) {
  var localOptions = adjustOptions(options);
  var container = new _container2.default(localOptions);
  var debug = localOptions.debug;

  var replay;

  _eventEmitter2.default.call(this, localOptions, 'VideomailClient');

  // expose all possible events
  this.events = _events2.default;

  function build() {
    var building = false;

    _readystate2.default.interactive(function (previousState) {
      debug('Client: interactive(),', 'previousState =', previousState + ',', '!building =', !building + ',', '!isBuilt() =', !container.isBuilt());

      // it can happen that it gets called twice, i.E. when an error is thrown
      // in the middle of the build() fn
      if (!building && !container.isBuilt()) {
        building = true;
        try {
          container.build();
        } catch (exc) {
          throw exc;
        } finally {
          building = false;
        }
      }
    });
  }

  this.show = function () {
    if (container.isBuilt()) {
      container.show();
    } else {
      this.once(_events2.default.BUILT, container.show);
    }
  };

  // automatically adds a <video> element inside the given parentElement and loads
  // it with the videomail
  this.replay = function (videomail, parentElement) {
    function buildReplay() {
      if (typeof parentElement === 'string') {
        parentElement = document.getElementById(parentElement);
      }

      if (!parentElement) {
        if (!container.isBuilt()) {
          // this will try build all over again
          container.build();
        }

        if (!container.hasElement()) {
          // if container.setElement() failed too, then complain
          _readystate2.default.removeAllListeners();
          throw new Error('Unable to replay video without a container nor parent element.');
        }
      } else {
        if (container.isOutsideElementOf(parentElement)) {
          replay = new _replay2.default(parentElement, localOptions);
          replay.build();
        }
      }

      if (!replay) {
        replay = container.getReplay();
      }

      if (!parentElement) {
        parentElement = replay.getParentElement();
      }

      if (videomail) {
        videomail = container.addPlayerDimensions(videomail, parentElement);
      }

      if (container.isOutsideElementOf(parentElement)) {
        // replay element must be outside of the container
        container.hideForm({ deep: true });
      } else {
        container.loadForm(videomail);
      }

      // slight delay needed to avoid HTTP 416 errors (request range unavailable)
      setTimeout(function () {
        replay.setVideomail(videomail);
        container.showReplayOnly();
      }, 10e2); // not sure, but probably can be reduced a bit
    }

    _readystate2.default.interactive(buildReplay);
  };

  this.startOver = function (params) {
    if (replay) {
      replay.hide();
      replay.reset();
    }

    container.startOver(params);
  };

  this.unload = function (e) {
    _readystate2.default.removeAllListeners();
    container.unload(e);
  };

  this.hide = function () {
    container.hide();
  };

  this.get = function (key, cb) {
    new _resource2.default(localOptions).get(key, function (err, videomail) {
      if (err) {
        cb(err);
      } else {
        cb(null, container.addPlayerDimensions(videomail));
      }
    });
  };

  this.canRecord = function () {
    return getBrowser(localOptions).canRecord();
  };

  // return true when a video has been recorded but is not sent yet
  this.isDirty = function () {
    return container.isDirty();
  };

  this.submit = function () {
    container.submit();
  };

  this.getLogLines = function () {
    if (localOptions.logger && localOptions.logger.getLines) {
      return localOptions.logger.getLines();
    }
  };

  build();
};

_util2.default.inherits(VideomailClient, _eventEmitter2.default);

Object.keys(_constants2.default.public).forEach(function (name) {
  VideomailClient[name] = _constants2.default.public[name];
});

// just another convenient thing
VideomailClient.events = _events2.default;

exports.default = VideomailClient;

},{"./constants":85,"./events":86,"./options":87,"./resource":88,"./util/browser":91,"./util/collectLogger":92,"./util/eventEmitter":93,"./wrappers/container":100,"./wrappers/optionsWrapper":103,"./wrappers/visuals/replay":112,"deepmerge":15,"readystate":62,"util":78}],85:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
// constants (changing these only break down functionality, so be careful)

exports.default = {
  SITE_NAME_LABEL: 'x-videomail-site-name',
  VERSION_LABEL: 'videomailClientVersion',

  public: {
    ENC_TYPE_APP_JSON: 'application/json',
    ENC_TYPE_FORM: 'application/x-www-form-urlencoded'
  }
};

},{}],86:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keymirror = _dereq_('keymirror');

var _keymirror2 = _interopRequireDefault(_keymirror);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _keymirror2.default)({
  BUILT: null, // all dom elements are ready, are in the DOM
  FORM_READY: null, // form is ready, available in the DOM
  LOADING_USER_MEDIA: null, // asking for webcam access
  USER_MEDIA_READY: null, // user media (= webcam) is ready, loaded
  CONNECTING: null, // socket is connecting to server
  CONNECTED: null, // socket is connected to server
  DISCONNECTED: null, // socket to server is disconnected
  COUNTDOWN: null, // countdown for recording has started
  RECORDING: null, // webcam is recording
  STOPPING: null, // recording is being stopped (= preview)
  PROGRESS: null, // start sending
  BEGIN_AUDIO_ENCODING: null, // encoding video
  BEGIN_VIDEO_ENCODING: null, // encoding video
  RESETTING: null, // resetting everything to go back to initial state
  PAUSED: null, // recording is being paused
  RESUMING: null, // recording is resumed
  PREVIEW: null, // video preview is set
  PREVIEW_SHOWN: null, // video preview is shown
  REPLAY_SHOWN: null, // submitted video is shown
  INVALID: null, // form is invalid
  VALIDATING: null, // form is being validated
  VALID: null, // form is valid
  SUBMITTING: null, // form is being submitted
  SUBMITTED: null, // form has been successfully submitted
  ERROR: null, // an error occured
  BLOCKING: null, // something serious, most likely an error, is shown and blocks
  SENDING_FIRST_FRAME: null, // emitted before the first frame is being computed
  FIRST_FRAME_SENT: null, // emitted once when fist frame has been sent to server
  HIDE: null, // emitted when hidden
  NOTIFYING: null, // notifies user about something (not blocking)
  ENABLING_AUDIO: null, // about to enable audio
  DISABLING_AUDIO: null, // about to disable audio
  LOADED_META_DATA: null, // raised when webcam knows its dimensions
  EVENT_EMITTED: null, // for debugging only, is emitted when an event is emitted lol,
  GOING_BACK: null, // switch from replaying back to recording
  STARTING_OVER: null, // starting all over again back to its inital state
  ASKING_WEBCAM_PERMISSION: null, // when about to ask for webcam permissions
  VISIBLE: null, // document just became visible
  INVISIBLE: null // document just became INvisible
});

},{"keymirror":44}],87:[function(_dereq_,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _package = _dereq_('../package.json');

var PRODUCTION = process.env.NODE_ENV === 'production';

exports.default = {
  logger: null, // define logging instance. leave null for default, console.
  logStackSize: 30, // limits the stack size of log outputs to collect
  verbose: !PRODUCTION, // set true to log more info
  baseUrl: 'https://videomail.io', // leave as it, permanent url to post videos
  socketUrl: 'wss://videomail.io', // leave as it, permanent url to send frames
  siteName: 'videomail-client-demo', // Required for API, use https://videomail.io/whitelist
  cache: true, // reduces GET queries when loading videos
  insertCss: true, // inserts predefined CSS, see examples
  enablePause: true, // enable pause/resume button
  enableAutoPause: true, // automatically pauses when window becomes inactive
  enableSpace: true, // hitting space can pause recording
  disableSubmit: false, // set this to true if you do not want to submit videos,
  // but just want to record and replay these temporarily
  enableAutoValidation: true, // automatically validates all form inputs if any exist and
  // does not /enable disable submit button after recording
  // when something else seems invalid.

  enctype: 'application/json', // enctype for the form submission. currently implemented are:
  // 'application/json' and 'application/x-www-form-urlencoded'

  // default CSS selectors you can alter, see examples
  selectors: {
    containerId: 'videomail',
    replayClass: 'replay',
    userMediaClass: 'userMedia',
    visualsClass: 'visuals',
    buttonClass: null, // can also be used as a default class for all buttons
    buttonsClass: 'buttons',

    recordButtonClass: 'record',
    pauseButtonClass: 'pause',
    resumeButtonClass: 'resume',
    previewButtonClass: 'preview',
    recordAgainButtonClass: 'recordAgain',
    submitButtonClass: 'submit',

    subjectInputName: 'subject', // the form input name for subject
    fromInputName: 'from', // the form input name for the from email
    toInputName: 'to', // the form input name for the to email
    bodyInputName: 'body', // the form input name for the message (body)

    keyInputName: 'videomail_key',
    parentKeyInputName: 'videomail_parent_key',
    aliasInputName: 'videomail_alias',

    formId: null, // automatically detects form if any
    submitButtonId: null, // semi-automatically detects submit button in the form
    // but if that does not work, try using the
    submitButtonSelector: null // submitButtonSelector
  },

  audio: {
    enabled: false, // set to true for experimential audio recording
    'switch': false, // enables a switcher for audio recording (on/off)
    volume: 0.2, // must be between 0 .. 1 but 0.20 is recommeded to avoid
    // distorting at the higher volume peaks
    bufferSize: 1024 // decides how often the audio is being sampled, must be a power of two.
    // the higher the less traffic, but harder to adjust with rubberband
    // to match with the video length on server side during encoding
  },

  video: {
    fps: 15, // depends on your connection
    limitSeconds: 30, // recording automatically stops after that limit
    countdown: 3, // set it to 0 or false to disable it

    // it is recommended to set one dimension only and leave the other one to auto
    // because each webcam has a different aspect ratio

    width: 'auto', // or use an integer for exact pixels
    height: 'auto' // or use an integer for exact pixels
  },

  image: {
    quality: 0.44,
    types: ['webp', 'jpeg'] // recommended settings to make most of all browsers
  },

  // alter these text for internationalisation
  text: {
    pausedHeader: 'Paused',
    pausedHint: null,
    sending: 'Teleporting',
    encoding: 'Encoding',
    limitReached: 'Limit reached',
    buttons: {
      'record': 'Record video',
      'recordAgain': 'Record again',
      'resume': 'Resume',
      'pause': 'Pause',
      'preview': 'Preview'
    }
  },

  notifier: {
    entertain: false, // when true, user is entertained while waiting, see examples
    entertainClass: 'bg',
    entertainLimit: 6,
    entertainInterval: 9000
  },

  timeouts: {
    userMedia: 20e3, // in milliseconds, increase if you want user give more time to enable webcam
    connection: 1e4, // in seconds, increase if api is slow
    pingInterval: 45e3 // in milliseconds, keeps webstream (connection) alive when pausing
  },

  callbacks: {
    // a custom callback to tweak form data before posting to server
    // this is for advanced use only and shouldn't be used if possible
    adjustFormDataBeforePosting: null
  },

  defaults: {
    from: null, // define default FROM email address
    to: null, // define default TO email address
    subject: null, // define default subject line
    body: null // define default body content
  },

  // a special flag to indicate that everything to be initialised
  // serves only for playing existing videomails with the replay function
  playerOnly: false,

  // show errors inside the container?
  displayErrors: true,

  // true = all form inputs get disabled and disappear when browser can't record
  adjustFormOnBrowserError: false,

  // when true, any errors will be sent to the videomail server for analysis
  // ps: can be a function too returning a boolean
  reportErrors: false,

  // just for testing purposes to simulate browser agent handling
  fakeUaString: null,

  version: _package.version
};

}).call(this,_dereq_('_process'))

},{"../package.json":83,"_process":50}],88:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (options) {
  var cache = {};

  function applyDefaultValue(videomail, name) {
    if (options.defaults[name] && !videomail[name]) {
      videomail[name] = options.defaults[name];
    }

    return videomail;
  }

  function applyDefaultValues(videomail) {
    if (options.defaults) {
      videomail = applyDefaultValue(videomail, 'from');
      videomail = applyDefaultValue(videomail, 'to');
      videomail = applyDefaultValue(videomail, 'subject');
      videomail = applyDefaultValue(videomail, 'body');
    }

    return videomail;
  }

  function packError(err, res) {
    if (res && res.body && res.body.error) {
      // use the server generated text instead of the superagent's default text
      err = res.body.error;

      if (!err.message && res.text) {
        err.message = res.text;
      }
    }

    return err;
  }

  function fetch(alias, cb) {
    _superagent2.default.get('/videomail/' + alias + '/snapshot').set('Accept', 'application/json').set(_constants2.default.SITE_NAME_LABEL, options.siteName).timeout(options.timeouts.connection).end(function (err, res) {
      err = packError(err, res);

      if (err) {
        cb(err);
      } else {
        var videomail = res.body;

        if (options.cache) {
          cache[CACHE_KEY] = videomail;
        }

        cb(null, videomail);
      }
    });
  }

  function write(method, videomail, identifier, cb) {
    if (!cb) {
      cb = identifier;
      identifier = null;
    }

    var queryParams = {};

    var url = options.baseUrl + '/videomail/';
    var request;

    if (identifier) {
      url += identifier;
    }

    request = (0, _superagent2.default)(method, url);

    queryParams[_constants2.default.SITE_NAME_LABEL] = options.siteName;

    request.query(queryParams).send(videomail).timeout(options.timeout).end(function (err, res) {
      err = packError(err, res);

      if (err) {
        cb(err);
      } else {
        if (options.cache && videomail[CACHE_KEY]) {
          cache[videomail[CACHE_KEY]] = res.body.videomail;
        }

        cb(null, res.body.videomail, res.body);
      }
    });
  }

  this.get = function (alias, cb) {
    if (options.cache && cache[alias]) {
      // keep all callbacks async
      setTimeout(function () {
        cb(null, cache[alias]);
      }, 0);
    } else {
      fetch(alias, cb);
    }
  };

  this.reportError = function (err, cb) {
    var queryParams = {};
    var url = options.baseUrl + '/client-error/';
    var request = (0, _superagent2.default)('post', url);

    queryParams[_constants2.default.SITE_NAME_LABEL] = options.siteName;

    request.query(queryParams).send(err).timeout(options.timeout).end(function (err, res) {
      err = packError(err, res);
      if (err) {
        cb && cb(err);
      } else {
        cb && cb();
      }
    });
  };

  this.post = function (videomail, cb) {
    videomail = applyDefaultValues(videomail);

    // always good to know the version of the client
    // the videomail was submitted with
    videomail[_constants2.default.VERSION_LABEL] = options.version;

    if (options.callbacks.adjustFormDataBeforePosting) {
      options.callbacks.adjustFormDataBeforePosting(videomail, function (err, adjustedVideomail) {
        if (err) {
          cb(err);
        } else {
          write('post', adjustedVideomail, cb);
        }
      });
    } else {
      write('post', videomail, cb);
    }
  };

  this.put = function (videomail, cb) {
    write('put', videomail, videomail.key, cb);
  };

  this.form = function (formData, url, cb) {
    var formType;

    switch (options.enctype) {
      case _constants2.default.public.ENC_TYPE_APP_JSON:
        formType = 'json';
        break;
      case _constants2.default.public.ENC_TYPE_FORM:
        formType = 'form';
        break;
      default:
        // keep all callbacks async
        setTimeout(function () {
          cb(new Error('Invalid enctype given: ' + options.enctype));
        }, 0);
    }

    if (formType) {
      _superagent2.default.post(url).type(formType).send(formData).timeout(options.timeout).end(function (err, res) {
        err = packError(err, res);

        if (err) {
          cb(err);
        } else {
          cb(null, res);
        }
      });
    }
  };
};

var _superagent = _dereq_('superagent');

var _superagent2 = _interopRequireDefault(_superagent);

var _constants = _dereq_('./constants');

var _constants2 = _interopRequireDefault(_constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CACHE_KEY = 'alias';

},{"./constants":85,"superagent":67}],89:[function(_dereq_,module,exports){
'use strict';

module.exports = '@-webkit-keyframes a{0%{opacity:.9}35%{opacity:.9}50%{opacity:.1}85%{opacity:.1}to{opacity:.9}}@keyframes a{0%{opacity:.9}35%{opacity:.9}50%{opacity:.1}85%{opacity:.1}to{opacity:.9}}.IIV::-webkit-media-controls-play-button,.IIV::-webkit-media-controls-start-playback-button{opacity:0;pointer-events:none;width:5px}.videomail .visuals{position:relative}.videomail .visuals video.replay{width:100%;height:100%}.videomail .countdown,.videomail .pausedHeader,.videomail .pausedHint,.videomail .recordNote,.videomail .recordTimer{margin:0;height:auto}.videomail .countdown,.videomail .paused,.videomail .recordNote,.videomail .recordTimer,.videomail noscript{position:absolute}.videomail .countdown,.videomail .pausedHeader,.videomail .pausedHint,.videomail .recordNote,.videomail .recordTimer,.videomail noscript{font-weight:700}.videomail .countdown,.videomail .paused,.videomail noscript{width:100%;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.videomail .countdown,.videomail .pausedHeader,.videomail .pausedHint{text-align:center;text-shadow:0 0 2px #fff}.videomail .countdown,.videomail .pausedHeader{opacity:.85;font-size:440%}.videomail .pausedHint{font-size:150%}.videomail .recordNote,.videomail .recordTimer{right:.7em;background:hsla(0,0%,4%,.8);padding:.4em .4em .3em;transition:all 1s ease;color:#00d814;font-family:monospace;opacity:.9}.videomail .recordNote.near,.videomail .recordTimer.near{color:#eb9369}.videomail .recordNote.nigh,.videomail .recordTimer.nigh{color:#ea4b2a}.videomail .recordTimer{top:.7em}.videomail .recordNote{top:3.6em}.videomail .recordNote:before{content:"REC";-webkit-animation:a 1s infinite;animation:a 1s infinite}.videomail .notifier{overflow:hidden;box-sizing:border-box;height:100%}.videomail .radioGroup{display:block}.videomail video{margin-bottom:0}';

},{}],90:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (userMedia, options) {
  var scriptProcessor;
  var audioInput;
  var vcAudioContext;

  function hasAudioContext() {
    return !!getAudioContext();
  }

  function getAudioContext() {
    // instantiate only once
    if (!vcAudioContext) {
      var AudioContext = window.AudioContext || window.webkitAudioContext;
      vcAudioContext = new AudioContext();
    }

    return vcAudioContext;
  }

  function onAudioProcess(e, cb) {
    if (!userMedia.isRecording() || userMedia.isPaused()) {
      return;
    }

    // Returns a Float32Array containing the PCM data associated with the channel,
    // defined by the channel parameter (with 0 representing the first channel)
    var float32Array = e.inputBuffer.getChannelData(0);

    cb(new _audioSample2.default(float32Array));
  }

  this.init = function (localMediaStream) {
    options.debug('AudioRecorder: init()');

    // creates an audio node from the microphone incoming stream
    var volume = getAudioContext().createGain();

    try {
      audioInput = getAudioContext().createMediaStreamSource(localMediaStream);
    } catch (exc) {
      throw _videomailError2.default.create('Webcam has no audio', exc.toString(), options);
    }

    if (!(0, _isPowerOfTwo2.default)(options.audio.bufferSize)) {
      throw _videomailError2.default.create('Audio buffer size must be a power of two.', options);
    } else if (!options.audio.volume || options.audio.volume > 1) {
      throw _videomailError2.default.create('Audio volume must be between zero and one.', options);
    }

    volume.gain.value = options.audio.volume;

    // Create a ScriptProcessorNode with the given bufferSize and
    // a single input and output channel
    scriptProcessor = getAudioContext().createScriptProcessor(options.audio.bufferSize, CHANNELS, CHANNELS);

    // connect stream to our scriptProcessor
    audioInput.connect(scriptProcessor);

    // connect our scriptProcessor to the previous destination
    scriptProcessor.connect(getAudioContext().destination);

    // connect volume
    audioInput.connect(volume);
    volume.connect(scriptProcessor);
  };

  this.record = function (cb) {
    options.debug('AudioRecorder: record()');

    scriptProcessor.onaudioprocess = function (e) {
      onAudioProcess(e, cb);
    };
  };

  this.stop = function () {
    options.debug('AudioRecorder: stop()');

    if (scriptProcessor) {
      scriptProcessor.onaudioprocess = undefined;
    }

    if (audioInput) {
      audioInput.disconnect();
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/close
    if (hasAudioContext()) {
      if (getAudioContext().close) {
        getAudioContext().close().then(function () {
          options.debug('AudioRecorder: audio context is closed');
          vcAudioContext = null;
        }).catch(function (err) {
          throw _videomailError2.default.create(err, options);
        });
      } else {
        vcAudioContext = null;
      }
    }
  };

  this.getSampleRate = function () {
    if (hasAudioContext()) {
      return getAudioContext().sampleRate;
    } else {
      return -1;
    }
  };
};

var _isPowerOfTwo = _dereq_('is-power-of-two');

var _isPowerOfTwo2 = _interopRequireDefault(_isPowerOfTwo);

var _audioSample = _dereq_('audio-sample');

var _audioSample2 = _interopRequireDefault(_audioSample);

var _videomailError = _dereq_('./videomailError');

var _videomailError2 = _interopRequireDefault(_videomailError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CHANNELS = 1;

// for inspiration see
// https://github.com/saebekassebil/microphone-stream

// todo code needs rewrite

},{"./videomailError":98,"audio-sample":3,"is-power-of-two":41}],91:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _uaParserJs = _dereq_('ua-parser-js');

var _uaParserJs2 = _interopRequireDefault(_uaParserJs);

var _defined = _dereq_('defined');

var _defined2 = _interopRequireDefault(_defined);

var _videomailError = _dereq_('./videomailError');

var _videomailError2 = _interopRequireDefault(_videomailError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Browser = function Browser(options) {
  options = options || {};

  var firefoxDownload = 'http://www.mozilla.org/firefox/update/';
  var edgeDownload = 'https://www.microsoft.com/en-us/download/details.aspx?id=48126';
  var chromeDownload = 'http://www.google.com/chrome/';
  var chromiumDownload = 'http://www.chromium.org/getting-involved/download-chromium';
  var browseHappyLink = 'http://browsehappy.com';
  var ua = (0, _defined2.default)(options.fakeUaString, typeof window !== 'undefined' && window.navigator && window.navigator.userAgent, '');

  var uaParser = new _uaParserJs2.default(ua).getResult();

  var isIOS = uaParser.os.name === 'iOS';
  var browserVersion = parseFloat(uaParser.browser.version);
  var isChrome = uaParser.browser.name === 'Chrome';
  var isChromium = uaParser.browser.name === 'Chromium';
  var firefox = uaParser.browser.name === 'Firefox';
  var osVersion = parseFloat(uaParser.os.version);
  var isWindows = uaParser.os.name === 'Windows';
  var isEdge = uaParser.browser.name === 'Edge' || isWindows && osVersion >= 10;
  var isIE = /IE/.test(uaParser.browser.name);
  var isSafari = /Safari/.test(uaParser.browser.name);
  var isOpera = /Opera/.test(uaParser.browser.name);
  var isAndroid = /Android/.test(uaParser.os.name);
  var chromeBased = isChrome || isChromium;

  var isOkSafari = isSafari && browserVersion >= 11;
  var isOkIOS = isIOS && osVersion >= 11;
  var isBadIOS = isIOS && osVersion < 11;

  var okBrowser = chromeBased || firefox || isAndroid || isOpera || isEdge || isOkSafari || isOkIOS;

  var self = this;

  var videoType;

  function getRecommendation() {
    var warning;

    if (firefox) {
      if (isIOS) {
        warning = 'Firefox on iOS is not ready for webcams yet. Hopefully in near future ...';
      } else {
        warning = 'Probably you need to <a href="' + firefoxDownload + '" target="_blank">' + 'upgrade Firefox</a> to fix this.';
      }
    } else if (isChrome) {
      if (isIOS) {
        warning = 'Chrome on iOS is not ready for webcams yet. Hopefully in near future ...';
      } else {
        warning = 'Probably you need to <a href="' + chromeDownload + '" target="_blank">' + 'upgrade Chrome</a> to fix this.';
      }
    } else if (isChromium) {
      warning = 'Probably you need to <a href="' + chromiumDownload + '" target="_blank">' + 'upgrade Chromium</a> to fix this.';
    } else if (isIE) {
      warning = 'Instead of Internet Explorer you need to upgrade to' + ' <a href="' + edgeDownload + '" target="_blank">Edge</a>.';
    } else if (isSafari) {
      warning = 'Safari below version 11 has no webcam support.<br/>Better upgrade Safari or pick' + ' <a href="' + chromeDownload + '" target="_blank">Chrome</a>,' + ' <a href="' + firefoxDownload + '" target="_blank">Firefox</a> or Android.';
    }

    return warning;
  }

  function getUserMediaWarning() {
    var warning;

    if (isBadIOS) {
      warning = 'On iPads/iPhones below iOS v11 this webcam feature is missing.<br/><br/>' + 'For now, we recommend you to upgrade iOS or to use an Android device.';
    } else {
      warning = getRecommendation();
    }

    if (!warning) {
      if (self.isChromeBased() || self.isFirefox() || isSafari) {
        warning = 'For the webcam feature, your browser needs an upgrade.';
      } else {
        warning = 'Hence we recommend you to use either ' + '<a href="' + chromeDownload + '" target="_blank">Chrome</a>, ' + '<a href="' + firefoxDownload + '" target="_blank">Firefox</a>, ' + '<a href="' + edgeDownload + '" target="_blank">Edge</a> or Android.';
      }
    }

    return warning;
  }

  function getPlaybackWarning() {
    var warning = getRecommendation();

    if (!warning) {
      warning = '<a href="' + browseHappyLink + '" target="_blank">Upgrading your browser</a> might help.';
    }

    return warning;
  }

  function canPlayType(video, type) {
    var canPlayType;

    if (video && video.canPlayType) {
      canPlayType = video.canPlayType('video/' + type);
    }

    return canPlayType;
  }

  // just temporary
  this.canRecord = function () {
    var hasNavigator = typeof navigator !== 'undefined';
    var canRecord = false;

    if (hasNavigator && navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
      canRecord = true;
    } else {
      var getUserMediaType = hasNavigator && _typeof(navigator.getUserMedia_);

      canRecord = getUserMediaType === 'function';
    }

    return canRecord;
  };

  this.checkRecordingCapabilities = function () {
    var err;

    if (!okBrowser || !this.canRecord()) {
      var classList = [];

      if (isBadIOS) {
        classList.push(_videomailError2.default.IOS_PROBLEM);
      } else {
        classList.push(_videomailError2.default.BROWSER_PROBLEM);
      }

      err = _videomailError2.default.create({
        message: 'Sorry, your browser is unable to use webcams'
      }, getUserMediaWarning(), options, {
        classList: classList
      });
    }

    return err;
  };

  this.checkPlaybackCapabilities = function (video) {
    options.debug('Browser: checkPlaybackCapabilities()');

    var err;
    var message;

    if (!video) {
      message = 'No HTML5 support for video tag!';
    } else if (!this.getVideoType(video)) {
      message = 'Your old browser cannot support modern video codecs';
    } else if (!video.setAttribute) {
      // fixes "Not implemented" error on older browsers
      message = 'Unable to set video attributes in your old browser';
    }

    if (message) {
      err = _videomailError2.default.create(message, getPlaybackWarning(), options);
    }

    return err;
  };

  this.checkBufferTypes = function () {
    var err;

    if (typeof window === 'undefined' || typeof window.atob === 'undefined') {
      err = _videomailError2.default.create('atob is not supported', options);
    } else if (typeof window.ArrayBuffer === 'undefined') {
      err = _videomailError2.default.create('ArrayBuffers are not supported', options);
    } else if (typeof window.Uint8Array === 'undefined') {
      err = _videomailError2.default.create('Uint8Arrays are not supported', options);
    }

    return err;
  };

  this.getVideoType = function (video) {
    if (!videoType) {
      // there is a bug in canPlayType within chrome for mp4
      if (canPlayType(video, 'mp4') && !chromeBased) {
        videoType = 'mp4';
      } else if (canPlayType(video, 'webm')) {
        videoType = 'webm';
      }
    }

    return videoType;
  };

  this.getNoAccessIssue = function () {
    var message = 'Unable to access webcam';
    var explanation;

    if (this.isChromeBased()) {
      explanation = 'Click on the allow button to grant access to your webcam.';
    } else if (this.isFirefox()) {
      explanation = 'Please grant Firefox access to your webcam.';
    } else {
      explanation = 'Your system does not let your browser access your webcam.';
    }

    return _videomailError2.default.create(message, explanation, options);
  };

  this.isChromeBased = function () {
    return chromeBased;
  };

  this.isFirefox = function () {
    return firefox;
  };

  this.isEdge = function () {
    return isEdge;
  };

  this.isAndroid = function () {
    return isAndroid;
  };

  this.isMobile = function () {
    return uaParser.device.type === 'mobile';
  };

  this.isOkSafari = function () {
    return isOkSafari;
  };

  this.getUsefulData = function () {
    return {
      browser: uaParser.browser,
      device: uaParser.device,
      os: uaParser.os,
      engine: uaParser.engine,
      userAgent: ua
    };
  };
};

exports.default = Browser;

// so that we also can require() it from videomailError.js within

module.exports = Browser;

},{"./videomailError":98,"defined":16,"ua-parser-js":74}],92:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function () {
  var localOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var browser = new _browser2.default(localOptions);
  var logger = localOptions.logger || console;
  var containerId = localOptions.selectors && localOptions.selectors.containerId || 'undefined container id';
  var stack = [];

  function lifo(level, parameters) {
    var line = _util2.default.format.apply(_util2.default, parameters);

    if (stack.length > localOptions.logStackSize) {
      stack.pop();
    }

    stack.push('[' + level + '] ' + line);

    return line;
  }

  function addContainerId(firstArgument) {
    return '#' + containerId + ' [' + new Date().toLocaleTimeString() + '] > ' + firstArgument;
  }

  // workaround: since we cannot overwrite console.log without having the correct file and line number
  // we'll use groupCollapsed() and trace() instead to get these.
  this.debug = function () {
    // always add it for better client error reports
    var args = [].slice.call(arguments, 0);
    args[0] = addContainerId(args[0]);

    var output = lifo('debug', args);

    if (localOptions.verbose) {
      if (browser.isFirefox()) {
        logger.debug(output);
      } else if (logger.groupCollapsed) {
        logger.groupCollapsed(output);
        logger.trace('Trace');
        logger.groupEnd();
      } else if (logger.debug) {
        logger.debug(output);
      } else {
        // last resort if everything else fails for any weird reasons
        console.log(output);
      }
    }
  };

  this.error = function () {
    var args = [].slice.call(arguments, 0);
    args[0] = addContainerId(args[0]);

    logger.error(lifo('error', args));
  };

  this.warn = function () {
    var args = [].slice.call(arguments, 0);
    args[0] = addContainerId(args[0]);

    logger.warn(lifo('warn', args));
  };

  this.getLines = function () {
    return stack;
  };
};

var _util = _dereq_('util');

var _util2 = _interopRequireDefault(_util);

var _browser = _dereq_('./browser');

var _browser2 = _interopRequireDefault(_browser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

},{"./browser":91,"util":78}],93:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (options, name) {
  this.emit = function (event) {
    var args = Array.prototype.slice.call(arguments, 0);

    if (!event) {
      throw _videomailError2.default.create('You cannot emit without an event.', options);
    }

    // Automatically convert errors to videomail errors
    if (event === _events2.default.ERROR) {
      var err = args[1];

      err = _videomailError2.default.create(err, options);

      args[1] = err;
    }

    if (options.debug) {
      if (event !== 'removeListener' && event !== 'newListener') {
        var moreArguments;

        if (args[1]) {
          moreArguments = args.slice(1);
        }

        if (moreArguments) {
          options.debug('%s emits: %s', name, event, moreArguments);
        } else {
          options.debug('%s emits: %s', name, event);
        }
      }
    }

    var result = _despot2.default.emit.apply(_despot2.default, args);

    // Todo: have this emitted through a configuration because it is pretty noisy
    // if (event !== Events.EVENT_EMITTED)
    //     this.emit(Events.EVENT_EMITTED, event)

    return result;
  };

  this.on = function (eventName, cb) {
    return _despot2.default.on(eventName, cb);
  };

  this.once = function (eventName, cb) {
    return _despot2.default.once(eventName, cb);
  };

  this.listeners = function (eventName) {
    return _despot2.default.listeners(eventName);
  };

  this.removeListener = function (eventName, cb) {
    return _despot2.default.removeListener(eventName, cb);
  };

  this.removeAllListeners = function () {
    _despot2.default.removeAllListeners();
  };
};

var _despot = _dereq_('despot');

var _despot2 = _interopRequireDefault(_despot);

var _videomailError = _dereq_('./videomailError');

var _videomailError2 = _interopRequireDefault(_videomailError);

var _events = _dereq_('./../events');

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

},{"./../events":86,"./videomailError":98,"despot":17}],94:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _filesize2 = _dereq_('filesize');

var _filesize3 = _interopRequireDefault(_filesize2);

var _humanizeDuration = _dereq_('humanize-duration');

var _humanizeDuration2 = _interopRequireDefault(_humanizeDuration);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// todo get rid of this class and use those imports directly

exports.default = {
  filesize: function filesize(bytes, round) {
    return (0, _filesize3.default)(bytes, {
      round: round
    });
  },

  toTime: function toTime(t) {
    return (0, _humanizeDuration2.default)(t);
  }
};

},{"filesize":24,"humanize-duration":31}],95:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
// taken from
// https://bbc.github.io/tal/jsdoc/events_mediaevent.js.html

exports.default = [
// The user agent begins looking for media data, as part of
// the resource selection algorithm.
'loadstart',

// The user agent is intentionally not currently fetching media data,
// but does not have the entire media resource downloaded. networkState equals NETWORK_IDLE
'suspend',

// Playback has begun. Fired after the play() method has returned,
// or when the autoplay attribute has caused playback to begin.
// paused is newly false.
// 'play', commented out since it has special treatment

// The user agent has just determined the duration and dimensions of the
// media resource and the timed tracks are ready.
// readyState is newly equal to HAVE_METADATA or greater for the first time.
// 'loadedmetadata', commented out since it has special treatment

// The user agent is fetching media data.
'progress',

// The user agent is intentionally not currently fetching media data,
// but does not have the entire media resource downloaded.
// 'suspend', // commented out, we are already listening to it in code

// Event The user agent stops fetching the media data before it is completely downloaded,
// but not due to an error.  error is an object with the code MEDIA_ERR_ABORTED.
'abort',

// A media element whose networkState was previously not in the NETWORK_EMPTY
// state has just switched to that state (either because of a fatal error
// during load that's about to be reported, or because the load() method was
// invoked while the resource selection algorithm was already running).
'emptied',

// The user agent is trying to fetch media data, but data is
// unexpectedly not forthcoming
'stalled',

// Playback has been paused. Fired after the pause() method has returned.
// paused is newly true.
'pause',

// The user agent can render the media data at the current playback position
// for the first time.
// readyState newly increased to HAVE_CURRENT_DATA or greater for the first time.
'loadeddata',

// Playback has stopped because the next frame is not available, but the user
// agent expects that frame to become available in due course.
// readyState is newly equal to or less than HAVE_CURRENT_DATA,
// and paused is false. Either seeking is true, or the current playback
// position is not contained in any of the ranges in buffered.
// It is possible for playback to stop for two other reasons without
// paused being false, but those two reasons do not fire this event:
// maybe playback ended, or playback stopped due to errors.
'waiting',

// Playback has started. readyState is newly equal to or greater than
// HAVE_FUTURE_DATA, paused is false, seeking is false,
// or the current playback position is contained in one of the ranges in buffered.
'playing',

// The user agent can resume playback of the media data,
// but estimates that if playback were to be started now, the media resource
// could not be rendered at the current playback rate up to its end without
// having to stop for further buffering of content.
// readyState newly increased to HAVE_FUTURE_DATA or greater.
'canplay',

// The user agent estimates that if playback were to be started now,
// the media resource could be rendered at the current playback rate
// all the way to its end without having to stop for further buffering.
// readyState is newly equal to HAVE_ENOUGH_DATA.
'canplaythrough',

// The seeking IDL attribute changed to true and the seek operation is
// taking long enough that the user agent has time to fire the event.
'seeking',

// The seeking IDL attribute changed to false.
'seeked',

// Playback has stopped because the end of the media resource was reached.
// currentTime equals the end of the media resource; ended is true.
'ended',

// Either the defaultPlaybackRate or the playbackRate attribute
// has just been updated.
'ratechange',

// The duration attribute has just been updated.
'durationchange',

// Either the volume attribute or the muted attribute has changed.
// Fired after the relevant attribute's setter has returned.
'volumechange'

// commented out, happen too often

// The current playback position changed as part of normal playback or in
// an especially interesting way, for example discontinuously.
// 'timeupdate'
];

},{}],96:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = function (anything, options) {
  if (anything === null) {
    return 'null';
  } else if (typeof anything === 'undefined') {
    return 'undefined';
  } else if (typeof anything === 'string') {
    return anything;
  } else if (Array.isArray(anything)) {
    return arrayToString(anything);
  } else if ((typeof anything === 'undefined' ? 'undefined' : _typeof(anything)) === 'object') {
    return objectToString(anything, options);
  } else {
    return anything.toString();
  }
};

var DASH = '- ';
var SEPARATOR = '<br/>' + DASH;

function arrayToString(array) {
  if (array.length > 0) {
    var lines = [];

    array.forEach(function (element) {
      if (element && element.toString) {
        lines.push(element.toString());
      }
    });

    return DASH + lines.join(SEPARATOR);
  }
}

function objectToString(object, options) {
  var propertyNames = Object.getOwnPropertyNames(object);
  var excludes = options && options.excludes || null;
  var lines = [];
  var sLines;

  if (propertyNames.length > 0) {
    var exclude = false;

    propertyNames.forEach(function (name) {
      if (excludes) {
        exclude = excludes.indexOf(name) >= 0;
      }

      if (!exclude && object[name] && object[name].toString) {
        lines.push(object[name].toString());
      }
    });
  }

  if (lines.length === 1) {
    sLines = lines.join();
  } else if (lines.length > 1) {
    sLines = DASH + lines.join(SEPARATOR);
  }

  return sLines;
}

},{}],97:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function () {
  var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var navigator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // https://github.com/julienetie/request-frame/issues/6
  if (!window.screen) {
    window.screen = {};
  }

  (0, _requestFrame2.default)('native');

  // avoids warning "navigator.mozGetUserMedia has been replaced by navigator.mediaDevices.getUserMedia",
  // see https://github.com/binarykitchen/videomail-client/issues/79
  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    // do not shim
  } else {
    navigator.getUserMedia_ = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
  }

  if (!window.AudioContext && window.webkitAudioContext) {
    window.AudioContext = window.webkitAudioContext;
  }

  if (!window.URL) {
    window.URL = window.webkitURL || window.mozURL || window.msURL;
  }

  var methods = ['debug', 'groupCollapsed', 'groupEnd', 'error', 'exception', 'info', 'log', 'trace', 'warn'];

  var console = {};

  if (window.console) {
    console = window.console;
  } else {
    window.console = function () {};
  }

  var method;
  var length = methods.length;

  while (length--) {
    method = methods[length];

    if (!console[method]) {
      console[method] = function () {};
    }
  }
};

_dereq_('classlist.js');

_dereq_('element-closest');

var _requestFrame = _dereq_('request-frame');

var _requestFrame2 = _interopRequireDefault(_requestFrame);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

},{"classlist.js":10,"element-closest":21,"request-frame":64}],98:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; // https://github.com/tgriesser/create-error


var _createError = _dereq_('create-error');

var _createError2 = _interopRequireDefault(_createError);

var _util = _dereq_('util');

var _util2 = _interopRequireDefault(_util);

var _pretty = _dereq_('./pretty');

var _pretty2 = _interopRequireDefault(_pretty);

var _resource = _dereq_('./../resource');

var _resource2 = _interopRequireDefault(_resource);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var VIDEOMAIL_ERR_NAME = 'Videomail Error';

var VideomailError = (0, _createError2.default)(Error, VIDEOMAIL_ERR_NAME, {
  'explanation': undefined,
  'logLines': undefined,
  'useragent': undefined,
  'url': undefined,
  'stack': undefined
});

// shim pretty to exclude stack always
var pretty = function pretty(anything) {
  return (0, _pretty2.default)(anything, { excludes: ['stack'] });
};

// static and public attribute of this class
VideomailError.PERMISSION_DENIED = 'PERMISSION_DENIED';
VideomailError.NOT_ALLOWED_ERROR = 'NotAllowedError';
VideomailError.NOT_CONNECTED = 'Not connected';
VideomailError.DOM_EXCEPTION = 'DOMException';
VideomailError.STARTING_FAILED = 'Starting video failed';
VideomailError.MEDIA_DEVICE_NOT_SUPPORTED = 'MediaDeviceNotSupported';
VideomailError.BROWSER_PROBLEM = 'browser-problem';
VideomailError.WEBCAM_PROBLEM = 'webcam-problem';
VideomailError.IOS_PROBLEM = 'ios-problem';
VideomailError.OVERCONSTRAINED = 'OverconstrainedError';

// static function to convert an error into a videomail error
VideomailError.create = function (err, explanation, options, parameters) {
  if (err && err.name === VIDEOMAIL_ERR_NAME) {
    return err;
  }

  if (!options && explanation) {
    options = explanation;
    explanation = undefined;
  }

  options = options || {};
  parameters = parameters || {};

  // be super robust
  var debug = options && options.debug || console.log;
  var audioEnabled = options && options.isAudioEnabled && options.isAudioEnabled();

  debug('VideomailError: create()');

  var classList = parameters.classList || [];

  // Require Browser here, not at the top of the file to avoid
  // recursion. Because the Browser class is requiring this file as well.
  var Browser = _dereq_('./browser');
  var browser = new Browser(options);

  var errType;
  var message;
  var stack;

  // whole code is ugly because all browsers behave so differently :(

  if ((typeof err === 'undefined' ? 'undefined' : _typeof(err)) === 'object') {
    if (err.code === 35) {
      // https://github.com/binarykitchen/videomail.io/issues/411
      errType = VideomailError.NOT_ALLOWED_ERROR;
    } else if (err.code === 1 && err.PERMISSION_DENIED === 1) {
      errType = VideomailError.PERMISSION_DENIED;
    } else if (err.constructor && err.constructor.name === VideomailError.DOM_EXCEPTION) {
      errType = VideomailError.DOM_EXCEPTION;
    } else if (err.constructor && err.constructor.name === VideomailError.OVERCONSTRAINED) {
      errType = VideomailError.OVERCONSTRAINED;
    } else if (err.message === VideomailError.STARTING_FAILED) {
      errType = err.message;
    } else if (err.name) {
      errType = err.name;
    } else if (err.type === 'error' && err.target.bufferedAmount === 0) {
      errType = VideomailError.NOT_CONNECTED;
    }
  } else if (err === VideomailError.NOT_CONNECTED) {
    errType = VideomailError.NOT_CONNECTED;
  } else {
    errType = err;
  }

  if (err && err.stack) {
    stack = err.stack;
  }

  switch (errType) {
    case VideomailError.OVERCONSTRAINED:
      message = 'Invalid webcam constraints';

      if (err.constraint) {
        if (err.constraint === 'width') {
          explanation = 'Your webcam does not meet the width requirement.';
        } else {
          explanation = 'Unmet constraint: ' + err.constraint;
        }
      } else {
        explanation = ' Details: ' + pretty(err);
      }
      break;
    case 'SourceUnavailableError':
      message = 'Source of your webcam cannot be accessed';
      explanation = 'Probably it is locked from another process or has a hardware error.';

      if (err.message) {
        err.message += ' Details: ' + err.message;
      }

      break;
    case 'NotFoundError':
    case 'NO_DEVICES_FOUND':
      if (audioEnabled) {
        message = 'No webcam nor microphone found';
        explanation = 'Your browser cannot find a webcam with microphone attached to your machine.';
      } else {
        message = 'No webcam found';
        explanation = 'Your browser cannot find a webcam attached to your machine.';
      }

      classList.push(VideomailError.WEBCAM_PROBLEM);
      break;

    case 'PermissionDismissedError':
      message = 'Ooops, you didn\'t give me any permissions?';
      explanation = 'Looks like you skipped the webcam permission dialogue.<br/>' + 'Please grant access next time the dialogue appears.';
      classList.push(VideomailError.WEBCAM_PROBLEM);
      break;

    case VideomailError.NOT_ALLOWED_ERROR:
    case VideomailError.PERMISSION_DENIED:
    case 'PermissionDeniedError':
      message = 'Permission denied';

      explanation = 'Cannot access your webcam. This can have two reasons:<br/>' + 'a) you blocked access to webcam; or<br/>' + 'b) your webcam is already in use.';

      classList.push(VideomailError.WEBCAM_PROBLEM);

      break;

    case 'HARDWARE_UNAVAILABLE':
      message = 'Webcam is unavailable';
      explanation = 'Maybe it is already busy in another window?';

      if (browser.isChromeBased()) {
        explanation += ' Or you have to allow access above?';
      }

      classList.push(VideomailError.WEBCAM_PROBLEM);

      break;

    case VideomailError.NOT_CONNECTED:
      message = 'Unable to transfer data';
      explanation = 'Unable to maintain a websocket to the server. Either server or ' + 'your connection is down. Trying to reconnect every two seconds …';
      break;

    case 'NO_VIDEO_FEED':
      message = 'No video feed found!';
      explanation = 'Your webcam is already used in another browser.';
      classList.push(VideomailError.WEBCAM_PROBLEM);
      break;

    case VideomailError.STARTING_FAILED:
      message = 'Starting video failed';
      explanation = 'Most likely this happens when the webam is already active in another browser.';
      classList.push(VideomailError.WEBCAM_PROBLEM);
      break;

    case 'DevicesNotFoundError':
      message = 'No available webcam could be found';
      explanation = 'Looks like you do not have any webcam attached to your machine; or ' + 'the one you plugged in is already used.';
      classList.push(VideomailError.WEBCAM_PROBLEM);
      break;

    case VideomailError.DOM_EXCEPTION:
      if (err.code === 9) {
        var newUrl = 'https:' + window.location.href.substring(window.location.protocol.length);
        message = 'Security upgrade needed';
        explanation = 'Click <a href="' + newUrl + '">here</a> to switch to HTTPs which is more safe ' + ' and enables encrypted videomail transfers.';
        classList.push(VideomailError.BROWSER_PROBLEM);
      } else {
        message = VideomailError.DOM_EXCEPTION;
        explanation = pretty(err);
      }
      break;

    // Chrome has a weird problem where if you try to do a getUserMedia request too early, it
    // can return a MediaDeviceNotSupported error (even though nothing is wrong and permission
    // has been granted). Look at userMediaErrorCallback() in recorder, there we do not
    // emit those kind of errors further and just retry.
    //
    // but for whatever reasons, if it happens to reach this code, then investigate this further.
    case VideomailError.MEDIA_DEVICE_NOT_SUPPORTED:
      message = 'Media device not supported';
      explanation = pretty(err);
      break;

    default:
      var originalExplanation = explanation;

      if (explanation && (typeof explanation === 'undefined' ? 'undefined' : _typeof(explanation)) === 'object') {
        explanation = pretty(explanation);
      }

      // it can be that explanation itself is an error object
      // error objects can be prettified to undefined sometimes
      if (!explanation && originalExplanation) {
        if (originalExplanation.message) {
          explanation = originalExplanation.message;
        } else {
          // tried toString before but nah
          explanation = _util2.default.inspect(originalExplanation, { showHidden: true });
        }
      }

      if (err && typeof err === 'string') {
        message = err;
      } else {
        if (err) {
          if (err.message) {
            message = pretty(err.message);
          }
        }

        if (err && err.explanation) {
          if (!explanation) {
            explanation = pretty(err.explanation);
          } else {
            explanation += ';<br/>' + pretty(err.explanation);
          }
        }

        if (err && err.details) {
          var details = pretty(err.details);

          if (!explanation) {
            explanation = details;
          } else {
            explanation += ';<br/>' + details;
          }
        }
      }

      // for weird, undefined cases
      if (!message) {
        if (errType) {
          message = errType;
        }

        if (!explanation && err) {
          explanation = pretty(err, { excludes: ['stack'] });
        }

        // avoid dupes
        if (pretty(message) === explanation) {
          explanation = undefined;
        }
      }

      break;
  }

  var logLines = null;

  if (options.logger && options.logger.getLines) {
    logLines = options.logger.getLines();
  }

  if (stack) {
    message = new Error(message);
    message.stack = stack;
  }

  var errCode = 'none';

  if (err) {
    errCode = 'code=' + (err.code ? err.code : 'undefined');
    errCode += ', type=' + (err.type ? err.type : 'undefined');
    errCode += ', name=' + (err.name ? err.name : 'undefined');
  }

  var videomailError = new VideomailError(message, {
    explanation: explanation,
    logLines: logLines,
    client: browser.getUsefulData(),
    url: window.location.href,
    code: errCode,
    stack: stack // have to assign it manually again because it is kinda protected
  });

  var resource;
  var reportErrors = false;

  if (options.reportErrors) {
    if (typeof options.reportErrors === 'function') {
      reportErrors = options.reportErrors(videomailError);
    } else {
      reportErrors = options.reportErrors;
    }
  }

  if (reportErrors) {
    resource = new _resource2.default(options);
  }

  if (resource) {
    resource.reportError(videomailError, function (err2) {
      if (err2) {
        console.error('Unable to report error', err2);
      }
    });
  }

  function hasClass(name) {
    return classList.indexOf(name) >= 0;
  }

  function isBrowserProblem() {
    return hasClass(VideomailError.BROWSER_PROBLEM) || parameters.browserProblem;
  }

  // add some public functions

  // this one is useful so that the notifier can have different css classes
  videomailError.getClassList = function () {
    return classList;
  };

  videomailError.removeDimensions = function () {
    return hasClass(VideomailError.IOS_PROBLEM) || browser.isMobile();
  };

  videomailError.hideButtons = function () {
    return isBrowserProblem() || hasClass(VideomailError.IOS_PROBLEM);
  };

  videomailError.hideForm = function () {
    return hasClass(VideomailError.IOS_PROBLEM);
  };

  return videomailError;
};

exports.default = VideomailError;

},{"./../resource":88,"./browser":91,"./pretty":96,"create-error":14,"util":78}],99:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _util = _dereq_('util');

var _util2 = _interopRequireDefault(_util);

var _hyperscript = _dereq_('hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _hidden = _dereq_('hidden');

var _hidden2 = _interopRequireDefault(_hidden);

var _contains = _dereq_('contains');

var _contains2 = _interopRequireDefault(_contains);

var _events = _dereq_('./../events');

var _events2 = _interopRequireDefault(_events);

var _eventEmitter = _dereq_('./../util/eventEmitter');

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Buttons = function Buttons(container, options) {
  _eventEmitter2.default.call(this, options, 'Buttons');

  var self = this;
  var debug = options.debug;

  var buttonsElement;
  var recordButton;
  var pauseButton;
  var resumeButton;
  var previewButton;
  var recordAgainButton;
  var submitButton;

  var audioOnRadioPair;
  var audioOffRadioPair;

  var built;

  function hide(elements) {
    if (elements && !Array.isArray(elements)) {
      elements = [elements];
    }

    elements && elements.forEach(function (element) {
      (0, _hidden2.default)(element, true);
    });
  }

  function show(elements) {
    if (elements && !Array.isArray(elements)) {
      elements = [elements];
    }

    elements && elements.forEach(function (element) {
      (0, _hidden2.default)(element, false);
    });
  }

  function isShown(elements) {
    var isShown = elements && true;

    if (elements && !Array.isArray(elements)) {
      elements = [elements];
    }

    elements && elements.forEach(function (element) {
      isShown = isShown && element && !(0, _hidden2.default)(element);
    });

    return isShown;
  }

  function disable(elements) {
    if (elements && !Array.isArray(elements)) {
      elements = [elements];
    }

    elements && elements.forEach(function (element) {
      if (element.tagName === 'INPUT' || element.tagName === 'BUTTON') {
        element.disabled = true;
      } else {
        element.classList.add('disabled');
      }
    });
  }

  function enable(elements) {
    if (elements && !Array.isArray(elements)) {
      elements = [elements];
    }

    elements && elements.forEach(function (element) {
      if (element.tagName === 'INPUT' || element.tagName === 'BUTTON') {
        element.disabled = false;
      } else {
        element.classList.remove('disabled');
      }
    });
  }

  function adjustButton(buttonElement, show, type, disabled) {
    if (disabled) {
      disable(buttonElement);
    }

    if (type) {
      buttonElement.type = type;
    } else if (!buttonElement.type) {
      buttonElement.type = 'button';
    }

    !show && hide(buttonElement);

    return buttonElement;
  }

  function replaceClickHandler(element, clickHandler) {
    var wrappedClickHandler = function wrappedClickHandler(e) {
      e && e.preventDefault();

      try {
        clickHandler({ event: e });
      } catch (exc) {
        self.emit(_events2.default.ERROR, exc);
      }
    };

    element.onclick = wrappedClickHandler;
  }

  function makeRadioButtonPair(options) {
    var radioButtonElement;
    var radioButtonGroup;

    if (options.id) {
      radioButtonElement = document.getElementById(options.id);
    }

    if (!radioButtonElement) {
      radioButtonElement = (0, _hyperscript2.default)('input#' + options.id, {
        type: 'radio',
        name: options.name,
        value: options.value,
        checked: options.checked
      });

      radioButtonGroup = (0, _hyperscript2.default)('span.radioGroup', radioButtonElement, (0, _hyperscript2.default)('label', {
        'htmlFor': options.id
      }, options.label));

      // double check that submit button is already in the buttonsElement container as a child?
      if (submitButton && (0, _contains2.default)(buttonsElement, submitButton)) {
        buttonsElement.insertBefore(radioButtonGroup, submitButton);
      } else {
        buttonsElement.appendChild(radioButtonGroup);
      }
    }

    if (options.changeHandler) {
      radioButtonElement.onchange = options.changeHandler;
    }

    disable(radioButtonElement);

    return [radioButtonElement, radioButtonGroup];
  }

  function makeButton(buttonClass, text, clickHandler, show, id, type, selector) {
    var disabled = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : true;

    var buttonElement;

    if (id) {
      buttonElement = document.getElementById(id);
    } else if (selector) {
      buttonElement = document.querySelector(selector);
    } else {
      buttonElement = buttonsElement.querySelector('.' + buttonClass);
    }

    if (!buttonElement) {
      if (options.selectors.buttonClass) {
        buttonClass += '.' + options.selectors.buttonClass;
      }

      buttonElement = (0, _hyperscript2.default)('button.' + buttonClass);
      buttonElement = adjustButton(buttonElement, show, type, disabled);

      buttonElement.innerHTML = text;

      // double check that submit button is already in the buttonsElement container
      if (submitButton && (0, _contains2.default)(buttonsElement, submitButton)) {
        buttonsElement.insertBefore(buttonElement, submitButton);
      } else {
        buttonsElement.appendChild(buttonElement);
      }
    } else {
      buttonElement = adjustButton(buttonElement, show, type, disabled);
    }

    if (clickHandler) {
      replaceClickHandler(buttonElement, clickHandler);
    }

    return buttonElement;
  }

  function buildButtons() {
    if (!options.disableSubmit) {
      if (!submitButton) {
        submitButton = makeButton(options.selectors.submitButtonClass, 'Submit', null, true, options.selectors.submitButtonId, 'submit', options.selectors.submitButtonSelector, options.enableAutoValidation);
      } else {
        disable(submitButton);
      }

      // no need to listen to the submit event when it's already listened
      // within the form element class
      if (!container.hasForm() && submitButton) {
        replaceClickHandler(submitButton, submit);
      }
    }

    recordButton = makeButton(options.selectors.recordButtonClass, options.text.buttons.record, record, false);

    if (options.enablePause) {
      pauseButton = makeButton(options.selectors.pauseButtonClass, options.text.buttons.pause, container.pause, false);
    }

    if (options.enablePause) {
      resumeButton = makeButton(options.selectors.resumeButtonClass, options.text.buttons.resume, container.resume, false);
    }

    // show stop only when pause is enabled - looks better that way otherwise button
    // move left and right between record and stop (preview)
    previewButton = makeButton(options.selectors.previewButtonClass, options.text.buttons.preview, container.stop, false);

    recordAgainButton = makeButton(options.selectors.recordAgainButtonClass, options.text.buttons.recordAgain, recordAgain, false);

    if (options.audio && options.audio.switch) {
      audioOffRadioPair = makeRadioButtonPair({
        id: 'audioOffOption',
        name: 'audio',
        value: 'off',
        label: 'Audio Off',
        checked: !options.isAudioEnabled(),
        changeHandler: function changeHandler() {
          container.disableAudio();
        }
      });

      audioOnRadioPair = makeRadioButtonPair({
        id: 'audioOnOption',
        name: 'audio',
        value: 'on',
        label: 'Audio On (Beta)',
        checked: options.isAudioEnabled(),
        changeHandler: function changeHandler() {
          container.enableAudio();
        }
      });
    }
  }

  function onFormReady(params) {
    // no need to show record button when doing a record again
    if (!isShown(recordAgainButton)) {
      if (!params.paused) {
        show(recordButton);
      }
    }

    if (!params.paused) {
      disable(previewButton);
      hide(previewButton);
    }

    if (!options.enableAutoValidation) {
      enable(submitButton);
    }
  }

  function onGoingBack() {
    hide(recordAgainButton);
    show(recordButton);
    show(submitButton);
  }

  function onReplayShown() {
    self.hide();
  }

  function onUserMediaReady(options) {
    onFormReady(options);

    if (isShown(recordButton)) {
      enable(recordButton);
    }

    if (isShown(audioOnRadioPair)) {
      enable(audioOnRadioPair);
    }

    if (isShown(audioOffRadioPair)) {
      enable(audioOffRadioPair);
    }

    if (options.enableAutoValidation) {
      disable(submitButton);
    }
  }

  function onResetting() {
    disable(submitButton);

    self.reset();
  }

  function onPreview() {
    hide(recordButton);
    hide(previewButton);
    disable(audioOnRadioPair);
    disable(audioOffRadioPair);

    show(recordAgainButton);
    enable(recordAgainButton);

    if (!options.enableAutoValidation) {
      enable(submitButton);
    }
  }

  this.enableSubmit = function () {
    enable(submitButton);
  };

  this.adjustButtonsForPause = function () {
    if (!self.isCountingDown()) {
      pauseButton && hide(pauseButton);
      show(resumeButton);
      enable(resumeButton);
      hide(recordButton);
      show(previewButton);
      enable(previewButton);
    }
  };

  function onFirstFrameSent() {
    hide(recordButton);
    hide(recordAgainButton);

    if (pauseButton) {
      show(pauseButton);
      enable(pauseButton);
    }

    enable(previewButton);
    show(previewButton);
  }

  function onRecording(framesCount) {
    // it is possible to hide while recording, hence
    // check framesCount first (coming from recorder)
    if (framesCount > 1) {
      onFirstFrameSent();
    } else {
      disable(audioOffRadioPair);
      disable(audioOnRadioPair);
      disable(recordAgainButton);
      disable(recordButton);
    }
  }

  function onResuming() {
    hide(resumeButton);
    hide(recordButton);

    if (pauseButton) {
      enable(pauseButton);
      show(pauseButton);
    }
  }

  function onStopping() {
    disable(previewButton);
    hide(pauseButton);
    hide(resumeButton);
  }

  function onCountdown() {
    disable(recordButton);
    disable(audioOffRadioPair);
    disable(audioOnRadioPair);
  }

  function onSubmitting() {
    disable(submitButton);
    disable(recordAgainButton);
  }

  function onSubmitted() {
    disable(previewButton);
    disable(recordAgainButton);
    disable(recordButton);
    disable(submitButton);
  }

  function onInvalid() {
    if (options.enableAutoValidation) {
      disable(submitButton);
    }
  }

  function onValid() {
    if (options.enableAutoValidation) {
      enable(submitButton);
    }
  }

  function onHidden() {
    hide(recordButton);
    hide(previewButton);
    hide(recordAgainButton);
    hide(resumeButton);
  }

  function onEnablingAudio() {
    disable(recordButton);
    disable(audioOnRadioPair);
    disable(audioOffRadioPair);
  }

  function onDisablingAudio() {
    disable(recordButton);
    disable(audioOnRadioPair);
    disable(audioOffRadioPair);
  }

  function recordAgain() {
    disable(recordAgainButton);
    container.beginWaiting();
    container.recordAgain();
  }

  function onStartingOver() {
    show(submitButton);
  }

  function submit() {
    container.submit();
  }

  function record(params) {
    disable(recordButton);
    container.record(params);
  }

  function initEvents() {
    debug('Buttons: initEvents()');

    self.on(_events2.default.USER_MEDIA_READY, function (options) {
      onUserMediaReady(options);
    }).on(_events2.default.PREVIEW, function () {
      onPreview();
    }).on(_events2.default.PAUSED, function () {
      self.adjustButtonsForPause();
    }).on(_events2.default.RECORDING, function (framesCount) {
      onRecording(framesCount);
    }).on(_events2.default.FIRST_FRAME_SENT, function () {
      onFirstFrameSent();
    }).on(_events2.default.RESUMING, function () {
      onResuming();
    }).on(_events2.default.STOPPING, function () {
      onStopping();
    }).on(_events2.default.COUNTDOWN, function () {
      onCountdown();
    }).on(_events2.default.SUBMITTING, function () {
      onSubmitting();
    }).on(_events2.default.RESETTING, function () {
      onResetting();
    }).on(_events2.default.INVALID, function () {
      onInvalid();
    }).on(_events2.default.VALID, function () {
      onValid();
    }).on(_events2.default.SUBMITTED, function () {
      onSubmitted();
    }).on(_events2.default.HIDE, function () {
      onHidden();
    }).on(_events2.default.FORM_READY, function (options) {
      onFormReady(options);
    }).on(_events2.default.REPLAY_SHOWN, function () {
      onReplayShown();
    }).on(_events2.default.GOING_BACK, function () {
      onGoingBack();
    }).on(_events2.default.ENABLING_AUDIO, function () {
      onEnablingAudio();
    }).on(_events2.default.DISABLING_AUDIO, function () {
      onDisablingAudio();
    }).on(_events2.default.STARTING_OVER, function () {
      onStartingOver();
    }).on(_events2.default.ERROR, function (err) {
      // since https://github.com/binarykitchen/videomail-client/issues/60
      // we hide areas to make it easier for the user
      if (err.hideButtons && err.hideButtons() && options.adjustFormOnBrowserError) {
        self.hide();
      }
    });
  }

  this.reset = function () {
    options.debug('Buttons: reset()');

    disable(pauseButton);
    disable(resumeButton);
    disable(recordButton);
    disable(previewButton);
    disable(recordAgainButton);
  };

  this.isRecordAgainButtonEnabled = function () {
    return !recordAgainButton.disabled;
  };

  this.isRecordButtonEnabled = function () {
    return !recordButton.disabled;
  };

  this.setSubmitButton = function (newSubmitButton) {
    submitButton = newSubmitButton;
  };

  this.getSubmitButton = function () {
    return submitButton;
  };

  this.build = function () {
    buttonsElement = container.querySelector('.' + options.selectors.buttonsClass);

    if (!buttonsElement) {
      buttonsElement = (0, _hyperscript2.default)('div.' + options.selectors.buttonsClass);

      container.appendChild(buttonsElement);
    }

    buildButtons();

    !built && initEvents();

    built = true;
  };

  this.unload = function () {
    built = false;
  };

  this.hide = function (params) {
    hide(buttonsElement);

    if (params && params.deep) {
      hide(recordButton);
      hide(pauseButton);
      hide(resumeButton);
      hide(previewButton);
      hide(recordAgainButton);
      hide(submitButton);
    }
  };

  this.show = function () {
    show(buttonsElement);
  };

  this.isCountingDown = function () {
    return container.isCountingDown();
  };
};

_util2.default.inherits(Buttons, _eventEmitter2.default);

exports.default = Buttons;

},{"./../events":86,"./../util/eventEmitter":93,"contains":12,"hidden":30,"hyperscript":32,"util":78}],100:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _insertCss = _dereq_('insert-css');

var _insertCss2 = _interopRequireDefault(_insertCss);

var _hidden = _dereq_('hidden');

var _hidden2 = _interopRequireDefault(_hidden);

var _util = _dereq_('util');

var _util2 = _interopRequireDefault(_util);

var _documentVisibility = _dereq_('document-visibility');

var _documentVisibility2 = _interopRequireDefault(_documentVisibility);

var _dimension = _dereq_('./dimension');

var _dimension2 = _interopRequireDefault(_dimension);

var _visuals = _dereq_('./visuals');

var _visuals2 = _interopRequireDefault(_visuals);

var _buttons = _dereq_('./buttons');

var _buttons2 = _interopRequireDefault(_buttons);

var _form = _dereq_('./form');

var _form2 = _interopRequireDefault(_form);

var _optionsWrapper = _dereq_('./optionsWrapper');

var _optionsWrapper2 = _interopRequireDefault(_optionsWrapper);

var _resource = _dereq_('./../resource');

var _resource2 = _interopRequireDefault(_resource);

var _events = _dereq_('./../events');

var _events2 = _interopRequireDefault(_events);

var _eventEmitter = _dereq_('./../util/eventEmitter');

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _videomailError = _dereq_('./../util/videomailError');

var _videomailError2 = _interopRequireDefault(_videomailError);

var _mainMinCss = _dereq_('./../styles/css/main.min.css.js');

var _mainMinCss2 = _interopRequireDefault(_mainMinCss);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Container = function Container(options) {
  _eventEmitter2.default.call(this, options, 'Container');

  var self = this;

  var visibility = (0, _documentVisibility2.default)();
  var visuals = new _visuals2.default(this, options);
  var buttons = new _buttons2.default(this, options);
  var resource = new _resource2.default(options);
  var htmlElement = document && document.querySelector && document.querySelector('html');
  var debug = options.debug;

  var hasError = false;
  var submitted = false;
  var lastValidation = false;

  var containerElement;
  var built;
  var form;

  function prependDefaultCss() {
    (0, _insertCss2.default)(_mainMinCss2.default, { prepend: true });
  }

  // since https://github.com/binarykitchen/videomail-client/issues/87
  function findParentFormElement() {
    return containerElement.closest('form');
  }

  function getFormElement() {
    var formElement;

    if (containerElement.tagName === 'FORM') {
      formElement = containerElement;
    } else if (options.selectors.formId) {
      formElement = document.getElementById(options.selectors.formId);
    } else {
      formElement = findParentFormElement();
    }

    return formElement;
  }

  function buildForm() {
    var formElement = getFormElement();

    if (formElement) {
      debug('Container: buildForm()');
      form = new _form2.default(self, formElement, options);

      var submitButton = form.findSubmitButton();
      submitButton && buttons.setSubmitButton(submitButton);

      form.build();
    }
  }

  function buildChildren() {
    debug('Container: buildChildren()');

    if (!containerElement.classList) {
      self.emit(_events2.default.ERROR, _videomailError2.default.create('Sorry, your browser is too old!', options));
    } else {
      containerElement.classList.add('videomail');

      if (!options.playerOnly) {
        buttons.build();
      }

      visuals.build();
    }
  }

  function processError(err) {
    hasError = true;

    if (err.stack) {
      options.logger.error(err.stack);
    } else {
      options.logger.error(err);
    }

    if (options.displayErrors) {
      visuals.error(err);
    } else {
      visuals.reset();
    }
  }

  function initEvents() {
    debug('Container: initEvents()');

    window.addEventListener('beforeunload', function (e) {
      self.unload(e);
    });

    if (!options.playerOnly) {
      visibility.onChange(function (visible) {
        // built? see https://github.com/binarykitchen/videomail.io/issues/326
        if (built) {
          if (visible) {
            if (options.isAutoPauseEnabled() && self.isCountingDown()) {
              self.resume();
            }

            self.emit(_events2.default.VISIBLE);
          } else {
            if (options.isAutoPauseEnabled() && (self.isCountingDown() || self.isRecording())) {
              self.pause('document invisible');
            }

            self.emit(_events2.default.INVISIBLE);
          }
        }
      });
    }

    if (options.enableSpace) {
      if (!options.playerOnly) {
        window.addEventListener('keypress', function (e) {
          var tagName = e.target.tagName;

          if (tagName !== 'INPUT' && tagName !== 'TEXTAREA') {
            var code = e.keyCode ? e.keyCode : e.which;

            if (code === 32) {
              e.preventDefault();

              if (options.enablePause) {
                visuals.pauseOrResume();
              } else {
                visuals.recordOrStop();
              }
            }
          }
        });
      }
    }

    // better to keep the one and only error listeners
    // at one spot, here, because unload() will do a removeAllListeners()
    self.on(_events2.default.ERROR, function (err) {
      processError(err);
      unloadChildren(err);

      if (err.removeDimensions && err.removeDimensions()) {
        removeDimensions();
      }
    });

    if (!options.playerOnly) {
      self.on(_events2.default.LOADED_META_DATA, function () {
        correctDimensions();
      });
    }
  }

  function validateOptions() {
    if (options.hasDefinedWidth() && options.video.width % 2 !== 0) {
      throw _videomailError2.default.create('Width must be divisible by two.', options);
    }

    if (options.hasDefinedHeight() && options.video.height % 2 !== 0) {
      throw _videomailError2.default.create('Height must be divisible by two.', options);
    }
  }

  // this will just set the width but not the height because
  // it can be a form with more inputs elements
  function correctDimensions() {
    var width = visuals.getRecorderWidth(true);

    if (width < 1) {
      throw _videomailError2.default.create('Recorder width cannot be less than 1!', options);
    } else {
      containerElement.style.width = width + 'px';
    }
  }

  function removeDimensions() {
    containerElement.style.width = 'auto';
  }

  function unloadChildren(e) {
    visuals.unload(e);
    buttons.unload();
    self.endWaiting();
  }

  function hideMySelf() {
    (0, _hidden2.default)(containerElement, true);
  }

  // fixes https://github.com/binarykitchen/videomail-client/issues/71
  function trimEmail(email) {
    return email.replace(/(^[,\s]+)|([,\s]+$)/g, '');
  }

  function submitVideomail(formData, method, cb) {
    var FORM_FIELDS = {
      'subject': options.selectors.subjectInputName,
      'from': options.selectors.fromInputName,
      'to': options.selectors.toInputName,
      'body': options.selectors.bodyInputName,
      'key': options.selectors.keyInputName,
      'parentKey': options.selectors.parentKeyInputName
    };

    var videomailFormData = {};

    Object.keys(FORM_FIELDS).forEach(function (key) {
      if (formData.hasOwnProperty(FORM_FIELDS[key])) {
        videomailFormData[key] = formData[FORM_FIELDS[key]];
      }
    });

    if (videomailFormData.from) {
      videomailFormData.from = trimEmail(videomailFormData.from);
    }

    if (videomailFormData.to) {
      videomailFormData.to = trimEmail(videomailFormData.to);
    }

    // when method is undefined, treat it as a post
    if (isPost(method) || !method) {
      videomailFormData.recordingStats = visuals.getRecordingStats();
      videomailFormData.width = visuals.getRecorderWidth(true);
      videomailFormData.height = visuals.getRecorderHeight(true);

      resource.post(videomailFormData, cb);
    } else if (isPut(method)) {
      resource.put(videomailFormData, cb);
    }
  }

  function submitForm(formData, videomailResponse, url, cb) {
    // for now, accept POSTs only which have an URL unlike null and
    // treat all other submissions as direct submissions

    if (!url || url === '') {
      // figure out URL automatically then
      url = document.baseURI;
    }

    // can be missing when no videomail was recorded and is not required
    if (videomailResponse) {
      formData[options.selectors.aliasInputName] = videomailResponse.videomail.alias;
    }

    resource.form(formData, url, cb);
  }

  function finalizeSubmissions(err, method, videomail, response, formResponse) {
    self.endWaiting();

    if (err) {
      self.emit(_events2.default.ERROR, err);
    } else {
      submitted = true;

      // merge two json response bodies to fake as if it were only one request
      if (response && formResponse && formResponse.body) {
        Object.keys(formResponse.body).forEach(function (key) {
          response[key] = formResponse.body[key];
        });
      }

      self.emit(_events2.default.SUBMITTED, videomail, response || formResponse);

      if (formResponse && formResponse.type === 'text/html' && formResponse.text) {
        // server replied with HTML contents - display these
        document.body.innerHTML = formResponse.text;

        // todo: figure out how to fire dom's onload event again
        // todo: or how to run all the scripts over again
      }
    }
  }

  this.addPlayerDimensions = function (videomail, element) {
    try {
      videomail.playerHeight = this.calculateHeight({
        responsive: true,
        videoWidth: videomail.width,
        ratio: videomail.height / videomail.width
      }, element);

      videomail.playerWidth = this.calculateWidth({
        responsive: true,
        videoHeight: videomail.playerHeight,
        ratio: videomail.height / videomail.width
      });

      return videomail;
    } catch (exc) {
      self.emit(_events2.default.ERROR, exc);
    }
  };

  this.limitWidth = function (width) {
    return _dimension2.default.limitWidth(containerElement, width, options);
  };

  this.limitHeight = function (height) {
    return _dimension2.default.limitHeight(height, options);
  };

  this.calculateWidth = function (fnOptions) {
    return _dimension2.default.calculateWidth(_optionsWrapper2.default.merge(options, fnOptions, true));
  };

  this.calculateHeight = function (fnOptions, element) {
    if (!element) {
      if (containerElement) {
        element = containerElement;
      } else {
        // better than nothing
        element = document.body;
      }
    }

    return _dimension2.default.calculateHeight(element, _optionsWrapper2.default.merge(options, fnOptions, true));
  };

  this.areVisualsHidden = function () {
    return visuals.isHidden();
  };

  this.hasElement = function () {
    return !!containerElement;
  };

  this.build = function () {
    try {
      containerElement = document.getElementById(options.selectors.containerId);

      // only build when a container element hast been found, otherwise
      // be silent and do nothing
      if (containerElement) {
        options.insertCss && prependDefaultCss();

        !built && initEvents();
        validateOptions();
        correctDimensions();

        if (!options.playerOnly) {
          buildForm();
        }

        buildChildren();

        if (!hasError) {
          debug('Container: built.');
          built = true;
          self.emit(_events2.default.BUILT);
        } else {
          debug('Container: building failed due to an error.');
        }
      } else {
        // commented out since it does too much noise on videomail's view page which is fine
        // debug('Container: no container element with ID ' + options.selectors.containerId + ' found. Do nothing.')
      }
    } catch (exc) {
      if (visuals.isNotifierBuilt()) {
        self.emit(_events2.default.ERROR, exc);
      } else {
        throw exc;
      }
    }
  };

  this.getSubmitButton = function () {
    return buttons.getSubmitButton();
  };

  this.querySelector = function (selector) {
    return containerElement.querySelector(selector);
  };

  this.beginWaiting = function () {
    htmlElement.classList && htmlElement.classList.add('wait');
  };

  this.endWaiting = function () {
    htmlElement.classList && htmlElement.classList.remove('wait');
  };

  this.appendChild = function (child) {
    containerElement.appendChild(child);
  };

  this.insertBefore = function (child, reference) {
    containerElement.insertBefore(child, reference);
  };

  this.unload = function (e) {
    debug('Container: unload()', e);

    try {
      unloadChildren(e);
      this.removeAllListeners();

      built = submitted = false;
    } catch (exc) {
      self.emit(_events2.default.ERROR, exc);
    }
  };

  this.show = function () {
    if (containerElement) {
      (0, _hidden2.default)(containerElement, false);

      visuals.show();

      if (!hasError) {
        var paused = self.isPaused();

        if (paused) {
          buttons.adjustButtonsForPause();
        }

        // since https://github.com/binarykitchen/videomail-client/issues/60
        // we hide areas to make it easier for the user
        buttons.show();

        if (self.isReplayShown()) {
          self.emit(_events2.default.PREVIEW);
        } else {
          self.emit(_events2.default.FORM_READY, { paused: paused });
        }
      }
    }
  };

  this.hide = function () {
    debug('Container: hide()');

    hasError = false;

    this.isRecording() && this.pause();

    visuals.hide();

    if (submitted) {
      buttons.hide();
      hideMySelf();
    }
  };

  this.startOver = function (params) {
    try {
      self.emit(_events2.default.STARTING_OVER);

      submitted = false;
      form.show();
      visuals.back(params, function () {
        if (params.keepHidden) {
          // just enable form, do nothing else.
          // see example contact_form.html when you submit without videomil
          // and go back
          self.enableForm();
        } else {
          self.show(params);
        }
      });
    } catch (exc) {
      self.emit(_events2.default.ERROR, exc);
    }
  };

  this.showReplayOnly = function () {
    hasError = false;

    this.isRecording() && this.pause();

    visuals.showReplayOnly();

    submitted && buttons.hide();
  };

  this.isNotifying = function () {
    return visuals.isNotifying();
  };

  this.isPaused = function () {
    return visuals.isPaused();
  };

  this.pause = function (params) {
    visuals.pause(params);
  };

  // this code needs a good rewrite :(
  this.validate = function (force) {
    var runValidation = true;
    var valid;

    if (!options.enableAutoValidation) {
      runValidation = false;
      lastValidation = true; // needed so that it can be submitted anyway, see submit()
    } else if (force) {
      runValidation = force;
    } else if (self.isNotifying()) {
      runValidation = false;
    } else if (visuals.isConnected()) {
      runValidation = visuals.isUserMediaLoaded() || visuals.isReplayShown();
    } else if (visuals.isConnecting()) {
      runValidation = false;
    }

    if (runValidation) {
      this.emit(_events2.default.VALIDATING);

      var visualsValid = visuals.validate() && buttons.isRecordAgainButtonEnabled();
      var whyInvalid;

      if (form) {
        valid = form.validate();

        if (valid) {
          if (!this.areVisualsHidden() && !visualsValid) {
            if (submitted || this.isReady() || this.isRecording() || this.isPaused() || this.isCountingDown()) {
              valid = false;
            }

            if (!valid) {
              whyInvalid = 'Video is not recorded';
            }
          }
        } else {
          var invalidInput = form.getInvalidElement();

          if (invalidInput) {
            whyInvalid = 'Form input named ' + invalidInput.name + ' is invalid';
          } else {
            whyInvalid = 'Form input(s() are invalid';
          }
        }
      } else {
        valid = visualsValid;
      }

      if (valid) {
        this.emit(_events2.default.VALID);
      } else {
        this.emit(_events2.default.INVALID, whyInvalid);
      }

      lastValidation = valid;
    }

    return valid;
  };

  this.disableForm = function (buttonsToo) {
    form && form.disable(buttonsToo);
  };

  this.enableForm = function (buttonsToo) {
    form && form.enable(buttonsToo);
  };

  this.hasForm = function () {
    return !!form;
  };

  this.isReady = function () {
    return buttons.isRecordButtonEnabled();
  };

  function isPost(method) {
    return method && method.toUpperCase() === 'POST';
  }

  function isPut(method) {
    return method && method.toUpperCase() === 'PUT';
  }

  this.submitAll = function (formData, method, url) {
    this.beginWaiting();
    this.disableForm(true);
    this.emit(_events2.default.SUBMITTING);

    var post = isPost(method);
    var hasVideomailKey = !!formData[options.selectors.keyInputName];

    // a closure so that we can access method
    var submitVideomailCallback = function submitVideomailCallback(err1, videomail, videomailResponse) {
      if (err1) {
        finalizeSubmissions(err1, method, videomail, videomailResponse);
      } else if (post) {
        submitForm(formData, videomailResponse, url, function (err2, formResponse) {
          finalizeSubmissions(err2, method, videomail, videomailResponse, formResponse);
        });
      } else {
        // it's a direct submission
        finalizeSubmissions(null, method, videomail, videomailResponse);
      }
    };

    if (!hasVideomailKey) {
      submitForm(formData, null, url, function (err2, formResponse) {
        finalizeSubmissions(err2, method, null, null, formResponse);
      });
    } else {
      submitVideomail(formData, method, submitVideomailCallback);
    }
  };

  this.isBuilt = function () {
    return built;
  };

  this.isReplayShown = function () {
    return visuals.isReplayShown();
  };

  this.isDirty = function () {
    var isDirty = false;

    if (form) {
      if (visuals.isRecorderUnloaded()) {
        isDirty = false;
      } else if (this.isReplayShown() || this.isPaused()) {
        isDirty = true;
      }
    }

    return isDirty;
  };

  this.getReplay = function () {
    return visuals.getReplay();
  };

  this.isOutsideElementOf = function (element) {
    return element.parentNode !== containerElement && element !== containerElement;
  };

  this.hideForm = function (params) {
    // form check needed, see https://github.com/binarykitchen/videomail-client/issues/127
    form && form.hide();
    buttons && buttons.hide(params);
  };

  this.loadForm = function (videomail) {
    if (form) {
      form.loadVideomail(videomail);
      this.validate();
    }
  };

  this.enableAudio = function () {
    options.setAudioEnabled(true);
    this.emit(_events2.default.ENABLING_AUDIO);
  };

  this.disableAudio = function () {
    options.setAudioEnabled(false);
    this.emit(_events2.default.DISABLING_AUDIO);
  };

  this.submit = function () {
    lastValidation && form && form.doTheSubmit();
  };

  this.isCountingDown = visuals.isCountingDown.bind(visuals);
  this.isRecording = visuals.isRecording.bind(visuals);
  this.record = visuals.record.bind(visuals);
  this.resume = visuals.resume.bind(visuals);
  this.stop = visuals.stop.bind(visuals);
  this.recordAgain = visuals.recordAgain.bind(visuals);
};

_util2.default.inherits(Container, _eventEmitter2.default);

exports.default = Container;

},{"./../events":86,"./../resource":88,"./../styles/css/main.min.css.js":89,"./../util/eventEmitter":93,"./../util/videomailError":98,"./buttons":99,"./dimension":101,"./form":102,"./optionsWrapper":103,"./visuals":104,"document-visibility":18,"hidden":30,"insert-css":36,"util":78}],101:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _numberIsInteger = _dereq_('number-is-integer');

var _numberIsInteger2 = _interopRequireDefault(_numberIsInteger);

var _videomailError = _dereq_('./../util/videomailError');

var _videomailError2 = _interopRequireDefault(_videomailError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getOuterWidth(element) {
  var outerWidth = 0;
  var rect = element.getBoundingClientRect();

  if (rect) {
    outerWidth = rect.right - rect.left;
  }

  if (outerWidth < 1) {
    // last effort, can happen when replaying only
    rect = document.body.getBoundingClientRect();
    outerWidth = rect.right - rect.left;
  }

  return outerWidth;
}

function figureMinHeight(height, options) {
  if (options.hasDefinedHeight()) {
    if (!height) {
      height = options.video.height;
    } else {
      height = Math.min(options.video.height, height);
    }
  }

  if ((0, _numberIsInteger2.default)(height) && height < 1) {
    throw _videomailError2.default.create('Got a video height less than 1 (' + height + ') while figuring out the minimum!', options);
  }

  // just return it, can be "auto"
  return height;
}

exports.default = {

  limitWidth: function limitWidth(element, width, options) {
    var outerWidth = getOuterWidth(element);
    var limitedWidth = outerWidth > 0 && outerWidth < width ? outerWidth : width;

    if ((0, _numberIsInteger2.default)(limitedWidth) && limitedWidth < 1) {
      throw _videomailError2.default.create('Limited width cannot be less than 1!', options);
    } else {
      return limitedWidth;
    }
  },

  // this is difficult to compute and is not entirely correct.
  // but good enough for now to ensure some stability.
  limitHeight: function limitHeight(height, options) {
    if ((0, _numberIsInteger2.default)(height) && height < 1) {
      throw _videomailError2.default.create('Passed limit-height argument cannot be less than 1!', options);
    } else {
      var limitedHeight = Math.min(height,
      // document.body.scrollHeight,
      document.documentElement.clientHeight);

      if (limitedHeight < 1) {
        throw _videomailError2.default.create('Limited height cannot be less than 1!', options);
      } else {
        return limitedHeight;
      }
    }
  },

  calculateWidth: function calculateWidth(options) {
    var height = options.videoHeight || null;
    var ratio = options.ratio || options.getRatio();

    height = figureMinHeight(height, options);

    if (options.responsive) {
      height = this.limitHeight(height, options);
    }

    if ((0, _numberIsInteger2.default)(height) && height < 1) {
      throw _videomailError2.default.create('Height cannot be smaller than 1 when calculating width.', options);
    } else {
      var calculatedWidth = parseInt(height / ratio);

      if (calculatedWidth < 1) {
        throw _videomailError2.default.create('Calculated width cannot be smaller than 1!', options);
      } else {
        return calculatedWidth;
      }
    }
  },

  calculateHeight: function calculateHeight(element, options) {
    var width = options.videoWidth || null;
    var height;

    var ratio = options.ratio || options.getRatio();

    if (options.hasDefinedWidth()) {
      width = options.video.width;
    }

    if ((0, _numberIsInteger2.default)(width) && width < 1) {
      throw _videomailError2.default.create('Unable to calculate height when width is less than 1.', options);
    } else if (options.responsive) {
      width = this.limitWidth(element, width, options);
    }

    if (width) {
      height = parseInt(width * ratio);
    }

    if ((0, _numberIsInteger2.default)(height) && height < 1) {
      throw _videomailError2.default.create('Just calculated a height less than 1 which is wrong.', options);
    } else {
      return figureMinHeight(height, options);
    }
  }
};

},{"./../util/videomailError":98,"number-is-integer":45}],102:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _hyperscript = _dereq_('hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _util = _dereq_('util');

var _util2 = _interopRequireDefault(_util);

var _hidden = _dereq_('hidden');

var _hidden2 = _interopRequireDefault(_hidden);

var _getFormData = _dereq_('get-form-data');

var _getFormData2 = _interopRequireDefault(_getFormData);

var _events = _dereq_('./../events');

var _events2 = _interopRequireDefault(_events);

var _eventEmitter = _dereq_('./../util/eventEmitter');

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _videomailError = _dereq_('./../util/videomailError');

var _videomailError2 = _interopRequireDefault(_videomailError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Form = function Form(container, formElement, options) {
  _eventEmitter2.default.call(this, options, 'Form');

  var self = this;

  var disableContainerValidation;
  var keyInput;

  function getData() {
    return (0, _getFormData2.default)(formElement);
  }

  this.loadVideomail = function (videomail) {
    var limit = formElement.elements.length;

    var input;
    var name;

    for (var i = 0; i < limit; i++) {
      input = formElement.elements[i];
      name = input.name;

      if (videomail[name]) {
        input.value = videomail[name];
      }

      if (name === options.selectors.subjectInputName || name === options.selectors.bodyInputName) {
        input.disabled = true;
      }
    }

    formElement.setAttribute('method', 'put');
  };

  function isNotButton(element) {
    return element.tagName !== 'BUTTON' && element.type !== 'submit';
  }

  function setDisabled(disabled, buttonsToo) {
    var limit = formElement.elements.length;

    for (var i = 0; i < limit; i++) {
      if (buttonsToo || !buttonsToo && isNotButton(formElement.elements[i])) {
        formElement.elements[i].disabled = disabled;
      }
    }
  }

  function hideAll() {
    var limit = formElement.elements.length;

    for (var i = 0; i < limit; i++) {
      (0, _hidden2.default)(formElement.elements[i], true);
    }

    (0, _hidden2.default)(formElement, true);
  }

  function getInputElements() {
    return formElement.querySelectorAll('input, textarea');
  }

  function getSelectElements() {
    return formElement.querySelectorAll('select');
  }

  this.disable = function (buttonsToo) {
    setDisabled(true, buttonsToo);
  };

  this.enable = function (buttonsToo) {
    setDisabled(false, buttonsToo);
  };

  this.build = function () {
    if (options.enableAutoValidation) {
      var inputElements = getInputElements();
      var inputElement;

      for (var i = 0, len = inputElements.length; i < len; i++) {
        inputElement = inputElements[i];

        if (inputElement.type === 'radio') {
          inputElement.addEventListener('change', function () {
            container.validate();
          });
        } else {
          inputElement.addEventListener('input', function () {
            container.validate();
          });
        }

        // because of angular's digest cycle, validate again when it became invalid
        inputElement.addEventListener('invalid', function () {
          if (!disableContainerValidation) {
            container.validate();
          }
        });
      }

      var selectElements = getSelectElements();

      for (var j = 0, len2 = selectElements.length; j < len2; j++) {
        selectElements[j].addEventListener('change', function () {
          container.validate();
        });
      }
    }

    keyInput = formElement.querySelector('input[name="' + options.selectors.keyInputName + '"]');

    if (!keyInput) {
      keyInput = (0, _hyperscript2.default)('input', {
        name: options.selectors.keyInputName,
        type: 'hidden'
      });

      formElement.appendChild(keyInput);
    }

    this.on(_events2.default.PREVIEW, function (videomailKey) {
      // beware that preview doesn't always come with a key, i.E.
      // container.show() can emit PREVIEW without a key when a replay already exists
      // (can happen when showing - hiding - showing videomail over again)

      // only emit error if key is missing AND the input has no key (value) yet
      if (!videomailKey && !keyInput.value) {
        self.emit(_events2.default.ERROR, _videomailError2.default.create('Videomail key for preview is missing!', options));
      } else if (videomailKey) {
        keyInput.value = videomailKey;
      }
      // else
      // leave as it and use existing keyInput.value
    });

    // fixes https://github.com/binarykitchen/videomail-client/issues/91
    this.on(_events2.default.GOING_BACK, function () {
      keyInput.value = null;
    });

    this.on(_events2.default.ERROR, function (err) {
      // since https://github.com/binarykitchen/videomail-client/issues/60
      // we hide areas to make it easier for the user to process an error
      // (= less distractions)
      if (err.hideForm && err.hideForm() && options.adjustFormOnBrowserError) {
        hideAll();
      } else if (err.hideButtons && err.hideButtons() && options.adjustFormOnBrowserError) {
        hideSubmitButton();
      }
    });

    this.on(_events2.default.BUILT, function () {
      startListeningToSubmitEvents();
    });
  };

  function hideSubmitButton() {
    var submitButton = self.findSubmitButton();
    (0, _hidden2.default)(submitButton, true);
  }

  function startListeningToSubmitEvents() {
    var submitButton = container.getSubmitButton();
    submitButton.addEventListener('click', self.doTheSubmit.bind(self));
  }

  this.doTheSubmit = function (e) {
    e && e.preventDefault();

    // only adjust submission when there is a container, otherwise
    // do nothing and leave as it for robustness
    if (container.hasElement()) {
      container.submitAll(getData(), formElement.getAttribute('method'), formElement.getAttribute('action'));
    }

    return false; // important to stop submission
  };

  this.getInvalidElement = function () {
    var inputElements = getInputElements();

    for (var i = 0, len = inputElements.length; i < len; i++) {
      if (!inputElements[i].validity.valid) {
        return inputElements[i];
      }
    }

    var selectElements = getSelectElements();

    for (var j = 0, len2 = selectElements.length; j < len2; j++) {
      if (!selectElements[i].validity.valid) {
        return selectElements[j];
      }
    }

    return null;
  };

  this.validate = function () {
    // prevents endless validation loop
    disableContainerValidation = true;

    var formIsValid = formElement.checkValidity();

    disableContainerValidation = false;

    return formIsValid;
  };

  this.findSubmitButton = function () {
    return formElement.querySelector("[type='submit']");
  };

  this.hide = function () {
    formElement && (0, _hidden2.default)(formElement, true);
  };

  this.show = function () {
    formElement && (0, _hidden2.default)(formElement, false);
  };
};

_util2.default.inherits(Form, _eventEmitter2.default);

exports.default = Form;

},{"./../events":86,"./../util/eventEmitter":93,"./../util/videomailError":98,"get-form-data":25,"hidden":30,"hyperscript":32,"util":78}],103:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _deepmerge = _dereq_('deepmerge');

var _deepmerge2 = _interopRequireDefault(_deepmerge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  addFunctions: function addFunctions(options) {
    var audioEnabled = options.audio && options.audio.enabled;

    options.hasDefinedHeight = function () {
      return this.video.height && this.video.height !== 'auto';
    };

    options.hasDefinedWidth = function () {
      return this.video.width && this.video.width !== 'auto';
    };

    options.hasDefinedDimension = function () {
      return this.hasDefinedWidth() || this.hasDefinedHeight();
    };

    options.hasDefinedDimensions = function () {
      return this.hasDefinedWidth() && this.hasDefinedHeight();
    };

    options.getRatio = function () {
      var ratio = 1; // just a default one when no computations are possible

      // todo fix this, it's not really an option
      var hasVideoDimensions = this.videoHeight && this.videoWidth;

      if (this.hasDefinedDimensions()) {
        if (hasVideoDimensions) {
          // figure out first which one to pick
          if (this.videoHeight < this.video.height || this.videoWidth < this.video.width) {
            ratio = this.videoHeight / this.videoWidth;
          } else {
            ratio = this.video.height / this.video.width;
          }
        } else {
          ratio = this.video.height / this.video.width;
        }
      } else if (hasVideoDimensions) {
        ratio = this.videoHeight / this.videoWidth;
      }

      return ratio;
    };

    options.isAudioEnabled = function () {
      return audioEnabled;
    };

    options.setAudioEnabled = function (enabled) {
      audioEnabled = enabled;
    };

    options.isAutoPauseEnabled = function () {
      return this.enableAutoPause && this.enablePause;
    };
  },

  // not very elegant but works! and if you here are reading this, and
  // start to doubt, rest assured, it's solid and run thousand times over
  // and over again each day. and other large sites out there have their own
  // tech debts. hope i have shattered your illusion on perfection?
  merge: function merge(defaultOptions, newOptions) {
    var options = (0, _deepmerge2.default)(defaultOptions, newOptions);

    this.addFunctions(options);

    return options;
  }
}; // enhances options with useful functions we can reuse everywhere

},{"deepmerge":15}],104:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _util = _dereq_('util');

var _util2 = _interopRequireDefault(_util);

var _hyperscript = _dereq_('hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _hidden = _dereq_('hidden');

var _hidden2 = _interopRequireDefault(_hidden);

var _replay = _dereq_('./visuals/replay');

var _replay2 = _interopRequireDefault(_replay);

var _recorder = _dereq_('./visuals/recorder');

var _recorder2 = _interopRequireDefault(_recorder);

var _notifier = _dereq_('./visuals/notifier');

var _notifier2 = _interopRequireDefault(_notifier);

var _recorderInsides = _dereq_('./visuals/inside/recorderInsides');

var _recorderInsides2 = _interopRequireDefault(_recorderInsides);

var _eventEmitter = _dereq_('./../util/eventEmitter');

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _events = _dereq_('./../events');

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Visuals = function Visuals(container, options) {
  _eventEmitter2.default.call(this, options, 'Visuals');

  var self = this;

  // can be overwritten with setter fn
  var replay = new _replay2.default(this, options);

  var recorder = new _recorder2.default(this, replay, options);
  var recorderInsides = new _recorderInsides2.default(this, options);

  var notifier = new _notifier2.default(this, options);

  var debug = options.debug;

  var visualsElement;
  var built;

  function buildNoScriptTag() {
    var noScriptElement = container.querySelector('noscript');

    if (!noScriptElement) {
      noScriptElement = (0, _hyperscript2.default)('noscript');
      noScriptElement.innerHTML = 'Please enable Javascript';

      visualsElement.appendChild(noScriptElement);
    }
  }

  function buildChildren() {
    debug('Visuals: buildChildren()');

    buildNoScriptTag();

    if (!options.playerOnly) {
      notifier.build();
      recorderInsides.build();
    }

    replay.build();

    debug('Visuals: built.');
  }

  function initEvents() {
    if (!options.playerOnly) {
      debug('Visuals: initEvents()');

      self.on(_events2.default.USER_MEDIA_READY, function () {
        built = true;
        self.endWaiting();
        container.enableForm(false);
      }).on(_events2.default.PREVIEW, function () {
        self.endWaiting();
      }).on(_events2.default.BLOCKING, function (blockingOptions) {
        if (!blockingOptions.hideForm && !options.adjustFormOnBrowserError) {
          // do nothing, user still can enter form inputs
          // can be useful when you are on i.E. seeflow's contact page and
          // still want to tick off the webcam option
        } else {
          container.disableForm(true);
        }
      }).on(_events2.default.PREVIEW_SHOWN, function () {
        container.validate(true);
      }).on(_events2.default.LOADED_META_DATA, function () {
        correctDimensions();
      }).on(_events2.default.ERROR, function (err) {
        if (err.removeDimensions && err.removeDimensions()) {
          removeDimensions();
        }
      });
    }
  }

  function correctDimensions() {
    visualsElement.style.width = self.getRecorderWidth(true) + 'px';
    visualsElement.style.height = self.getRecorderHeight(true) + 'px';
  }

  function removeDimensions() {
    visualsElement.style.width = 'auto';
    visualsElement.style.height = 'auto';
  }

  this.getRatio = function () {
    if (visualsElement.clientWidth) {
      // special case for safari, see getRatio() in recorder
      return visualsElement.clientHeight / visualsElement.clientWidth;
    } else {
      return 0;
    }
  };

  function isRecordable() {
    return !self.isNotifying() && !replay.isShown() && !self.isCountingDown();
  }

  this.isCountingDown = function () {
    return recorderInsides.isCountingDown();
  };

  this.build = function () {
    visualsElement = container.querySelector('.' + options.selectors.visualsClass);

    if (!visualsElement) {
      visualsElement = (0, _hyperscript2.default)('div.' + options.selectors.visualsClass);

      var buttonsElement = container.querySelector('.' + options.selectors.buttonsClass);

      // make sure it's placed before the buttons, but only if it's a child
      // element of the container = inside the container
      if (buttonsElement && !container.isOutsideElementOf(buttonsElement)) {
        container.insertBefore(visualsElement, buttonsElement);
      } else {
        container.appendChild(visualsElement);
      }
    }

    // do not hide visuals element so that apps can give it a predefined
    // width or height through css but hide all children

    visualsElement.classList.add('visuals');

    correctDimensions();

    !built && initEvents();
    buildChildren();

    // needed for replay handling and container.isOutsideElementOf()
    self.parentNode = visualsElement.parentNode;

    built = true;
  };

  this.querySelector = function (selector) {
    return visualsElement && visualsElement.querySelector(selector);
  };

  this.appendChild = function (child) {
    visualsElement && visualsElement.appendChild(child);
  };

  this.removeChild = function (child) {
    visualsElement.removeChild(child);
  };

  this.reset = function () {
    this.endWaiting();
    recorder.reset();
  };

  this.beginWaiting = function () {
    container.beginWaiting();
  };

  this.endWaiting = function () {
    container.endWaiting();
  };

  this.stop = function (params) {
    recorder.stop(params);
    recorderInsides.hidePause();
  };

  this.back = function (params, cb) {
    if (!cb && params) {
      cb = params;
      params = {};
    }

    replay.hide();
    notifier.hide();

    if (params.keepHidden) {
      recorder.hide();
      cb && cb();
    } else {
      recorder.back(cb);
    }
  };

  this.recordAgain = function () {
    this.back(function () {
      self.once(_events2.default.USER_MEDIA_READY, function () {
        self.record();
      });
    });
  };

  this.unload = function (e) {
    try {
      recorder.unload(e);
      recorderInsides.unload(e);
      replay.unload(e);

      built = false;
    } catch (exc) {
      this.emit(_events2.default.ERROR, exc);
    }
  };

  this.isNotifying = function () {
    return notifier.isVisible();
  };

  this.isReplayShown = function () {
    return replay.isShown();
  };

  this.pause = function (params) {
    recorder.pause(params);
    recorderInsides.showPause();
  };

  this.resume = function () {
    if (recorderInsides.isCountingDown()) {
      recorderInsides.resumeCountdown();
    } else {
      recorder.resume();
    }

    recorderInsides.hidePause();
  };

  this.pauseOrResume = function () {
    if (isRecordable.call(this)) {
      if (this.isRecording()) {
        this.pause();
      } else if (recorder.isPaused()) {
        this.resume();
      } else if (recorder.isReady()) {
        this.record();
      }
    }
  };

  this.recordOrStop = function () {
    if (isRecordable()) {
      if (this.isRecording()) {
        this.stop();
      } else if (recorder.isReady()) {
        this.record();
      }
    }
  };

  this.record = function () {
    if (options.video.countdown) {
      this.emit(_events2.default.COUNTDOWN);
      recorderInsides.startCountdown(recorder.record.bind(recorder));
    } else {
      recorder.record();
    }
  };

  this.getRecorder = function () {
    return recorder;
  };

  this.getReplay = function () {
    return replay;
  };

  this.validate = function () {
    return recorder.validate() && this.isReplayShown();
  };

  this.getRecordingStats = function () {
    return recorder.getRecordingStats();
  };

  this.getAudioSampleRate = function () {
    return recorder.getAudioSampleRate();
  };

  this.isPaused = function () {
    return recorder.isPaused();
  };

  this.error = function (err) {
    notifier.error(err);
  };

  this.hide = function () {
    if (visualsElement) {
      (0, _hidden2.default)(visualsElement, true);
      this.emit(_events2.default.HIDE);
    }
  };

  this.isHidden = function () {
    if (!built) {
      return true;
    } else if (visualsElement) {
      return (0, _hidden2.default)(visualsElement);
    }
  };

  this.showVisuals = function () {
    visualsElement && (0, _hidden2.default)(visualsElement, false);
  };

  this.show = function () {
    !this.isReplayShown() && visualsElement && recorder.build();
    this.showVisuals();
  };

  this.showReplayOnly = function () {
    !this.isReplayShown() && replay.show();

    this.show();
    recorder.hide();
    notifier.hide();
  };

  this.isRecorderUnloaded = function () {
    return recorder.isUnloaded();
  };

  this.isConnecting = function () {
    return recorder.isConnecting();
  };

  this.getRecorderWidth = function (responsive) {
    return recorder.getRecorderWidth(responsive);
  };

  this.getRecorderHeight = function (responsive) {
    return recorder.getRecorderHeight(responsive);
  };

  this.limitWidth = function (width) {
    return container.limitWidth(width, options);
  };

  this.limitHeight = function (height) {
    return container.limitHeight(height);
  };

  this.calculateWidth = function (options) {
    return container.calculateWidth(options);
  };

  this.calculateHeight = function (options) {
    return container.calculateHeight(options);
  };

  this.getReplay = function () {
    return replay;
  };

  this.getBoundingClientRect = function () {
    // fixes https://github.com/binarykitchen/videomail-client/issues/126
    return visualsElement && visualsElement.getBoundingClientRect();
  };

  this.checkTimer = function (intervalSum) {
    recorderInsides.checkTimer(intervalSum);
  };

  this.isNotifierBuilt = function () {
    return notifier && notifier.isBuilt();
  };

  this.isReplayShown = replay.isShown.bind(replay);
  this.hideReplay = replay.hide.bind(replay);
  this.hideRecorder = recorder.hide.bind(recorder);
  this.isRecording = recorder.isRecording.bind(recorder);
  this.isUserMediaLoaded = recorder.isUserMediaLoaded.bind(recorder);
  this.isConnected = recorder.isConnected.bind(recorder);
};

_util2.default.inherits(Visuals, _eventEmitter2.default);

exports.default = Visuals;

},{"./../events":86,"./../util/eventEmitter":93,"./visuals/inside/recorderInsides":109,"./visuals/notifier":110,"./visuals/recorder":111,"./visuals/replay":112,"hidden":30,"hyperscript":32,"util":78}],105:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (visuals, options) {
  var self = this;

  var countdownElement;
  var intervalId;
  var countdown;
  var paused;

  function fire(cb) {
    self.unload();
    self.hide();

    // keep all callbacks async
    setTimeout(function () {
      cb();
    }, 0);
  }

  function countBackward(cb) {
    if (!paused) {
      options.debug('Countdown', countdown);
      countdown--;

      if (countdown < 1) {
        fire(cb);
      } else {
        countdownElement.innerHTML = countdown;
      }
    }
  }

  this.start = function (cb) {
    countdownElement.innerHTML = countdown = options.video.countdown;

    this.show();

    intervalId = setInterval(countBackward.bind(this, cb), 950);
  };

  this.pause = function () {
    paused = true;
  };

  this.resume = function () {
    paused = false;
  };

  this.build = function () {
    countdownElement = visuals.querySelector('.countdown');

    if (!countdownElement) {
      countdownElement = (0, _hyperscript2.default)('p.countdown');

      this.hide();

      visuals.appendChild(countdownElement);
    } else {
      this.hide();
    }
  };

  this.show = function () {
    (0, _hidden2.default)(countdownElement, false);
  };

  this.isCountingDown = function () {
    return !!intervalId;
  };

  this.unload = function () {
    clearInterval(intervalId);
    paused = false;
    intervalId = null;
  };

  this.hide = function () {
    (0, _hidden2.default)(countdownElement, true);
    this.unload();
  };
};

var _hyperscript = _dereq_('hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _hidden = _dereq_('hidden');

var _hidden2 = _interopRequireDefault(_hidden);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

},{"hidden":30,"hyperscript":32}],106:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (visuals, options) {
  if (!options.text.pausedHeader) {
    throw _videomailError2.default.create('Paused header cannot be empty', options);
  }

  var pausedBlockElement;
  var pausedHeaderElement;
  var pausedHintElement;

  function hasPausedHint() {
    return options.text.pausedHint;
  }

  this.build = function () {
    pausedBlockElement = visuals.querySelector('.paused');
    pausedHeaderElement = visuals.querySelector('.pausedHeader');

    if (!pausedHeaderElement) {
      pausedBlockElement = (0, _hyperscript2.default)('div.paused');
      pausedHeaderElement = (0, _hyperscript2.default)('p.pausedHeader');

      this.hide();

      pausedHeaderElement.innerHTML = options.text.pausedHeader;

      pausedBlockElement.appendChild(pausedHeaderElement);

      if (hasPausedHint()) {
        pausedHintElement = visuals.querySelector('.pausedHint');
        pausedHintElement = (0, _hyperscript2.default)('p.pausedHint');
        pausedHintElement.innerHTML = options.text.pausedHint;
        pausedBlockElement.appendChild(pausedHintElement);
      }

      visuals.appendChild(pausedBlockElement);
    } else {
      this.hide();

      pausedHeaderElement.innerHTML = options.text.pausedHeader;

      if (hasPausedHint()) {
        pausedHintElement.innerHTML = options.text.pausedHint;
      }
    }
  };

  this.hide = function () {
    (0, _hidden2.default)(pausedBlockElement, true);
  };

  this.show = function () {
    (0, _hidden2.default)(pausedBlockElement, false);
  };
};

var _hyperscript = _dereq_('hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _hidden = _dereq_('hidden');

var _hidden2 = _interopRequireDefault(_hidden);

var _videomailError = _dereq_('./../../../../util/videomailError');

var _videomailError2 = _interopRequireDefault(_videomailError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

},{"./../../../../util/videomailError":98,"hidden":30,"hyperscript":32}],107:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (visuals) {
  var recordNoteElement;

  this.build = function () {
    recordNoteElement = visuals.querySelector('.recordNote');

    if (!recordNoteElement) {
      recordNoteElement = (0, _hyperscript2.default)('p.recordNote');

      this.hide();

      visuals.appendChild(recordNoteElement);
    } else {
      this.hide();
    }
  };

  this.stop = function () {
    this.hide();
    recordNoteElement.classList.remove('near');
    recordNoteElement.classList.remove('nigh');
  };

  this.setNear = function () {
    recordNoteElement.classList.add('near');
  };

  this.setNigh = function () {
    recordNoteElement.classList.add('nigh');
  };

  this.hide = function () {
    (0, _hidden2.default)(recordNoteElement, true);
  };

  this.show = function () {
    (0, _hidden2.default)(recordNoteElement, false);
  };
};

var _hyperscript = _dereq_('hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _hidden = _dereq_('hidden');

var _hidden2 = _interopRequireDefault(_hidden);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

},{"hidden":30,"hyperscript":32}],108:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (visuals, recordNote, options) {
  var recordTimerElement;

  var nearComputed = false;
  var endNighComputed = false;

  var started;
  var countdown;

  function pad(n) {
    return n < 10 ? '0' + n : n;
  }

  function thresholdReached(secs, threshold) {
    return secs >= options.video.limitSeconds * threshold;
  }

  function isNear(secs) {
    if (!nearComputed && thresholdReached(secs, 0.6)) {
      nearComputed = true;
      return true;
    } else {
      return false;
    }
  }

  function endIsNigh(secs) {
    if (!endNighComputed && thresholdReached(secs, 0.8)) {
      endNighComputed = true;
      return true;
    } else {
      return false;
    }
  }

  function setNear() {
    recordTimerElement.classList.add('near');
  }

  function setNigh() {
    recordTimerElement.classList.add('nigh');
  }

  this.check = function (opts) {
    var newCountdown = getStartSeconds() - Math.floor(opts.intervalSum / 1e3);

    // performance optimisation (another reason we need react here!)
    if (newCountdown !== countdown) {
      countdown = newCountdown;
      update();
      countdown < 1 && visuals.stop(true);
    }
  };

  function update() {
    var mins = parseInt(countdown / 60, 10);
    var secs = countdown - mins * 60;

    if (!nearComputed || !endNighComputed) {
      var remainingSeconds = options.video.limitSeconds - countdown;

      if (isNear(remainingSeconds)) {
        recordNote.setNear();
        setNear();

        options.debug('End is near, ' + countdown + ' seconds to go');
      } else if (endIsNigh(remainingSeconds)) {
        recordNote.setNigh();
        setNigh();

        options.debug('End is nigh, ' + countdown + ' seconds to go');
      }
    }

    recordTimerElement.innerHTML = mins + ':' + pad(secs);
  }

  function hide() {
    (0, _hidden2.default)(recordTimerElement, true);
  }

  function show() {
    recordTimerElement.classList.remove('near');
    recordTimerElement.classList.remove('nigh');

    (0, _hidden2.default)(recordTimerElement, false);
  }

  function getSecondsRecorded() {
    return getStartSeconds() - countdown;
  }

  function getStartSeconds() {
    return options.video.limitSeconds;
  }

  this.start = function () {
    countdown = getStartSeconds();
    nearComputed = endNighComputed = false;
    started = true;

    update();

    show();
  };

  this.pause = function () {
    recordNote.hide();
  };

  this.resume = function () {
    recordNote.show();
  };

  function isStopped() {
    return countdown === null;
  }

  this.stop = function () {
    if (!isStopped() && started) {
      options.debug('Stopping record timer. Was recording for about ~' + getSecondsRecorded() + ' seconds.');

      hide();
      recordNote.stop();

      countdown = null;
      started = false;
    }
  };

  this.build = function () {
    recordTimerElement = visuals.querySelector('.recordTimer');

    if (!recordTimerElement) {
      recordTimerElement = (0, _hyperscript2.default)('p.recordTimer');

      hide();

      visuals.appendChild(recordTimerElement);
    } else {
      hide();
    }
  };
};

var _hyperscript = _dereq_('hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _hidden = _dereq_('hidden');

var _hidden2 = _interopRequireDefault(_hidden);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

},{"hidden":30,"hyperscript":32}],109:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _util = _dereq_('util');

var _util2 = _interopRequireDefault(_util);

var _events = _dereq_('./../../../events');

var _events2 = _interopRequireDefault(_events);

var _eventEmitter = _dereq_('./../../../util/eventEmitter');

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _countdown = _dereq_('./recorder/countdown');

var _countdown2 = _interopRequireDefault(_countdown);

var _pausedNote = _dereq_('./recorder/pausedNote');

var _pausedNote2 = _interopRequireDefault(_pausedNote);

var _recordNote = _dereq_('./recorder/recordNote');

var _recordNote2 = _interopRequireDefault(_recordNote);

var _recordTimer = _dereq_('./recorder/recordTimer');

var _recordTimer2 = _interopRequireDefault(_recordTimer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RecorderInsides = function RecorderInsides(visuals, options) {
  _eventEmitter2.default.call(this, options, 'RecorderInsides');

  var self = this;
  var debug = options.debug;

  var recordNote = new _recordNote2.default(visuals);
  var recordTimer = new _recordTimer2.default(visuals, recordNote, options);

  var countdown;
  var pausedNote;
  var built;

  if (options.video.countdown) {
    countdown = new _countdown2.default(visuals, options);
  }

  if (options.enablePause) {
    pausedNote = new _pausedNote2.default(visuals, options);
  }

  function startRecording() {
    recordTimer.start();
  }

  function resumeRecording() {
    recordTimer.resume();
  }

  function stopRecording() {
    recordTimer.stop();
  }

  function pauseRecording() {
    if (self.isCountingDown()) {
      countdown.pause();
    } else {
      recordTimer.pause();
    }
  }

  function onResetting() {
    self.hidePause();
    self.hideCountdown();
    recordTimer.stop();
  }

  function initEvents() {
    debug('RecorderInsides: initEvents()');

    self.on(_events2.default.RECORDING, function () {
      startRecording();
    }).on(_events2.default.RESUMING, function () {
      resumeRecording();
    }).on(_events2.default.STOPPING, function () {
      stopRecording();
    }).on(_events2.default.PAUSED, function () {
      pauseRecording();
    }).on(_events2.default.RESETTING, onResetting).on(_events2.default.HIDE, function () {
      self.hideCountdown();
    });
  }

  this.build = function () {
    debug('RecorderInsides: build()');

    countdown && countdown.build();
    pausedNote && pausedNote.build();

    recordNote.build();
    recordTimer.build();

    !built && initEvents();

    built = true;
  };

  this.unload = function () {
    countdown && countdown.unload();

    built = false;
  };

  this.showPause = function () {
    pausedNote && pausedNote.show();
  };

  this.hidePause = function () {
    pausedNote && pausedNote.hide();
  };

  this.hideCountdown = function () {
    countdown && countdown.hide();
  };

  this.startCountdown = function (cb) {
    countdown && countdown.start(cb);
  };

  this.resumeCountdown = function () {
    countdown && countdown.resume();
  };

  this.isCountingDown = function () {
    return countdown && countdown.isCountingDown();
  };

  this.checkTimer = function (intervalSum) {
    recordTimer.check(intervalSum);
  };
};

_util2.default.inherits(RecorderInsides, _eventEmitter2.default);

exports.default = RecorderInsides;

},{"./../../../events":86,"./../../../util/eventEmitter":93,"./recorder/countdown":105,"./recorder/pausedNote":106,"./recorder/recordNote":107,"./recorder/recordTimer":108,"util":78}],110:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _util = _dereq_('util');

var _util2 = _interopRequireDefault(_util);

var _hyperscript = _dereq_('hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _hidden = _dereq_('hidden');

var _hidden2 = _interopRequireDefault(_hidden);

var _eventEmitter = _dereq_('./../../util/eventEmitter');

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _events = _dereq_('./../../events');

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Notifier = function Notifier(visuals, options) {
  _eventEmitter2.default.call(this, options, 'Notifier');

  var self = this;
  var debug = options && options.debug;

  var notifyElement;
  var messageElement;
  var explanationElement;
  var entertainTimeoutId;
  var entertaining;
  var built;

  function onStopping(limitReached) {
    var lead = '';

    visuals.beginWaiting();

    if (limitReached) {
      debug('Limit reached');
      lead += options.text.limitReached + '.<br/>';
    }

    lead += options.text.sending + ' …';

    self.notify(lead, null, {
      stillWait: true,
      entertain: options.notifier.entertain
    });
  }

  function onConnecting() {
    self.notify('Connecting …');
  }

  function onLoadingUserMedia() {
    self.notify('Loading webcam …');
  }

  function onProgress(frameProgress, sampleProgress) {
    var overallProgress;

    if (options.isAudioEnabled()) {
      overallProgress = 'Video: ' + frameProgress;

      if (sampleProgress) {
        overallProgress += ', Audio: ' + sampleProgress;
      }
    } else {
      overallProgress = frameProgress;
    }

    self.setExplanation(overallProgress);
  }

  function onBeginVideoEncoding() {
    visuals.beginWaiting();

    var lead = options.text.encoding + ' …';

    self.notify(lead, null, {
      stillWait: true,
      entertain: options.notifier.entertain
    });

    hideExplanation();
  }

  function initEvents() {
    debug('Notifier: initEvents()');

    self.on(_events2.default.CONNECTING, function () {
      onConnecting();
    }).on(_events2.default.LOADING_USER_MEDIA, function () {
      onLoadingUserMedia();
    }).on(_events2.default.USER_MEDIA_READY, function () {
      self.hide();
    }).on(_events2.default.LOADED_META_DATA, function () {
      correctDimensions();
    }).on(_events2.default.PREVIEW, function () {
      self.hide();
    }).on(_events2.default.STOPPING, function (limitReached) {
      onStopping(limitReached);
    }).on(_events2.default.PROGRESS, function (frameProgress, sampleProgress) {
      onProgress(frameProgress, sampleProgress);
    }).on(_events2.default.BEGIN_VIDEO_ENCODING, function () {
      onBeginVideoEncoding();
    });
  }

  function correctDimensions() {
    notifyElement.style.width = visuals.getRecorderWidth(true) + 'px';
    notifyElement.style.height = visuals.getRecorderHeight(true) + 'px';
  }

  function show() {
    notifyElement && (0, _hidden2.default)(notifyElement, false);
  }

  function runEntertainment() {
    if (options.notifier.entertain) {
      if (!entertaining) {
        var randomBackgroundClass = Math.floor(Math.random() * options.notifier.entertainLimit + 1);

        notifyElement.className = 'notifier entertain ' + options.notifier.entertainClass + randomBackgroundClass;

        entertainTimeoutId = setTimeout(runEntertainment, options.notifier.entertainInterval);
        entertaining = true;
      }
    } else {
      cancelEntertainment();
    }
  }

  function cancelEntertainment() {
    if (notifyElement) {
      notifyElement.classList.remove('entertain');
    }

    clearTimeout(entertainTimeoutId);
    entertainTimeoutId = null;
    entertaining = false;
  }

  function setMessage(message, messageOptions) {
    var problem = messageOptions.problem ? messageOptions.problem : false;

    if (messageElement) {
      messageElement.innerHTML = (problem ? '&#x2639; ' : '') + message;
    } else {
      options.logger.warn('Unable to show following because messageElement is empty:', message);
    }
  }

  this.error = function (err) {
    var message = err.message ? err.message.toString() : err.toString();
    var explanation = err.explanation ? err.explanation.toString() : null;

    if (!message) {
      options.debug('Weird empty message generated for error', err);
    }

    self.notify(message, explanation, {
      blocking: true,
      problem: true,
      hideForm: err.hideForm && err.hideForm(),
      classList: err.getClassList && err.getClassList(),
      removeDimensions: err.removeDimensions && err.removeDimensions()
    });
  };

  this.setExplanation = function (explanation) {
    if (!explanationElement) {
      explanationElement = (0, _hyperscript2.default)('p');

      if (notifyElement) {
        notifyElement.appendChild(explanationElement);
      } else {
        options.logger.warn('Unable to show explanation because notifyElement is empty:', explanation);
      }
    }

    explanationElement.innerHTML = explanation;

    (0, _hidden2.default)(explanationElement, false);
  };

  this.build = function () {
    options.debug('Notifier: build()');

    notifyElement = visuals.querySelector('.notifier');

    if (!notifyElement) {
      notifyElement = (0, _hyperscript2.default)('.notifier'); // defaults to div

      this.hide();

      visuals.appendChild(notifyElement);
    } else {
      this.hide();
    }

    !built && initEvents();

    built = true;
  };

  function hideExplanation() {
    if (explanationElement) {
      explanationElement.innerHTML = null;
      (0, _hidden2.default)(explanationElement, true);
    }
  }

  this.hide = function () {
    cancelEntertainment();

    if (notifyElement) {
      (0, _hidden2.default)(notifyElement, true);
      notifyElement.classList.remove('blocking');
    }

    if (messageElement) {
      messageElement.innerHTML = null;
    }

    hideExplanation();
  };

  this.isVisible = function () {
    if (!built) {
      return false;
    } else {
      return notifyElement && !(0, _hidden2.default)(notifyElement);
    }
  };

  this.isBuilt = function () {
    return built;
  };

  this.notify = function (message, explanation, notifyOptions) {
    options.debug('Notifier: notify()');

    if (!notifyOptions) {
      notifyOptions = {};
    }

    var stillWait = notifyOptions.stillWait ? notifyOptions.stillWait : false;
    var entertain = notifyOptions.entertain ? notifyOptions.entertain : false;
    var blocking = notifyOptions.blocking ? notifyOptions.blocking : false;
    var hideForm = notifyOptions.hideForm ? notifyOptions.hideForm : false;
    var classList = notifyOptions.classList ? notifyOptions.classList : false;
    var removeDimensions = notifyOptions.removeDimensions ? notifyOptions.removeDimensions : false;

    if (!messageElement && notifyElement) {
      messageElement = (0, _hyperscript2.default)('h2');

      if (explanationElement) {
        notifyElement.insertBefore(messageElement, explanationElement);
      } else {
        notifyElement.appendChild(messageElement);
      }
    }

    if (notifyElement) {
      // reset
      if (!entertain) {
        notifyElement.className = 'notifier';
      }

      if (classList) {
        classList.forEach(function (className) {
          notifyElement.classList.add(className);
        });
      }

      if (removeDimensions) {
        notifyElement.style.width = 'auto';
        notifyElement.style.height = 'auto';
      }
    }

    if (blocking) {
      notifyElement && notifyElement.classList.add('blocking');
      this.emit(_events2.default.BLOCKING, { hideForm: hideForm });
    } else {
      this.emit(_events2.default.NOTIFYING);
    }

    visuals.hideReplay();
    visuals.hideRecorder();

    setMessage(message, notifyOptions);

    if (explanation && explanation.length > 0) {
      this.setExplanation(explanation);
    }

    if (entertain) {
      runEntertainment();
    } else {
      cancelEntertainment();
    }

    // just as a safety in case if an error is thrown in the middle of the build process
    // and visuals aren't built/shown yet.
    visuals.showVisuals();

    show();

    !stillWait && visuals.endWaiting();
  };
};

_util2.default.inherits(Notifier, _eventEmitter2.default);

exports.default = Notifier;

},{"./../../events":86,"./../../util/eventEmitter":93,"hidden":30,"hyperscript":32,"util":78}],111:[function(_dereq_,module,exports){
(function (Buffer){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _websocketStream = _dereq_('websocket-stream');

var _websocketStream2 = _interopRequireDefault(_websocketStream);

var _canvasToBuffer = _dereq_('canvas-to-buffer');

var _canvasToBuffer2 = _interopRequireDefault(_canvasToBuffer);

var _util = _dereq_('util');

var _util2 = _interopRequireDefault(_util);

var _hyperscript = _dereq_('hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _hidden = _dereq_('hidden');

var _hidden2 = _interopRequireDefault(_hidden);

var _animitter = _dereq_('animitter');

var _animitter2 = _interopRequireDefault(_animitter);

var _userMedia = _dereq_('./userMedia');

var _userMedia2 = _interopRequireDefault(_userMedia);

var _events = _dereq_('./../../events');

var _events2 = _interopRequireDefault(_events);

var _constants = _dereq_('./../../constants');

var _constants2 = _interopRequireDefault(_constants);

var _eventEmitter = _dereq_('./../../util/eventEmitter');

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _browser = _dereq_('./../../util/browser');

var _browser2 = _interopRequireDefault(_browser);

var _humanize = _dereq_('./../../util/humanize');

var _humanize2 = _interopRequireDefault(_humanize);

var _pretty = _dereq_('./../../util/pretty');

var _pretty2 = _interopRequireDefault(_pretty);

var _videomailError = _dereq_('./../../util/videomailError');

var _videomailError2 = _interopRequireDefault(_videomailError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// credits http://1lineart.kulaone.com/#/
var PIPE_SYMBOL = '°º¤ø,¸¸,ø¤º°`°º¤ø,¸,ø¤°º¤ø,¸¸,ø¤º°`°º¤ø,¸ ';

var Recorder = function Recorder(visuals, replay, options) {
  _eventEmitter2.default.call(this, options, 'Recorder');

  // validate some options this class needs
  if (!options || !options.video || !options.video.fps) {
    throw _videomailError2.default.create('FPS must be defined', options);
  }

  var self = this;
  var browser = new _browser2.default(options);
  var debug = options.debug;

  var loop = null;

  var originalAnimationFrameObject;

  var samplesCount = 0;
  var framesCount = 0;

  var recordingStats = {};

  var confirmedFrameNumber = 0;
  var confirmedSampleNumber = 0;

  var recorderElement;
  var userMedia;

  var userMediaTimeout;
  var retryTimeout;

  var bytesSum;

  var frameProgress;
  var sampleProgress;

  var canvas;
  var ctx;

  var userMediaLoaded;
  var userMediaLoading;
  var submitting;
  var unloaded;
  var stopTime;
  var stream;
  var connecting;
  var connected;
  var blocking;
  var built;
  var key;
  var waitingTime;

  var pingInterval;

  var frame;

  var recordingBufferLength;
  var recordingBuffer;

  function writeStream(buffer, opts) {
    if (stream) {
      if (stream.destroyed) {
        // prevents https://github.com/binarykitchen/videomail.io/issues/393
        stopPings();

        self.emit(_events2.default.ERROR, _videomailError2.default.create('Already disconnected', 'Sorry, the connection to the server has been destroyed. Please reload. ' + 'Details of buffer: ' + buffer.toString(), options));
      } else {
        var onFlushedCallback = opts && opts.onFlushedCallback;

        try {
          stream.write(buffer, function () {
            onFlushedCallback && onFlushedCallback(opts);
          });
        } catch (exc) {
          self.emit(_events2.default.ERROR, _videomailError2.default.create('Failed writing to server', 'stream.write() failed because of ' + (0, _pretty2.default)(exc), options));
        }
      }
    }
  }

  function sendPings() {
    pingInterval = window.setInterval(function () {
      debug('Recorder: pinging...');
      writeStream(Buffer.from(''));
    }, options.timeouts.pingInterval);
  }

  function stopPings() {
    clearInterval(pingInterval);
  }

  function onAudioSample(audioSample) {
    samplesCount++;

    var audioBuffer = audioSample.toBuffer();

    // if (options.verbose) {
    //     debug(
    //         'Sample #' + samplesCount + ' (' + audioBuffer.length + ' bytes):'
    //     )
    // }

    writeStream(audioBuffer);
  }

  function show() {
    recorderElement && (0, _hidden2.default)(recorderElement, false);
  }

  function onUserMediaReady() {
    try {
      debug('Recorder: onUserMediaReady()');

      userMediaLoading = blocking = unloaded = submitting = false;
      userMediaLoaded = true;

      loop = createLoop();

      show();
      self.emit(_events2.default.USER_MEDIA_READY, { paused: self.isPaused() });
    } catch (exc) {
      self.emit(_events2.default.ERROR, exc);
    }
  }

  function clearRetryTimeout() {
    debug('Recorder: clearRetryTimeout()');

    retryTimeout && clearTimeout(retryTimeout);
    retryTimeout = null;
  }

  function clearUserMediaTimeout() {
    if (userMediaTimeout) {
      debug('Recorder: clearUserMediaTimeout()');

      userMediaTimeout && clearTimeout(userMediaTimeout);
      userMediaTimeout = null;
    }
  }

  function calculateFrameProgress() {
    return (confirmedFrameNumber / (framesCount || 1) * 100).toFixed(2) + '%';
  }

  function calculateSampleProgress() {
    return (confirmedSampleNumber / (samplesCount || 1) * 100).toFixed(2) + '%';
  }

  function updateOverallProgress() {
    // when progresses aren't initialized,
    // then do a first calculation to avoid `infinite` or `null` displays

    if (!frameProgress) {
      frameProgress = calculateFrameProgress();
    }

    if (!sampleProgress) {
      sampleProgress = calculateSampleProgress();
    }

    self.emit(_events2.default.PROGRESS, frameProgress, sampleProgress);
  }

  function updateFrameProgress(args) {
    confirmedFrameNumber = args.frame ? args.frame : confirmedFrameNumber;

    frameProgress = calculateFrameProgress();

    updateOverallProgress();
  }

  function updateSampleProgress(args) {
    confirmedSampleNumber = args.sample ? args.sample : confirmedSampleNumber;

    sampleProgress = calculateSampleProgress();

    updateOverallProgress();
  }

  function preview(args) {
    confirmedFrameNumber = confirmedSampleNumber = samplesCount = framesCount = 0;

    sampleProgress = frameProgress = null;

    key = args.key;

    if (args.mp4) {
      replay.setMp4Source(args.mp4 + _constants2.default.SITE_NAME_LABEL + '/' + options.siteName + '/videomail.mp4', true);
    }

    if (args.webm) {
      replay.setWebMSource(args.webm + _constants2.default.SITE_NAME_LABEL + '/' + options.siteName + '/videomail.webm', true);
    }

    self.hide();

    var width = self.getRecorderWidth(true);
    var height = self.getRecorderHeight(true);

    self.emit(_events2.default.PREVIEW, key, width, height);

    // keep it for recording stats
    waitingTime = Date.now() - stopTime;

    recordingStats.waitingTime = waitingTime;

    if (options.debug) {
      debug('While recording, %s have been transferred and waiting time was %s', _humanize2.default.filesize(bytesSum, 2), _humanize2.default.toTime(waitingTime));
    }
  }

  function initSocket(cb) {
    if (!connected) {
      connecting = true;

      debug('Recorder: initialising web socket to %s', options.socketUrl);

      self.emit(_events2.default.CONNECTING);

      // https://github.com/maxogden/websocket-stream#binary-sockets

      // we use query parameters here because we cannot set custom headers in web sockets,
      // see https://github.com/websockets/ws/issues/467

      var url2Connect = options.socketUrl + '?' + encodeURIComponent(_constants2.default.SITE_NAME_LABEL) + '=' + encodeURIComponent(options.siteName);

      try {
        // websocket options cannot be set on client side, only on server, see
        // https://github.com/maxogden/websocket-stream/issues/116#issuecomment-296421077
        stream = (0, _websocketStream2.default)(url2Connect, {
          perMessageDeflate: false,
          // see https://github.com/maxogden/websocket-stream/issues/117#issuecomment-298826011
          objectMode: true
        });
      } catch (exc) {
        connecting = connected = false;

        var err;

        if (typeof _websocketStream2.default === 'undefined') {
          err = _videomailError2.default.create('There is no websocket', 'Cause: ' + (0, _pretty2.default)(exc), options);
        } else {
          err = _videomailError2.default.create('Failed to connect to server', 'Please upgrade your browser. Your current version does not seem to support websockets.', options, {
            browserProblem: true
          });
        }

        self.emit(_events2.default.ERROR, err);
      }

      if (stream) {
        // // useful for debugging streams
        //
        // if (!stream.originalEmit) {
        //   stream.originalEmit = stream.emit
        // }
        //
        // stream.emit = function (type) {
        //   if (stream) {
        //     debug(PIPE_SYMBOL + 'Debugging stream event:', type)
        //     var args = Array.prototype.slice.call(arguments, 0)
        //     return stream.originalEmit.apply(stream, args)
        //   }
        // }

        stream.on('close', function (err) {
          debug(PIPE_SYMBOL + 'Stream has closed');

          connecting = connected = false;

          if (err) {
            self.emit(_events2.default.ERROR, err || 'Unhandled websocket error');
          } else {
            self.emit(_events2.default.DISCONNECTED);

            // prevents from https://github.com/binarykitchen/videomail.io/issues/297 happening
            cancelAnimationFrame();
          }
        });

        stream.on('connect', function () {
          debug(PIPE_SYMBOL + 'Stream *connect* event emitted');

          if (!connected) {
            connected = true;
            connecting = unloaded = false;

            self.emit(_events2.default.CONNECTED);

            debug('Going to ask for webcam permissons now ...');

            cb && cb();
          }
        });

        stream.on('data', function (data) {
          debug(PIPE_SYMBOL + 'Stream *data* event emitted');

          var command;

          try {
            command = JSON.parse(data.toString());
          } catch (exc) {
            debug('Failed to parse command:', exc);

            self.emit(_events2.default.ERROR, _videomailError2.default.create('Invalid server command',
            // toString() since https://github.com/binarykitchen/videomail.io/issues/288
            'Contact us asap. Bad commmand was ' + data.toString() + '. ', options));
          } finally {
            executeCommand.call(self, command);
          }
        });

        stream.on('error', function (err) {
          debug(PIPE_SYMBOL + 'Stream *error* event emitted');

          connecting = connected = false;
          self.emit(_events2.default.ERROR, err);
        });

        // just experimental

        stream.on('drain', function () {
          debug(PIPE_SYMBOL + 'Stream *drain* event emitted (should not happen!)');
        });

        stream.on('preend', function () {
          debug(PIPE_SYMBOL + 'Stream *preend* event emitted');
        });

        stream.on('end', function () {
          debug(PIPE_SYMBOL + 'Stream *end* event emitted');
        });

        stream.on('drain', function () {
          debug(PIPE_SYMBOL + 'Stream *drain* event emitted');
        });

        stream.on('pipe', function () {
          debug(PIPE_SYMBOL + 'Stream *pipe* event emitted');
        });

        stream.on('unpipe', function () {
          debug(PIPE_SYMBOL + 'Stream *unpipe* event emitted');
        });

        stream.on('resume', function () {
          debug(PIPE_SYMBOL + 'Stream *resume* event emitted');
        });

        stream.on('uncork', function () {
          debug(PIPE_SYMBOL + 'Stream *uncork* event emitted');
        });

        stream.on('readable', function () {
          debug(PIPE_SYMBOL + 'Stream *preend* event emitted');
        });

        stream.on('prefinish', function () {
          debug(PIPE_SYMBOL + 'Stream *preend* event emitted');
        });

        stream.on('finish', function () {
          debug(PIPE_SYMBOL + 'Stream *preend* event emitted');
        });
      }
    }
  }

  function showUserMedia() {
    // use connected flag to prevent this from happening
    // https://github.com/binarykitchen/videomail.io/issues/323
    return connected && (isNotifying() || !isHidden() || blocking);
  }

  function userMediaErrorCallback(err) {
    userMediaLoading = false;
    clearUserMediaTimeout();

    debug('Recorder: userMediaErrorCallback()', ', Webcam characteristics:', userMedia.getCharacteristics(), ', temporary err stack:', err && err.stack || '(undefined)');

    var errorListeners = self.listeners(_events2.default.ERROR);

    if (errorListeners.length) {
      if (err.name !== _videomailError2.default.MEDIA_DEVICE_NOT_SUPPORTED) {
        self.emit(_events2.default.ERROR, _videomailError2.default.create(err, options));
      } else {
        // do not emit but retry since MEDIA_DEVICE_NOT_SUPPORTED can be a race condition
        debug('Recorder: ignore user media error', err);
      }

      // retry after a while
      retryTimeout = setTimeout(initSocket, options.timeouts.userMedia);
    } else {
      if (unloaded) {
        // can happen that container is unloaded but some user media related callbacks
        // are still in process. in that case ignore error.
        debug('Recorder: already unloaded. Not going to throw error', err);
      } else {
        debug('Recorder: no error listeners attached but throwing error', err);

        // weird situation, throw it instead of emitting since there are no error listeners
        throw _videomailError2.default.create(err, 'Unable to process this error since there are no error listeners anymore.', options);
      }
    }
  }

  function getUserMediaCallback(localStream) {
    debug('Recorder: getUserMediaCallback()');

    if (showUserMedia()) {
      try {
        clearUserMediaTimeout();

        userMedia.init(localStream, onUserMediaReady.bind(self), onAudioSample.bind(self), function (err) {
          self.emit(_events2.default.ERROR, err);
        });
      } catch (exc) {
        self.emit(_events2.default.ERROR, exc);
      }
    }
  }

  function loadGenuineUserMedia() {
    if (!navigator) {
      throw new Error('Navigator is missing!');
    }

    debug('Recorder: loadGenuineUserMedia()');

    self.emit(_events2.default.ASKING_WEBCAM_PERMISSION);

    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
      // prefer the front camera (if one is available) over the rear one
      var constraints = {
        video: {
          facingMode: 'user',
          frameRate: { ideal: options.video.fps }
        },
        audio: options.isAudioEnabled()
      };

      if (browser.isOkSafari()) {
        // do not use those width/height constraints yet,
        // current safari would throw an error
        // todo in https://github.com/binarykitchen/videomail-client/issues/142

      } else {
        if (options.hasDefinedWidth()) {
          constraints.video.width = { ideal: options.video.width };
        }

        if (options.hasDefinedHeight()) {
          constraints.video.height = { ideal: options.video.height };
        }
      }

      debug('Recorder: navigator.mediaDevices.getUserMedia()', constraints);

      navigator.mediaDevices.getUserMedia(constraints).then(getUserMediaCallback).catch(userMediaErrorCallback);
    } else {
      debug('Recorder: navigator.getUserMedia()');

      navigator.getUserMedia_({
        video: true,
        audio: options.isAudioEnabled()
      }, getUserMediaCallback, userMediaErrorCallback);
    }
  }

  function loadUserMedia() {
    if (userMediaLoaded) {
      debug('Recorder: skipping loadUserMedia() because it is already loaded');
      onUserMediaReady();
      return false;
    } else if (userMediaLoading) {
      debug('Recorder: skipping loadUserMedia() because it is already asking for permission');
      return false;
    }

    debug('Recorder: loadUserMedia()');

    self.emit(_events2.default.LOADING_USER_MEDIA);

    try {
      userMediaTimeout = setTimeout(function () {
        if (!self.isReady()) {
          self.emit(_events2.default.ERROR, browser.getNoAccessIssue());
        }
      }, options.timeouts.userMedia);

      userMediaLoading = true;

      loadGenuineUserMedia();
    } catch (exc) {
      debug('Recorder: failed to load genuine user media');

      userMediaLoading = false;

      var errorListeners = self.listeners(_events2.default.ERROR);

      if (errorListeners.length) {
        self.emit(_events2.default.ERROR, exc);
      } else {
        debug('Recorder: no error listeners attached but throwing exception', exc);
        throw exc; // throw it further
      }
    }
  }

  function executeCommand(command) {
    try {
      debug('Server commanded: %s', command.command, command.args ? ', ' + JSON.stringify(command.args) : '');

      switch (command.command) {
        case 'ready':
          if (!userMediaTimeout) {
            loadUserMedia();
          }
          break;
        case 'preview':
          preview(command.args);
          break;
        case 'error':
          this.emit(_events2.default.ERROR, _videomailError2.default.create('Oh no, server error!', command.args.err.toString() || '(No explanation given)', options));
          break;
        case 'confirmFrame':
          updateFrameProgress(command.args);
          break;
        case 'confirmSample':
          updateSampleProgress(command.args);
          break;
        case 'beginAudioEncoding':
          this.emit(_events2.default.BEGIN_AUDIO_ENCODING);
          break;
        case 'beginVideoEncoding':
          this.emit(_events2.default.BEGIN_VIDEO_ENCODING);
          break;
        default:
          this.emit(_events2.default.ERROR, 'Unknown server command: ' + command.command);
          break;
      }
    } catch (exc) {
      self.emit(_events2.default.ERROR, exc);
    }
  }

  function isNotifying() {
    return visuals.isNotifying();
  }

  function isHidden() {
    return !recorderElement || (0, _hidden2.default)(recorderElement);
  }

  function writeCommand(command, args, cb) {
    if (!cb && args && args.constructor === Function) {
      cb = args;
      args = null;
    }

    if (!connected) {
      debug('Reconnecting for the command', command, '…');

      initSocket(function () {
        writeCommand(command, args);
        cb && cb();
      });
    } else if (stream) {
      debug('$ %s', command, args ? JSON.stringify(args) : '');

      var commandObj = {
        command: command,
        args: args

        // todo commented out because for some reasons server does not accept such a long
        // array of many log lines. to examine later.
        //
        // add some useful debug info to examine weird stuff like this one
        // UnprocessableError: Unable to encode a video with FPS near zero.
        // todo consider removing this later or have it for debug=1 only?
        //
        // if (options.logger && options.logger.getLines) {
        //   commandObj.logLines = options.logger.getLines()
        // }

      };writeStream(Buffer.from(JSON.stringify(commandObj)));

      if (cb) {
        // keep all callbacks async
        setTimeout(function () {
          cb();
        }, 0);
      }
    }
  }

  function disconnect() {
    if (connected) {
      debug('Recorder: disconnect()');

      if (userMedia) {
        // prevents https://github.com/binarykitchen/videomail-client/issues/114
        userMedia.unloadRemainingEventListeners();
      }

      if (submitting) {
        // server will disconnect socket automatically after submitting
        connecting = connected = false;
      } else if (stream) {
        // force to disconnect socket right now to clean temp files on server
        // event listeners will do the rest
        stream.end();
        stream = undefined;
      }
    }
  }

  function cancelAnimationFrame() {
    loop && loop.dispose();
  }

  function getIntervalSum() {
    return loop.getElapsedTime();
  }

  function getAvgInterval() {
    return getIntervalSum() / framesCount;
  }

  this.getRecordingStats = function () {
    return recordingStats;
  };

  this.getAudioSampleRate = function () {
    return userMedia.getAudioSampleRate();
  };

  this.stop = function (params) {
    debug('stop()', params);

    var limitReached = params.limitReached;

    this.emit(_events2.default.STOPPING, limitReached);

    loop.complete();

    stopTime = Date.now();

    recordingStats = {
      avgFps: loop.getFPS(),
      wantedFps: options.video.fps,
      avgInterval: getAvgInterval(),
      wantedInterval: 1e3 / options.video.fps,

      intervalSum: getIntervalSum(),
      framesCount: framesCount,
      videoType: replay.getVideoType()
    };

    if (options.isAudioEnabled()) {
      recordingStats.samplesCount = samplesCount;
      recordingStats.sampleRate = userMedia.getAudioSampleRate();
    }

    writeCommand('stop', recordingStats);

    // beware, resetting will set framesCount to zero, so leave this here
    this.reset();
  };

  this.back = function (cb) {
    this.emit(_events2.default.GOING_BACK);

    show();
    this.reset();

    writeCommand('back', cb);
  };

  function reInitialiseAudio() {
    debug('Recorder: reInitialiseAudio()');

    clearUserMediaTimeout();

    // important to free memory
    userMedia && userMedia.stop();

    userMediaLoaded = key = canvas = ctx = null;

    loadUserMedia();
  }

  this.unload = function (e) {
    if (!unloaded) {
      var cause;

      if (e) {
        cause = e.name || e.statusText || e.toString();
      }

      debug('Recorder: unload()' + (cause ? ', cause: ' + cause : ''));

      this.reset();

      clearUserMediaTimeout();

      disconnect();

      unloaded = true;

      built = false;
    }
  };

  this.reset = function () {
    // no need to reset when already unloaded
    if (!unloaded) {
      debug('Recorder: reset()');

      this.emit(_events2.default.RESETTING);

      cancelAnimationFrame();

      // important to free memory
      userMedia && userMedia.stop();

      replay.reset();

      userMediaLoaded = key = canvas = ctx = waitingTime = null;
    }
  };

  this.validate = function () {
    return connected && framesCount > 0 && canvas === null;
  };

  this.isReady = function () {
    return userMedia.isReady();
  };

  this.pause = function (params) {
    var e = params && params.event;

    if (e instanceof window.Event) {
      params.eventType = e.type;
    }

    debug('pause()', params);

    userMedia.pause();
    loop.stop();

    this.emit(_events2.default.PAUSED);

    sendPings();
  };

  this.isPaused = function () {
    return userMedia && userMedia.isPaused();
  };

  this.resume = function () {
    debug('Recorder: resume()');

    stopPings();

    this.emit(_events2.default.RESUMING);

    userMedia.resume();
    loop.start();
  };

  function onFlushed(opts) {
    var frameNumber = opts && opts.frameNumber;

    if (frameNumber === 1) {
      self.emit(_events2.default.FIRST_FRAME_SENT);
    }
  }

  function createLoop() {
    var newLoop = (0, _animitter2.default)({ fps: options.video.fps }, draw);

    // remember it first
    originalAnimationFrameObject = newLoop.getRequestAnimationFrameObject();

    return newLoop;
  }

  function draw(deltaTime, elapsedTime) {
    try {
      // ctx and stream might become null while unloading
      if (!self.isPaused() && stream && ctx) {
        if (framesCount === 0) {
          self.emit(_events2.default.SENDING_FIRST_FRAME);
        }

        framesCount++;

        ctx.drawImage(userMedia.getRawVisuals(), 0, 0, canvas.width, canvas.height);

        recordingBuffer = frame.toBuffer();
        recordingBufferLength = recordingBuffer.length;

        if (recordingBufferLength < 1) {
          throw _videomailError2.default.create('Failed to extract webcam data.', options);
        }

        bytesSum += recordingBufferLength;

        writeStream(recordingBuffer, {
          frameNumber: framesCount,
          onFlushedCallback: onFlushed
        });

        // if (options.verbose) {
        //   debug(
        //     'Frame #' + framesCount + ' (' + recordingBufferLength + ' bytes):',
        //     ' delta=' + deltaTime + 'ms, ' +
        //     ' elapsed=' + elapsedTime + 'ms'
        //   )
        // }

        visuals.checkTimer({ intervalSum: elapsedTime });
      }
    } catch (exc) {
      self.emit(_events2.default.ERROR, exc);
    }
  }

  this.record = function () {
    if (unloaded) {
      return false;
    }

    // reconnect when needed
    if (!connected) {
      debug('Recorder: reconnecting before recording ...');

      initSocket(function () {
        self.once(_events2.default.USER_MEDIA_READY, self.record);
      });

      return false;
    }

    try {
      canvas = userMedia.createCanvas();
    } catch (exc) {
      self.emit(_events2.default.ERROR, _videomailError2.default.create('Failed to create canvas.', exc, options));

      return false;
    }

    ctx = canvas.getContext('2d');

    if (!canvas.width) {
      self.emit(_events2.default.ERROR, _videomailError2.default.create('Canvas has an invalid width.', options));

      return false;
    }

    if (!canvas.height) {
      self.emit(_events2.default.ERROR, _videomailError2.default.create('Canvas has an invalid height.', options));

      return false;
    }

    bytesSum = 0;

    frame = new _canvasToBuffer2.default(canvas, options);

    debug('Recorder: record()');
    userMedia.record();

    self.emit(_events2.default.RECORDING, framesCount);

    loop.start();
  };

  function setAnimationFrameObject(newObj) {
    // must stop and then start to make it become effective, see
    // https://github.com/hapticdata/animitter/issues/5#issuecomment-292019168
    if (loop) {
      var isRecording = self.isRecording();

      loop.stop();
      loop.setRequestAnimationFrameObject(newObj);

      if (isRecording) {
        loop.start();
      }
    }
  }

  function restoreAnimationFrameObject() {
    debug('Recorder: restoreAnimationFrameObject()');

    setAnimationFrameObject(originalAnimationFrameObject);
  }

  function loopWithTimeouts() {
    debug('Recorder: loopWithTimeouts()');

    var wantedInterval = 1e3 / options.video.fps;

    var processingTime = 0;
    var start;

    function raf(fn) {
      return setTimeout(function () {
        start = Date.now();
        fn();
        processingTime = Date.now() - start;
      },
      // reducing wanted interval by respecting the time it takes to
      // compute internally since this is not multi-threaded like
      // requestAnimationFrame
      wantedInterval - processingTime);
    }

    function cancel(id) {
      clearTimeout(id);
    }

    setAnimationFrameObject({
      requestAnimationFrame: raf,
      cancelAnimationFrame: cancel
    });
  }

  function buildElement() {
    recorderElement = (0, _hyperscript2.default)('video.' + options.selectors.userMediaClass);
    visuals.appendChild(recorderElement);
  }

  function correctDimensions() {
    if (options.hasDefinedWidth()) {
      recorderElement.width = self.getRecorderWidth(true);
    }

    if (options.hasDefinedHeight()) {
      recorderElement.height = self.getRecorderHeight(true);
    }
  }

  function initEvents() {
    debug('Recorder: initEvents()');

    self.on(_events2.default.SUBMITTING, function () {
      submitting = true;
    }).on(_events2.default.SUBMITTED, function () {
      submitting = false;
      self.unload();
    }).on(_events2.default.BLOCKING, function () {
      blocking = true;
      clearUserMediaTimeout();
    }).on(_events2.default.HIDE, function () {
      self.hide();
    }).on(_events2.default.LOADED_META_DATA, function () {
      correctDimensions();
    }).on(_events2.default.DISABLING_AUDIO, function () {
      reInitialiseAudio();
    }).on(_events2.default.ENABLING_AUDIO, function () {
      reInitialiseAudio();
    }).on(_events2.default.INVISIBLE, function () {
      loopWithTimeouts();
    }).on(_events2.default.VISIBLE, function () {
      restoreAnimationFrameObject();
    });
  }

  this.build = function () {
    var err = browser.checkRecordingCapabilities();

    if (!err) {
      err = browser.checkBufferTypes();
    }

    if (err) {
      this.emit(_events2.default.ERROR, err);
    } else {
      recorderElement = visuals.querySelector('video.' + options.selectors.userMediaClass);

      if (!recorderElement) {
        buildElement();
      }

      correctDimensions();

      // prevent audio feedback, see
      // https://github.com/binarykitchen/videomail-client/issues/35
      recorderElement.muted = true;

      // for iphones, see https://github.com/webrtc/samples/issues/929
      recorderElement.setAttribute('playsinline', true);
      recorderElement.setAttribute('webkit-playsinline', 'webkit-playsinline');

      if (!userMedia) {
        userMedia = new _userMedia2.default(this, options);
      }

      show();

      if (!built) {
        initEvents();

        if (!connected) {
          initSocket();
        } else {
          loadUserMedia();
        }
      } else {
        loadUserMedia();
      }

      built = true;
    }
  };

  this.isPaused = function () {
    return userMedia && userMedia.isPaused() && !loop.isRunning();
  };

  this.isRecording = function () {
    // checking for stream.destroyed needed since
    // https://github.com/binarykitchen/videomail.io/issues/296
    return loop && loop.isRunning() && !this.isPaused() && !isNotifying() && stream && !stream.destroyed;
  };

  this.hide = function () {
    if (!isHidden()) {
      recorderElement && (0, _hidden2.default)(recorderElement, true);

      clearUserMediaTimeout();
      clearRetryTimeout();
    }
  };

  this.isUnloaded = function () {
    return unloaded;
  };

  // these two return the true dimensions of the webcam area.
  // needed because on mobiles they might be different.

  this.getRecorderWidth = function (responsive) {
    if (userMedia && userMedia.hasVideoWidth()) {
      return userMedia.getRawWidth(responsive);
    } else if (responsive && options.hasDefinedWidth()) {
      return this.limitWidth(options.video.width);
    }
  };

  this.getRecorderHeight = function (responsive) {
    if (userMedia) {
      return userMedia.getRawHeight(responsive);
    } else if (responsive && options.hasDefinedHeight()) {
      return this.calculateHeight(responsive);
    }
  };

  function getRatio() {
    var ratio;

    if (userMedia) {
      var userMediaVideoWidth = userMedia.getVideoWidth();

      // avoid division by zero
      if (userMediaVideoWidth < 1) {
        // use as a last resort fallback computation (needed for safari 11)
        ratio = visuals.getRatio();
      } else {
        ratio = userMedia.getVideoHeight() / userMediaVideoWidth;
      }
    } else {
      ratio = options.getRatio();
    }

    return ratio;
  }

  this.calculateWidth = function (responsive) {
    var videoHeight;

    if (userMedia) {
      videoHeight = userMedia.getVideoHeight();
    } else if (recorderElement) {
      videoHeight = recorderElement.videoHeight || recorderElement.height;
    }

    return visuals.calculateWidth({
      responsive: responsive,
      ratio: getRatio(),
      videoHeight: videoHeight
    });
  };

  this.calculateHeight = function (responsive) {
    var videoWidth;

    if (userMedia) {
      videoWidth = userMedia.getVideoWidth();
    } else if (recorderElement) {
      videoWidth = recorderElement.videoWidth || recorderElement.width;
    }

    return visuals.calculateHeight({
      responsive: responsive,
      ratio: getRatio(),
      videoWidth: videoWidth
    });
  };

  this.getRawVisualUserMedia = function () {
    return recorderElement;
  };

  this.isConnected = function () {
    return connected;
  };

  this.isConnecting = function () {
    return connecting;
  };

  this.limitWidth = function (width) {
    return visuals.limitWidth(width);
  };

  this.limitHeight = function (height) {
    return visuals.limitHeight(height);
  };

  this.isUserMediaLoaded = function () {
    return userMediaLoaded;
  };
};

_util2.default.inherits(Recorder, _eventEmitter2.default);

exports.default = Recorder;

}).call(this,_dereq_("buffer").Buffer)

},{"./../../constants":85,"./../../events":86,"./../../util/browser":91,"./../../util/eventEmitter":93,"./../../util/humanize":94,"./../../util/pretty":96,"./../../util/videomailError":98,"./userMedia":113,"animitter":2,"buffer":7,"canvas-to-buffer":8,"hidden":30,"hyperscript":32,"util":78,"websocket-stream":80}],112:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _util = _dereq_('util');

var _util2 = _interopRequireDefault(_util);

var _hyperscript = _dereq_('hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _hidden = _dereq_('hidden');

var _hidden2 = _interopRequireDefault(_hidden);

var _addEventlistenerWithOptions = _dereq_('add-eventlistener-with-options');

var _addEventlistenerWithOptions2 = _interopRequireDefault(_addEventlistenerWithOptions);

var _events = _dereq_('./../../events');

var _events2 = _interopRequireDefault(_events);

var _browser = _dereq_('./../../util/browser');

var _browser2 = _interopRequireDefault(_browser);

var _eventEmitter = _dereq_('./../../util/eventEmitter');

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _videomailError = _dereq_('./../../util/videomailError');

var _videomailError2 = _interopRequireDefault(_videomailError);

var _iphoneInlineVideo = _dereq_('iphone-inline-video');

var _iphoneInlineVideo2 = _interopRequireDefault(_iphoneInlineVideo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Replay = function Replay(parentElement, options) {
  _eventEmitter2.default.call(this, options, 'Replay');

  var self = this;
  var browser = new _browser2.default(options);
  var debug = options.debug;

  var built;
  var replayElement;
  var videomail;

  function buildElement() {
    debug('Replay: buildElement()');

    replayElement = (0, _hyperscript2.default)('video.' + options.selectors.replayClass);

    if (!replayElement.setAttribute) {
      throw _videomailError2.default.create('Please upgrade browser', options);
    }

    parentElement.appendChild(replayElement);
  }

  function isStandalone() {
    return parentElement.constructor.name === 'HTMLDivElement';
  }

  function copyAttributes(newVideomail) {
    var attributeContainer;

    Object.keys(newVideomail).forEach(function (attribute) {
      attributeContainer = parentElement.querySelector('.' + attribute);

      if (attributeContainer) {
        attributeContainer.innerHTML = newVideomail[attribute];
      }
    });
  }

  function correctDimensions(options) {
    var width, height;

    if (videomail && videomail.playerWidth) {
      width = videomail.playerWidth;
    } else if (parentElement.calculateWidth) {
      width = parentElement.calculateWidth(options);
    }

    if (videomail && videomail.playerHeight) {
      height = videomail.playerHeight;
    } else if (parentElement.calculateHeight) {
      height = parentElement.calculateHeight(options);
    }

    if (width > 0) {
      replayElement.style.width = width + 'px';
    } else {
      replayElement.style.width = 'auto';
    }

    if (height > 0) {
      replayElement.style.height = height + 'px';
    } else {
      replayElement.style.height = 'auto';
    }
  }

  this.setVideomail = function (newVideomail) {
    videomail = newVideomail;

    if (videomail) {
      if (videomail.webm) {
        this.setWebMSource(videomail.webm);
      }

      if (videomail.mp4) {
        this.setMp4Source(videomail.mp4);
      }

      if (videomail.poster) {
        replayElement.setAttribute('poster', videomail.poster);
      }

      copyAttributes(videomail);
    }

    var hasAudio = videomail && videomail.recordingStats && videomail.recordingStats.sampleRate > 0;

    this.show(videomail && videomail.width, videomail && videomail.height, hasAudio);
  };

  this.show = function (recorderWidth, recorderHeight, hasAudio) {
    if (videomail) {
      correctDimensions({
        responsive: true,
        // beware that recorderWidth and recorderHeight can be null sometimes
        videoWidth: recorderWidth || replayElement.videoWidth,
        videoHeight: recorderHeight || replayElement.videoHeight
      });
    }

    (0, _hidden2.default)(replayElement, false);

    // parent element can be any object, be careful!
    if (parentElement) {
      if (parentElement.style) {
        (0, _hidden2.default)(parentElement, false);
      } else if (parentElement.show) {
        parentElement.show();
      }
    }

    if (hasAudio) {
      // https://github.com/binarykitchen/videomail-client/issues/115
      // do not set mute to false as this will mess up. just do not mention this attribute at all
      replayElement.setAttribute('volume', 1);
    } else if (!options.isAudioEnabled()) {
      replayElement.setAttribute('muted', true);
    }

    // this must be called after setting the sources and when becoming visible
    // see https://github.com/bfred-it/iphone-inline-video/issues/16
    _iphoneInlineVideo2.default && (0, _iphoneInlineVideo2.default)(replayElement, {
      iPad: true
    });

    // this forces to actually fetch the videos from the server
    replayElement.load();

    if (!videomail) {
      self.emit(_events2.default.PREVIEW_SHOWN);
    } else {
      self.emit(_events2.default.REPLAY_SHOWN);
    }
  };

  this.build = function () {
    debug('Replay: build()');

    replayElement = parentElement.querySelector('video.' + options.selectors.replayClass);

    if (!replayElement) {
      buildElement();
    }

    this.hide();

    replayElement.setAttribute('autoplay', true);
    replayElement.setAttribute('autostart', true);
    replayElement.setAttribute('autobuffer', true);
    replayElement.setAttribute('playsinline', true);
    replayElement.setAttribute('webkit-playsinline', 'webkit-playsinline');
    replayElement.setAttribute('controls', 'controls');
    replayElement.setAttribute('preload', 'auto');

    if (!built) {
      if (!isStandalone()) {
        this.on(_events2.default.PREVIEW, function (key, recorderWidth, recorderHeight) {
          self.show(recorderWidth, recorderHeight);
        });
      }

      // makes use of passive option automatically for better performance
      // https://www.npmjs.com/package/add-eventlistener-with-options
      (0, _addEventlistenerWithOptions2.default)(replayElement, 'touchstart', function (e) {
        e && e.preventDefault();

        if (this.paused) {
          play();
        } else {
          pause();
        }
      });

      replayElement.onclick = function (e) {
        e && e.preventDefault();

        if (this.paused) {
          play();
        } else {
          pause();
        }
      };
    }

    built = true;

    debug('Replay: built.');
  };

  this.unload = function () {
    built = false;
  };

  this.getVideoSource = function (type) {
    var sources = replayElement.getElementsByTagName('source');
    var l = sources.length;
    var videoType = 'video/' + type;

    var source;

    if (l) {
      var i;

      for (i = 0; i < l && !source; i++) {
        if (sources[i].getAttribute('type') === videoType) {
          source = sources[i];
        }
      }
    }

    return source;
  };

  function setVideoSource(type, src, bustCache) {
    var source = self.getVideoSource(type);

    if (src && bustCache) {
      src += '?' + Date.now();
    }

    if (!source) {
      if (src) {
        source = (0, _hyperscript2.default)('source', {
          src: src,
          type: 'video/' + type
        });

        replayElement.appendChild(source);
      }
    } else {
      if (src) {
        source.setAttribute('src', src);
      } else {
        replayElement.removeChild(source);
      }
    }
  }

  this.setMp4Source = function (src, bustCache) {
    setVideoSource('mp4', src, bustCache);
  };

  this.setWebMSource = function (src, bustCache) {
    setVideoSource('webm', src, bustCache);
  };

  this.getVideoType = function () {
    return browser.getVideoType(replayElement);
  };

  function pause(cb) {
    // avoids race condition, inspired by
    // http://stackoverflow.com/questions/36803176/how-to-prevent-the-play-request-was-interrupted-by-a-call-to-pause-error
    setTimeout(function () {
      try {
        replayElement.pause();
      } catch (exc) {
        // just ignore, see https://github.com/binarykitchen/videomail.io/issues/386
        options.logger.warn(exc);
      }

      cb && cb();
    }, 15);
  }

  function play() {
    if (replayElement && replayElement.play) {
      var p = replayElement.play();

      if (p && typeof Promise !== 'undefined' && p instanceof Promise) {
        p.catch(function (reason) {
          options.logger.warn('Caught pending play exception: %s', reason);
        });
      }
    }
  }

  this.reset = function (cb) {
    // pause video to make sure it won't consume any memory
    pause(function () {
      if (replayElement) {
        self.setMp4Source(null);
        self.setWebMSource(null);
      }

      cb && cb();
    });
  };

  this.hide = function () {
    if (isStandalone()) {
      (0, _hidden2.default)(parentElement, true);
    } else {
      replayElement && (0, _hidden2.default)(replayElement, true);
    }
  };

  this.isShown = function () {
    return replayElement && !(0, _hidden2.default)(replayElement);
  };

  this.getParentElement = function () {
    return parentElement;
  };
};

_util2.default.inherits(Replay, _eventEmitter2.default);

exports.default = Replay;

},{"./../../events":86,"./../../util/browser":91,"./../../util/eventEmitter":93,"./../../util/videomailError":98,"add-eventlistener-with-options":1,"hidden":30,"hyperscript":32,"iphone-inline-video":38,"util":78}],113:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (recorder, options) {
  _eventEmitter2.default.call(this, options, 'UserMedia');

  var rawVisualUserMedia = recorder && recorder.getRawVisualUserMedia();
  var browser = new _browser2.default(options);
  var self = this;

  var paused = false;
  var record = false;

  var audioRecorder;
  var currentVisualStream;

  function attachMediaStream(stream) {
    currentVisualStream = stream;

    if (typeof rawVisualUserMedia.srcObject !== 'undefined') {
      rawVisualUserMedia.srcObject = stream;
    } else if (typeof rawVisualUserMedia.src !== 'undefined') {
      var URL = window.URL || window.webkitURL;
      rawVisualUserMedia.src = URL.createObjectURL(stream) || stream;
    } else {
      throw _videomailError2.default.create('Error attaching stream to element.', 'Contact the developer about this', options);
    }
  }

  function setVisualStream(localMediaStream) {
    if (localMediaStream) {
      attachMediaStream(localMediaStream);
    } else {
      rawVisualUserMedia.removeAttribute('srcObject');
      rawVisualUserMedia.removeAttribute('src');

      currentVisualStream = null;
    }
  }

  function getVisualStream() {
    if (rawVisualUserMedia.mozSrcObject) {
      return rawVisualUserMedia.mozSrcObject;
    } else if (rawVisualUserMedia.srcObject) {
      return rawVisualUserMedia.srcObject;
    } else {
      return currentVisualStream;
    }
  }

  function hasEnded() {
    if (rawVisualUserMedia.ended) {
      return rawVisualUserMedia.ended;
    } else {
      var visualStream = getVisualStream();
      return visualStream && visualStream.ended;
    }
  }

  function hasInvalidDimensions() {
    if (rawVisualUserMedia.videoWidth && rawVisualUserMedia.videoWidth < 3 || rawVisualUserMedia.height && rawVisualUserMedia.height < 3) {
      return true;
    }
  }

  function getTracks(localMediaStream) {
    var tracks;

    if (localMediaStream && localMediaStream.getTracks) {
      tracks = localMediaStream.getTracks();
    }

    return tracks;
  }

  function getVideoTracks(localMediaStream) {
    var videoTracks;

    if (localMediaStream && localMediaStream.getVideoTracks) {
      videoTracks = localMediaStream.getVideoTracks();
    }

    return videoTracks;
  }

  function getFirstVideoTrack(localMediaStream) {
    var videoTracks = getVideoTracks(localMediaStream);
    var videoTrack;

    if (videoTracks && videoTracks[0]) {
      videoTrack = videoTracks[0];
    }

    return videoTrack;
  }

  function logEvent(event, params) {
    options.debug('UserMedia: ...', EVENT_ASCII, 'event', event, JSON.stringify(params));
  }

  function isPromise(anything) {
    return anything && typeof Promise !== 'undefined' && anything instanceof Promise;
  }

  function outputEvent(e) {
    logEvent(e.type, { readyState: rawVisualUserMedia.readyState });

    // remove myself
    rawVisualUserMedia.removeEventListener && rawVisualUserMedia.removeEventListener(e.type, outputEvent);
  }

  this.unloadRemainingEventListeners = function () {
    options.debug('UserMedia: unloadRemainingEventListeners()');

    _mediaEvents2.default.forEach(function (eventName) {
      rawVisualUserMedia.removeEventListener(eventName, outputEvent);
    });
  };

  this.init = function (localMediaStream, videoCallback, audioCallback, endedEarlyCallback) {
    this.stop(localMediaStream, true);

    var onPlayReached = false;
    var onLoadedMetaDataReached = false;
    var playingPromiseReached = false;

    if (options && options.isAudioEnabled()) {
      audioRecorder = audioRecorder || new _audioRecorder2.default(this, options);
    }

    function audioRecord() {
      self.removeListener(_events2.default.SENDING_FIRST_FRAME, audioRecord);
      audioRecorder && audioRecorder.record(audioCallback);
    }

    function unloadAllEventListeners() {
      options.debug('UserMedia: unloadAllEventListeners()');

      self.removeListener(_events2.default.SENDING_FIRST_FRAME, audioRecord);

      rawVisualUserMedia.removeEventListener && rawVisualUserMedia.removeEventListener('play', onPlay);

      rawVisualUserMedia.removeEventListener && rawVisualUserMedia.removeEventListener('loadedmetadata', onLoadedMetaData);

      self.unloadRemainingEventListeners();
    }

    function play() {
      // Resets the media element and restarts the media resource. Any pending events are discarded.
      try {
        rawVisualUserMedia.load();

        // fixes https://github.com/binarykitchen/videomail.io/issues/401
        // see https://github.com/MicrosoftEdge/Demos/blob/master/photocapture/scripts/demo.js#L27
        if (rawVisualUserMedia.paused) {
          options.debug('UserMedia: play()', 'media.readyState=' + rawVisualUserMedia.readyState, 'media.paused=' + rawVisualUserMedia.paused, 'media.ended=' + rawVisualUserMedia.ended, 'media.played=' + (0, _pretty2.default)(rawVisualUserMedia.played));

          var p = rawVisualUserMedia.play();

          // using the promise here just experimental for now
          // and this to catch any weird errors early if possible
          if (isPromise(p)) {
            p.then(function () {
              if (!playingPromiseReached) {
                options.debug('UserMedia: play promise successful. Playing now.');
                playingPromiseReached = true;
              }
            }).catch(function (reason) {
              // promise can be interrupted, i.E. when switching tabs
              // and promise can get resumed when switching back to tab, hence
              // do not treat this like an error
              options.debug('UserMedia:', reason.toString());
            });
          }
        }
      } catch (exc) {
        unloadAllEventListeners();
        endedEarlyCallback(exc);
      }
    }

    function fireCallbacks() {
      var readyState = rawVisualUserMedia.readyState;

      // ready state, see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState
      options.debug('UserMedia: fireCallbacks(' + 'readyState=' + readyState + ', ' + 'onPlayReached=' + onPlayReached + ', ' + 'onLoadedMetaDataReached=' + onLoadedMetaDataReached + ')');

      if (onPlayReached && onLoadedMetaDataReached) {
        videoCallback();

        if (audioRecorder && audioCallback) {
          try {
            audioRecorder.init(localMediaStream);
            self.on(_events2.default.SENDING_FIRST_FRAME, audioRecord);
          } catch (exc) {
            unloadAllEventListeners();
            endedEarlyCallback(exc);
          }
        }
      }
    }

    function onPlay() {
      try {
        logEvent('play', {
          readyState: rawVisualUserMedia.readyState,
          audio: options.isAudioEnabled(),
          width: rawVisualUserMedia.width,
          height: rawVisualUserMedia.height,
          videoWidth: rawVisualUserMedia.videoWidth,
          videoHeight: rawVisualUserMedia.videoHeight
        });

        rawVisualUserMedia.removeEventListener && rawVisualUserMedia.removeEventListener('play', onPlay);

        if (hasEnded() || hasInvalidDimensions()) {
          endedEarlyCallback(_videomailError2.default.create('Already busy', 'Probably another browser window is using your webcam?', options));
        } else {
          onPlayReached = true;
          fireCallbacks();
        }
      } catch (exc) {
        unloadAllEventListeners();
        endedEarlyCallback(exc);
      }
    }

    // player modifications to perform that must wait until `loadedmetadata` has been triggered
    function onLoadedMetaData() {
      logEvent('loadedmetadata', {
        readyState: rawVisualUserMedia.readyState,
        paused: rawVisualUserMedia.paused,
        width: rawVisualUserMedia.width,
        height: rawVisualUserMedia.height,
        videoWidth: rawVisualUserMedia.videoWidth,
        videoHeight: rawVisualUserMedia.videoHeight
      });

      rawVisualUserMedia.removeEventListener && rawVisualUserMedia.removeEventListener('loadedmetadata', onLoadedMetaData);

      if (!hasEnded() && !hasInvalidDimensions()) {
        self.emit(_events2.default.LOADED_META_DATA);

        // for android devices, we cannot call play() unless meta data has been loaded!
        // todo consider removing that if it's not the case anymore (for better performance)
        if (browser.isAndroid()) {
          play();
        }

        onLoadedMetaDataReached = true;
        fireCallbacks();
      }
    }

    try {
      var videoTrack = getFirstVideoTrack(localMediaStream);

      if (!videoTrack) {
        options.debug('UserMedia: detected (but no video tracks exist');
      } else if (!videoTrack.enabled) {
        throw _videomailError2.default.create('Webcam is disabled', 'The video track seems to be disabled. Enable it in your system.', options);
      } else {
        var description;

        if (videoTrack.label && videoTrack.label.length > 0) {
          description = videoTrack.label;
        }

        description += ' with enabled=' + videoTrack.enabled;
        description += ', muted=' + videoTrack.muted;
        description += ', remote=' + videoTrack.remote;
        description += ', readyState=' + videoTrack.readyState;
        description += ', error=' + videoTrack.error;

        options.debug('UserMedia: ' + videoTrack.kind + ' detected.', description || '');
      }

      // very useful i think, so leave this and just use options.debug()
      var heavyDebugging = true;

      if (heavyDebugging) {
        _mediaEvents2.default.forEach(function (eventName) {
          rawVisualUserMedia.addEventListener(eventName, outputEvent, false);
        });
      }

      rawVisualUserMedia.addEventListener('loadedmetadata', onLoadedMetaData);
      rawVisualUserMedia.addEventListener('play', onPlay);

      // experimental, not sure if this is ever needed/called? since 2 apr 2017
      // An error occurs while fetching the media data.
      // Error can be an object with the code MEDIA_ERR_NETWORK or higher.
      // networkState equals either NETWORK_EMPTY or NETWORK_IDLE, depending on when the download was aborted.
      rawVisualUserMedia.addEventListener('error', function (err) {
        options.logger.warn('Caught video element error event: %s', (0, _pretty2.default)(err));
      });

      setVisualStream(localMediaStream);

      play();
    } catch (exc) {
      self.emit(_events2.default.ERROR, exc);
    }
  };

  this.isReady = function () {
    return !!rawVisualUserMedia.src;
  };

  this.stop = function (visualStream, aboutToInitialize) {
    try {
      // do not stop "too much" when going to initialize anyway
      if (!aboutToInitialize) {
        if (!visualStream) {
          visualStream = getVisualStream();
        }

        var tracks = getTracks(visualStream);
        var newStopApiFound = false;

        if (tracks) {
          tracks.forEach(function (track) {
            if (track.stop) {
              newStopApiFound = true;
              track.stop();
            }
          });
        }

        // will probably become obsolete in one year (after june 2017)
        !newStopApiFound && visualStream && visualStream.stop && visualStream.stop();

        setVisualStream(null);

        audioRecorder && audioRecorder.stop();

        audioRecorder = null;
      }

      paused = record = false;
    } catch (exc) {
      self.emit(_events2.default.ERROR, exc);
    }
  };

  this.createCanvas = function () {
    return (0, _hyperscript2.default)('canvas', {
      width: this.getRawWidth(true),
      height: this.getRawHeight(true)
    });
  };

  this.getVideoHeight = function () {
    return rawVisualUserMedia.videoHeight;
  };

  this.getVideoWidth = function () {
    return rawVisualUserMedia.videoWidth;
  };

  this.hasVideoWidth = function () {
    return this.getVideoWidth() > 0;
  };

  this.getRawWidth = function (responsive) {
    var rawWidth = this.getVideoWidth();
    var widthDefined = options.hasDefinedWidth();

    if (widthDefined || options.hasDefinedHeight()) {
      if (!responsive && widthDefined) {
        rawWidth = options.video.width;
      } else {
        rawWidth = recorder.calculateWidth(responsive);
      }
    }

    if (responsive) {
      rawWidth = recorder.limitWidth(rawWidth);
    }

    return rawWidth;
  };

  this.getRawHeight = function (responsive) {
    var rawHeight;

    if (options.hasDefinedDimension()) {
      rawHeight = recorder.calculateHeight(responsive);

      if (rawHeight < 1) {
        throw _videomailError2.default.create('Bad dimensions', 'Calculated raw height cannot be less than 1!', options);
      }
    } else {
      rawHeight = this.getVideoHeight();

      if (rawHeight < 1) {
        throw _videomailError2.default.create('Bad dimensions', 'Raw video height from DOM element cannot be less than 1!', options);
      }
    }

    if (responsive) {
      rawHeight = recorder.limitHeight(rawHeight);
    }

    return rawHeight;
  };

  this.getRawVisuals = function () {
    return rawVisualUserMedia;
  };

  this.pause = function () {
    paused = true;
  };

  this.isPaused = function () {
    return paused;
  };

  this.resume = function () {
    paused = false;
  };

  this.record = function () {
    record = true;
  };

  this.isRecording = function () {
    return record;
  };

  this.getAudioSampleRate = function () {
    if (audioRecorder) {
      return audioRecorder.getSampleRate();
    } else {
      return -1;
    }
  };

  this.getCharacteristics = function () {
    return {
      audioSampleRate: this.getAudioSampleRate(),
      muted: rawVisualUserMedia && rawVisualUserMedia.muted,
      width: rawVisualUserMedia && rawVisualUserMedia.width,
      height: rawVisualUserMedia && rawVisualUserMedia.height,
      videoWidth: rawVisualUserMedia && rawVisualUserMedia.videoWidth,
      videoHeight: rawVisualUserMedia && rawVisualUserMedia.videoHeight
    };
  };
};

var _hyperscript = _dereq_('hyperscript');

var _hyperscript2 = _interopRequireDefault(_hyperscript);

var _audioRecorder = _dereq_('./../../util/audioRecorder');

var _audioRecorder2 = _interopRequireDefault(_audioRecorder);

var _videomailError = _dereq_('./../../util/videomailError');

var _videomailError2 = _interopRequireDefault(_videomailError);

var _eventEmitter = _dereq_('./../../util/eventEmitter');

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _mediaEvents = _dereq_('./../../util/mediaEvents');

var _mediaEvents2 = _interopRequireDefault(_mediaEvents);

var _pretty = _dereq_('./../../util/pretty');

var _pretty2 = _interopRequireDefault(_pretty);

var _browser = _dereq_('./../../util/browser');

var _browser2 = _interopRequireDefault(_browser);

var _events = _dereq_('./../../events');

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EVENT_ASCII = '|—O—|';

},{"./../../events":86,"./../../util/audioRecorder":90,"./../../util/browser":91,"./../../util/eventEmitter":93,"./../../util/mediaEvents":95,"./../../util/pretty":96,"./../../util/videomailError":98,"hyperscript":32}],"videomail-client":[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _standardize = _dereq_('./util/standardize');

var _standardize2 = _interopRequireDefault(_standardize);

var _client = _dereq_('./client');

var _client2 = _interopRequireDefault(_client);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (!navigator) {
  throw new Error('Navigator is missing!');
} else {
  // Ensures Videomail functionality is not broken on exotic browsers with shims.
  //
  // UMD (Universal Module Definition), inspired by https://github.com/es-shims/es5-shim
  ;(function (navigator) {
    (0, _standardize2.default)(window, navigator);
  })(navigator);
}

exports.default = _client2.default;

// also add that so that we can require() it the normal ES5 way

module.exports = _client2.default;

},{"./client":84,"./util/standardize":97}]},{},["videomail-client"])("videomail-client")
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYWRkLWV2ZW50bGlzdGVuZXItd2l0aC1vcHRpb25zL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2FuaW1pdHRlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9hdWRpby1zYW1wbGUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXItcmVzb2x2ZS9lbXB0eS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyLXNwbGl0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jYW52YXMtdG8tYnVmZmVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NsYXNzLWxpc3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2xhc3NsaXN0LmpzL2NsYXNzTGlzdC5qcyIsIm5vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb250YWlucy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLXV0aWwtaXMvbGliL3V0aWwuanMiLCJub2RlX21vZHVsZXMvY3JlYXRlLWVycm9yL2NyZWF0ZS1lcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9kZWVwbWVyZ2UvZGlzdC91bWQuanMiLCJub2RlX21vZHVsZXMvZGVmaW5lZC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9kZXNwb3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZG9jdW1lbnQtdmlzaWJpbGl0eS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9kb2N1bWVudC12aXNpYmlsaXR5L2tleXMuanMiLCJub2RlX21vZHVsZXMvZHVwbGV4aWZ5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2VsZW1lbnQtY2xvc2VzdC9lbGVtZW50LWNsb3Nlc3QuanMiLCJub2RlX21vZHVsZXMvZW5kLW9mLXN0cmVhbS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwibm9kZV9tb2R1bGVzL2ZpbGVzaXplL2xpYi9maWxlc2l6ZS5qcyIsIm5vZGVfbW9kdWxlcy9nZXQtZm9ybS1kYXRhL2xpYi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9nZXZhbC9ldmVudC5qcyIsIm5vZGVfbW9kdWxlcy9nZXZhbC9zb3VyY2UuanMiLCJub2RlX21vZHVsZXMvZ2xvYmFsL2RvY3VtZW50LmpzIiwibm9kZV9tb2R1bGVzL2dsb2JhbC93aW5kb3cuanMiLCJub2RlX21vZHVsZXMvaGlkZGVuL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2h1bWFuaXplLWR1cmF0aW9uL2h1bWFuaXplLWR1cmF0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2h5cGVyc2NyaXB0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaW5kZXhvZi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2luc2VydC1jc3MvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaW50ZXJ2YWxvbWV0ZXIvZGlzdC9pbnRlcnZhbG9tZXRlci5jb21tb24tanMuanMiLCJub2RlX21vZHVsZXMvaXBob25lLWlubGluZS12aWRlby9kaXN0L2lwaG9uZS1pbmxpbmUtdmlkZW8uY29tbW9uLWpzLmpzIiwibm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pcy1maW5pdGUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaXMtcG93ZXItb2YtdHdvL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2lzLXR5cGVkYXJyYXkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9rZXltaXJyb3IvaW5kZXguanMiLCJub2RlX21vZHVsZXMvbnVtYmVyLWlzLWludGVnZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvbnVtYmVyLWlzLW5hbi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9vbmNlL29uY2UuanMiLCJub2RlX21vZHVsZXMvcGVyZm9ybWFuY2Utbm93L2xpYi9wZXJmb3JtYW5jZS1ub3cuanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy1uZXh0aWNrLWFyZ3MvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3JhZi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcmVhZGFibGUuanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fd3JpdGFibGUuanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QuanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kuanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9ub2RlX21vZHVsZXMvc3RyaW5nX2RlY29kZXIvbGliL3N0cmluZ19kZWNvZGVyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS1icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWR5c3RhdGUvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkeXN0YXRlL3JlYWR5c3RhdGUuanMiLCJub2RlX21vZHVsZXMvcmVxdWVzdC1mcmFtZS9kaXN0L3JlcXVlc3QtZnJhbWUuanMiLCJub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvc3RyZWFtLXNoaWZ0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3N1cGVyYWdlbnQvbGliL2NsaWVudC5qcyIsIm5vZGVfbW9kdWxlcy9zdXBlcmFnZW50L2xpYi9pcy1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9saWIvcmVxdWVzdC1iYXNlLmpzIiwibm9kZV9tb2R1bGVzL3N1cGVyYWdlbnQvbGliL3Jlc3BvbnNlLWJhc2UuanMiLCJub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9saWIvc2hvdWxkLXJldHJ5LmpzIiwibm9kZV9tb2R1bGVzL3N1cGVyYWdlbnQvbGliL3V0aWxzLmpzIiwibm9kZV9tb2R1bGVzL3R5cGVkYXJyYXktdG8tYnVmZmVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3VhLXBhcnNlci1qcy9zcmMvdWEtcGFyc2VyLmpzIiwibm9kZV9tb2R1bGVzL3V0aWwtZGVwcmVjYXRlL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy91dGlsL3V0aWwuanMiLCJub2RlX21vZHVsZXMvdmFsaWRhdGUuaW8tZmxvYXQzMmFycmF5L2xpYi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy93ZWJzb2NrZXQtc3RyZWFtL3N0cmVhbS5qcyIsIm5vZGVfbW9kdWxlcy93ZWJzb2NrZXQtc3RyZWFtL3dzLWZhbGxiYWNrLmpzIiwibm9kZV9tb2R1bGVzL3dyYXBweS93cmFwcHkuanMiLCJwYWNrYWdlLmpzb24iLCJzcmMvY2xpZW50LmpzIiwic3JjL2NvbnN0YW50cy5qcyIsInNyYy9ldmVudHMuanMiLCJzcmMvb3B0aW9ucy5qcyIsInNyYy9yZXNvdXJjZS5qcyIsInNyYy9zdHlsZXMvY3NzL21haW4ubWluLmNzcy5qcyIsInNyYy91dGlsL2F1ZGlvUmVjb3JkZXIuanMiLCJzcmMvdXRpbC9icm93c2VyLmpzIiwic3JjL3V0aWwvY29sbGVjdExvZ2dlci5qcyIsInNyYy91dGlsL2V2ZW50RW1pdHRlci5qcyIsInNyYy91dGlsL2h1bWFuaXplLmpzIiwic3JjL3V0aWwvbWVkaWFFdmVudHMuanMiLCJzcmMvdXRpbC9wcmV0dHkuanMiLCJzcmMvdXRpbC9zdGFuZGFyZGl6ZS5qcyIsInNyYy91dGlsL3ZpZGVvbWFpbEVycm9yLmpzIiwic3JjL3dyYXBwZXJzL2J1dHRvbnMuanMiLCJzcmMvd3JhcHBlcnMvY29udGFpbmVyLmpzIiwic3JjL3dyYXBwZXJzL2RpbWVuc2lvbi5qcyIsInNyYy93cmFwcGVycy9mb3JtLmpzIiwic3JjL3dyYXBwZXJzL29wdGlvbnNXcmFwcGVyLmpzIiwic3JjL3dyYXBwZXJzL3Zpc3VhbHMuanMiLCJzcmMvd3JhcHBlcnMvdmlzdWFscy9pbnNpZGUvcmVjb3JkZXIvY291bnRkb3duLmpzIiwic3JjL3dyYXBwZXJzL3Zpc3VhbHMvaW5zaWRlL3JlY29yZGVyL3BhdXNlZE5vdGUuanMiLCJzcmMvd3JhcHBlcnMvdmlzdWFscy9pbnNpZGUvcmVjb3JkZXIvcmVjb3JkTm90ZS5qcyIsInNyYy93cmFwcGVycy92aXN1YWxzL2luc2lkZS9yZWNvcmRlci9yZWNvcmRUaW1lci5qcyIsInNyYy93cmFwcGVycy92aXN1YWxzL2luc2lkZS9yZWNvcmRlckluc2lkZXMuanMiLCJzcmMvd3JhcHBlcnMvdmlzdWFscy9ub3RpZmllci5qcyIsInNyYy93cmFwcGVycy92aXN1YWxzL3JlY29yZGVyLmpzIiwic3JjL3dyYXBwZXJzL3Zpc3VhbHMvcmVwbGF5LmpzIiwic3JjL3dyYXBwZXJzL3Zpc3VhbHMvdXNlck1lZGlhLmpzIiwic3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoYUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xIQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25LQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMzR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3BPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25GQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzlTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN2S0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ppQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5V0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDeExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDeEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzkrQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3JOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3ZwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZFQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL1FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDck9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxNEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVtQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNySUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNuRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN6Z0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ25FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMxa0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDdExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUMvR0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQUksYUFBSjtBQUNBLElBQUksT0FBSjs7QUFFQSxTQUFTLGFBQVQsR0FBc0M7QUFBQSxNQUFkLE9BQWMsdUVBQUosRUFBSTs7QUFDcEMsTUFBTSxlQUFlLDRDQUEwQixPQUExQixDQUFyQjs7QUFFQSxrQkFBZ0IsaUJBQWlCLDRCQUFrQixZQUFsQixDQUFqQzs7QUFFQSxlQUFhLE1BQWIsR0FBc0IsYUFBdEI7QUFDQSxlQUFhLEtBQWIsR0FBcUIsYUFBYSxNQUFiLENBQW9CLEtBQXpDOztBQUVBLDJCQUFlLFlBQWYsQ0FBNEIsWUFBNUI7O0FBRUEsU0FBTyxZQUFQO0FBQ0Q7O0FBRUQsU0FBUyxVQUFULENBQXFCLFlBQXJCLEVBQW1DO0FBQ2pDLE1BQUksQ0FBQyxPQUFMLEVBQWM7QUFDWixjQUFVLHNCQUFZLFlBQVosQ0FBVjtBQUNEOztBQUVELFNBQU8sT0FBUDtBQUNEOztBQUVELElBQU0sa0JBQWtCLFNBQWxCLGVBQWtCLENBQVUsT0FBVixFQUFtQjtBQUN6QyxNQUFNLGVBQWUsY0FBYyxPQUFkLENBQXJCO0FBQ0EsTUFBTSxZQUFZLHdCQUFjLFlBQWQsQ0FBbEI7QUFDQSxNQUFNLFFBQVEsYUFBYSxLQUEzQjs7QUFFQSxNQUFJLE1BQUo7O0FBRUEseUJBQWEsSUFBYixDQUFrQixJQUFsQixFQUF3QixZQUF4QixFQUFzQyxpQkFBdEM7O0FBRUE7QUFDQSxPQUFLLE1BQUw7O0FBRUEsV0FBUyxLQUFULEdBQWtCO0FBQ2hCLFFBQUksV0FBVyxLQUFmOztBQUVBLHlCQUFXLFdBQVgsQ0FBdUIsVUFBVSxhQUFWLEVBQXlCO0FBQzlDLFlBQ0Usd0JBREYsRUFFRSxpQkFGRixFQUVxQixnQkFBZ0IsR0FGckMsRUFHRSxhQUhGLEVBR2lCLENBQUMsUUFBRCxHQUFZLEdBSDdCLEVBSUUsY0FKRixFQUlrQixDQUFDLFVBQVUsT0FBVixFQUpuQjs7QUFPQTtBQUNBO0FBQ0EsVUFBSSxDQUFDLFFBQUQsSUFBYSxDQUFDLFVBQVUsT0FBVixFQUFsQixFQUF1QztBQUNyQyxtQkFBVyxJQUFYO0FBQ0EsWUFBSTtBQUNGLG9CQUFVLEtBQVY7QUFDRCxTQUZELENBRUUsT0FBTyxHQUFQLEVBQVk7QUFDWixnQkFBTSxHQUFOO0FBQ0QsU0FKRCxTQUlVO0FBQ1IscUJBQVcsS0FBWDtBQUNEO0FBQ0Y7QUFDRixLQXBCRDtBQXFCRDs7QUFFRCxPQUFLLElBQUwsR0FBWSxZQUFZO0FBQ3RCLFFBQUksVUFBVSxPQUFWLEVBQUosRUFBeUI7QUFDdkIsZ0JBQVUsSUFBVjtBQUNELEtBRkQsTUFFTztBQUNMLFdBQUssSUFBTCxDQUFVLGlCQUFPLEtBQWpCLEVBQXdCLFVBQVUsSUFBbEM7QUFDRDtBQUNGLEdBTkQ7O0FBUUE7QUFDQTtBQUNBLE9BQUssTUFBTCxHQUFjLFVBQVUsU0FBVixFQUFxQixhQUFyQixFQUFvQztBQUNoRCxhQUFTLFdBQVQsR0FBd0I7QUFDdEIsVUFBSSxPQUFPLGFBQVAsS0FBeUIsUUFBN0IsRUFBdUM7QUFDckMsd0JBQWdCLFNBQVMsY0FBVCxDQUF3QixhQUF4QixDQUFoQjtBQUNEOztBQUVELFVBQUksQ0FBQyxhQUFMLEVBQW9CO0FBQ2xCLFlBQUksQ0FBQyxVQUFVLE9BQVYsRUFBTCxFQUEwQjtBQUN4QjtBQUNBLG9CQUFVLEtBQVY7QUFDRDs7QUFFRCxZQUFJLENBQUMsVUFBVSxVQUFWLEVBQUwsRUFBNkI7QUFDM0I7QUFDQSwrQkFBVyxrQkFBWDtBQUNBLGdCQUFNLElBQUksS0FBSixDQUFVLGdFQUFWLENBQU47QUFDRDtBQUNGLE9BWEQsTUFXTztBQUNMLFlBQUksVUFBVSxrQkFBVixDQUE2QixhQUE3QixDQUFKLEVBQWlEO0FBQy9DLG1CQUFTLHFCQUFXLGFBQVgsRUFBMEIsWUFBMUIsQ0FBVDtBQUNBLGlCQUFPLEtBQVA7QUFDRDtBQUNGOztBQUVELFVBQUksQ0FBQyxNQUFMLEVBQWE7QUFDWCxpQkFBUyxVQUFVLFNBQVYsRUFBVDtBQUNEOztBQUVELFVBQUksQ0FBQyxhQUFMLEVBQW9CO0FBQ2xCLHdCQUFnQixPQUFPLGdCQUFQLEVBQWhCO0FBQ0Q7O0FBRUQsVUFBSSxTQUFKLEVBQWU7QUFDYixvQkFBWSxVQUFVLG1CQUFWLENBQThCLFNBQTlCLEVBQXlDLGFBQXpDLENBQVo7QUFDRDs7QUFFRCxVQUFJLFVBQVUsa0JBQVYsQ0FBNkIsYUFBN0IsQ0FBSixFQUFpRDtBQUMvQztBQUNBLGtCQUFVLFFBQVYsQ0FBbUIsRUFBQyxNQUFNLElBQVAsRUFBbkI7QUFDRCxPQUhELE1BR087QUFDTCxrQkFBVSxRQUFWLENBQW1CLFNBQW5CO0FBQ0Q7O0FBRUQ7QUFDQSxpQkFBVyxZQUFZO0FBQ3JCLGVBQU8sWUFBUCxDQUFvQixTQUFwQjtBQUNBLGtCQUFVLGNBQVY7QUFDRCxPQUhELEVBR0csSUFISCxFQTNDc0IsQ0E4Q2I7QUFDVjs7QUFFRCx5QkFBVyxXQUFYLENBQXVCLFdBQXZCO0FBQ0QsR0FuREQ7O0FBcURBLE9BQUssU0FBTCxHQUFpQixVQUFVLE1BQVYsRUFBa0I7QUFDakMsUUFBSSxNQUFKLEVBQVk7QUFDVixhQUFPLElBQVA7QUFDQSxhQUFPLEtBQVA7QUFDRDs7QUFFRCxjQUFVLFNBQVYsQ0FBb0IsTUFBcEI7QUFDRCxHQVBEOztBQVNBLE9BQUssTUFBTCxHQUFjLFVBQVUsQ0FBVixFQUFhO0FBQ3pCLHlCQUFXLGtCQUFYO0FBQ0EsY0FBVSxNQUFWLENBQWlCLENBQWpCO0FBQ0QsR0FIRDs7QUFLQSxPQUFLLElBQUwsR0FBWSxZQUFZO0FBQ3RCLGNBQVUsSUFBVjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxHQUFMLEdBQVcsVUFBVSxHQUFWLEVBQWUsRUFBZixFQUFtQjtBQUM1QiwyQkFBYSxZQUFiLEVBQTJCLEdBQTNCLENBQStCLEdBQS9CLEVBQW9DLFVBQVUsR0FBVixFQUFlLFNBQWYsRUFBMEI7QUFDNUQsVUFBSSxHQUFKLEVBQVM7QUFDUCxXQUFHLEdBQUg7QUFDRCxPQUZELE1BRU87QUFDTCxXQUFHLElBQUgsRUFBUyxVQUFVLG1CQUFWLENBQThCLFNBQTlCLENBQVQ7QUFDRDtBQUNGLEtBTkQ7QUFPRCxHQVJEOztBQVVBLE9BQUssU0FBTCxHQUFpQixZQUFZO0FBQzNCLFdBQU8sV0FBVyxZQUFYLEVBQXlCLFNBQXpCLEVBQVA7QUFDRCxHQUZEOztBQUlBO0FBQ0EsT0FBSyxPQUFMLEdBQWUsWUFBWTtBQUN6QixXQUFPLFVBQVUsT0FBVixFQUFQO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLE1BQUwsR0FBYyxZQUFZO0FBQ3hCLGNBQVUsTUFBVjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxXQUFMLEdBQW1CLFlBQVk7QUFDN0IsUUFBSSxhQUFhLE1BQWIsSUFBdUIsYUFBYSxNQUFiLENBQW9CLFFBQS9DLEVBQXlEO0FBQ3ZELGFBQU8sYUFBYSxNQUFiLENBQW9CLFFBQXBCLEVBQVA7QUFDRDtBQUNGLEdBSkQ7O0FBTUE7QUFDRCxDQXJKRDs7QUF1SkEsZUFBSyxRQUFMLENBQWMsZUFBZDs7QUFFQSxPQUFPLElBQVAsQ0FBWSxvQkFBVSxNQUF0QixFQUE4QixPQUE5QixDQUFzQyxVQUFVLElBQVYsRUFBZ0I7QUFDcEQsa0JBQWdCLElBQWhCLElBQXdCLG9CQUFVLE1BQVYsQ0FBaUIsSUFBakIsQ0FBeEI7QUFDRCxDQUZEOztBQUlBO0FBQ0EsZ0JBQWdCLE1BQWhCOztrQkFFZSxlOzs7Ozs7OztBQ3ZNZjs7a0JBRWU7QUFDYixtQkFBaUIsdUJBREo7QUFFYixpQkFBZSx3QkFGRjs7QUFJYixVQUFRO0FBQ04sdUJBQW1CLGtCQURiO0FBRU4sbUJBQWU7QUFGVDtBQUpLLEM7Ozs7Ozs7OztBQ0ZmOzs7Ozs7a0JBRWUseUJBQVU7QUFDdkIsU0FBTyxJQURnQixFQUNWO0FBQ2IsY0FBWSxJQUZXLEVBRUw7QUFDbEIsc0JBQW9CLElBSEcsRUFHRztBQUMxQixvQkFBa0IsSUFKSyxFQUlDO0FBQ3hCLGNBQVksSUFMVyxFQUtMO0FBQ2xCLGFBQVcsSUFOWSxFQU1OO0FBQ2pCLGdCQUFjLElBUFMsRUFPSDtBQUNwQixhQUFXLElBUlksRUFRTjtBQUNqQixhQUFXLElBVFksRUFTTjtBQUNqQixZQUFVLElBVmEsRUFVUDtBQUNoQixZQUFVLElBWGEsRUFXUDtBQUNoQix3QkFBc0IsSUFaQyxFQVlLO0FBQzVCLHdCQUFzQixJQWJDLEVBYUs7QUFDNUIsYUFBVyxJQWRZLEVBY047QUFDakIsVUFBUSxJQWZlLEVBZVQ7QUFDZCxZQUFVLElBaEJhLEVBZ0JQO0FBQ2hCLFdBQVMsSUFqQmMsRUFpQlI7QUFDZixpQkFBZSxJQWxCUSxFQWtCRjtBQUNyQixnQkFBYyxJQW5CUyxFQW1CSDtBQUNwQixXQUFTLElBcEJjLEVBb0JSO0FBQ2YsY0FBWSxJQXJCVyxFQXFCTDtBQUNsQixTQUFPLElBdEJnQixFQXNCVjtBQUNiLGNBQVksSUF2QlcsRUF1Qkw7QUFDbEIsYUFBVyxJQXhCWSxFQXdCTjtBQUNqQixTQUFPLElBekJnQixFQXlCVjtBQUNiLFlBQVUsSUExQmEsRUEwQlA7QUFDaEIsdUJBQXFCLElBM0JFLEVBMkJJO0FBQzNCLG9CQUFrQixJQTVCSyxFQTRCQztBQUN4QixRQUFNLElBN0JpQixFQTZCWDtBQUNaLGFBQVcsSUE5QlksRUE4Qk47QUFDakIsa0JBQWdCLElBL0JPLEVBK0JEO0FBQ3RCLG1CQUFpQixJQWhDTSxFQWdDQTtBQUN2QixvQkFBa0IsSUFqQ0ssRUFpQ0M7QUFDeEIsaUJBQWUsSUFsQ1EsRUFrQ0Y7QUFDckIsY0FBWSxJQW5DVyxFQW1DTDtBQUNsQixpQkFBZSxJQXBDUSxFQW9DRjtBQUNyQiw0QkFBMEIsSUFyQ0gsRUFxQ1M7QUFDaEMsV0FBUyxJQXRDYyxFQXNDUjtBQUNmLGFBQVcsSUF2Q1ksQ0F1Q047QUF2Q00sQ0FBVixDOzs7Ozs7Ozs7O0FDRmY7O0FBRUEsSUFBTSxhQUFhLFFBQVEsR0FBUixDQUFZLFFBQVosS0FBeUIsWUFBNUM7O2tCQUVlO0FBQ2IsVUFBUSxJQURLLEVBQ3lCO0FBQ3RDLGdCQUFjLEVBRkQsRUFFeUI7QUFDdEMsV0FBUyxDQUFDLFVBSEcsRUFHeUI7QUFDdEMsV0FBUyxzQkFKSSxFQUl5QjtBQUN0QyxhQUFXLG9CQUxFLEVBS3lCO0FBQ3RDLFlBQVUsdUJBTkcsRUFNeUI7QUFDdEMsU0FBTyxJQVBNLEVBT3lCO0FBQ3RDLGFBQVcsSUFSRSxFQVF5QjtBQUN0QyxlQUFhLElBVEEsRUFTeUI7QUFDdEMsbUJBQWlCLElBVkosRUFVeUI7QUFDdEMsZUFBYSxJQVhBLEVBV3lCO0FBQ3RDLGlCQUFlLEtBWkYsRUFZeUI7QUFDQTtBQUN0Qyx3QkFBc0IsSUFkVCxFQWN5QjtBQUNBO0FBQ0E7O0FBRXRDLFdBQVMsa0JBbEJJLEVBa0J5QjtBQUNBOztBQUV0QztBQUNBLGFBQVc7QUFDVCxpQkFBYSxXQURKO0FBRVQsaUJBQWEsUUFGSjtBQUdULG9CQUFnQixXQUhQO0FBSVQsa0JBQWMsU0FKTDtBQUtULGlCQUFhLElBTEosRUFLMkI7QUFDcEMsa0JBQWMsU0FOTDs7QUFRVCx1QkFBbUIsUUFSVjtBQVNULHNCQUFrQixPQVRUO0FBVVQsdUJBQW1CLFFBVlY7QUFXVCx3QkFBb0IsU0FYWDtBQVlULDRCQUF3QixhQVpmO0FBYVQsdUJBQW1CLFFBYlY7O0FBZVQsc0JBQWtCLFNBZlQsRUFlNEI7QUFDckMsbUJBQWUsTUFoQk4sRUFnQjRCO0FBQ3JDLGlCQUFhLElBakJKLEVBaUI0QjtBQUNyQyxtQkFBZSxNQWxCTixFQWtCNEI7O0FBRXJDLGtCQUFjLGVBcEJMO0FBcUJULHdCQUFvQixzQkFyQlg7QUFzQlQsb0JBQWdCLGlCQXRCUDs7QUF3QlQsWUFBUSxJQXhCQyxFQXdCeUI7QUFDbEMsb0JBQWdCLElBekJQLEVBeUJ5QjtBQUNBO0FBQ2xDLDBCQUFzQixJQTNCYixDQTJCeUI7QUEzQnpCLEdBdEJFOztBQW9EYixTQUFPO0FBQ0wsYUFBUyxLQURKLEVBQzZCO0FBQ2xDLGNBQVUsS0FGTCxFQUU2QjtBQUNsQyxZQUFRLEdBSEgsRUFHNkI7QUFDQTtBQUNsQyxnQkFBWSxJQUxQLENBSzZCO0FBQ0E7QUFDQTtBQVA3QixHQXBETTs7QUE4RGIsU0FBTztBQUNMLFNBQUssRUFEQSxFQUN1QjtBQUM1QixrQkFBYyxFQUZULEVBRXVCO0FBQzVCLGVBQVcsQ0FITixFQUd1Qjs7QUFFNUI7QUFDQTs7QUFFQSxXQUFPLE1BUkYsRUFRZTtBQUNwQixZQUFRLE1BVEgsQ0FTZTtBQVRmLEdBOURNOztBQTBFYixTQUFPO0FBQ0wsYUFBUyxJQURKO0FBRUwsV0FBTyxDQUFDLE1BQUQsRUFBUyxNQUFULENBRkYsQ0FFcUI7QUFGckIsR0ExRU07O0FBK0ViO0FBQ0EsUUFBTTtBQUNKLGtCQUFjLFFBRFY7QUFFSixnQkFBWSxJQUZSO0FBR0osYUFBUyxhQUhMO0FBSUosY0FBVSxVQUpOO0FBS0osa0JBQWMsZUFMVjtBQU1KLGFBQVM7QUFDUCxnQkFBVSxjQURIO0FBRVAscUJBQWUsY0FGUjtBQUdQLGdCQUFVLFFBSEg7QUFJUCxlQUFTLE9BSkY7QUFLUCxpQkFBVztBQUxKO0FBTkwsR0FoRk87O0FBK0ZiLFlBQVU7QUFDUixlQUFXLEtBREgsRUFDWTtBQUNwQixvQkFBZ0IsSUFGUjtBQUdSLG9CQUFnQixDQUhSO0FBSVIsdUJBQW1CO0FBSlgsR0EvRkc7O0FBc0diLFlBQVU7QUFDUixlQUFXLElBREgsRUFDaUI7QUFDekIsZ0JBQVksR0FGSixFQUVpQjtBQUN6QixrQkFBYyxJQUhOLENBR2lCO0FBSGpCLEdBdEdHOztBQTRHYixhQUFXO0FBQ1Q7QUFDQTtBQUNBLGlDQUE2QjtBQUhwQixHQTVHRTs7QUFrSGIsWUFBVTtBQUNSLFVBQU0sSUFERSxFQUNVO0FBQ2xCLFFBQUksSUFGSSxFQUVVO0FBQ2xCLGFBQVMsSUFIRCxFQUdVO0FBQ2xCLFVBQU0sSUFKRSxDQUlVO0FBSlYsR0FsSEc7O0FBeUhiO0FBQ0E7QUFDQSxjQUFZLEtBM0hDOztBQTZIYjtBQUNBLGlCQUFlLElBOUhGOztBQWdJYjtBQUNBLDRCQUEwQixLQWpJYjs7QUFtSWI7QUFDQTtBQUNBLGdCQUFjLEtBcklEOztBQXVJYjtBQUNBLGdCQUFjLElBeElEOztBQTBJYjtBQTFJYSxDOzs7Ozs7Ozs7OztrQkNDQSxVQUFVLE9BQVYsRUFBbUI7QUFDaEMsTUFBTSxRQUFRLEVBQWQ7O0FBRUEsV0FBUyxpQkFBVCxDQUE0QixTQUE1QixFQUF1QyxJQUF2QyxFQUE2QztBQUMzQyxRQUFJLFFBQVEsUUFBUixDQUFpQixJQUFqQixLQUEwQixDQUFDLFVBQVUsSUFBVixDQUEvQixFQUFnRDtBQUM5QyxnQkFBVSxJQUFWLElBQWtCLFFBQVEsUUFBUixDQUFpQixJQUFqQixDQUFsQjtBQUNEOztBQUVELFdBQU8sU0FBUDtBQUNEOztBQUVELFdBQVMsa0JBQVQsQ0FBNkIsU0FBN0IsRUFBd0M7QUFDdEMsUUFBSSxRQUFRLFFBQVosRUFBc0I7QUFDcEIsa0JBQVksa0JBQWtCLFNBQWxCLEVBQTZCLE1BQTdCLENBQVo7QUFDQSxrQkFBWSxrQkFBa0IsU0FBbEIsRUFBNkIsSUFBN0IsQ0FBWjtBQUNBLGtCQUFZLGtCQUFrQixTQUFsQixFQUE2QixTQUE3QixDQUFaO0FBQ0Esa0JBQVksa0JBQWtCLFNBQWxCLEVBQTZCLE1BQTdCLENBQVo7QUFDRDs7QUFFRCxXQUFPLFNBQVA7QUFDRDs7QUFFRCxXQUFTLFNBQVQsQ0FBb0IsR0FBcEIsRUFBeUIsR0FBekIsRUFBOEI7QUFDNUIsUUFBSSxPQUFPLElBQUksSUFBWCxJQUFtQixJQUFJLElBQUosQ0FBUyxLQUFoQyxFQUF1QztBQUNyQztBQUNBLFlBQU0sSUFBSSxJQUFKLENBQVMsS0FBZjs7QUFFQSxVQUFJLENBQUMsSUFBSSxPQUFMLElBQWdCLElBQUksSUFBeEIsRUFBOEI7QUFDNUIsWUFBSSxPQUFKLEdBQWMsSUFBSSxJQUFsQjtBQUNEO0FBQ0Y7O0FBRUQsV0FBTyxHQUFQO0FBQ0Q7O0FBRUQsV0FBUyxLQUFULENBQWdCLEtBQWhCLEVBQXVCLEVBQXZCLEVBQTJCO0FBQ3pCLHlCQUNHLEdBREgsQ0FDTyxnQkFBZ0IsS0FBaEIsR0FBd0IsV0FEL0IsRUFFRyxHQUZILENBRU8sUUFGUCxFQUVpQixrQkFGakIsRUFHRyxHQUhILENBR08sb0JBQVUsZUFIakIsRUFHa0MsUUFBUSxRQUgxQyxFQUlHLE9BSkgsQ0FJVyxRQUFRLFFBQVIsQ0FBaUIsVUFKNUIsRUFLRyxHQUxILENBS08sVUFBVSxHQUFWLEVBQWUsR0FBZixFQUFvQjtBQUN2QixZQUFNLFVBQVUsR0FBVixFQUFlLEdBQWYsQ0FBTjs7QUFFQSxVQUFJLEdBQUosRUFBUztBQUNQLFdBQUcsR0FBSDtBQUNELE9BRkQsTUFFTztBQUNMLFlBQU0sWUFBWSxJQUFJLElBQXRCOztBQUVBLFlBQUksUUFBUSxLQUFaLEVBQW1CO0FBQ2pCLGdCQUFNLFNBQU4sSUFBbUIsU0FBbkI7QUFDRDs7QUFFRCxXQUFHLElBQUgsRUFBUyxTQUFUO0FBQ0Q7QUFDRixLQW5CSDtBQW9CRDs7QUFFRCxXQUFTLEtBQVQsQ0FBZ0IsTUFBaEIsRUFBd0IsU0FBeEIsRUFBbUMsVUFBbkMsRUFBK0MsRUFBL0MsRUFBbUQ7QUFDakQsUUFBSSxDQUFDLEVBQUwsRUFBUztBQUNQLFdBQUssVUFBTDtBQUNBLG1CQUFhLElBQWI7QUFDRDs7QUFFRCxRQUFNLGNBQWMsRUFBcEI7O0FBRUEsUUFBSSxNQUFNLFFBQVEsT0FBUixHQUFrQixhQUE1QjtBQUNBLFFBQUksT0FBSjs7QUFFQSxRQUFJLFVBQUosRUFBZ0I7QUFDZCxhQUFPLFVBQVA7QUFDRDs7QUFFRCxjQUFVLDBCQUFXLE1BQVgsRUFBbUIsR0FBbkIsQ0FBVjs7QUFFQSxnQkFBWSxvQkFBVSxlQUF0QixJQUF5QyxRQUFRLFFBQWpEOztBQUVBLFlBQ0csS0FESCxDQUNTLFdBRFQsRUFFRyxJQUZILENBRVEsU0FGUixFQUdHLE9BSEgsQ0FHVyxRQUFRLE9BSG5CLEVBSUcsR0FKSCxDQUlPLFVBQVUsR0FBVixFQUFlLEdBQWYsRUFBb0I7QUFDdkIsWUFBTSxVQUFVLEdBQVYsRUFBZSxHQUFmLENBQU47O0FBRUEsVUFBSSxHQUFKLEVBQVM7QUFDUCxXQUFHLEdBQUg7QUFDRCxPQUZELE1BRU87QUFDTCxZQUFJLFFBQVEsS0FBUixJQUFpQixVQUFVLFNBQVYsQ0FBckIsRUFBMkM7QUFDekMsZ0JBQU0sVUFBVSxTQUFWLENBQU4sSUFBOEIsSUFBSSxJQUFKLENBQVMsU0FBdkM7QUFDRDs7QUFFRCxXQUFHLElBQUgsRUFBUyxJQUFJLElBQUosQ0FBUyxTQUFsQixFQUE2QixJQUFJLElBQWpDO0FBQ0Q7QUFDRixLQWhCSDtBQWlCRDs7QUFFRCxPQUFLLEdBQUwsR0FBVyxVQUFVLEtBQVYsRUFBaUIsRUFBakIsRUFBcUI7QUFDOUIsUUFBSSxRQUFRLEtBQVIsSUFBaUIsTUFBTSxLQUFOLENBQXJCLEVBQW1DO0FBQ2pDO0FBQ0EsaUJBQVcsWUFBTTtBQUNmLFdBQUcsSUFBSCxFQUFTLE1BQU0sS0FBTixDQUFUO0FBQ0QsT0FGRCxFQUVHLENBRkg7QUFHRCxLQUxELE1BS087QUFDTCxZQUFNLEtBQU4sRUFBYSxFQUFiO0FBQ0Q7QUFDRixHQVREOztBQVdBLE9BQUssV0FBTCxHQUFtQixVQUFVLEdBQVYsRUFBZSxFQUFmLEVBQW1CO0FBQ3BDLFFBQU0sY0FBYyxFQUFwQjtBQUNBLFFBQU0sTUFBTSxRQUFRLE9BQVIsR0FBa0IsZ0JBQTlCO0FBQ0EsUUFBTSxVQUFVLDBCQUFXLE1BQVgsRUFBbUIsR0FBbkIsQ0FBaEI7O0FBRUEsZ0JBQVksb0JBQVUsZUFBdEIsSUFBeUMsUUFBUSxRQUFqRDs7QUFFQSxZQUNHLEtBREgsQ0FDUyxXQURULEVBRUcsSUFGSCxDQUVRLEdBRlIsRUFHRyxPQUhILENBR1csUUFBUSxPQUhuQixFQUlHLEdBSkgsQ0FJTyxVQUFVLEdBQVYsRUFBZSxHQUFmLEVBQW9CO0FBQ3ZCLFlBQU0sVUFBVSxHQUFWLEVBQWUsR0FBZixDQUFOO0FBQ0EsVUFBSSxHQUFKLEVBQVM7QUFDUCxjQUFNLEdBQUcsR0FBSCxDQUFOO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsY0FBTSxJQUFOO0FBQ0Q7QUFDRixLQVhIO0FBWUQsR0FuQkQ7O0FBcUJBLE9BQUssSUFBTCxHQUFZLFVBQVUsU0FBVixFQUFxQixFQUFyQixFQUF5QjtBQUNuQyxnQkFBWSxtQkFBbUIsU0FBbkIsQ0FBWjs7QUFFQTtBQUNBO0FBQ0EsY0FBVSxvQkFBVSxhQUFwQixJQUFxQyxRQUFRLE9BQTdDOztBQUVBLFFBQUksUUFBUSxTQUFSLENBQWtCLDJCQUF0QixFQUFtRDtBQUNqRCxjQUFRLFNBQVIsQ0FBa0IsMkJBQWxCLENBQ0UsU0FERixFQUVFLFVBQVUsR0FBVixFQUFlLGlCQUFmLEVBQWtDO0FBQ2hDLFlBQUksR0FBSixFQUFTO0FBQ1AsYUFBRyxHQUFIO0FBQ0QsU0FGRCxNQUVPO0FBQ0wsZ0JBQU0sTUFBTixFQUFjLGlCQUFkLEVBQWlDLEVBQWpDO0FBQ0Q7QUFDRixPQVJIO0FBVUQsS0FYRCxNQVdPO0FBQ0wsWUFBTSxNQUFOLEVBQWMsU0FBZCxFQUF5QixFQUF6QjtBQUNEO0FBQ0YsR0FyQkQ7O0FBdUJBLE9BQUssR0FBTCxHQUFXLFVBQVUsU0FBVixFQUFxQixFQUFyQixFQUF5QjtBQUNsQyxVQUFNLEtBQU4sRUFBYSxTQUFiLEVBQXdCLFVBQVUsR0FBbEMsRUFBdUMsRUFBdkM7QUFDRCxHQUZEOztBQUlBLE9BQUssSUFBTCxHQUFZLFVBQVUsUUFBVixFQUFvQixHQUFwQixFQUF5QixFQUF6QixFQUE2QjtBQUN2QyxRQUFJLFFBQUo7O0FBRUEsWUFBUSxRQUFRLE9BQWhCO0FBQ0UsV0FBSyxvQkFBVSxNQUFWLENBQWlCLGlCQUF0QjtBQUNFLG1CQUFXLE1BQVg7QUFDQTtBQUNGLFdBQUssb0JBQVUsTUFBVixDQUFpQixhQUF0QjtBQUNFLG1CQUFXLE1BQVg7QUFDQTtBQUNGO0FBQ0U7QUFDQSxtQkFBVyxZQUFNO0FBQ2YsYUFBRyxJQUFJLEtBQUosQ0FBVSw0QkFBNEIsUUFBUSxPQUE5QyxDQUFIO0FBQ0QsU0FGRCxFQUVHLENBRkg7QUFUSjs7QUFjQSxRQUFJLFFBQUosRUFBYztBQUNaLDJCQUNHLElBREgsQ0FDUSxHQURSLEVBRUcsSUFGSCxDQUVRLFFBRlIsRUFHRyxJQUhILENBR1EsUUFIUixFQUlHLE9BSkgsQ0FJVyxRQUFRLE9BSm5CLEVBS0csR0FMSCxDQUtPLFVBQVUsR0FBVixFQUFlLEdBQWYsRUFBb0I7QUFDdkIsY0FBTSxVQUFVLEdBQVYsRUFBZSxHQUFmLENBQU47O0FBRUEsWUFBSSxHQUFKLEVBQVM7QUFDUCxhQUFHLEdBQUg7QUFDRCxTQUZELE1BRU87QUFDTCxhQUFHLElBQUgsRUFBUyxHQUFUO0FBQ0Q7QUFDRixPQWJIO0FBY0Q7QUFDRixHQWpDRDtBQWtDRCxDOztBQWxNRDs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNLFlBQVksT0FBbEI7Ozs7O0FDSEEsT0FBTyxPQUFQLEdBQWUsOHhEQUFmOzs7Ozs7Ozs7a0JDWWUsVUFBVSxTQUFWLEVBQXFCLE9BQXJCLEVBQThCO0FBQzNDLE1BQUksZUFBSjtBQUNBLE1BQUksVUFBSjtBQUNBLE1BQUksY0FBSjs7QUFFQSxXQUFTLGVBQVQsR0FBNEI7QUFDMUIsV0FBTyxDQUFDLENBQUMsaUJBQVQ7QUFDRDs7QUFFRCxXQUFTLGVBQVQsR0FBNEI7QUFDMUI7QUFDQSxRQUFJLENBQUMsY0FBTCxFQUFxQjtBQUNuQixVQUFNLGVBQWUsT0FBTyxZQUFQLElBQXVCLE9BQU8sa0JBQW5EO0FBQ0EsdUJBQWlCLElBQUksWUFBSixFQUFqQjtBQUNEOztBQUVELFdBQU8sY0FBUDtBQUNEOztBQUVELFdBQVMsY0FBVCxDQUF5QixDQUF6QixFQUE0QixFQUE1QixFQUFnQztBQUM5QixRQUFJLENBQUMsVUFBVSxXQUFWLEVBQUQsSUFBNEIsVUFBVSxRQUFWLEVBQWhDLEVBQXNEO0FBQ3BEO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBLFFBQU0sZUFBZSxFQUFFLFdBQUYsQ0FBYyxjQUFkLENBQTZCLENBQTdCLENBQXJCOztBQUVBLE9BQUcsMEJBQWdCLFlBQWhCLENBQUg7QUFDRDs7QUFFRCxPQUFLLElBQUwsR0FBWSxVQUFVLGdCQUFWLEVBQTRCO0FBQ3RDLFlBQVEsS0FBUixDQUFjLHVCQUFkOztBQUVBO0FBQ0EsUUFBTSxTQUFTLGtCQUFrQixVQUFsQixFQUFmOztBQUVBLFFBQUk7QUFDRixtQkFBYSxrQkFBa0IsdUJBQWxCLENBQTBDLGdCQUExQyxDQUFiO0FBQ0QsS0FGRCxDQUVFLE9BQU8sR0FBUCxFQUFZO0FBQ1osWUFBTSx5QkFBZSxNQUFmLENBQ0oscUJBREksRUFFSixJQUFJLFFBQUosRUFGSSxFQUdKLE9BSEksQ0FBTjtBQUtEOztBQUVELFFBQUksQ0FBQyw0QkFBTSxRQUFRLEtBQVIsQ0FBYyxVQUFwQixDQUFMLEVBQXNDO0FBQ3BDLFlBQU0seUJBQWUsTUFBZixDQUFzQiwyQ0FBdEIsRUFBbUUsT0FBbkUsQ0FBTjtBQUNELEtBRkQsTUFFTyxJQUFJLENBQUMsUUFBUSxLQUFSLENBQWMsTUFBZixJQUF5QixRQUFRLEtBQVIsQ0FBYyxNQUFkLEdBQXVCLENBQXBELEVBQXVEO0FBQzVELFlBQU0seUJBQWUsTUFBZixDQUFzQiw0Q0FBdEIsRUFBb0UsT0FBcEUsQ0FBTjtBQUNEOztBQUVELFdBQU8sSUFBUCxDQUFZLEtBQVosR0FBb0IsUUFBUSxLQUFSLENBQWMsTUFBbEM7O0FBRUE7QUFDQTtBQUNBLHNCQUFrQixrQkFBa0IscUJBQWxCLENBQ2hCLFFBQVEsS0FBUixDQUFjLFVBREUsRUFFaEIsUUFGZ0IsRUFHaEIsUUFIZ0IsQ0FBbEI7O0FBTUE7QUFDQSxlQUFXLE9BQVgsQ0FBbUIsZUFBbkI7O0FBRUE7QUFDQSxvQkFBZ0IsT0FBaEIsQ0FBd0Isa0JBQWtCLFdBQTFDOztBQUVBO0FBQ0EsZUFBVyxPQUFYLENBQW1CLE1BQW5CO0FBQ0EsV0FBTyxPQUFQLENBQWUsZUFBZjtBQUNELEdBekNEOztBQTJDQSxPQUFLLE1BQUwsR0FBYyxVQUFVLEVBQVYsRUFBYztBQUMxQixZQUFRLEtBQVIsQ0FBYyx5QkFBZDs7QUFFQSxvQkFBZ0IsY0FBaEIsR0FBaUMsVUFBVSxDQUFWLEVBQWE7QUFDNUMscUJBQWUsQ0FBZixFQUFrQixFQUFsQjtBQUNELEtBRkQ7QUFHRCxHQU5EOztBQVFBLE9BQUssSUFBTCxHQUFZLFlBQVk7QUFDdEIsWUFBUSxLQUFSLENBQWMsdUJBQWQ7O0FBRUEsUUFBSSxlQUFKLEVBQXFCO0FBQ25CLHNCQUFnQixjQUFoQixHQUFpQyxTQUFqQztBQUNEOztBQUVELFFBQUksVUFBSixFQUFnQjtBQUNkLGlCQUFXLFVBQVg7QUFDRDs7QUFFRDtBQUNBLFFBQUksaUJBQUosRUFBdUI7QUFDckIsVUFBSSxrQkFBa0IsS0FBdEIsRUFBNkI7QUFDM0IsMEJBQ0csS0FESCxHQUVHLElBRkgsQ0FFUSxZQUFZO0FBQ2hCLGtCQUFRLEtBQVIsQ0FBYyx3Q0FBZDtBQUNBLDJCQUFpQixJQUFqQjtBQUNELFNBTEgsRUFNRyxLQU5ILENBTVMsVUFBVSxHQUFWLEVBQWU7QUFDcEIsZ0JBQU0seUJBQWUsTUFBZixDQUFzQixHQUF0QixFQUEyQixPQUEzQixDQUFOO0FBQ0QsU0FSSDtBQVNELE9BVkQsTUFVTztBQUNMLHlCQUFpQixJQUFqQjtBQUNEO0FBQ0Y7QUFDRixHQTNCRDs7QUE2QkEsT0FBSyxhQUFMLEdBQXFCLFlBQVk7QUFDL0IsUUFBSSxpQkFBSixFQUF1QjtBQUNyQixhQUFPLGtCQUFrQixVQUF6QjtBQUNELEtBRkQsTUFFTztBQUNMLGFBQU8sQ0FBQyxDQUFSO0FBQ0Q7QUFDRixHQU5EO0FBT0QsQzs7QUFsSUQ7Ozs7QUFDQTs7OztBQUVBOzs7Ozs7QUFFQSxJQUFNLFdBQVcsQ0FBakI7O0FBRUE7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7QUNWQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQU0sVUFBVSxTQUFWLE9BQVUsQ0FBVSxPQUFWLEVBQW1CO0FBQ2pDLFlBQVUsV0FBVyxFQUFyQjs7QUFFQSxNQUFNLGtCQUFrQix3Q0FBeEI7QUFDQSxNQUFNLGVBQWUsZ0VBQXJCO0FBQ0EsTUFBTSxpQkFBaUIsK0JBQXZCO0FBQ0EsTUFBTSxtQkFBbUIsNERBQXpCO0FBQ0EsTUFBTSxrQkFBa0Isd0JBQXhCO0FBQ0EsTUFBTSxLQUFLLHVCQUFRLFFBQVEsWUFBaEIsRUFDVCxPQUFPLE1BQVAsS0FBa0IsV0FBbEIsSUFDQSxPQUFPLFNBRFAsSUFFQSxPQUFPLFNBQVAsQ0FBaUIsU0FIUixFQUlSLEVBSlEsQ0FBWDs7QUFNQSxNQUFNLFdBQVcseUJBQWEsRUFBYixFQUFpQixTQUFqQixFQUFqQjs7QUFFQSxNQUFNLFFBQVEsU0FBUyxFQUFULENBQVksSUFBWixLQUFxQixLQUFuQztBQUNBLE1BQU0saUJBQWlCLFdBQVcsU0FBUyxPQUFULENBQWlCLE9BQTVCLENBQXZCO0FBQ0EsTUFBTSxXQUFXLFNBQVMsT0FBVCxDQUFpQixJQUFqQixLQUEwQixRQUEzQztBQUNBLE1BQU0sYUFBYSxTQUFTLE9BQVQsQ0FBaUIsSUFBakIsS0FBMEIsVUFBN0M7QUFDQSxNQUFNLFVBQVUsU0FBUyxPQUFULENBQWlCLElBQWpCLEtBQTBCLFNBQTFDO0FBQ0EsTUFBTSxZQUFZLFdBQVcsU0FBUyxFQUFULENBQVksT0FBdkIsQ0FBbEI7QUFDQSxNQUFNLFlBQVksU0FBUyxFQUFULENBQVksSUFBWixLQUFxQixTQUF2QztBQUNBLE1BQU0sU0FBUyxTQUFTLE9BQVQsQ0FBaUIsSUFBakIsS0FBMEIsTUFBMUIsSUFBcUMsYUFBYSxhQUFhLEVBQTlFO0FBQ0EsTUFBTSxPQUFPLEtBQUssSUFBTCxDQUFVLFNBQVMsT0FBVCxDQUFpQixJQUEzQixDQUFiO0FBQ0EsTUFBTSxXQUFXLFNBQVMsSUFBVCxDQUFjLFNBQVMsT0FBVCxDQUFpQixJQUEvQixDQUFqQjtBQUNBLE1BQU0sVUFBVSxRQUFRLElBQVIsQ0FBYSxTQUFTLE9BQVQsQ0FBaUIsSUFBOUIsQ0FBaEI7QUFDQSxNQUFNLFlBQVksVUFBVSxJQUFWLENBQWUsU0FBUyxFQUFULENBQVksSUFBM0IsQ0FBbEI7QUFDQSxNQUFNLGNBQWMsWUFBWSxVQUFoQzs7QUFFQSxNQUFNLGFBQWEsWUFBWSxrQkFBa0IsRUFBakQ7QUFDQSxNQUFNLFVBQVUsU0FBUyxhQUFhLEVBQXRDO0FBQ0EsTUFBTSxXQUFXLFNBQVMsWUFBWSxFQUF0Qzs7QUFFQSxNQUFNLFlBQ0osZUFDQSxPQURBLElBRUEsU0FGQSxJQUdBLE9BSEEsSUFJQSxNQUpBLElBS0EsVUFMQSxJQU1BLE9BUEY7O0FBU0EsTUFBTSxPQUFPLElBQWI7O0FBRUEsTUFBSSxTQUFKOztBQUVBLFdBQVMsaUJBQVQsR0FBOEI7QUFDNUIsUUFBSSxPQUFKOztBQUVBLFFBQUksT0FBSixFQUFhO0FBQ1gsVUFBSSxLQUFKLEVBQVc7QUFDVCxrQkFBVSwyRUFBVjtBQUNELE9BRkQsTUFFTztBQUNMLGtCQUFVLG1DQUFtQyxlQUFuQyxHQUFxRCxvQkFBckQsR0FDQSxrQ0FEVjtBQUVEO0FBQ0YsS0FQRCxNQU9PLElBQUksUUFBSixFQUFjO0FBQ25CLFVBQUksS0FBSixFQUFXO0FBQ1Qsa0JBQVUsMEVBQVY7QUFDRCxPQUZELE1BRU87QUFDTCxrQkFBVSxtQ0FBbUMsY0FBbkMsR0FBb0Qsb0JBQXBELEdBQ0EsaUNBRFY7QUFFRDtBQUNGLEtBUE0sTUFPQSxJQUFJLFVBQUosRUFBZ0I7QUFDckIsZ0JBQVUsbUNBQW1DLGdCQUFuQyxHQUFzRCxvQkFBdEQsR0FDQSxtQ0FEVjtBQUVELEtBSE0sTUFHQSxJQUFJLElBQUosRUFBVTtBQUNmLGdCQUFVLHdEQUNBLFlBREEsR0FDZSxZQURmLEdBQzhCLDZCQUR4QztBQUVELEtBSE0sTUFHQSxJQUFJLFFBQUosRUFBYztBQUNuQixnQkFBVSxxRkFDQSxZQURBLEdBQ2UsY0FEZixHQUNnQywrQkFEaEMsR0FFQSxZQUZBLEdBRWUsZUFGZixHQUVpQywyQ0FGM0M7QUFHRDs7QUFFRCxXQUFPLE9BQVA7QUFDRDs7QUFFRCxXQUFTLG1CQUFULEdBQWdDO0FBQzlCLFFBQUksT0FBSjs7QUFFQSxRQUFJLFFBQUosRUFBYztBQUNaLGdCQUFVLDZFQUNBLHVFQURWO0FBRUQsS0FIRCxNQUdPO0FBQ0wsZ0JBQVUsbUJBQVY7QUFDRDs7QUFFRCxRQUFJLENBQUMsT0FBTCxFQUFjO0FBQ1osVUFBSSxLQUFLLGFBQUwsTUFBd0IsS0FBSyxTQUFMLEVBQXhCLElBQTRDLFFBQWhELEVBQTBEO0FBQ3hELGtCQUFVLHdEQUFWO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsa0JBQVUsMENBQ0EsV0FEQSxHQUNjLGNBRGQsR0FDK0IsZ0NBRC9CLEdBRUEsV0FGQSxHQUVjLGVBRmQsR0FFZ0MsaUNBRmhDLEdBR0EsV0FIQSxHQUdjLFlBSGQsR0FHNkIsd0NBSHZDO0FBSUQ7QUFDRjs7QUFFRCxXQUFPLE9BQVA7QUFDRDs7QUFFRCxXQUFTLGtCQUFULEdBQStCO0FBQzdCLFFBQUksVUFBVSxtQkFBZDs7QUFFQSxRQUFJLENBQUMsT0FBTCxFQUFjO0FBQ1osZ0JBQVUsY0FBYyxlQUFkLEdBQWdDLDBEQUExQztBQUNEOztBQUVELFdBQU8sT0FBUDtBQUNEOztBQUVELFdBQVMsV0FBVCxDQUFzQixLQUF0QixFQUE2QixJQUE3QixFQUFtQztBQUNqQyxRQUFJLFdBQUo7O0FBRUEsUUFBSSxTQUFTLE1BQU0sV0FBbkIsRUFBZ0M7QUFDOUIsb0JBQWMsTUFBTSxXQUFOLENBQWtCLFdBQVcsSUFBN0IsQ0FBZDtBQUNEOztBQUVELFdBQU8sV0FBUDtBQUNEOztBQUVEO0FBQ0EsT0FBSyxTQUFMLEdBQWlCLFlBQVk7QUFDM0IsUUFBTSxlQUFlLE9BQU8sU0FBUCxLQUFxQixXQUExQztBQUNBLFFBQUksWUFBWSxLQUFoQjs7QUFFQSxRQUFJLGdCQUFnQixVQUFVLFlBQTFCLElBQTBDLFVBQVUsWUFBVixDQUF1QixZQUFyRSxFQUFtRjtBQUNqRixrQkFBWSxJQUFaO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsVUFBSSxtQkFBbUIsd0JBQXVCLFVBQVUsYUFBakMsQ0FBdkI7O0FBRUEsa0JBQVkscUJBQXFCLFVBQWpDO0FBQ0Q7O0FBRUQsV0FBTyxTQUFQO0FBQ0QsR0FiRDs7QUFlQSxPQUFLLDBCQUFMLEdBQWtDLFlBQVk7QUFDNUMsUUFBSSxHQUFKOztBQUVBLFFBQUksQ0FBQyxTQUFELElBQWMsQ0FBQyxLQUFLLFNBQUwsRUFBbkIsRUFBcUM7QUFDbkMsVUFBTSxZQUFZLEVBQWxCOztBQUVBLFVBQUksUUFBSixFQUFjO0FBQ1osa0JBQVUsSUFBVixDQUFlLHlCQUFlLFdBQTlCO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsa0JBQVUsSUFBVixDQUFlLHlCQUFlLGVBQTlCO0FBQ0Q7O0FBRUQsWUFBTSx5QkFBZSxNQUFmLENBQXNCO0FBQzFCLGlCQUFTO0FBRGlCLE9BQXRCLEVBRUgscUJBRkcsRUFFb0IsT0FGcEIsRUFFNkI7QUFDakMsbUJBQVc7QUFEc0IsT0FGN0IsQ0FBTjtBQUtEOztBQUVELFdBQU8sR0FBUDtBQUNELEdBcEJEOztBQXNCQSxPQUFLLHlCQUFMLEdBQWlDLFVBQVUsS0FBVixFQUFpQjtBQUNoRCxZQUFRLEtBQVIsQ0FBYyxzQ0FBZDs7QUFFQSxRQUFJLEdBQUo7QUFDQSxRQUFJLE9BQUo7O0FBRUEsUUFBSSxDQUFDLEtBQUwsRUFBWTtBQUNWLGdCQUFVLGlDQUFWO0FBQ0QsS0FGRCxNQUVPLElBQUksQ0FBQyxLQUFLLFlBQUwsQ0FBa0IsS0FBbEIsQ0FBTCxFQUErQjtBQUNwQyxnQkFBVSxxREFBVjtBQUNELEtBRk0sTUFFQSxJQUFJLENBQUMsTUFBTSxZQUFYLEVBQXlCO0FBQzlCO0FBQ0EsZ0JBQVUsb0RBQVY7QUFDRDs7QUFFRCxRQUFJLE9BQUosRUFBYTtBQUNYLFlBQU0seUJBQWUsTUFBZixDQUFzQixPQUF0QixFQUErQixvQkFBL0IsRUFBcUQsT0FBckQsQ0FBTjtBQUNEOztBQUVELFdBQU8sR0FBUDtBQUNELEdBcEJEOztBQXNCQSxPQUFLLGdCQUFMLEdBQXdCLFlBQVk7QUFDbEMsUUFBSSxHQUFKOztBQUVBLFFBQUksT0FBTyxNQUFQLEtBQWtCLFdBQWxCLElBQWlDLE9BQU8sT0FBTyxJQUFkLEtBQXVCLFdBQTVELEVBQXlFO0FBQ3ZFLFlBQU0seUJBQWUsTUFBZixDQUFzQix1QkFBdEIsRUFBK0MsT0FBL0MsQ0FBTjtBQUNELEtBRkQsTUFFTyxJQUFJLE9BQU8sT0FBTyxXQUFkLEtBQThCLFdBQWxDLEVBQStDO0FBQ3BELFlBQU0seUJBQWUsTUFBZixDQUFzQixnQ0FBdEIsRUFBd0QsT0FBeEQsQ0FBTjtBQUNELEtBRk0sTUFFQSxJQUFJLE9BQU8sT0FBTyxVQUFkLEtBQTZCLFdBQWpDLEVBQThDO0FBQ25ELFlBQU0seUJBQWUsTUFBZixDQUFzQiwrQkFBdEIsRUFBdUQsT0FBdkQsQ0FBTjtBQUNEOztBQUVELFdBQU8sR0FBUDtBQUNELEdBWkQ7O0FBY0EsT0FBSyxZQUFMLEdBQW9CLFVBQVUsS0FBVixFQUFpQjtBQUNuQyxRQUFJLENBQUMsU0FBTCxFQUFnQjtBQUNkO0FBQ0EsVUFBSSxZQUFZLEtBQVosRUFBbUIsS0FBbkIsS0FBNkIsQ0FBQyxXQUFsQyxFQUErQztBQUM3QyxvQkFBWSxLQUFaO0FBQ0QsT0FGRCxNQUVPLElBQUksWUFBWSxLQUFaLEVBQW1CLE1BQW5CLENBQUosRUFBZ0M7QUFDckMsb0JBQVksTUFBWjtBQUNEO0FBQ0Y7O0FBRUQsV0FBTyxTQUFQO0FBQ0QsR0FYRDs7QUFhQSxPQUFLLGdCQUFMLEdBQXdCLFlBQVk7QUFDbEMsUUFBTSxVQUFVLHlCQUFoQjtBQUNBLFFBQUksV0FBSjs7QUFFQSxRQUFJLEtBQUssYUFBTCxFQUFKLEVBQTBCO0FBQ3hCLG9CQUFjLDJEQUFkO0FBQ0QsS0FGRCxNQUVPLElBQUksS0FBSyxTQUFMLEVBQUosRUFBc0I7QUFDM0Isb0JBQWMsNkNBQWQ7QUFDRCxLQUZNLE1BRUE7QUFDTCxvQkFBYywyREFBZDtBQUNEOztBQUVELFdBQU8seUJBQWUsTUFBZixDQUFzQixPQUF0QixFQUErQixXQUEvQixFQUE0QyxPQUE1QyxDQUFQO0FBQ0QsR0FiRDs7QUFlQSxPQUFLLGFBQUwsR0FBcUIsWUFBWTtBQUMvQixXQUFPLFdBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssU0FBTCxHQUFpQixZQUFZO0FBQzNCLFdBQU8sT0FBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxNQUFMLEdBQWMsWUFBWTtBQUN4QixXQUFPLE1BQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssU0FBTCxHQUFpQixZQUFZO0FBQzNCLFdBQU8sU0FBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxRQUFMLEdBQWdCLFlBQVk7QUFDMUIsV0FBTyxTQUFTLE1BQVQsQ0FBZ0IsSUFBaEIsS0FBeUIsUUFBaEM7QUFDRCxHQUZEOztBQUlBLE9BQUssVUFBTCxHQUFrQixZQUFZO0FBQzVCLFdBQU8sVUFBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxhQUFMLEdBQXFCLFlBQVk7QUFDL0IsV0FBTztBQUNMLGVBQVMsU0FBUyxPQURiO0FBRUwsY0FBUSxTQUFTLE1BRlo7QUFHTCxVQUFJLFNBQVMsRUFIUjtBQUlMLGNBQVEsU0FBUyxNQUpaO0FBS0wsaUJBQVc7QUFMTixLQUFQO0FBT0QsR0FSRDtBQVNELENBbFFEOztrQkFvUWUsTzs7QUFFZjs7QUFDQSxPQUFPLE9BQVAsR0FBaUIsT0FBakI7Ozs7Ozs7OztrQkN4UWUsWUFBNkI7QUFBQSxNQUFuQixZQUFtQix1RUFBSixFQUFJOztBQUMxQyxNQUFNLFVBQVUsc0JBQVksWUFBWixDQUFoQjtBQUNBLE1BQU0sU0FBUyxhQUFhLE1BQWIsSUFBdUIsT0FBdEM7QUFDQSxNQUFNLGNBQWUsYUFBYSxTQUFiLElBQTBCLGFBQWEsU0FBYixDQUF1QixXQUFsRCxJQUFrRSx3QkFBdEY7QUFDQSxNQUFNLFFBQVEsRUFBZDs7QUFFQSxXQUFTLElBQVQsQ0FBZSxLQUFmLEVBQXNCLFVBQXRCLEVBQWtDO0FBQ2hDLFFBQU0sT0FBTyxlQUFLLE1BQUwsQ0FBWSxLQUFaLGlCQUF3QixVQUF4QixDQUFiOztBQUVBLFFBQUksTUFBTSxNQUFOLEdBQWUsYUFBYSxZQUFoQyxFQUE4QztBQUM1QyxZQUFNLEdBQU47QUFDRDs7QUFFRCxVQUFNLElBQU4sQ0FBVyxNQUFNLEtBQU4sR0FBYyxJQUFkLEdBQXFCLElBQWhDOztBQUVBLFdBQU8sSUFBUDtBQUNEOztBQUVELFdBQVMsY0FBVCxDQUF5QixhQUF6QixFQUF3QztBQUN0QyxXQUFPLE1BQU0sV0FBTixHQUFvQixJQUFwQixHQUEyQixJQUFJLElBQUosR0FBVyxrQkFBWCxFQUEzQixHQUE2RCxNQUE3RCxHQUFzRSxhQUE3RTtBQUNEOztBQUVEO0FBQ0E7QUFDQSxPQUFLLEtBQUwsR0FBYSxZQUFZO0FBQ3ZCO0FBQ0EsUUFBTSxPQUFPLEdBQUcsS0FBSCxDQUFTLElBQVQsQ0FBYyxTQUFkLEVBQXlCLENBQXpCLENBQWI7QUFDQSxTQUFLLENBQUwsSUFBVSxlQUFlLEtBQUssQ0FBTCxDQUFmLENBQVY7O0FBRUEsUUFBTSxTQUFTLEtBQUssT0FBTCxFQUFjLElBQWQsQ0FBZjs7QUFFQSxRQUFJLGFBQWEsT0FBakIsRUFBMEI7QUFDeEIsVUFBSSxRQUFRLFNBQVIsRUFBSixFQUF5QjtBQUN2QixlQUFPLEtBQVAsQ0FBYSxNQUFiO0FBQ0QsT0FGRCxNQUVPLElBQUksT0FBTyxjQUFYLEVBQTJCO0FBQ2hDLGVBQU8sY0FBUCxDQUFzQixNQUF0QjtBQUNBLGVBQU8sS0FBUCxDQUFhLE9BQWI7QUFDQSxlQUFPLFFBQVA7QUFDRCxPQUpNLE1BSUEsSUFBSSxPQUFPLEtBQVgsRUFBa0I7QUFDdkIsZUFBTyxLQUFQLENBQWEsTUFBYjtBQUNELE9BRk0sTUFFQTtBQUNMO0FBQ0EsZ0JBQVEsR0FBUixDQUFZLE1BQVo7QUFDRDtBQUNGO0FBQ0YsR0FyQkQ7O0FBdUJBLE9BQUssS0FBTCxHQUFhLFlBQVk7QUFDdkIsUUFBTSxPQUFPLEdBQUcsS0FBSCxDQUFTLElBQVQsQ0FBYyxTQUFkLEVBQXlCLENBQXpCLENBQWI7QUFDQSxTQUFLLENBQUwsSUFBVSxlQUFlLEtBQUssQ0FBTCxDQUFmLENBQVY7O0FBRUEsV0FBTyxLQUFQLENBQWEsS0FBSyxPQUFMLEVBQWMsSUFBZCxDQUFiO0FBQ0QsR0FMRDs7QUFPQSxPQUFLLElBQUwsR0FBWSxZQUFZO0FBQ3RCLFFBQU0sT0FBTyxHQUFHLEtBQUgsQ0FBUyxJQUFULENBQWMsU0FBZCxFQUF5QixDQUF6QixDQUFiO0FBQ0EsU0FBSyxDQUFMLElBQVUsZUFBZSxLQUFLLENBQUwsQ0FBZixDQUFWOztBQUVBLFdBQU8sSUFBUCxDQUFZLEtBQUssTUFBTCxFQUFhLElBQWIsQ0FBWjtBQUNELEdBTEQ7O0FBT0EsT0FBSyxRQUFMLEdBQWdCLFlBQVk7QUFDMUIsV0FBTyxLQUFQO0FBQ0QsR0FGRDtBQUdELEM7O0FBbkVEOzs7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7a0JDTWUsVUFBVSxPQUFWLEVBQW1CLElBQW5CLEVBQXlCO0FBQ3RDLE9BQUssSUFBTCxHQUFZLFVBQVUsS0FBVixFQUFpQjtBQUMzQixRQUFNLE9BQU8sTUFBTSxTQUFOLENBQWdCLEtBQWhCLENBQXNCLElBQXRCLENBQTJCLFNBQTNCLEVBQXNDLENBQXRDLENBQWI7O0FBRUEsUUFBSSxDQUFDLEtBQUwsRUFBWTtBQUNWLFlBQU0seUJBQWUsTUFBZixDQUFzQixtQ0FBdEIsRUFBMkQsT0FBM0QsQ0FBTjtBQUNEOztBQUVEO0FBQ0EsUUFBSSxVQUFVLGlCQUFPLEtBQXJCLEVBQTRCO0FBQzFCLFVBQUksTUFBTSxLQUFLLENBQUwsQ0FBVjs7QUFFQSxZQUFNLHlCQUFlLE1BQWYsQ0FBc0IsR0FBdEIsRUFBMkIsT0FBM0IsQ0FBTjs7QUFFQSxXQUFLLENBQUwsSUFBVSxHQUFWO0FBQ0Q7O0FBRUQsUUFBSSxRQUFRLEtBQVosRUFBbUI7QUFDakIsVUFBSSxVQUFVLGdCQUFWLElBQThCLFVBQVUsYUFBNUMsRUFBMkQ7QUFDekQsWUFBSSxhQUFKOztBQUVBLFlBQUksS0FBSyxDQUFMLENBQUosRUFBYTtBQUNYLDBCQUFnQixLQUFLLEtBQUwsQ0FBVyxDQUFYLENBQWhCO0FBQ0Q7O0FBRUQsWUFBSSxhQUFKLEVBQW1CO0FBQ2pCLGtCQUFRLEtBQVIsQ0FBYyxjQUFkLEVBQThCLElBQTlCLEVBQW9DLEtBQXBDLEVBQTJDLGFBQTNDO0FBQ0QsU0FGRCxNQUVPO0FBQ0wsa0JBQVEsS0FBUixDQUFjLGNBQWQsRUFBOEIsSUFBOUIsRUFBb0MsS0FBcEM7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsUUFBTSxTQUFTLGlCQUFPLElBQVAsQ0FBWSxLQUFaLG1CQUEwQixJQUExQixDQUFmOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxXQUFPLE1BQVA7QUFDRCxHQXZDRDs7QUF5Q0EsT0FBSyxFQUFMLEdBQVUsVUFBVSxTQUFWLEVBQXFCLEVBQXJCLEVBQXlCO0FBQ2pDLFdBQU8saUJBQU8sRUFBUCxDQUFVLFNBQVYsRUFBcUIsRUFBckIsQ0FBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxJQUFMLEdBQVksVUFBVSxTQUFWLEVBQXFCLEVBQXJCLEVBQXlCO0FBQ25DLFdBQU8saUJBQU8sSUFBUCxDQUFZLFNBQVosRUFBdUIsRUFBdkIsQ0FBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxTQUFMLEdBQWlCLFVBQVUsU0FBVixFQUFxQjtBQUNwQyxXQUFPLGlCQUFPLFNBQVAsQ0FBaUIsU0FBakIsQ0FBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxjQUFMLEdBQXNCLFVBQVUsU0FBVixFQUFxQixFQUFyQixFQUF5QjtBQUM3QyxXQUFPLGlCQUFPLGNBQVAsQ0FBc0IsU0FBdEIsRUFBaUMsRUFBakMsQ0FBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxrQkFBTCxHQUEwQixZQUFZO0FBQ3BDLHFCQUFPLGtCQUFQO0FBQ0QsR0FGRDtBQUdELEM7O0FBcEVEOzs7O0FBRUE7Ozs7QUFDQTs7Ozs7Ozs7Ozs7OztBQ0hBOzs7O0FBQ0E7Ozs7OztBQUVBOztrQkFFZTtBQUNiLFlBQVUsa0JBQVUsS0FBVixFQUFpQixLQUFqQixFQUF3QjtBQUNoQyxXQUFPLHdCQUFTLEtBQVQsRUFBZ0I7QUFDckIsYUFBTztBQURjLEtBQWhCLENBQVA7QUFHRCxHQUxZOztBQU9iLFVBQVEsZ0JBQVUsQ0FBVixFQUFhO0FBQ25CLFdBQU8sZ0NBQWlCLENBQWpCLENBQVA7QUFDRDtBQVRZLEM7Ozs7Ozs7O0FDTGY7QUFDQTs7a0JBRWU7QUFDYjtBQUNBO0FBQ0EsV0FIYTs7QUFLYjtBQUNBO0FBQ0EsU0FQYTs7QUFTYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBcEJhOztBQXNCYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BNUJhOztBQThCYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBbENhOztBQW9DYjtBQUNBO0FBQ0EsU0F0Q2E7O0FBd0NiO0FBQ0E7QUFDQSxPQTFDYTs7QUE0Q1o7QUFDQTtBQUNBO0FBQ0QsWUEvQ2E7O0FBaURiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQXpEYTs7QUEyRGI7QUFDQTtBQUNBO0FBQ0EsU0E5RGE7O0FBZ0ViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQXJFYTs7QUF1RWI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkEzRWE7O0FBNkViO0FBQ0E7QUFDQSxTQS9FYTs7QUFpRmI7QUFDQSxRQWxGYTs7QUFvRmI7QUFDQTtBQUNBLE9BdEZhOztBQXdGYjtBQUNBO0FBQ0EsWUExRmE7O0FBNEZiO0FBQ0EsZ0JBN0ZhOztBQStGYjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBdkdhLEM7Ozs7Ozs7Ozs7O2tCQzJDQSxVQUFVLFFBQVYsRUFBb0IsT0FBcEIsRUFBNkI7QUFDMUMsTUFBSSxhQUFhLElBQWpCLEVBQXVCO0FBQ3JCLFdBQU8sTUFBUDtBQUNELEdBRkQsTUFFTyxJQUFJLE9BQU8sUUFBUCxLQUFvQixXQUF4QixFQUFxQztBQUMxQyxXQUFPLFdBQVA7QUFDRCxHQUZNLE1BRUEsSUFBSSxPQUFPLFFBQVAsS0FBb0IsUUFBeEIsRUFBa0M7QUFDdkMsV0FBTyxRQUFQO0FBQ0QsR0FGTSxNQUVBLElBQUksTUFBTSxPQUFOLENBQWMsUUFBZCxDQUFKLEVBQTZCO0FBQ2xDLFdBQU8sY0FBYyxRQUFkLENBQVA7QUFDRCxHQUZNLE1BRUEsSUFBSSxRQUFPLFFBQVAseUNBQU8sUUFBUCxPQUFvQixRQUF4QixFQUFrQztBQUN2QyxXQUFPLGVBQWUsUUFBZixFQUF5QixPQUF6QixDQUFQO0FBQ0QsR0FGTSxNQUVBO0FBQ0wsV0FBTyxTQUFTLFFBQVQsRUFBUDtBQUNEO0FBQ0YsQzs7QUE1REQsSUFBTSxPQUFPLElBQWI7QUFDQSxJQUFNLFlBQVksVUFBVSxJQUE1Qjs7QUFFQSxTQUFTLGFBQVQsQ0FBd0IsS0FBeEIsRUFBK0I7QUFDN0IsTUFBSSxNQUFNLE1BQU4sR0FBZSxDQUFuQixFQUFzQjtBQUNwQixRQUFNLFFBQVEsRUFBZDs7QUFFQSxVQUFNLE9BQU4sQ0FBYyxVQUFVLE9BQVYsRUFBbUI7QUFDL0IsVUFBSSxXQUFXLFFBQVEsUUFBdkIsRUFBaUM7QUFDL0IsY0FBTSxJQUFOLENBQVcsUUFBUSxRQUFSLEVBQVg7QUFDRDtBQUNGLEtBSkQ7O0FBTUEsV0FBTyxPQUFPLE1BQU0sSUFBTixDQUFXLFNBQVgsQ0FBZDtBQUNEO0FBQ0Y7O0FBRUQsU0FBUyxjQUFULENBQXlCLE1BQXpCLEVBQWlDLE9BQWpDLEVBQTBDO0FBQ3hDLE1BQU0sZ0JBQWdCLE9BQU8sbUJBQVAsQ0FBMkIsTUFBM0IsQ0FBdEI7QUFDQSxNQUFNLFdBQVksV0FBVyxRQUFRLFFBQXBCLElBQWlDLElBQWxEO0FBQ0EsTUFBTSxRQUFRLEVBQWQ7QUFDQSxNQUFJLE1BQUo7O0FBRUEsTUFBSSxjQUFjLE1BQWQsR0FBdUIsQ0FBM0IsRUFBOEI7QUFDNUIsUUFBSSxVQUFVLEtBQWQ7O0FBRUEsa0JBQWMsT0FBZCxDQUFzQixVQUFVLElBQVYsRUFBZ0I7QUFDcEMsVUFBSSxRQUFKLEVBQWM7QUFDWixrQkFBVSxTQUFTLE9BQVQsQ0FBaUIsSUFBakIsS0FBMEIsQ0FBcEM7QUFDRDs7QUFFRCxVQUFJLENBQUMsT0FBRCxJQUFZLE9BQU8sSUFBUCxDQUFaLElBQTRCLE9BQU8sSUFBUCxFQUFhLFFBQTdDLEVBQXVEO0FBQ3JELGNBQU0sSUFBTixDQUFXLE9BQU8sSUFBUCxFQUFhLFFBQWIsRUFBWDtBQUNEO0FBQ0YsS0FSRDtBQVNEOztBQUVELE1BQUksTUFBTSxNQUFOLEtBQWlCLENBQXJCLEVBQXdCO0FBQ3RCLGFBQVMsTUFBTSxJQUFOLEVBQVQ7QUFDRCxHQUZELE1BRU8sSUFBSSxNQUFNLE1BQU4sR0FBZSxDQUFuQixFQUFzQjtBQUMzQixhQUFTLE9BQU8sTUFBTSxJQUFOLENBQVcsU0FBWCxDQUFoQjtBQUNEOztBQUVELFNBQU8sTUFBUDtBQUNEOzs7Ozs7Ozs7a0JDbkNjLFlBQXVDO0FBQUEsTUFBN0IsTUFBNkIsdUVBQXBCLEVBQW9CO0FBQUEsTUFBaEIsU0FBZ0IsdUVBQUosRUFBSTs7QUFDcEQ7QUFDQSxNQUFJLENBQUMsT0FBTyxNQUFaLEVBQW9CO0FBQ2xCLFdBQU8sTUFBUCxHQUFnQixFQUFoQjtBQUNEOztBQUVELDhCQUFhLFFBQWI7O0FBRUE7QUFDQTtBQUNBLE1BQUksVUFBVSxZQUFWLElBQTBCLFVBQVUsWUFBVixDQUF1QixZQUFyRCxFQUFtRTtBQUNqRTtBQUNELEdBRkQsTUFFTztBQUNMLGNBQVUsYUFBVixHQUNRLFVBQVUsWUFBVixJQUNBLFVBQVUsa0JBRFYsSUFFQSxVQUFVLGVBRlYsSUFHQSxVQUFVLGNBSmxCO0FBS0Q7O0FBRUQsTUFBSSxDQUFDLE9BQU8sWUFBUixJQUF3QixPQUFPLGtCQUFuQyxFQUF1RDtBQUNyRCxXQUFPLFlBQVAsR0FBc0IsT0FBTyxrQkFBN0I7QUFDRDs7QUFFRCxNQUFJLENBQUMsT0FBTyxHQUFaLEVBQWlCO0FBQ2YsV0FBTyxHQUFQLEdBQWEsT0FBTyxTQUFQLElBQW9CLE9BQU8sTUFBM0IsSUFBcUMsT0FBTyxLQUF6RDtBQUNEOztBQUVELE1BQU0sVUFBVSxDQUNkLE9BRGMsRUFDTCxnQkFESyxFQUNhLFVBRGIsRUFDeUIsT0FEekIsRUFFZCxXQUZjLEVBRUQsTUFGQyxFQUVPLEtBRlAsRUFFYyxPQUZkLEVBRXVCLE1BRnZCLENBQWhCOztBQUtBLE1BQUksVUFBVSxFQUFkOztBQUVBLE1BQUksT0FBTyxPQUFYLEVBQW9CO0FBQ2xCLGNBQVUsT0FBTyxPQUFqQjtBQUNELEdBRkQsTUFFTztBQUNMLFdBQU8sT0FBUCxHQUFpQixZQUFZLENBQUUsQ0FBL0I7QUFDRDs7QUFFRCxNQUFJLE1BQUo7QUFDQSxNQUFJLFNBQVMsUUFBUSxNQUFyQjs7QUFFQSxTQUFPLFFBQVAsRUFBaUI7QUFDZixhQUFTLFFBQVEsTUFBUixDQUFUOztBQUVBLFFBQUksQ0FBQyxRQUFRLE1BQVIsQ0FBTCxFQUFzQjtBQUNwQixjQUFRLE1BQVIsSUFBa0IsWUFBWSxDQUFFLENBQWhDO0FBQ0Q7QUFDRjtBQUNGLEM7O0FBNUREOztBQUdBOztBQUdBOzs7Ozs7Ozs7Ozs7OzhRQ05BOzs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBTSxxQkFBcUIsaUJBQTNCOztBQUVBLElBQU0saUJBQWlCLDJCQUFZLEtBQVosRUFBbUIsa0JBQW5CLEVBQXVDO0FBQzVELGlCQUFlLFNBRDZDO0FBRTVELGNBQVksU0FGZ0Q7QUFHNUQsZUFBYSxTQUgrQztBQUk1RCxTQUFPLFNBSnFEO0FBSzVELFdBQVM7QUFMbUQsQ0FBdkMsQ0FBdkI7O0FBUUE7QUFDQSxJQUFNLFNBQVMsU0FBVCxNQUFTLENBQVUsUUFBVixFQUFvQjtBQUNqQyxTQUFPLHNCQUFlLFFBQWYsRUFBeUIsRUFBQyxVQUFVLENBQUMsT0FBRCxDQUFYLEVBQXpCLENBQVA7QUFDRCxDQUZEOztBQUlBO0FBQ0EsZUFBZSxpQkFBZixHQUFtQyxtQkFBbkM7QUFDQSxlQUFlLGlCQUFmLEdBQW1DLGlCQUFuQztBQUNBLGVBQWUsYUFBZixHQUErQixlQUEvQjtBQUNBLGVBQWUsYUFBZixHQUErQixjQUEvQjtBQUNBLGVBQWUsZUFBZixHQUFpQyx1QkFBakM7QUFDQSxlQUFlLDBCQUFmLEdBQTRDLHlCQUE1QztBQUNBLGVBQWUsZUFBZixHQUFpQyxpQkFBakM7QUFDQSxlQUFlLGNBQWYsR0FBZ0MsZ0JBQWhDO0FBQ0EsZUFBZSxXQUFmLEdBQTZCLGFBQTdCO0FBQ0EsZUFBZSxlQUFmLEdBQWlDLHNCQUFqQzs7QUFFQTtBQUNBLGVBQWUsTUFBZixHQUF3QixVQUFVLEdBQVYsRUFBZSxXQUFmLEVBQTRCLE9BQTVCLEVBQXFDLFVBQXJDLEVBQWlEO0FBQ3ZFLE1BQUksT0FBTyxJQUFJLElBQUosS0FBYSxrQkFBeEIsRUFBNEM7QUFDMUMsV0FBTyxHQUFQO0FBQ0Q7O0FBRUQsTUFBSSxDQUFDLE9BQUQsSUFBWSxXQUFoQixFQUE2QjtBQUMzQixjQUFVLFdBQVY7QUFDQSxrQkFBYyxTQUFkO0FBQ0Q7O0FBRUQsWUFBVSxXQUFXLEVBQXJCO0FBQ0EsZUFBYSxjQUFjLEVBQTNCOztBQUVBO0FBQ0EsTUFBTSxRQUFTLFdBQVcsUUFBUSxLQUFwQixJQUE4QixRQUFRLEdBQXBEO0FBQ0EsTUFBTSxlQUFlLFdBQVcsUUFBUSxjQUFuQixJQUFxQyxRQUFRLGNBQVIsRUFBMUQ7O0FBRUEsUUFBTSwwQkFBTjs7QUFFQSxNQUFNLFlBQVksV0FBVyxTQUFYLElBQXdCLEVBQTFDOztBQUVBO0FBQ0E7QUFDQSxNQUFNLFVBQVUsUUFBUSxXQUFSLENBQWhCO0FBQ0EsTUFBTSxVQUFVLElBQUksT0FBSixDQUFZLE9BQVosQ0FBaEI7O0FBRUEsTUFBSSxPQUFKO0FBQ0EsTUFBSSxPQUFKO0FBQ0EsTUFBSSxLQUFKOztBQUVFOztBQUVGLE1BQUksUUFBTyxHQUFQLHlDQUFPLEdBQVAsT0FBZSxRQUFuQixFQUE2QjtBQUMzQixRQUFJLElBQUksSUFBSixLQUFhLEVBQWpCLEVBQXFCO0FBQ25CO0FBQ0EsZ0JBQVUsZUFBZSxpQkFBekI7QUFDRCxLQUhELE1BR08sSUFBSSxJQUFJLElBQUosS0FBYSxDQUFiLElBQWtCLElBQUksaUJBQUosS0FBMEIsQ0FBaEQsRUFBbUQ7QUFDeEQsZ0JBQVUsZUFBZSxpQkFBekI7QUFDRCxLQUZNLE1BRUEsSUFBSSxJQUFJLFdBQUosSUFBbUIsSUFBSSxXQUFKLENBQWdCLElBQWhCLEtBQXlCLGVBQWUsYUFBL0QsRUFBOEU7QUFDbkYsZ0JBQVUsZUFBZSxhQUF6QjtBQUNELEtBRk0sTUFFQSxJQUFJLElBQUksV0FBSixJQUFtQixJQUFJLFdBQUosQ0FBZ0IsSUFBaEIsS0FBeUIsZUFBZSxlQUEvRCxFQUFnRjtBQUNyRixnQkFBVSxlQUFlLGVBQXpCO0FBQ0QsS0FGTSxNQUVBLElBQUksSUFBSSxPQUFKLEtBQWdCLGVBQWUsZUFBbkMsRUFBb0Q7QUFDekQsZ0JBQVUsSUFBSSxPQUFkO0FBQ0QsS0FGTSxNQUVBLElBQUksSUFBSSxJQUFSLEVBQWM7QUFDbkIsZ0JBQVUsSUFBSSxJQUFkO0FBQ0QsS0FGTSxNQUVBLElBQUksSUFBSSxJQUFKLEtBQWEsT0FBYixJQUF3QixJQUFJLE1BQUosQ0FBVyxjQUFYLEtBQThCLENBQTFELEVBQTZEO0FBQ2xFLGdCQUFVLGVBQWUsYUFBekI7QUFDRDtBQUNGLEdBakJELE1BaUJPLElBQUksUUFBUSxlQUFlLGFBQTNCLEVBQTBDO0FBQy9DLGNBQVUsZUFBZSxhQUF6QjtBQUNELEdBRk0sTUFFQTtBQUNMLGNBQVUsR0FBVjtBQUNEOztBQUVELE1BQUksT0FBTyxJQUFJLEtBQWYsRUFBc0I7QUFDcEIsWUFBUSxJQUFJLEtBQVo7QUFDRDs7QUFFRCxVQUFRLE9BQVI7QUFDRSxTQUFLLGVBQWUsZUFBcEI7QUFDRSxnQkFBVSw0QkFBVjs7QUFFQSxVQUFJLElBQUksVUFBUixFQUFvQjtBQUNsQixZQUFJLElBQUksVUFBSixLQUFtQixPQUF2QixFQUFnQztBQUM5Qix3QkFBYyxrREFBZDtBQUNELFNBRkQsTUFFTztBQUNMLHdCQUFjLHVCQUF1QixJQUFJLFVBQXpDO0FBQ0Q7QUFDRixPQU5ELE1BTU87QUFDTCxzQkFBYyxlQUFlLE9BQU8sR0FBUCxDQUE3QjtBQUNEO0FBQ0Q7QUFDRixTQUFLLHdCQUFMO0FBQ0UsZ0JBQVUsMENBQVY7QUFDQSxvQkFBYyxxRUFBZDs7QUFFQSxVQUFJLElBQUksT0FBUixFQUFpQjtBQUNmLFlBQUksT0FBSixJQUFlLGVBQWUsSUFBSSxPQUFsQztBQUNEOztBQUVEO0FBQ0YsU0FBSyxlQUFMO0FBQ0EsU0FBSyxrQkFBTDtBQUNFLFVBQUksWUFBSixFQUFrQjtBQUNoQixrQkFBVSxnQ0FBVjtBQUNBLHNCQUFjLDZFQUFkO0FBQ0QsT0FIRCxNQUdPO0FBQ0wsa0JBQVUsaUJBQVY7QUFDQSxzQkFBYyw2REFBZDtBQUNEOztBQUVELGdCQUFVLElBQVYsQ0FBZSxlQUFlLGNBQTlCO0FBQ0E7O0FBRUYsU0FBSywwQkFBTDtBQUNFLGdCQUFVLDZDQUFWO0FBQ0Esb0JBQWMsZ0VBQ0EscURBRGQ7QUFFQSxnQkFBVSxJQUFWLENBQWUsZUFBZSxjQUE5QjtBQUNBOztBQUVGLFNBQUssZUFBZSxpQkFBcEI7QUFDQSxTQUFLLGVBQWUsaUJBQXBCO0FBQ0EsU0FBSyx1QkFBTDtBQUNFLGdCQUFVLG1CQUFWOztBQUVBLG9CQUFjLCtEQUNBLDBDQURBLEdBRUEsbUNBRmQ7O0FBSUEsZ0JBQVUsSUFBVixDQUFlLGVBQWUsY0FBOUI7O0FBRUE7O0FBRUYsU0FBSyxzQkFBTDtBQUNFLGdCQUFVLHVCQUFWO0FBQ0Esb0JBQWMsNkNBQWQ7O0FBRUEsVUFBSSxRQUFRLGFBQVIsRUFBSixFQUE2QjtBQUMzQix1QkFBZSxxQ0FBZjtBQUNEOztBQUVELGdCQUFVLElBQVYsQ0FBZSxlQUFlLGNBQTlCOztBQUVBOztBQUVGLFNBQUssZUFBZSxhQUFwQjtBQUNFLGdCQUFVLHlCQUFWO0FBQ0Esb0JBQWMsb0VBQ0Esa0VBRGQ7QUFFQTs7QUFFRixTQUFLLGVBQUw7QUFDRSxnQkFBVSxzQkFBVjtBQUNBLG9CQUFjLGlEQUFkO0FBQ0EsZ0JBQVUsSUFBVixDQUFlLGVBQWUsY0FBOUI7QUFDQTs7QUFFRixTQUFLLGVBQWUsZUFBcEI7QUFDRSxnQkFBVSx1QkFBVjtBQUNBLG9CQUFjLCtFQUFkO0FBQ0EsZ0JBQVUsSUFBVixDQUFlLGVBQWUsY0FBOUI7QUFDQTs7QUFFRixTQUFLLHNCQUFMO0FBQ0UsZ0JBQVUsb0NBQVY7QUFDQSxvQkFBYyx3RUFDQSx5Q0FEZDtBQUVBLGdCQUFVLElBQVYsQ0FBZSxlQUFlLGNBQTlCO0FBQ0E7O0FBRUYsU0FBSyxlQUFlLGFBQXBCO0FBQ0UsVUFBSSxJQUFJLElBQUosS0FBYSxDQUFqQixFQUFvQjtBQUNsQixZQUFNLFNBQVMsV0FBVyxPQUFPLFFBQVAsQ0FBZ0IsSUFBaEIsQ0FBcUIsU0FBckIsQ0FBK0IsT0FBTyxRQUFQLENBQWdCLFFBQWhCLENBQXlCLE1BQXhELENBQTFCO0FBQ0Esa0JBQVUseUJBQVY7QUFDQSxzQkFBYyxvQkFBb0IsTUFBcEIsR0FBNkIsbURBQTdCLEdBQ0EsNkNBRGQ7QUFFQSxrQkFBVSxJQUFWLENBQWUsZUFBZSxlQUE5QjtBQUNELE9BTkQsTUFNTztBQUNMLGtCQUFVLGVBQWUsYUFBekI7QUFDQSxzQkFBYyxPQUFPLEdBQVAsQ0FBZDtBQUNEO0FBQ0Q7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBSyxlQUFlLDBCQUFwQjtBQUNFLGdCQUFVLDRCQUFWO0FBQ0Esb0JBQWMsT0FBTyxHQUFQLENBQWQ7QUFDQTs7QUFFRjtBQUNFLFVBQU0sc0JBQXNCLFdBQTVCOztBQUVBLFVBQUksZUFBZSxRQUFPLFdBQVAseUNBQU8sV0FBUCxPQUF1QixRQUExQyxFQUFvRDtBQUNsRCxzQkFBYyxPQUFPLFdBQVAsQ0FBZDtBQUNEOztBQUVEO0FBQ0E7QUFDQSxVQUFJLENBQUMsV0FBRCxJQUFnQixtQkFBcEIsRUFBeUM7QUFDdkMsWUFBSSxvQkFBb0IsT0FBeEIsRUFBaUM7QUFDL0Isd0JBQWMsb0JBQW9CLE9BQWxDO0FBQ0QsU0FGRCxNQUVPO0FBQ0w7QUFDQSx3QkFBYyxlQUFLLE9BQUwsQ0FBYSxtQkFBYixFQUFrQyxFQUFDLFlBQVksSUFBYixFQUFsQyxDQUFkO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJLE9BQU8sT0FBTyxHQUFQLEtBQWUsUUFBMUIsRUFBb0M7QUFDbEMsa0JBQVUsR0FBVjtBQUNELE9BRkQsTUFFTztBQUNMLFlBQUksR0FBSixFQUFTO0FBQ1AsY0FBSSxJQUFJLE9BQVIsRUFBaUI7QUFDZixzQkFBVSxPQUFPLElBQUksT0FBWCxDQUFWO0FBQ0Q7QUFDRjs7QUFFRCxZQUFJLE9BQU8sSUFBSSxXQUFmLEVBQTRCO0FBQzFCLGNBQUksQ0FBQyxXQUFMLEVBQWtCO0FBQ2hCLDBCQUFjLE9BQU8sSUFBSSxXQUFYLENBQWQ7QUFDRCxXQUZELE1BRU87QUFDTCwyQkFBZSxXQUFXLE9BQU8sSUFBSSxXQUFYLENBQTFCO0FBQ0Q7QUFDRjs7QUFFRCxZQUFJLE9BQU8sSUFBSSxPQUFmLEVBQXdCO0FBQ3RCLGNBQUksVUFBVSxPQUFPLElBQUksT0FBWCxDQUFkOztBQUVBLGNBQUksQ0FBQyxXQUFMLEVBQWtCO0FBQ2hCLDBCQUFjLE9BQWQ7QUFDRCxXQUZELE1BRU87QUFDTCwyQkFBZSxXQUFXLE9BQTFCO0FBQ0Q7QUFDRjtBQUNGOztBQUVEO0FBQ0EsVUFBSSxDQUFDLE9BQUwsRUFBYztBQUNaLFlBQUksT0FBSixFQUFhO0FBQ1gsb0JBQVUsT0FBVjtBQUNEOztBQUVELFlBQUksQ0FBQyxXQUFELElBQWdCLEdBQXBCLEVBQXlCO0FBQ3ZCLHdCQUFjLE9BQU8sR0FBUCxFQUFZLEVBQUMsVUFBVSxDQUFDLE9BQUQsQ0FBWCxFQUFaLENBQWQ7QUFDRDs7QUFFRDtBQUNBLFlBQUksT0FBTyxPQUFQLE1BQW9CLFdBQXhCLEVBQXFDO0FBQ25DLHdCQUFjLFNBQWQ7QUFDRDtBQUNGOztBQUVEO0FBbkxKOztBQXNMQSxNQUFJLFdBQVcsSUFBZjs7QUFFQSxNQUFJLFFBQVEsTUFBUixJQUFrQixRQUFRLE1BQVIsQ0FBZSxRQUFyQyxFQUErQztBQUM3QyxlQUFXLFFBQVEsTUFBUixDQUFlLFFBQWYsRUFBWDtBQUNEOztBQUVELE1BQUksS0FBSixFQUFXO0FBQ1QsY0FBVSxJQUFJLEtBQUosQ0FBVSxPQUFWLENBQVY7QUFDQSxZQUFRLEtBQVIsR0FBZ0IsS0FBaEI7QUFDRDs7QUFFRCxNQUFJLFVBQVUsTUFBZDs7QUFFQSxNQUFJLEdBQUosRUFBUztBQUNQLGNBQVUsV0FBVyxJQUFJLElBQUosR0FBVyxJQUFJLElBQWYsR0FBc0IsV0FBakMsQ0FBVjtBQUNBLGVBQVcsYUFBYSxJQUFJLElBQUosR0FBVyxJQUFJLElBQWYsR0FBc0IsV0FBbkMsQ0FBWDtBQUNBLGVBQVcsYUFBYSxJQUFJLElBQUosR0FBVyxJQUFJLElBQWYsR0FBc0IsV0FBbkMsQ0FBWDtBQUNEOztBQUVELE1BQU0saUJBQWlCLElBQUksY0FBSixDQUFtQixPQUFuQixFQUE0QjtBQUNqRCxpQkFBYSxXQURvQztBQUVqRCxjQUFVLFFBRnVDO0FBR2pELFlBQVEsUUFBUSxhQUFSLEVBSHlDO0FBSWpELFNBQUssT0FBTyxRQUFQLENBQWdCLElBSjRCO0FBS2pELFVBQU0sT0FMMkM7QUFNakQsV0FBTyxLQU4wQyxDQU1wQztBQU5vQyxHQUE1QixDQUF2Qjs7QUFTQSxNQUFJLFFBQUo7QUFDQSxNQUFJLGVBQWUsS0FBbkI7O0FBRUEsTUFBSSxRQUFRLFlBQVosRUFBMEI7QUFDeEIsUUFBSSxPQUFPLFFBQVEsWUFBZixLQUFnQyxVQUFwQyxFQUFnRDtBQUM5QyxxQkFBZSxRQUFRLFlBQVIsQ0FBcUIsY0FBckIsQ0FBZjtBQUNELEtBRkQsTUFFTztBQUNMLHFCQUFlLFFBQVEsWUFBdkI7QUFDRDtBQUNGOztBQUVELE1BQUksWUFBSixFQUFrQjtBQUNoQixlQUFXLHVCQUFhLE9BQWIsQ0FBWDtBQUNEOztBQUVELE1BQUksUUFBSixFQUFjO0FBQ1osYUFBUyxXQUFULENBQXFCLGNBQXJCLEVBQXFDLFVBQVUsSUFBVixFQUFnQjtBQUNuRCxVQUFJLElBQUosRUFBVTtBQUNSLGdCQUFRLEtBQVIsQ0FBYyx3QkFBZCxFQUF3QyxJQUF4QztBQUNEO0FBQ0YsS0FKRDtBQUtEOztBQUVELFdBQVMsUUFBVCxDQUFtQixJQUFuQixFQUF5QjtBQUN2QixXQUFPLFVBQVUsT0FBVixDQUFrQixJQUFsQixLQUEyQixDQUFsQztBQUNEOztBQUVELFdBQVMsZ0JBQVQsR0FBNkI7QUFDM0IsV0FBTyxTQUFTLGVBQWUsZUFBeEIsS0FBNEMsV0FBVyxjQUE5RDtBQUNEOztBQUVEOztBQUVBO0FBQ0EsaUJBQWUsWUFBZixHQUE4QixZQUFZO0FBQ3hDLFdBQU8sU0FBUDtBQUNELEdBRkQ7O0FBSUEsaUJBQWUsZ0JBQWYsR0FBa0MsWUFBWTtBQUM1QyxXQUFPLFNBQVMsZUFBZSxXQUF4QixLQUF3QyxRQUFRLFFBQVIsRUFBL0M7QUFDRCxHQUZEOztBQUlBLGlCQUFlLFdBQWYsR0FBNkIsWUFBWTtBQUN2QyxXQUFPLHNCQUFzQixTQUFTLGVBQWUsV0FBeEIsQ0FBN0I7QUFDRCxHQUZEOztBQUlBLGlCQUFlLFFBQWYsR0FBMEIsWUFBWTtBQUNwQyxXQUFPLFNBQVMsZUFBZSxXQUF4QixDQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPLGNBQVA7QUFDRCxDQWhVRDs7a0JBa1VlLGM7Ozs7Ozs7OztBQ3JXZjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQU0sVUFBVSxTQUFWLE9BQVUsQ0FBVSxTQUFWLEVBQXFCLE9BQXJCLEVBQThCO0FBQzVDLHlCQUFhLElBQWIsQ0FBa0IsSUFBbEIsRUFBd0IsT0FBeEIsRUFBaUMsU0FBakM7O0FBRUEsTUFBTSxPQUFPLElBQWI7QUFDQSxNQUFNLFFBQVEsUUFBUSxLQUF0Qjs7QUFFQSxNQUFJLGNBQUo7QUFDQSxNQUFJLFlBQUo7QUFDQSxNQUFJLFdBQUo7QUFDQSxNQUFJLFlBQUo7QUFDQSxNQUFJLGFBQUo7QUFDQSxNQUFJLGlCQUFKO0FBQ0EsTUFBSSxZQUFKOztBQUVBLE1BQUksZ0JBQUo7QUFDQSxNQUFJLGlCQUFKOztBQUVBLE1BQUksS0FBSjs7QUFFQSxXQUFTLElBQVQsQ0FBZSxRQUFmLEVBQXlCO0FBQ3ZCLFFBQUksWUFBWSxDQUFDLE1BQU0sT0FBTixDQUFjLFFBQWQsQ0FBakIsRUFBMEM7QUFDeEMsaUJBQVcsQ0FBQyxRQUFELENBQVg7QUFDRDs7QUFFRCxnQkFBWSxTQUFTLE9BQVQsQ0FBaUIsVUFBVSxPQUFWLEVBQW1CO0FBQzlDLDRCQUFPLE9BQVAsRUFBZ0IsSUFBaEI7QUFDRCxLQUZXLENBQVo7QUFHRDs7QUFFRCxXQUFTLElBQVQsQ0FBZSxRQUFmLEVBQXlCO0FBQ3ZCLFFBQUksWUFBWSxDQUFDLE1BQU0sT0FBTixDQUFjLFFBQWQsQ0FBakIsRUFBMEM7QUFDeEMsaUJBQVcsQ0FBQyxRQUFELENBQVg7QUFDRDs7QUFFRCxnQkFBWSxTQUFTLE9BQVQsQ0FBaUIsVUFBVSxPQUFWLEVBQW1CO0FBQzlDLDRCQUFPLE9BQVAsRUFBZ0IsS0FBaEI7QUFDRCxLQUZXLENBQVo7QUFHRDs7QUFFRCxXQUFTLE9BQVQsQ0FBa0IsUUFBbEIsRUFBNEI7QUFDMUIsUUFBSSxVQUFVLFlBQVksSUFBMUI7O0FBRUEsUUFBSSxZQUFZLENBQUMsTUFBTSxPQUFOLENBQWMsUUFBZCxDQUFqQixFQUEwQztBQUN4QyxpQkFBVyxDQUFDLFFBQUQsQ0FBWDtBQUNEOztBQUVELGdCQUFZLFNBQVMsT0FBVCxDQUFpQixVQUFVLE9BQVYsRUFBbUI7QUFDOUMsZ0JBQVUsV0FBVyxPQUFYLElBQXNCLENBQUMsc0JBQU8sT0FBUCxDQUFqQztBQUNELEtBRlcsQ0FBWjs7QUFJQSxXQUFPLE9BQVA7QUFDRDs7QUFFRCxXQUFTLE9BQVQsQ0FBa0IsUUFBbEIsRUFBNEI7QUFDMUIsUUFBSSxZQUFZLENBQUMsTUFBTSxPQUFOLENBQWMsUUFBZCxDQUFqQixFQUEwQztBQUN4QyxpQkFBVyxDQUFDLFFBQUQsQ0FBWDtBQUNEOztBQUVELGdCQUFZLFNBQVMsT0FBVCxDQUFpQixVQUFVLE9BQVYsRUFBbUI7QUFDOUMsVUFBSSxRQUFRLE9BQVIsS0FBb0IsT0FBcEIsSUFBK0IsUUFBUSxPQUFSLEtBQW9CLFFBQXZELEVBQWlFO0FBQy9ELGdCQUFRLFFBQVIsR0FBbUIsSUFBbkI7QUFDRCxPQUZELE1BRU87QUFDTCxnQkFBUSxTQUFSLENBQWtCLEdBQWxCLENBQXNCLFVBQXRCO0FBQ0Q7QUFDRixLQU5XLENBQVo7QUFPRDs7QUFFRCxXQUFTLE1BQVQsQ0FBaUIsUUFBakIsRUFBMkI7QUFDekIsUUFBSSxZQUFZLENBQUMsTUFBTSxPQUFOLENBQWMsUUFBZCxDQUFqQixFQUEwQztBQUN4QyxpQkFBVyxDQUFDLFFBQUQsQ0FBWDtBQUNEOztBQUVELGdCQUFZLFNBQVMsT0FBVCxDQUFpQixVQUFVLE9BQVYsRUFBbUI7QUFDOUMsVUFBSSxRQUFRLE9BQVIsS0FBb0IsT0FBcEIsSUFBK0IsUUFBUSxPQUFSLEtBQW9CLFFBQXZELEVBQWlFO0FBQy9ELGdCQUFRLFFBQVIsR0FBbUIsS0FBbkI7QUFDRCxPQUZELE1BRU87QUFDTCxnQkFBUSxTQUFSLENBQWtCLE1BQWxCLENBQXlCLFVBQXpCO0FBQ0Q7QUFDRixLQU5XLENBQVo7QUFPRDs7QUFFRCxXQUFTLFlBQVQsQ0FBdUIsYUFBdkIsRUFBc0MsSUFBdEMsRUFBNEMsSUFBNUMsRUFBa0QsUUFBbEQsRUFBNEQ7QUFDMUQsUUFBSSxRQUFKLEVBQWM7QUFDWixjQUFRLGFBQVI7QUFDRDs7QUFFRCxRQUFJLElBQUosRUFBVTtBQUNSLG9CQUFjLElBQWQsR0FBcUIsSUFBckI7QUFDRCxLQUZELE1BRU8sSUFBSSxDQUFDLGNBQWMsSUFBbkIsRUFBeUI7QUFDOUIsb0JBQWMsSUFBZCxHQUFxQixRQUFyQjtBQUNEOztBQUVELEtBQUMsSUFBRCxJQUFTLEtBQUssYUFBTCxDQUFUOztBQUVBLFdBQU8sYUFBUDtBQUNEOztBQUVELFdBQVMsbUJBQVQsQ0FBOEIsT0FBOUIsRUFBdUMsWUFBdkMsRUFBcUQ7QUFDbkQsUUFBTSxzQkFBc0IsU0FBdEIsbUJBQXNCLENBQUMsQ0FBRCxFQUFPO0FBQ2pDLFdBQUssRUFBRSxjQUFGLEVBQUw7O0FBRUEsVUFBSTtBQUNGLHFCQUFhLEVBQUMsT0FBTyxDQUFSLEVBQWI7QUFDRCxPQUZELENBRUUsT0FBTyxHQUFQLEVBQVk7QUFDWixhQUFLLElBQUwsQ0FBVSxpQkFBTyxLQUFqQixFQUF3QixHQUF4QjtBQUNEO0FBQ0YsS0FSRDs7QUFVQSxZQUFRLE9BQVIsR0FBa0IsbUJBQWxCO0FBQ0Q7O0FBRUQsV0FBUyxtQkFBVCxDQUE4QixPQUE5QixFQUF1QztBQUNyQyxRQUFJLGtCQUFKO0FBQ0EsUUFBSSxnQkFBSjs7QUFFQSxRQUFJLFFBQVEsRUFBWixFQUFnQjtBQUNkLDJCQUFxQixTQUFTLGNBQVQsQ0FBd0IsUUFBUSxFQUFoQyxDQUFyQjtBQUNEOztBQUVELFFBQUksQ0FBQyxrQkFBTCxFQUF5QjtBQUN2QiwyQkFBcUIsMkJBQUUsV0FBVyxRQUFRLEVBQXJCLEVBQXlCO0FBQzVDLGNBQU0sT0FEc0M7QUFFNUMsY0FBTSxRQUFRLElBRjhCO0FBRzVDLGVBQU8sUUFBUSxLQUg2QjtBQUk1QyxpQkFBUyxRQUFRO0FBSjJCLE9BQXpCLENBQXJCOztBQU9BLHlCQUFtQiwyQkFBRSxpQkFBRixFQUFxQixrQkFBckIsRUFBeUMsMkJBQUUsT0FBRixFQUFXO0FBQ3JFLG1CQUFXLFFBQVE7QUFEa0QsT0FBWCxFQUV6RCxRQUFRLEtBRmlELENBQXpDLENBQW5COztBQUlBO0FBQ0EsVUFBSSxnQkFBZ0Isd0JBQVMsY0FBVCxFQUF5QixZQUF6QixDQUFwQixFQUE0RDtBQUMxRCx1QkFBZSxZQUFmLENBQTRCLGdCQUE1QixFQUE4QyxZQUE5QztBQUNELE9BRkQsTUFFTztBQUNMLHVCQUFlLFdBQWYsQ0FBMkIsZ0JBQTNCO0FBQ0Q7QUFDRjs7QUFFRCxRQUFJLFFBQVEsYUFBWixFQUEyQjtBQUN6Qix5QkFBbUIsUUFBbkIsR0FBOEIsUUFBUSxhQUF0QztBQUNEOztBQUVELFlBQVEsa0JBQVI7O0FBRUEsV0FBTyxDQUFDLGtCQUFELEVBQXFCLGdCQUFyQixDQUFQO0FBQ0Q7O0FBRUQsV0FBUyxVQUFULENBQXFCLFdBQXJCLEVBQWtDLElBQWxDLEVBQXdDLFlBQXhDLEVBQXNELElBQXRELEVBQTRELEVBQTVELEVBQWdFLElBQWhFLEVBQXNFLFFBQXRFLEVBQWlHO0FBQUEsUUFBakIsUUFBaUIsdUVBQU4sSUFBTTs7QUFDL0YsUUFBSSxhQUFKOztBQUVBLFFBQUksRUFBSixFQUFRO0FBQ04sc0JBQWdCLFNBQVMsY0FBVCxDQUF3QixFQUF4QixDQUFoQjtBQUNELEtBRkQsTUFFTyxJQUFJLFFBQUosRUFBYztBQUNuQixzQkFBZ0IsU0FBUyxhQUFULENBQXVCLFFBQXZCLENBQWhCO0FBQ0QsS0FGTSxNQUVBO0FBQ0wsc0JBQWdCLGVBQWUsYUFBZixDQUE2QixNQUFNLFdBQW5DLENBQWhCO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDLGFBQUwsRUFBb0I7QUFDbEIsVUFBSSxRQUFRLFNBQVIsQ0FBa0IsV0FBdEIsRUFBbUM7QUFDakMsdUJBQWUsTUFBTSxRQUFRLFNBQVIsQ0FBa0IsV0FBdkM7QUFDRDs7QUFFRCxzQkFBZ0IsMkJBQUUsWUFBWSxXQUFkLENBQWhCO0FBQ0Esc0JBQWdCLGFBQWEsYUFBYixFQUE0QixJQUE1QixFQUFrQyxJQUFsQyxFQUF3QyxRQUF4QyxDQUFoQjs7QUFFQSxvQkFBYyxTQUFkLEdBQTBCLElBQTFCOztBQUVBO0FBQ0EsVUFBSSxnQkFBZ0Isd0JBQVMsY0FBVCxFQUF5QixZQUF6QixDQUFwQixFQUE0RDtBQUMxRCx1QkFBZSxZQUFmLENBQTRCLGFBQTVCLEVBQTJDLFlBQTNDO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsdUJBQWUsV0FBZixDQUEyQixhQUEzQjtBQUNEO0FBQ0YsS0FoQkQsTUFnQk87QUFDTCxzQkFBZ0IsYUFBYSxhQUFiLEVBQTRCLElBQTVCLEVBQWtDLElBQWxDLEVBQXdDLFFBQXhDLENBQWhCO0FBQ0Q7O0FBRUQsUUFBSSxZQUFKLEVBQWtCO0FBQ2hCLDBCQUFvQixhQUFwQixFQUFtQyxZQUFuQztBQUNEOztBQUVELFdBQU8sYUFBUDtBQUNEOztBQUVELFdBQVMsWUFBVCxHQUF5QjtBQUN2QixRQUFJLENBQUMsUUFBUSxhQUFiLEVBQTRCO0FBQzFCLFVBQUksQ0FBQyxZQUFMLEVBQW1CO0FBQ2pCLHVCQUFlLFdBQ2IsUUFBUSxTQUFSLENBQWtCLGlCQURMLEVBRWIsUUFGYSxFQUdiLElBSGEsRUFJYixJQUphLEVBS2IsUUFBUSxTQUFSLENBQWtCLGNBTEwsRUFNYixRQU5hLEVBT2IsUUFBUSxTQUFSLENBQWtCLG9CQVBMLEVBUWIsUUFBUSxvQkFSSyxDQUFmO0FBVUQsT0FYRCxNQVdPO0FBQ0wsZ0JBQVEsWUFBUjtBQUNEOztBQUVEO0FBQ0E7QUFDQSxVQUFJLENBQUMsVUFBVSxPQUFWLEVBQUQsSUFBd0IsWUFBNUIsRUFBMEM7QUFDeEMsNEJBQW9CLFlBQXBCLEVBQWtDLE1BQWxDO0FBQ0Q7QUFDRjs7QUFFRCxtQkFBZSxXQUNiLFFBQVEsU0FBUixDQUFrQixpQkFETCxFQUViLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIsTUFGUixFQUdiLE1BSGEsRUFJYixLQUphLENBQWY7O0FBT0EsUUFBSSxRQUFRLFdBQVosRUFBeUI7QUFDdkIsb0JBQWMsV0FDWixRQUFRLFNBQVIsQ0FBa0IsZ0JBRE4sRUFFWixRQUFRLElBQVIsQ0FBYSxPQUFiLENBQXFCLEtBRlQsRUFHWixVQUFVLEtBSEUsRUFJWixLQUpZLENBQWQ7QUFNRDs7QUFFRCxRQUFJLFFBQVEsV0FBWixFQUF5QjtBQUN2QixxQkFBZSxXQUNiLFFBQVEsU0FBUixDQUFrQixpQkFETCxFQUViLFFBQVEsSUFBUixDQUFhLE9BQWIsQ0FBcUIsTUFGUixFQUdiLFVBQVUsTUFIRyxFQUliLEtBSmEsQ0FBZjtBQU1EOztBQUVEO0FBQ0E7QUFDQSxvQkFBZ0IsV0FDZCxRQUFRLFNBQVIsQ0FBa0Isa0JBREosRUFFZCxRQUFRLElBQVIsQ0FBYSxPQUFiLENBQXFCLE9BRlAsRUFHZCxVQUFVLElBSEksRUFJZCxLQUpjLENBQWhCOztBQU9BLHdCQUFvQixXQUNsQixRQUFRLFNBQVIsQ0FBa0Isc0JBREEsRUFFbEIsUUFBUSxJQUFSLENBQWEsT0FBYixDQUFxQixXQUZILEVBR2xCLFdBSGtCLEVBSWxCLEtBSmtCLENBQXBCOztBQU9BLFFBQUksUUFBUSxLQUFSLElBQWlCLFFBQVEsS0FBUixDQUFjLE1BQW5DLEVBQTJDO0FBQ3pDLDBCQUFvQixvQkFBb0I7QUFDdEMsWUFBSSxnQkFEa0M7QUFFdEMsY0FBTSxPQUZnQztBQUd0QyxlQUFPLEtBSCtCO0FBSXRDLGVBQU8sV0FKK0I7QUFLdEMsaUJBQVMsQ0FBQyxRQUFRLGNBQVIsRUFMNEI7QUFNdEMsdUJBQWUseUJBQVk7QUFDekIsb0JBQVUsWUFBVjtBQUNEO0FBUnFDLE9BQXBCLENBQXBCOztBQVdBLHlCQUFtQixvQkFBb0I7QUFDckMsWUFBSSxlQURpQztBQUVyQyxjQUFNLE9BRitCO0FBR3JDLGVBQU8sSUFIOEI7QUFJckMsZUFBTyxpQkFKOEI7QUFLckMsaUJBQVMsUUFBUSxjQUFSLEVBTDRCO0FBTXJDLHVCQUFlLHlCQUFZO0FBQ3pCLG9CQUFVLFdBQVY7QUFDRDtBQVJvQyxPQUFwQixDQUFuQjtBQVVEO0FBQ0Y7O0FBRUQsV0FBUyxXQUFULENBQXNCLE1BQXRCLEVBQThCO0FBQzVCO0FBQ0EsUUFBSSxDQUFDLFFBQVEsaUJBQVIsQ0FBTCxFQUFpQztBQUMvQixVQUFJLENBQUMsT0FBTyxNQUFaLEVBQW9CO0FBQ2xCLGFBQUssWUFBTDtBQUNEO0FBQ0Y7O0FBRUQsUUFBSSxDQUFDLE9BQU8sTUFBWixFQUFvQjtBQUNsQixjQUFRLGFBQVI7QUFDQSxXQUFLLGFBQUw7QUFDRDs7QUFFRCxRQUFJLENBQUMsUUFBUSxvQkFBYixFQUFtQztBQUNqQyxhQUFPLFlBQVA7QUFDRDtBQUNGOztBQUVELFdBQVMsV0FBVCxHQUF3QjtBQUN0QixTQUFLLGlCQUFMO0FBQ0EsU0FBSyxZQUFMO0FBQ0EsU0FBSyxZQUFMO0FBQ0Q7O0FBRUQsV0FBUyxhQUFULEdBQTBCO0FBQ3hCLFNBQUssSUFBTDtBQUNEOztBQUVELFdBQVMsZ0JBQVQsQ0FBMkIsT0FBM0IsRUFBb0M7QUFDbEMsZ0JBQVksT0FBWjs7QUFFQSxRQUFJLFFBQVEsWUFBUixDQUFKLEVBQTJCO0FBQ3pCLGFBQU8sWUFBUDtBQUNEOztBQUVELFFBQUksUUFBUSxnQkFBUixDQUFKLEVBQStCO0FBQzdCLGFBQU8sZ0JBQVA7QUFDRDs7QUFFRCxRQUFJLFFBQVEsaUJBQVIsQ0FBSixFQUFnQztBQUM5QixhQUFPLGlCQUFQO0FBQ0Q7O0FBRUQsUUFBSSxRQUFRLG9CQUFaLEVBQWtDO0FBQ2hDLGNBQVEsWUFBUjtBQUNEO0FBQ0Y7O0FBRUQsV0FBUyxXQUFULEdBQXdCO0FBQ3RCLFlBQVEsWUFBUjs7QUFFQSxTQUFLLEtBQUw7QUFDRDs7QUFFRCxXQUFTLFNBQVQsR0FBc0I7QUFDcEIsU0FBSyxZQUFMO0FBQ0EsU0FBSyxhQUFMO0FBQ0EsWUFBUSxnQkFBUjtBQUNBLFlBQVEsaUJBQVI7O0FBRUEsU0FBSyxpQkFBTDtBQUNBLFdBQU8saUJBQVA7O0FBRUEsUUFBSSxDQUFDLFFBQVEsb0JBQWIsRUFBbUM7QUFDakMsYUFBTyxZQUFQO0FBQ0Q7QUFDRjs7QUFFRCxPQUFLLFlBQUwsR0FBb0IsWUFBWTtBQUM5QixXQUFPLFlBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUsscUJBQUwsR0FBNkIsWUFBWTtBQUN2QyxRQUFJLENBQUMsS0FBSyxjQUFMLEVBQUwsRUFBNEI7QUFDMUIscUJBQWUsS0FBSyxXQUFMLENBQWY7QUFDQSxXQUFLLFlBQUw7QUFDQSxhQUFPLFlBQVA7QUFDQSxXQUFLLFlBQUw7QUFDQSxXQUFLLGFBQUw7QUFDQSxhQUFPLGFBQVA7QUFDRDtBQUNGLEdBVEQ7O0FBV0EsV0FBUyxnQkFBVCxHQUE2QjtBQUMzQixTQUFLLFlBQUw7QUFDQSxTQUFLLGlCQUFMOztBQUVBLFFBQUksV0FBSixFQUFpQjtBQUNmLFdBQUssV0FBTDtBQUNBLGFBQU8sV0FBUDtBQUNEOztBQUVELFdBQU8sYUFBUDtBQUNBLFNBQUssYUFBTDtBQUNEOztBQUVELFdBQVMsV0FBVCxDQUFzQixXQUF0QixFQUFtQztBQUNqQztBQUNBO0FBQ0EsUUFBSSxjQUFjLENBQWxCLEVBQXFCO0FBQ25CO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsY0FBUSxpQkFBUjtBQUNBLGNBQVEsZ0JBQVI7QUFDQSxjQUFRLGlCQUFSO0FBQ0EsY0FBUSxZQUFSO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTLFVBQVQsR0FBdUI7QUFDckIsU0FBSyxZQUFMO0FBQ0EsU0FBSyxZQUFMOztBQUVBLFFBQUksV0FBSixFQUFpQjtBQUNmLGFBQU8sV0FBUDtBQUNBLFdBQUssV0FBTDtBQUNEO0FBQ0Y7O0FBRUQsV0FBUyxVQUFULEdBQXVCO0FBQ3JCLFlBQVEsYUFBUjtBQUNBLFNBQUssV0FBTDtBQUNBLFNBQUssWUFBTDtBQUNEOztBQUVELFdBQVMsV0FBVCxHQUF3QjtBQUN0QixZQUFRLFlBQVI7QUFDQSxZQUFRLGlCQUFSO0FBQ0EsWUFBUSxnQkFBUjtBQUNEOztBQUVELFdBQVMsWUFBVCxHQUF5QjtBQUN2QixZQUFRLFlBQVI7QUFDQSxZQUFRLGlCQUFSO0FBQ0Q7O0FBRUQsV0FBUyxXQUFULEdBQXdCO0FBQ3RCLFlBQVEsYUFBUjtBQUNBLFlBQVEsaUJBQVI7QUFDQSxZQUFRLFlBQVI7QUFDQSxZQUFRLFlBQVI7QUFDRDs7QUFFRCxXQUFTLFNBQVQsR0FBc0I7QUFDcEIsUUFBSSxRQUFRLG9CQUFaLEVBQWtDO0FBQ2hDLGNBQVEsWUFBUjtBQUNEO0FBQ0Y7O0FBRUQsV0FBUyxPQUFULEdBQW9CO0FBQ2xCLFFBQUksUUFBUSxvQkFBWixFQUFrQztBQUNoQyxhQUFPLFlBQVA7QUFDRDtBQUNGOztBQUVELFdBQVMsUUFBVCxHQUFxQjtBQUNuQixTQUFLLFlBQUw7QUFDQSxTQUFLLGFBQUw7QUFDQSxTQUFLLGlCQUFMO0FBQ0EsU0FBSyxZQUFMO0FBQ0Q7O0FBRUQsV0FBUyxlQUFULEdBQTRCO0FBQzFCLFlBQVEsWUFBUjtBQUNBLFlBQVEsZ0JBQVI7QUFDQSxZQUFRLGlCQUFSO0FBQ0Q7O0FBRUQsV0FBUyxnQkFBVCxHQUE2QjtBQUMzQixZQUFRLFlBQVI7QUFDQSxZQUFRLGdCQUFSO0FBQ0EsWUFBUSxpQkFBUjtBQUNEOztBQUVELFdBQVMsV0FBVCxHQUF3QjtBQUN0QixZQUFRLGlCQUFSO0FBQ0EsY0FBVSxZQUFWO0FBQ0EsY0FBVSxXQUFWO0FBQ0Q7O0FBRUQsV0FBUyxjQUFULEdBQTJCO0FBQ3pCLFNBQUssWUFBTDtBQUNEOztBQUVELFdBQVMsTUFBVCxHQUFtQjtBQUNqQixjQUFVLE1BQVY7QUFDRDs7QUFFRCxXQUFTLE1BQVQsQ0FBaUIsTUFBakIsRUFBeUI7QUFDdkIsWUFBUSxZQUFSO0FBQ0EsY0FBVSxNQUFWLENBQWlCLE1BQWpCO0FBQ0Q7O0FBRUQsV0FBUyxVQUFULEdBQXVCO0FBQ3JCLFVBQU0sdUJBQU47O0FBRUEsU0FBSyxFQUFMLENBQVEsaUJBQU8sZ0JBQWYsRUFBaUMsVUFBVSxPQUFWLEVBQW1CO0FBQ2xELHVCQUFpQixPQUFqQjtBQUNELEtBRkQsRUFFRyxFQUZILENBRU0saUJBQU8sT0FGYixFQUVzQixZQUFZO0FBQ2hDO0FBQ0QsS0FKRCxFQUlHLEVBSkgsQ0FJTSxpQkFBTyxNQUpiLEVBSXFCLFlBQVk7QUFDL0IsV0FBSyxxQkFBTDtBQUNELEtBTkQsRUFNRyxFQU5ILENBTU0saUJBQU8sU0FOYixFQU13QixVQUFVLFdBQVYsRUFBdUI7QUFDN0Msa0JBQVksV0FBWjtBQUNELEtBUkQsRUFRRyxFQVJILENBUU0saUJBQU8sZ0JBUmIsRUFRK0IsWUFBWTtBQUN6QztBQUNELEtBVkQsRUFVRyxFQVZILENBVU0saUJBQU8sUUFWYixFQVV1QixZQUFZO0FBQ2pDO0FBQ0QsS0FaRCxFQVlHLEVBWkgsQ0FZTSxpQkFBTyxRQVpiLEVBWXVCLFlBQVk7QUFDakM7QUFDRCxLQWRELEVBY0csRUFkSCxDQWNNLGlCQUFPLFNBZGIsRUFjd0IsWUFBWTtBQUNsQztBQUNELEtBaEJELEVBZ0JHLEVBaEJILENBZ0JNLGlCQUFPLFVBaEJiLEVBZ0J5QixZQUFZO0FBQ25DO0FBQ0QsS0FsQkQsRUFrQkcsRUFsQkgsQ0FrQk0saUJBQU8sU0FsQmIsRUFrQndCLFlBQVk7QUFDbEM7QUFDRCxLQXBCRCxFQW9CRyxFQXBCSCxDQW9CTSxpQkFBTyxPQXBCYixFQW9Cc0IsWUFBWTtBQUNoQztBQUNELEtBdEJELEVBc0JHLEVBdEJILENBc0JNLGlCQUFPLEtBdEJiLEVBc0JvQixZQUFZO0FBQzlCO0FBQ0QsS0F4QkQsRUF3QkcsRUF4QkgsQ0F3Qk0saUJBQU8sU0F4QmIsRUF3QndCLFlBQVk7QUFDbEM7QUFDRCxLQTFCRCxFQTBCRyxFQTFCSCxDQTBCTSxpQkFBTyxJQTFCYixFQTBCbUIsWUFBWTtBQUM3QjtBQUNELEtBNUJELEVBNEJHLEVBNUJILENBNEJNLGlCQUFPLFVBNUJiLEVBNEJ5QixVQUFVLE9BQVYsRUFBbUI7QUFDMUMsa0JBQVksT0FBWjtBQUNELEtBOUJELEVBOEJHLEVBOUJILENBOEJNLGlCQUFPLFlBOUJiLEVBOEIyQixZQUFZO0FBQ3JDO0FBQ0QsS0FoQ0QsRUFnQ0csRUFoQ0gsQ0FnQ00saUJBQU8sVUFoQ2IsRUFnQ3lCLFlBQVk7QUFDbkM7QUFDRCxLQWxDRCxFQWtDRyxFQWxDSCxDQWtDTSxpQkFBTyxjQWxDYixFQWtDNkIsWUFBWTtBQUN2QztBQUNELEtBcENELEVBb0NHLEVBcENILENBb0NNLGlCQUFPLGVBcENiLEVBb0M4QixZQUFZO0FBQ3hDO0FBQ0QsS0F0Q0QsRUFzQ0csRUF0Q0gsQ0FzQ00saUJBQU8sYUF0Q2IsRUFzQzRCLFlBQVk7QUFDdEM7QUFDRCxLQXhDRCxFQXdDRyxFQXhDSCxDQXdDTSxpQkFBTyxLQXhDYixFQXdDb0IsVUFBVSxHQUFWLEVBQWU7QUFDakM7QUFDQTtBQUNBLFVBQUksSUFBSSxXQUFKLElBQW1CLElBQUksV0FBSixFQUFuQixJQUF3QyxRQUFRLHdCQUFwRCxFQUE4RTtBQUM1RSxhQUFLLElBQUw7QUFDRDtBQUNGLEtBOUNEO0FBK0NEOztBQUVELE9BQUssS0FBTCxHQUFhLFlBQVk7QUFDdkIsWUFBUSxLQUFSLENBQWMsa0JBQWQ7O0FBRUEsWUFBUSxXQUFSO0FBQ0EsWUFBUSxZQUFSO0FBQ0EsWUFBUSxZQUFSO0FBQ0EsWUFBUSxhQUFSO0FBQ0EsWUFBUSxpQkFBUjtBQUNELEdBUkQ7O0FBVUEsT0FBSywwQkFBTCxHQUFrQyxZQUFZO0FBQzVDLFdBQU8sQ0FBQyxrQkFBa0IsUUFBMUI7QUFDRCxHQUZEOztBQUlBLE9BQUsscUJBQUwsR0FBNkIsWUFBWTtBQUN2QyxXQUFPLENBQUMsYUFBYSxRQUFyQjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxlQUFMLEdBQXVCLFVBQVUsZUFBVixFQUEyQjtBQUNoRCxtQkFBZSxlQUFmO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLGVBQUwsR0FBdUIsWUFBWTtBQUNqQyxXQUFPLFlBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssS0FBTCxHQUFhLFlBQVk7QUFDdkIscUJBQWlCLFVBQVUsYUFBVixDQUF3QixNQUFNLFFBQVEsU0FBUixDQUFrQixZQUFoRCxDQUFqQjs7QUFFQSxRQUFJLENBQUMsY0FBTCxFQUFxQjtBQUNuQix1QkFBaUIsMkJBQUUsU0FBUyxRQUFRLFNBQVIsQ0FBa0IsWUFBN0IsQ0FBakI7O0FBRUEsZ0JBQVUsV0FBVixDQUFzQixjQUF0QjtBQUNEOztBQUVEOztBQUVBLEtBQUMsS0FBRCxJQUFVLFlBQVY7O0FBRUEsWUFBUSxJQUFSO0FBQ0QsR0FkRDs7QUFnQkEsT0FBSyxNQUFMLEdBQWMsWUFBWTtBQUN4QixZQUFRLEtBQVI7QUFDRCxHQUZEOztBQUlBLE9BQUssSUFBTCxHQUFZLFVBQVUsTUFBVixFQUFrQjtBQUM1QixTQUFLLGNBQUw7O0FBRUEsUUFBSSxVQUFVLE9BQU8sSUFBckIsRUFBMkI7QUFDekIsV0FBSyxZQUFMO0FBQ0EsV0FBSyxXQUFMO0FBQ0EsV0FBSyxZQUFMO0FBQ0EsV0FBSyxhQUFMO0FBQ0EsV0FBSyxpQkFBTDtBQUNBLFdBQUssWUFBTDtBQUNEO0FBQ0YsR0FYRDs7QUFhQSxPQUFLLElBQUwsR0FBWSxZQUFZO0FBQ3RCLFNBQUssY0FBTDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxjQUFMLEdBQXNCLFlBQVk7QUFDaEMsV0FBTyxVQUFVLGNBQVYsRUFBUDtBQUNELEdBRkQ7QUFHRCxDQTNrQkQ7O0FBNmtCQSxlQUFLLFFBQUwsQ0FBYyxPQUFkOztrQkFFZSxPOzs7Ozs7Ozs7QUN2bEJmOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQUksWUFBWSxTQUFaLFNBQVksQ0FBVSxPQUFWLEVBQW1CO0FBQ2pDLHlCQUFhLElBQWIsQ0FBa0IsSUFBbEIsRUFBd0IsT0FBeEIsRUFBaUMsV0FBakM7O0FBRUEsTUFBTSxPQUFPLElBQWI7O0FBRUEsTUFBTSxhQUFhLG1DQUFuQjtBQUNBLE1BQU0sVUFBVSxzQkFBWSxJQUFaLEVBQWtCLE9BQWxCLENBQWhCO0FBQ0EsTUFBTSxVQUFVLHNCQUFZLElBQVosRUFBa0IsT0FBbEIsQ0FBaEI7QUFDQSxNQUFNLFdBQVcsdUJBQWEsT0FBYixDQUFqQjtBQUNBLE1BQU0sY0FBYyxZQUFZLFNBQVMsYUFBckIsSUFBc0MsU0FBUyxhQUFULENBQXVCLE1BQXZCLENBQTFEO0FBQ0EsTUFBTSxRQUFRLFFBQVEsS0FBdEI7O0FBRUEsTUFBSSxXQUFXLEtBQWY7QUFDQSxNQUFJLFlBQVksS0FBaEI7QUFDQSxNQUFJLGlCQUFpQixLQUFyQjs7QUFFQSxNQUFJLGdCQUFKO0FBQ0EsTUFBSSxLQUFKO0FBQ0EsTUFBSSxJQUFKOztBQUVBLFdBQVMsaUJBQVQsR0FBOEI7QUFDNUIsbURBQWUsRUFBQyxTQUFTLElBQVYsRUFBZjtBQUNEOztBQUVDO0FBQ0YsV0FBUyxxQkFBVCxHQUFrQztBQUNoQyxXQUFPLGlCQUFpQixPQUFqQixDQUF5QixNQUF6QixDQUFQO0FBQ0Q7O0FBRUQsV0FBUyxjQUFULEdBQTJCO0FBQ3pCLFFBQUksV0FBSjs7QUFFQSxRQUFJLGlCQUFpQixPQUFqQixLQUE2QixNQUFqQyxFQUF5QztBQUN2QyxvQkFBYyxnQkFBZDtBQUNELEtBRkQsTUFFTyxJQUFJLFFBQVEsU0FBUixDQUFrQixNQUF0QixFQUE4QjtBQUNuQyxvQkFBYyxTQUFTLGNBQVQsQ0FBd0IsUUFBUSxTQUFSLENBQWtCLE1BQTFDLENBQWQ7QUFDRCxLQUZNLE1BRUE7QUFDTCxvQkFBYyx1QkFBZDtBQUNEOztBQUVELFdBQU8sV0FBUDtBQUNEOztBQUVELFdBQVMsU0FBVCxHQUFzQjtBQUNwQixRQUFNLGNBQWMsZ0JBQXBCOztBQUVBLFFBQUksV0FBSixFQUFpQjtBQUNmLFlBQU0sd0JBQU47QUFDQSxhQUFPLG1CQUFTLElBQVQsRUFBZSxXQUFmLEVBQTRCLE9BQTVCLENBQVA7O0FBRUEsVUFBTSxlQUFlLEtBQUssZ0JBQUwsRUFBckI7QUFDQSxzQkFBZ0IsUUFBUSxlQUFSLENBQXdCLFlBQXhCLENBQWhCOztBQUVBLFdBQUssS0FBTDtBQUNEO0FBQ0Y7O0FBRUQsV0FBUyxhQUFULEdBQTBCO0FBQ3hCLFVBQU0sNEJBQU47O0FBRUEsUUFBSSxDQUFDLGlCQUFpQixTQUF0QixFQUFpQztBQUMvQixXQUFLLElBQUwsQ0FBVSxpQkFBTyxLQUFqQixFQUF3Qix5QkFBZSxNQUFmLENBQXNCLGlDQUF0QixFQUF5RCxPQUF6RCxDQUF4QjtBQUNELEtBRkQsTUFFTztBQUNMLHVCQUFpQixTQUFqQixDQUEyQixHQUEzQixDQUErQixXQUEvQjs7QUFFQSxVQUFJLENBQUMsUUFBUSxVQUFiLEVBQXlCO0FBQ3ZCLGdCQUFRLEtBQVI7QUFDRDs7QUFFRCxjQUFRLEtBQVI7QUFDRDtBQUNGOztBQUVELFdBQVMsWUFBVCxDQUF1QixHQUF2QixFQUE0QjtBQUMxQixlQUFXLElBQVg7O0FBRUEsUUFBSSxJQUFJLEtBQVIsRUFBZTtBQUNiLGNBQVEsTUFBUixDQUFlLEtBQWYsQ0FBcUIsSUFBSSxLQUF6QjtBQUNELEtBRkQsTUFFTztBQUNMLGNBQVEsTUFBUixDQUFlLEtBQWYsQ0FBcUIsR0FBckI7QUFDRDs7QUFFRCxRQUFJLFFBQVEsYUFBWixFQUEyQjtBQUN6QixjQUFRLEtBQVIsQ0FBYyxHQUFkO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsY0FBUSxLQUFSO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTLFVBQVQsR0FBdUI7QUFDckIsVUFBTSx5QkFBTjs7QUFFQSxXQUFPLGdCQUFQLENBQXdCLGNBQXhCLEVBQXdDLFVBQUMsQ0FBRCxFQUFPO0FBQzdDLFdBQUssTUFBTCxDQUFZLENBQVo7QUFDRCxLQUZEOztBQUlBLFFBQUksQ0FBQyxRQUFRLFVBQWIsRUFBeUI7QUFDdkIsaUJBQVcsUUFBWCxDQUFvQixVQUFVLE9BQVYsRUFBbUI7QUFDckM7QUFDQSxZQUFJLEtBQUosRUFBVztBQUNULGNBQUksT0FBSixFQUFhO0FBQ1gsZ0JBQUksUUFBUSxrQkFBUixNQUFnQyxLQUFLLGNBQUwsRUFBcEMsRUFBMkQ7QUFDekQsbUJBQUssTUFBTDtBQUNEOztBQUVELGlCQUFLLElBQUwsQ0FBVSxpQkFBTyxPQUFqQjtBQUNELFdBTkQsTUFNTztBQUNMLGdCQUFJLFFBQVEsa0JBQVIsT0FBaUMsS0FBSyxjQUFMLE1BQXlCLEtBQUssV0FBTCxFQUExRCxDQUFKLEVBQW1GO0FBQ2pGLG1CQUFLLEtBQUwsQ0FBVyxvQkFBWDtBQUNEOztBQUVELGlCQUFLLElBQUwsQ0FBVSxpQkFBTyxTQUFqQjtBQUNEO0FBQ0Y7QUFDRixPQWpCRDtBQWtCRDs7QUFFRCxRQUFJLFFBQVEsV0FBWixFQUF5QjtBQUN2QixVQUFJLENBQUMsUUFBUSxVQUFiLEVBQXlCO0FBQ3ZCLGVBQU8sZ0JBQVAsQ0FBd0IsVUFBeEIsRUFBb0MsVUFBVSxDQUFWLEVBQWE7QUFDL0MsY0FBTSxVQUFVLEVBQUUsTUFBRixDQUFTLE9BQXpCOztBQUVBLGNBQUksWUFBWSxPQUFaLElBQXVCLFlBQVksVUFBdkMsRUFBbUQ7QUFDakQsZ0JBQU0sT0FBTyxFQUFFLE9BQUYsR0FBWSxFQUFFLE9BQWQsR0FBd0IsRUFBRSxLQUF2Qzs7QUFFQSxnQkFBSSxTQUFTLEVBQWIsRUFBaUI7QUFDZixnQkFBRSxjQUFGOztBQUVBLGtCQUFJLFFBQVEsV0FBWixFQUF5QjtBQUN2Qix3QkFBUSxhQUFSO0FBQ0QsZUFGRCxNQUVPO0FBQ0wsd0JBQVEsWUFBUjtBQUNEO0FBQ0Y7QUFDRjtBQUNGLFNBaEJEO0FBaUJEO0FBQ0Y7O0FBRUQ7QUFDQTtBQUNBLFNBQUssRUFBTCxDQUFRLGlCQUFPLEtBQWYsRUFBc0IsVUFBVSxHQUFWLEVBQWU7QUFDbkMsbUJBQWEsR0FBYjtBQUNBLHFCQUFlLEdBQWY7O0FBRUEsVUFBSSxJQUFJLGdCQUFKLElBQXdCLElBQUksZ0JBQUosRUFBNUIsRUFBb0Q7QUFDbEQ7QUFDRDtBQUNGLEtBUEQ7O0FBU0EsUUFBSSxDQUFDLFFBQVEsVUFBYixFQUF5QjtBQUN2QixXQUFLLEVBQUwsQ0FBUSxpQkFBTyxnQkFBZixFQUFpQyxZQUFZO0FBQzNDO0FBQ0QsT0FGRDtBQUdEO0FBQ0Y7O0FBRUQsV0FBUyxlQUFULEdBQTRCO0FBQzFCLFFBQUksUUFBUSxlQUFSLE1BQTZCLFFBQVEsS0FBUixDQUFjLEtBQWQsR0FBc0IsQ0FBdEIsS0FBNEIsQ0FBN0QsRUFBZ0U7QUFDOUQsWUFBTSx5QkFBZSxNQUFmLENBQXNCLGlDQUF0QixFQUF5RCxPQUF6RCxDQUFOO0FBQ0Q7O0FBRUQsUUFBSSxRQUFRLGdCQUFSLE1BQThCLFFBQVEsS0FBUixDQUFjLE1BQWQsR0FBdUIsQ0FBdkIsS0FBNkIsQ0FBL0QsRUFBa0U7QUFDaEUsWUFBTSx5QkFBZSxNQUFmLENBQXNCLGtDQUF0QixFQUEwRCxPQUExRCxDQUFOO0FBQ0Q7QUFDRjs7QUFFRDtBQUNBO0FBQ0EsV0FBUyxpQkFBVCxHQUE4QjtBQUM1QixRQUFNLFFBQVEsUUFBUSxnQkFBUixDQUF5QixJQUF6QixDQUFkOztBQUVBLFFBQUksUUFBUSxDQUFaLEVBQWU7QUFDYixZQUFNLHlCQUFlLE1BQWYsQ0FBc0IsdUNBQXRCLEVBQStELE9BQS9ELENBQU47QUFDRCxLQUZELE1BRU87QUFDTCx1QkFBaUIsS0FBakIsQ0FBdUIsS0FBdkIsR0FBK0IsUUFBUSxJQUF2QztBQUNEO0FBQ0Y7O0FBRUQsV0FBUyxnQkFBVCxHQUE2QjtBQUMzQixxQkFBaUIsS0FBakIsQ0FBdUIsS0FBdkIsR0FBK0IsTUFBL0I7QUFDRDs7QUFFRCxXQUFTLGNBQVQsQ0FBeUIsQ0FBekIsRUFBNEI7QUFDMUIsWUFBUSxNQUFSLENBQWUsQ0FBZjtBQUNBLFlBQVEsTUFBUjtBQUNBLFNBQUssVUFBTDtBQUNEOztBQUVELFdBQVMsVUFBVCxHQUF1QjtBQUNyQiwwQkFBTyxnQkFBUCxFQUF5QixJQUF6QjtBQUNEOztBQUVDO0FBQ0YsV0FBUyxTQUFULENBQW9CLEtBQXBCLEVBQTJCO0FBQ3pCLFdBQU8sTUFBTSxPQUFOLENBQWMsc0JBQWQsRUFBc0MsRUFBdEMsQ0FBUDtBQUNEOztBQUVELFdBQVMsZUFBVCxDQUEwQixRQUExQixFQUFvQyxNQUFwQyxFQUE0QyxFQUE1QyxFQUFnRDtBQUM5QyxRQUFNLGNBQWM7QUFDbEIsaUJBQVcsUUFBUSxTQUFSLENBQWtCLGdCQURYO0FBRWxCLGNBQVEsUUFBUSxTQUFSLENBQWtCLGFBRlI7QUFHbEIsWUFBTSxRQUFRLFNBQVIsQ0FBa0IsV0FITjtBQUlsQixjQUFRLFFBQVEsU0FBUixDQUFrQixhQUpSO0FBS2xCLGFBQU8sUUFBUSxTQUFSLENBQWtCLFlBTFA7QUFNbEIsbUJBQWEsUUFBUSxTQUFSLENBQWtCO0FBTmIsS0FBcEI7O0FBU0EsUUFBTSxvQkFBb0IsRUFBMUI7O0FBRUEsV0FBTyxJQUFQLENBQVksV0FBWixFQUF5QixPQUF6QixDQUFpQyxVQUFVLEdBQVYsRUFBZTtBQUM5QyxVQUFJLFNBQVMsY0FBVCxDQUF3QixZQUFZLEdBQVosQ0FBeEIsQ0FBSixFQUErQztBQUM3QywwQkFBa0IsR0FBbEIsSUFBeUIsU0FBUyxZQUFZLEdBQVosQ0FBVCxDQUF6QjtBQUNEO0FBQ0YsS0FKRDs7QUFNQSxRQUFJLGtCQUFrQixJQUF0QixFQUE0QjtBQUMxQix3QkFBa0IsSUFBbEIsR0FBeUIsVUFBVSxrQkFBa0IsSUFBNUIsQ0FBekI7QUFDRDs7QUFFRCxRQUFJLGtCQUFrQixFQUF0QixFQUEwQjtBQUN4Qix3QkFBa0IsRUFBbEIsR0FBdUIsVUFBVSxrQkFBa0IsRUFBNUIsQ0FBdkI7QUFDRDs7QUFFRztBQUNKLFFBQUksT0FBTyxNQUFQLEtBQWtCLENBQUMsTUFBdkIsRUFBK0I7QUFDN0Isd0JBQWtCLGNBQWxCLEdBQW1DLFFBQVEsaUJBQVIsRUFBbkM7QUFDQSx3QkFBa0IsS0FBbEIsR0FBMEIsUUFBUSxnQkFBUixDQUF5QixJQUF6QixDQUExQjtBQUNBLHdCQUFrQixNQUFsQixHQUEyQixRQUFRLGlCQUFSLENBQTBCLElBQTFCLENBQTNCOztBQUVBLGVBQVMsSUFBVCxDQUFjLGlCQUFkLEVBQWlDLEVBQWpDO0FBQ0QsS0FORCxNQU1PLElBQUksTUFBTSxNQUFOLENBQUosRUFBbUI7QUFDeEIsZUFBUyxHQUFULENBQWEsaUJBQWIsRUFBZ0MsRUFBaEM7QUFDRDtBQUNGOztBQUVELFdBQVMsVUFBVCxDQUFxQixRQUFyQixFQUErQixpQkFBL0IsRUFBa0QsR0FBbEQsRUFBdUQsRUFBdkQsRUFBMkQ7QUFDekQ7QUFDQTs7QUFFQSxRQUFJLENBQUMsR0FBRCxJQUFRLFFBQVEsRUFBcEIsRUFBd0I7QUFDdEI7QUFDQSxZQUFNLFNBQVMsT0FBZjtBQUNEOztBQUVEO0FBQ0EsUUFBSSxpQkFBSixFQUF1QjtBQUNyQixlQUFTLFFBQVEsU0FBUixDQUFrQixjQUEzQixJQUE2QyxrQkFBa0IsU0FBbEIsQ0FBNEIsS0FBekU7QUFDRDs7QUFFRCxhQUFTLElBQVQsQ0FBYyxRQUFkLEVBQXdCLEdBQXhCLEVBQTZCLEVBQTdCO0FBQ0Q7O0FBRUQsV0FBUyxtQkFBVCxDQUE4QixHQUE5QixFQUFtQyxNQUFuQyxFQUEyQyxTQUEzQyxFQUFzRCxRQUF0RCxFQUFnRSxZQUFoRSxFQUE4RTtBQUM1RSxTQUFLLFVBQUw7O0FBRUEsUUFBSSxHQUFKLEVBQVM7QUFDUCxXQUFLLElBQUwsQ0FBVSxpQkFBTyxLQUFqQixFQUF3QixHQUF4QjtBQUNELEtBRkQsTUFFTztBQUNMLGtCQUFZLElBQVo7O0FBRUE7QUFDQSxVQUFJLFlBQVksWUFBWixJQUE0QixhQUFhLElBQTdDLEVBQW1EO0FBQ2pELGVBQU8sSUFBUCxDQUFZLGFBQWEsSUFBekIsRUFBK0IsT0FBL0IsQ0FBdUMsVUFBVSxHQUFWLEVBQWU7QUFDcEQsbUJBQVMsR0FBVCxJQUFnQixhQUFhLElBQWIsQ0FBa0IsR0FBbEIsQ0FBaEI7QUFDRCxTQUZEO0FBR0Q7O0FBRUQsV0FBSyxJQUFMLENBQ0UsaUJBQU8sU0FEVCxFQUVFLFNBRkYsRUFHRSxZQUFZLFlBSGQ7O0FBTUEsVUFBSSxnQkFBZ0IsYUFBYSxJQUFiLEtBQXNCLFdBQXRDLElBQXFELGFBQWEsSUFBdEUsRUFBNEU7QUFDMUU7QUFDQSxpQkFBUyxJQUFULENBQWMsU0FBZCxHQUEwQixhQUFhLElBQXZDOztBQUVBO0FBQ0E7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsT0FBSyxtQkFBTCxHQUEyQixVQUFVLFNBQVYsRUFBcUIsT0FBckIsRUFBOEI7QUFDdkQsUUFBSTtBQUNGLGdCQUFVLFlBQVYsR0FBeUIsS0FBSyxlQUFMLENBQXFCO0FBQzVDLG9CQUFZLElBRGdDO0FBRTVDLG9CQUFZLFVBQVUsS0FGc0I7QUFHNUMsZUFBTyxVQUFVLE1BQVYsR0FBbUIsVUFBVTtBQUhRLE9BQXJCLEVBSXRCLE9BSnNCLENBQXpCOztBQU1BLGdCQUFVLFdBQVYsR0FBd0IsS0FBSyxjQUFMLENBQW9CO0FBQzFDLG9CQUFZLElBRDhCO0FBRTFDLHFCQUFhLFVBQVUsWUFGbUI7QUFHMUMsZUFBTyxVQUFVLE1BQVYsR0FBbUIsVUFBVTtBQUhNLE9BQXBCLENBQXhCOztBQU1BLGFBQU8sU0FBUDtBQUNELEtBZEQsQ0FjRSxPQUFPLEdBQVAsRUFBWTtBQUNaLFdBQUssSUFBTCxDQUFVLGlCQUFPLEtBQWpCLEVBQXdCLEdBQXhCO0FBQ0Q7QUFDRixHQWxCRDs7QUFvQkEsT0FBSyxVQUFMLEdBQWtCLFVBQVUsS0FBVixFQUFpQjtBQUNqQyxXQUFPLG9CQUFVLFVBQVYsQ0FBcUIsZ0JBQXJCLEVBQXVDLEtBQXZDLEVBQThDLE9BQTlDLENBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssV0FBTCxHQUFtQixVQUFVLE1BQVYsRUFBa0I7QUFDbkMsV0FBTyxvQkFBVSxXQUFWLENBQXNCLE1BQXRCLEVBQThCLE9BQTlCLENBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssY0FBTCxHQUFzQixVQUFVLFNBQVYsRUFBcUI7QUFDekMsV0FBTyxvQkFBVSxjQUFWLENBQ0wseUJBQWUsS0FBZixDQUFxQixPQUFyQixFQUE4QixTQUE5QixFQUF5QyxJQUF6QyxDQURLLENBQVA7QUFHRCxHQUpEOztBQU1BLE9BQUssZUFBTCxHQUF1QixVQUFVLFNBQVYsRUFBcUIsT0FBckIsRUFBOEI7QUFDbkQsUUFBSSxDQUFDLE9BQUwsRUFBYztBQUNaLFVBQUksZ0JBQUosRUFBc0I7QUFDcEIsa0JBQVUsZ0JBQVY7QUFDRCxPQUZELE1BRU87QUFDTDtBQUNBLGtCQUFVLFNBQVMsSUFBbkI7QUFDRDtBQUNGOztBQUVELFdBQU8sb0JBQVUsZUFBVixDQUNMLE9BREssRUFFTCx5QkFBZSxLQUFmLENBQXFCLE9BQXJCLEVBQThCLFNBQTlCLEVBQXlDLElBQXpDLENBRkssQ0FBUDtBQUlELEdBZEQ7O0FBZ0JBLE9BQUssZ0JBQUwsR0FBd0IsWUFBWTtBQUNsQyxXQUFPLFFBQVEsUUFBUixFQUFQO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLFVBQUwsR0FBa0IsWUFBWTtBQUM1QixXQUFPLENBQUMsQ0FBQyxnQkFBVDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxLQUFMLEdBQWEsWUFBWTtBQUN2QixRQUFJO0FBQ0YseUJBQW1CLFNBQVMsY0FBVCxDQUF3QixRQUFRLFNBQVIsQ0FBa0IsV0FBMUMsQ0FBbkI7O0FBRUE7QUFDQTtBQUNBLFVBQUksZ0JBQUosRUFBc0I7QUFDcEIsZ0JBQVEsU0FBUixJQUFxQixtQkFBckI7O0FBRUEsU0FBQyxLQUFELElBQVUsWUFBVjtBQUNBO0FBQ0E7O0FBRUEsWUFBSSxDQUFDLFFBQVEsVUFBYixFQUF5QjtBQUN2QjtBQUNEOztBQUVEOztBQUVBLFlBQUksQ0FBQyxRQUFMLEVBQWU7QUFDYixnQkFBTSxtQkFBTjtBQUNBLGtCQUFRLElBQVI7QUFDQSxlQUFLLElBQUwsQ0FBVSxpQkFBTyxLQUFqQjtBQUNELFNBSkQsTUFJTztBQUNMLGdCQUFNLDZDQUFOO0FBQ0Q7QUFDRixPQXBCRCxNQW9CTztBQUNMO0FBQ0E7QUFDRDtBQUNGLEtBN0JELENBNkJFLE9BQU8sR0FBUCxFQUFZO0FBQ1osVUFBSSxRQUFRLGVBQVIsRUFBSixFQUErQjtBQUM3QixhQUFLLElBQUwsQ0FBVSxpQkFBTyxLQUFqQixFQUF3QixHQUF4QjtBQUNELE9BRkQsTUFFTztBQUNMLGNBQU0sR0FBTjtBQUNEO0FBQ0Y7QUFDRixHQXJDRDs7QUF1Q0EsT0FBSyxlQUFMLEdBQXVCLFlBQVk7QUFDakMsV0FBTyxRQUFRLGVBQVIsRUFBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxhQUFMLEdBQXFCLFVBQVUsUUFBVixFQUFvQjtBQUN2QyxXQUFPLGlCQUFpQixhQUFqQixDQUErQixRQUEvQixDQUFQO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLFlBQUwsR0FBb0IsWUFBWTtBQUM5QixnQkFBWSxTQUFaLElBQXlCLFlBQVksU0FBWixDQUFzQixHQUF0QixDQUEwQixNQUExQixDQUF6QjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxVQUFMLEdBQWtCLFlBQVk7QUFDNUIsZ0JBQVksU0FBWixJQUF5QixZQUFZLFNBQVosQ0FBc0IsTUFBdEIsQ0FBNkIsTUFBN0IsQ0FBekI7QUFDRCxHQUZEOztBQUlBLE9BQUssV0FBTCxHQUFtQixVQUFVLEtBQVYsRUFBaUI7QUFDbEMscUJBQWlCLFdBQWpCLENBQTZCLEtBQTdCO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLFlBQUwsR0FBb0IsVUFBVSxLQUFWLEVBQWlCLFNBQWpCLEVBQTRCO0FBQzlDLHFCQUFpQixZQUFqQixDQUE4QixLQUE5QixFQUFxQyxTQUFyQztBQUNELEdBRkQ7O0FBSUEsT0FBSyxNQUFMLEdBQWMsVUFBVSxDQUFWLEVBQWE7QUFDekIsVUFBTSxxQkFBTixFQUE2QixDQUE3Qjs7QUFFQSxRQUFJO0FBQ0YscUJBQWUsQ0FBZjtBQUNBLFdBQUssa0JBQUw7O0FBRUEsY0FBUSxZQUFZLEtBQXBCO0FBQ0QsS0FMRCxDQUtFLE9BQU8sR0FBUCxFQUFZO0FBQ1osV0FBSyxJQUFMLENBQVUsaUJBQU8sS0FBakIsRUFBd0IsR0FBeEI7QUFDRDtBQUNGLEdBWEQ7O0FBYUEsT0FBSyxJQUFMLEdBQVksWUFBWTtBQUN0QixRQUFJLGdCQUFKLEVBQXNCO0FBQ3BCLDRCQUFPLGdCQUFQLEVBQXlCLEtBQXpCOztBQUVBLGNBQVEsSUFBUjs7QUFFQSxVQUFJLENBQUMsUUFBTCxFQUFlO0FBQ2IsWUFBTSxTQUFTLEtBQUssUUFBTCxFQUFmOztBQUVBLFlBQUksTUFBSixFQUFZO0FBQ1Ysa0JBQVEscUJBQVI7QUFDRDs7QUFFRDtBQUNBO0FBQ0EsZ0JBQVEsSUFBUjs7QUFFQSxZQUFJLEtBQUssYUFBTCxFQUFKLEVBQTBCO0FBQ3hCLGVBQUssSUFBTCxDQUFVLGlCQUFPLE9BQWpCO0FBQ0QsU0FGRCxNQUVPO0FBQ0wsZUFBSyxJQUFMLENBQVUsaUJBQU8sVUFBakIsRUFBNkIsRUFBQyxRQUFRLE1BQVQsRUFBN0I7QUFDRDtBQUNGO0FBQ0Y7QUFDRixHQXhCRDs7QUEwQkEsT0FBSyxJQUFMLEdBQVksWUFBWTtBQUN0QixVQUFNLG1CQUFOOztBQUVBLGVBQVcsS0FBWDs7QUFFQSxTQUFLLFdBQUwsTUFBc0IsS0FBSyxLQUFMLEVBQXRCOztBQUVBLFlBQVEsSUFBUjs7QUFFQSxRQUFJLFNBQUosRUFBZTtBQUNiLGNBQVEsSUFBUjtBQUNBO0FBQ0Q7QUFDRixHQWJEOztBQWVBLE9BQUssU0FBTCxHQUFpQixVQUFVLE1BQVYsRUFBa0I7QUFDakMsUUFBSTtBQUNGLFdBQUssSUFBTCxDQUFVLGlCQUFPLGFBQWpCOztBQUVBLGtCQUFZLEtBQVo7QUFDQSxXQUFLLElBQUw7QUFDQSxjQUFRLElBQVIsQ0FBYSxNQUFiLEVBQXFCLFlBQVk7QUFDL0IsWUFBSSxPQUFPLFVBQVgsRUFBdUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsZUFBSyxVQUFMO0FBQ0QsU0FMRCxNQUtPO0FBQ0wsZUFBSyxJQUFMLENBQVUsTUFBVjtBQUNEO0FBQ0YsT0FURDtBQVVELEtBZkQsQ0FlRSxPQUFPLEdBQVAsRUFBWTtBQUNaLFdBQUssSUFBTCxDQUFVLGlCQUFPLEtBQWpCLEVBQXdCLEdBQXhCO0FBQ0Q7QUFDRixHQW5CRDs7QUFxQkEsT0FBSyxjQUFMLEdBQXNCLFlBQVk7QUFDaEMsZUFBVyxLQUFYOztBQUVBLFNBQUssV0FBTCxNQUFzQixLQUFLLEtBQUwsRUFBdEI7O0FBRUEsWUFBUSxjQUFSOztBQUVBLGlCQUFhLFFBQVEsSUFBUixFQUFiO0FBQ0QsR0FSRDs7QUFVQSxPQUFLLFdBQUwsR0FBbUIsWUFBWTtBQUM3QixXQUFPLFFBQVEsV0FBUixFQUFQO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLFFBQUwsR0FBZ0IsWUFBWTtBQUMxQixXQUFPLFFBQVEsUUFBUixFQUFQO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLEtBQUwsR0FBYSxVQUFVLE1BQVYsRUFBa0I7QUFDN0IsWUFBUSxLQUFSLENBQWMsTUFBZDtBQUNELEdBRkQ7O0FBSUE7QUFDQSxPQUFLLFFBQUwsR0FBZ0IsVUFBVSxLQUFWLEVBQWlCO0FBQy9CLFFBQUksZ0JBQWdCLElBQXBCO0FBQ0EsUUFBSSxLQUFKOztBQUVBLFFBQUksQ0FBQyxRQUFRLG9CQUFiLEVBQW1DO0FBQ2pDLHNCQUFnQixLQUFoQjtBQUNBLHVCQUFpQixJQUFqQixDQUZpQyxDQUVYO0FBQ3ZCLEtBSEQsTUFHTyxJQUFJLEtBQUosRUFBVztBQUNoQixzQkFBZ0IsS0FBaEI7QUFDRCxLQUZNLE1BRUEsSUFBSSxLQUFLLFdBQUwsRUFBSixFQUF3QjtBQUM3QixzQkFBZ0IsS0FBaEI7QUFDRCxLQUZNLE1BRUEsSUFBSSxRQUFRLFdBQVIsRUFBSixFQUEyQjtBQUNoQyxzQkFBZ0IsUUFBUSxpQkFBUixNQUErQixRQUFRLGFBQVIsRUFBL0M7QUFDRCxLQUZNLE1BRUEsSUFBSSxRQUFRLFlBQVIsRUFBSixFQUE0QjtBQUNqQyxzQkFBZ0IsS0FBaEI7QUFDRDs7QUFFRCxRQUFJLGFBQUosRUFBbUI7QUFDakIsV0FBSyxJQUFMLENBQVUsaUJBQU8sVUFBakI7O0FBRUEsVUFBTSxlQUFlLFFBQVEsUUFBUixNQUFzQixRQUFRLDBCQUFSLEVBQTNDO0FBQ0EsVUFBSSxVQUFKOztBQUVBLFVBQUksSUFBSixFQUFVO0FBQ1IsZ0JBQVEsS0FBSyxRQUFMLEVBQVI7O0FBRUEsWUFBSSxLQUFKLEVBQVc7QUFDVCxjQUFJLENBQUMsS0FBSyxnQkFBTCxFQUFELElBQTRCLENBQUMsWUFBakMsRUFBK0M7QUFDN0MsZ0JBQUksYUFBYSxLQUFLLE9BQUwsRUFBYixJQUErQixLQUFLLFdBQUwsRUFBL0IsSUFBcUQsS0FBSyxRQUFMLEVBQXJELElBQXdFLEtBQUssY0FBTCxFQUE1RSxFQUFtRztBQUNqRyxzQkFBUSxLQUFSO0FBQ0Q7O0FBRUQsZ0JBQUksQ0FBQyxLQUFMLEVBQVk7QUFDViwyQkFBYSx1QkFBYjtBQUNEO0FBQ0Y7QUFDRixTQVZELE1BVU87QUFDTCxjQUFNLGVBQWUsS0FBSyxpQkFBTCxFQUFyQjs7QUFFQSxjQUFJLFlBQUosRUFBa0I7QUFDaEIseUJBQWEsc0JBQXNCLGFBQWEsSUFBbkMsR0FBMEMsYUFBdkQ7QUFDRCxXQUZELE1BRU87QUFDTCx5QkFBYSw0QkFBYjtBQUNEO0FBQ0Y7QUFDRixPQXRCRCxNQXNCTztBQUNMLGdCQUFRLFlBQVI7QUFDRDs7QUFFRCxVQUFJLEtBQUosRUFBVztBQUNULGFBQUssSUFBTCxDQUFVLGlCQUFPLEtBQWpCO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsYUFBSyxJQUFMLENBQVUsaUJBQU8sT0FBakIsRUFBMEIsVUFBMUI7QUFDRDs7QUFFRCx1QkFBaUIsS0FBakI7QUFDRDs7QUFFRCxXQUFPLEtBQVA7QUFDRCxHQTNERDs7QUE2REEsT0FBSyxXQUFMLEdBQW1CLFVBQVUsVUFBVixFQUFzQjtBQUN2QyxZQUFRLEtBQUssT0FBTCxDQUFhLFVBQWIsQ0FBUjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxVQUFMLEdBQWtCLFVBQVUsVUFBVixFQUFzQjtBQUN0QyxZQUFRLEtBQUssTUFBTCxDQUFZLFVBQVosQ0FBUjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxPQUFMLEdBQWUsWUFBWTtBQUN6QixXQUFPLENBQUMsQ0FBQyxJQUFUO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLE9BQUwsR0FBZSxZQUFZO0FBQ3pCLFdBQU8sUUFBUSxxQkFBUixFQUFQO0FBQ0QsR0FGRDs7QUFJQSxXQUFTLE1BQVQsQ0FBaUIsTUFBakIsRUFBeUI7QUFDdkIsV0FBTyxVQUFVLE9BQU8sV0FBUCxPQUF5QixNQUExQztBQUNEOztBQUVELFdBQVMsS0FBVCxDQUFnQixNQUFoQixFQUF3QjtBQUN0QixXQUFPLFVBQVUsT0FBTyxXQUFQLE9BQXlCLEtBQTFDO0FBQ0Q7O0FBRUQsT0FBSyxTQUFMLEdBQWlCLFVBQVUsUUFBVixFQUFvQixNQUFwQixFQUE0QixHQUE1QixFQUFpQztBQUNoRCxTQUFLLFlBQUw7QUFDQSxTQUFLLFdBQUwsQ0FBaUIsSUFBakI7QUFDQSxTQUFLLElBQUwsQ0FBVSxpQkFBTyxVQUFqQjs7QUFFQSxRQUFNLE9BQU8sT0FBTyxNQUFQLENBQWI7QUFDQSxRQUFNLGtCQUFrQixDQUFDLENBQUMsU0FBUyxRQUFRLFNBQVIsQ0FBa0IsWUFBM0IsQ0FBMUI7O0FBRUk7QUFDSixRQUFJLDBCQUEwQixTQUExQix1QkFBMEIsQ0FBVSxJQUFWLEVBQWdCLFNBQWhCLEVBQTJCLGlCQUEzQixFQUE4QztBQUMxRSxVQUFJLElBQUosRUFBVTtBQUNSLDRCQUFvQixJQUFwQixFQUEwQixNQUExQixFQUFrQyxTQUFsQyxFQUE2QyxpQkFBN0M7QUFDRCxPQUZELE1BRU8sSUFBSSxJQUFKLEVBQVU7QUFDZixtQkFBVyxRQUFYLEVBQXFCLGlCQUFyQixFQUF3QyxHQUF4QyxFQUE2QyxVQUFVLElBQVYsRUFBZ0IsWUFBaEIsRUFBOEI7QUFDekUsOEJBQW9CLElBQXBCLEVBQTBCLE1BQTFCLEVBQWtDLFNBQWxDLEVBQTZDLGlCQUE3QyxFQUFnRSxZQUFoRTtBQUNELFNBRkQ7QUFHRCxPQUpNLE1BSUE7QUFDTDtBQUNBLDRCQUFvQixJQUFwQixFQUEwQixNQUExQixFQUFrQyxTQUFsQyxFQUE2QyxpQkFBN0M7QUFDRDtBQUNGLEtBWEQ7O0FBYUEsUUFBSSxDQUFDLGVBQUwsRUFBc0I7QUFDcEIsaUJBQVcsUUFBWCxFQUFxQixJQUFyQixFQUEyQixHQUEzQixFQUFnQyxVQUFVLElBQVYsRUFBZ0IsWUFBaEIsRUFBOEI7QUFDNUQsNEJBQW9CLElBQXBCLEVBQTBCLE1BQTFCLEVBQWtDLElBQWxDLEVBQXdDLElBQXhDLEVBQThDLFlBQTlDO0FBQ0QsT0FGRDtBQUdELEtBSkQsTUFJTztBQUNMLHNCQUFnQixRQUFoQixFQUEwQixNQUExQixFQUFrQyx1QkFBbEM7QUFDRDtBQUNGLEdBN0JEOztBQStCQSxPQUFLLE9BQUwsR0FBZSxZQUFZO0FBQ3pCLFdBQU8sS0FBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxhQUFMLEdBQXFCLFlBQVk7QUFDL0IsV0FBTyxRQUFRLGFBQVIsRUFBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxPQUFMLEdBQWUsWUFBWTtBQUN6QixRQUFJLFVBQVUsS0FBZDs7QUFFQSxRQUFJLElBQUosRUFBVTtBQUNSLFVBQUksUUFBUSxrQkFBUixFQUFKLEVBQWtDO0FBQ2hDLGtCQUFVLEtBQVY7QUFDRCxPQUZELE1BRU8sSUFBSSxLQUFLLGFBQUwsTUFBd0IsS0FBSyxRQUFMLEVBQTVCLEVBQTZDO0FBQ2xELGtCQUFVLElBQVY7QUFDRDtBQUNGOztBQUVELFdBQU8sT0FBUDtBQUNELEdBWkQ7O0FBY0EsT0FBSyxTQUFMLEdBQWlCLFlBQVk7QUFDM0IsV0FBTyxRQUFRLFNBQVIsRUFBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxrQkFBTCxHQUEwQixVQUFVLE9BQVYsRUFBbUI7QUFDM0MsV0FBTyxRQUFRLFVBQVIsS0FBdUIsZ0JBQXZCLElBQTJDLFlBQVksZ0JBQTlEO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLFFBQUwsR0FBZ0IsVUFBVSxNQUFWLEVBQWtCO0FBQ2hDO0FBQ0EsWUFBUSxLQUFLLElBQUwsRUFBUjtBQUNBLGVBQVcsUUFBUSxJQUFSLENBQWEsTUFBYixDQUFYO0FBQ0QsR0FKRDs7QUFNQSxPQUFLLFFBQUwsR0FBZ0IsVUFBVSxTQUFWLEVBQXFCO0FBQ25DLFFBQUksSUFBSixFQUFVO0FBQ1IsV0FBSyxhQUFMLENBQW1CLFNBQW5CO0FBQ0EsV0FBSyxRQUFMO0FBQ0Q7QUFDRixHQUxEOztBQU9BLE9BQUssV0FBTCxHQUFtQixZQUFZO0FBQzdCLFlBQVEsZUFBUixDQUF3QixJQUF4QjtBQUNBLFNBQUssSUFBTCxDQUFVLGlCQUFPLGNBQWpCO0FBQ0QsR0FIRDs7QUFLQSxPQUFLLFlBQUwsR0FBb0IsWUFBWTtBQUM5QixZQUFRLGVBQVIsQ0FBd0IsS0FBeEI7QUFDQSxTQUFLLElBQUwsQ0FBVSxpQkFBTyxlQUFqQjtBQUNELEdBSEQ7O0FBS0EsT0FBSyxNQUFMLEdBQWMsWUFBWTtBQUN4QixzQkFBa0IsSUFBbEIsSUFBMEIsS0FBSyxXQUFMLEVBQTFCO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLGNBQUwsR0FBc0IsUUFBUSxjQUFSLENBQXVCLElBQXZCLENBQTRCLE9BQTVCLENBQXRCO0FBQ0EsT0FBSyxXQUFMLEdBQW1CLFFBQVEsV0FBUixDQUFvQixJQUFwQixDQUF5QixPQUF6QixDQUFuQjtBQUNBLE9BQUssTUFBTCxHQUFjLFFBQVEsTUFBUixDQUFlLElBQWYsQ0FBb0IsT0FBcEIsQ0FBZDtBQUNBLE9BQUssTUFBTCxHQUFjLFFBQVEsTUFBUixDQUFlLElBQWYsQ0FBb0IsT0FBcEIsQ0FBZDtBQUNBLE9BQUssSUFBTCxHQUFZLFFBQVEsSUFBUixDQUFhLElBQWIsQ0FBa0IsT0FBbEIsQ0FBWjtBQUNBLE9BQUssV0FBTCxHQUFtQixRQUFRLFdBQVIsQ0FBb0IsSUFBcEIsQ0FBeUIsT0FBekIsQ0FBbkI7QUFDRCxDQTFxQkQ7O0FBNHFCQSxlQUFLLFFBQUwsQ0FBYyxTQUFkOztrQkFFZSxTOzs7Ozs7Ozs7QUNoc0JmOzs7O0FBRUE7Ozs7OztBQUVBLFNBQVMsYUFBVCxDQUF3QixPQUF4QixFQUFpQztBQUMvQixNQUFJLGFBQWEsQ0FBakI7QUFDQSxNQUFJLE9BQU8sUUFBUSxxQkFBUixFQUFYOztBQUVBLE1BQUksSUFBSixFQUFVO0FBQ1IsaUJBQWEsS0FBSyxLQUFMLEdBQWEsS0FBSyxJQUEvQjtBQUNEOztBQUVELE1BQUksYUFBYSxDQUFqQixFQUFvQjtBQUNsQjtBQUNBLFdBQU8sU0FBUyxJQUFULENBQWMscUJBQWQsRUFBUDtBQUNBLGlCQUFhLEtBQUssS0FBTCxHQUFhLEtBQUssSUFBL0I7QUFDRDs7QUFFRCxTQUFPLFVBQVA7QUFDRDs7QUFFRCxTQUFTLGVBQVQsQ0FBMEIsTUFBMUIsRUFBa0MsT0FBbEMsRUFBMkM7QUFDekMsTUFBSSxRQUFRLGdCQUFSLEVBQUosRUFBZ0M7QUFDOUIsUUFBSSxDQUFDLE1BQUwsRUFBYTtBQUNYLGVBQVMsUUFBUSxLQUFSLENBQWMsTUFBdkI7QUFDRCxLQUZELE1BRU87QUFDTCxlQUFTLEtBQUssR0FBTCxDQUFTLFFBQVEsS0FBUixDQUFjLE1BQXZCLEVBQStCLE1BQS9CLENBQVQ7QUFDRDtBQUNGOztBQUVELE1BQUksK0JBQWdCLE1BQWhCLEtBQTJCLFNBQVMsQ0FBeEMsRUFBMkM7QUFDekMsVUFBTSx5QkFBZSxNQUFmLENBQ0oscUNBQ0EsTUFEQSxHQUVBLG1DQUhJLEVBSUosT0FKSSxDQUFOO0FBTUQ7O0FBRUQ7QUFDQSxTQUFPLE1BQVA7QUFDRDs7a0JBRWM7O0FBRWIsY0FBWSxvQkFBVSxPQUFWLEVBQW1CLEtBQW5CLEVBQTBCLE9BQTFCLEVBQW1DO0FBQzdDLFFBQU0sYUFBYSxjQUFjLE9BQWQsQ0FBbkI7QUFDQSxRQUFNLGVBQWUsYUFBYSxDQUFiLElBQWtCLGFBQWEsS0FBL0IsR0FBdUMsVUFBdkMsR0FBb0QsS0FBekU7O0FBRUEsUUFBSSwrQkFBZ0IsWUFBaEIsS0FBaUMsZUFBZSxDQUFwRCxFQUF1RDtBQUNyRCxZQUFNLHlCQUFlLE1BQWYsQ0FBc0Isc0NBQXRCLEVBQThELE9BQTlELENBQU47QUFDRCxLQUZELE1BRU87QUFDTCxhQUFPLFlBQVA7QUFDRDtBQUNGLEdBWFk7O0FBYWI7QUFDQTtBQUNBLGVBQWEscUJBQVUsTUFBVixFQUFrQixPQUFsQixFQUEyQjtBQUN0QyxRQUFJLCtCQUFnQixNQUFoQixLQUEyQixTQUFTLENBQXhDLEVBQTJDO0FBQ3pDLFlBQU0seUJBQWUsTUFBZixDQUFzQixxREFBdEIsRUFBNkUsT0FBN0UsQ0FBTjtBQUNELEtBRkQsTUFFTztBQUNMLFVBQU0sZ0JBQWdCLEtBQUssR0FBTCxDQUNwQixNQURvQjtBQUVwQjtBQUNBLGVBQVMsZUFBVCxDQUF5QixZQUhMLENBQXRCOztBQU1BLFVBQUksZ0JBQWdCLENBQXBCLEVBQXVCO0FBQ3JCLGNBQU0seUJBQWUsTUFBZixDQUFzQix1Q0FBdEIsRUFBK0QsT0FBL0QsQ0FBTjtBQUNELE9BRkQsTUFFTztBQUNMLGVBQU8sYUFBUDtBQUNEO0FBQ0Y7QUFDRixHQS9CWTs7QUFpQ2Isa0JBQWdCLHdCQUFVLE9BQVYsRUFBbUI7QUFDakMsUUFBSSxTQUFTLFFBQVEsV0FBUixJQUF1QixJQUFwQztBQUNBLFFBQU0sUUFBUSxRQUFRLEtBQVIsSUFBaUIsUUFBUSxRQUFSLEVBQS9COztBQUVBLGFBQVMsZ0JBQWdCLE1BQWhCLEVBQXdCLE9BQXhCLENBQVQ7O0FBRUEsUUFBSSxRQUFRLFVBQVosRUFBd0I7QUFDdEIsZUFBUyxLQUFLLFdBQUwsQ0FBaUIsTUFBakIsRUFBeUIsT0FBekIsQ0FBVDtBQUNEOztBQUVELFFBQUksK0JBQWdCLE1BQWhCLEtBQTJCLFNBQVMsQ0FBeEMsRUFBMkM7QUFDekMsWUFBTSx5QkFBZSxNQUFmLENBQXNCLHlEQUF0QixFQUFpRixPQUFqRixDQUFOO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsVUFBTSxrQkFBa0IsU0FBUyxTQUFTLEtBQWxCLENBQXhCOztBQUVBLFVBQUksa0JBQWtCLENBQXRCLEVBQXlCO0FBQ3ZCLGNBQU0seUJBQWUsTUFBZixDQUFzQiw0Q0FBdEIsRUFBb0UsT0FBcEUsQ0FBTjtBQUNELE9BRkQsTUFFTztBQUNMLGVBQU8sZUFBUDtBQUNEO0FBQ0Y7QUFDRixHQXREWTs7QUF3RGIsbUJBQWlCLHlCQUFVLE9BQVYsRUFBbUIsT0FBbkIsRUFBNEI7QUFDM0MsUUFBSSxRQUFRLFFBQVEsVUFBUixJQUFzQixJQUFsQztBQUNBLFFBQUksTUFBSjs7QUFFQSxRQUFNLFFBQVEsUUFBUSxLQUFSLElBQWlCLFFBQVEsUUFBUixFQUEvQjs7QUFFQSxRQUFJLFFBQVEsZUFBUixFQUFKLEVBQStCO0FBQzdCLGNBQVEsUUFBUSxLQUFSLENBQWMsS0FBdEI7QUFDRDs7QUFFRCxRQUFJLCtCQUFnQixLQUFoQixLQUEwQixRQUFRLENBQXRDLEVBQXlDO0FBQ3ZDLFlBQU0seUJBQWUsTUFBZixDQUFzQix1REFBdEIsRUFBK0UsT0FBL0UsQ0FBTjtBQUNELEtBRkQsTUFFTyxJQUFJLFFBQVEsVUFBWixFQUF3QjtBQUM3QixjQUFRLEtBQUssVUFBTCxDQUFnQixPQUFoQixFQUF5QixLQUF6QixFQUFnQyxPQUFoQyxDQUFSO0FBQ0Q7O0FBRUQsUUFBSSxLQUFKLEVBQVc7QUFDVCxlQUFTLFNBQVMsUUFBUSxLQUFqQixDQUFUO0FBQ0Q7O0FBRUQsUUFBSSwrQkFBZ0IsTUFBaEIsS0FBMkIsU0FBUyxDQUF4QyxFQUEyQztBQUN6QyxZQUFNLHlCQUFlLE1BQWYsQ0FBc0Isc0RBQXRCLEVBQThFLE9BQTlFLENBQU47QUFDRCxLQUZELE1BRU87QUFDTCxhQUFPLGdCQUFnQixNQUFoQixFQUF3QixPQUF4QixDQUFQO0FBQ0Q7QUFDRjtBQWpGWSxDOzs7Ozs7Ozs7QUMzQ2Y7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQU0sT0FBTyxTQUFQLElBQU8sQ0FBVSxTQUFWLEVBQXFCLFdBQXJCLEVBQWtDLE9BQWxDLEVBQTJDO0FBQ3RELHlCQUFhLElBQWIsQ0FBa0IsSUFBbEIsRUFBd0IsT0FBeEIsRUFBaUMsTUFBakM7O0FBRUEsTUFBTSxPQUFPLElBQWI7O0FBRUEsTUFBSSwwQkFBSjtBQUNBLE1BQUksUUFBSjs7QUFFQSxXQUFTLE9BQVQsR0FBb0I7QUFDbEIsV0FBTywyQkFBWSxXQUFaLENBQVA7QUFDRDs7QUFFRCxPQUFLLGFBQUwsR0FBcUIsVUFBVSxTQUFWLEVBQXFCO0FBQ3hDLFFBQU0sUUFBUSxZQUFZLFFBQVosQ0FBcUIsTUFBbkM7O0FBRUEsUUFBSSxLQUFKO0FBQ0EsUUFBSSxJQUFKOztBQUVBLFNBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxLQUFwQixFQUEyQixHQUEzQixFQUFnQztBQUM5QixjQUFRLFlBQVksUUFBWixDQUFxQixDQUFyQixDQUFSO0FBQ0EsYUFBTyxNQUFNLElBQWI7O0FBRUEsVUFBSSxVQUFVLElBQVYsQ0FBSixFQUFxQjtBQUNuQixjQUFNLEtBQU4sR0FBYyxVQUFVLElBQVYsQ0FBZDtBQUNEOztBQUVELFVBQUksU0FBUyxRQUFRLFNBQVIsQ0FBa0IsZ0JBQTNCLElBQ0EsU0FBUyxRQUFRLFNBQVIsQ0FBa0IsYUFEL0IsRUFDOEM7QUFDNUMsY0FBTSxRQUFOLEdBQWlCLElBQWpCO0FBQ0Q7QUFDRjs7QUFFRCxnQkFBWSxZQUFaLENBQXlCLFFBQXpCLEVBQW1DLEtBQW5DO0FBQ0QsR0FyQkQ7O0FBdUJBLFdBQVMsV0FBVCxDQUFzQixPQUF0QixFQUErQjtBQUM3QixXQUFPLFFBQVEsT0FBUixLQUFvQixRQUFwQixJQUFnQyxRQUFRLElBQVIsS0FBaUIsUUFBeEQ7QUFDRDs7QUFFRCxXQUFTLFdBQVQsQ0FBc0IsUUFBdEIsRUFBZ0MsVUFBaEMsRUFBNEM7QUFDMUMsUUFBTSxRQUFRLFlBQVksUUFBWixDQUFxQixNQUFuQzs7QUFFQSxTQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksS0FBcEIsRUFBMkIsR0FBM0IsRUFBZ0M7QUFDOUIsVUFBSSxjQUFlLENBQUMsVUFBRCxJQUFlLFlBQVksWUFBWSxRQUFaLENBQXFCLENBQXJCLENBQVosQ0FBbEMsRUFBeUU7QUFDdkUsb0JBQVksUUFBWixDQUFxQixDQUFyQixFQUF3QixRQUF4QixHQUFtQyxRQUFuQztBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxXQUFTLE9BQVQsR0FBb0I7QUFDbEIsUUFBTSxRQUFRLFlBQVksUUFBWixDQUFxQixNQUFuQzs7QUFFQSxTQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksS0FBcEIsRUFBMkIsR0FBM0IsRUFBZ0M7QUFDOUIsNEJBQU8sWUFBWSxRQUFaLENBQXFCLENBQXJCLENBQVAsRUFBZ0MsSUFBaEM7QUFDRDs7QUFFRCwwQkFBTyxXQUFQLEVBQW9CLElBQXBCO0FBQ0Q7O0FBRUQsV0FBUyxnQkFBVCxHQUE2QjtBQUMzQixXQUFPLFlBQVksZ0JBQVosQ0FBNkIsaUJBQTdCLENBQVA7QUFDRDs7QUFFRCxXQUFTLGlCQUFULEdBQThCO0FBQzVCLFdBQU8sWUFBWSxnQkFBWixDQUE2QixRQUE3QixDQUFQO0FBQ0Q7O0FBRUQsT0FBSyxPQUFMLEdBQWUsVUFBVSxVQUFWLEVBQXNCO0FBQ25DLGdCQUFZLElBQVosRUFBa0IsVUFBbEI7QUFDRCxHQUZEOztBQUlBLE9BQUssTUFBTCxHQUFjLFVBQVUsVUFBVixFQUFzQjtBQUNsQyxnQkFBWSxLQUFaLEVBQW1CLFVBQW5CO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLEtBQUwsR0FBYSxZQUFZO0FBQ3ZCLFFBQUksUUFBUSxvQkFBWixFQUFrQztBQUNoQyxVQUFNLGdCQUFnQixrQkFBdEI7QUFDQSxVQUFJLFlBQUo7O0FBRUEsV0FBSyxJQUFJLElBQUksQ0FBUixFQUFXLE1BQU0sY0FBYyxNQUFwQyxFQUE0QyxJQUFJLEdBQWhELEVBQXFELEdBQXJELEVBQTBEO0FBQ3hELHVCQUFlLGNBQWMsQ0FBZCxDQUFmOztBQUVBLFlBQUksYUFBYSxJQUFiLEtBQXNCLE9BQTFCLEVBQW1DO0FBQ2pDLHVCQUFhLGdCQUFiLENBQThCLFFBQTlCLEVBQXdDLFlBQVk7QUFDbEQsc0JBQVUsUUFBVjtBQUNELFdBRkQ7QUFHRCxTQUpELE1BSU87QUFDTCx1QkFBYSxnQkFBYixDQUE4QixPQUE5QixFQUF1QyxZQUFZO0FBQ2pELHNCQUFVLFFBQVY7QUFDRCxXQUZEO0FBR0Q7O0FBRUQ7QUFDQSxxQkFBYSxnQkFBYixDQUE4QixTQUE5QixFQUF5QyxZQUFZO0FBQ25ELGNBQUksQ0FBQywwQkFBTCxFQUFpQztBQUMvQixzQkFBVSxRQUFWO0FBQ0Q7QUFDRixTQUpEO0FBS0Q7O0FBRUQsVUFBTSxpQkFBaUIsbUJBQXZCOztBQUVBLFdBQUssSUFBSSxJQUFJLENBQVIsRUFBVyxPQUFPLGVBQWUsTUFBdEMsRUFBOEMsSUFBSSxJQUFsRCxFQUF3RCxHQUF4RCxFQUE2RDtBQUMzRCx1QkFBZSxDQUFmLEVBQWtCLGdCQUFsQixDQUFtQyxRQUFuQyxFQUE2QyxZQUFZO0FBQ3ZELG9CQUFVLFFBQVY7QUFDRCxTQUZEO0FBR0Q7QUFDRjs7QUFFRCxlQUFXLFlBQVksYUFBWixDQUEwQixpQkFBaUIsUUFBUSxTQUFSLENBQWtCLFlBQW5DLEdBQWtELElBQTVFLENBQVg7O0FBRUEsUUFBSSxDQUFDLFFBQUwsRUFBZTtBQUNiLGlCQUFXLDJCQUFFLE9BQUYsRUFBVztBQUNwQixjQUFNLFFBQVEsU0FBUixDQUFrQixZQURKO0FBRXBCLGNBQU07QUFGYyxPQUFYLENBQVg7O0FBS0Esa0JBQVksV0FBWixDQUF3QixRQUF4QjtBQUNEOztBQUVELFNBQUssRUFBTCxDQUFRLGlCQUFPLE9BQWYsRUFBd0IsVUFBVSxZQUFWLEVBQXdCO0FBQzlDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQUksQ0FBQyxZQUFELElBQWlCLENBQUMsU0FBUyxLQUEvQixFQUFzQztBQUNwQyxhQUFLLElBQUwsQ0FDRSxpQkFBTyxLQURULEVBRUUseUJBQWUsTUFBZixDQUFzQix1Q0FBdEIsRUFBK0QsT0FBL0QsQ0FGRjtBQUlELE9BTEQsTUFLTyxJQUFJLFlBQUosRUFBa0I7QUFDdkIsaUJBQVMsS0FBVCxHQUFpQixZQUFqQjtBQUNEO0FBQ0Q7QUFDQTtBQUNELEtBaEJEOztBQWtCQTtBQUNBLFNBQUssRUFBTCxDQUFRLGlCQUFPLFVBQWYsRUFBMkIsWUFBTTtBQUMvQixlQUFTLEtBQVQsR0FBaUIsSUFBakI7QUFDRCxLQUZEOztBQUlBLFNBQUssRUFBTCxDQUFRLGlCQUFPLEtBQWYsRUFBc0IsVUFBVSxHQUFWLEVBQWU7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsVUFBSSxJQUFJLFFBQUosSUFBZ0IsSUFBSSxRQUFKLEVBQWhCLElBQWtDLFFBQVEsd0JBQTlDLEVBQXdFO0FBQ3RFO0FBQ0QsT0FGRCxNQUVPLElBQUksSUFBSSxXQUFKLElBQW1CLElBQUksV0FBSixFQUFuQixJQUF3QyxRQUFRLHdCQUFwRCxFQUE4RTtBQUNuRjtBQUNEO0FBQ0YsS0FURDs7QUFXQSxTQUFLLEVBQUwsQ0FBUSxpQkFBTyxLQUFmLEVBQXNCLFlBQVk7QUFDaEM7QUFDRCxLQUZEO0FBR0QsR0FuRkQ7O0FBcUZBLFdBQVMsZ0JBQVQsR0FBNkI7QUFDM0IsUUFBTSxlQUFlLEtBQUssZ0JBQUwsRUFBckI7QUFDQSwwQkFBTyxZQUFQLEVBQXFCLElBQXJCO0FBQ0Q7O0FBRUQsV0FBUyw0QkFBVCxHQUF5QztBQUN2QyxRQUFNLGVBQWUsVUFBVSxlQUFWLEVBQXJCO0FBQ0EsaUJBQWEsZ0JBQWIsQ0FBOEIsT0FBOUIsRUFBdUMsS0FBSyxXQUFMLENBQWlCLElBQWpCLENBQXNCLElBQXRCLENBQXZDO0FBQ0Q7O0FBRUQsT0FBSyxXQUFMLEdBQW1CLFVBQUMsQ0FBRCxFQUFPO0FBQ3hCLFNBQUssRUFBRSxjQUFGLEVBQUw7O0FBRUE7QUFDQTtBQUNBLFFBQUksVUFBVSxVQUFWLEVBQUosRUFBNEI7QUFDMUIsZ0JBQVUsU0FBVixDQUNFLFNBREYsRUFFRSxZQUFZLFlBQVosQ0FBeUIsUUFBekIsQ0FGRixFQUdFLFlBQVksWUFBWixDQUF5QixRQUF6QixDQUhGO0FBS0Q7O0FBRUQsV0FBTyxLQUFQLENBYndCLENBYVg7QUFDZCxHQWREOztBQWdCQSxPQUFLLGlCQUFMLEdBQXlCLFlBQU07QUFDN0IsUUFBTSxnQkFBZ0Isa0JBQXRCOztBQUVBLFNBQUssSUFBSSxJQUFJLENBQVIsRUFBVyxNQUFNLGNBQWMsTUFBcEMsRUFBNEMsSUFBSSxHQUFoRCxFQUFxRCxHQUFyRCxFQUEwRDtBQUN4RCxVQUFJLENBQUMsY0FBYyxDQUFkLEVBQWlCLFFBQWpCLENBQTBCLEtBQS9CLEVBQXNDO0FBQ3BDLGVBQU8sY0FBYyxDQUFkLENBQVA7QUFDRDtBQUNGOztBQUVELFFBQU0saUJBQWlCLG1CQUF2Qjs7QUFFQSxTQUFLLElBQUksSUFBSSxDQUFSLEVBQVcsT0FBTyxlQUFlLE1BQXRDLEVBQThDLElBQUksSUFBbEQsRUFBd0QsR0FBeEQsRUFBNkQ7QUFDM0QsVUFBSSxDQUFDLGVBQWUsQ0FBZixFQUFrQixRQUFsQixDQUEyQixLQUFoQyxFQUF1QztBQUNyQyxlQUFPLGVBQWUsQ0FBZixDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxXQUFPLElBQVA7QUFDRCxHQWxCRDs7QUFvQkEsT0FBSyxRQUFMLEdBQWdCLFlBQVk7QUFDMUI7QUFDQSxpQ0FBNkIsSUFBN0I7O0FBRUEsUUFBTSxjQUFjLFlBQVksYUFBWixFQUFwQjs7QUFFQSxpQ0FBNkIsS0FBN0I7O0FBRUEsV0FBTyxXQUFQO0FBQ0QsR0FURDs7QUFXQSxPQUFLLGdCQUFMLEdBQXdCLFlBQVk7QUFDbEMsV0FBTyxZQUFZLGFBQVosQ0FBMEIsaUJBQTFCLENBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssSUFBTCxHQUFZLFlBQVk7QUFDdEIsbUJBQWUsc0JBQU8sV0FBUCxFQUFvQixJQUFwQixDQUFmO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLElBQUwsR0FBWSxZQUFZO0FBQ3RCLG1CQUFlLHNCQUFPLFdBQVAsRUFBb0IsS0FBcEIsQ0FBZjtBQUNELEdBRkQ7QUFHRCxDQXBPRDs7QUFzT0EsZUFBSyxRQUFMLENBQWMsSUFBZDs7a0JBRWUsSTs7Ozs7Ozs7O0FDaFBmOzs7Ozs7a0JBRWU7QUFDYixnQkFBYyxzQkFBVSxPQUFWLEVBQW1CO0FBQy9CLFFBQUksZUFBZSxRQUFRLEtBQVIsSUFBaUIsUUFBUSxLQUFSLENBQWMsT0FBbEQ7O0FBRUEsWUFBUSxnQkFBUixHQUEyQixZQUFZO0FBQ3JDLGFBQU8sS0FBSyxLQUFMLENBQVcsTUFBWCxJQUFxQixLQUFLLEtBQUwsQ0FBVyxNQUFYLEtBQXNCLE1BQWxEO0FBQ0QsS0FGRDs7QUFJQSxZQUFRLGVBQVIsR0FBMEIsWUFBWTtBQUNwQyxhQUFPLEtBQUssS0FBTCxDQUFXLEtBQVgsSUFBb0IsS0FBSyxLQUFMLENBQVcsS0FBWCxLQUFxQixNQUFoRDtBQUNELEtBRkQ7O0FBSUEsWUFBUSxtQkFBUixHQUE4QixZQUFZO0FBQ3hDLGFBQU8sS0FBSyxlQUFMLE1BQTBCLEtBQUssZ0JBQUwsRUFBakM7QUFDRCxLQUZEOztBQUlBLFlBQVEsb0JBQVIsR0FBK0IsWUFBWTtBQUN6QyxhQUFPLEtBQUssZUFBTCxNQUEwQixLQUFLLGdCQUFMLEVBQWpDO0FBQ0QsS0FGRDs7QUFJQSxZQUFRLFFBQVIsR0FBbUIsWUFBWTtBQUM3QixVQUFJLFFBQVEsQ0FBWixDQUQ2QixDQUNmOztBQUVkO0FBQ0EsVUFBTSxxQkFBcUIsS0FBSyxXQUFMLElBQW9CLEtBQUssVUFBcEQ7O0FBRUEsVUFBSSxLQUFLLG9CQUFMLEVBQUosRUFBaUM7QUFDL0IsWUFBSSxrQkFBSixFQUF3QjtBQUN0QjtBQUNBLGNBQUksS0FBSyxXQUFMLEdBQW1CLEtBQUssS0FBTCxDQUFXLE1BQTlCLElBQ0EsS0FBSyxVQUFMLEdBQWtCLEtBQUssS0FBTCxDQUFXLEtBRGpDLEVBQ3dDO0FBQ3RDLG9CQUFRLEtBQUssV0FBTCxHQUFtQixLQUFLLFVBQWhDO0FBQ0QsV0FIRCxNQUdPO0FBQ0wsb0JBQVEsS0FBSyxLQUFMLENBQVcsTUFBWCxHQUFvQixLQUFLLEtBQUwsQ0FBVyxLQUF2QztBQUNEO0FBQ0YsU0FSRCxNQVFPO0FBQ0wsa0JBQVEsS0FBSyxLQUFMLENBQVcsTUFBWCxHQUFvQixLQUFLLEtBQUwsQ0FBVyxLQUF2QztBQUNEO0FBQ0YsT0FaRCxNQVlPLElBQUksa0JBQUosRUFBd0I7QUFDN0IsZ0JBQVEsS0FBSyxXQUFMLEdBQW1CLEtBQUssVUFBaEM7QUFDRDs7QUFFRCxhQUFPLEtBQVA7QUFDRCxLQXZCRDs7QUF5QkEsWUFBUSxjQUFSLEdBQXlCLFlBQVk7QUFDbkMsYUFBTyxZQUFQO0FBQ0QsS0FGRDs7QUFJQSxZQUFRLGVBQVIsR0FBMEIsVUFBVSxPQUFWLEVBQW1CO0FBQzNDLHFCQUFlLE9BQWY7QUFDRCxLQUZEOztBQUlBLFlBQVEsa0JBQVIsR0FBNkIsWUFBWTtBQUN2QyxhQUFPLEtBQUssZUFBTCxJQUF3QixLQUFLLFdBQXBDO0FBQ0QsS0FGRDtBQUdELEdBeERZOztBQTBEYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQU8sZUFBVSxjQUFWLEVBQTBCLFVBQTFCLEVBQXNDO0FBQzNDLFFBQU0sVUFBVSx5QkFBVSxjQUFWLEVBQTBCLFVBQTFCLENBQWhCOztBQUVBLFNBQUssWUFBTCxDQUFrQixPQUFsQjs7QUFFQSxXQUFPLE9BQVA7QUFDRDtBQXBFWSxDLEVBSGY7Ozs7Ozs7OztBQ0FBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBTSxVQUFVLFNBQVYsT0FBVSxDQUFVLFNBQVYsRUFBcUIsT0FBckIsRUFBOEI7QUFDNUMseUJBQWEsSUFBYixDQUFrQixJQUFsQixFQUF3QixPQUF4QixFQUFpQyxTQUFqQzs7QUFFQSxNQUFNLE9BQU8sSUFBYjs7QUFFQTtBQUNBLE1BQUksU0FBUyxxQkFBVyxJQUFYLEVBQWlCLE9BQWpCLENBQWI7O0FBRUEsTUFBTSxXQUFXLHVCQUFhLElBQWIsRUFBbUIsTUFBbkIsRUFBMkIsT0FBM0IsQ0FBakI7QUFDQSxNQUFNLGtCQUFrQiw4QkFBb0IsSUFBcEIsRUFBMEIsT0FBMUIsQ0FBeEI7O0FBRUEsTUFBTSxXQUFXLHVCQUFhLElBQWIsRUFBbUIsT0FBbkIsQ0FBakI7O0FBRUEsTUFBTSxRQUFRLFFBQVEsS0FBdEI7O0FBRUEsTUFBSSxjQUFKO0FBQ0EsTUFBSSxLQUFKOztBQUVBLFdBQVMsZ0JBQVQsR0FBNkI7QUFDM0IsUUFBSSxrQkFBa0IsVUFBVSxhQUFWLENBQXdCLFVBQXhCLENBQXRCOztBQUVBLFFBQUksQ0FBQyxlQUFMLEVBQXNCO0FBQ3BCLHdCQUFrQiwyQkFBRSxVQUFGLENBQWxCO0FBQ0Esc0JBQWdCLFNBQWhCLEdBQTRCLDBCQUE1Qjs7QUFFQSxxQkFBZSxXQUFmLENBQTJCLGVBQTNCO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTLGFBQVQsR0FBMEI7QUFDeEIsVUFBTSwwQkFBTjs7QUFFQTs7QUFFQSxRQUFJLENBQUMsUUFBUSxVQUFiLEVBQXlCO0FBQ3ZCLGVBQVMsS0FBVDtBQUNBLHNCQUFnQixLQUFoQjtBQUNEOztBQUVELFdBQU8sS0FBUDs7QUFFQSxVQUFNLGlCQUFOO0FBQ0Q7O0FBRUQsV0FBUyxVQUFULEdBQXVCO0FBQ3JCLFFBQUksQ0FBQyxRQUFRLFVBQWIsRUFBeUI7QUFDdkIsWUFBTSx1QkFBTjs7QUFFQSxXQUNHLEVBREgsQ0FDTSxpQkFBTyxnQkFEYixFQUMrQixZQUFZO0FBQ3ZDLGdCQUFRLElBQVI7QUFDQSxhQUFLLFVBQUw7QUFDQSxrQkFBVSxVQUFWLENBQXFCLEtBQXJCO0FBQ0QsT0FMSCxFQU1HLEVBTkgsQ0FNTSxpQkFBTyxPQU5iLEVBTXNCLFlBQU07QUFDeEIsYUFBSyxVQUFMO0FBQ0QsT0FSSCxFQVNHLEVBVEgsQ0FTTSxpQkFBTyxRQVRiLEVBU3VCLFVBQVUsZUFBVixFQUEyQjtBQUM5QyxZQUFJLENBQUMsZ0JBQWdCLFFBQWpCLElBQTZCLENBQUMsUUFBUSx3QkFBMUMsRUFBb0U7QUFDbEU7QUFDQTtBQUNBO0FBQ0QsU0FKRCxNQUlPO0FBQ0wsb0JBQVUsV0FBVixDQUFzQixJQUF0QjtBQUNEO0FBQ0YsT0FqQkgsRUFrQkcsRUFsQkgsQ0FrQk0saUJBQU8sYUFsQmIsRUFrQjRCLFlBQVk7QUFDcEMsa0JBQVUsUUFBVixDQUFtQixJQUFuQjtBQUNELE9BcEJILEVBcUJHLEVBckJILENBcUJNLGlCQUFPLGdCQXJCYixFQXFCK0IsWUFBWTtBQUN2QztBQUNELE9BdkJILEVBd0JHLEVBeEJILENBd0JNLGlCQUFPLEtBeEJiLEVBd0JvQixVQUFVLEdBQVYsRUFBZTtBQUMvQixZQUFJLElBQUksZ0JBQUosSUFBd0IsSUFBSSxnQkFBSixFQUE1QixFQUFvRDtBQUNsRDtBQUNEO0FBQ0YsT0E1Qkg7QUE2QkQ7QUFDRjs7QUFFRCxXQUFTLGlCQUFULEdBQThCO0FBQzVCLG1CQUFlLEtBQWYsQ0FBcUIsS0FBckIsR0FBNkIsS0FBSyxnQkFBTCxDQUFzQixJQUF0QixJQUE4QixJQUEzRDtBQUNBLG1CQUFlLEtBQWYsQ0FBcUIsTUFBckIsR0FBOEIsS0FBSyxpQkFBTCxDQUF1QixJQUF2QixJQUErQixJQUE3RDtBQUNEOztBQUVELFdBQVMsZ0JBQVQsR0FBNkI7QUFDM0IsbUJBQWUsS0FBZixDQUFxQixLQUFyQixHQUE2QixNQUE3QjtBQUNBLG1CQUFlLEtBQWYsQ0FBcUIsTUFBckIsR0FBOEIsTUFBOUI7QUFDRDs7QUFFRCxPQUFLLFFBQUwsR0FBZ0IsWUFBWTtBQUMxQixRQUFJLGVBQWUsV0FBbkIsRUFBZ0M7QUFDOUI7QUFDQSxhQUFPLGVBQWUsWUFBZixHQUE4QixlQUFlLFdBQXBEO0FBQ0QsS0FIRCxNQUdPO0FBQ0wsYUFBTyxDQUFQO0FBQ0Q7QUFDRixHQVBEOztBQVNBLFdBQVMsWUFBVCxHQUF5QjtBQUN2QixXQUFPLENBQUMsS0FBSyxXQUFMLEVBQUQsSUFBdUIsQ0FBQyxPQUFPLE9BQVAsRUFBeEIsSUFBNEMsQ0FBQyxLQUFLLGNBQUwsRUFBcEQ7QUFDRDs7QUFFRCxPQUFLLGNBQUwsR0FBc0IsWUFBWTtBQUNoQyxXQUFPLGdCQUFnQixjQUFoQixFQUFQO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLEtBQUwsR0FBYSxZQUFZO0FBQ3ZCLHFCQUFpQixVQUFVLGFBQVYsQ0FBd0IsTUFBTSxRQUFRLFNBQVIsQ0FBa0IsWUFBaEQsQ0FBakI7O0FBRUEsUUFBSSxDQUFDLGNBQUwsRUFBcUI7QUFDbkIsdUJBQWlCLDJCQUFFLFNBQVMsUUFBUSxTQUFSLENBQWtCLFlBQTdCLENBQWpCOztBQUVBLFVBQU0saUJBQWlCLFVBQVUsYUFBVixDQUF3QixNQUFNLFFBQVEsU0FBUixDQUFrQixZQUFoRCxDQUF2Qjs7QUFFQTtBQUNBO0FBQ0EsVUFBSSxrQkFBa0IsQ0FBQyxVQUFVLGtCQUFWLENBQTZCLGNBQTdCLENBQXZCLEVBQXFFO0FBQ25FLGtCQUFVLFlBQVYsQ0FBdUIsY0FBdkIsRUFBdUMsY0FBdkM7QUFDRCxPQUZELE1BRU87QUFDTCxrQkFBVSxXQUFWLENBQXNCLGNBQXRCO0FBQ0Q7QUFDRjs7QUFFRDtBQUNBOztBQUVBLG1CQUFlLFNBQWYsQ0FBeUIsR0FBekIsQ0FBNkIsU0FBN0I7O0FBRUE7O0FBRUEsS0FBQyxLQUFELElBQVUsWUFBVjtBQUNBOztBQUVBO0FBQ0EsU0FBSyxVQUFMLEdBQWtCLGVBQWUsVUFBakM7O0FBRUEsWUFBUSxJQUFSO0FBQ0QsR0EvQkQ7O0FBaUNBLE9BQUssYUFBTCxHQUFxQixVQUFVLFFBQVYsRUFBb0I7QUFDdkMsV0FBTyxrQkFBa0IsZUFBZSxhQUFmLENBQTZCLFFBQTdCLENBQXpCO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLFdBQUwsR0FBbUIsVUFBVSxLQUFWLEVBQWlCO0FBQ2xDLHNCQUFrQixlQUFlLFdBQWYsQ0FBMkIsS0FBM0IsQ0FBbEI7QUFDRCxHQUZEOztBQUlBLE9BQUssV0FBTCxHQUFtQixVQUFVLEtBQVYsRUFBaUI7QUFDbEMsbUJBQWUsV0FBZixDQUEyQixLQUEzQjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxLQUFMLEdBQWEsWUFBWTtBQUN2QixTQUFLLFVBQUw7QUFDQSxhQUFTLEtBQVQ7QUFDRCxHQUhEOztBQUtBLE9BQUssWUFBTCxHQUFvQixZQUFZO0FBQzlCLGNBQVUsWUFBVjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxVQUFMLEdBQWtCLFlBQVk7QUFDNUIsY0FBVSxVQUFWO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLElBQUwsR0FBWSxVQUFVLE1BQVYsRUFBa0I7QUFDNUIsYUFBUyxJQUFULENBQWMsTUFBZDtBQUNBLG9CQUFnQixTQUFoQjtBQUNELEdBSEQ7O0FBS0EsT0FBSyxJQUFMLEdBQVksVUFBVSxNQUFWLEVBQWtCLEVBQWxCLEVBQXNCO0FBQ2hDLFFBQUksQ0FBQyxFQUFELElBQU8sTUFBWCxFQUFtQjtBQUNqQixXQUFLLE1BQUw7QUFDQSxlQUFTLEVBQVQ7QUFDRDs7QUFFRCxXQUFPLElBQVA7QUFDQSxhQUFTLElBQVQ7O0FBRUEsUUFBSSxPQUFPLFVBQVgsRUFBdUI7QUFDckIsZUFBUyxJQUFUO0FBQ0EsWUFBTSxJQUFOO0FBQ0QsS0FIRCxNQUdPO0FBQ0wsZUFBUyxJQUFULENBQWMsRUFBZDtBQUNEO0FBQ0YsR0FmRDs7QUFpQkEsT0FBSyxXQUFMLEdBQW1CLFlBQVk7QUFDN0IsU0FBSyxJQUFMLENBQVUsWUFBWTtBQUNwQixXQUFLLElBQUwsQ0FBVSxpQkFBTyxnQkFBakIsRUFBbUMsWUFBWTtBQUM3QyxhQUFLLE1BQUw7QUFDRCxPQUZEO0FBR0QsS0FKRDtBQUtELEdBTkQ7O0FBUUEsT0FBSyxNQUFMLEdBQWMsVUFBVSxDQUFWLEVBQWE7QUFDekIsUUFBSTtBQUNGLGVBQVMsTUFBVCxDQUFnQixDQUFoQjtBQUNBLHNCQUFnQixNQUFoQixDQUF1QixDQUF2QjtBQUNBLGFBQU8sTUFBUCxDQUFjLENBQWQ7O0FBRUEsY0FBUSxLQUFSO0FBQ0QsS0FORCxDQU1FLE9BQU8sR0FBUCxFQUFZO0FBQ1osV0FBSyxJQUFMLENBQVUsaUJBQU8sS0FBakIsRUFBd0IsR0FBeEI7QUFDRDtBQUNGLEdBVkQ7O0FBWUEsT0FBSyxXQUFMLEdBQW1CLFlBQVk7QUFDN0IsV0FBTyxTQUFTLFNBQVQsRUFBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxhQUFMLEdBQXFCLFlBQVk7QUFDL0IsV0FBTyxPQUFPLE9BQVAsRUFBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxLQUFMLEdBQWEsVUFBVSxNQUFWLEVBQWtCO0FBQzdCLGFBQVMsS0FBVCxDQUFlLE1BQWY7QUFDQSxvQkFBZ0IsU0FBaEI7QUFDRCxHQUhEOztBQUtBLE9BQUssTUFBTCxHQUFjLFlBQVk7QUFDeEIsUUFBSSxnQkFBZ0IsY0FBaEIsRUFBSixFQUFzQztBQUNwQyxzQkFBZ0IsZUFBaEI7QUFDRCxLQUZELE1BRU87QUFDTCxlQUFTLE1BQVQ7QUFDRDs7QUFFRCxvQkFBZ0IsU0FBaEI7QUFDRCxHQVJEOztBQVVBLE9BQUssYUFBTCxHQUFxQixZQUFZO0FBQy9CLFFBQUksYUFBYSxJQUFiLENBQWtCLElBQWxCLENBQUosRUFBNkI7QUFDM0IsVUFBSSxLQUFLLFdBQUwsRUFBSixFQUF3QjtBQUN0QixhQUFLLEtBQUw7QUFDRCxPQUZELE1BRU8sSUFBSSxTQUFTLFFBQVQsRUFBSixFQUF5QjtBQUM5QixhQUFLLE1BQUw7QUFDRCxPQUZNLE1BRUEsSUFBSSxTQUFTLE9BQVQsRUFBSixFQUF3QjtBQUM3QixhQUFLLE1BQUw7QUFDRDtBQUNGO0FBQ0YsR0FWRDs7QUFZQSxPQUFLLFlBQUwsR0FBb0IsWUFBWTtBQUM5QixRQUFJLGNBQUosRUFBb0I7QUFDbEIsVUFBSSxLQUFLLFdBQUwsRUFBSixFQUF3QjtBQUN0QixhQUFLLElBQUw7QUFDRCxPQUZELE1BRU8sSUFBSSxTQUFTLE9BQVQsRUFBSixFQUF3QjtBQUM3QixhQUFLLE1BQUw7QUFDRDtBQUNGO0FBQ0YsR0FSRDs7QUFVQSxPQUFLLE1BQUwsR0FBYyxZQUFZO0FBQ3hCLFFBQUksUUFBUSxLQUFSLENBQWMsU0FBbEIsRUFBNkI7QUFDM0IsV0FBSyxJQUFMLENBQVUsaUJBQU8sU0FBakI7QUFDQSxzQkFBZ0IsY0FBaEIsQ0FBK0IsU0FBUyxNQUFULENBQWdCLElBQWhCLENBQXFCLFFBQXJCLENBQS9CO0FBQ0QsS0FIRCxNQUdPO0FBQUUsZUFBUyxNQUFUO0FBQW1CO0FBQzdCLEdBTEQ7O0FBT0EsT0FBSyxXQUFMLEdBQW1CLFlBQVk7QUFDN0IsV0FBTyxRQUFQO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLFNBQUwsR0FBaUIsWUFBWTtBQUMzQixXQUFPLE1BQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssUUFBTCxHQUFnQixZQUFZO0FBQzFCLFdBQU8sU0FBUyxRQUFULE1BQXVCLEtBQUssYUFBTCxFQUE5QjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxpQkFBTCxHQUF5QixZQUFZO0FBQ25DLFdBQU8sU0FBUyxpQkFBVCxFQUFQO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLGtCQUFMLEdBQTBCLFlBQVk7QUFDcEMsV0FBTyxTQUFTLGtCQUFULEVBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssUUFBTCxHQUFnQixZQUFZO0FBQzFCLFdBQU8sU0FBUyxRQUFULEVBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssS0FBTCxHQUFhLFVBQVUsR0FBVixFQUFlO0FBQzFCLGFBQVMsS0FBVCxDQUFlLEdBQWY7QUFDRCxHQUZEOztBQUlBLE9BQUssSUFBTCxHQUFZLFlBQVk7QUFDdEIsUUFBSSxjQUFKLEVBQW9CO0FBQ2xCLDRCQUFPLGNBQVAsRUFBdUIsSUFBdkI7QUFDQSxXQUFLLElBQUwsQ0FBVSxpQkFBTyxJQUFqQjtBQUNEO0FBQ0YsR0FMRDs7QUFPQSxPQUFLLFFBQUwsR0FBZ0IsWUFBWTtBQUMxQixRQUFJLENBQUMsS0FBTCxFQUFZO0FBQ1YsYUFBTyxJQUFQO0FBQ0QsS0FGRCxNQUVPLElBQUksY0FBSixFQUFvQjtBQUN6QixhQUFPLHNCQUFPLGNBQVAsQ0FBUDtBQUNEO0FBQ0YsR0FORDs7QUFRQSxPQUFLLFdBQUwsR0FBbUIsWUFBWTtBQUM3QixzQkFBa0Isc0JBQU8sY0FBUCxFQUF1QixLQUF2QixDQUFsQjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxJQUFMLEdBQVksWUFBWTtBQUN0QixLQUFDLEtBQUssYUFBTCxFQUFELElBQXlCLGNBQXpCLElBQTJDLFNBQVMsS0FBVCxFQUEzQztBQUNBLFNBQUssV0FBTDtBQUNELEdBSEQ7O0FBS0EsT0FBSyxjQUFMLEdBQXNCLFlBQVk7QUFDaEMsS0FBQyxLQUFLLGFBQUwsRUFBRCxJQUF5QixPQUFPLElBQVAsRUFBekI7O0FBRUEsU0FBSyxJQUFMO0FBQ0EsYUFBUyxJQUFUO0FBQ0EsYUFBUyxJQUFUO0FBQ0QsR0FORDs7QUFRQSxPQUFLLGtCQUFMLEdBQTBCLFlBQVk7QUFDcEMsV0FBTyxTQUFTLFVBQVQsRUFBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxZQUFMLEdBQW9CLFlBQVk7QUFDOUIsV0FBTyxTQUFTLFlBQVQsRUFBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxnQkFBTCxHQUF3QixVQUFVLFVBQVYsRUFBc0I7QUFDNUMsV0FBTyxTQUFTLGdCQUFULENBQTBCLFVBQTFCLENBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssaUJBQUwsR0FBeUIsVUFBVSxVQUFWLEVBQXNCO0FBQzdDLFdBQU8sU0FBUyxpQkFBVCxDQUEyQixVQUEzQixDQUFQO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLFVBQUwsR0FBa0IsVUFBVSxLQUFWLEVBQWlCO0FBQ2pDLFdBQU8sVUFBVSxVQUFWLENBQXFCLEtBQXJCLEVBQTRCLE9BQTVCLENBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssV0FBTCxHQUFtQixVQUFVLE1BQVYsRUFBa0I7QUFDbkMsV0FBTyxVQUFVLFdBQVYsQ0FBc0IsTUFBdEIsQ0FBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxjQUFMLEdBQXNCLFVBQVUsT0FBVixFQUFtQjtBQUN2QyxXQUFPLFVBQVUsY0FBVixDQUF5QixPQUF6QixDQUFQO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLGVBQUwsR0FBdUIsVUFBVSxPQUFWLEVBQW1CO0FBQ3hDLFdBQU8sVUFBVSxlQUFWLENBQTBCLE9BQTFCLENBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssU0FBTCxHQUFpQixZQUFZO0FBQzNCLFdBQU8sTUFBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxxQkFBTCxHQUE2QixZQUFZO0FBQ3ZDO0FBQ0EsV0FBTyxrQkFBa0IsZUFBZSxxQkFBZixFQUF6QjtBQUNELEdBSEQ7O0FBS0EsT0FBSyxVQUFMLEdBQWtCLFVBQVUsV0FBVixFQUF1QjtBQUN2QyxvQkFBZ0IsVUFBaEIsQ0FBMkIsV0FBM0I7QUFDRCxHQUZEOztBQUlBLE9BQUssZUFBTCxHQUF1QixZQUFZO0FBQ2pDLFdBQU8sWUFBWSxTQUFTLE9BQVQsRUFBbkI7QUFDRCxHQUZEOztBQUlBLE9BQUssYUFBTCxHQUFxQixPQUFPLE9BQVAsQ0FBZSxJQUFmLENBQW9CLE1BQXBCLENBQXJCO0FBQ0EsT0FBSyxVQUFMLEdBQWtCLE9BQU8sSUFBUCxDQUFZLElBQVosQ0FBaUIsTUFBakIsQ0FBbEI7QUFDQSxPQUFLLFlBQUwsR0FBb0IsU0FBUyxJQUFULENBQWMsSUFBZCxDQUFtQixRQUFuQixDQUFwQjtBQUNBLE9BQUssV0FBTCxHQUFtQixTQUFTLFdBQVQsQ0FBcUIsSUFBckIsQ0FBMEIsUUFBMUIsQ0FBbkI7QUFDQSxPQUFLLGlCQUFMLEdBQXlCLFNBQVMsaUJBQVQsQ0FBMkIsSUFBM0IsQ0FBZ0MsUUFBaEMsQ0FBekI7QUFDQSxPQUFLLFdBQUwsR0FBbUIsU0FBUyxXQUFULENBQXFCLElBQXJCLENBQTBCLFFBQTFCLENBQW5CO0FBQ0QsQ0F0WEQ7O0FBd1hBLGVBQUssUUFBTCxDQUFjLE9BQWQ7O2tCQUVlLE87Ozs7Ozs7OztrQkNuWUEsVUFBVSxPQUFWLEVBQW1CLE9BQW5CLEVBQTRCO0FBQ3pDLE1BQU0sT0FBTyxJQUFiOztBQUVBLE1BQUksZ0JBQUo7QUFDQSxNQUFJLFVBQUo7QUFDQSxNQUFJLFNBQUo7QUFDQSxNQUFJLE1BQUo7O0FBRUEsV0FBUyxJQUFULENBQWUsRUFBZixFQUFtQjtBQUNqQixTQUFLLE1BQUw7QUFDQSxTQUFLLElBQUw7O0FBRUE7QUFDQSxlQUFXLFlBQVk7QUFDckI7QUFDRCxLQUZELEVBRUcsQ0FGSDtBQUdEOztBQUVELFdBQVMsYUFBVCxDQUF3QixFQUF4QixFQUE0QjtBQUMxQixRQUFJLENBQUMsTUFBTCxFQUFhO0FBQ1gsY0FBUSxLQUFSLENBQWMsV0FBZCxFQUEyQixTQUEzQjtBQUNBOztBQUVBLFVBQUksWUFBWSxDQUFoQixFQUFtQjtBQUNqQixhQUFLLEVBQUw7QUFDRCxPQUZELE1BRU87QUFDTCx5QkFBaUIsU0FBakIsR0FBNkIsU0FBN0I7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsT0FBSyxLQUFMLEdBQWEsVUFBVSxFQUFWLEVBQWM7QUFDekIscUJBQWlCLFNBQWpCLEdBQTZCLFlBQVksUUFBUSxLQUFSLENBQWMsU0FBdkQ7O0FBRUEsU0FBSyxJQUFMOztBQUVBLGlCQUFhLFlBQVksY0FBYyxJQUFkLENBQW1CLElBQW5CLEVBQXlCLEVBQXpCLENBQVosRUFBMEMsR0FBMUMsQ0FBYjtBQUNELEdBTkQ7O0FBUUEsT0FBSyxLQUFMLEdBQWEsWUFBWTtBQUN2QixhQUFTLElBQVQ7QUFDRCxHQUZEOztBQUlBLE9BQUssTUFBTCxHQUFjLFlBQVk7QUFDeEIsYUFBUyxLQUFUO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLEtBQUwsR0FBYSxZQUFZO0FBQ3ZCLHVCQUFtQixRQUFRLGFBQVIsQ0FBc0IsWUFBdEIsQ0FBbkI7O0FBRUEsUUFBSSxDQUFDLGdCQUFMLEVBQXVCO0FBQ3JCLHlCQUFtQiwyQkFBRSxhQUFGLENBQW5COztBQUVBLFdBQUssSUFBTDs7QUFFQSxjQUFRLFdBQVIsQ0FBb0IsZ0JBQXBCO0FBQ0QsS0FORCxNQU1PO0FBQ0wsV0FBSyxJQUFMO0FBQ0Q7QUFDRixHQVpEOztBQWNBLE9BQUssSUFBTCxHQUFZLFlBQVk7QUFDdEIsMEJBQU8sZ0JBQVAsRUFBeUIsS0FBekI7QUFDRCxHQUZEOztBQUlBLE9BQUssY0FBTCxHQUFzQixZQUFZO0FBQ2hDLFdBQU8sQ0FBQyxDQUFDLFVBQVQ7QUFDRCxHQUZEOztBQUlBLE9BQUssTUFBTCxHQUFjLFlBQVk7QUFDeEIsa0JBQWMsVUFBZDtBQUNBLGFBQVMsS0FBVDtBQUNBLGlCQUFhLElBQWI7QUFDRCxHQUpEOztBQU1BLE9BQUssSUFBTCxHQUFZLFlBQVk7QUFDdEIsMEJBQU8sZ0JBQVAsRUFBeUIsSUFBekI7QUFDQSxTQUFLLE1BQUw7QUFDRCxHQUhEO0FBSUQsQzs7QUFsRkQ7Ozs7QUFDQTs7Ozs7Ozs7Ozs7OztrQkNJZSxVQUFVLE9BQVYsRUFBbUIsT0FBbkIsRUFBNEI7QUFDekMsTUFBSSxDQUFDLFFBQVEsSUFBUixDQUFhLFlBQWxCLEVBQWdDO0FBQzlCLFVBQU0seUJBQWUsTUFBZixDQUFzQiwrQkFBdEIsRUFBdUQsT0FBdkQsQ0FBTjtBQUNEOztBQUVELE1BQUksa0JBQUo7QUFDQSxNQUFJLG1CQUFKO0FBQ0EsTUFBSSxpQkFBSjs7QUFFQSxXQUFTLGFBQVQsR0FBMEI7QUFDeEIsV0FBTyxRQUFRLElBQVIsQ0FBYSxVQUFwQjtBQUNEOztBQUVELE9BQUssS0FBTCxHQUFhLFlBQVk7QUFDdkIseUJBQXFCLFFBQVEsYUFBUixDQUFzQixTQUF0QixDQUFyQjtBQUNBLDBCQUFzQixRQUFRLGFBQVIsQ0FBc0IsZUFBdEIsQ0FBdEI7O0FBRUEsUUFBSSxDQUFDLG1CQUFMLEVBQTBCO0FBQ3hCLDJCQUFxQiwyQkFBRSxZQUFGLENBQXJCO0FBQ0EsNEJBQXNCLDJCQUFFLGdCQUFGLENBQXRCOztBQUVBLFdBQUssSUFBTDs7QUFFQSwwQkFBb0IsU0FBcEIsR0FBZ0MsUUFBUSxJQUFSLENBQWEsWUFBN0M7O0FBRUEseUJBQW1CLFdBQW5CLENBQStCLG1CQUEvQjs7QUFFQSxVQUFJLGVBQUosRUFBcUI7QUFDbkIsNEJBQW9CLFFBQVEsYUFBUixDQUFzQixhQUF0QixDQUFwQjtBQUNBLDRCQUFvQiwyQkFBRSxjQUFGLENBQXBCO0FBQ0EsMEJBQWtCLFNBQWxCLEdBQThCLFFBQVEsSUFBUixDQUFhLFVBQTNDO0FBQ0EsMkJBQW1CLFdBQW5CLENBQStCLGlCQUEvQjtBQUNEOztBQUVELGNBQVEsV0FBUixDQUFvQixrQkFBcEI7QUFDRCxLQWxCRCxNQWtCTztBQUNMLFdBQUssSUFBTDs7QUFFQSwwQkFBb0IsU0FBcEIsR0FBZ0MsUUFBUSxJQUFSLENBQWEsWUFBN0M7O0FBRUEsVUFBSSxlQUFKLEVBQXFCO0FBQ25CLDBCQUFrQixTQUFsQixHQUE4QixRQUFRLElBQVIsQ0FBYSxVQUEzQztBQUNEO0FBQ0Y7QUFDRixHQS9CRDs7QUFpQ0EsT0FBSyxJQUFMLEdBQVksWUFBWTtBQUN0QiwwQkFBTyxrQkFBUCxFQUEyQixJQUEzQjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxJQUFMLEdBQVksWUFBWTtBQUN0QiwwQkFBTyxrQkFBUCxFQUEyQixLQUEzQjtBQUNELEdBRkQ7QUFHRCxDOztBQTFERDs7OztBQUNBOzs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7a0JDQWUsVUFBVSxPQUFWLEVBQW1CO0FBQ2hDLE1BQUksaUJBQUo7O0FBRUEsT0FBSyxLQUFMLEdBQWEsWUFBWTtBQUN2Qix3QkFBb0IsUUFBUSxhQUFSLENBQXNCLGFBQXRCLENBQXBCOztBQUVBLFFBQUksQ0FBQyxpQkFBTCxFQUF3QjtBQUN0QiwwQkFBb0IsMkJBQUUsY0FBRixDQUFwQjs7QUFFQSxXQUFLLElBQUw7O0FBRUEsY0FBUSxXQUFSLENBQW9CLGlCQUFwQjtBQUNELEtBTkQsTUFNTztBQUNMLFdBQUssSUFBTDtBQUNEO0FBQ0YsR0FaRDs7QUFjQSxPQUFLLElBQUwsR0FBWSxZQUFZO0FBQ3RCLFNBQUssSUFBTDtBQUNBLHNCQUFrQixTQUFsQixDQUE0QixNQUE1QixDQUFtQyxNQUFuQztBQUNBLHNCQUFrQixTQUFsQixDQUE0QixNQUE1QixDQUFtQyxNQUFuQztBQUNELEdBSkQ7O0FBTUEsT0FBSyxPQUFMLEdBQWUsWUFBWTtBQUN6QixzQkFBa0IsU0FBbEIsQ0FBNEIsR0FBNUIsQ0FBZ0MsTUFBaEM7QUFDRCxHQUZEOztBQUlBLE9BQUssT0FBTCxHQUFlLFlBQVk7QUFDekIsc0JBQWtCLFNBQWxCLENBQTRCLEdBQTVCLENBQWdDLE1BQWhDO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLElBQUwsR0FBWSxZQUFZO0FBQ3RCLDBCQUFPLGlCQUFQLEVBQTBCLElBQTFCO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLElBQUwsR0FBWSxZQUFZO0FBQ3RCLDBCQUFPLGlCQUFQLEVBQTBCLEtBQTFCO0FBQ0QsR0FGRDtBQUdELEM7O0FBekNEOzs7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7a0JDRWUsVUFBVSxPQUFWLEVBQW1CLFVBQW5CLEVBQStCLE9BQS9CLEVBQXdDO0FBQ3JELE1BQUksa0JBQUo7O0FBRUEsTUFBSSxlQUFlLEtBQW5CO0FBQ0EsTUFBSSxrQkFBa0IsS0FBdEI7O0FBRUEsTUFBSSxPQUFKO0FBQ0EsTUFBSSxTQUFKOztBQUVBLFdBQVMsR0FBVCxDQUFjLENBQWQsRUFBaUI7QUFDZixXQUFPLElBQUksRUFBSixHQUFTLE1BQU0sQ0FBZixHQUFtQixDQUExQjtBQUNEOztBQUVELFdBQVMsZ0JBQVQsQ0FBMkIsSUFBM0IsRUFBaUMsU0FBakMsRUFBNEM7QUFDMUMsV0FBTyxRQUFRLFFBQVEsS0FBUixDQUFjLFlBQWQsR0FBNkIsU0FBNUM7QUFDRDs7QUFFRCxXQUFTLE1BQVQsQ0FBaUIsSUFBakIsRUFBdUI7QUFDckIsUUFBSSxDQUFDLFlBQUQsSUFBaUIsaUJBQWlCLElBQWpCLEVBQXVCLEdBQXZCLENBQXJCLEVBQWtEO0FBQ2hELHFCQUFlLElBQWY7QUFDQSxhQUFPLElBQVA7QUFDRCxLQUhELE1BR087QUFDTCxhQUFPLEtBQVA7QUFDRDtBQUNGOztBQUVELFdBQVMsU0FBVCxDQUFvQixJQUFwQixFQUEwQjtBQUN4QixRQUFJLENBQUMsZUFBRCxJQUFvQixpQkFBaUIsSUFBakIsRUFBdUIsR0FBdkIsQ0FBeEIsRUFBcUQ7QUFDbkQsd0JBQWtCLElBQWxCO0FBQ0EsYUFBTyxJQUFQO0FBQ0QsS0FIRCxNQUdPO0FBQ0wsYUFBTyxLQUFQO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTLE9BQVQsR0FBb0I7QUFDbEIsdUJBQW1CLFNBQW5CLENBQTZCLEdBQTdCLENBQWlDLE1BQWpDO0FBQ0Q7O0FBRUQsV0FBUyxPQUFULEdBQW9CO0FBQ2xCLHVCQUFtQixTQUFuQixDQUE2QixHQUE3QixDQUFpQyxNQUFqQztBQUNEOztBQUVELE9BQUssS0FBTCxHQUFhLFVBQVUsSUFBVixFQUFnQjtBQUMzQixRQUFNLGVBQWUsb0JBQW9CLEtBQUssS0FBTCxDQUFXLEtBQUssV0FBTCxHQUFtQixHQUE5QixDQUF6Qzs7QUFFQTtBQUNBLFFBQUksaUJBQWlCLFNBQXJCLEVBQWdDO0FBQzlCLGtCQUFZLFlBQVo7QUFDQTtBQUNBLGtCQUFZLENBQVosSUFBaUIsUUFBUSxJQUFSLENBQWEsSUFBYixDQUFqQjtBQUNEO0FBQ0YsR0FURDs7QUFXQSxXQUFTLE1BQVQsR0FBbUI7QUFDakIsUUFBTSxPQUFPLFNBQVMsWUFBWSxFQUFyQixFQUF5QixFQUF6QixDQUFiO0FBQ0EsUUFBTSxPQUFPLFlBQVksT0FBTyxFQUFoQzs7QUFFQSxRQUFJLENBQUMsWUFBRCxJQUFpQixDQUFDLGVBQXRCLEVBQXVDO0FBQ3JDLFVBQU0sbUJBQW1CLFFBQVEsS0FBUixDQUFjLFlBQWQsR0FBNkIsU0FBdEQ7O0FBRUEsVUFBSSxPQUFPLGdCQUFQLENBQUosRUFBOEI7QUFDNUIsbUJBQVcsT0FBWDtBQUNBOztBQUVBLGdCQUFRLEtBQVIsQ0FBYyxrQkFBa0IsU0FBbEIsR0FBOEIsZ0JBQTVDO0FBQ0QsT0FMRCxNQUtPLElBQUksVUFBVSxnQkFBVixDQUFKLEVBQWlDO0FBQ3RDLG1CQUFXLE9BQVg7QUFDQTs7QUFFQSxnQkFBUSxLQUFSLENBQWMsa0JBQWtCLFNBQWxCLEdBQThCLGdCQUE1QztBQUNEO0FBQ0Y7O0FBRUQsdUJBQW1CLFNBQW5CLEdBQStCLE9BQU8sR0FBUCxHQUFhLElBQUksSUFBSixDQUE1QztBQUNEOztBQUVELFdBQVMsSUFBVCxHQUFpQjtBQUNmLDBCQUFPLGtCQUFQLEVBQTJCLElBQTNCO0FBQ0Q7O0FBRUQsV0FBUyxJQUFULEdBQWlCO0FBQ2YsdUJBQW1CLFNBQW5CLENBQTZCLE1BQTdCLENBQW9DLE1BQXBDO0FBQ0EsdUJBQW1CLFNBQW5CLENBQTZCLE1BQTdCLENBQW9DLE1BQXBDOztBQUVBLDBCQUFPLGtCQUFQLEVBQTJCLEtBQTNCO0FBQ0Q7O0FBRUQsV0FBUyxrQkFBVCxHQUErQjtBQUM3QixXQUFPLG9CQUFvQixTQUEzQjtBQUNEOztBQUVELFdBQVMsZUFBVCxHQUE0QjtBQUMxQixXQUFPLFFBQVEsS0FBUixDQUFjLFlBQXJCO0FBQ0Q7O0FBRUQsT0FBSyxLQUFMLEdBQWEsWUFBWTtBQUN2QixnQkFBWSxpQkFBWjtBQUNBLG1CQUFlLGtCQUFrQixLQUFqQztBQUNBLGNBQVUsSUFBVjs7QUFFQTs7QUFFQTtBQUNELEdBUkQ7O0FBVUEsT0FBSyxLQUFMLEdBQWEsWUFBWTtBQUN2QixlQUFXLElBQVg7QUFDRCxHQUZEOztBQUlBLE9BQUssTUFBTCxHQUFjLFlBQVk7QUFDeEIsZUFBVyxJQUFYO0FBQ0QsR0FGRDs7QUFJQSxXQUFTLFNBQVQsR0FBc0I7QUFDcEIsV0FBTyxjQUFjLElBQXJCO0FBQ0Q7O0FBRUQsT0FBSyxJQUFMLEdBQVksWUFBWTtBQUN0QixRQUFJLENBQUMsV0FBRCxJQUFnQixPQUFwQixFQUE2QjtBQUMzQixjQUFRLEtBQVIsQ0FBYyxxREFBcUQsb0JBQXJELEdBQTRFLFdBQTFGOztBQUVBO0FBQ0EsaUJBQVcsSUFBWDs7QUFFQSxrQkFBWSxJQUFaO0FBQ0EsZ0JBQVUsS0FBVjtBQUNEO0FBQ0YsR0FWRDs7QUFZQSxPQUFLLEtBQUwsR0FBYSxZQUFZO0FBQ3ZCLHlCQUFxQixRQUFRLGFBQVIsQ0FBc0IsY0FBdEIsQ0FBckI7O0FBRUEsUUFBSSxDQUFDLGtCQUFMLEVBQXlCO0FBQ3ZCLDJCQUFxQiwyQkFBRSxlQUFGLENBQXJCOztBQUVBOztBQUVBLGNBQVEsV0FBUixDQUFvQixrQkFBcEI7QUFDRCxLQU5ELE1BTU87QUFDTDtBQUNEO0FBQ0YsR0FaRDtBQWFELEM7O0FBbEpEOzs7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUNEQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBTSxrQkFBa0IsU0FBbEIsZUFBa0IsQ0FBVSxPQUFWLEVBQW1CLE9BQW5CLEVBQTRCO0FBQ2xELHlCQUFhLElBQWIsQ0FBa0IsSUFBbEIsRUFBd0IsT0FBeEIsRUFBaUMsaUJBQWpDOztBQUVBLE1BQU0sT0FBTyxJQUFiO0FBQ0EsTUFBTSxRQUFRLFFBQVEsS0FBdEI7O0FBRUEsTUFBTSxhQUFhLHlCQUFlLE9BQWYsQ0FBbkI7QUFDQSxNQUFNLGNBQWMsMEJBQWdCLE9BQWhCLEVBQXlCLFVBQXpCLEVBQXFDLE9BQXJDLENBQXBCOztBQUVBLE1BQUksU0FBSjtBQUNBLE1BQUksVUFBSjtBQUNBLE1BQUksS0FBSjs7QUFFQSxNQUFJLFFBQVEsS0FBUixDQUFjLFNBQWxCLEVBQTZCO0FBQzNCLGdCQUFZLHdCQUFjLE9BQWQsRUFBdUIsT0FBdkIsQ0FBWjtBQUNEOztBQUVELE1BQUksUUFBUSxXQUFaLEVBQXlCO0FBQ3ZCLGlCQUFhLHlCQUFlLE9BQWYsRUFBd0IsT0FBeEIsQ0FBYjtBQUNEOztBQUVELFdBQVMsY0FBVCxHQUEyQjtBQUN6QixnQkFBWSxLQUFaO0FBQ0Q7O0FBRUQsV0FBUyxlQUFULEdBQTRCO0FBQzFCLGdCQUFZLE1BQVo7QUFDRDs7QUFFRCxXQUFTLGFBQVQsR0FBMEI7QUFDeEIsZ0JBQVksSUFBWjtBQUNEOztBQUVELFdBQVMsY0FBVCxHQUEyQjtBQUN6QixRQUFJLEtBQUssY0FBTCxFQUFKLEVBQTJCO0FBQ3pCLGdCQUFVLEtBQVY7QUFDRCxLQUZELE1BRU87QUFDTCxrQkFBWSxLQUFaO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTLFdBQVQsR0FBd0I7QUFDdEIsU0FBSyxTQUFMO0FBQ0EsU0FBSyxhQUFMO0FBQ0EsZ0JBQVksSUFBWjtBQUNEOztBQUVELFdBQVMsVUFBVCxHQUF1QjtBQUNyQixVQUFNLCtCQUFOOztBQUVBLFNBQ0csRUFESCxDQUNNLGlCQUFPLFNBRGIsRUFDd0IsWUFBWTtBQUNoQztBQUNELEtBSEgsRUFJRyxFQUpILENBSU0saUJBQU8sUUFKYixFQUl1QixZQUFZO0FBQy9CO0FBQ0QsS0FOSCxFQU9HLEVBUEgsQ0FPTSxpQkFBTyxRQVBiLEVBT3VCLFlBQVk7QUFDL0I7QUFDRCxLQVRILEVBVUcsRUFWSCxDQVVNLGlCQUFPLE1BVmIsRUFVcUIsWUFBWTtBQUM3QjtBQUNELEtBWkgsRUFhRyxFQWJILENBYU0saUJBQU8sU0FiYixFQWF3QixXQWJ4QixFQWNHLEVBZEgsQ0FjTSxpQkFBTyxJQWRiLEVBY21CLFlBQVk7QUFDM0IsV0FBSyxhQUFMO0FBQ0QsS0FoQkg7QUFpQkQ7O0FBRUQsT0FBSyxLQUFMLEdBQWEsWUFBWTtBQUN2QixVQUFNLDBCQUFOOztBQUVBLGlCQUFhLFVBQVUsS0FBVixFQUFiO0FBQ0Esa0JBQWMsV0FBVyxLQUFYLEVBQWQ7O0FBRUEsZUFBVyxLQUFYO0FBQ0EsZ0JBQVksS0FBWjs7QUFFQSxLQUFDLEtBQUQsSUFBVSxZQUFWOztBQUVBLFlBQVEsSUFBUjtBQUNELEdBWkQ7O0FBY0EsT0FBSyxNQUFMLEdBQWMsWUFBWTtBQUN4QixpQkFBYSxVQUFVLE1BQVYsRUFBYjs7QUFFQSxZQUFRLEtBQVI7QUFDRCxHQUpEOztBQU1BLE9BQUssU0FBTCxHQUFpQixZQUFZO0FBQzNCLGtCQUFjLFdBQVcsSUFBWCxFQUFkO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLFNBQUwsR0FBaUIsWUFBWTtBQUMzQixrQkFBYyxXQUFXLElBQVgsRUFBZDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxhQUFMLEdBQXFCLFlBQVk7QUFDL0IsaUJBQWEsVUFBVSxJQUFWLEVBQWI7QUFDRCxHQUZEOztBQUlBLE9BQUssY0FBTCxHQUFzQixVQUFVLEVBQVYsRUFBYztBQUNsQyxpQkFBYSxVQUFVLEtBQVYsQ0FBZ0IsRUFBaEIsQ0FBYjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxlQUFMLEdBQXVCLFlBQVk7QUFDakMsaUJBQWEsVUFBVSxNQUFWLEVBQWI7QUFDRCxHQUZEOztBQUlBLE9BQUssY0FBTCxHQUFzQixZQUFZO0FBQ2hDLFdBQU8sYUFBYSxVQUFVLGNBQVYsRUFBcEI7QUFDRCxHQUZEOztBQUlBLE9BQUssVUFBTCxHQUFrQixVQUFVLFdBQVYsRUFBdUI7QUFDdkMsZ0JBQVksS0FBWixDQUFrQixXQUFsQjtBQUNELEdBRkQ7QUFHRCxDQXBIRDs7QUFzSEEsZUFBSyxRQUFMLENBQWMsZUFBZDs7a0JBRWUsZTs7Ozs7Ozs7O0FDbElmOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQU0sV0FBVyxTQUFYLFFBQVcsQ0FBVSxPQUFWLEVBQW1CLE9BQW5CLEVBQTRCO0FBQzNDLHlCQUFhLElBQWIsQ0FBa0IsSUFBbEIsRUFBd0IsT0FBeEIsRUFBaUMsVUFBakM7O0FBRUEsTUFBTSxPQUFPLElBQWI7QUFDQSxNQUFNLFFBQVEsV0FBVyxRQUFRLEtBQWpDOztBQUVBLE1BQUksYUFBSjtBQUNBLE1BQUksY0FBSjtBQUNBLE1BQUksa0JBQUo7QUFDQSxNQUFJLGtCQUFKO0FBQ0EsTUFBSSxZQUFKO0FBQ0EsTUFBSSxLQUFKOztBQUVBLFdBQVMsVUFBVCxDQUFxQixZQUFyQixFQUFtQztBQUNqQyxRQUFJLE9BQU8sRUFBWDs7QUFFQSxZQUFRLFlBQVI7O0FBRUEsUUFBSSxZQUFKLEVBQWtCO0FBQ2hCLFlBQU0sZUFBTjtBQUNBLGNBQVEsUUFBUSxJQUFSLENBQWEsWUFBYixHQUE0QixRQUFwQztBQUNEOztBQUVELFlBQVEsUUFBUSxJQUFSLENBQWEsT0FBYixHQUF1QixJQUEvQjs7QUFFQSxTQUFLLE1BQUwsQ0FBWSxJQUFaLEVBQWtCLElBQWxCLEVBQXdCO0FBQ3RCLGlCQUFXLElBRFc7QUFFdEIsaUJBQVcsUUFBUSxRQUFSLENBQWlCO0FBRk4sS0FBeEI7QUFJRDs7QUFFRCxXQUFTLFlBQVQsR0FBeUI7QUFDdkIsU0FBSyxNQUFMLENBQVksY0FBWjtBQUNEOztBQUVELFdBQVMsa0JBQVQsR0FBK0I7QUFDN0IsU0FBSyxNQUFMLENBQVksa0JBQVo7QUFDRDs7QUFFRCxXQUFTLFVBQVQsQ0FBcUIsYUFBckIsRUFBb0MsY0FBcEMsRUFBb0Q7QUFDbEQsUUFBSSxlQUFKOztBQUVBLFFBQUksUUFBUSxjQUFSLEVBQUosRUFBOEI7QUFDNUIsd0JBQWtCLFlBQVksYUFBOUI7O0FBRUEsVUFBSSxjQUFKLEVBQW9CO0FBQ2xCLDJCQUFtQixjQUFjLGNBQWpDO0FBQ0Q7QUFDRixLQU5ELE1BTU87QUFDTCx3QkFBa0IsYUFBbEI7QUFDRDs7QUFFRCxTQUFLLGNBQUwsQ0FBb0IsZUFBcEI7QUFDRDs7QUFFRCxXQUFTLG9CQUFULEdBQWlDO0FBQy9CLFlBQVEsWUFBUjs7QUFFQSxRQUFNLE9BQU8sUUFBUSxJQUFSLENBQWEsUUFBYixHQUF3QixJQUFyQzs7QUFFQSxTQUFLLE1BQUwsQ0FBWSxJQUFaLEVBQWtCLElBQWxCLEVBQXdCO0FBQ3RCLGlCQUFXLElBRFc7QUFFdEIsaUJBQVcsUUFBUSxRQUFSLENBQWlCO0FBRk4sS0FBeEI7O0FBS0E7QUFDRDs7QUFFRCxXQUFTLFVBQVQsR0FBdUI7QUFDckIsVUFBTSx3QkFBTjs7QUFFQSxTQUNHLEVBREgsQ0FDTSxpQkFBTyxVQURiLEVBQ3lCLFlBQVk7QUFDakM7QUFDRCxLQUhILEVBSUcsRUFKSCxDQUlNLGlCQUFPLGtCQUpiLEVBSWlDLFlBQVk7QUFDekM7QUFDRCxLQU5ILEVBT0csRUFQSCxDQU9NLGlCQUFPLGdCQVBiLEVBTytCLFlBQVk7QUFDdkMsV0FBSyxJQUFMO0FBQ0QsS0FUSCxFQVVHLEVBVkgsQ0FVTSxpQkFBTyxnQkFWYixFQVUrQixZQUFZO0FBQ3ZDO0FBQ0QsS0FaSCxFQWFHLEVBYkgsQ0FhTSxpQkFBTyxPQWJiLEVBYXNCLFlBQVk7QUFDOUIsV0FBSyxJQUFMO0FBQ0QsS0FmSCxFQWdCRyxFQWhCSCxDQWdCTSxpQkFBTyxRQWhCYixFQWdCdUIsVUFBVSxZQUFWLEVBQXdCO0FBQzNDLGlCQUFXLFlBQVg7QUFDRCxLQWxCSCxFQW1CRyxFQW5CSCxDQW1CTSxpQkFBTyxRQW5CYixFQW1CdUIsVUFBVSxhQUFWLEVBQXlCLGNBQXpCLEVBQXlDO0FBQzVELGlCQUFXLGFBQVgsRUFBMEIsY0FBMUI7QUFDRCxLQXJCSCxFQXNCRyxFQXRCSCxDQXNCTSxpQkFBTyxvQkF0QmIsRUFzQm1DLFlBQVk7QUFDM0M7QUFDRCxLQXhCSDtBQXlCRDs7QUFFRCxXQUFTLGlCQUFULEdBQThCO0FBQzVCLGtCQUFjLEtBQWQsQ0FBb0IsS0FBcEIsR0FBNEIsUUFBUSxnQkFBUixDQUF5QixJQUF6QixJQUFpQyxJQUE3RDtBQUNBLGtCQUFjLEtBQWQsQ0FBb0IsTUFBcEIsR0FBNkIsUUFBUSxpQkFBUixDQUEwQixJQUExQixJQUFrQyxJQUEvRDtBQUNEOztBQUVELFdBQVMsSUFBVCxHQUFpQjtBQUNmLHFCQUFpQixzQkFBTyxhQUFQLEVBQXNCLEtBQXRCLENBQWpCO0FBQ0Q7O0FBRUQsV0FBUyxnQkFBVCxHQUE2QjtBQUMzQixRQUFJLFFBQVEsUUFBUixDQUFpQixTQUFyQixFQUFnQztBQUM5QixVQUFJLENBQUMsWUFBTCxFQUFtQjtBQUNqQixZQUFNLHdCQUF3QixLQUFLLEtBQUwsQ0FBWSxLQUFLLE1BQUwsS0FBZ0IsUUFBUSxRQUFSLENBQWlCLGNBQWxDLEdBQW9ELENBQS9ELENBQTlCOztBQUVBLHNCQUFjLFNBQWQsR0FBMEIsd0JBQ2xCLFFBQVEsUUFBUixDQUFpQixjQURDLEdBRWxCLHFCQUZSOztBQUlBLDZCQUFxQixXQUFXLGdCQUFYLEVBQTZCLFFBQVEsUUFBUixDQUFpQixpQkFBOUMsQ0FBckI7QUFDQSx1QkFBZSxJQUFmO0FBQ0Q7QUFDRixLQVhELE1BV087QUFDTDtBQUNEO0FBQ0Y7O0FBRUQsV0FBUyxtQkFBVCxHQUFnQztBQUM5QixRQUFJLGFBQUosRUFBbUI7QUFDakIsb0JBQWMsU0FBZCxDQUF3QixNQUF4QixDQUErQixXQUEvQjtBQUNEOztBQUVELGlCQUFhLGtCQUFiO0FBQ0EseUJBQXFCLElBQXJCO0FBQ0EsbUJBQWUsS0FBZjtBQUNEOztBQUVELFdBQVMsVUFBVCxDQUFxQixPQUFyQixFQUE4QixjQUE5QixFQUE4QztBQUM1QyxRQUFNLFVBQVUsZUFBZSxPQUFmLEdBQXlCLGVBQWUsT0FBeEMsR0FBa0QsS0FBbEU7O0FBRUEsUUFBSSxjQUFKLEVBQW9CO0FBQ2xCLHFCQUFlLFNBQWYsR0FBMkIsQ0FBQyxVQUFVLFdBQVYsR0FBd0IsRUFBekIsSUFBK0IsT0FBMUQ7QUFDRCxLQUZELE1BRU87QUFDTCxjQUFRLE1BQVIsQ0FBZSxJQUFmLENBQ0UsMkRBREYsRUFFRSxPQUZGO0FBSUQ7QUFDRjs7QUFFRCxPQUFLLEtBQUwsR0FBYSxVQUFVLEdBQVYsRUFBZTtBQUMxQixRQUFNLFVBQVUsSUFBSSxPQUFKLEdBQWMsSUFBSSxPQUFKLENBQVksUUFBWixFQUFkLEdBQXVDLElBQUksUUFBSixFQUF2RDtBQUNBLFFBQU0sY0FBYyxJQUFJLFdBQUosR0FBa0IsSUFBSSxXQUFKLENBQWdCLFFBQWhCLEVBQWxCLEdBQStDLElBQW5FOztBQUVBLFFBQUksQ0FBQyxPQUFMLEVBQWM7QUFDWixjQUFRLEtBQVIsQ0FBYyx5Q0FBZCxFQUF5RCxHQUF6RDtBQUNEOztBQUVELFNBQUssTUFBTCxDQUFZLE9BQVosRUFBcUIsV0FBckIsRUFBa0M7QUFDaEMsZ0JBQVUsSUFEc0I7QUFFaEMsZUFBUyxJQUZ1QjtBQUdoQyxnQkFBVSxJQUFJLFFBQUosSUFBZ0IsSUFBSSxRQUFKLEVBSE07QUFJaEMsaUJBQVcsSUFBSSxZQUFKLElBQW9CLElBQUksWUFBSixFQUpDO0FBS2hDLHdCQUFrQixJQUFJLGdCQUFKLElBQXdCLElBQUksZ0JBQUo7QUFMVixLQUFsQztBQU9ELEdBZkQ7O0FBaUJBLE9BQUssY0FBTCxHQUFzQixVQUFVLFdBQVYsRUFBdUI7QUFDM0MsUUFBSSxDQUFDLGtCQUFMLEVBQXlCO0FBQ3ZCLDJCQUFxQiwyQkFBRSxHQUFGLENBQXJCOztBQUVBLFVBQUksYUFBSixFQUFtQjtBQUNqQixzQkFBYyxXQUFkLENBQTBCLGtCQUExQjtBQUNELE9BRkQsTUFFTztBQUNMLGdCQUFRLE1BQVIsQ0FBZSxJQUFmLENBQ0UsNERBREYsRUFFRSxXQUZGO0FBSUQ7QUFDRjs7QUFFRCx1QkFBbUIsU0FBbkIsR0FBK0IsV0FBL0I7O0FBRUEsMEJBQU8sa0JBQVAsRUFBMkIsS0FBM0I7QUFDRCxHQWpCRDs7QUFtQkEsT0FBSyxLQUFMLEdBQWEsWUFBWTtBQUN2QixZQUFRLEtBQVIsQ0FBYyxtQkFBZDs7QUFFQSxvQkFBZ0IsUUFBUSxhQUFSLENBQXNCLFdBQXRCLENBQWhCOztBQUVBLFFBQUksQ0FBQyxhQUFMLEVBQW9CO0FBQ2xCLHNCQUFnQiwyQkFBRSxXQUFGLENBQWhCLENBRGtCLENBQ2E7O0FBRS9CLFdBQUssSUFBTDs7QUFFQSxjQUFRLFdBQVIsQ0FBb0IsYUFBcEI7QUFDRCxLQU5ELE1BTU87QUFDTCxXQUFLLElBQUw7QUFDRDs7QUFFRCxLQUFDLEtBQUQsSUFBVSxZQUFWOztBQUVBLFlBQVEsSUFBUjtBQUNELEdBbEJEOztBQW9CQSxXQUFTLGVBQVQsR0FBNEI7QUFDMUIsUUFBSSxrQkFBSixFQUF3QjtBQUN0Qix5QkFBbUIsU0FBbkIsR0FBK0IsSUFBL0I7QUFDQSw0QkFBTyxrQkFBUCxFQUEyQixJQUEzQjtBQUNEO0FBQ0Y7O0FBRUQsT0FBSyxJQUFMLEdBQVksWUFBWTtBQUN0Qjs7QUFFQSxRQUFJLGFBQUosRUFBbUI7QUFDakIsNEJBQU8sYUFBUCxFQUFzQixJQUF0QjtBQUNBLG9CQUFjLFNBQWQsQ0FBd0IsTUFBeEIsQ0FBK0IsVUFBL0I7QUFDRDs7QUFFRCxRQUFJLGNBQUosRUFBb0I7QUFDbEIscUJBQWUsU0FBZixHQUEyQixJQUEzQjtBQUNEOztBQUVEO0FBQ0QsR0FiRDs7QUFlQSxPQUFLLFNBQUwsR0FBaUIsWUFBWTtBQUMzQixRQUFJLENBQUMsS0FBTCxFQUFZO0FBQ1YsYUFBTyxLQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsYUFBTyxpQkFBaUIsQ0FBQyxzQkFBTyxhQUFQLENBQXpCO0FBQ0Q7QUFDRixHQU5EOztBQVFBLE9BQUssT0FBTCxHQUFlLFlBQVk7QUFDekIsV0FBTyxLQUFQO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLE1BQUwsR0FBYyxVQUFVLE9BQVYsRUFBbUIsV0FBbkIsRUFBZ0MsYUFBaEMsRUFBK0M7QUFDM0QsWUFBUSxLQUFSLENBQWMsb0JBQWQ7O0FBRUEsUUFBSSxDQUFDLGFBQUwsRUFBb0I7QUFDbEIsc0JBQWdCLEVBQWhCO0FBQ0Q7O0FBRUQsUUFBTSxZQUFZLGNBQWMsU0FBZCxHQUEwQixjQUFjLFNBQXhDLEdBQW9ELEtBQXRFO0FBQ0EsUUFBTSxZQUFZLGNBQWMsU0FBZCxHQUEwQixjQUFjLFNBQXhDLEdBQW9ELEtBQXRFO0FBQ0EsUUFBTSxXQUFXLGNBQWMsUUFBZCxHQUF5QixjQUFjLFFBQXZDLEdBQWtELEtBQW5FO0FBQ0EsUUFBTSxXQUFXLGNBQWMsUUFBZCxHQUF5QixjQUFjLFFBQXZDLEdBQWtELEtBQW5FO0FBQ0EsUUFBTSxZQUFZLGNBQWMsU0FBZCxHQUEwQixjQUFjLFNBQXhDLEdBQW9ELEtBQXRFO0FBQ0EsUUFBTSxtQkFBbUIsY0FBYyxnQkFBZCxHQUFpQyxjQUFjLGdCQUEvQyxHQUFrRSxLQUEzRjs7QUFFQSxRQUFJLENBQUMsY0FBRCxJQUFtQixhQUF2QixFQUFzQztBQUNwQyx1QkFBaUIsMkJBQUUsSUFBRixDQUFqQjs7QUFFQSxVQUFJLGtCQUFKLEVBQXdCO0FBQ3RCLHNCQUFjLFlBQWQsQ0FBMkIsY0FBM0IsRUFBMkMsa0JBQTNDO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsc0JBQWMsV0FBZCxDQUEwQixjQUExQjtBQUNEO0FBQ0Y7O0FBRUQsUUFBSSxhQUFKLEVBQW1CO0FBQ2pCO0FBQ0EsVUFBSSxDQUFDLFNBQUwsRUFBZ0I7QUFDZCxzQkFBYyxTQUFkLEdBQTBCLFVBQTFCO0FBQ0Q7O0FBRUQsVUFBSSxTQUFKLEVBQWU7QUFDYixrQkFBVSxPQUFWLENBQWtCLFVBQVUsU0FBVixFQUFxQjtBQUNyQyx3QkFBYyxTQUFkLENBQXdCLEdBQXhCLENBQTRCLFNBQTVCO0FBQ0QsU0FGRDtBQUdEOztBQUVELFVBQUksZ0JBQUosRUFBc0I7QUFDcEIsc0JBQWMsS0FBZCxDQUFvQixLQUFwQixHQUE0QixNQUE1QjtBQUNBLHNCQUFjLEtBQWQsQ0FBb0IsTUFBcEIsR0FBNkIsTUFBN0I7QUFDRDtBQUNGOztBQUVELFFBQUksUUFBSixFQUFjO0FBQ1osdUJBQWlCLGNBQWMsU0FBZCxDQUF3QixHQUF4QixDQUE0QixVQUE1QixDQUFqQjtBQUNBLFdBQUssSUFBTCxDQUFVLGlCQUFPLFFBQWpCLEVBQTJCLEVBQUMsVUFBVSxRQUFYLEVBQTNCO0FBQ0QsS0FIRCxNQUdPO0FBQ0wsV0FBSyxJQUFMLENBQVUsaUJBQU8sU0FBakI7QUFDRDs7QUFFRCxZQUFRLFVBQVI7QUFDQSxZQUFRLFlBQVI7O0FBRUEsZUFBVyxPQUFYLEVBQW9CLGFBQXBCOztBQUVBLFFBQUksZUFBZSxZQUFZLE1BQVosR0FBcUIsQ0FBeEMsRUFBMkM7QUFDekMsV0FBSyxjQUFMLENBQW9CLFdBQXBCO0FBQ0Q7O0FBRUQsUUFBSSxTQUFKLEVBQWU7QUFDYjtBQUNELEtBRkQsTUFFTztBQUNMO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBLFlBQVEsV0FBUjs7QUFFQTs7QUFFQSxLQUFDLFNBQUQsSUFBYyxRQUFRLFVBQVIsRUFBZDtBQUNELEdBdkVEO0FBd0VELENBclREOztBQXVUQSxlQUFLLFFBQUwsQ0FBYyxRQUFkOztrQkFFZSxROzs7Ozs7Ozs7O0FDaFVmOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBO0FBQ0EsSUFBTSxjQUFjLDRDQUFwQjs7QUFFQSxJQUFNLFdBQVcsU0FBWCxRQUFXLENBQVUsT0FBVixFQUFtQixNQUFuQixFQUEyQixPQUEzQixFQUFvQztBQUNuRCx5QkFBYSxJQUFiLENBQWtCLElBQWxCLEVBQXdCLE9BQXhCLEVBQWlDLFVBQWpDOztBQUVFO0FBQ0YsTUFBSSxDQUFDLE9BQUQsSUFBWSxDQUFDLFFBQVEsS0FBckIsSUFBOEIsQ0FBQyxRQUFRLEtBQVIsQ0FBYyxHQUFqRCxFQUFzRDtBQUNwRCxVQUFNLHlCQUFlLE1BQWYsQ0FBc0IscUJBQXRCLEVBQTZDLE9BQTdDLENBQU47QUFDRDs7QUFFRCxNQUFNLE9BQU8sSUFBYjtBQUNBLE1BQU0sVUFBVSxzQkFBWSxPQUFaLENBQWhCO0FBQ0EsTUFBTSxRQUFRLFFBQVEsS0FBdEI7O0FBRUEsTUFBSSxPQUFPLElBQVg7O0FBRUEsTUFBSSw0QkFBSjs7QUFFQSxNQUFJLGVBQWUsQ0FBbkI7QUFDQSxNQUFJLGNBQWMsQ0FBbEI7O0FBRUEsTUFBSSxpQkFBaUIsRUFBckI7O0FBRUEsTUFBSSx1QkFBdUIsQ0FBM0I7QUFDQSxNQUFJLHdCQUF3QixDQUE1Qjs7QUFFQSxNQUFJLGVBQUo7QUFDQSxNQUFJLFNBQUo7O0FBRUEsTUFBSSxnQkFBSjtBQUNBLE1BQUksWUFBSjs7QUFFQSxNQUFJLFFBQUo7O0FBRUEsTUFBSSxhQUFKO0FBQ0EsTUFBSSxjQUFKOztBQUVBLE1BQUksTUFBSjtBQUNBLE1BQUksR0FBSjs7QUFFQSxNQUFJLGVBQUo7QUFDQSxNQUFJLGdCQUFKO0FBQ0EsTUFBSSxVQUFKO0FBQ0EsTUFBSSxRQUFKO0FBQ0EsTUFBSSxRQUFKO0FBQ0EsTUFBSSxNQUFKO0FBQ0EsTUFBSSxVQUFKO0FBQ0EsTUFBSSxTQUFKO0FBQ0EsTUFBSSxRQUFKO0FBQ0EsTUFBSSxLQUFKO0FBQ0EsTUFBSSxHQUFKO0FBQ0EsTUFBSSxXQUFKOztBQUVBLE1BQUksWUFBSjs7QUFFQSxNQUFJLEtBQUo7O0FBRUEsTUFBSSxxQkFBSjtBQUNBLE1BQUksZUFBSjs7QUFFQSxXQUFTLFdBQVQsQ0FBc0IsTUFBdEIsRUFBOEIsSUFBOUIsRUFBb0M7QUFDbEMsUUFBSSxNQUFKLEVBQVk7QUFDVixVQUFJLE9BQU8sU0FBWCxFQUFzQjtBQUNwQjtBQUNBOztBQUVBLGFBQUssSUFBTCxDQUFVLGlCQUFPLEtBQWpCLEVBQXdCLHlCQUFlLE1BQWYsQ0FDdEIsc0JBRHNCLEVBRXRCLDRFQUNBLHFCQURBLEdBQ3dCLE9BQU8sUUFBUCxFQUhGLEVBSXRCLE9BSnNCLENBQXhCO0FBTUQsT0FWRCxNQVVPO0FBQ0wsWUFBTSxvQkFBb0IsUUFBUSxLQUFLLGlCQUF2Qzs7QUFFQSxZQUFJO0FBQ0YsaUJBQU8sS0FBUCxDQUFhLE1BQWIsRUFBcUIsWUFBWTtBQUMvQixpQ0FBcUIsa0JBQWtCLElBQWxCLENBQXJCO0FBQ0QsV0FGRDtBQUdELFNBSkQsQ0FJRSxPQUFPLEdBQVAsRUFBWTtBQUNaLGVBQUssSUFBTCxDQUFVLGlCQUFPLEtBQWpCLEVBQXdCLHlCQUFlLE1BQWYsQ0FDdEIsMEJBRHNCLEVBRXRCLHNDQUFzQyxzQkFBTyxHQUFQLENBRmhCLEVBR3RCLE9BSHNCLENBQXhCO0FBS0Q7QUFDRjtBQUNGO0FBQ0Y7O0FBRUQsV0FBUyxTQUFULEdBQXNCO0FBQ3BCLG1CQUFlLE9BQU8sV0FBUCxDQUFtQixZQUFZO0FBQzVDLFlBQU0sc0JBQU47QUFDQSxrQkFBWSxPQUFPLElBQVAsQ0FBWSxFQUFaLENBQVo7QUFDRCxLQUhjLEVBR1osUUFBUSxRQUFSLENBQWlCLFlBSEwsQ0FBZjtBQUlEOztBQUVELFdBQVMsU0FBVCxHQUFzQjtBQUNwQixrQkFBYyxZQUFkO0FBQ0Q7O0FBRUQsV0FBUyxhQUFULENBQXdCLFdBQXhCLEVBQXFDO0FBQ25DOztBQUVBLFFBQU0sY0FBYyxZQUFZLFFBQVosRUFBcEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBWSxXQUFaO0FBQ0Q7O0FBRUQsV0FBUyxJQUFULEdBQWlCO0FBQ2YsdUJBQW1CLHNCQUFPLGVBQVAsRUFBd0IsS0FBeEIsQ0FBbkI7QUFDRDs7QUFFRCxXQUFTLGdCQUFULEdBQTZCO0FBQzNCLFFBQUk7QUFDRixZQUFNLDhCQUFOOztBQUVBLHlCQUFtQixXQUFXLFdBQVcsYUFBYSxLQUF0RDtBQUNBLHdCQUFrQixJQUFsQjs7QUFFQSxhQUFPLFlBQVA7O0FBRUE7QUFDQSxXQUFLLElBQUwsQ0FBVSxpQkFBTyxnQkFBakIsRUFBbUMsRUFBQyxRQUFRLEtBQUssUUFBTCxFQUFULEVBQW5DO0FBQ0QsS0FWRCxDQVVFLE9BQU8sR0FBUCxFQUFZO0FBQ1osV0FBSyxJQUFMLENBQVUsaUJBQU8sS0FBakIsRUFBd0IsR0FBeEI7QUFDRDtBQUNGOztBQUVELFdBQVMsaUJBQVQsR0FBOEI7QUFDNUIsVUFBTSwrQkFBTjs7QUFFQSxvQkFBZ0IsYUFBYSxZQUFiLENBQWhCO0FBQ0EsbUJBQWUsSUFBZjtBQUNEOztBQUVELFdBQVMscUJBQVQsR0FBa0M7QUFDaEMsUUFBSSxnQkFBSixFQUFzQjtBQUNwQixZQUFNLG1DQUFOOztBQUVBLDBCQUFvQixhQUFhLGdCQUFiLENBQXBCO0FBQ0EseUJBQW1CLElBQW5CO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTLHNCQUFULEdBQW1DO0FBQ2pDLFdBQU8sQ0FBQyx3QkFBd0IsZUFBZSxDQUF2QyxJQUE0QyxHQUE3QyxFQUFrRCxPQUFsRCxDQUEwRCxDQUExRCxJQUErRCxHQUF0RTtBQUNEOztBQUVELFdBQVMsdUJBQVQsR0FBb0M7QUFDbEMsV0FBTyxDQUFDLHlCQUF5QixnQkFBZ0IsQ0FBekMsSUFBOEMsR0FBL0MsRUFBb0QsT0FBcEQsQ0FBNEQsQ0FBNUQsSUFBaUUsR0FBeEU7QUFDRDs7QUFFRCxXQUFTLHFCQUFULEdBQWtDO0FBQ2hDO0FBQ0E7O0FBRUEsUUFBSSxDQUFDLGFBQUwsRUFBb0I7QUFDbEIsc0JBQWdCLHdCQUFoQjtBQUNEOztBQUVELFFBQUksQ0FBQyxjQUFMLEVBQXFCO0FBQ25CLHVCQUFpQix5QkFBakI7QUFDRDs7QUFFRCxTQUFLLElBQUwsQ0FDRSxpQkFBTyxRQURULEVBRUUsYUFGRixFQUdFLGNBSEY7QUFLRDs7QUFFRCxXQUFTLG1CQUFULENBQThCLElBQTlCLEVBQW9DO0FBQ2xDLDJCQUF1QixLQUFLLEtBQUwsR0FBYSxLQUFLLEtBQWxCLEdBQTBCLG9CQUFqRDs7QUFFQSxvQkFBZ0Isd0JBQWhCOztBQUVBO0FBQ0Q7O0FBRUQsV0FBUyxvQkFBVCxDQUErQixJQUEvQixFQUFxQztBQUNuQyw0QkFBd0IsS0FBSyxNQUFMLEdBQWMsS0FBSyxNQUFuQixHQUE0QixxQkFBcEQ7O0FBRUEscUJBQWlCLHlCQUFqQjs7QUFFQTtBQUNEOztBQUVELFdBQVMsT0FBVCxDQUFrQixJQUFsQixFQUF3QjtBQUN0QiwyQkFDQSx3QkFDQSxlQUNBLGNBQWMsQ0FIZDs7QUFLQSxxQkFBaUIsZ0JBQWdCLElBQWpDOztBQUVBLFVBQU0sS0FBSyxHQUFYOztBQUVBLFFBQUksS0FBSyxHQUFULEVBQWM7QUFDWixhQUFPLFlBQVAsQ0FDRSxLQUFLLEdBQUwsR0FBVyxvQkFBVSxlQUFyQixHQUF1QyxHQUF2QyxHQUE2QyxRQUFRLFFBQXJELEdBQWdFLGdCQURsRSxFQUVFLElBRkY7QUFJRDs7QUFFRCxRQUFJLEtBQUssSUFBVCxFQUFlO0FBQ2IsYUFBTyxhQUFQLENBQ0UsS0FBSyxJQUFMLEdBQVksb0JBQVUsZUFBdEIsR0FBd0MsR0FBeEMsR0FBOEMsUUFBUSxRQUF0RCxHQUFpRSxpQkFEbkUsRUFFRSxJQUZGO0FBSUQ7O0FBRUQsU0FBSyxJQUFMOztBQUVBLFFBQU0sUUFBUSxLQUFLLGdCQUFMLENBQXNCLElBQXRCLENBQWQ7QUFDQSxRQUFNLFNBQVMsS0FBSyxpQkFBTCxDQUF1QixJQUF2QixDQUFmOztBQUVBLFNBQUssSUFBTCxDQUFVLGlCQUFPLE9BQWpCLEVBQTBCLEdBQTFCLEVBQStCLEtBQS9CLEVBQXNDLE1BQXRDOztBQUVBO0FBQ0Esa0JBQWMsS0FBSyxHQUFMLEtBQWEsUUFBM0I7O0FBRUEsbUJBQWUsV0FBZixHQUE2QixXQUE3Qjs7QUFFQSxRQUFJLFFBQVEsS0FBWixFQUFtQjtBQUNqQixZQUNFLG1FQURGLEVBRUUsbUJBQVMsUUFBVCxDQUFrQixRQUFsQixFQUE0QixDQUE1QixDQUZGLEVBR0UsbUJBQVMsTUFBVCxDQUFnQixXQUFoQixDQUhGO0FBS0Q7QUFDRjs7QUFFRCxXQUFTLFVBQVQsQ0FBcUIsRUFBckIsRUFBeUI7QUFDdkIsUUFBSSxDQUFDLFNBQUwsRUFBZ0I7QUFDZCxtQkFBYSxJQUFiOztBQUVBLFlBQU0seUNBQU4sRUFBaUQsUUFBUSxTQUF6RDs7QUFFQSxXQUFLLElBQUwsQ0FBVSxpQkFBTyxVQUFqQjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLFVBQU0sY0FDSixRQUFRLFNBQVIsR0FDQSxHQURBLEdBRUEsbUJBQW1CLG9CQUFVLGVBQTdCLENBRkEsR0FHQSxHQUhBLEdBSUEsbUJBQW1CLFFBQVEsUUFBM0IsQ0FMRjs7QUFPQSxVQUFJO0FBQ0Y7QUFDQTtBQUNBLGlCQUFTLCtCQUFVLFdBQVYsRUFBdUI7QUFDOUIsNkJBQW1CLEtBRFc7QUFFOUI7QUFDQSxzQkFBWTtBQUhrQixTQUF2QixDQUFUO0FBS0QsT0FSRCxDQVFFLE9BQU8sR0FBUCxFQUFZO0FBQ1oscUJBQWEsWUFBWSxLQUF6Qjs7QUFFQSxZQUFJLEdBQUo7O0FBRUEsWUFBSSxxQ0FBcUIsV0FBekIsRUFBc0M7QUFDcEMsZ0JBQU0seUJBQWUsTUFBZixDQUFzQix1QkFBdEIsRUFBK0MsWUFBWSxzQkFBTyxHQUFQLENBQTNELEVBQXdFLE9BQXhFLENBQU47QUFDRCxTQUZELE1BRU87QUFDTCxnQkFBTSx5QkFBZSxNQUFmLENBQ0osNkJBREksRUFFSix3RkFGSSxFQUdKLE9BSEksRUFHSztBQUNQLDRCQUFnQjtBQURULFdBSEwsQ0FBTjtBQU9EOztBQUVELGFBQUssSUFBTCxDQUFVLGlCQUFPLEtBQWpCLEVBQXdCLEdBQXhCO0FBQ0Q7O0FBRUQsVUFBSSxNQUFKLEVBQVk7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFPLEVBQVAsQ0FBVSxPQUFWLEVBQW1CLFVBQVUsR0FBVixFQUFlO0FBQ2hDLGdCQUFNLGNBQWMsbUJBQXBCOztBQUVBLHVCQUFhLFlBQVksS0FBekI7O0FBRUEsY0FBSSxHQUFKLEVBQVM7QUFDUCxpQkFBSyxJQUFMLENBQVUsaUJBQU8sS0FBakIsRUFBd0IsT0FBTywyQkFBL0I7QUFDRCxXQUZELE1BRU87QUFDTCxpQkFBSyxJQUFMLENBQVUsaUJBQU8sWUFBakI7O0FBRUE7QUFDQTtBQUNEO0FBQ0YsU0FiRDs7QUFlQSxlQUFPLEVBQVAsQ0FBVSxTQUFWLEVBQXFCLFlBQVk7QUFDL0IsZ0JBQU0sY0FBYyxnQ0FBcEI7O0FBRUEsY0FBSSxDQUFDLFNBQUwsRUFBZ0I7QUFDZCx3QkFBWSxJQUFaO0FBQ0EseUJBQWEsV0FBVyxLQUF4Qjs7QUFFQSxpQkFBSyxJQUFMLENBQVUsaUJBQU8sU0FBakI7O0FBRUEsa0JBQU0sNENBQU47O0FBRUEsa0JBQU0sSUFBTjtBQUNEO0FBQ0YsU0FiRDs7QUFlQSxlQUFPLEVBQVAsQ0FBVSxNQUFWLEVBQWtCLFVBQVUsSUFBVixFQUFnQjtBQUNoQyxnQkFBTSxjQUFjLDZCQUFwQjs7QUFFQSxjQUFJLE9BQUo7O0FBRUEsY0FBSTtBQUNGLHNCQUFVLEtBQUssS0FBTCxDQUFXLEtBQUssUUFBTCxFQUFYLENBQVY7QUFDRCxXQUZELENBRUUsT0FBTyxHQUFQLEVBQVk7QUFDWixrQkFBTSwwQkFBTixFQUFrQyxHQUFsQzs7QUFFQSxpQkFBSyxJQUFMLENBQVUsaUJBQU8sS0FBakIsRUFBd0IseUJBQWUsTUFBZixDQUN0Qix3QkFEc0I7QUFFdEI7QUFDQSxtREFBdUMsS0FBSyxRQUFMLEVBQXZDLEdBQXlELElBSG5DLEVBSXRCLE9BSnNCLENBQXhCO0FBTUQsV0FYRCxTQVdVO0FBQ1IsMkJBQWUsSUFBZixDQUFvQixJQUFwQixFQUEwQixPQUExQjtBQUNEO0FBQ0YsU0FuQkQ7O0FBcUJBLGVBQU8sRUFBUCxDQUFVLE9BQVYsRUFBbUIsVUFBVSxHQUFWLEVBQWU7QUFDaEMsZ0JBQU0sY0FBYyw4QkFBcEI7O0FBRUEsdUJBQWEsWUFBWSxLQUF6QjtBQUNBLGVBQUssSUFBTCxDQUFVLGlCQUFPLEtBQWpCLEVBQXdCLEdBQXhCO0FBQ0QsU0FMRDs7QUFPQTs7QUFFQSxlQUFPLEVBQVAsQ0FBVSxPQUFWLEVBQW1CLFlBQVk7QUFDN0IsZ0JBQU0sY0FBYyxtREFBcEI7QUFDRCxTQUZEOztBQUlBLGVBQU8sRUFBUCxDQUFVLFFBQVYsRUFBb0IsWUFBWTtBQUM5QixnQkFBTSxjQUFjLCtCQUFwQjtBQUNELFNBRkQ7O0FBSUEsZUFBTyxFQUFQLENBQVUsS0FBVixFQUFpQixZQUFZO0FBQzNCLGdCQUFNLGNBQWMsNEJBQXBCO0FBQ0QsU0FGRDs7QUFJQSxlQUFPLEVBQVAsQ0FBVSxPQUFWLEVBQW1CLFlBQVk7QUFDN0IsZ0JBQU0sY0FBYyw4QkFBcEI7QUFDRCxTQUZEOztBQUlBLGVBQU8sRUFBUCxDQUFVLE1BQVYsRUFBa0IsWUFBWTtBQUM1QixnQkFBTSxjQUFjLDZCQUFwQjtBQUNELFNBRkQ7O0FBSUEsZUFBTyxFQUFQLENBQVUsUUFBVixFQUFvQixZQUFZO0FBQzlCLGdCQUFNLGNBQWMsK0JBQXBCO0FBQ0QsU0FGRDs7QUFJQSxlQUFPLEVBQVAsQ0FBVSxRQUFWLEVBQW9CLFlBQVk7QUFDOUIsZ0JBQU0sY0FBYywrQkFBcEI7QUFDRCxTQUZEOztBQUlBLGVBQU8sRUFBUCxDQUFVLFFBQVYsRUFBb0IsWUFBWTtBQUM5QixnQkFBTSxjQUFjLCtCQUFwQjtBQUNELFNBRkQ7O0FBSUEsZUFBTyxFQUFQLENBQVUsVUFBVixFQUFzQixZQUFZO0FBQ2hDLGdCQUFNLGNBQWMsK0JBQXBCO0FBQ0QsU0FGRDs7QUFJQSxlQUFPLEVBQVAsQ0FBVSxXQUFWLEVBQXVCLFlBQVk7QUFDakMsZ0JBQU0sY0FBYywrQkFBcEI7QUFDRCxTQUZEOztBQUlBLGVBQU8sRUFBUCxDQUFVLFFBQVYsRUFBb0IsWUFBWTtBQUM5QixnQkFBTSxjQUFjLCtCQUFwQjtBQUNELFNBRkQ7QUFHRDtBQUNGO0FBQ0Y7O0FBRUQsV0FBUyxhQUFULEdBQTBCO0FBQ3hCO0FBQ0E7QUFDQSxXQUFPLGNBQWMsaUJBQWlCLENBQUMsVUFBbEIsSUFBZ0MsUUFBOUMsQ0FBUDtBQUNEOztBQUVELFdBQVMsc0JBQVQsQ0FBaUMsR0FBakMsRUFBc0M7QUFDcEMsdUJBQW1CLEtBQW5CO0FBQ0E7O0FBRUEsVUFDRSxvQ0FERixFQUVFLDJCQUZGLEVBR0UsVUFBVSxrQkFBVixFQUhGLEVBSUUsd0JBSkYsRUFLRyxPQUFPLElBQUksS0FBWixJQUFzQixhQUx4Qjs7QUFRQSxRQUFNLGlCQUFpQixLQUFLLFNBQUwsQ0FBZSxpQkFBTyxLQUF0QixDQUF2Qjs7QUFFQSxRQUFJLGVBQWUsTUFBbkIsRUFBMkI7QUFDekIsVUFBSSxJQUFJLElBQUosS0FBYSx5QkFBZSwwQkFBaEMsRUFBNEQ7QUFDMUQsYUFBSyxJQUFMLENBQVUsaUJBQU8sS0FBakIsRUFBd0IseUJBQWUsTUFBZixDQUN0QixHQURzQixFQUV0QixPQUZzQixDQUF4QjtBQUlELE9BTEQsTUFLTztBQUNMO0FBQ0EsY0FBTSxtQ0FBTixFQUEyQyxHQUEzQztBQUNEOztBQUVEO0FBQ0EscUJBQWUsV0FBVyxVQUFYLEVBQXVCLFFBQVEsUUFBUixDQUFpQixTQUF4QyxDQUFmO0FBQ0QsS0FiRCxNQWFPO0FBQ0wsVUFBSSxRQUFKLEVBQWM7QUFDWjtBQUNBO0FBQ0EsY0FBTSxzREFBTixFQUE4RCxHQUE5RDtBQUNELE9BSkQsTUFJTztBQUNMLGNBQU0sMERBQU4sRUFBa0UsR0FBbEU7O0FBRUE7QUFDQSxjQUFNLHlCQUFlLE1BQWYsQ0FDSixHQURJLEVBRUosMEVBRkksRUFHSixPQUhJLENBQU47QUFLRDtBQUNGO0FBQ0Y7O0FBRUQsV0FBUyxvQkFBVCxDQUErQixXQUEvQixFQUE0QztBQUMxQyxVQUFNLGtDQUFOOztBQUVBLFFBQUksZUFBSixFQUFxQjtBQUNuQixVQUFJO0FBQ0Y7O0FBRUEsa0JBQVUsSUFBVixDQUNFLFdBREYsRUFFRSxpQkFBaUIsSUFBakIsQ0FBc0IsSUFBdEIsQ0FGRixFQUdFLGNBQWMsSUFBZCxDQUFtQixJQUFuQixDQUhGLEVBSUUsVUFBVSxHQUFWLEVBQWU7QUFDYixlQUFLLElBQUwsQ0FBVSxpQkFBTyxLQUFqQixFQUF3QixHQUF4QjtBQUNELFNBTkg7QUFRRCxPQVhELENBV0UsT0FBTyxHQUFQLEVBQVk7QUFDWixhQUFLLElBQUwsQ0FBVSxpQkFBTyxLQUFqQixFQUF3QixHQUF4QjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxXQUFTLG9CQUFULEdBQWlDO0FBQy9CLFFBQUksQ0FBQyxTQUFMLEVBQWdCO0FBQ2QsWUFBTSxJQUFJLEtBQUosQ0FBVSx1QkFBVixDQUFOO0FBQ0Q7O0FBRUQsVUFBTSxrQ0FBTjs7QUFFQSxTQUFLLElBQUwsQ0FBVSxpQkFBTyx3QkFBakI7O0FBRUE7QUFDQSxRQUFJLFVBQVUsWUFBVixJQUEwQixVQUFVLFlBQVYsQ0FBdUIsWUFBckQsRUFBbUU7QUFDakU7QUFDQSxVQUFNLGNBQWM7QUFDbEIsZUFBTztBQUNMLHNCQUFZLE1BRFA7QUFFTCxxQkFBVyxFQUFDLE9BQU8sUUFBUSxLQUFSLENBQWMsR0FBdEI7QUFGTixTQURXO0FBS2xCLGVBQU8sUUFBUSxjQUFSO0FBTFcsT0FBcEI7O0FBUUEsVUFBSSxRQUFRLFVBQVIsRUFBSixFQUEwQjtBQUN4QjtBQUNBO0FBQ0E7O0FBRUQsT0FMRCxNQUtPO0FBQ0wsWUFBSSxRQUFRLGVBQVIsRUFBSixFQUErQjtBQUM3QixzQkFBWSxLQUFaLENBQWtCLEtBQWxCLEdBQTBCLEVBQUMsT0FBTyxRQUFRLEtBQVIsQ0FBYyxLQUF0QixFQUExQjtBQUNEOztBQUVELFlBQUksUUFBUSxnQkFBUixFQUFKLEVBQWdDO0FBQzlCLHNCQUFZLEtBQVosQ0FBa0IsTUFBbEIsR0FBMkIsRUFBQyxPQUFPLFFBQVEsS0FBUixDQUFjLE1BQXRCLEVBQTNCO0FBQ0Q7QUFDRjs7QUFFRCxZQUFNLGlEQUFOLEVBQXlELFdBQXpEOztBQUVBLGdCQUFVLFlBQVYsQ0FDRyxZQURILENBQ2dCLFdBRGhCLEVBRUcsSUFGSCxDQUVRLG9CQUZSLEVBR0csS0FISCxDQUdTLHNCQUhUO0FBSUQsS0EvQkQsTUErQk87QUFDTCxZQUFNLG9DQUFOOztBQUVBLGdCQUFVLGFBQVYsQ0FBd0I7QUFDdEIsZUFBTyxJQURlO0FBRXRCLGVBQU8sUUFBUSxjQUFSO0FBRmUsT0FBeEIsRUFHRyxvQkFISCxFQUd5QixzQkFIekI7QUFJRDtBQUNGOztBQUVELFdBQVMsYUFBVCxHQUEwQjtBQUN4QixRQUFJLGVBQUosRUFBcUI7QUFDbkIsWUFBTSxpRUFBTjtBQUNBO0FBQ0EsYUFBTyxLQUFQO0FBQ0QsS0FKRCxNQUlPLElBQUksZ0JBQUosRUFBc0I7QUFDM0IsWUFBTSxnRkFBTjtBQUNBLGFBQU8sS0FBUDtBQUNEOztBQUVELFVBQU0sMkJBQU47O0FBRUEsU0FBSyxJQUFMLENBQVUsaUJBQU8sa0JBQWpCOztBQUVBLFFBQUk7QUFDRix5QkFBbUIsV0FBVyxZQUFZO0FBQ3hDLFlBQUksQ0FBQyxLQUFLLE9BQUwsRUFBTCxFQUFxQjtBQUNuQixlQUFLLElBQUwsQ0FBVSxpQkFBTyxLQUFqQixFQUF3QixRQUFRLGdCQUFSLEVBQXhCO0FBQ0Q7QUFDRixPQUprQixFQUloQixRQUFRLFFBQVIsQ0FBaUIsU0FKRCxDQUFuQjs7QUFNQSx5QkFBbUIsSUFBbkI7O0FBRUE7QUFDRCxLQVZELENBVUUsT0FBTyxHQUFQLEVBQVk7QUFDWixZQUFNLDZDQUFOOztBQUVBLHlCQUFtQixLQUFuQjs7QUFFQSxVQUFNLGlCQUFpQixLQUFLLFNBQUwsQ0FBZSxpQkFBTyxLQUF0QixDQUF2Qjs7QUFFQSxVQUFJLGVBQWUsTUFBbkIsRUFBMkI7QUFDekIsYUFBSyxJQUFMLENBQVUsaUJBQU8sS0FBakIsRUFBd0IsR0FBeEI7QUFDRCxPQUZELE1BRU87QUFDTCxjQUFNLDhEQUFOLEVBQXNFLEdBQXRFO0FBQ0EsY0FBTSxHQUFOLENBRkssQ0FFSztBQUNYO0FBQ0Y7QUFDRjs7QUFFRCxXQUFTLGNBQVQsQ0FBeUIsT0FBekIsRUFBa0M7QUFDaEMsUUFBSTtBQUNGLFlBQ0Usc0JBREYsRUFFRSxRQUFRLE9BRlYsRUFHRSxRQUFRLElBQVIsR0FBZSxPQUFPLEtBQUssU0FBTCxDQUFlLFFBQVEsSUFBdkIsQ0FBdEIsR0FBcUQsRUFIdkQ7O0FBTUEsY0FBUSxRQUFRLE9BQWhCO0FBQ0UsYUFBSyxPQUFMO0FBQ0UsY0FBSSxDQUFDLGdCQUFMLEVBQXVCO0FBQUU7QUFBaUI7QUFDMUM7QUFDRixhQUFLLFNBQUw7QUFDRSxrQkFBUSxRQUFRLElBQWhCO0FBQ0E7QUFDRixhQUFLLE9BQUw7QUFDRSxlQUFLLElBQUwsQ0FBVSxpQkFBTyxLQUFqQixFQUF3Qix5QkFBZSxNQUFmLENBQ3RCLHNCQURzQixFQUV0QixRQUFRLElBQVIsQ0FBYSxHQUFiLENBQWlCLFFBQWpCLE1BQStCLHdCQUZULEVBR3RCLE9BSHNCLENBQXhCO0FBS0E7QUFDRixhQUFLLGNBQUw7QUFDRSw4QkFBb0IsUUFBUSxJQUE1QjtBQUNBO0FBQ0YsYUFBSyxlQUFMO0FBQ0UsK0JBQXFCLFFBQVEsSUFBN0I7QUFDQTtBQUNGLGFBQUssb0JBQUw7QUFDRSxlQUFLLElBQUwsQ0FBVSxpQkFBTyxvQkFBakI7QUFDQTtBQUNGLGFBQUssb0JBQUw7QUFDRSxlQUFLLElBQUwsQ0FBVSxpQkFBTyxvQkFBakI7QUFDQTtBQUNGO0FBQ0UsZUFBSyxJQUFMLENBQVUsaUJBQU8sS0FBakIsRUFBd0IsNkJBQTZCLFFBQVEsT0FBN0Q7QUFDQTtBQTVCSjtBQThCRCxLQXJDRCxDQXFDRSxPQUFPLEdBQVAsRUFBWTtBQUNaLFdBQUssSUFBTCxDQUFVLGlCQUFPLEtBQWpCLEVBQXdCLEdBQXhCO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTLFdBQVQsR0FBd0I7QUFDdEIsV0FBTyxRQUFRLFdBQVIsRUFBUDtBQUNEOztBQUVELFdBQVMsUUFBVCxHQUFxQjtBQUNuQixXQUFPLENBQUMsZUFBRCxJQUFvQixzQkFBTyxlQUFQLENBQTNCO0FBQ0Q7O0FBRUQsV0FBUyxZQUFULENBQXVCLE9BQXZCLEVBQWdDLElBQWhDLEVBQXNDLEVBQXRDLEVBQTBDO0FBQ3hDLFFBQUksQ0FBQyxFQUFELElBQU8sSUFBUCxJQUFlLEtBQUssV0FBTCxLQUFxQixRQUF4QyxFQUFrRDtBQUNoRCxXQUFLLElBQUw7QUFDQSxhQUFPLElBQVA7QUFDRDs7QUFFRCxRQUFJLENBQUMsU0FBTCxFQUFnQjtBQUNkLFlBQU0sOEJBQU4sRUFBc0MsT0FBdEMsRUFBK0MsR0FBL0M7O0FBRUEsaUJBQVcsWUFBWTtBQUNyQixxQkFBYSxPQUFiLEVBQXNCLElBQXRCO0FBQ0EsY0FBTSxJQUFOO0FBQ0QsT0FIRDtBQUlELEtBUEQsTUFPTyxJQUFJLE1BQUosRUFBWTtBQUNqQixZQUFNLE1BQU4sRUFBYyxPQUFkLEVBQXVCLE9BQU8sS0FBSyxTQUFMLENBQWUsSUFBZixDQUFQLEdBQThCLEVBQXJEOztBQUVBLFVBQU0sYUFBYTtBQUNqQixpQkFBUyxPQURRO0FBRWpCLGNBQU07O0FBR1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBZG1CLE9BQW5CLENBZ0JBLFlBQVksT0FBTyxJQUFQLENBQVksS0FBSyxTQUFMLENBQWUsVUFBZixDQUFaLENBQVo7O0FBRUEsVUFBSSxFQUFKLEVBQVE7QUFDTjtBQUNBLG1CQUFXLFlBQVk7QUFDckI7QUFDRCxTQUZELEVBRUcsQ0FGSDtBQUdEO0FBQ0Y7QUFDRjs7QUFFRCxXQUFTLFVBQVQsR0FBdUI7QUFDckIsUUFBSSxTQUFKLEVBQWU7QUFDYixZQUFNLHdCQUFOOztBQUVBLFVBQUksU0FBSixFQUFlO0FBQ2I7QUFDQSxrQkFBVSw2QkFBVjtBQUNEOztBQUVELFVBQUksVUFBSixFQUFnQjtBQUNkO0FBQ0EscUJBQWEsWUFBWSxLQUF6QjtBQUNELE9BSEQsTUFHTyxJQUFJLE1BQUosRUFBWTtBQUNqQjtBQUNBO0FBQ0EsZUFBTyxHQUFQO0FBQ0EsaUJBQVMsU0FBVDtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxXQUFTLG9CQUFULEdBQWlDO0FBQy9CLFlBQVEsS0FBSyxPQUFMLEVBQVI7QUFDRDs7QUFFRCxXQUFTLGNBQVQsR0FBMkI7QUFDekIsV0FBTyxLQUFLLGNBQUwsRUFBUDtBQUNEOztBQUVELFdBQVMsY0FBVCxHQUEyQjtBQUN6QixXQUFRLG1CQUFtQixXQUEzQjtBQUNEOztBQUVELE9BQUssaUJBQUwsR0FBeUIsWUFBWTtBQUNuQyxXQUFPLGNBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssa0JBQUwsR0FBMEIsWUFBWTtBQUNwQyxXQUFPLFVBQVUsa0JBQVYsRUFBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxJQUFMLEdBQVksVUFBVSxNQUFWLEVBQWtCO0FBQzVCLFVBQU0sUUFBTixFQUFnQixNQUFoQjs7QUFFQSxRQUFNLGVBQWUsT0FBTyxZQUE1Qjs7QUFFQSxTQUFLLElBQUwsQ0FBVSxpQkFBTyxRQUFqQixFQUEyQixZQUEzQjs7QUFFQSxTQUFLLFFBQUw7O0FBRUEsZUFBVyxLQUFLLEdBQUwsRUFBWDs7QUFFQSxxQkFBaUI7QUFDZixjQUFRLEtBQUssTUFBTCxFQURPO0FBRWYsaUJBQVcsUUFBUSxLQUFSLENBQWMsR0FGVjtBQUdmLG1CQUFhLGdCQUhFO0FBSWYsc0JBQWdCLE1BQU0sUUFBUSxLQUFSLENBQWMsR0FKckI7O0FBTWYsbUJBQWEsZ0JBTkU7QUFPZixtQkFBYSxXQVBFO0FBUWYsaUJBQVcsT0FBTyxZQUFQO0FBUkksS0FBakI7O0FBV0EsUUFBSSxRQUFRLGNBQVIsRUFBSixFQUE4QjtBQUM1QixxQkFBZSxZQUFmLEdBQThCLFlBQTlCO0FBQ0EscUJBQWUsVUFBZixHQUE0QixVQUFVLGtCQUFWLEVBQTVCO0FBQ0Q7O0FBRUQsaUJBQWEsTUFBYixFQUFxQixjQUFyQjs7QUFFQTtBQUNBLFNBQUssS0FBTDtBQUNELEdBL0JEOztBQWlDQSxPQUFLLElBQUwsR0FBWSxVQUFVLEVBQVYsRUFBYztBQUN4QixTQUFLLElBQUwsQ0FBVSxpQkFBTyxVQUFqQjs7QUFFQTtBQUNBLFNBQUssS0FBTDs7QUFFQSxpQkFBYSxNQUFiLEVBQXFCLEVBQXJCO0FBQ0QsR0FQRDs7QUFTQSxXQUFTLGlCQUFULEdBQThCO0FBQzVCLFVBQU0sK0JBQU47O0FBRUE7O0FBRUk7QUFDSixpQkFBYSxVQUFVLElBQVYsRUFBYjs7QUFFQSxzQkFBa0IsTUFBTSxTQUFTLE1BQU0sSUFBdkM7O0FBRUE7QUFDRDs7QUFFRCxPQUFLLE1BQUwsR0FBYyxVQUFVLENBQVYsRUFBYTtBQUN6QixRQUFJLENBQUMsUUFBTCxFQUFlO0FBQ2IsVUFBSSxLQUFKOztBQUVBLFVBQUksQ0FBSixFQUFPO0FBQ0wsZ0JBQVEsRUFBRSxJQUFGLElBQVUsRUFBRSxVQUFaLElBQTBCLEVBQUUsUUFBRixFQUFsQztBQUNEOztBQUVELFlBQU0sd0JBQXdCLFFBQVEsY0FBYyxLQUF0QixHQUE4QixFQUF0RCxDQUFOOztBQUVBLFdBQUssS0FBTDs7QUFFQTs7QUFFQTs7QUFFQSxpQkFBVyxJQUFYOztBQUVBLGNBQVEsS0FBUjtBQUNEO0FBQ0YsR0FwQkQ7O0FBc0JBLE9BQUssS0FBTCxHQUFhLFlBQVk7QUFDdkI7QUFDQSxRQUFJLENBQUMsUUFBTCxFQUFlO0FBQ2IsWUFBTSxtQkFBTjs7QUFFQSxXQUFLLElBQUwsQ0FBVSxpQkFBTyxTQUFqQjs7QUFFQTs7QUFFQTtBQUNBLG1CQUFhLFVBQVUsSUFBVixFQUFiOztBQUVBLGFBQU8sS0FBUDs7QUFFQSx3QkFBa0IsTUFBTSxTQUFTLE1BQU0sY0FBYyxJQUFyRDtBQUNEO0FBQ0YsR0FoQkQ7O0FBa0JBLE9BQUssUUFBTCxHQUFnQixZQUFZO0FBQzFCLFdBQU8sYUFBYSxjQUFjLENBQTNCLElBQWdDLFdBQVcsSUFBbEQ7QUFDRCxHQUZEOztBQUlBLE9BQUssT0FBTCxHQUFlLFlBQVk7QUFDekIsV0FBTyxVQUFVLE9BQVYsRUFBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxLQUFMLEdBQWEsVUFBVSxNQUFWLEVBQWtCO0FBQzdCLFFBQU0sSUFBSSxVQUFVLE9BQU8sS0FBM0I7O0FBRUEsUUFBSSxhQUFhLE9BQU8sS0FBeEIsRUFBK0I7QUFDN0IsYUFBTyxTQUFQLEdBQW1CLEVBQUUsSUFBckI7QUFDRDs7QUFFRCxVQUFNLFNBQU4sRUFBaUIsTUFBakI7O0FBRUEsY0FBVSxLQUFWO0FBQ0EsU0FBSyxJQUFMOztBQUVBLFNBQUssSUFBTCxDQUFVLGlCQUFPLE1BQWpCOztBQUVBO0FBQ0QsR0FmRDs7QUFpQkEsT0FBSyxRQUFMLEdBQWdCLFlBQVk7QUFDMUIsV0FBTyxhQUFhLFVBQVUsUUFBVixFQUFwQjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxNQUFMLEdBQWMsWUFBWTtBQUN4QixVQUFNLG9CQUFOOztBQUVBOztBQUVBLFNBQUssSUFBTCxDQUFVLGlCQUFPLFFBQWpCOztBQUVBLGNBQVUsTUFBVjtBQUNBLFNBQUssS0FBTDtBQUNELEdBVEQ7O0FBV0EsV0FBUyxTQUFULENBQW9CLElBQXBCLEVBQTBCO0FBQ3hCLFFBQU0sY0FBYyxRQUFRLEtBQUssV0FBakM7O0FBRUEsUUFBSSxnQkFBZ0IsQ0FBcEIsRUFBdUI7QUFDckIsV0FBSyxJQUFMLENBQVUsaUJBQU8sZ0JBQWpCO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTLFVBQVQsR0FBdUI7QUFDckIsUUFBTSxVQUFVLHlCQUFVLEVBQUMsS0FBSyxRQUFRLEtBQVIsQ0FBYyxHQUFwQixFQUFWLEVBQW9DLElBQXBDLENBQWhCOztBQUVBO0FBQ0EsbUNBQStCLFFBQVEsOEJBQVIsRUFBL0I7O0FBRUEsV0FBTyxPQUFQO0FBQ0Q7O0FBRUQsV0FBUyxJQUFULENBQWUsU0FBZixFQUEwQixXQUExQixFQUF1QztBQUNyQyxRQUFJO0FBQ0Y7QUFDQSxVQUFJLENBQUMsS0FBSyxRQUFMLEVBQUQsSUFBb0IsTUFBcEIsSUFBOEIsR0FBbEMsRUFBdUM7QUFDckMsWUFBSSxnQkFBZ0IsQ0FBcEIsRUFBdUI7QUFDckIsZUFBSyxJQUFMLENBQVUsaUJBQU8sbUJBQWpCO0FBQ0Q7O0FBRUQ7O0FBRUEsWUFBSSxTQUFKLENBQ0UsVUFBVSxhQUFWLEVBREYsRUFFRSxDQUZGLEVBR0UsQ0FIRixFQUlFLE9BQU8sS0FKVCxFQUtFLE9BQU8sTUFMVDs7QUFRQSwwQkFBa0IsTUFBTSxRQUFOLEVBQWxCO0FBQ0EsZ0NBQXdCLGdCQUFnQixNQUF4Qzs7QUFFQSxZQUFJLHdCQUF3QixDQUE1QixFQUErQjtBQUM3QixnQkFBTSx5QkFBZSxNQUFmLENBQXNCLGdDQUF0QixFQUF3RCxPQUF4RCxDQUFOO0FBQ0Q7O0FBRUQsb0JBQVkscUJBQVo7O0FBRUEsb0JBQVksZUFBWixFQUE2QjtBQUMzQix1QkFBYSxXQURjO0FBRTNCLDZCQUFtQjtBQUZRLFNBQTdCOztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFRLFVBQVIsQ0FBbUIsRUFBQyxhQUFhLFdBQWQsRUFBbkI7QUFDRDtBQUNGLEtBekNELENBeUNFLE9BQU8sR0FBUCxFQUFZO0FBQ1osV0FBSyxJQUFMLENBQVUsaUJBQU8sS0FBakIsRUFBd0IsR0FBeEI7QUFDRDtBQUNGOztBQUVELE9BQUssTUFBTCxHQUFjLFlBQVk7QUFDeEIsUUFBSSxRQUFKLEVBQWM7QUFDWixhQUFPLEtBQVA7QUFDRDs7QUFFRDtBQUNBLFFBQUksQ0FBQyxTQUFMLEVBQWdCO0FBQ2QsWUFBTSw2Q0FBTjs7QUFFQSxpQkFBVyxZQUFZO0FBQ3JCLGFBQUssSUFBTCxDQUFVLGlCQUFPLGdCQUFqQixFQUFtQyxLQUFLLE1BQXhDO0FBQ0QsT0FGRDs7QUFJQSxhQUFPLEtBQVA7QUFDRDs7QUFFRCxRQUFJO0FBQ0YsZUFBUyxVQUFVLFlBQVYsRUFBVDtBQUNELEtBRkQsQ0FFRSxPQUFPLEdBQVAsRUFBWTtBQUNaLFdBQUssSUFBTCxDQUNFLGlCQUFPLEtBRFQsRUFFRSx5QkFBZSxNQUFmLENBQXNCLDBCQUF0QixFQUFrRCxHQUFsRCxFQUF1RCxPQUF2RCxDQUZGOztBQUtBLGFBQU8sS0FBUDtBQUNEOztBQUVELFVBQU0sT0FBTyxVQUFQLENBQWtCLElBQWxCLENBQU47O0FBRUEsUUFBSSxDQUFDLE9BQU8sS0FBWixFQUFtQjtBQUNqQixXQUFLLElBQUwsQ0FDRSxpQkFBTyxLQURULEVBRUUseUJBQWUsTUFBZixDQUFzQiw4QkFBdEIsRUFBc0QsT0FBdEQsQ0FGRjs7QUFLQSxhQUFPLEtBQVA7QUFDRDs7QUFFRCxRQUFJLENBQUMsT0FBTyxNQUFaLEVBQW9CO0FBQ2xCLFdBQUssSUFBTCxDQUNFLGlCQUFPLEtBRFQsRUFFRSx5QkFBZSxNQUFmLENBQXNCLCtCQUF0QixFQUF1RCxPQUF2RCxDQUZGOztBQUtBLGFBQU8sS0FBUDtBQUNEOztBQUVELGVBQVcsQ0FBWDs7QUFFQSxZQUFRLDZCQUFVLE1BQVYsRUFBa0IsT0FBbEIsQ0FBUjs7QUFFQSxVQUFNLG9CQUFOO0FBQ0EsY0FBVSxNQUFWOztBQUVBLFNBQUssSUFBTCxDQUFVLGlCQUFPLFNBQWpCLEVBQTRCLFdBQTVCOztBQUVBLFNBQUssS0FBTDtBQUNELEdBekREOztBQTJEQSxXQUFTLHVCQUFULENBQWtDLE1BQWxDLEVBQTBDO0FBQ3hDO0FBQ0E7QUFDQSxRQUFJLElBQUosRUFBVTtBQUNSLFVBQU0sY0FBYyxLQUFLLFdBQUwsRUFBcEI7O0FBRUEsV0FBSyxJQUFMO0FBQ0EsV0FBSyw4QkFBTCxDQUFvQyxNQUFwQzs7QUFFQSxVQUFJLFdBQUosRUFBaUI7QUFDZixhQUFLLEtBQUw7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsV0FBUywyQkFBVCxHQUF3QztBQUN0QyxVQUFNLHlDQUFOOztBQUVBLDRCQUF3Qiw0QkFBeEI7QUFDRDs7QUFFRCxXQUFTLGdCQUFULEdBQTZCO0FBQzNCLFVBQU0sOEJBQU47O0FBRUEsUUFBTSxpQkFBaUIsTUFBTSxRQUFRLEtBQVIsQ0FBYyxHQUEzQzs7QUFFQSxRQUFJLGlCQUFpQixDQUFyQjtBQUNBLFFBQUksS0FBSjs7QUFFQSxhQUFTLEdBQVQsQ0FBYyxFQUFkLEVBQWtCO0FBQ2hCLGFBQU8sV0FDTCxZQUFZO0FBQ1YsZ0JBQVEsS0FBSyxHQUFMLEVBQVI7QUFDQTtBQUNBLHlCQUFpQixLQUFLLEdBQUwsS0FBYSxLQUE5QjtBQUNELE9BTEk7QUFNTDtBQUNBO0FBQ0E7QUFDQSx1QkFBaUIsY0FUWixDQUFQO0FBV0Q7O0FBRUQsYUFBUyxNQUFULENBQWlCLEVBQWpCLEVBQXFCO0FBQ25CLG1CQUFhLEVBQWI7QUFDRDs7QUFFRCw0QkFBd0I7QUFDdEIsNkJBQXVCLEdBREQ7QUFFdEIsNEJBQXNCO0FBRkEsS0FBeEI7QUFJRDs7QUFFRCxXQUFTLFlBQVQsR0FBeUI7QUFDdkIsc0JBQWtCLDJCQUFFLFdBQVcsUUFBUSxTQUFSLENBQWtCLGNBQS9CLENBQWxCO0FBQ0EsWUFBUSxXQUFSLENBQW9CLGVBQXBCO0FBQ0Q7O0FBRUQsV0FBUyxpQkFBVCxHQUE4QjtBQUM1QixRQUFJLFFBQVEsZUFBUixFQUFKLEVBQStCO0FBQzdCLHNCQUFnQixLQUFoQixHQUF3QixLQUFLLGdCQUFMLENBQXNCLElBQXRCLENBQXhCO0FBQ0Q7O0FBRUQsUUFBSSxRQUFRLGdCQUFSLEVBQUosRUFBZ0M7QUFDOUIsc0JBQWdCLE1BQWhCLEdBQXlCLEtBQUssaUJBQUwsQ0FBdUIsSUFBdkIsQ0FBekI7QUFDRDtBQUNGOztBQUVELFdBQVMsVUFBVCxHQUF1QjtBQUNyQixVQUFNLHdCQUFOOztBQUVBLFNBQ0csRUFESCxDQUNNLGlCQUFPLFVBRGIsRUFDeUIsWUFBWTtBQUNqQyxtQkFBYSxJQUFiO0FBQ0QsS0FISCxFQUlHLEVBSkgsQ0FJTSxpQkFBTyxTQUpiLEVBSXdCLFlBQVk7QUFDaEMsbUJBQWEsS0FBYjtBQUNBLFdBQUssTUFBTDtBQUNELEtBUEgsRUFRRyxFQVJILENBUU0saUJBQU8sUUFSYixFQVF1QixZQUFZO0FBQy9CLGlCQUFXLElBQVg7QUFDQTtBQUNELEtBWEgsRUFZRyxFQVpILENBWU0saUJBQU8sSUFaYixFQVltQixZQUFZO0FBQzNCLFdBQUssSUFBTDtBQUNELEtBZEgsRUFlRyxFQWZILENBZU0saUJBQU8sZ0JBZmIsRUFlK0IsWUFBWTtBQUN2QztBQUNELEtBakJILEVBa0JHLEVBbEJILENBa0JNLGlCQUFPLGVBbEJiLEVBa0I4QixZQUFZO0FBQ3RDO0FBQ0QsS0FwQkgsRUFxQkcsRUFyQkgsQ0FxQk0saUJBQU8sY0FyQmIsRUFxQjZCLFlBQVk7QUFDckM7QUFDRCxLQXZCSCxFQXdCRyxFQXhCSCxDQXdCTSxpQkFBTyxTQXhCYixFQXdCd0IsWUFBWTtBQUNoQztBQUNELEtBMUJILEVBMkJHLEVBM0JILENBMkJNLGlCQUFPLE9BM0JiLEVBMkJzQixZQUFZO0FBQzlCO0FBQ0QsS0E3Qkg7QUE4QkQ7O0FBRUQsT0FBSyxLQUFMLEdBQWEsWUFBWTtBQUN2QixRQUFJLE1BQU0sUUFBUSwwQkFBUixFQUFWOztBQUVBLFFBQUksQ0FBQyxHQUFMLEVBQVU7QUFDUixZQUFNLFFBQVEsZ0JBQVIsRUFBTjtBQUNEOztBQUVELFFBQUksR0FBSixFQUFTO0FBQ1AsV0FBSyxJQUFMLENBQVUsaUJBQU8sS0FBakIsRUFBd0IsR0FBeEI7QUFDRCxLQUZELE1BRU87QUFDTCx3QkFBa0IsUUFBUSxhQUFSLENBQXNCLFdBQVcsUUFBUSxTQUFSLENBQWtCLGNBQW5ELENBQWxCOztBQUVBLFVBQUksQ0FBQyxlQUFMLEVBQXNCO0FBQ3BCO0FBQ0Q7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBLHNCQUFnQixLQUFoQixHQUF3QixJQUF4Qjs7QUFFQTtBQUNBLHNCQUFnQixZQUFoQixDQUE2QixhQUE3QixFQUE0QyxJQUE1QztBQUNBLHNCQUFnQixZQUFoQixDQUE2QixvQkFBN0IsRUFBbUQsb0JBQW5EOztBQUVBLFVBQUksQ0FBQyxTQUFMLEVBQWdCO0FBQ2Qsb0JBQVksd0JBQWMsSUFBZCxFQUFvQixPQUFwQixDQUFaO0FBQ0Q7O0FBRUQ7O0FBRUEsVUFBSSxDQUFDLEtBQUwsRUFBWTtBQUNWOztBQUVBLFlBQUksQ0FBQyxTQUFMLEVBQWdCO0FBQ2Q7QUFDRCxTQUZELE1BRU87QUFDTDtBQUNEO0FBQ0YsT0FSRCxNQVFPO0FBQ0w7QUFDRDs7QUFFRCxjQUFRLElBQVI7QUFDRDtBQUNGLEdBOUNEOztBQWdEQSxPQUFLLFFBQUwsR0FBZ0IsWUFBWTtBQUMxQixXQUFPLGFBQWEsVUFBVSxRQUFWLEVBQWIsSUFBcUMsQ0FBQyxLQUFLLFNBQUwsRUFBN0M7QUFDRCxHQUZEOztBQUlBLE9BQUssV0FBTCxHQUFtQixZQUFZO0FBQzdCO0FBQ0E7QUFDQSxXQUFPLFFBQVEsS0FBSyxTQUFMLEVBQVIsSUFBNEIsQ0FBQyxLQUFLLFFBQUwsRUFBN0IsSUFBZ0QsQ0FBQyxhQUFqRCxJQUFrRSxNQUFsRSxJQUE0RSxDQUFDLE9BQU8sU0FBM0Y7QUFDRCxHQUpEOztBQU1BLE9BQUssSUFBTCxHQUFZLFlBQVk7QUFDdEIsUUFBSSxDQUFDLFVBQUwsRUFBaUI7QUFDZix5QkFBbUIsc0JBQU8sZUFBUCxFQUF3QixJQUF4QixDQUFuQjs7QUFFQTtBQUNBO0FBQ0Q7QUFDRixHQVBEOztBQVNBLE9BQUssVUFBTCxHQUFrQixZQUFZO0FBQzVCLFdBQU8sUUFBUDtBQUNELEdBRkQ7O0FBSUE7QUFDQTs7QUFFQSxPQUFLLGdCQUFMLEdBQXdCLFVBQVUsVUFBVixFQUFzQjtBQUM1QyxRQUFJLGFBQWEsVUFBVSxhQUFWLEVBQWpCLEVBQTRDO0FBQzFDLGFBQU8sVUFBVSxXQUFWLENBQXNCLFVBQXRCLENBQVA7QUFDRCxLQUZELE1BRU8sSUFBSSxjQUFjLFFBQVEsZUFBUixFQUFsQixFQUE2QztBQUNsRCxhQUFPLEtBQUssVUFBTCxDQUFnQixRQUFRLEtBQVIsQ0FBYyxLQUE5QixDQUFQO0FBQ0Q7QUFDRixHQU5EOztBQVFBLE9BQUssaUJBQUwsR0FBeUIsVUFBVSxVQUFWLEVBQXNCO0FBQzdDLFFBQUksU0FBSixFQUFlO0FBQ2IsYUFBTyxVQUFVLFlBQVYsQ0FBdUIsVUFBdkIsQ0FBUDtBQUNELEtBRkQsTUFFTyxJQUFJLGNBQWMsUUFBUSxnQkFBUixFQUFsQixFQUE4QztBQUNuRCxhQUFPLEtBQUssZUFBTCxDQUFxQixVQUFyQixDQUFQO0FBQ0Q7QUFDRixHQU5EOztBQVFBLFdBQVMsUUFBVCxHQUFxQjtBQUNuQixRQUFJLEtBQUo7O0FBRUEsUUFBSSxTQUFKLEVBQWU7QUFDYixVQUFNLHNCQUFzQixVQUFVLGFBQVYsRUFBNUI7O0FBRUE7QUFDQSxVQUFJLHNCQUFzQixDQUExQixFQUE2QjtBQUMzQjtBQUNBLGdCQUFRLFFBQVEsUUFBUixFQUFSO0FBQ0QsT0FIRCxNQUdPO0FBQ0wsZ0JBQVEsVUFBVSxjQUFWLEtBQTZCLG1CQUFyQztBQUNEO0FBQ0YsS0FWRCxNQVVPO0FBQ0wsY0FBUSxRQUFRLFFBQVIsRUFBUjtBQUNEOztBQUVELFdBQU8sS0FBUDtBQUNEOztBQUVELE9BQUssY0FBTCxHQUFzQixVQUFVLFVBQVYsRUFBc0I7QUFDMUMsUUFBSSxXQUFKOztBQUVBLFFBQUksU0FBSixFQUFlO0FBQ2Isb0JBQWMsVUFBVSxjQUFWLEVBQWQ7QUFDRCxLQUZELE1BRU8sSUFBSSxlQUFKLEVBQXFCO0FBQzFCLG9CQUFjLGdCQUFnQixXQUFoQixJQUErQixnQkFBZ0IsTUFBN0Q7QUFDRDs7QUFFRCxXQUFPLFFBQVEsY0FBUixDQUF1QjtBQUM1QixrQkFBWSxVQURnQjtBQUU1QixhQUFPLFVBRnFCO0FBRzVCLG1CQUFhO0FBSGUsS0FBdkIsQ0FBUDtBQUtELEdBZEQ7O0FBZ0JBLE9BQUssZUFBTCxHQUF1QixVQUFVLFVBQVYsRUFBc0I7QUFDM0MsUUFBSSxVQUFKOztBQUVBLFFBQUksU0FBSixFQUFlO0FBQ2IsbUJBQWEsVUFBVSxhQUFWLEVBQWI7QUFDRCxLQUZELE1BRU8sSUFBSSxlQUFKLEVBQXFCO0FBQzFCLG1CQUFhLGdCQUFnQixVQUFoQixJQUE4QixnQkFBZ0IsS0FBM0Q7QUFDRDs7QUFFRCxXQUFPLFFBQVEsZUFBUixDQUF3QjtBQUM3QixrQkFBWSxVQURpQjtBQUU3QixhQUFPLFVBRnNCO0FBRzdCLGtCQUFZO0FBSGlCLEtBQXhCLENBQVA7QUFLRCxHQWREOztBQWdCQSxPQUFLLHFCQUFMLEdBQTZCLFlBQVk7QUFDdkMsV0FBTyxlQUFQO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLFdBQUwsR0FBbUIsWUFBWTtBQUM3QixXQUFPLFNBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssWUFBTCxHQUFvQixZQUFZO0FBQzlCLFdBQU8sVUFBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxVQUFMLEdBQWtCLFVBQVUsS0FBVixFQUFpQjtBQUNqQyxXQUFPLFFBQVEsVUFBUixDQUFtQixLQUFuQixDQUFQO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLFdBQUwsR0FBbUIsVUFBVSxNQUFWLEVBQWtCO0FBQ25DLFdBQU8sUUFBUSxXQUFSLENBQW9CLE1BQXBCLENBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssaUJBQUwsR0FBeUIsWUFBWTtBQUNuQyxXQUFPLGVBQVA7QUFDRCxHQUZEO0FBR0QsQ0Evc0NEOztBQWl0Q0EsZUFBSyxRQUFMLENBQWMsUUFBZDs7a0JBRWUsUTs7Ozs7Ozs7Ozs7QUN2dUNmOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7Ozs7O0FBRUEsSUFBTSxTQUFTLFNBQVQsTUFBUyxDQUFVLGFBQVYsRUFBeUIsT0FBekIsRUFBa0M7QUFDL0MseUJBQWEsSUFBYixDQUFrQixJQUFsQixFQUF3QixPQUF4QixFQUFpQyxRQUFqQzs7QUFFQSxNQUFNLE9BQU8sSUFBYjtBQUNBLE1BQU0sVUFBVSxzQkFBWSxPQUFaLENBQWhCO0FBQ0EsTUFBTSxRQUFRLFFBQVEsS0FBdEI7O0FBRUEsTUFBSSxLQUFKO0FBQ0EsTUFBSSxhQUFKO0FBQ0EsTUFBSSxTQUFKOztBQUVBLFdBQVMsWUFBVCxHQUF5QjtBQUN2QixVQUFNLHdCQUFOOztBQUVBLG9CQUFnQiwyQkFBRSxXQUFXLFFBQVEsU0FBUixDQUFrQixXQUEvQixDQUFoQjs7QUFFQSxRQUFJLENBQUMsY0FBYyxZQUFuQixFQUFpQztBQUMvQixZQUFNLHlCQUFlLE1BQWYsQ0FBc0Isd0JBQXRCLEVBQWdELE9BQWhELENBQU47QUFDRDs7QUFFRCxrQkFBYyxXQUFkLENBQTBCLGFBQTFCO0FBQ0Q7O0FBRUQsV0FBUyxZQUFULEdBQXlCO0FBQ3ZCLFdBQU8sY0FBYyxXQUFkLENBQTBCLElBQTFCLEtBQW1DLGdCQUExQztBQUNEOztBQUVELFdBQVMsY0FBVCxDQUF5QixZQUF6QixFQUF1QztBQUNyQyxRQUFJLGtCQUFKOztBQUVBLFdBQU8sSUFBUCxDQUFZLFlBQVosRUFBMEIsT0FBMUIsQ0FBa0MsVUFBVSxTQUFWLEVBQXFCO0FBQ3JELDJCQUFxQixjQUFjLGFBQWQsQ0FBNEIsTUFBTSxTQUFsQyxDQUFyQjs7QUFFQSxVQUFJLGtCQUFKLEVBQXdCO0FBQ3RCLDJCQUFtQixTQUFuQixHQUErQixhQUFhLFNBQWIsQ0FBL0I7QUFDRDtBQUNGLEtBTkQ7QUFPRDs7QUFFRCxXQUFTLGlCQUFULENBQTRCLE9BQTVCLEVBQXFDO0FBQ25DLFFBQUksS0FBSixFQUFXLE1BQVg7O0FBRUEsUUFBSSxhQUFhLFVBQVUsV0FBM0IsRUFBd0M7QUFDdEMsY0FBUSxVQUFVLFdBQWxCO0FBQ0QsS0FGRCxNQUVPLElBQUksY0FBYyxjQUFsQixFQUFrQztBQUN2QyxjQUFRLGNBQWMsY0FBZCxDQUE2QixPQUE3QixDQUFSO0FBQ0Q7O0FBRUQsUUFBSSxhQUFhLFVBQVUsWUFBM0IsRUFBeUM7QUFDdkMsZUFBUyxVQUFVLFlBQW5CO0FBQ0QsS0FGRCxNQUVPLElBQUksY0FBYyxlQUFsQixFQUFtQztBQUN4QyxlQUFTLGNBQWMsZUFBZCxDQUE4QixPQUE5QixDQUFUO0FBQ0Q7O0FBRUQsUUFBSSxRQUFRLENBQVosRUFBZTtBQUNiLG9CQUFjLEtBQWQsQ0FBb0IsS0FBcEIsR0FBNEIsUUFBUSxJQUFwQztBQUNELEtBRkQsTUFFTztBQUNMLG9CQUFjLEtBQWQsQ0FBb0IsS0FBcEIsR0FBNEIsTUFBNUI7QUFDRDs7QUFFRCxRQUFJLFNBQVMsQ0FBYixFQUFnQjtBQUNkLG9CQUFjLEtBQWQsQ0FBb0IsTUFBcEIsR0FBNkIsU0FBUyxJQUF0QztBQUNELEtBRkQsTUFFTztBQUNMLG9CQUFjLEtBQWQsQ0FBb0IsTUFBcEIsR0FBNkIsTUFBN0I7QUFDRDtBQUNGOztBQUVELE9BQUssWUFBTCxHQUFvQixVQUFVLFlBQVYsRUFBd0I7QUFDMUMsZ0JBQVksWUFBWjs7QUFFQSxRQUFJLFNBQUosRUFBZTtBQUNiLFVBQUksVUFBVSxJQUFkLEVBQW9CO0FBQ2xCLGFBQUssYUFBTCxDQUFtQixVQUFVLElBQTdCO0FBQ0Q7O0FBRUQsVUFBSSxVQUFVLEdBQWQsRUFBbUI7QUFDakIsYUFBSyxZQUFMLENBQWtCLFVBQVUsR0FBNUI7QUFDRDs7QUFFRCxVQUFJLFVBQVUsTUFBZCxFQUFzQjtBQUNwQixzQkFBYyxZQUFkLENBQTJCLFFBQTNCLEVBQXFDLFVBQVUsTUFBL0M7QUFDRDs7QUFFRCxxQkFBZSxTQUFmO0FBQ0Q7O0FBRUQsUUFBTSxXQUFXLGFBQWEsVUFBVSxjQUF2QixJQUF5QyxVQUFVLGNBQVYsQ0FBeUIsVUFBekIsR0FBc0MsQ0FBaEc7O0FBRUEsU0FBSyxJQUFMLENBQ0UsYUFBYSxVQUFVLEtBRHpCLEVBRUUsYUFBYSxVQUFVLE1BRnpCLEVBR0UsUUFIRjtBQUtELEdBMUJEOztBQTRCQSxPQUFLLElBQUwsR0FBWSxVQUFVLGFBQVYsRUFBeUIsY0FBekIsRUFBeUMsUUFBekMsRUFBbUQ7QUFDN0QsUUFBSSxTQUFKLEVBQWU7QUFDYix3QkFBa0I7QUFDaEIsb0JBQVksSUFESTtBQUVoQjtBQUNBLG9CQUFZLGlCQUFpQixjQUFjLFVBSDNCO0FBSWhCLHFCQUFhLGtCQUFrQixjQUFjO0FBSjdCLE9BQWxCO0FBTUQ7O0FBRUQsMEJBQU8sYUFBUCxFQUFzQixLQUF0Qjs7QUFFQTtBQUNBLFFBQUksYUFBSixFQUFtQjtBQUNqQixVQUFJLGNBQWMsS0FBbEIsRUFBeUI7QUFDdkIsOEJBQU8sYUFBUCxFQUFzQixLQUF0QjtBQUNELE9BRkQsTUFFTyxJQUFJLGNBQWMsSUFBbEIsRUFBd0I7QUFDN0Isc0JBQWMsSUFBZDtBQUNEO0FBQ0Y7O0FBRUQsUUFBSSxRQUFKLEVBQWM7QUFDWjtBQUNBO0FBQ0Esb0JBQWMsWUFBZCxDQUEyQixRQUEzQixFQUFxQyxDQUFyQztBQUNELEtBSkQsTUFJTyxJQUFJLENBQUMsUUFBUSxjQUFSLEVBQUwsRUFBK0I7QUFDcEMsb0JBQWMsWUFBZCxDQUEyQixPQUEzQixFQUFvQyxJQUFwQztBQUNEOztBQUVEO0FBQ0E7QUFDQSxtQ0FBcUIsaUNBQWtCLGFBQWxCLEVBQWlDO0FBQ3BELFlBQU07QUFEOEMsS0FBakMsQ0FBckI7O0FBSUE7QUFDQSxrQkFBYyxJQUFkOztBQUVBLFFBQUksQ0FBQyxTQUFMLEVBQWdCO0FBQ2QsV0FBSyxJQUFMLENBQVUsaUJBQU8sYUFBakI7QUFDRCxLQUZELE1BRU87QUFDTCxXQUFLLElBQUwsQ0FBVSxpQkFBTyxZQUFqQjtBQUNEO0FBQ0YsR0EzQ0Q7O0FBNkNBLE9BQUssS0FBTCxHQUFhLFlBQVk7QUFDdkIsVUFBTSxpQkFBTjs7QUFFQSxvQkFBZ0IsY0FBYyxhQUFkLENBQTRCLFdBQVcsUUFBUSxTQUFSLENBQWtCLFdBQXpELENBQWhCOztBQUVBLFFBQUksQ0FBQyxhQUFMLEVBQW9CO0FBQ2xCO0FBQ0Q7O0FBRUQsU0FBSyxJQUFMOztBQUVBLGtCQUFjLFlBQWQsQ0FBMkIsVUFBM0IsRUFBdUMsSUFBdkM7QUFDQSxrQkFBYyxZQUFkLENBQTJCLFdBQTNCLEVBQXdDLElBQXhDO0FBQ0Esa0JBQWMsWUFBZCxDQUEyQixZQUEzQixFQUF5QyxJQUF6QztBQUNBLGtCQUFjLFlBQWQsQ0FBMkIsYUFBM0IsRUFBMEMsSUFBMUM7QUFDQSxrQkFBYyxZQUFkLENBQTJCLG9CQUEzQixFQUFpRCxvQkFBakQ7QUFDQSxrQkFBYyxZQUFkLENBQTJCLFVBQTNCLEVBQXVDLFVBQXZDO0FBQ0Esa0JBQWMsWUFBZCxDQUEyQixTQUEzQixFQUFzQyxNQUF0Qzs7QUFFQSxRQUFJLENBQUMsS0FBTCxFQUFZO0FBQ1YsVUFBSSxDQUFDLGNBQUwsRUFBcUI7QUFDbkIsYUFBSyxFQUFMLENBQVEsaUJBQU8sT0FBZixFQUF3QixVQUFVLEdBQVYsRUFBZSxhQUFmLEVBQThCLGNBQTlCLEVBQThDO0FBQ3BFLGVBQUssSUFBTCxDQUFVLGFBQVYsRUFBeUIsY0FBekI7QUFDRCxTQUZEO0FBR0Q7O0FBRUQ7QUFDQTtBQUNBLGlEQUE0QixhQUE1QixFQUEyQyxZQUEzQyxFQUF5RCxVQUFVLENBQVYsRUFBYTtBQUNwRSxhQUFLLEVBQUUsY0FBRixFQUFMOztBQUVBLFlBQUksS0FBSyxNQUFULEVBQWlCO0FBQ2Y7QUFDRCxTQUZELE1BRU87QUFDTDtBQUNEO0FBQ0YsT0FSRDs7QUFVQSxvQkFBYyxPQUFkLEdBQXdCLFVBQVUsQ0FBVixFQUFhO0FBQ25DLGFBQUssRUFBRSxjQUFGLEVBQUw7O0FBRUEsWUFBSSxLQUFLLE1BQVQsRUFBaUI7QUFDZjtBQUNELFNBRkQsTUFFTztBQUNMO0FBQ0Q7QUFDRixPQVJEO0FBU0Q7O0FBRUQsWUFBUSxJQUFSOztBQUVBLFVBQU0sZ0JBQU47QUFDRCxHQXBERDs7QUFzREEsT0FBSyxNQUFMLEdBQWMsWUFBWTtBQUN4QixZQUFRLEtBQVI7QUFDRCxHQUZEOztBQUlBLE9BQUssY0FBTCxHQUFzQixVQUFVLElBQVYsRUFBZ0I7QUFDcEMsUUFBTSxVQUFVLGNBQWMsb0JBQWQsQ0FBbUMsUUFBbkMsQ0FBaEI7QUFDQSxRQUFNLElBQUksUUFBUSxNQUFsQjtBQUNBLFFBQU0sWUFBWSxXQUFXLElBQTdCOztBQUVBLFFBQUksTUFBSjs7QUFFQSxRQUFJLENBQUosRUFBTztBQUNMLFVBQUksQ0FBSjs7QUFFQSxXQUFLLElBQUksQ0FBVCxFQUFZLElBQUksQ0FBSixJQUFTLENBQUMsTUFBdEIsRUFBOEIsR0FBOUIsRUFBbUM7QUFDakMsWUFBSSxRQUFRLENBQVIsRUFBVyxZQUFYLENBQXdCLE1BQXhCLE1BQW9DLFNBQXhDLEVBQW1EO0FBQ2pELG1CQUFTLFFBQVEsQ0FBUixDQUFUO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFdBQU8sTUFBUDtBQUNELEdBbEJEOztBQW9CQSxXQUFTLGNBQVQsQ0FBeUIsSUFBekIsRUFBK0IsR0FBL0IsRUFBb0MsU0FBcEMsRUFBK0M7QUFDN0MsUUFBSSxTQUFTLEtBQUssY0FBTCxDQUFvQixJQUFwQixDQUFiOztBQUVBLFFBQUksT0FBTyxTQUFYLEVBQXNCO0FBQ3BCLGFBQU8sTUFBTSxLQUFLLEdBQUwsRUFBYjtBQUNEOztBQUVELFFBQUksQ0FBQyxNQUFMLEVBQWE7QUFDWCxVQUFJLEdBQUosRUFBUztBQUNQLGlCQUFTLDJCQUFFLFFBQUYsRUFBWTtBQUNuQixlQUFLLEdBRGM7QUFFbkIsZ0JBQU0sV0FBVztBQUZFLFNBQVosQ0FBVDs7QUFLQSxzQkFBYyxXQUFkLENBQTBCLE1BQTFCO0FBQ0Q7QUFDRixLQVRELE1BU087QUFDTCxVQUFJLEdBQUosRUFBUztBQUNQLGVBQU8sWUFBUCxDQUFvQixLQUFwQixFQUEyQixHQUEzQjtBQUNELE9BRkQsTUFFTztBQUNMLHNCQUFjLFdBQWQsQ0FBMEIsTUFBMUI7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsT0FBSyxZQUFMLEdBQW9CLFVBQVUsR0FBVixFQUFlLFNBQWYsRUFBMEI7QUFDNUMsbUJBQWUsS0FBZixFQUFzQixHQUF0QixFQUEyQixTQUEzQjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxhQUFMLEdBQXFCLFVBQVUsR0FBVixFQUFlLFNBQWYsRUFBMEI7QUFDN0MsbUJBQWUsTUFBZixFQUF1QixHQUF2QixFQUE0QixTQUE1QjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxZQUFMLEdBQW9CLFlBQVk7QUFDOUIsV0FBTyxRQUFRLFlBQVIsQ0FBcUIsYUFBckIsQ0FBUDtBQUNELEdBRkQ7O0FBSUEsV0FBUyxLQUFULENBQWdCLEVBQWhCLEVBQW9CO0FBQ2xCO0FBQ0E7QUFDQSxlQUFXLFlBQU07QUFDZixVQUFJO0FBQ0Ysc0JBQWMsS0FBZDtBQUNELE9BRkQsQ0FFRSxPQUFPLEdBQVAsRUFBWTtBQUNaO0FBQ0EsZ0JBQVEsTUFBUixDQUFlLElBQWYsQ0FBb0IsR0FBcEI7QUFDRDs7QUFFRCxZQUFNLElBQU47QUFDRCxLQVRELEVBU0csRUFUSDtBQVVEOztBQUVELFdBQVMsSUFBVCxHQUFpQjtBQUNmLFFBQUksaUJBQWlCLGNBQWMsSUFBbkMsRUFBeUM7QUFDdkMsVUFBTSxJQUFJLGNBQWMsSUFBZCxFQUFWOztBQUVBLFVBQUksS0FBTSxPQUFPLE9BQVAsS0FBbUIsV0FBekIsSUFBMEMsYUFBYSxPQUEzRCxFQUFxRTtBQUNuRSxVQUFFLEtBQUYsQ0FBUSxVQUFDLE1BQUQsRUFBWTtBQUNsQixrQkFBUSxNQUFSLENBQWUsSUFBZixDQUFvQixtQ0FBcEIsRUFBeUQsTUFBekQ7QUFDRCxTQUZEO0FBR0Q7QUFDRjtBQUNGOztBQUVELE9BQUssS0FBTCxHQUFhLFVBQVUsRUFBVixFQUFjO0FBQ3pCO0FBQ0EsVUFBTSxZQUFNO0FBQ1YsVUFBSSxhQUFKLEVBQW1CO0FBQ2pCLGFBQUssWUFBTCxDQUFrQixJQUFsQjtBQUNBLGFBQUssYUFBTCxDQUFtQixJQUFuQjtBQUNEOztBQUVELFlBQU0sSUFBTjtBQUNELEtBUEQ7QUFRRCxHQVZEOztBQVlBLE9BQUssSUFBTCxHQUFZLFlBQVk7QUFDdEIsUUFBSSxjQUFKLEVBQW9CO0FBQ2xCLDRCQUFPLGFBQVAsRUFBc0IsSUFBdEI7QUFDRCxLQUZELE1BRU87QUFDTCx1QkFBaUIsc0JBQU8sYUFBUCxFQUFzQixJQUF0QixDQUFqQjtBQUNEO0FBQ0YsR0FORDs7QUFRQSxPQUFLLE9BQUwsR0FBZSxZQUFZO0FBQ3pCLFdBQU8saUJBQWlCLENBQUMsc0JBQU8sYUFBUCxDQUF6QjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxnQkFBTCxHQUF3QixZQUFZO0FBQ2xDLFdBQU8sYUFBUDtBQUNELEdBRkQ7QUFHRCxDQXJURDs7QUF1VEEsZUFBSyxRQUFMLENBQWMsTUFBZDs7a0JBRWUsTTs7Ozs7Ozs7O2tCQ3pUQSxVQUFVLFFBQVYsRUFBb0IsT0FBcEIsRUFBNkI7QUFDMUMseUJBQWEsSUFBYixDQUFrQixJQUFsQixFQUF3QixPQUF4QixFQUFpQyxXQUFqQzs7QUFFQSxNQUFNLHFCQUFxQixZQUFZLFNBQVMscUJBQVQsRUFBdkM7QUFDQSxNQUFNLFVBQVUsc0JBQVksT0FBWixDQUFoQjtBQUNBLE1BQU0sT0FBTyxJQUFiOztBQUVBLE1BQUksU0FBUyxLQUFiO0FBQ0EsTUFBSSxTQUFTLEtBQWI7O0FBRUEsTUFBSSxhQUFKO0FBQ0EsTUFBSSxtQkFBSjs7QUFFQSxXQUFTLGlCQUFULENBQTRCLE1BQTVCLEVBQW9DO0FBQ2xDLDBCQUFzQixNQUF0Qjs7QUFFQSxRQUFJLE9BQU8sbUJBQW1CLFNBQTFCLEtBQXdDLFdBQTVDLEVBQXlEO0FBQ3ZELHlCQUFtQixTQUFuQixHQUErQixNQUEvQjtBQUNELEtBRkQsTUFFTyxJQUFJLE9BQU8sbUJBQW1CLEdBQTFCLEtBQWtDLFdBQXRDLEVBQW1EO0FBQ3hELFVBQU0sTUFBTSxPQUFPLEdBQVAsSUFBYyxPQUFPLFNBQWpDO0FBQ0EseUJBQW1CLEdBQW5CLEdBQXlCLElBQUksZUFBSixDQUFvQixNQUFwQixLQUErQixNQUF4RDtBQUNELEtBSE0sTUFHQTtBQUNMLFlBQU0seUJBQWUsTUFBZixDQUNKLG9DQURJLEVBRUosa0NBRkksRUFHSixPQUhJLENBQU47QUFLRDtBQUNGOztBQUVELFdBQVMsZUFBVCxDQUEwQixnQkFBMUIsRUFBNEM7QUFDMUMsUUFBSSxnQkFBSixFQUFzQjtBQUNwQix3QkFBa0IsZ0JBQWxCO0FBQ0QsS0FGRCxNQUVPO0FBQ0wseUJBQW1CLGVBQW5CLENBQW1DLFdBQW5DO0FBQ0EseUJBQW1CLGVBQW5CLENBQW1DLEtBQW5DOztBQUVBLDRCQUFzQixJQUF0QjtBQUNEO0FBQ0Y7O0FBRUQsV0FBUyxlQUFULEdBQTRCO0FBQzFCLFFBQUksbUJBQW1CLFlBQXZCLEVBQXFDO0FBQ25DLGFBQU8sbUJBQW1CLFlBQTFCO0FBQ0QsS0FGRCxNQUVPLElBQUksbUJBQW1CLFNBQXZCLEVBQWtDO0FBQ3ZDLGFBQU8sbUJBQW1CLFNBQTFCO0FBQ0QsS0FGTSxNQUVBO0FBQ0wsYUFBTyxtQkFBUDtBQUNEO0FBQ0Y7O0FBRUQsV0FBUyxRQUFULEdBQXFCO0FBQ25CLFFBQUksbUJBQW1CLEtBQXZCLEVBQThCO0FBQzVCLGFBQU8sbUJBQW1CLEtBQTFCO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsVUFBTSxlQUFlLGlCQUFyQjtBQUNBLGFBQU8sZ0JBQWdCLGFBQWEsS0FBcEM7QUFDRDtBQUNGOztBQUVELFdBQVMsb0JBQVQsR0FBaUM7QUFDL0IsUUFBSyxtQkFBbUIsVUFBbkIsSUFBaUMsbUJBQW1CLFVBQW5CLEdBQWdDLENBQWxFLElBQ0MsbUJBQW1CLE1BQW5CLElBQTZCLG1CQUFtQixNQUFuQixHQUE0QixDQUQ5RCxFQUNrRTtBQUNoRSxhQUFPLElBQVA7QUFDRDtBQUNGOztBQUVELFdBQVMsU0FBVCxDQUFvQixnQkFBcEIsRUFBc0M7QUFDcEMsUUFBSSxNQUFKOztBQUVBLFFBQUksb0JBQW9CLGlCQUFpQixTQUF6QyxFQUFvRDtBQUNsRCxlQUFTLGlCQUFpQixTQUFqQixFQUFUO0FBQ0Q7O0FBRUQsV0FBTyxNQUFQO0FBQ0Q7O0FBRUQsV0FBUyxjQUFULENBQXlCLGdCQUF6QixFQUEyQztBQUN6QyxRQUFJLFdBQUo7O0FBRUEsUUFBSSxvQkFBb0IsaUJBQWlCLGNBQXpDLEVBQXlEO0FBQ3ZELG9CQUFjLGlCQUFpQixjQUFqQixFQUFkO0FBQ0Q7O0FBRUQsV0FBTyxXQUFQO0FBQ0Q7O0FBRUQsV0FBUyxrQkFBVCxDQUE2QixnQkFBN0IsRUFBK0M7QUFDN0MsUUFBTSxjQUFjLGVBQWUsZ0JBQWYsQ0FBcEI7QUFDQSxRQUFJLFVBQUo7O0FBRUEsUUFBSSxlQUFlLFlBQVksQ0FBWixDQUFuQixFQUFtQztBQUNqQyxtQkFBYSxZQUFZLENBQVosQ0FBYjtBQUNEOztBQUVELFdBQU8sVUFBUDtBQUNEOztBQUVELFdBQVMsUUFBVCxDQUFtQixLQUFuQixFQUEwQixNQUExQixFQUFrQztBQUNoQyxZQUFRLEtBQVIsQ0FBYyxnQkFBZCxFQUFnQyxXQUFoQyxFQUE2QyxPQUE3QyxFQUFzRCxLQUF0RCxFQUE2RCxLQUFLLFNBQUwsQ0FBZSxNQUFmLENBQTdEO0FBQ0Q7O0FBRUQsV0FBUyxTQUFULENBQW9CLFFBQXBCLEVBQThCO0FBQzVCLFdBQVEsWUFBYSxPQUFPLE9BQVAsS0FBbUIsV0FBaEMsSUFBaUQsb0JBQW9CLE9BQTdFO0FBQ0Q7O0FBRUQsV0FBUyxXQUFULENBQXNCLENBQXRCLEVBQXlCO0FBQ3ZCLGFBQVMsRUFBRSxJQUFYLEVBQWlCLEVBQUMsWUFBWSxtQkFBbUIsVUFBaEMsRUFBakI7O0FBRUE7QUFDQSx1QkFBbUIsbUJBQW5CLElBQ0EsbUJBQW1CLG1CQUFuQixDQUF1QyxFQUFFLElBQXpDLEVBQStDLFdBQS9DLENBREE7QUFFRDs7QUFFRCxPQUFLLDZCQUFMLEdBQXFDLFlBQVk7QUFDL0MsWUFBUSxLQUFSLENBQWMsNENBQWQ7O0FBRUEsMEJBQWEsT0FBYixDQUFxQixVQUFVLFNBQVYsRUFBcUI7QUFDeEMseUJBQW1CLG1CQUFuQixDQUF1QyxTQUF2QyxFQUFrRCxXQUFsRDtBQUNELEtBRkQ7QUFHRCxHQU5EOztBQVFBLE9BQUssSUFBTCxHQUFZLFVBQVUsZ0JBQVYsRUFBNEIsYUFBNUIsRUFBMkMsYUFBM0MsRUFBMEQsa0JBQTFELEVBQThFO0FBQ3hGLFNBQUssSUFBTCxDQUFVLGdCQUFWLEVBQTRCLElBQTVCOztBQUVBLFFBQUksZ0JBQWdCLEtBQXBCO0FBQ0EsUUFBSSwwQkFBMEIsS0FBOUI7QUFDQSxRQUFJLHdCQUF3QixLQUE1Qjs7QUFFQSxRQUFJLFdBQVcsUUFBUSxjQUFSLEVBQWYsRUFBeUM7QUFDdkMsc0JBQWdCLGlCQUFpQiw0QkFBa0IsSUFBbEIsRUFBd0IsT0FBeEIsQ0FBakM7QUFDRDs7QUFFRCxhQUFTLFdBQVQsR0FBd0I7QUFDdEIsV0FBSyxjQUFMLENBQW9CLGlCQUFPLG1CQUEzQixFQUFnRCxXQUFoRDtBQUNBLHVCQUFpQixjQUFjLE1BQWQsQ0FBcUIsYUFBckIsQ0FBakI7QUFDRDs7QUFFRCxhQUFTLHVCQUFULEdBQW9DO0FBQ2xDLGNBQVEsS0FBUixDQUFjLHNDQUFkOztBQUVBLFdBQUssY0FBTCxDQUFvQixpQkFBTyxtQkFBM0IsRUFBZ0QsV0FBaEQ7O0FBRUEseUJBQW1CLG1CQUFuQixJQUNBLG1CQUFtQixtQkFBbkIsQ0FBdUMsTUFBdkMsRUFBK0MsTUFBL0MsQ0FEQTs7QUFHQSx5QkFBbUIsbUJBQW5CLElBQ0EsbUJBQW1CLG1CQUFuQixDQUF1QyxnQkFBdkMsRUFBeUQsZ0JBQXpELENBREE7O0FBR0EsV0FBSyw2QkFBTDtBQUNEOztBQUVELGFBQVMsSUFBVCxHQUFpQjtBQUNmO0FBQ0EsVUFBSTtBQUNGLDJCQUFtQixJQUFuQjs7QUFFQTtBQUNBO0FBQ0EsWUFBSSxtQkFBbUIsTUFBdkIsRUFBK0I7QUFDN0Isa0JBQVEsS0FBUixDQUNFLG1CQURGLEVBRUUsc0JBQXNCLG1CQUFtQixVQUYzQyxFQUdFLGtCQUFrQixtQkFBbUIsTUFIdkMsRUFJRSxpQkFBaUIsbUJBQW1CLEtBSnRDLEVBS0Usa0JBQWtCLHNCQUFPLG1CQUFtQixNQUExQixDQUxwQjs7QUFRQSxjQUFNLElBQUksbUJBQW1CLElBQW5CLEVBQVY7O0FBRUE7QUFDQTtBQUNBLGNBQUksVUFBVSxDQUFWLENBQUosRUFBa0I7QUFDaEIsY0FBRSxJQUFGLENBQU8sWUFBWTtBQUNqQixrQkFBSSxDQUFDLHFCQUFMLEVBQTRCO0FBQzFCLHdCQUFRLEtBQVIsQ0FBYyxrREFBZDtBQUNBLHdDQUF3QixJQUF4QjtBQUNEO0FBQ0YsYUFMRCxFQUtHLEtBTEgsQ0FLUyxVQUFVLE1BQVYsRUFBa0I7QUFDekI7QUFDQTtBQUNBO0FBQ0Esc0JBQVEsS0FBUixDQUFjLFlBQWQsRUFBNEIsT0FBTyxRQUFQLEVBQTVCO0FBQ0QsYUFWRDtBQVdEO0FBQ0Y7QUFDRixPQWhDRCxDQWdDRSxPQUFPLEdBQVAsRUFBWTtBQUNaO0FBQ0EsMkJBQW1CLEdBQW5CO0FBQ0Q7QUFDRjs7QUFFRCxhQUFTLGFBQVQsR0FBMEI7QUFDeEIsVUFBTSxhQUFhLG1CQUFtQixVQUF0Qzs7QUFFQTtBQUNBLGNBQVEsS0FBUixDQUNFLDhCQUNBLGFBREEsR0FDZ0IsVUFEaEIsR0FDNkIsSUFEN0IsR0FFQSxnQkFGQSxHQUVtQixhQUZuQixHQUVtQyxJQUZuQyxHQUdBLDBCQUhBLEdBRzZCLHVCQUg3QixHQUd1RCxHQUp6RDs7QUFPQSxVQUFJLGlCQUFpQix1QkFBckIsRUFBOEM7QUFDNUM7O0FBRUEsWUFBSSxpQkFBaUIsYUFBckIsRUFBb0M7QUFDbEMsY0FBSTtBQUNGLDBCQUFjLElBQWQsQ0FBbUIsZ0JBQW5CO0FBQ0EsaUJBQUssRUFBTCxDQUFRLGlCQUFPLG1CQUFmLEVBQW9DLFdBQXBDO0FBQ0QsV0FIRCxDQUdFLE9BQU8sR0FBUCxFQUFZO0FBQ1o7QUFDQSwrQkFBbUIsR0FBbkI7QUFDRDtBQUNGO0FBQ0Y7QUFDRjs7QUFFRCxhQUFTLE1BQVQsR0FBbUI7QUFDakIsVUFBSTtBQUNGLGlCQUFTLE1BQVQsRUFBaUI7QUFDZixzQkFBWSxtQkFBbUIsVUFEaEI7QUFFZixpQkFBTyxRQUFRLGNBQVIsRUFGUTtBQUdmLGlCQUFPLG1CQUFtQixLQUhYO0FBSWYsa0JBQVEsbUJBQW1CLE1BSlo7QUFLZixzQkFBWSxtQkFBbUIsVUFMaEI7QUFNZix1QkFBYSxtQkFBbUI7QUFOakIsU0FBakI7O0FBU0EsMkJBQW1CLG1CQUFuQixJQUNBLG1CQUFtQixtQkFBbkIsQ0FBdUMsTUFBdkMsRUFBK0MsTUFBL0MsQ0FEQTs7QUFHQSxZQUFJLGNBQWMsc0JBQWxCLEVBQTBDO0FBQ3hDLDZCQUNFLHlCQUFlLE1BQWYsQ0FDRSxjQURGLEVBRUUsdURBRkYsRUFHRSxPQUhGLENBREY7QUFPRCxTQVJELE1BUU87QUFDTCwwQkFBZ0IsSUFBaEI7QUFDQTtBQUNEO0FBQ0YsT0F6QkQsQ0F5QkUsT0FBTyxHQUFQLEVBQVk7QUFDWjtBQUNBLDJCQUFtQixHQUFuQjtBQUNEO0FBQ0Y7O0FBRUQ7QUFDQSxhQUFTLGdCQUFULEdBQTZCO0FBQzNCLGVBQVMsZ0JBQVQsRUFBMkI7QUFDekIsb0JBQVksbUJBQW1CLFVBRE47QUFFekIsZ0JBQVEsbUJBQW1CLE1BRkY7QUFHekIsZUFBTyxtQkFBbUIsS0FIRDtBQUl6QixnQkFBUSxtQkFBbUIsTUFKRjtBQUt6QixvQkFBWSxtQkFBbUIsVUFMTjtBQU16QixxQkFBYSxtQkFBbUI7QUFOUCxPQUEzQjs7QUFTQSx5QkFBbUIsbUJBQW5CLElBQ0EsbUJBQW1CLG1CQUFuQixDQUF1QyxnQkFBdkMsRUFBeUQsZ0JBQXpELENBREE7O0FBR0EsVUFBSSxDQUFDLFVBQUQsSUFBZSxDQUFDLHNCQUFwQixFQUE0QztBQUMxQyxhQUFLLElBQUwsQ0FBVSxpQkFBTyxnQkFBakI7O0FBRUE7QUFDQTtBQUNBLFlBQUksUUFBUSxTQUFSLEVBQUosRUFBeUI7QUFDdkI7QUFDRDs7QUFFRCxrQ0FBMEIsSUFBMUI7QUFDQTtBQUNEO0FBQ0Y7O0FBRUQsUUFBSTtBQUNGLFVBQU0sYUFBYSxtQkFBbUIsZ0JBQW5CLENBQW5COztBQUVBLFVBQUksQ0FBQyxVQUFMLEVBQWlCO0FBQ2YsZ0JBQVEsS0FBUixDQUFjLGdEQUFkO0FBQ0QsT0FGRCxNQUVPLElBQUksQ0FBQyxXQUFXLE9BQWhCLEVBQXlCO0FBQzlCLGNBQU0seUJBQWUsTUFBZixDQUNKLG9CQURJLEVBRUosaUVBRkksRUFHSixPQUhJLENBQU47QUFLRCxPQU5NLE1BTUE7QUFDTCxZQUFJLFdBQUo7O0FBRUEsWUFBSSxXQUFXLEtBQVgsSUFBb0IsV0FBVyxLQUFYLENBQWlCLE1BQWpCLEdBQTBCLENBQWxELEVBQXFEO0FBQ25ELHdCQUFjLFdBQVcsS0FBekI7QUFDRDs7QUFFRCx1QkFBZSxtQkFBbUIsV0FBVyxPQUE3QztBQUNBLHVCQUFlLGFBQWEsV0FBVyxLQUF2QztBQUNBLHVCQUFlLGNBQWMsV0FBVyxNQUF4QztBQUNBLHVCQUFlLGtCQUFrQixXQUFXLFVBQTVDO0FBQ0EsdUJBQWUsYUFBYSxXQUFXLEtBQXZDOztBQUVBLGdCQUFRLEtBQVIsQ0FDRSxnQkFBZ0IsV0FBVyxJQUEzQixHQUFrQyxZQURwQyxFQUVFLGVBQWUsRUFGakI7QUFJRDs7QUFFRDtBQUNBLFVBQU0saUJBQWlCLElBQXZCOztBQUVBLFVBQUksY0FBSixFQUFvQjtBQUNsQiw4QkFBYSxPQUFiLENBQXFCLFVBQVUsU0FBVixFQUFxQjtBQUN4Qyw2QkFBbUIsZ0JBQW5CLENBQW9DLFNBQXBDLEVBQStDLFdBQS9DLEVBQTRELEtBQTVEO0FBQ0QsU0FGRDtBQUdEOztBQUVELHlCQUFtQixnQkFBbkIsQ0FBb0MsZ0JBQXBDLEVBQXNELGdCQUF0RDtBQUNBLHlCQUFtQixnQkFBbkIsQ0FBb0MsTUFBcEMsRUFBNEMsTUFBNUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBbUIsZ0JBQW5CLENBQW9DLE9BQXBDLEVBQTZDLFVBQVUsR0FBVixFQUFlO0FBQzFELGdCQUFRLE1BQVIsQ0FBZSxJQUFmLENBQ0Usc0NBREYsRUFFRSxzQkFBTyxHQUFQLENBRkY7QUFJRCxPQUxEOztBQU9BLHNCQUFnQixnQkFBaEI7O0FBRUE7QUFDRCxLQXhERCxDQXdERSxPQUFPLEdBQVAsRUFBWTtBQUNaLFdBQUssSUFBTCxDQUFVLGlCQUFPLEtBQWpCLEVBQXdCLEdBQXhCO0FBQ0Q7QUFDRixHQXZORDs7QUF5TkEsT0FBSyxPQUFMLEdBQWUsWUFBWTtBQUN6QixXQUFPLENBQUMsQ0FBQyxtQkFBbUIsR0FBNUI7QUFDRCxHQUZEOztBQUlBLE9BQUssSUFBTCxHQUFZLFVBQVUsWUFBVixFQUF3QixpQkFBeEIsRUFBMkM7QUFDckQsUUFBSTtBQUNGO0FBQ0EsVUFBSSxDQUFDLGlCQUFMLEVBQXdCO0FBQ3RCLFlBQUksQ0FBQyxZQUFMLEVBQW1CO0FBQ2pCLHlCQUFlLGlCQUFmO0FBQ0Q7O0FBRUQsWUFBTSxTQUFTLFVBQVUsWUFBVixDQUFmO0FBQ0EsWUFBSSxrQkFBa0IsS0FBdEI7O0FBRUEsWUFBSSxNQUFKLEVBQVk7QUFDVixpQkFBTyxPQUFQLENBQWUsVUFBVSxLQUFWLEVBQWlCO0FBQzlCLGdCQUFJLE1BQU0sSUFBVixFQUFnQjtBQUNkLGdDQUFrQixJQUFsQjtBQUNBLG9CQUFNLElBQU47QUFDRDtBQUNGLFdBTEQ7QUFNRDs7QUFFRDtBQUNBLFNBQUMsZUFBRCxJQUFvQixZQUFwQixJQUFvQyxhQUFhLElBQWpELElBQXlELGFBQWEsSUFBYixFQUF6RDs7QUFFQSx3QkFBZ0IsSUFBaEI7O0FBRUEseUJBQWlCLGNBQWMsSUFBZCxFQUFqQjs7QUFFQSx3QkFBZ0IsSUFBaEI7QUFDRDs7QUFFRCxlQUFTLFNBQVMsS0FBbEI7QUFDRCxLQTlCRCxDQThCRSxPQUFPLEdBQVAsRUFBWTtBQUNaLFdBQUssSUFBTCxDQUFVLGlCQUFPLEtBQWpCLEVBQXdCLEdBQXhCO0FBQ0Q7QUFDRixHQWxDRDs7QUFvQ0EsT0FBSyxZQUFMLEdBQW9CLFlBQVk7QUFDOUIsV0FBTywyQkFBRSxRQUFGLEVBQVk7QUFDakIsYUFBTyxLQUFLLFdBQUwsQ0FBaUIsSUFBakIsQ0FEVTtBQUVqQixjQUFRLEtBQUssWUFBTCxDQUFrQixJQUFsQjtBQUZTLEtBQVosQ0FBUDtBQUlELEdBTEQ7O0FBT0EsT0FBSyxjQUFMLEdBQXNCLFlBQVk7QUFDaEMsV0FBTyxtQkFBbUIsV0FBMUI7QUFDRCxHQUZEOztBQUlBLE9BQUssYUFBTCxHQUFxQixZQUFZO0FBQy9CLFdBQU8sbUJBQW1CLFVBQTFCO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLGFBQUwsR0FBcUIsWUFBWTtBQUMvQixXQUFPLEtBQUssYUFBTCxLQUF1QixDQUE5QjtBQUNELEdBRkQ7O0FBSUEsT0FBSyxXQUFMLEdBQW1CLFVBQVUsVUFBVixFQUFzQjtBQUN2QyxRQUFJLFdBQVcsS0FBSyxhQUFMLEVBQWY7QUFDQSxRQUFNLGVBQWUsUUFBUSxlQUFSLEVBQXJCOztBQUVBLFFBQUksZ0JBQWdCLFFBQVEsZ0JBQVIsRUFBcEIsRUFBZ0Q7QUFDOUMsVUFBSSxDQUFDLFVBQUQsSUFBZSxZQUFuQixFQUFpQztBQUMvQixtQkFBVyxRQUFRLEtBQVIsQ0FBYyxLQUF6QjtBQUNELE9BRkQsTUFFTztBQUNMLG1CQUFXLFNBQVMsY0FBVCxDQUF3QixVQUF4QixDQUFYO0FBQ0Q7QUFDRjs7QUFFRCxRQUFJLFVBQUosRUFBZ0I7QUFDZCxpQkFBVyxTQUFTLFVBQVQsQ0FBb0IsUUFBcEIsQ0FBWDtBQUNEOztBQUVELFdBQU8sUUFBUDtBQUNELEdBakJEOztBQW1CQSxPQUFLLFlBQUwsR0FBb0IsVUFBVSxVQUFWLEVBQXNCO0FBQ3hDLFFBQUksU0FBSjs7QUFFQSxRQUFJLFFBQVEsbUJBQVIsRUFBSixFQUFtQztBQUNqQyxrQkFBWSxTQUFTLGVBQVQsQ0FBeUIsVUFBekIsQ0FBWjs7QUFFQSxVQUFJLFlBQVksQ0FBaEIsRUFBbUI7QUFDakIsY0FBTSx5QkFBZSxNQUFmLENBQ0osZ0JBREksRUFFSiw4Q0FGSSxFQUdKLE9BSEksQ0FBTjtBQUtEO0FBQ0YsS0FWRCxNQVVPO0FBQ0wsa0JBQVksS0FBSyxjQUFMLEVBQVo7O0FBRUEsVUFBSSxZQUFZLENBQWhCLEVBQW1CO0FBQ2pCLGNBQU0seUJBQWUsTUFBZixDQUNKLGdCQURJLEVBRUosMERBRkksRUFHSixPQUhJLENBQU47QUFLRDtBQUNGOztBQUVELFFBQUksVUFBSixFQUFnQjtBQUNkLGtCQUFZLFNBQVMsV0FBVCxDQUFxQixTQUFyQixDQUFaO0FBQ0Q7O0FBRUQsV0FBTyxTQUFQO0FBQ0QsR0E5QkQ7O0FBZ0NBLE9BQUssYUFBTCxHQUFxQixZQUFZO0FBQy9CLFdBQU8sa0JBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssS0FBTCxHQUFhLFlBQVk7QUFDdkIsYUFBUyxJQUFUO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLFFBQUwsR0FBZ0IsWUFBWTtBQUMxQixXQUFPLE1BQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssTUFBTCxHQUFjLFlBQVk7QUFDeEIsYUFBUyxLQUFUO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLE1BQUwsR0FBYyxZQUFZO0FBQ3hCLGFBQVMsSUFBVDtBQUNELEdBRkQ7O0FBSUEsT0FBSyxXQUFMLEdBQW1CLFlBQVk7QUFDN0IsV0FBTyxNQUFQO0FBQ0QsR0FGRDs7QUFJQSxPQUFLLGtCQUFMLEdBQTBCLFlBQVk7QUFDcEMsUUFBSSxhQUFKLEVBQW1CO0FBQ2pCLGFBQU8sY0FBYyxhQUFkLEVBQVA7QUFDRCxLQUZELE1BRU87QUFDTCxhQUFPLENBQUMsQ0FBUjtBQUNEO0FBQ0YsR0FORDs7QUFRQSxPQUFLLGtCQUFMLEdBQTBCLFlBQVk7QUFDcEMsV0FBTztBQUNMLHVCQUFpQixLQUFLLGtCQUFMLEVBRFo7QUFFTCxhQUFPLHNCQUFzQixtQkFBbUIsS0FGM0M7QUFHTCxhQUFPLHNCQUFzQixtQkFBbUIsS0FIM0M7QUFJTCxjQUFRLHNCQUFzQixtQkFBbUIsTUFKNUM7QUFLTCxrQkFBWSxzQkFBc0IsbUJBQW1CLFVBTGhEO0FBTUwsbUJBQWEsc0JBQXNCLG1CQUFtQjtBQU5qRCxLQUFQO0FBUUQsR0FURDtBQVVELEM7O0FBdmZEOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQU0sY0FBYyxPQUFwQjs7Ozs7Ozs7O0FDVkE7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBSSxDQUFDLFNBQUwsRUFBZ0I7QUFDZCxRQUFNLElBQUksS0FBSixDQUFVLHVCQUFWLENBQU47QUFDRCxDQUZELE1BRU87QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFFLFdBQVUsU0FBVixFQUFxQjtBQUNyQiwrQkFBWSxNQUFaLEVBQW9CLFNBQXBCO0FBQ0QsR0FGQyxFQUVBLFNBRkEsQ0FBRDtBQUdGOzs7O0FBSUQ7O0FBQ0EsT0FBTyxPQUFQIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImFkZC1ldmVudGxpc3RlbmVyLXdpdGgtb3B0aW9uc1wiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJhZGQtZXZlbnRsaXN0ZW5lci13aXRoLW9wdGlvbnNcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuXG5cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuZGVmYXVsdCA9IGFkZEV2ZW50TGlzdGVuZXJXaXRoT3B0aW9ucztcblxuXHR2YXIgX2NoZWNrU3VwcG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblx0ZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuXHQvKipcblx0ICogQWRkIGV2ZW50IGxpc3RlbmVyIHdpdGggYWRkaXRpb25hbCBvcHRpb25zXG5cdCAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IHRhcmdldCAtIFRoZSBFdmVudFRhcmdldCBlbGVtZW50XG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIC0gVGhlIGV2ZW50IGxpc3RlbmVyIGNhbGxiYWNrXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZXhwbGljaXRseSBwYXNzZWQgZnJvbSBjYWxsZXJcblx0ICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbk5hbWUgLSBUaGUgYWRkaXRpb2FubCBvcHRpb24gdG8gYWRkIHRvIHRoZSBldmVudCBsaXN0ZW5lciBcblx0ICovXG5cdGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJXaXRoT3B0aW9ucyh0YXJnZXQsIG5hbWUsIGxpc3RlbmVyLCBvcHRpb25zKSB7XG5cdCAgICB2YXIgb3B0aW9uTmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogJ3Bhc3NpdmUnO1xuXG5cdCAgICBpZiAodGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIHZhciBsaXN0ZW5lck9wdGlvbnMgPSBfY2hlY2tTdXBwb3J0LlN1cHBvcnRNYXBbb3B0aW9uTmFtZV0gPyBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCBfZGVmaW5lUHJvcGVydHkoe30sIG9wdGlvbk5hbWUsIHRydWUpKSA6IG9wdGlvbnM7XG5cdCAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgbGlzdGVuZXIsIGxpc3RlbmVyT3B0aW9ucyk7XG5cdCAgICB9XG5cdH1cblxuLyoqKi8gfSxcbi8qIDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuU3VwcG9ydE1hcCA9IHVuZGVmaW5lZDtcblxuXHR2YXIgX09wdGlvbnNNYXA7XG5cblx0dmFyIF9jb25zdGFudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG5cdGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cblx0dmFyIE9wdGlvbnNNYXAgPSAoX09wdGlvbnNNYXAgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9PcHRpb25zTWFwLCBfY29uc3RhbnRzLlBBU1NJVkUsIGZhbHNlKSwgX2RlZmluZVByb3BlcnR5KF9PcHRpb25zTWFwLCBfY29uc3RhbnRzLkNBUFRVUkUsIGZhbHNlKSwgX2RlZmluZVByb3BlcnR5KF9PcHRpb25zTWFwLCBfY29uc3RhbnRzLk9OQ0UsIGZhbHNlKSwgX09wdGlvbnNNYXApO1xuXG5cdHZhciBnZXRPcHRpb25zTWFwID0gZnVuY3Rpb24gZ2V0T3B0aW9uc01hcCgpIHtcblx0ICAgIE9iamVjdC5rZXlzKE9wdGlvbnNNYXApLmZvckVhY2goZnVuY3Rpb24gKGssIGkpIHtcblx0ICAgICAgICBPcHRpb25zTWFwW2tdID0gY2hlY2tTdXBwb3J0Rm9yUHJvcGVydHkoayk7XG5cdCAgICB9KTtcblxuXHQgICAgcmV0dXJuIE9wdGlvbnNNYXA7XG5cdH07XG5cblx0ZnVuY3Rpb24gY2hlY2tTdXBwb3J0Rm9yUHJvcGVydHkocHJvcGVydHkpIHtcblx0ICAgIGlmICghIU9wdGlvbnNNYXBbcHJvcGVydHldKSB7XG5cdCAgICAgICAgcmV0dXJuIE9wdGlvbnNNYXBbcHJvcGVydHldO1xuXHQgICAgfVxuXG5cdCAgICB0cnkge1xuXHQgICAgICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCBwcm9wZXJ0eSwge1xuXHQgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgICAgIE9wdGlvbnNNYXBbcHJvcGVydHldID0gdHJ1ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLCBudWxsLCBvcHRzKTtcblx0ICAgICAgICB3aW5kb3cucmVtb3ZlTGlzdGVuZXIoXCJ0ZXN0XCIsIG51bGwpO1xuXHQgICAgfSBjYXRjaCAoZSkge31cblxuXHQgICAgcmV0dXJuIE9wdGlvbnNNYXBbcHJvcGVydHldO1xuXHR9XG5cblx0dmFyIFN1cHBvcnRNYXAgPSBleHBvcnRzLlN1cHBvcnRNYXAgPSBnZXRPcHRpb25zTWFwKCk7XG5cbi8qKiovIH0sXG4vKiAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdHZhciBQQVNTSVZFID0gZXhwb3J0cy5QQVNTSVZFID0gJ3Bhc3NpdmUnO1xuXHR2YXIgQ0FQVFVSRSA9IGV4cG9ydHMuQ0FQVFVSRSA9ICdjYXB0dXJlJztcblx0dmFyIE9OQ0UgPSBleHBvcnRzLk9OQ0UgPSAnb25jZSc7XG5cbi8qKiovIH1cbi8qKioqKiovIF0pXG59KTtcbjsiLCJ2YXIgRXZlbnRFbWl0dGVyICAgICAgICAgID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyLFxuICAgIGluaGVyaXRzICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2luaGVyaXRzJyksXG4gICAgcmFmICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgncmFmJyksXG4gICAgbWV0aG9kcztcblxuXG4vL3RoZSBzYW1lIGFzIG9mZiB3aW5kb3cgdW5sZXNzIHBvbHlmaWxsZWQgb3IgaW4gbm9kZVxudmFyIGRlZmF1bHRSQUZPYmplY3QgPSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lOiByYWYsXG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWU6IHJhZi5jYW5jZWxcbn07XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKXsgcmV0dXJuIHRydWU7IH1cblxuLy9tYW5hZ2UgRlBTIGlmIDwgNjAsIGVsc2UgcmV0dXJuIHRydWU7XG5mdW5jdGlvbiBtYWtlVGhyb3R0bGUoZnBzKXtcbiAgICB2YXIgZGVsYXkgPSAxMDAwL2ZwcztcbiAgICB2YXIgbGFzdFRpbWUgPSBEYXRlLm5vdygpO1xuXG5cbiAgICBpZiggZnBzPD0wIHx8IGZwcyA9PT0gSW5maW5pdHkgKXtcbiAgICAgICAgcmV0dXJuIHJldHVyblRydWU7XG4gICAgfVxuXG4gICAgLy9pZiBhbiBmcHMgdGhyb3R0bGUgaGFzIGJlZW4gc2V0IHRoZW4gd2UnbGwgYXNzdW1lXG4gICAgLy9pdCBuYXRpdmVseSBydW5zIGF0IDYwZnBzLFxuICAgIHZhciBoYWxmID0gTWF0aC5jZWlsKDEwMDAgLyA2MCkgLyAyO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vaWYgYSBjdXN0b20gZnBzIGlzIHJlcXVlc3RlZFxuICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgLy9pcyB0aGlzIGZyYW1lIHdpdGhpbiA4LjVtcyBvZiB0aGUgdGFyZ2V0P1xuICAgICAgICAvL2lmIHNvIHRoZW4gbmV4dCBmcmFtZSBpcyBnb25uYSBiZSB0b28gbGF0ZVxuICAgICAgICBpZihub3cgLSBsYXN0VGltZSA8IGRlbGF5IC0gaGFsZil7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFRpbWUgPSBub3c7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG59XG5cblxuLyoqXG4gKiBBbmltaXR0ZXIgcHJvdmlkZXMgZXZlbnQtYmFzZWQgbG9vcHMgZm9yIHRoZSBicm93c2VyIGFuZCBub2RlLFxuICogdXNpbmcgYHJlcXVlc3RBbmltYXRpb25GcmFtZWBcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0c11cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0cy5mcHM9SW5maW5pdHldIHRoZSBmcmFtZXJhdGUgcmVxdWVzdGVkLCBkZWZhdWx0cyB0byBhcyBmYXN0IGFzIGl0IGNhbiAoNjBmcHMgb24gd2luZG93KVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRzLmRlbGF5PTBdIG1pbGxpc2Vjb25kcyBkZWxheSBiZXR3ZWVuIGludm9raW5nIGBzdGFydGAgYW5kIGluaXRpYWxpemluZyB0aGUgbG9vcFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLnJlcXVlc3RBbmltYXRpb25GcmFtZU9iamVjdD1nbG9iYWxdIHRoZSBvYmplY3Qgb24gd2hpY2ggdG8gZmluZCBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCBhbmQgYGNhbmNlbEFuaW1hdGlvbkZyYW1lYCBtZXRob2RzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRzLmZpeGVkRGVsdGE9ZmFsc2VdIGlmIHRydWUsIHRpbWVzdGFtcHMgd2lsbCBwcmV0ZW5kIHRvIGJlIGV4ZWN1dGVkIGF0IGZpeGVkIGludGVydmFscyBhbHdheXNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBBbmltaXR0ZXIoIG9wdHMgKXtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICAgIHRoaXMuX19kZWxheSA9IG9wdHMuZGVsYXkgfHwgMDtcblxuICAgIC8qKiBAZXhwb3NlICovXG4gICAgdGhpcy5maXhlZERlbHRhID0gISFvcHRzLmZpeGVkRGVsdGE7XG5cbiAgICAvKiogQGV4cG9zZSAqL1xuICAgIHRoaXMuZnJhbWVDb3VudCA9IDA7XG4gICAgLyoqIEBleHBvc2UgKi9cbiAgICB0aGlzLmRlbHRhVGltZSA9IDA7XG4gICAgLyoqIEBleHBvc2UgKi9cbiAgICB0aGlzLmVsYXBzZWRUaW1lID0gMDtcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuX19ydW5uaW5nID0gZmFsc2U7XG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5fX2NvbXBsZXRlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5zZXRGUFMob3B0cy5mcHMgfHwgSW5maW5pdHkpO1xuICAgIHRoaXMuc2V0UmVxdWVzdEFuaW1hdGlvbkZyYW1lT2JqZWN0KG9wdHMucmVxdWVzdEFuaW1hdGlvbkZyYW1lT2JqZWN0IHx8IGRlZmF1bHRSQUZPYmplY3QpO1xufVxuXG5pbmhlcml0cyhBbmltaXR0ZXIsIEV2ZW50RW1pdHRlcik7XG5cbmZ1bmN0aW9uIG9uU3RhcnQoc2NvcGUpe1xuICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgIHZhciByQUZJRDtcbiAgICAvL2RvbnQgbGV0IGEgc2Vjb25kIGFuaW1hdGlvbiBzdGFydCBvbiB0aGUgc2FtZSBvYmplY3RcbiAgICAvL3VzZSAqLm9uKCd1cGRhdGUnLGZuKSogaW5zdGVhZFxuICAgIGlmKHNjb3BlLl9fcnVubmluZyl7XG4gICAgICAgIHJldHVybiBzY29wZTtcbiAgICB9XG5cbiAgICBleHBvcnRzLnJ1bm5pbmcgKz0gMTtcbiAgICBzY29wZS5fX3J1bm5pbmcgPSB0cnVlO1xuICAgIHNjb3BlLl9fbGFzdFRpbWUgPSBub3c7XG4gICAgc2NvcGUuZGVsdGFUaW1lID0gMDtcblxuICAgIC8vZW1pdCAqKnN0YXJ0Kiogb25jZSBhdCB0aGUgYmVnaW5uaW5nXG4gICAgc2NvcGUuZW1pdCgnc3RhcnQnLCBzY29wZS5kZWx0YVRpbWUsIDAsIHNjb3BlLmZyYW1lQ291bnQpO1xuXG4gICAgdmFyIGxhc3RSQUZPYmplY3QgPSBzY29wZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVPYmplY3Q7XG5cbiAgICB2YXIgZHJhd0ZyYW1lID0gZnVuY3Rpb24oKXtcbiAgICAgICAgaWYobGFzdFJBRk9iamVjdCAhPT0gc2NvcGUucmVxdWVzdEFuaW1hdGlvbkZyYW1lT2JqZWN0KXtcbiAgICAgICAgICAgIC8vaWYgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZU9iamVjdCBzd2l0Y2hlZCBpbi1iZXR3ZWVuLFxuICAgICAgICAgICAgLy90aGVuIHJlLXJlcXVlc3Qgd2l0aCB0aGUgbmV3IG9uZSB0byBlbnN1cmUgcHJvcGVyIHVwZGF0ZSBleGVjdXRpb24gY29udGV4dFxuICAgICAgICAgICAgLy9pLmUuIFZSRGlzcGxheSNzdWJtaXRGcmFtZSgpIG1heSBvbmx5IGJlIHJlcXVlc3RlZCB0aHJvdWdoIFZSRGlzcGxheSNyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhd0ZyYW1lKVxuICAgICAgICAgICAgbGFzdFJBRk9iamVjdCA9IHNjb3BlLnJlcXVlc3RBbmltYXRpb25GcmFtZU9iamVjdDtcbiAgICAgICAgICAgIHNjb3BlLnJlcXVlc3RBbmltYXRpb25GcmFtZU9iamVjdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhd0ZyYW1lKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZihzY29wZS5fX2lzUmVhZHlGb3JVcGRhdGUoKSl7XG4gICAgICAgICAgICBzY29wZS51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZihzY29wZS5fX3J1bm5pbmcpe1xuICAgICAgICAgICAgckFGSUQgPSBzY29wZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVPYmplY3QucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXdGcmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzY29wZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVPYmplY3QuY2FuY2VsQW5pbWF0aW9uRnJhbWUockFGSUQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHNjb3BlLnJlcXVlc3RBbmltYXRpb25GcmFtZU9iamVjdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhd0ZyYW1lKTtcblxuICAgIHJldHVybiBzY29wZTtcbn1cblxubWV0aG9kcyA9IHtcbiAgICAvL0V2ZW50RW1pdHRlciBBbGlhc2VzXG4gICAgb2ZmICAgICA6IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIsXG4gICAgdHJpZ2dlciA6IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCxcblxuICAgIC8qKlxuICAgICAqIHN0b3BzIHRoZSBhbmltYXRpb24gYW5kIG1hcmtzIGl0IGFzIGNvbXBsZXRlZFxuICAgICAqIEBlbWl0IEFuaW1pdHRlciNjb21wbGV0ZVxuICAgICAqIEByZXR1cm5zIHtBbmltaXR0ZXJ9XG4gICAgICovXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB0aGlzLl9fY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5lbWl0KCdjb21wbGV0ZScsIHRoaXMuZnJhbWVDb3VudCwgdGhpcy5kZWx0YVRpbWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogc3RvcHMgdGhlIGFuaW1hdGlvbiBhbmQgcmVtb3ZlcyBhbGwgbGlzdGVuZXJzXG4gICAgICogQGVtaXQgQW5pbWl0dGVyI3N0b3BcbiAgICAgKiBAcmV0dXJucyB7QW5pbWl0dGVyfVxuICAgICAqL1xuICAgIGRpc3Bvc2U6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZ2V0IG1pbGxpc2Vjb25kcyBiZXR3ZWVuIHRoZSBsYXN0IDIgdXBkYXRlc1xuICAgICAqXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldERlbHRhVGltZTogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsdGFUaW1lO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIHRvdGFsIG1pbGxpc2Vjb25kcyB0aGF0IHRoZSBhbmltYXRpb24gaGFzIHJhbi5cbiAgICAgKiBUaGlzIGlzIHRoZSBjdW1sYXRpdmUgdmFsdWUgb2YgdGhlIGRlbHRhVGltZSBiZXR3ZWVuIGZyYW1lc1xuICAgICAqXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldEVsYXBzZWRUaW1lOiBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gdGhpcy5lbGFwc2VkVGltZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZ2V0IHRoZSBpbnN0YW5jZXMgZnJhbWVzIHBlciBzZWNvbmQgYXMgY2FsY3VsYXRlZCBieSB0aGUgbGFzdCBkZWx0YVxuICAgICAqXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldEZQUzogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsdGFUaW1lID4gMCA/IDEwMDAgLyB0aGlzLmRlbHRhVGltZSA6IDA7XG4gICAgICAgIGlmKHRoaXMuZGVsdGFUaW1lKXtcbiAgICAgICAgICAgIHJldHVybiAxMDAwIC8gdGhpcy5kZWx0YVRpbWU7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZ2V0IHRoZSBleHBsaWNpdCBGUFMgbGltaXQgc2V0IHZpYSBgQW5pbWl0dGVyI3NldEZQUyhmcHMpYCBvclxuICAgICAqIHZpYSB0aGUgaW5pdGlhbCBgb3B0aW9ucy5mcHNgIHByb3BlcnR5XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBlaXRoZXIgYXMgc2V0IG9yIEluZmluaXR5XG4gICAgICovXG4gICAgZ2V0RlBTTGltaXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZnBzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIG51bWJlciBvZiBmcmFtZXMgdGhhdCBoYXZlIG9jY3VycmVkXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZ2V0RnJhbWVDb3VudDogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJhbWVDb3VudDtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIG9iamVjdCBwcm92aWRpbmcgYHJlcXVlc3RBbmltYXRpb25GcmFtZWBcbiAgICAgKiBhbmQgYGNhbmNlbEFuaW1hdGlvbkZyYW1lYCBtZXRob2RzXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqL1xuICAgIGdldFJlcXVlc3RBbmltYXRpb25GcmFtZU9iamVjdDogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lT2JqZWN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBpcyB0aGUgYW5pbWF0aW9uIGxvb3AgYWN0aXZlXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAqL1xuICAgIGlzUnVubmluZzogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19ydW5uaW5nO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBpcyB0aGUgYW5pbWF0aW9uIG1hcmtlZCBhcyBjb21wbGV0ZWRcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgaXNDb21wbGV0ZWQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl9fY29tcGxldGVkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXNldCB0aGUgYW5pbWF0aW9uIGxvb3AsIG1hcmtzIGFzIGluY29tcGxldGUsXG4gICAgICogbGVhdmVzIGxpc3RlbmVycyBpbnRhY3RcbiAgICAgKlxuICAgICAqIEBlbWl0IEFuaW1pdHRlciNyZXNldFxuICAgICAqIEByZXR1cm4ge0FuaW1pdHRlcn1cbiAgICAgKi9cbiAgICByZXNldDogZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIHRoaXMuX19jb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fX2xhc3RUaW1lID0gMDtcbiAgICAgICAgdGhpcy5kZWx0YVRpbWUgPSAwO1xuICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gMDtcbiAgICAgICAgdGhpcy5mcmFtZUNvdW50ID0gMDtcblxuICAgICAgICB0aGlzLmVtaXQoJ3Jlc2V0JywgMCwgMCwgdGhpcy5mcmFtZUNvdW50KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHNldCB0aGUgZnJhbWVyYXRlIGZvciB0aGUgYW5pbWF0aW9uIGxvb3BcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBmcHNcbiAgICAgKiBAcmV0dXJuIHtBbmltaXR0ZXJ9XG4gICAgICovXG4gICAgc2V0RlBTOiBmdW5jdGlvbihmcHMpe1xuICAgICAgICB0aGlzLl9fZnBzID0gZnBzO1xuICAgICAgICB0aGlzLl9faXNSZWFkeUZvclVwZGF0ZSA9IG1ha2VUaHJvdHRsZShmcHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogc2V0IHRoZSBvYmplY3QgdGhhdCB3aWxsIHByb3ZpZGUgYHJlcXVlc3RBbmltYXRpb25GcmFtZWBcbiAgICAgKiBhbmQgYGNhbmNlbEFuaW1hdGlvbkZyYW1lYCBtZXRob2RzIHRvIHRoaXMgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAgICogQHJldHVybiB7QW5pbWl0dGVyfVxuICAgICAqL1xuICAgIHNldFJlcXVlc3RBbmltYXRpb25GcmFtZU9iamVjdDogZnVuY3Rpb24ob2JqZWN0KXtcbiAgICAgICAgaWYodHlwZW9mIG9iamVjdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIG9iamVjdC5jYW5jZWxBbmltYXRpb25GcmFtZSAhPT0gJ2Z1bmN0aW9uJyl7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIG9iamVjdCBwcm92aWRlIHRvIGBzZXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWVPYmplY3RgXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lT2JqZWN0ID0gb2JqZWN0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogc3RhcnQgYW4gYW5pbWF0aW9uIGxvb3BcbiAgICAgKiBAZW1pdCBBbmltaXR0ZXIjc3RhcnRcbiAgICAgKiBAcmV0dXJuIHtBbmltaXR0ZXJ9XG4gICAgICovXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgaWYodGhpcy5fX2RlbGF5KXtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBvblN0YXJ0KHNlbGYpO1xuICAgICAgICAgICAgfSwgdGhpcy5fX2RlbGF5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9uU3RhcnQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHN0b3BzIHRoZSBhbmltYXRpb24gbG9vcCwgZG9lcyBub3QgbWFyayBhcyBjb21wbGV0ZWRcbiAgICAgKlxuICAgICAqIEBlbWl0IEFuaW1pdHRlciNzdG9wXG4gICAgICogQHJldHVybiB7QW5pbWl0dGVyfVxuICAgICAqL1xuICAgIHN0b3A6IGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKCB0aGlzLl9fcnVubmluZyApe1xuICAgICAgICAgICAgdGhpcy5fX3J1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGV4cG9ydHMucnVubmluZyAtPSAxO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdzdG9wJywgdGhpcy5kZWx0YVRpbWUsIHRoaXMuZWxhcHNlZFRpbWUsIHRoaXMuZnJhbWVDb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHVwZGF0ZSB0aGUgYW5pbWF0aW9uIGxvb3Agb25jZVxuICAgICAqXG4gICAgICogQGVtaXQgQW5pbWl0dGVyI3VwZGF0ZVxuICAgICAqIEByZXR1cm4ge0FuaW1pdHRlcn1cbiAgICAgKi9cbiAgICB1cGRhdGU6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuZnJhbWVDb3VudCsrO1xuICAgICAgICAvKiogQHByaXZhdGUgKi9cbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMuX19sYXN0VGltZSA9IHRoaXMuX19sYXN0VGltZSB8fCBub3c7XG4gICAgICAgIHRoaXMuZGVsdGFUaW1lID0gKHRoaXMuZml4ZWREZWx0YSB8fCBleHBvcnRzLmdsb2JhbEZpeGVkRGVsdGEpID8gMTAwMC9NYXRoLm1pbig2MCwgdGhpcy5fX2ZwcykgOiBub3cgLSB0aGlzLl9fbGFzdFRpbWU7XG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgKz0gdGhpcy5kZWx0YVRpbWU7XG4gICAgICAgIHRoaXMuX19sYXN0VGltZSA9IG5vdztcblxuICAgICAgICB0aGlzLmVtaXQoJ3VwZGF0ZScsIHRoaXMuZGVsdGFUaW1lLCB0aGlzLmVsYXBzZWRUaW1lLCB0aGlzLmZyYW1lQ291bnQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59O1xuXG5cblxuZm9yKHZhciBtZXRob2QgaW4gbWV0aG9kcyl7XG4gICAgQW5pbWl0dGVyLnByb3RvdHlwZVttZXRob2RdID0gbWV0aG9kc1ttZXRob2RdO1xufVxuXG5cbi8qKlxuICogY3JlYXRlIGFuIGFuaW1pdHRlciBpbnN0YW5jZSxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuKCBkZWx0YVRpbWU6TnVtYmVyLCBlbGFwc2VkVGltZTpOdW1iZXIsIGZyYW1lQ291bnQ6TnVtYmVyIClcbiAqIEByZXR1cm5zIHtBbmltaXR0ZXJ9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFuaW1pdHRlcihvcHRpb25zLCBmbil7XG5cbiAgICBpZiggYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJyl7XG4gICAgICAgIGZuID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfaW5zdGFuY2UgPSBuZXcgQW5pbWl0dGVyKCBvcHRpb25zICk7XG5cbiAgICBpZiggZm4gKXtcbiAgICAgICAgX2luc3RhbmNlLm9uKCd1cGRhdGUnLCBmbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9pbnN0YW5jZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gY3JlYXRlQW5pbWl0dGVyO1xuXG4vKipcbiAqIGNyZWF0ZSBhbiBhbmltaXR0ZXIgaW5zdGFuY2UsXG4gKiB3aGVyZSB0aGUgc2NvcGUgaXMgYm91bmQgaW4gYWxsIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4oIGRlbHRhVGltZTpOdW1iZXIsIGVsYXBzZWRUaW1lOk51bWJlciwgZnJhbWVDb3VudDpOdW1iZXIgKVxuICogQHJldHVybnMge0FuaW1pdHRlcn1cbiAqL1xuZXhwb3J0cy5ib3VuZCA9IGZ1bmN0aW9uKG9wdGlvbnMsIGZuKXtcblxuICAgIHZhciBsb29wID0gY3JlYXRlQW5pbWl0dGVyKG9wdGlvbnMsIGZuKSxcbiAgICAgICAgZnVuY3Rpb25LZXlzID0gZnVuY3Rpb25zKEFuaW1pdHRlci5wcm90b3R5cGUpLFxuICAgICAgICBoYXNCaW5kID0gISFGdW5jdGlvbi5wcm90b3R5cGUuYmluZCxcbiAgICAgICAgZm5LZXk7XG5cbiAgICBmb3IodmFyIGk9MDsgaTxmdW5jdGlvbktleXMubGVuZ3RoOyBpKyspe1xuICAgICAgICBmbktleSA9IGZ1bmN0aW9uS2V5c1tpXTtcbiAgICAgICAgbG9vcFtmbktleV0gPSBoYXNCaW5kID8gbG9vcFtmbktleV0uYmluZChsb29wKSA6IGJpbmQobG9vcFtmbktleV0sIGxvb3ApO1xuICAgIH1cblxuICAgIHJldHVybiBsb29wO1xufTtcblxuXG5leHBvcnRzLkFuaW1pdHRlciA9IEFuaW1pdHRlcjtcblxuLyoqXG4gKiBpZiB0cnVlLCBhbGwgYEFuaW1pdHRlcmAgaW5zdGFuY2VzIHdpbGwgYmVoYXZlIGFzIGlmIGBvcHRpb25zLmZpeGVkRGVsdGEgPSB0cnVlYFxuICovXG5leHBvcnRzLmdsb2JhbEZpeGVkRGVsdGEgPSBmYWxzZTtcblxuLy9oZWxwZnVsIHRvIGluaGVyaXQgZnJvbSB3aGVuIHVzaW5nIGJ1bmRsZWRcbmV4cG9ydHMuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuLy9rZWVwIGEgZ2xvYmFsIGNvdW50ZXIgb2YgYWxsIGxvb3BzIHJ1bm5pbmcsIGhlbHBmdWwgdG8gd2F0Y2ggaW4gZGV2IHRvb2xzXG5leHBvcnRzLnJ1bm5pbmcgPSAwO1xuXG5mdW5jdGlvbiBiaW5kKGZuLCBzY29wZSl7XG4gICAgaWYodHlwZW9mIGZuLmJpbmQgPT09ICdmdW5jdGlvbicpe1xuICAgICAgICByZXR1cm4gZm4uYmluZChzY29wZSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoc2NvcGUsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZnVuY3Rpb25zKG9iail7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIHZhciBhcnIgPSBbXTtcbiAgICBmb3IodmFyIGk9MDsgaTxrZXlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgaWYodHlwZW9mIG9ialtrZXlzW2ldXSA9PT0gJ2Z1bmN0aW9uJyl7XG4gICAgICAgICAgICBhcnIucHVzaChrZXlzW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuXG5cblxuLy9wb2x5ZmlsbCBEYXRlLm5vdyBmb3IgcmVhbC1vbGQgYnJvd3NlcnNcbkRhdGUubm93ID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24gbm93KCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbn07XG4iLCJ2YXIgdG9CdWZmZXIgICAgICAgPSByZXF1aXJlKCd0eXBlZGFycmF5LXRvLWJ1ZmZlcicpLFxuICAgIGlzRmxvYXQzMkFycmF5ID0gcmVxdWlyZSgndmFsaWRhdGUuaW8tZmxvYXQzMmFycmF5JylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbG9hdDMyQXJyYXkpIHtcblxuICAgIGlmICghZmxvYXQzMkFycmF5KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgRmxvYXQzMkFycmF5IHBhcmFtZXRlciBpcyBtaXNzaW5nLicpXG5cbiAgICBpZiAoIWlzRmxvYXQzMkFycmF5KGZsb2F0MzJBcnJheSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHBhcmFtZXRlciBpcyBub3QgYSBGbG9hdDMyQXJyYXkuJylcblxuICAgIHRoaXMudG9CdWZmZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgbCAgID0gZmxvYXQzMkFycmF5Lmxlbmd0aCxcbiAgICAgICAgICAgIGFyciA9IG5ldyBJbnQxNkFycmF5KGwpLFxuICAgICAgICAgICAgaVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGFycltpXSA9IE1hdGgubWluKDEsIGZsb2F0MzJBcnJheVtpXSkgKiAweDdGRkZcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b0J1ZmZlcihhcnIpXG4gICAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gcGxhY2VIb2xkZXJzQ291bnQgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycylcbiAgLy8gaWYgdGhlcmUgYXJlIHR3byBwbGFjZWhvbGRlcnMsIHRoYW4gdGhlIHR3byBjaGFyYWN0ZXJzIGJlZm9yZSBpdFxuICAvLyByZXByZXNlbnQgb25lIGJ5dGVcbiAgLy8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzXG4gIC8vIHRoaXMgaXMganVzdCBhIGNoZWFwIGhhY2sgdG8gbm90IGRvIGluZGV4T2YgdHdpY2VcbiAgcmV0dXJuIGI2NFtsZW4gLSAyXSA9PT0gJz0nID8gMiA6IGI2NFtsZW4gLSAxXSA9PT0gJz0nID8gMSA6IDBcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuICByZXR1cm4gKGI2NC5sZW5ndGggKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNDb3VudChiNjQpXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIGksIGwsIHRtcCwgcGxhY2VIb2xkZXJzLCBhcnJcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcbiAgcGxhY2VIb2xkZXJzID0gcGxhY2VIb2xkZXJzQ291bnQoYjY0KVxuXG4gIGFyciA9IG5ldyBBcnIoKGxlbiAqIDMgLyA0KSAtIHBsYWNlSG9sZGVycylcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIGwgPSBwbGFjZUhvbGRlcnMgPiAwID8gbGVuIC0gNCA6IGxlblxuXG4gIHZhciBMID0gMFxuXG4gIGZvciAoaSA9IDA7IGkgPCBsOyBpICs9IDQpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHwgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbTCsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnMgPT09IDIpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9IGVsc2UgaWYgKHBsYWNlSG9sZGVycyA9PT0gMSkge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltMKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICsgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9ICh1aW50OFtpXSA8PCAxNikgKyAodWludDhbaSArIDFdIDw8IDgpICsgKHVpbnQ4W2kgKyAyXSlcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIG91dHB1dCA9ICcnXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBvdXRwdXQgKz0gbG9va3VwW3RtcCA+PiAyXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9ICc9PSdcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgKHVpbnQ4W2xlbiAtIDFdKVxuICAgIG91dHB1dCArPSBsb29rdXBbdG1wID4+IDEwXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gJz0nXG4gIH1cblxuICBwYXJ0cy5wdXNoKG91dHB1dClcblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIiIsIi8qIVxuICogQ3Jvc3MtQnJvd3NlciBTcGxpdCAxLjEuMVxuICogQ29weXJpZ2h0IDIwMDctMjAxMiBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT5cbiAqIEF2YWlsYWJsZSB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIEVDTUFTY3JpcHQgY29tcGxpYW50LCB1bmlmb3JtIGNyb3NzLWJyb3dzZXIgc3BsaXQgbWV0aG9kXG4gKi9cblxuLyoqXG4gKiBTcGxpdHMgYSBzdHJpbmcgaW50byBhbiBhcnJheSBvZiBzdHJpbmdzIHVzaW5nIGEgcmVnZXggb3Igc3RyaW5nIHNlcGFyYXRvci4gTWF0Y2hlcyBvZiB0aGVcbiAqIHNlcGFyYXRvciBhcmUgbm90IGluY2x1ZGVkIGluIHRoZSByZXN1bHQgYXJyYXkuIEhvd2V2ZXIsIGlmIGBzZXBhcmF0b3JgIGlzIGEgcmVnZXggdGhhdCBjb250YWluc1xuICogY2FwdHVyaW5nIGdyb3VwcywgYmFja3JlZmVyZW5jZXMgYXJlIHNwbGljZWQgaW50byB0aGUgcmVzdWx0IGVhY2ggdGltZSBgc2VwYXJhdG9yYCBpcyBtYXRjaGVkLlxuICogRml4ZXMgYnJvd3NlciBidWdzIGNvbXBhcmVkIHRvIHRoZSBuYXRpdmUgYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIGFuZCBjYW4gYmUgdXNlZCByZWxpYWJseVxuICogY3Jvc3MtYnJvd3Nlci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgU3RyaW5nIHRvIHNwbGl0LlxuICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfSBzZXBhcmF0b3IgUmVnZXggb3Igc3RyaW5nIHRvIHVzZSBmb3Igc2VwYXJhdGluZyB0aGUgc3RyaW5nLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtsaW1pdF0gTWF4aW11bSBudW1iZXIgb2YgaXRlbXMgdG8gaW5jbHVkZSBpbiB0aGUgcmVzdWx0IGFycmF5LlxuICogQHJldHVybnMge0FycmF5fSBBcnJheSBvZiBzdWJzdHJpbmdzLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBCYXNpYyB1c2VcbiAqIHNwbGl0KCdhIGIgYyBkJywgJyAnKTtcbiAqIC8vIC0+IFsnYScsICdiJywgJ2MnLCAnZCddXG4gKlxuICogLy8gV2l0aCBsaW1pdFxuICogc3BsaXQoJ2EgYiBjIGQnLCAnICcsIDIpO1xuICogLy8gLT4gWydhJywgJ2InXVxuICpcbiAqIC8vIEJhY2tyZWZlcmVuY2VzIGluIHJlc3VsdCBhcnJheVxuICogc3BsaXQoJy4ud29yZDEgd29yZDIuLicsIC8oW2Etel0rKShcXGQrKS9pKTtcbiAqIC8vIC0+IFsnLi4nLCAnd29yZCcsICcxJywgJyAnLCAnd29yZCcsICcyJywgJy4uJ11cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gc3BsaXQodW5kZWYpIHtcblxuICB2YXIgbmF0aXZlU3BsaXQgPSBTdHJpbmcucHJvdG90eXBlLnNwbGl0LFxuICAgIGNvbXBsaWFudEV4ZWNOcGNnID0gLygpPz8vLmV4ZWMoXCJcIilbMV0gPT09IHVuZGVmLFxuICAgIC8vIE5QQ0c6IG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwXG4gICAgc2VsZjtcblxuICBzZWxmID0gZnVuY3Rpb24oc3RyLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBgbmF0aXZlU3BsaXRgXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzZXBhcmF0b3IpICE9PSBcIltvYmplY3QgUmVnRXhwXVwiKSB7XG4gICAgICByZXR1cm4gbmF0aXZlU3BsaXQuY2FsbChzdHIsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH1cbiAgICB2YXIgb3V0cHV0ID0gW10sXG4gICAgICBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/IFwiaVwiIDogXCJcIikgKyAoc2VwYXJhdG9yLm11bHRpbGluZSA/IFwibVwiIDogXCJcIikgKyAoc2VwYXJhdG9yLmV4dGVuZGVkID8gXCJ4XCIgOiBcIlwiKSArIC8vIFByb3Bvc2VkIGZvciBFUzZcbiAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gXCJ5XCIgOiBcIlwiKSxcbiAgICAgIC8vIEZpcmVmb3ggMytcbiAgICAgIGxhc3RMYXN0SW5kZXggPSAwLFxuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHNlcGFyYXRvciA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyBcImdcIiksXG4gICAgICBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgIHN0ciArPSBcIlwiOyAvLyBUeXBlLWNvbnZlcnRcbiAgICBpZiAoIWNvbXBsaWFudEV4ZWNOcGNnKSB7XG4gICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgIHNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKFwiXlwiICsgc2VwYXJhdG9yLnNvdXJjZSArIFwiJCg/IVxcXFxzKVwiLCBmbGFncyk7XG4gICAgfVxuICAgIC8qIFZhbHVlcyBmb3IgYGxpbWl0YCwgcGVyIHRoZSBzcGVjOlxuICAgICAqIElmIHVuZGVmaW5lZDogNDI5NDk2NzI5NSAvLyBNYXRoLnBvdygyLCAzMikgLSAxXG4gICAgICogSWYgMCwgSW5maW5pdHksIG9yIE5hTjogMFxuICAgICAqIElmIHBvc2l0aXZlIG51bWJlcjogbGltaXQgPSBNYXRoLmZsb29yKGxpbWl0KTsgaWYgKGxpbWl0ID4gNDI5NDk2NzI5NSkgbGltaXQgLT0gNDI5NDk2NzI5NjtcbiAgICAgKiBJZiBuZWdhdGl2ZSBudW1iZXI6IDQyOTQ5NjcyOTYgLSBNYXRoLmZsb29yKE1hdGguYWJzKGxpbWl0KSlcbiAgICAgKiBJZiBvdGhlcjogVHlwZS1jb252ZXJ0LCB0aGVuIHVzZSB0aGUgYWJvdmUgcnVsZXNcbiAgICAgKi9cbiAgICBsaW1pdCA9IGxpbWl0ID09PSB1bmRlZiA/IC0xID4+PiAwIDogLy8gTWF0aC5wb3coMiwgMzIpIC0gMVxuICAgIGxpbWl0ID4+PiAwOyAvLyBUb1VpbnQzMihsaW1pdClcbiAgICB3aGlsZSAobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdHIpKSB7XG4gICAgICAvLyBgc2VwYXJhdG9yLmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goc3RyLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvclxuICAgICAgICAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cHNcbiAgICAgICAgaWYgKCFjb21wbGlhbnRFeGVjTnBjZyAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZikge1xuICAgICAgICAgICAgICAgIG1hdGNoW2ldID0gdW5kZWY7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICBpZiAob3V0cHV0Lmxlbmd0aCA+PSBsaW1pdCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2VwYXJhdG9yLmxhc3RJbmRleCA9PT0gbWF0Y2guaW5kZXgpIHtcbiAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yLnRlc3QoXCJcIikpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goXCJcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKHN0ci5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gbGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgbGltaXQpIDogb3V0cHV0O1xuICB9O1xuXG4gIHJldHVybiBzZWxmO1xufSkoKTtcbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxudmFyIEtfTUFYX0xFTkdUSCA9IDB4N2ZmZmZmZmZcbmV4cG9ydHMua01heExlbmd0aCA9IEtfTUFYX0xFTkdUSFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBQcmludCB3YXJuaW5nIGFuZCByZWNvbW1lbmQgdXNpbmcgYGJ1ZmZlcmAgdjQueCB3aGljaCBoYXMgYW4gT2JqZWN0XG4gKiAgICAgICAgICAgICAgIGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBXZSByZXBvcnQgdGhhdCB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBpZiB0aGUgYXJlIG5vdCBzdWJjbGFzc2FibGVcbiAqIHVzaW5nIF9fcHJvdG9fXy4gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWBcbiAqIChTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOCkuIElFIDEwIGxhY2tzIHN1cHBvcnRcbiAqIGZvciBfX3Byb3RvX18gYW5kIGhhcyBhIGJ1Z2d5IHR5cGVkIGFycmF5IGltcGxlbWVudGF0aW9uLlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICBjb25zb2xlLmVycm9yKFxuICAgICdUaGlzIGJyb3dzZXIgbGFja3MgdHlwZWQgYXJyYXkgKFVpbnQ4QXJyYXkpIHN1cHBvcnQgd2hpY2ggaXMgcmVxdWlyZWQgYnkgJyArXG4gICAgJ2BidWZmZXJgIHY1LnguIFVzZSBgYnVmZmVyYCB2NC54IGlmIHlvdSByZXF1aXJlIG9sZCBicm93c2VyIHN1cHBvcnQuJ1xuICApXG59XG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgLy8gQ2FuIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkP1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAobGVuZ3RoID4gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICB2YXIgYnVmID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICBidWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYnVmXG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZShhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20oYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG5pZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICB2YWx1ZTogbnVsbCxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG5mdW5jdGlvbiBmcm9tICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChpc0FycmF5QnVmZmVyKHZhbHVlKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbSh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBOb3RlOiBDaGFuZ2UgcHJvdG90eXBlICphZnRlciogQnVmZmVyLmZyb20gaXMgZGVmaW5lZCB0byB3b3JrYXJvdW5kIENocm9tZSBidWc6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzE0OFxuQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSBidWYud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIGJ1ZiA9IGJ1Zi5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICBidWZbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyIChhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIHZhciBidWZcbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIGJ1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAob2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuKVxuXG4gICAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBidWZcbiAgICB9XG5cbiAgICBvYmouY29weShidWYsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gYnVmXG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKGlzQXJyYXlCdWZmZXJWaWV3KG9iaikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IG51bWJlcklzTmFOKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIoMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIEFycmF5LmlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IEtfTUFYX0xFTkdUSGAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsgS19NQVhfTEVOR1RILnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyID09PSB0cnVlXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmIChpc0FycmF5QnVmZmVyVmlldyhzdHJpbmcpIHx8IGlzQXJyYXlCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCAoYW5kIHRoZSBgaXMtYnVmZmVyYCBucG0gcGFja2FnZSlcbi8vIHRvIGRldGVjdCBhIEJ1ZmZlciBpbnN0YW5jZS4gSXQncyBub3QgcG9zc2libGUgdG8gdXNlIGBpbnN0YW5jZW9mIEJ1ZmZlcmBcbi8vIHJlbGlhYmx5IGluIGEgYnJvd3NlcmlmeSBjb250ZXh0IGJlY2F1c2UgdGhlcmUgY291bGQgYmUgbXVsdGlwbGUgZGlmZmVyZW50XG4vLyBjb3BpZXMgb2YgdGhlICdidWZmZXInIHBhY2thZ2UgaW4gdXNlLiBUaGlzIG1ldGhvZCB3b3JrcyBldmVuIGZvciBCdWZmZXJcbi8vIGluc3RhbmNlcyB0aGF0IHdlcmUgY3JlYXRlZCBmcm9tIGFub3RoZXIgY29weSBvZiB0aGUgYGJ1ZmZlcmAgcGFja2FnZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE1NFxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChudW1iZXJJc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAobnVtYmVySXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPj4+IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyAoYnl0ZXNbaSArIDFdICogMjU2KSlcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZylcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0ci50cmltKCkucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG4vLyBBcnJheUJ1ZmZlcnMgZnJvbSBhbm90aGVyIGNvbnRleHQgKGkuZS4gYW4gaWZyYW1lKSBkbyBub3QgcGFzcyB0aGUgYGluc3RhbmNlb2ZgIGNoZWNrXG4vLyBidXQgdGhleSBzaG91bGQgYmUgdHJlYXRlZCBhcyB2YWxpZC4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTY2XG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8XG4gICAgKG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSAnQXJyYXlCdWZmZXInICYmXG4gICAgICB0eXBlb2Ygb2JqLmJ5dGVMZW5ndGggPT09ICdudW1iZXInKVxufVxuXG4vLyBOb2RlIDAuMTAgc3VwcG9ydHMgYEFycmF5QnVmZmVyYCBidXQgbGFja3MgYEFycmF5QnVmZmVyLmlzVmlld2BcbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3IChvYmopIHtcbiAgcmV0dXJuICh0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nKSAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcob2JqKVxufVxuXG5mdW5jdGlvbiBudW1iZXJJc05hTiAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG9iaiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwidmFyIHRvQnVmZmVyICA9IHJlcXVpcmUoJ3R5cGVkYXJyYXktdG8tYnVmZmVyJyksXG4gICAgaXNCcm93c2VyID0gdHlwZW9mKGRvY3VtZW50KSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpID09PSAnZnVuY3Rpb24nLFxuXG4gICAgLy8gY2FjaGVkLCB1c2VkIG9ubHkgb25jZSBmb3IgYnJvd3NlciBlbnZpcm9ubWVudHNcbiAgICB2ZXJpZmllZEltYWdlVHlwZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGNhbnZhcywgb3B0aW9ucykge1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzLCBxdWFsaXR5XG5cbiAgICBvcHRpb25zICAgICAgICAgICAgID0gb3B0aW9ucyAgICAgICAgICAgICAgID8gb3B0aW9ucyA6ICAgICAgICAgICAgIHt9XG4gICAgb3B0aW9ucy5pbWFnZSAgICAgICA9IG9wdGlvbnMuaW1hZ2UgICAgICAgICA/IG9wdGlvbnMuaW1hZ2UgOiAgICAgICB7fVxuICAgIG9wdGlvbnMuaW1hZ2UudHlwZXMgPSBvcHRpb25zLmltYWdlLnR5cGVzICAgPyBvcHRpb25zLmltYWdlLnR5cGVzIDogW11cblxuICAgIC8vIHZhbGlkYXRlIHNvbWUgb3B0aW9ucyB0aGlzIGNsYXNzIG5lZWRzXG4gICAgaWYgKG9wdGlvbnMuaW1hZ2UudHlwZXMubGVuZ3RoID4gMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUb28gbWFueSBpbWFnZSB0eXBlcyBhcmUgc3BlY2lmaWVkIScpXG5cbiAgICBlbHNlIGlmIChvcHRpb25zLmltYWdlLnR5cGVzLmxlbmd0aCA8IDEpIHtcblxuICAgICAgICAvLyBTZXQgYSBkZWZhdWx0IGltYWdlIHR5cGUsIGp1c3QgdG8gYmUgcm9idXN0XG4gICAgICAgIG9wdGlvbnMuaW1hZ2UudHlwZXMgPSBpc0Jyb3dzZXIgPyBbJ3dlYnAnLCAnanBlZyddIDogWydwbmcnXVxuICAgIH1cblxuICAgIGlmICghb3B0aW9ucy5pbWFnZS5xdWFsaXR5KVxuICAgICAgICBvcHRpb25zLmltYWdlLnF1YWxpdHkgPSAuNSAvLyBkZWZhdWx0XG5cbiAgICBxdWFsaXR5ID0gcGFyc2VGbG9hdChvcHRpb25zLmltYWdlLnF1YWxpdHkpXG5cbiAgICBmdW5jdGlvbiBjb21wb3NlSW1hZ2VUeXBlKGluZGV4KSB7XG4gICAgICAgIHZhciBpbWFnZVR5cGVcblxuICAgICAgICBpZiAob3B0aW9ucy5pbWFnZS50eXBlc1tpbmRleF0pXG4gICAgICAgICAgICBpbWFnZVR5cGUgPSAnaW1hZ2UvJyArIG9wdGlvbnMuaW1hZ2UudHlwZXNbaW5kZXhdXG5cbiAgICAgICAgcmV0dXJuIGltYWdlVHlwZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTWF0Y2godXJpLCBpbWFnZVR5cGUpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gdXJpICYmIHVyaS5tYXRjaChpbWFnZVR5cGUpXG5cbiAgICAgICAgbWF0Y2ggJiYgb3B0aW9ucy5kZWJ1ZyAmJiBvcHRpb25zLmRlYnVnKCdJbWFnZSB0eXBlICVzIHZlcmlmaWVkJywgaW1hZ2VUeXBlKVxuXG4gICAgICAgIHJldHVybiBtYXRjaFxuICAgIH1cblxuICAgIC8vIFBlcmZvcm1hbmNlIHR3ZWFrLCB3ZSBkbyBub3QgbmVlZCBhIGJpZyBjYW52YXMgZm9yIGZpbmRpbmcgb3V0IHRoZSBzdXBwb3J0ZWQgaW1hZ2UgdHlwZVxuICAgIGZ1bmN0aW9uIGdldFRlc3RDYW52YXMoKSB7XG5cbiAgICAgICAgdmFyIHRlc3RDYW52YXNcblxuICAgICAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICAgICAgICB0ZXN0Q2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJylcbiAgICAgICAgICAgIHRlc3RDYW52YXMud2lkdGggPSB0ZXN0Q2FudmFzLmhlaWdodCA9IDFcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICB0ZXN0Q2FudmFzID0gY2FudmFzXG5cbiAgICAgICAgcmV0dXJuIHRlc3RDYW52YXNcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW52YXNTdXBwb3J0c0ltYWdlVHlwZUFzeW5jKGltYWdlVHlwZSwgY2IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGdldFRlc3RDYW52YXMoKS50b0RhdGFVUkwoaW1hZ2VUeXBlLCBmdW5jdGlvbihlcnIsIHVyaSkge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgIGNiKGVycilcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGNiKG51bGwsIGlzTWF0Y2godXJpLCBpbWFnZVR5cGUpKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBjYXRjaCAoZXhjKSB7XG4gICAgICAgICAgICBjYihudWxsLCBmYWxzZSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbnZhc1N1cHBvcnRzSW1hZ2VUeXBlU3luYyhpbWFnZVR5cGUpIHtcbiAgICAgICAgdmFyIG1hdGNoXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciB0ZXN0Q2FudmFzID0gZ2V0VGVzdENhbnZhcygpLFxuICAgICAgICAgICAgICAgIHVyaSAgICAgICAgPSB0ZXN0Q2FudmFzLnRvRGF0YVVSTCAmJiB0ZXN0Q2FudmFzLnRvRGF0YVVSTChpbWFnZVR5cGUpXG5cbiAgICAgICAgICAgIG1hdGNoID0gaXNNYXRjaCh1cmksIGltYWdlVHlwZSlcbiAgICAgICAgfSBjYXRjaCAoZXhjKSB7XG5cbiAgICAgICAgICAgIC8vIENhbiBoYXBwZW4gd2hlbiBpLkUuIGEgc3BpZGVyIGlzIGNvbWluZy4gSnVzdCBiZSByb2J1c3QgaGVyZSBhbmQgY29udGludWUuXG4gICAgICAgICAgICBvcHRpb25zLmRlYnVnICYmXG4gICAgICAgICAgICBvcHRpb25zLmxvZ2dlci5kZWJ1ZygnRmFpbGVkIHRvIGNhbGwgdG9EYXRhVVJMKCkgb24gY2FudmFzIGZvciBpbWFnZSB0eXBlICVzJywgaW1hZ2VUeXBlKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hdGNoXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmVyaWZ5SW1hZ2VUeXBlQXN5bmMoaW1hZ2VUeXBlLCBjYikge1xuICAgICAgICBjYW52YXNTdXBwb3J0c0ltYWdlVHlwZUFzeW5jKGltYWdlVHlwZSwgZnVuY3Rpb24oZXJyLCBtYXRjaCkge1xuICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICBjYihlcnIpXG4gICAgICAgICAgICBlbHNlIHtcblxuICAgICAgICAgICAgICAgIGlmIChtYXRjaClcbiAgICAgICAgICAgICAgICAgICAgY2IobnVsbCwgaW1hZ2VUeXBlKVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbWFnZVR5cGUgPSBjb21wb3NlSW1hZ2VUeXBlKDEpXG5cbiAgICAgICAgICAgICAgICAgICAgY2FudmFzU3VwcG9ydHNJbWFnZVR5cGVBc3luYyhpbWFnZVR5cGUsIGZ1bmN0aW9uKGVyciwgbWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2IoZXJyKVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNiKG51bGwsIG1hdGNoID8gaW1hZ2VUeXBlOiBudWxsKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2ZXJpZnlJbWFnZVR5cGVTeW5jKGltYWdlVHlwZSkge1xuICAgICAgICBpZiAoIWNhbnZhc1N1cHBvcnRzSW1hZ2VUeXBlU3luYyhpbWFnZVR5cGUpKSB7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmltYWdlLnR5cGVzWzFdKSB7XG4gICAgICAgICAgICAgICAgaW1hZ2VUeXBlID0gY29tcG9zZUltYWdlVHlwZSgxKVxuXG4gICAgICAgICAgICAgICAgaWYgKCFjYW52YXNTdXBwb3J0c0ltYWdlVHlwZVN5bmMoaW1hZ2VUeXBlKSlcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VUeXBlID0gbnVsbFxuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgaW1hZ2VUeXBlID0gbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgIWltYWdlVHlwZSAmJiBvcHRpb25zLmRlYnVnICYmIG9wdGlvbnMubG9nZ2VyLmRlYnVnKCdVbmFibGUgdG8gdmVyaWZ5IGltYWdlIHR5cGUnKVxuXG4gICAgICAgIHJldHVybiBpbWFnZVR5cGVcbiAgICB9XG5cbiAgICAvLyBjYWxsYmFja3MgYXJlIG5lZWRlZCBmb3Igc2VydmVyIHNpZGUgdGVzdHNcbiAgICBmdW5jdGlvbiB2ZXJpZnlJbWFnZVR5cGUoY2IpIHtcbiAgICAgICAgdmFyIGltYWdlVHlwZSA9IGNvbXBvc2VJbWFnZVR5cGUoMClcblxuICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgIHZlcmlmeUltYWdlVHlwZUFzeW5jKGltYWdlVHlwZSwgY2IpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdmVyaWZ5SW1hZ2VUeXBlU3luYyhpbWFnZVR5cGUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB0aGlzIG1ldGhvZCBpcyBwcm92ZW4gdG8gYmUgZmFzdCwgc2VlXG4gICAgLy8gaHR0cDovL2pzcGVyZi5jb20vZGF0YS11cmktdG8tYnVmZmVyLXBlcmZvcm1hbmNlLzNcbiAgICBmdW5jdGlvbiB1cmlUb0J1ZmZlcih1cmkpIHtcblxuICAgICAgICB2YXIgdXJpID0gdXJpLnNwbGl0KCcsJylbMV0sXG4gICAgICAgICAgICBieXRlc1xuXG4gICAgICAgIC8vIEJld2FyZSB0aGF0IHRoZSBhdG9iIGZ1bmN0aW9uIG1pZ2h0IGJlIGEgc3RhdGljIG9uZSBmb3Igc2VydmVyIHNpZGUgdGVzdHNcbiAgICAgICAgaWYgKHR5cGVvZihhdG9iKSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGJ5dGVzID0gYXRvYih1cmkpXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZihzZWxmLmNvbnN0cnVjdG9yLmF0b2IpID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgYnl0ZXMgPSBzZWxmLmNvbnN0cnVjdG9yLmF0b2IodXJpKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2F0b2IgZnVuY3Rpb24gaXMgbWlzc2luZycpXG5cbiAgICAgICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KGJ5dGVzLmxlbmd0aClcblxuICAgICAgICAvLyBodHRwOi8vbXJhbGUucGgvYmxvZy8yMDE0LzEyLzI0L2FycmF5LWxlbmd0aC1jYWNoaW5nLmh0bWxcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBieXRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGFycltpXSA9IGJ5dGVzLmNoYXJDb2RlQXQoaSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b0J1ZmZlcihhcnIpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9CdWZmZXJTeW5jKCkge1xuICAgICAgICB2YXIgaW1hZ2VUeXBlID0gc2VsZi5nZXRJbWFnZVR5cGUoKSxcbiAgICAgICAgICAgIGJ1ZmZlclxuXG4gICAgICAgIGlmIChpbWFnZVR5cGUpIHtcbiAgICAgICAgICAgIHZhciB1cmkgPSBjYW52YXMudG9EYXRhVVJMKGltYWdlVHlwZSwgcXVhbGl0eSlcbiAgICAgICAgICAgIGJ1ZmZlciA9IHVyaVRvQnVmZmVyKHVyaSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBidWZmZXJcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0J1ZmZlckFzeW5jKGNiKSB7XG4gICAgICAgIHNlbGYuZ2V0SW1hZ2VUeXBlKGZ1bmN0aW9uKGVyciwgaW1hZ2VUeXBlKSB7XG4gICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgIGNiKGVycilcbiAgICAgICAgICAgIGVsc2UgaWYgKCFpbWFnZVR5cGUpXG4gICAgICAgICAgICAgICAgY2IoKVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGNhbnZhcy50b0RhdGFVUkwoaW1hZ2VUeXBlLCBmdW5jdGlvbihlcnIsIHVyaSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICAgICAgY2IoZXJyKVxuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBjYihudWxsLCB1cmlUb0J1ZmZlcih1cmkpKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgdGhpcy50b0J1ZmZlciA9IGZ1bmN0aW9uKGNiKSB7XG4gICAgICAgIGlmIChjYilcbiAgICAgICAgICAgIHRvQnVmZmVyQXN5bmMoY2IpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiB0b0J1ZmZlclN5bmMoKVxuICAgIH1cblxuICAgIC8vIGJyb3dzZXJzIGRvIG5vdCBuZWVkIGEgY2FsbGJhY2ssIGJ1dCB0ZXN0cyBkb1xuICAgIHRoaXMuZ2V0SW1hZ2VUeXBlID0gZnVuY3Rpb24oY2IpIHtcblxuICAgICAgICAvLyBvbmx5IHJ1biBmb3IgdGhlIGZpcnN0IHRpbWUgdGhpcyBjb25zdHJ1Y3RvciBpcyBjYWxsZWQgYW5kXG4gICAgICAgIC8vIGNhY2hlIHJlc3VsdCBmb3IgdGhlIG5leHQgY2FsbHNcblxuICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgIGlmICghdmVyaWZpZWRJbWFnZVR5cGUgfHwgIWlzQnJvd3NlcilcbiAgICAgICAgICAgICAgICB2ZXJpZnlJbWFnZVR5cGUoZnVuY3Rpb24oZXJyLCBuZXdWZXJpZmllZEltYWdlVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICAgICAgY2IoZXJyKVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcmlmaWVkSW1hZ2VUeXBlID0gbmV3VmVyaWZpZWRJbWFnZVR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiKG51bGwsIHZlcmlmaWVkSW1hZ2VUeXBlKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBjYihudWxsLCB2ZXJpZmllZEltYWdlVHlwZSlcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gb24gdGhlIGJyb3dzZXIgc2lkZSB3ZSBkbyBjYWNoZSBpdCBmb3Igc3BlZWRcbiAgICAgICAgICAgIGlmICghdmVyaWZpZWRJbWFnZVR5cGUgfHwgIWlzQnJvd3NlcilcbiAgICAgICAgICAgICAgICB2ZXJpZmllZEltYWdlVHlwZSA9IHZlcmlmeUltYWdlVHlwZSgpXG5cbiAgICAgICAgICAgIHJldHVybiB2ZXJpZmllZEltYWdlVHlwZVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8gY29udGFpbnMsIGFkZCwgcmVtb3ZlLCB0b2dnbGVcbnZhciBpbmRleG9mID0gcmVxdWlyZSgnaW5kZXhvZicpXG5cbm1vZHVsZS5leHBvcnRzID0gQ2xhc3NMaXN0XG5cbmZ1bmN0aW9uIENsYXNzTGlzdChlbGVtKSB7XG4gICAgdmFyIGNsID0gZWxlbS5jbGFzc0xpc3RcblxuICAgIGlmIChjbCkge1xuICAgICAgICByZXR1cm4gY2xcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NMaXN0ID0ge1xuICAgICAgICBhZGQ6IGFkZFxuICAgICAgICAsIHJlbW92ZTogcmVtb3ZlXG4gICAgICAgICwgY29udGFpbnM6IGNvbnRhaW5zXG4gICAgICAgICwgdG9nZ2xlOiB0b2dnbGVcbiAgICAgICAgLCB0b1N0cmluZzogJHRvU3RyaW5nXG4gICAgICAgICwgbGVuZ3RoOiAwXG4gICAgICAgICwgaXRlbTogaXRlbVxuICAgIH1cblxuICAgIHJldHVybiBjbGFzc0xpc3RcblxuICAgIGZ1bmN0aW9uIGFkZCh0b2tlbikge1xuICAgICAgICB2YXIgbGlzdCA9IGdldFRva2VucygpXG4gICAgICAgIGlmIChpbmRleG9mKGxpc3QsIHRva2VuKSA+IC0xKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBsaXN0LnB1c2godG9rZW4pXG4gICAgICAgIHNldFRva2VucyhsaXN0KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZSh0b2tlbikge1xuICAgICAgICB2YXIgbGlzdCA9IGdldFRva2VucygpXG4gICAgICAgICAgICAsIGluZGV4ID0gaW5kZXhvZihsaXN0LCB0b2tlbilcblxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3Quc3BsaWNlKGluZGV4LCAxKVxuICAgICAgICBzZXRUb2tlbnMobGlzdClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb250YWlucyh0b2tlbikge1xuICAgICAgICByZXR1cm4gaW5kZXhvZihnZXRUb2tlbnMoKSwgdG9rZW4pID4gLTFcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b2dnbGUodG9rZW4pIHtcbiAgICAgICAgaWYgKGNvbnRhaW5zKHRva2VuKSkge1xuICAgICAgICAgICAgcmVtb3ZlKHRva2VuKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhZGQodG9rZW4pXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gJHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gZWxlbS5jbGFzc05hbWVcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpdGVtKGluZGV4KSB7XG4gICAgICAgIHZhciB0b2tlbnMgPSBnZXRUb2tlbnMoKVxuICAgICAgICByZXR1cm4gdG9rZW5zW2luZGV4XSB8fCBudWxsXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VG9rZW5zKCkge1xuICAgICAgICB2YXIgY2xhc3NOYW1lID0gZWxlbS5jbGFzc05hbWVcblxuICAgICAgICByZXR1cm4gZmlsdGVyKGNsYXNzTmFtZS5zcGxpdChcIiBcIiksIGlzVHJ1dGh5KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFRva2VucyhsaXN0KSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aFxuXG4gICAgICAgIGVsZW0uY2xhc3NOYW1lID0gbGlzdC5qb2luKFwiIFwiKVxuICAgICAgICBjbGFzc0xpc3QubGVuZ3RoID0gbGVuZ3RoXG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjbGFzc0xpc3RbaV0gPSBsaXN0W2ldXG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgbGlzdFtsZW5ndGhdXG4gICAgfVxufVxuXG5mdW5jdGlvbiBmaWx0ZXIgKGFyciwgZm4pIHtcbiAgICB2YXIgcmV0ID0gW11cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZm4oYXJyW2ldKSkgcmV0LnB1c2goYXJyW2ldKVxuICAgIH1cbiAgICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGlzVHJ1dGh5KHZhbHVlKSB7XG4gICAgcmV0dXJuICEhdmFsdWVcbn1cbiIsIi8qXG4gKiBjbGFzc0xpc3QuanM6IENyb3NzLWJyb3dzZXIgZnVsbCBlbGVtZW50LmNsYXNzTGlzdCBpbXBsZW1lbnRhdGlvbi5cbiAqIDEuMS4yMDE1MDMxMlxuICpcbiAqIEJ5IEVsaSBHcmV5LCBodHRwOi8vZWxpZ3JleS5jb21cbiAqIExpY2Vuc2U6IERlZGljYXRlZCB0byB0aGUgcHVibGljIGRvbWFpbi5cbiAqICAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lbGlncmV5L2NsYXNzTGlzdC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFLm1kXG4gKi9cblxuLypnbG9iYWwgc2VsZiwgZG9jdW1lbnQsIERPTUV4Y2VwdGlvbiAqL1xuXG4vKiEgQHNvdXJjZSBodHRwOi8vcHVybC5lbGlncmV5LmNvbS9naXRodWIvY2xhc3NMaXN0LmpzL2Jsb2IvbWFzdGVyL2NsYXNzTGlzdC5qcyAqL1xuXG5pZiAoXCJkb2N1bWVudFwiIGluIHNlbGYpIHtcblxuLy8gRnVsbCBwb2x5ZmlsbCBmb3IgYnJvd3NlcnMgd2l0aCBubyBjbGFzc0xpc3Qgc3VwcG9ydFxuLy8gSW5jbHVkaW5nIElFIDwgRWRnZSBtaXNzaW5nIFNWR0VsZW1lbnQuY2xhc3NMaXN0XG5pZiAoIShcImNsYXNzTGlzdFwiIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJfXCIpKSBcblx0fHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TICYmICEoXCJjbGFzc0xpc3RcIiBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFwiZ1wiKSkpIHtcblxuKGZ1bmN0aW9uICh2aWV3KSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5pZiAoISgnRWxlbWVudCcgaW4gdmlldykpIHJldHVybjtcblxudmFyXG5cdCAgY2xhc3NMaXN0UHJvcCA9IFwiY2xhc3NMaXN0XCJcblx0LCBwcm90b1Byb3AgPSBcInByb3RvdHlwZVwiXG5cdCwgZWxlbUN0clByb3RvID0gdmlldy5FbGVtZW50W3Byb3RvUHJvcF1cblx0LCBvYmpDdHIgPSBPYmplY3Rcblx0LCBzdHJUcmltID0gU3RyaW5nW3Byb3RvUHJvcF0udHJpbSB8fCBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgXCJcIik7XG5cdH1cblx0LCBhcnJJbmRleE9mID0gQXJyYXlbcHJvdG9Qcm9wXS5pbmRleE9mIHx8IGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0dmFyXG5cdFx0XHQgIGkgPSAwXG5cdFx0XHQsIGxlbiA9IHRoaXMubGVuZ3RoXG5cdFx0O1xuXHRcdGZvciAoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChpIGluIHRoaXMgJiYgdGhpc1tpXSA9PT0gaXRlbSkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9XG5cdC8vIFZlbmRvcnM6IHBsZWFzZSBhbGxvdyBjb250ZW50IGNvZGUgdG8gaW5zdGFudGlhdGUgRE9NRXhjZXB0aW9uc1xuXHQsIERPTUV4ID0gZnVuY3Rpb24gKHR5cGUsIG1lc3NhZ2UpIHtcblx0XHR0aGlzLm5hbWUgPSB0eXBlO1xuXHRcdHRoaXMuY29kZSA9IERPTUV4Y2VwdGlvblt0eXBlXTtcblx0XHR0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXHR9XG5cdCwgY2hlY2tUb2tlbkFuZEdldEluZGV4ID0gZnVuY3Rpb24gKGNsYXNzTGlzdCwgdG9rZW4pIHtcblx0XHRpZiAodG9rZW4gPT09IFwiXCIpIHtcblx0XHRcdHRocm93IG5ldyBET01FeChcblx0XHRcdFx0ICBcIlNZTlRBWF9FUlJcIlxuXHRcdFx0XHQsIFwiQW4gaW52YWxpZCBvciBpbGxlZ2FsIHN0cmluZyB3YXMgc3BlY2lmaWVkXCJcblx0XHRcdCk7XG5cdFx0fVxuXHRcdGlmICgvXFxzLy50ZXN0KHRva2VuKSkge1xuXHRcdFx0dGhyb3cgbmV3IERPTUV4KFxuXHRcdFx0XHQgIFwiSU5WQUxJRF9DSEFSQUNURVJfRVJSXCJcblx0XHRcdFx0LCBcIlN0cmluZyBjb250YWlucyBhbiBpbnZhbGlkIGNoYXJhY3RlclwiXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRyZXR1cm4gYXJySW5kZXhPZi5jYWxsKGNsYXNzTGlzdCwgdG9rZW4pO1xuXHR9XG5cdCwgQ2xhc3NMaXN0ID0gZnVuY3Rpb24gKGVsZW0pIHtcblx0XHR2YXJcblx0XHRcdCAgdHJpbW1lZENsYXNzZXMgPSBzdHJUcmltLmNhbGwoZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKVxuXHRcdFx0LCBjbGFzc2VzID0gdHJpbW1lZENsYXNzZXMgPyB0cmltbWVkQ2xhc3Nlcy5zcGxpdCgvXFxzKy8pIDogW11cblx0XHRcdCwgaSA9IDBcblx0XHRcdCwgbGVuID0gY2xhc3Nlcy5sZW5ndGhcblx0XHQ7XG5cdFx0Zm9yICg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0dGhpcy5wdXNoKGNsYXNzZXNbaV0pO1xuXHRcdH1cblx0XHR0aGlzLl91cGRhdGVDbGFzc05hbWUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMudG9TdHJpbmcoKSk7XG5cdFx0fTtcblx0fVxuXHQsIGNsYXNzTGlzdFByb3RvID0gQ2xhc3NMaXN0W3Byb3RvUHJvcF0gPSBbXVxuXHQsIGNsYXNzTGlzdEdldHRlciA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gbmV3IENsYXNzTGlzdCh0aGlzKTtcblx0fVxuO1xuLy8gTW9zdCBET01FeGNlcHRpb24gaW1wbGVtZW50YXRpb25zIGRvbid0IGFsbG93IGNhbGxpbmcgRE9NRXhjZXB0aW9uJ3MgdG9TdHJpbmcoKVxuLy8gb24gbm9uLURPTUV4Y2VwdGlvbnMuIEVycm9yJ3MgdG9TdHJpbmcoKSBpcyBzdWZmaWNpZW50IGhlcmUuXG5ET01FeFtwcm90b1Byb3BdID0gRXJyb3JbcHJvdG9Qcm9wXTtcbmNsYXNzTGlzdFByb3RvLml0ZW0gPSBmdW5jdGlvbiAoaSkge1xuXHRyZXR1cm4gdGhpc1tpXSB8fCBudWxsO1xufTtcbmNsYXNzTGlzdFByb3RvLmNvbnRhaW5zID0gZnVuY3Rpb24gKHRva2VuKSB7XG5cdHRva2VuICs9IFwiXCI7XG5cdHJldHVybiBjaGVja1Rva2VuQW5kR2V0SW5kZXgodGhpcywgdG9rZW4pICE9PSAtMTtcbn07XG5jbGFzc0xpc3RQcm90by5hZGQgPSBmdW5jdGlvbiAoKSB7XG5cdHZhclxuXHRcdCAgdG9rZW5zID0gYXJndW1lbnRzXG5cdFx0LCBpID0gMFxuXHRcdCwgbCA9IHRva2Vucy5sZW5ndGhcblx0XHQsIHRva2VuXG5cdFx0LCB1cGRhdGVkID0gZmFsc2Vcblx0O1xuXHRkbyB7XG5cdFx0dG9rZW4gPSB0b2tlbnNbaV0gKyBcIlwiO1xuXHRcdGlmIChjaGVja1Rva2VuQW5kR2V0SW5kZXgodGhpcywgdG9rZW4pID09PSAtMSkge1xuXHRcdFx0dGhpcy5wdXNoKHRva2VuKTtcblx0XHRcdHVwZGF0ZWQgPSB0cnVlO1xuXHRcdH1cblx0fVxuXHR3aGlsZSAoKytpIDwgbCk7XG5cblx0aWYgKHVwZGF0ZWQpIHtcblx0XHR0aGlzLl91cGRhdGVDbGFzc05hbWUoKTtcblx0fVxufTtcbmNsYXNzTGlzdFByb3RvLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0dmFyXG5cdFx0ICB0b2tlbnMgPSBhcmd1bWVudHNcblx0XHQsIGkgPSAwXG5cdFx0LCBsID0gdG9rZW5zLmxlbmd0aFxuXHRcdCwgdG9rZW5cblx0XHQsIHVwZGF0ZWQgPSBmYWxzZVxuXHRcdCwgaW5kZXhcblx0O1xuXHRkbyB7XG5cdFx0dG9rZW4gPSB0b2tlbnNbaV0gKyBcIlwiO1xuXHRcdGluZGV4ID0gY2hlY2tUb2tlbkFuZEdldEluZGV4KHRoaXMsIHRva2VuKTtcblx0XHR3aGlsZSAoaW5kZXggIT09IC0xKSB7XG5cdFx0XHR0aGlzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHR1cGRhdGVkID0gdHJ1ZTtcblx0XHRcdGluZGV4ID0gY2hlY2tUb2tlbkFuZEdldEluZGV4KHRoaXMsIHRva2VuKTtcblx0XHR9XG5cdH1cblx0d2hpbGUgKCsraSA8IGwpO1xuXG5cdGlmICh1cGRhdGVkKSB7XG5cdFx0dGhpcy5fdXBkYXRlQ2xhc3NOYW1lKCk7XG5cdH1cbn07XG5jbGFzc0xpc3RQcm90by50b2dnbGUgPSBmdW5jdGlvbiAodG9rZW4sIGZvcmNlKSB7XG5cdHRva2VuICs9IFwiXCI7XG5cblx0dmFyXG5cdFx0ICByZXN1bHQgPSB0aGlzLmNvbnRhaW5zKHRva2VuKVxuXHRcdCwgbWV0aG9kID0gcmVzdWx0ID9cblx0XHRcdGZvcmNlICE9PSB0cnVlICYmIFwicmVtb3ZlXCJcblx0XHQ6XG5cdFx0XHRmb3JjZSAhPT0gZmFsc2UgJiYgXCJhZGRcIlxuXHQ7XG5cblx0aWYgKG1ldGhvZCkge1xuXHRcdHRoaXNbbWV0aG9kXSh0b2tlbik7XG5cdH1cblxuXHRpZiAoZm9yY2UgPT09IHRydWUgfHwgZm9yY2UgPT09IGZhbHNlKSB7XG5cdFx0cmV0dXJuIGZvcmNlO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiAhcmVzdWx0O1xuXHR9XG59O1xuY2xhc3NMaXN0UHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiB0aGlzLmpvaW4oXCIgXCIpO1xufTtcblxuaWYgKG9iakN0ci5kZWZpbmVQcm9wZXJ0eSkge1xuXHR2YXIgY2xhc3NMaXN0UHJvcERlc2MgPSB7XG5cdFx0ICBnZXQ6IGNsYXNzTGlzdEdldHRlclxuXHRcdCwgZW51bWVyYWJsZTogdHJ1ZVxuXHRcdCwgY29uZmlndXJhYmxlOiB0cnVlXG5cdH07XG5cdHRyeSB7XG5cdFx0b2JqQ3RyLmRlZmluZVByb3BlcnR5KGVsZW1DdHJQcm90bywgY2xhc3NMaXN0UHJvcCwgY2xhc3NMaXN0UHJvcERlc2MpO1xuXHR9IGNhdGNoIChleCkgeyAvLyBJRSA4IGRvZXNuJ3Qgc3VwcG9ydCBlbnVtZXJhYmxlOnRydWVcblx0XHRpZiAoZXgubnVtYmVyID09PSAtMHg3RkY1RUM1NCkge1xuXHRcdFx0Y2xhc3NMaXN0UHJvcERlc2MuZW51bWVyYWJsZSA9IGZhbHNlO1xuXHRcdFx0b2JqQ3RyLmRlZmluZVByb3BlcnR5KGVsZW1DdHJQcm90bywgY2xhc3NMaXN0UHJvcCwgY2xhc3NMaXN0UHJvcERlc2MpO1xuXHRcdH1cblx0fVxufSBlbHNlIGlmIChvYmpDdHJbcHJvdG9Qcm9wXS5fX2RlZmluZUdldHRlcl9fKSB7XG5cdGVsZW1DdHJQcm90by5fX2RlZmluZUdldHRlcl9fKGNsYXNzTGlzdFByb3AsIGNsYXNzTGlzdEdldHRlcik7XG59XG5cbn0oc2VsZikpO1xuXG59IGVsc2Uge1xuLy8gVGhlcmUgaXMgZnVsbCBvciBwYXJ0aWFsIG5hdGl2ZSBjbGFzc0xpc3Qgc3VwcG9ydCwgc28ganVzdCBjaGVjayBpZiB3ZSBuZWVkXG4vLyB0byBub3JtYWxpemUgdGhlIGFkZC9yZW1vdmUgYW5kIHRvZ2dsZSBBUElzLlxuXG4oZnVuY3Rpb24gKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiX1wiKTtcblxuXHR0ZXN0RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiYzFcIiwgXCJjMlwiKTtcblxuXHQvLyBQb2x5ZmlsbCBmb3IgSUUgMTAvMTEgYW5kIEZpcmVmb3ggPDI2LCB3aGVyZSBjbGFzc0xpc3QuYWRkIGFuZFxuXHQvLyBjbGFzc0xpc3QucmVtb3ZlIGV4aXN0IGJ1dCBzdXBwb3J0IG9ubHkgb25lIGFyZ3VtZW50IGF0IGEgdGltZS5cblx0aWYgKCF0ZXN0RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJjMlwiKSkge1xuXHRcdHZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbihtZXRob2QpIHtcblx0XHRcdHZhciBvcmlnaW5hbCA9IERPTVRva2VuTGlzdC5wcm90b3R5cGVbbWV0aG9kXTtcblxuXHRcdFx0RE9NVG9rZW5MaXN0LnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odG9rZW4pIHtcblx0XHRcdFx0dmFyIGksIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdFx0dG9rZW4gPSBhcmd1bWVudHNbaV07XG5cdFx0XHRcdFx0b3JpZ2luYWwuY2FsbCh0aGlzLCB0b2tlbik7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fTtcblx0XHRjcmVhdGVNZXRob2QoJ2FkZCcpO1xuXHRcdGNyZWF0ZU1ldGhvZCgncmVtb3ZlJyk7XG5cdH1cblxuXHR0ZXN0RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwiYzNcIiwgZmFsc2UpO1xuXG5cdC8vIFBvbHlmaWxsIGZvciBJRSAxMCBhbmQgRmlyZWZveCA8MjQsIHdoZXJlIGNsYXNzTGlzdC50b2dnbGUgZG9lcyBub3Rcblx0Ly8gc3VwcG9ydCB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuXHRpZiAodGVzdEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYzNcIikpIHtcblx0XHR2YXIgX3RvZ2dsZSA9IERPTVRva2VuTGlzdC5wcm90b3R5cGUudG9nZ2xlO1xuXG5cdFx0RE9NVG9rZW5MaXN0LnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbih0b2tlbiwgZm9yY2UpIHtcblx0XHRcdGlmICgxIGluIGFyZ3VtZW50cyAmJiAhdGhpcy5jb250YWlucyh0b2tlbikgPT09ICFmb3JjZSkge1xuXHRcdFx0XHRyZXR1cm4gZm9yY2U7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gX3RvZ2dsZS5jYWxsKHRoaXMsIHRva2VuKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdH1cblxuXHR0ZXN0RWxlbWVudCA9IG51bGw7XG59KCkpO1xuXG59XG5cbn1cblxuIiwiXHJcbi8qKlxyXG4gKiBFeHBvc2UgYEVtaXR0ZXJgLlxyXG4gKi9cclxuXHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG4gIG1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemUgYSBuZXcgYEVtaXR0ZXJgLlxyXG4gKlxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEVtaXR0ZXIob2JqKSB7XHJcbiAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XHJcbn07XHJcblxyXG4vKipcclxuICogTWl4aW4gdGhlIGVtaXR0ZXIgcHJvcGVydGllcy5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9ialxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1peGluKG9iaikge1xyXG4gIGZvciAodmFyIGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSkge1xyXG4gICAgb2JqW2tleV0gPSBFbWl0dGVyLnByb3RvdHlwZVtrZXldO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG4vKipcclxuICogTGlzdGVuIG9uIHRoZSBnaXZlbiBgZXZlbnRgIHdpdGggYGZuYC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub24gPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgKHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdKVxyXG4gICAgLnB1c2goZm4pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgYW4gYGV2ZW50YCBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBhIHNpbmdsZVxyXG4gKiB0aW1lIHRoZW4gYXV0b21hdGljYWxseSByZW1vdmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICBmdW5jdGlvbiBvbigpIHtcclxuICAgIHRoaXMub2ZmKGV2ZW50LCBvbik7XHJcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgb24uZm4gPSBmbjtcclxuICB0aGlzLm9uKGV2ZW50LCBvbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgYGV2ZW50YCBvciBhbGxcclxuICogcmVnaXN0ZXJlZCBjYWxsYmFja3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9mZiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG5cclxuICAvLyBhbGxcclxuICBpZiAoMCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gc3BlY2lmaWMgZXZlbnRcclxuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICBpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7XHJcblxyXG4gIC8vIHJlbW92ZSBhbGwgaGFuZGxlcnNcclxuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXJcclxuICB2YXIgY2I7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcclxuICAgIGNiID0gY2FsbGJhY2tzW2ldO1xyXG4gICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcclxuICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVtaXQgYGV2ZW50YCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtNaXhlZH0gLi4uXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcclxuICAgICwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuXHJcbiAgaWYgKGNhbGxiYWNrcykge1xyXG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICByZXR1cm4gISEgdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aDtcclxufTtcclxuIiwidmFyIERPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5FRF9CWSA9IDE2XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGFpbnNcblxuZnVuY3Rpb24gY29udGFpbnMoY29udGFpbmVyLCBlbGVtKSB7XG4gICAgaWYgKGNvbnRhaW5lci5jb250YWlucykge1xuICAgICAgICByZXR1cm4gY29udGFpbmVyLmNvbnRhaW5zKGVsZW0pXG4gICAgfVxuXG4gICAgdmFyIGNvbXBhcmlzb24gPSBjb250YWluZXIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZWxlbSlcblxuICAgIHJldHVybiBjb21wYXJpc29uID09PSAwIHx8IGNvbXBhcmlzb24gJiBET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQllcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuXG5mdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICBpZiAoQXJyYXkuaXNBcnJheSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXI7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cbiIsIi8vICAgICBjcmVhdGUtZXJyb3IuanMgMC4zLjFcbi8vICAgICAoYykgMjAxMyBUaW0gR3JpZXNzZXJcbi8vICAgICBUaGlzIHNvdXJjZSBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbihmdW5jdGlvbihmYWN0b3J5KSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBBIHNpbXBsZSB1dGlsaXR5IGZvciBzdWJjbGFzc2luZyB0aGUgXCJFcnJvclwiXG4vLyBvYmplY3QgaW4gbXVsdGlwbGUgZW52aXJvbm1lbnRzLCB3aGlsZSBtYWludGFpbmluZ1xuLy8gcmVsZXZhbnQgc3RhY2sgdHJhY2VzLCBtZXNzYWdlcywgYW5kIHByb3RvdHlwZXMuXG5mYWN0b3J5KGZ1bmN0aW9uKCkge1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vLyBDcmVhdGVzIGFuIG5ldyBlcnJvciB0eXBlIHdpdGggYSBcIm5hbWVcIixcbi8vIGFuZCBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRoYXQgc2hvdWxkIGJlIHNldFxuLy8gb24gdGhlIGVycm9yIGluc3RhbmNlLlxucmV0dXJuIGZ1bmN0aW9uKCkge1xuICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgfVxuICB2YXIgbmFtZSAgICAgICA9IGdldE5hbWUoYXJncyk7XG4gIHZhciB0YXJnZXQgICAgID0gZ2V0VGFyZ2V0KGFyZ3MpO1xuICB2YXIgcHJvcGVydGllcyA9IGdldFByb3BzKGFyZ3MpO1xuICBmdW5jdGlvbiBFcnJvckN0b3IobWVzc2FnZSwgb2JqKSB7XG4gICAgYXR0YWNoUHJvcHModGhpcywgcHJvcGVydGllcyk7XG4gICAgYXR0YWNoUHJvcHModGhpcywgb2JqKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSAobWVzc2FnZSB8fCB0aGlzLm1lc3NhZ2UpO1xuICAgIGlmIChtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2UubWVzc2FnZTtcbiAgICAgIHRoaXMuc3RhY2sgPSBtZXNzYWdlLnN0YWNrO1xuICAgIH0gZWxzZSBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBFcnIoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBFcnJvckN0b3I7IH1cbiAgRXJyLnByb3RvdHlwZSA9IHRhcmdldFsncHJvdG90eXBlJ107XG4gIEVycm9yQ3Rvci5wcm90b3R5cGUgPSBuZXcgRXJyKCk7XG4gIEVycm9yQ3Rvci5wcm90b3R5cGUubmFtZSA9ICgnJyArIG5hbWUpIHx8ICdDdXN0b21FcnJvcic7XG4gIHJldHVybiBFcnJvckN0b3I7XG59O1xuXG4vLyBKdXN0IGEgZmV3IGhlbHBlcnMgdG8gY2xlYW4gdXAgdGhlIGZ1bmN0aW9uIGFib3ZlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcGV0a2FhbnRvbm92L2JsdWViaXJkL3dpa2kvT3B0aW1pemF0aW9uLWtpbGxlcnNcbmZ1bmN0aW9uIGdldE5hbWUoYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgcmV0dXJuIGlzRXJyb3IoYXJnc1swXSkgPyAoYXJnc1sxXSB8fCAnJykgOiBhcmdzWzBdO1xufVxuZnVuY3Rpb24gZ2V0VGFyZ2V0KGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSByZXR1cm4gRXJyb3I7XG4gIHJldHVybiBpc0Vycm9yKGFyZ3NbMF0pID8gYXJnc1swXSA6IEVycm9yO1xufVxuZnVuY3Rpb24gZ2V0UHJvcHMoYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuICByZXR1cm4gaXNFcnJvcihhcmdzWzBdKSA/IGFyZ3NbMl0gOiBhcmdzWzFdO1xufVxuZnVuY3Rpb24gaW5oZXJpdGVkS2V5cyhvYmopIHtcbiAgdmFyIHJldCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgcmV0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBSaWdodCBub3cgd2UncmUganVzdCBhc3N1bWluZyB0aGF0IGEgZnVuY3Rpb24gaW4gdGhlIGZpcnN0IGFyZ3VtZW50IGlzIGFuIGVycm9yLlxuZnVuY3Rpb24gaXNFcnJvcihvYmopIHtcbiAgcmV0dXJuICh0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIpO1xufVxuXG4vLyBXZSBkb24ndCBuZWVkIHRoZSBmdWxsIHVuZGVyc2NvcmUgY2hlY2sgaGVyZSwgc2luY2UgaXQgc2hvdWxkIGVpdGhlciBiZVxuLy8gYW4gb2JqZWN0LWxpdGVyYWwsIG9yIG5vdGhpbmcgYXQgYWxsLlxuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gIHJldHVybiAob2JqICYmIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgJiYgdG9TdHJpbmcuY2FsbChvYmopID09PSBcIltvYmplY3QgT2JqZWN0XVwiKTtcbn1cblxuLy8gVXNlZCB0byBhdHRhY2ggYXR0cmlidXRlcyB0byB0aGUgZXJyb3Igb2JqZWN0IGluIHRoZSBjb25zdHJ1Y3Rvci5cbmZ1bmN0aW9uIGF0dGFjaFByb3BzKGNvbnRleHQsIHRhcmdldCkge1xuICBpZiAoaXNPYmplY3QodGFyZ2V0KSkge1xuICAgIHZhciBrZXlzID0gaW5oZXJpdGVkS2V5cyh0YXJnZXQpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgIGNvbnRleHRba2V5c1tpXV0gPSBjbG9uZSh0YXJnZXRba2V5c1tpXV0pO1xuICAgIH1cbiAgfVxufVxuXG4vLyBEb24ndCBuZWVkIHRoZSBmdWxsLW91dCBcImNsb25lXCIgbWVjaGFuaXNtIGhlcmUsIHNpbmNlIGlmIHlvdSdyZVxuLy8gdHJ5aW5nIHRvIHNldCB0aGluZ3Mgb3RoZXIgdGhhbiBlbXB0eSBhcnJheXMvb2JqZWN0cyBvbiB5b3VyXG4vLyBzdWItY2xhc3NlZCBgRXJyb3JgIG9iamVjdCwgeW91J3JlIHByb2JhYmx5IGRvaW5nIGl0IHdyb25nLlxuZnVuY3Rpb24gY2xvbmUodGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQgPT0gbnVsbCB8fCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiKSByZXR1cm4gdGFyZ2V0O1xuICB2YXIgY2xvbmVkID0gdGFyZ2V0LmNvbnN0cnVjdG9yID8gdGFyZ2V0LmNvbnN0cnVjdG9yKCkgOiBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBmb3IgKHZhciBhdHRyIGluIHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQuaGFzT3duUHJvcGVydHkoYXR0cikpIHtcbiAgICAgIGNsb25lZFthdHRyXSA9IHRhcmdldFthdHRyXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNsb25lZDtcbn1cblxufSk7XG5cbi8vIEJvaWxlcnBsYXRlIFVNRCBkZWZpbml0aW9uIGJsb2NrLi4uXG59KShmdW5jdGlvbihjcmVhdGVFcnJvckxpYikge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoY3JlYXRlRXJyb3JMaWIpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRXJyb3JMaWIoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcm9vdCA9IHRoaXM7XG4gICAgdmFyIGxhc3RjcmVhdGVFcnJvciA9IHJvb3QuY3JlYXRlRXJyb3I7XG4gICAgdmFyIGNyZWF0ZUVycm9yID0gcm9vdC5jcmVhdGVFcnJvciA9IGNyZWF0ZUVycm9yTGliKCk7XG4gICAgY3JlYXRlRXJyb3Iubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcm9vdC5jcmVhdGVFcnJvciA9IGxhc3RjcmVhdGVFcnJvcjtcbiAgICAgIHJldHVybiBjcmVhdGVFcnJvcjtcbiAgICB9O1xuICB9XG59KTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcblx0KGdsb2JhbC5kZWVwbWVyZ2UgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbnZhciBpc01lcmdlYWJsZU9iamVjdCA9IGZ1bmN0aW9uIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiBpc05vbk51bGxPYmplY3QodmFsdWUpXG5cdFx0JiYgIWlzU3BlY2lhbCh2YWx1ZSlcbn07XG5cbmZ1bmN0aW9uIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSkge1xuXHRyZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXG59XG5cbmZ1bmN0aW9uIGlzU3BlY2lhbCh2YWx1ZSkge1xuXHR2YXIgc3RyaW5nVmFsdWUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXG5cdHJldHVybiBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcblx0XHR8fCBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgRGF0ZV0nXG5cdFx0fHwgaXNSZWFjdEVsZW1lbnQodmFsdWUpXG59XG5cbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9iNWFjOTYzZmI3OTFkMTI5OGU3ZjM5NjIzNjM4M2JjOTU1ZjkxNmMxL3NyYy9pc29tb3JwaGljL2NsYXNzaWMvZWxlbWVudC9SZWFjdEVsZW1lbnQuanMjTDIxLUwyNVxudmFyIGNhblVzZVN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBjYW5Vc2VTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgOiAweGVhYzc7XG5cbmZ1bmN0aW9uIGlzUmVhY3RFbGVtZW50KHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFXG59XG5cbmZ1bmN0aW9uIGVtcHR5VGFyZ2V0KHZhbCkge1xuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fVxufVxuXG5mdW5jdGlvbiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh2YWx1ZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG5cdHZhciBjbG9uZSA9ICFvcHRpb25zQXJndW1lbnQgfHwgb3B0aW9uc0FyZ3VtZW50LmNsb25lICE9PSBmYWxzZTtcblxuXHRyZXR1cm4gKGNsb25lICYmIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSlcblx0XHQ/IGRlZXBtZXJnZShlbXB0eVRhcmdldCh2YWx1ZSksIHZhbHVlLCBvcHRpb25zQXJndW1lbnQpXG5cdFx0OiB2YWx1ZVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0QXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG5cdHJldHVybiB0YXJnZXQuY29uY2F0KHNvdXJjZSkubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoZWxlbWVudCwgb3B0aW9uc0FyZ3VtZW50KVxuXHR9KVxufVxuXG5mdW5jdGlvbiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG5cdHZhciBkZXN0aW5hdGlvbiA9IHt9O1xuXHRpZiAoaXNNZXJnZWFibGVPYmplY3QodGFyZ2V0KSkge1xuXHRcdE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh0YXJnZXRba2V5XSwgb3B0aW9uc0FyZ3VtZW50KTtcblx0XHR9KTtcblx0fVxuXHRPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0aWYgKCFpc01lcmdlYWJsZU9iamVjdChzb3VyY2Vba2V5XSkgfHwgIXRhcmdldFtrZXldKSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlW2tleV0sIG9wdGlvbnNBcmd1bWVudCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zQXJndW1lbnQpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudCkge1xuXHR2YXIgc291cmNlSXNBcnJheSA9IEFycmF5LmlzQXJyYXkoc291cmNlKTtcblx0dmFyIHRhcmdldElzQXJyYXkgPSBBcnJheS5pc0FycmF5KHRhcmdldCk7XG5cdHZhciBvcHRpb25zID0gb3B0aW9uc0FyZ3VtZW50IHx8IHsgYXJyYXlNZXJnZTogZGVmYXVsdEFycmF5TWVyZ2UgfTtcblx0dmFyIHNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2ggPSBzb3VyY2VJc0FycmF5ID09PSB0YXJnZXRJc0FycmF5O1xuXG5cdGlmICghc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCkge1xuXHRcdHJldHVybiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2UsIG9wdGlvbnNBcmd1bWVudClcblx0fSBlbHNlIGlmIChzb3VyY2VJc0FycmF5KSB7XG5cdFx0dmFyIGFycmF5TWVyZ2UgPSBvcHRpb25zLmFycmF5TWVyZ2UgfHwgZGVmYXVsdEFycmF5TWVyZ2U7XG5cdFx0cmV0dXJuIGFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudClcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudClcblx0fVxufVxuXG5kZWVwbWVyZ2UuYWxsID0gZnVuY3Rpb24gZGVlcG1lcmdlQWxsKGFycmF5LCBvcHRpb25zQXJndW1lbnQpIHtcblx0aWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIGFuIGFycmF5Jylcblx0fVxuXG5cdHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuXHRcdHJldHVybiBkZWVwbWVyZ2UocHJldiwgbmV4dCwgb3B0aW9uc0FyZ3VtZW50KVxuXHR9LCB7fSlcbn07XG5cbnZhciBkZWVwbWVyZ2VfMSA9IGRlZXBtZXJnZTtcblxucmV0dXJuIGRlZXBtZXJnZV8xO1xuXG59KSkpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gYXJndW1lbnRzW2ldO1xuICAgIH1cbn07XG4iLCJ2YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJ2dsb2JhbCcpXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJylcblxudmFyIG1ha2VEZXNwb3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBEZXNwb3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGdsb2JhbC5fc2luZ2xldG9uRGVzcG90SW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBnbG9iYWwuX3NpbmdsZXRvbkRlc3BvdEluc3RhbmNlXG4gICAgfSBlbHNlIHtcbiAgICAgIGdsb2JhbC5fc2luZ2xldG9uRGVzcG90SW5zdGFuY2UgPSB0aGlzXG4gICAgICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKVxuICAgIH1cbiAgfVxuXG4gIHV0aWwuaW5oZXJpdHMoRGVzcG90LCBFdmVudEVtaXR0ZXIpXG5cbiAgcmV0dXJuIG5ldyBEZXNwb3QoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1ha2VEZXNwb3QoKVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJ2dsb2JhbC9kb2N1bWVudCcpXG52YXIgRXZlbnQgPSByZXF1aXJlKCdnZXZhbCcpXG52YXIgS2V5cyA9IHJlcXVpcmUoJy4va2V5cycpXG5cbm1vZHVsZS5leHBvcnRzID0gVmlzaWJpbGl0eVxuXG5mdW5jdGlvbiBWaXNpYmlsaXR5ICgpIHtcbiAgdmFyIGtleXMgPSBLZXlzKGRvY3VtZW50KVxuICBpZiAoIWtleXMpIHJldHVybiBub29wU2hpbSgpXG5cbiAgcmV0dXJuIHtcbiAgICB2aXNpYmxlOiB2aXNpYmxlLFxuICAgIG9uQ2hhbmdlOiBFdmVudChsaXN0ZW4pXG4gIH1cblxuICBmdW5jdGlvbiB2aXNpYmxlICgpIHtcbiAgICByZXR1cm4gIWRvY3VtZW50W2tleXMuaGlkZGVuXVxuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuIChicm9hZGNhc3QpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGtleXMuZXZlbnQsIGZ1bmN0aW9uIG9uVmlzaWJpbGl0eUNoYW5nZSAoKSB7XG4gICAgICBicm9hZGNhc3QodmlzaWJsZSgpKVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gbm9vcFNoaW0gKCkge1xuICByZXR1cm4ge1xuICAgIHZpc2libGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcbiAgICBvbkNoYW5nZTogbm9vcFxuICB9XG59XG5cbmZ1bmN0aW9uIG5vb3AgKCkge31cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNcblxuZnVuY3Rpb24ga2V5cyAoZG9jdW1lbnQpIHtcbiAgdmFyIHByZWZpeCA9IGRldGVjdFByZWZpeChkb2N1bWVudClcbiAgaWYgKHByZWZpeCA9PSBudWxsKSByZXR1cm5cbiAgcmV0dXJuIHtcbiAgICBoaWRkZW46IGxvd2VyY2FzZUZpcnN0KHByZWZpeCArICdIaWRkZW4nKSxcbiAgICBldmVudDogcHJlZml4ICsgJ3Zpc2liaWxpdHljaGFuZ2UnXG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0ZWN0UHJlZml4IChkb2N1bWVudCkge1xuICBpZiAoZG9jdW1lbnQuaGlkZGVuICE9IG51bGwpIHJldHVybiAnJ1xuICBpZiAoZG9jdW1lbnQubW96SGlkZGVuICE9IG51bGwpIHJldHVybiAnbW96J1xuICBpZiAoZG9jdW1lbnQubXNIaWRkZW4gIT0gbnVsbCkgcmV0dXJuICdtcydcbiAgaWYgKGRvY3VtZW50LndlYmtpdEhpZGRlbiAhPSBudWxsKSByZXR1cm4gJ3dlYmtpdCdcbn1cblxuZnVuY3Rpb24gbG93ZXJjYXNlRmlyc3QgKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnN1YnN0cmluZygwLCAxKS50b0xvd2VyQ2FzZSgpICsgc3RyaW5nLnN1YnN0cmluZygxKVxufVxuIiwidmFyIHN0cmVhbSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpXG52YXIgZW9zID0gcmVxdWlyZSgnZW5kLW9mLXN0cmVhbScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgc2hpZnQgPSByZXF1aXJlKCdzdHJlYW0tc2hpZnQnKVxuXG52YXIgU0lHTkFMX0ZMVVNIID0gbmV3IEJ1ZmZlcihbMF0pXG5cbnZhciBvbnVuY29yayA9IGZ1bmN0aW9uKHNlbGYsIGZuKSB7XG4gIGlmIChzZWxmLl9jb3JrZWQpIHNlbGYub25jZSgndW5jb3JrJywgZm4pXG4gIGVsc2UgZm4oKVxufVxuXG52YXIgZGVzdHJveWVyID0gZnVuY3Rpb24oc2VsZiwgZW5kKSB7XG4gIHJldHVybiBmdW5jdGlvbihlcnIpIHtcbiAgICBpZiAoZXJyKSBzZWxmLmRlc3Ryb3koZXJyLm1lc3NhZ2UgPT09ICdwcmVtYXR1cmUgY2xvc2UnID8gbnVsbCA6IGVycilcbiAgICBlbHNlIGlmIChlbmQgJiYgIXNlbGYuX2VuZGVkKSBzZWxmLmVuZCgpXG4gIH1cbn1cblxudmFyIGVuZCA9IGZ1bmN0aW9uKHdzLCBmbikge1xuICBpZiAoIXdzKSByZXR1cm4gZm4oKVxuICBpZiAod3MuX3dyaXRhYmxlU3RhdGUgJiYgd3MuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQpIHJldHVybiBmbigpXG4gIGlmICh3cy5fd3JpdGFibGVTdGF0ZSkgcmV0dXJuIHdzLmVuZChmbilcbiAgd3MuZW5kKClcbiAgZm4oKVxufVxuXG52YXIgdG9TdHJlYW1zMiA9IGZ1bmN0aW9uKHJzKSB7XG4gIHJldHVybiBuZXcgKHN0cmVhbS5SZWFkYWJsZSkoe29iamVjdE1vZGU6dHJ1ZSwgaGlnaFdhdGVyTWFyazoxNn0pLndyYXAocnMpXG59XG5cbnZhciBEdXBsZXhpZnkgPSBmdW5jdGlvbih3cml0YWJsZSwgcmVhZGFibGUsIG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleGlmeSkpIHJldHVybiBuZXcgRHVwbGV4aWZ5KHdyaXRhYmxlLCByZWFkYWJsZSwgb3B0cylcbiAgc3RyZWFtLkR1cGxleC5jYWxsKHRoaXMsIG9wdHMpXG5cbiAgdGhpcy5fd3JpdGFibGUgPSBudWxsXG4gIHRoaXMuX3JlYWRhYmxlID0gbnVsbFxuICB0aGlzLl9yZWFkYWJsZTIgPSBudWxsXG5cbiAgdGhpcy5fZm9yd2FyZERlc3Ryb3kgPSAhb3B0cyB8fCBvcHRzLmRlc3Ryb3kgIT09IGZhbHNlXG4gIHRoaXMuX2ZvcndhcmRFbmQgPSAhb3B0cyB8fCBvcHRzLmVuZCAhPT0gZmFsc2VcbiAgdGhpcy5fY29ya2VkID0gMSAvLyBzdGFydCBjb3JrZWRcbiAgdGhpcy5fb25kcmFpbiA9IG51bGxcbiAgdGhpcy5fZHJhaW5lZCA9IGZhbHNlXG4gIHRoaXMuX2ZvcndhcmRpbmcgPSBmYWxzZVxuICB0aGlzLl91bndyaXRlID0gbnVsbFxuICB0aGlzLl91bnJlYWQgPSBudWxsXG4gIHRoaXMuX2VuZGVkID0gZmFsc2VcblxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlXG5cbiAgaWYgKHdyaXRhYmxlKSB0aGlzLnNldFdyaXRhYmxlKHdyaXRhYmxlKVxuICBpZiAocmVhZGFibGUpIHRoaXMuc2V0UmVhZGFibGUocmVhZGFibGUpXG59XG5cbmluaGVyaXRzKER1cGxleGlmeSwgc3RyZWFtLkR1cGxleClcblxuRHVwbGV4aWZ5Lm9iaiA9IGZ1bmN0aW9uKHdyaXRhYmxlLCByZWFkYWJsZSwgb3B0cykge1xuICBpZiAoIW9wdHMpIG9wdHMgPSB7fVxuICBvcHRzLm9iamVjdE1vZGUgPSB0cnVlXG4gIG9wdHMuaGlnaFdhdGVyTWFyayA9IDE2XG4gIHJldHVybiBuZXcgRHVwbGV4aWZ5KHdyaXRhYmxlLCByZWFkYWJsZSwgb3B0cylcbn1cblxuRHVwbGV4aWZ5LnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24oKSB7XG4gIGlmICgrK3RoaXMuX2NvcmtlZCA9PT0gMSkgdGhpcy5lbWl0KCdjb3JrJylcbn1cblxuRHVwbGV4aWZ5LnByb3RvdHlwZS51bmNvcmsgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuX2NvcmtlZCAmJiAtLXRoaXMuX2NvcmtlZCA9PT0gMCkgdGhpcy5lbWl0KCd1bmNvcmsnKVxufVxuXG5EdXBsZXhpZnkucHJvdG90eXBlLnNldFdyaXRhYmxlID0gZnVuY3Rpb24od3JpdGFibGUpIHtcbiAgaWYgKHRoaXMuX3Vud3JpdGUpIHRoaXMuX3Vud3JpdGUoKVxuXG4gIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgIGlmICh3cml0YWJsZSAmJiB3cml0YWJsZS5kZXN0cm95KSB3cml0YWJsZS5kZXN0cm95KClcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmICh3cml0YWJsZSA9PT0gbnVsbCB8fCB3cml0YWJsZSA9PT0gZmFsc2UpIHtcbiAgICB0aGlzLmVuZCgpXG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIHVuZW5kID0gZW9zKHdyaXRhYmxlLCB7d3JpdGFibGU6dHJ1ZSwgcmVhZGFibGU6ZmFsc2V9LCBkZXN0cm95ZXIodGhpcywgdGhpcy5fZm9yd2FyZEVuZCkpXG5cbiAgdmFyIG9uZHJhaW4gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgb25kcmFpbiA9IHNlbGYuX29uZHJhaW5cbiAgICBzZWxmLl9vbmRyYWluID0gbnVsbFxuICAgIGlmIChvbmRyYWluKSBvbmRyYWluKClcbiAgfVxuXG4gIHZhciBjbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuX3dyaXRhYmxlLnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pXG4gICAgdW5lbmQoKVxuICB9XG5cbiAgaWYgKHRoaXMuX3Vud3JpdGUpIHByb2Nlc3MubmV4dFRpY2sob25kcmFpbikgLy8gZm9yY2UgYSBkcmFpbiBvbiBzdHJlYW0gcmVzZXQgdG8gYXZvaWQgbGl2ZWxvY2tzXG5cbiAgdGhpcy5fd3JpdGFibGUgPSB3cml0YWJsZVxuICB0aGlzLl93cml0YWJsZS5vbignZHJhaW4nLCBvbmRyYWluKVxuICB0aGlzLl91bndyaXRlID0gY2xlYXJcblxuICB0aGlzLnVuY29yaygpIC8vIGFsd2F5cyB1bmNvcmsgc2V0V3JpdGFibGVcbn1cblxuRHVwbGV4aWZ5LnByb3RvdHlwZS5zZXRSZWFkYWJsZSA9IGZ1bmN0aW9uKHJlYWRhYmxlKSB7XG4gIGlmICh0aGlzLl91bnJlYWQpIHRoaXMuX3VucmVhZCgpXG5cbiAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgaWYgKHJlYWRhYmxlICYmIHJlYWRhYmxlLmRlc3Ryb3kpIHJlYWRhYmxlLmRlc3Ryb3koKVxuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHJlYWRhYmxlID09PSBudWxsIHx8IHJlYWRhYmxlID09PSBmYWxzZSkge1xuICAgIHRoaXMucHVzaChudWxsKVxuICAgIHRoaXMucmVzdW1lKClcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgdW5lbmQgPSBlb3MocmVhZGFibGUsIHt3cml0YWJsZTpmYWxzZSwgcmVhZGFibGU6dHJ1ZX0sIGRlc3Ryb3llcih0aGlzKSlcblxuICB2YXIgb25yZWFkYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuX2ZvcndhcmQoKVxuICB9XG5cbiAgdmFyIG9uZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5wdXNoKG51bGwpXG4gIH1cblxuICB2YXIgY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICBzZWxmLl9yZWFkYWJsZTIucmVtb3ZlTGlzdGVuZXIoJ3JlYWRhYmxlJywgb25yZWFkYWJsZSlcbiAgICBzZWxmLl9yZWFkYWJsZTIucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKVxuICAgIHVuZW5kKClcbiAgfVxuXG4gIHRoaXMuX2RyYWluZWQgPSB0cnVlXG4gIHRoaXMuX3JlYWRhYmxlID0gcmVhZGFibGVcbiAgdGhpcy5fcmVhZGFibGUyID0gcmVhZGFibGUuX3JlYWRhYmxlU3RhdGUgPyByZWFkYWJsZSA6IHRvU3RyZWFtczIocmVhZGFibGUpXG4gIHRoaXMuX3JlYWRhYmxlMi5vbigncmVhZGFibGUnLCBvbnJlYWRhYmxlKVxuICB0aGlzLl9yZWFkYWJsZTIub24oJ2VuZCcsIG9uZW5kKVxuICB0aGlzLl91bnJlYWQgPSBjbGVhclxuXG4gIHRoaXMuX2ZvcndhcmQoKVxufVxuXG5EdXBsZXhpZnkucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2RyYWluZWQgPSB0cnVlXG4gIHRoaXMuX2ZvcndhcmQoKVxufVxuXG5EdXBsZXhpZnkucHJvdG90eXBlLl9mb3J3YXJkID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLl9mb3J3YXJkaW5nIHx8ICF0aGlzLl9yZWFkYWJsZTIgfHwgIXRoaXMuX2RyYWluZWQpIHJldHVyblxuICB0aGlzLl9mb3J3YXJkaW5nID0gdHJ1ZVxuXG4gIHZhciBkYXRhXG5cbiAgd2hpbGUgKHRoaXMuX2RyYWluZWQgJiYgKGRhdGEgPSBzaGlmdCh0aGlzLl9yZWFkYWJsZTIpKSAhPT0gbnVsbCkge1xuICAgIGlmICh0aGlzLmRlc3Ryb3llZCkgY29udGludWVcbiAgICB0aGlzLl9kcmFpbmVkID0gdGhpcy5wdXNoKGRhdGEpXG4gIH1cblxuICB0aGlzLl9mb3J3YXJkaW5nID0gZmFsc2Vcbn1cblxuRHVwbGV4aWZ5LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oZXJyKSB7XG4gIGlmICh0aGlzLmRlc3Ryb3llZCkgcmV0dXJuXG4gIHRoaXMuZGVzdHJveWVkID0gdHJ1ZVxuXG4gIHZhciBzZWxmID0gdGhpc1xuICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuX2Rlc3Ryb3koZXJyKVxuICB9KVxufVxuXG5EdXBsZXhpZnkucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24oZXJyKSB7XG4gIGlmIChlcnIpIHtcbiAgICB2YXIgb25kcmFpbiA9IHRoaXMuX29uZHJhaW5cbiAgICB0aGlzLl9vbmRyYWluID0gbnVsbFxuICAgIGlmIChvbmRyYWluKSBvbmRyYWluKGVycilcbiAgICBlbHNlIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpXG4gIH1cblxuICBpZiAodGhpcy5fZm9yd2FyZERlc3Ryb3kpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGUgJiYgdGhpcy5fcmVhZGFibGUuZGVzdHJveSkgdGhpcy5fcmVhZGFibGUuZGVzdHJveSgpXG4gICAgaWYgKHRoaXMuX3dyaXRhYmxlICYmIHRoaXMuX3dyaXRhYmxlLmRlc3Ryb3kpIHRoaXMuX3dyaXRhYmxlLmRlc3Ryb3koKVxuICB9XG5cbiAgdGhpcy5lbWl0KCdjbG9zZScpXG59XG5cbkR1cGxleGlmeS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24oZGF0YSwgZW5jLCBjYikge1xuICBpZiAodGhpcy5kZXN0cm95ZWQpIHJldHVybiBjYigpXG4gIGlmICh0aGlzLl9jb3JrZWQpIHJldHVybiBvbnVuY29yayh0aGlzLCB0aGlzLl93cml0ZS5iaW5kKHRoaXMsIGRhdGEsIGVuYywgY2IpKVxuICBpZiAoZGF0YSA9PT0gU0lHTkFMX0ZMVVNIKSByZXR1cm4gdGhpcy5fZmluaXNoKGNiKVxuICBpZiAoIXRoaXMuX3dyaXRhYmxlKSByZXR1cm4gY2IoKVxuXG4gIGlmICh0aGlzLl93cml0YWJsZS53cml0ZShkYXRhKSA9PT0gZmFsc2UpIHRoaXMuX29uZHJhaW4gPSBjYlxuICBlbHNlIGNiKClcbn1cblxuXG5EdXBsZXhpZnkucHJvdG90eXBlLl9maW5pc2ggPSBmdW5jdGlvbihjYikge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdGhpcy5lbWl0KCdwcmVlbmQnKVxuICBvbnVuY29yayh0aGlzLCBmdW5jdGlvbigpIHtcbiAgICBlbmQoc2VsZi5fZm9yd2FyZEVuZCAmJiBzZWxmLl93cml0YWJsZSwgZnVuY3Rpb24oKSB7XG4gICAgICAvLyBoYXh4IHRvIG5vdCBlbWl0IHByZWZpbmlzaCB0d2ljZVxuICAgICAgaWYgKHNlbGYuX3dyaXRhYmxlU3RhdGUucHJlZmluaXNoZWQgPT09IGZhbHNlKSBzZWxmLl93cml0YWJsZVN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZVxuICAgICAgc2VsZi5lbWl0KCdwcmVmaW5pc2gnKVxuICAgICAgb251bmNvcmsoc2VsZiwgY2IpXG4gICAgfSlcbiAgfSlcbn1cblxuRHVwbGV4aWZ5LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbihkYXRhLCBlbmMsIGNiKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHRoaXMuZW5kKG51bGwsIG51bGwsIGRhdGEpXG4gIGlmICh0eXBlb2YgZW5jID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdGhpcy5lbmQoZGF0YSwgbnVsbCwgZW5jKVxuICB0aGlzLl9lbmRlZCA9IHRydWVcbiAgaWYgKGRhdGEpIHRoaXMud3JpdGUoZGF0YSlcbiAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZykgdGhpcy53cml0ZShTSUdOQUxfRkxVU0gpXG4gIHJldHVybiBzdHJlYW0uV3JpdGFibGUucHJvdG90eXBlLmVuZC5jYWxsKHRoaXMsIGNiKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IER1cGxleGlmeVxuIiwiLy8gZWxlbWVudC1jbG9zZXN0IHwgQ0MwLTEuMCB8IGdpdGh1Yi5jb20vam9uYXRoYW50bmVhbC9jbG9zZXN0XG5cbihmdW5jdGlvbiAoRWxlbWVudFByb3RvKSB7XG5cdGlmICh0eXBlb2YgRWxlbWVudFByb3RvLm1hdGNoZXMgIT09ICdmdW5jdGlvbicpIHtcblx0XHRFbGVtZW50UHJvdG8ubWF0Y2hlcyA9IEVsZW1lbnRQcm90by5tc01hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50UHJvdG8ubW96TWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnRQcm90by53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZnVuY3Rpb24gbWF0Y2hlcyhzZWxlY3Rvcikge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSB0aGlzO1xuXHRcdFx0dmFyIGVsZW1lbnRzID0gKGVsZW1lbnQuZG9jdW1lbnQgfHwgZWxlbWVudC5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblx0XHRcdHZhciBpbmRleCA9IDA7XG5cblx0XHRcdHdoaWxlIChlbGVtZW50c1tpbmRleF0gJiYgZWxlbWVudHNbaW5kZXhdICE9PSBlbGVtZW50KSB7XG5cdFx0XHRcdCsraW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBCb29sZWFuKGVsZW1lbnRzW2luZGV4XSk7XG5cdFx0fTtcblx0fVxuXG5cdGlmICh0eXBlb2YgRWxlbWVudFByb3RvLmNsb3Nlc3QgIT09ICdmdW5jdGlvbicpIHtcblx0XHRFbGVtZW50UHJvdG8uY2xvc2VzdCA9IGZ1bmN0aW9uIGNsb3Nlc3Qoc2VsZWN0b3IpIHtcblx0XHRcdHZhciBlbGVtZW50ID0gdGhpcztcblxuXHRcdFx0d2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMSkge1xuXHRcdFx0XHRpZiAoZWxlbWVudC5tYXRjaGVzKHNlbGVjdG9yKSkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtZW50O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fTtcblx0fVxufSkod2luZG93LkVsZW1lbnQucHJvdG90eXBlKTtcbiIsInZhciBvbmNlID0gcmVxdWlyZSgnb25jZScpO1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uKCkge307XG5cbnZhciBpc1JlcXVlc3QgPSBmdW5jdGlvbihzdHJlYW0pIHtcblx0cmV0dXJuIHN0cmVhbS5zZXRIZWFkZXIgJiYgdHlwZW9mIHN0cmVhbS5hYm9ydCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbnZhciBpc0NoaWxkUHJvY2VzcyA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuXHRyZXR1cm4gc3RyZWFtLnN0ZGlvICYmIEFycmF5LmlzQXJyYXkoc3RyZWFtLnN0ZGlvKSAmJiBzdHJlYW0uc3RkaW8ubGVuZ3RoID09PSAzXG59O1xuXG52YXIgZW9zID0gZnVuY3Rpb24oc3RyZWFtLCBvcHRzLCBjYWxsYmFjaykge1xuXHRpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHJldHVybiBlb3Moc3RyZWFtLCBudWxsLCBvcHRzKTtcblx0aWYgKCFvcHRzKSBvcHRzID0ge307XG5cblx0Y2FsbGJhY2sgPSBvbmNlKGNhbGxiYWNrIHx8IG5vb3ApO1xuXG5cdHZhciB3cyA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcblx0dmFyIHJzID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXHR2YXIgcmVhZGFibGUgPSBvcHRzLnJlYWRhYmxlIHx8IChvcHRzLnJlYWRhYmxlICE9PSBmYWxzZSAmJiBzdHJlYW0ucmVhZGFibGUpO1xuXHR2YXIgd3JpdGFibGUgPSBvcHRzLndyaXRhYmxlIHx8IChvcHRzLndyaXRhYmxlICE9PSBmYWxzZSAmJiBzdHJlYW0ud3JpdGFibGUpO1xuXG5cdHZhciBvbmxlZ2FjeWZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICghc3RyZWFtLndyaXRhYmxlKSBvbmZpbmlzaCgpO1xuXHR9O1xuXG5cdHZhciBvbmZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuXHRcdHdyaXRhYmxlID0gZmFsc2U7XG5cdFx0aWYgKCFyZWFkYWJsZSkgY2FsbGJhY2suY2FsbChzdHJlYW0pO1xuXHR9O1xuXG5cdHZhciBvbmVuZCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJlYWRhYmxlID0gZmFsc2U7XG5cdFx0aWYgKCF3cml0YWJsZSkgY2FsbGJhY2suY2FsbChzdHJlYW0pO1xuXHR9O1xuXG5cdHZhciBvbmV4aXQgPSBmdW5jdGlvbihleGl0Q29kZSkge1xuXHRcdGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBleGl0Q29kZSA/IG5ldyBFcnJvcignZXhpdGVkIHdpdGggZXJyb3IgY29kZTogJyArIGV4aXRDb2RlKSA6IG51bGwpO1xuXHR9O1xuXG5cdHZhciBvbmNsb3NlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHJlYWRhYmxlICYmICEocnMgJiYgcnMuZW5kZWQpKSByZXR1cm4gY2FsbGJhY2suY2FsbChzdHJlYW0sIG5ldyBFcnJvcigncHJlbWF0dXJlIGNsb3NlJykpO1xuXHRcdGlmICh3cml0YWJsZSAmJiAhKHdzICYmIHdzLmVuZGVkKSkgcmV0dXJuIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBuZXcgRXJyb3IoJ3ByZW1hdHVyZSBjbG9zZScpKTtcblx0fTtcblxuXHR2YXIgb25yZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0c3RyZWFtLnJlcS5vbignZmluaXNoJywgb25maW5pc2gpO1xuXHR9O1xuXG5cdGlmIChpc1JlcXVlc3Qoc3RyZWFtKSkge1xuXHRcdHN0cmVhbS5vbignY29tcGxldGUnLCBvbmZpbmlzaCk7XG5cdFx0c3RyZWFtLm9uKCdhYm9ydCcsIG9uY2xvc2UpO1xuXHRcdGlmIChzdHJlYW0ucmVxKSBvbnJlcXVlc3QoKTtcblx0XHRlbHNlIHN0cmVhbS5vbigncmVxdWVzdCcsIG9ucmVxdWVzdCk7XG5cdH0gZWxzZSBpZiAod3JpdGFibGUgJiYgIXdzKSB7IC8vIGxlZ2FjeSBzdHJlYW1zXG5cdFx0c3RyZWFtLm9uKCdlbmQnLCBvbmxlZ2FjeWZpbmlzaCk7XG5cdFx0c3RyZWFtLm9uKCdjbG9zZScsIG9ubGVnYWN5ZmluaXNoKTtcblx0fVxuXG5cdGlmIChpc0NoaWxkUHJvY2VzcyhzdHJlYW0pKSBzdHJlYW0ub24oJ2V4aXQnLCBvbmV4aXQpO1xuXG5cdHN0cmVhbS5vbignZW5kJywgb25lbmQpO1xuXHRzdHJlYW0ub24oJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblx0aWYgKG9wdHMuZXJyb3IgIT09IGZhbHNlKSBzdHJlYW0ub24oJ2Vycm9yJywgY2FsbGJhY2spO1xuXHRzdHJlYW0ub24oJ2Nsb3NlJywgb25jbG9zZSk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY29tcGxldGUnLCBvbmZpbmlzaCk7XG5cdFx0c3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdhYm9ydCcsIG9uY2xvc2UpO1xuXHRcdHN0cmVhbS5yZW1vdmVMaXN0ZW5lcigncmVxdWVzdCcsIG9ucmVxdWVzdCk7XG5cdFx0aWYgKHN0cmVhbS5yZXEpIHN0cmVhbS5yZXEucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblx0XHRzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9ubGVnYWN5ZmluaXNoKTtcblx0XHRzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25sZWdhY3lmaW5pc2gpO1xuXHRcdHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuXHRcdHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZXhpdCcsIG9uZXhpdCk7XG5cdFx0c3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG5cdFx0c3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGNhbGxiYWNrKTtcblx0XHRzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG5cdH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVvcztcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxuRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24obikge1xuICBpZiAoIWlzTnVtYmVyKG4pIHx8IG4gPCAwIHx8IGlzTmFOKG4pKVxuICAgIHRocm93IFR5cGVFcnJvcignbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKHR5cGUgPT09ICdlcnJvcicpIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50cy5lcnJvciB8fFxuICAgICAgICAoaXNPYmplY3QodGhpcy5fZXZlbnRzLmVycm9yKSAmJiAhdGhpcy5fZXZlbnRzLmVycm9yLmxlbmd0aCkpIHtcbiAgICAgIGVyID0gYXJndW1lbnRzWzFdO1xuICAgICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCBcImVycm9yXCIgZXZlbnQuICgnICsgZXIgKyAnKScpO1xuICAgICAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNVbmRlZmluZWQoaGFuZGxlcikpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBmYXN0IGNhc2VzXG4gICAgICBjYXNlIDE6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBzbG93ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChoYW5kbGVyKSkge1xuICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcbiAgICBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBtO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gIGlmICh0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpXG4gICAgdGhpcy5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgIGlzRnVuY3Rpb24obGlzdGVuZXIubGlzdGVuZXIpID9cbiAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gIGVsc2UgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZVxuICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV0sIGxpc3RlbmVyXTtcblxuICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSAmJiAhdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCkge1xuICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5fbWF4TGlzdGVuZXJzKSkge1xuICAgICAgbSA9IHRoaXMuX21heExpc3RlbmVycztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICAgIH1cblxuICAgIGlmIChtICYmIG0gPiAwICYmIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGggPiBtKSB7XG4gICAgICB0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJyhub2RlKSB3YXJuaW5nOiBwb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5ICcgK1xuICAgICAgICAgICAgICAgICAgICAnbGVhayBkZXRlY3RlZC4gJWQgbGlzdGVuZXJzIGFkZGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGgpO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnRyYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIG5vdCBzdXBwb3J0ZWQgaW4gSUUgMTBcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICB2YXIgZmlyZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBnKCkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG5cbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIGcubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgdGhpcy5vbih0eXBlLCBnKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZmYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGxpc3QsIHBvc2l0aW9uLCBsZW5ndGgsIGk7XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgbGlzdCA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHBvc2l0aW9uID0gLTE7XG5cbiAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8XG4gICAgICAoaXNGdW5jdGlvbihsaXN0Lmxpc3RlbmVyKSAmJiBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuXG4gIH0gZWxzZSBpZiAoaXNPYmplY3QobGlzdCkpIHtcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSA+IDA7KSB7XG4gICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgICAobGlzdFtpXS5saXN0ZW5lciAmJiBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGxpc3QubGVuZ3RoID0gMDtcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpc3Quc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBrZXksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gIGlmICghdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICBlbHNlIGlmICh0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgZm9yIChrZXkgaW4gdGhpcy5fZXZlbnRzKSB7XG4gICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVycykpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gIH0gZWxzZSBpZiAobGlzdGVuZXJzKSB7XG4gICAgLy8gTElGTyBvcmRlclxuICAgIHdoaWxlIChsaXN0ZW5lcnMubGVuZ3RoKVxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcbiAgfVxuICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gW107XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24odGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSBbdGhpcy5fZXZlbnRzW3R5cGVdXTtcbiAgZWxzZVxuICAgIHJldCA9IHRoaXMuX2V2ZW50c1t0eXBlXS5zbGljZSgpO1xuICByZXR1cm4gcmV0O1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24odHlwZSkge1xuICBpZiAodGhpcy5fZXZlbnRzKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgICBpZiAoaXNGdW5jdGlvbihldmxpc3RlbmVyKSlcbiAgICAgIHJldHVybiAxO1xuICAgIGVsc2UgaWYgKGV2bGlzdGVuZXIpXG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIDA7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbn07XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcclxuICogZmlsZXNpemVcclxuICpcclxuICogQGNvcHlyaWdodCAyMDE3IEphc29uIE11bGxpZ2FuIDxqYXNvbi5tdWxsaWdhbkBhdm9pZHdvcmsuY29tPlxyXG4gKiBAbGljZW5zZSBCU0QtMy1DbGF1c2VcclxuICogQHZlcnNpb24gMy41LjEwXHJcbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwpIHtcblx0dmFyIGIgPSAvXihifEIpJC8sXG5cdCAgICBzeW1ib2wgPSB7XG5cdFx0aWVjOiB7XG5cdFx0XHRiaXRzOiBbXCJiXCIsIFwiS2liXCIsIFwiTWliXCIsIFwiR2liXCIsIFwiVGliXCIsIFwiUGliXCIsIFwiRWliXCIsIFwiWmliXCIsIFwiWWliXCJdLFxuXHRcdFx0Ynl0ZXM6IFtcIkJcIiwgXCJLaUJcIiwgXCJNaUJcIiwgXCJHaUJcIiwgXCJUaUJcIiwgXCJQaUJcIiwgXCJFaUJcIiwgXCJaaUJcIiwgXCJZaUJcIl1cblx0XHR9LFxuXHRcdGplZGVjOiB7XG5cdFx0XHRiaXRzOiBbXCJiXCIsIFwiS2JcIiwgXCJNYlwiLCBcIkdiXCIsIFwiVGJcIiwgXCJQYlwiLCBcIkViXCIsIFwiWmJcIiwgXCJZYlwiXSxcblx0XHRcdGJ5dGVzOiBbXCJCXCIsIFwiS0JcIiwgXCJNQlwiLCBcIkdCXCIsIFwiVEJcIiwgXCJQQlwiLCBcIkVCXCIsIFwiWkJcIiwgXCJZQlwiXVxuXHRcdH1cblx0fSxcblx0ICAgIGZ1bGxmb3JtID0ge1xuXHRcdGllYzogW1wiXCIsIFwia2liaVwiLCBcIm1lYmlcIiwgXCJnaWJpXCIsIFwidGViaVwiLCBcInBlYmlcIiwgXCJleGJpXCIsIFwiemViaVwiLCBcInlvYmlcIl0sXG5cdFx0amVkZWM6IFtcIlwiLCBcImtpbG9cIiwgXCJtZWdhXCIsIFwiZ2lnYVwiLCBcInRlcmFcIiwgXCJwZXRhXCIsIFwiZXhhXCIsIFwiemV0dGFcIiwgXCJ5b3R0YVwiXVxuXHR9O1xuXG5cdC8qKlxyXG4gICogZmlsZXNpemVcclxuICAqXHJcbiAgKiBAbWV0aG9kIGZpbGVzaXplXHJcbiAgKiBAcGFyYW0gIHtNaXhlZH0gICBhcmcgICAgICAgIFN0cmluZywgSW50IG9yIEZsb2F0IHRvIHRyYW5zZm9ybVxyXG4gICogQHBhcmFtICB7T2JqZWN0fSAgZGVzY3JpcHRvciBbT3B0aW9uYWxdIEZsYWdzXHJcbiAgKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgICAgIFJlYWRhYmxlIGZpbGUgc2l6ZSBTdHJpbmdcclxuICAqL1xuXHRmdW5jdGlvbiBmaWxlc2l6ZShhcmcpIHtcblx0XHR2YXIgZGVzY3JpcHRvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cblx0XHR2YXIgcmVzdWx0ID0gW10sXG5cdFx0ICAgIHZhbCA9IDAsXG5cdFx0ICAgIGUgPSB2b2lkIDAsXG5cdFx0ICAgIGJhc2UgPSB2b2lkIDAsXG5cdFx0ICAgIGJpdHMgPSB2b2lkIDAsXG5cdFx0ICAgIGNlaWwgPSB2b2lkIDAsXG5cdFx0ICAgIGZ1bGwgPSB2b2lkIDAsXG5cdFx0ICAgIGZ1bGxmb3JtcyA9IHZvaWQgMCxcblx0XHQgICAgbmVnID0gdm9pZCAwLFxuXHRcdCAgICBudW0gPSB2b2lkIDAsXG5cdFx0ICAgIG91dHB1dCA9IHZvaWQgMCxcblx0XHQgICAgcm91bmQgPSB2b2lkIDAsXG5cdFx0ICAgIHVuaXggPSB2b2lkIDAsXG5cdFx0ICAgIHNwYWNlciA9IHZvaWQgMCxcblx0XHQgICAgc3RhbmRhcmQgPSB2b2lkIDAsXG5cdFx0ICAgIHN5bWJvbHMgPSB2b2lkIDA7XG5cblx0XHRpZiAoaXNOYU4oYXJnKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHNcIik7XG5cdFx0fVxuXG5cdFx0Yml0cyA9IGRlc2NyaXB0b3IuYml0cyA9PT0gdHJ1ZTtcblx0XHR1bml4ID0gZGVzY3JpcHRvci51bml4ID09PSB0cnVlO1xuXHRcdGJhc2UgPSBkZXNjcmlwdG9yLmJhc2UgfHwgMjtcblx0XHRyb3VuZCA9IGRlc2NyaXB0b3Iucm91bmQgIT09IHVuZGVmaW5lZCA/IGRlc2NyaXB0b3Iucm91bmQgOiB1bml4ID8gMSA6IDI7XG5cdFx0c3BhY2VyID0gZGVzY3JpcHRvci5zcGFjZXIgIT09IHVuZGVmaW5lZCA/IGRlc2NyaXB0b3Iuc3BhY2VyIDogdW5peCA/IFwiXCIgOiBcIiBcIjtcblx0XHRzeW1ib2xzID0gZGVzY3JpcHRvci5zeW1ib2xzIHx8IGRlc2NyaXB0b3Iuc3VmZml4ZXMgfHwge307XG5cdFx0c3RhbmRhcmQgPSBiYXNlID09PSAyID8gZGVzY3JpcHRvci5zdGFuZGFyZCB8fCBcImplZGVjXCIgOiBcImplZGVjXCI7XG5cdFx0b3V0cHV0ID0gZGVzY3JpcHRvci5vdXRwdXQgfHwgXCJzdHJpbmdcIjtcblx0XHRmdWxsID0gZGVzY3JpcHRvci5mdWxsZm9ybSA9PT0gdHJ1ZTtcblx0XHRmdWxsZm9ybXMgPSBkZXNjcmlwdG9yLmZ1bGxmb3JtcyBpbnN0YW5jZW9mIEFycmF5ID8gZGVzY3JpcHRvci5mdWxsZm9ybXMgOiBbXTtcblx0XHRlID0gZGVzY3JpcHRvci5leHBvbmVudCAhPT0gdW5kZWZpbmVkID8gZGVzY3JpcHRvci5leHBvbmVudCA6IC0xO1xuXHRcdG51bSA9IE51bWJlcihhcmcpO1xuXHRcdG5lZyA9IG51bSA8IDA7XG5cdFx0Y2VpbCA9IGJhc2UgPiAyID8gMTAwMCA6IDEwMjQ7XG5cblx0XHQvLyBGbGlwcGluZyBhIG5lZ2F0aXZlIG51bWJlciB0byBkZXRlcm1pbmUgdGhlIHNpemVcblx0XHRpZiAobmVnKSB7XG5cdFx0XHRudW0gPSAtbnVtO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluaW5nIHRoZSBleHBvbmVudFxuXHRcdGlmIChlID09PSAtMSB8fCBpc05hTihlKSkge1xuXHRcdFx0ZSA9IE1hdGguZmxvb3IoTWF0aC5sb2cobnVtKSAvIE1hdGgubG9nKGNlaWwpKTtcblxuXHRcdFx0aWYgKGUgPCAwKSB7XG5cdFx0XHRcdGUgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEV4Y2VlZGluZyBzdXBwb3J0ZWQgbGVuZ3RoLCB0aW1lIHRvIHJlZHVjZSAmIG11bHRpcGx5XG5cdFx0aWYgKGUgPiA4KSB7XG5cdFx0XHRlID0gODtcblx0XHR9XG5cblx0XHQvLyBaZXJvIGlzIG5vdyBhIHNwZWNpYWwgY2FzZSBiZWNhdXNlIGJ5dGVzIGRpdmlkZSBieSAxXG5cdFx0aWYgKG51bSA9PT0gMCkge1xuXHRcdFx0cmVzdWx0WzBdID0gMDtcblx0XHRcdHJlc3VsdFsxXSA9IHVuaXggPyBcIlwiIDogc3ltYm9sW3N0YW5kYXJkXVtiaXRzID8gXCJiaXRzXCIgOiBcImJ5dGVzXCJdW2VdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YWwgPSBudW0gLyAoYmFzZSA9PT0gMiA/IE1hdGgucG93KDIsIGUgKiAxMCkgOiBNYXRoLnBvdygxMDAwLCBlKSk7XG5cblx0XHRcdGlmIChiaXRzKSB7XG5cdFx0XHRcdHZhbCA9IHZhbCAqIDg7XG5cblx0XHRcdFx0aWYgKHZhbCA+PSBjZWlsICYmIGUgPCA4KSB7XG5cdFx0XHRcdFx0dmFsID0gdmFsIC8gY2VpbDtcblx0XHRcdFx0XHRlKys7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmVzdWx0WzBdID0gTnVtYmVyKHZhbC50b0ZpeGVkKGUgPiAwID8gcm91bmQgOiAwKSk7XG5cdFx0XHRyZXN1bHRbMV0gPSBiYXNlID09PSAxMCAmJiBlID09PSAxID8gYml0cyA/IFwia2JcIiA6IFwia0JcIiA6IHN5bWJvbFtzdGFuZGFyZF1bYml0cyA/IFwiYml0c1wiIDogXCJieXRlc1wiXVtlXTtcblxuXHRcdFx0aWYgKHVuaXgpIHtcblx0XHRcdFx0cmVzdWx0WzFdID0gc3RhbmRhcmQgPT09IFwiamVkZWNcIiA/IHJlc3VsdFsxXS5jaGFyQXQoMCkgOiBlID4gMCA/IHJlc3VsdFsxXS5yZXBsYWNlKC9CJC8sIFwiXCIpIDogcmVzdWx0WzFdO1xuXG5cdFx0XHRcdGlmIChiLnRlc3QocmVzdWx0WzFdKSkge1xuXHRcdFx0XHRcdHJlc3VsdFswXSA9IE1hdGguZmxvb3IocmVzdWx0WzBdKTtcblx0XHRcdFx0XHRyZXN1bHRbMV0gPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRGVjb3JhdGluZyBhICdkaWZmJ1xuXHRcdGlmIChuZWcpIHtcblx0XHRcdHJlc3VsdFswXSA9IC1yZXN1bHRbMF07XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHlpbmcgY3VzdG9tIHN5bWJvbFxuXHRcdHJlc3VsdFsxXSA9IHN5bWJvbHNbcmVzdWx0WzFdXSB8fCByZXN1bHRbMV07XG5cblx0XHQvLyBSZXR1cm5pbmcgQXJyYXksIE9iamVjdCwgb3IgU3RyaW5nIChkZWZhdWx0KVxuXHRcdGlmIChvdXRwdXQgPT09IFwiYXJyYXlcIikge1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cblx0XHRpZiAob3V0cHV0ID09PSBcImV4cG9uZW50XCIpIHtcblx0XHRcdHJldHVybiBlO1xuXHRcdH1cblxuXHRcdGlmIChvdXRwdXQgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdHJldHVybiB7IHZhbHVlOiByZXN1bHRbMF0sIHN1ZmZpeDogcmVzdWx0WzFdLCBzeW1ib2w6IHJlc3VsdFsxXSB9O1xuXHRcdH1cblxuXHRcdGlmIChmdWxsKSB7XG5cdFx0XHRyZXN1bHRbMV0gPSBmdWxsZm9ybXNbZV0gPyBmdWxsZm9ybXNbZV0gOiBmdWxsZm9ybVtzdGFuZGFyZF1bZV0gKyAoYml0cyA/IFwiYml0XCIgOiBcImJ5dGVcIikgKyAocmVzdWx0WzBdID09PSAxID8gXCJcIiA6IFwic1wiKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oc3BhY2VyKTtcblx0fVxuXG5cdC8vIFBhcnRpYWwgYXBwbGljYXRpb24gZm9yIGZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmdcblx0ZmlsZXNpemUucGFydGlhbCA9IGZ1bmN0aW9uIChvcHQpIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuXHRcdFx0cmV0dXJuIGZpbGVzaXplKGFyZywgb3B0KTtcblx0XHR9O1xuXHR9O1xuXG5cdC8vIENvbW1vbkpTLCBBTUQsIHNjcmlwdCB0YWdcblx0aWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmaWxlc2l6ZTtcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdGRlZmluZShmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gZmlsZXNpemU7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0Z2xvYmFsLmZpbGVzaXplID0gZmlsZXNpemU7XG5cdH1cbn0pKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBnbG9iYWwpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIE5PREVfTElTVF9DTEFTU0VTID0ge1xuICAnW29iamVjdCBIVE1MQ29sbGVjdGlvbl0nOiB0cnVlLFxuICAnW29iamVjdCBOb2RlTGlzdF0nOiB0cnVlLFxuICAnW29iamVjdCBSYWRpb05vZGVMaXN0XSc6IHRydWVcbn07XG5cbi8vIC50eXBlIHZhbHVlcyBmb3IgZWxlbWVudHMgd2hpY2ggY2FuIGFwcGVhciBpbiAuZWxlbWVudHMgYW5kIHNob3VsZCBiZSBpZ25vcmVkXG52YXIgSUdOT1JFRF9FTEVNRU5UX1RZUEVTID0ge1xuICAnYnV0dG9uJzogdHJ1ZSxcbiAgJ2ZpZWxkc2V0JzogdHJ1ZSxcbiAgLy8gJ2tleWdlbic6IHRydWUsXG4gIC8vICdvdXRwdXQnOiB0cnVlLFxuICAncmVzZXQnOiB0cnVlLFxuICAnc3VibWl0JzogdHJ1ZVxufTtcblxudmFyIENIRUNLRURfSU5QVVRfVFlQRVMgPSB7XG4gICdjaGVja2JveCc6IHRydWUsXG4gICdyYWRpbyc6IHRydWVcbn07XG5cbnZhciBUUklNX1JFID0gL15cXHMrfFxccyskL2c7XG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRm9ybUVsZW1lbnR9IGZvcm1cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3QuPHN0cmluZywoc3RyaW5nfEFycmF5LjxzdHJpbmc+KT59IGFuIG9iamVjdCBjb250YWluaW5nXG4gKiAgIHN1Ym1pdHRhYmxlIHZhbHVlKHMpIGhlbGQgaW4gdGhlIGZvcm0ncyAuZWxlbWVudHMgY29sbGVjdGlvbiwgd2l0aFxuICogICBwcm9wZXJ0aWVzIG5hbWVkIGFzIHBlciBlbGVtZW50IG5hbWVzIG9yIGlkcy5cbiAqL1xuZnVuY3Rpb24gZ2V0Rm9ybURhdGEoZm9ybSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IHsgdHJpbTogZmFsc2UgfSA6IGFyZ3VtZW50c1sxXTtcblxuICBpZiAoIWZvcm0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgZm9ybSBpcyByZXF1aXJlZCBieSBnZXRGb3JtRGF0YSwgd2FzIGdpdmVuIGZvcm09JyArIGZvcm0pO1xuICB9XG5cbiAgdmFyIGRhdGEgPSB7fTtcbiAgdmFyIGVsZW1lbnROYW1lID0gdW5kZWZpbmVkO1xuICB2YXIgZWxlbWVudE5hbWVzID0gW107XG4gIHZhciBlbGVtZW50TmFtZUxvb2t1cCA9IHt9O1xuXG4gIC8vIEdldCB1bmlxdWUgc3VibWl0dGFibGUgZWxlbWVudCBuYW1lcyBmb3IgdGhlIGZvcm1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBmb3JtLmVsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBlbGVtZW50ID0gZm9ybS5lbGVtZW50c1tpXTtcbiAgICBpZiAoSUdOT1JFRF9FTEVNRU5UX1RZUEVTW2VsZW1lbnQudHlwZV0gfHwgZWxlbWVudC5kaXNhYmxlZCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGVsZW1lbnROYW1lID0gZWxlbWVudC5uYW1lIHx8IGVsZW1lbnQuaWQ7XG4gICAgaWYgKGVsZW1lbnROYW1lICYmICFlbGVtZW50TmFtZUxvb2t1cFtlbGVtZW50TmFtZV0pIHtcbiAgICAgIGVsZW1lbnROYW1lcy5wdXNoKGVsZW1lbnROYW1lKTtcbiAgICAgIGVsZW1lbnROYW1lTG9va3VwW2VsZW1lbnROYW1lXSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLy8gRXh0cmFjdCBlbGVtZW50IGRhdGEgbmFtZS1ieS1uYW1lIGZvciBjb25zaXN0ZW50IGhhbmRsaW5nIG9mIHNwZWNpYWwgY2FzZXNcbiAgLy8gYXJvdW5kIGVsZW1lbnRzIHdoaWNoIGNvbnRhaW4gbXVsdGlwbGUgaW5wdXRzLlxuICBmb3IgKHZhciBpID0gMCwgbCA9IGVsZW1lbnROYW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlbGVtZW50TmFtZSA9IGVsZW1lbnROYW1lc1tpXTtcbiAgICB2YXIgdmFsdWUgPSBnZXROYW1lZEZvcm1FbGVtZW50RGF0YShmb3JtLCBlbGVtZW50TmFtZSwgb3B0aW9ucyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIGRhdGFbZWxlbWVudE5hbWVdID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRm9ybUVsZW1lbnR9IGZvcm1cbiAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyhzdHJpbmd8QXJyYXkuPHN0cmluZz4pfSBzdWJtaXR0YWJsZSB2YWx1ZShzKSBpbiB0aGUgZm9ybSBmb3IgYVxuICogICBuYW1lZCBlbGVtZW50IGZyb20gaXRzIC5lbGVtZW50cyBjb2xsZWN0aW9uLCBvciBudWxsIGlmIHRoZXJlIHdhcyBub1xuICogICBlbGVtZW50IHdpdGggdGhhdCBuYW1lIG9yIHRoZSBlbGVtZW50IGhhZCBubyBzdWJtaXR0YWJsZSB2YWx1ZShzKS5cbiAqL1xuZnVuY3Rpb24gZ2V0TmFtZWRGb3JtRWxlbWVudERhdGEoZm9ybSwgZWxlbWVudE5hbWUpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyB7IHRyaW06IGZhbHNlIH0gOiBhcmd1bWVudHNbMl07XG5cbiAgaWYgKCFmb3JtKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBIGZvcm0gaXMgcmVxdWlyZWQgYnkgZ2V0TmFtZWRGb3JtRWxlbWVudERhdGEsIHdhcyBnaXZlbiBmb3JtPScgKyBmb3JtKTtcbiAgfVxuICBpZiAoIWVsZW1lbnROYW1lICYmIHRvU3RyaW5nLmNhbGwoZWxlbWVudE5hbWUpICE9PSAnW29iamVjdCBTdHJpbmddJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQSBmb3JtIGVsZW1lbnQgbmFtZSBpcyByZXF1aXJlZCBieSBnZXROYW1lZEZvcm1FbGVtZW50RGF0YSwgd2FzIGdpdmVuIGVsZW1lbnROYW1lPScgKyBlbGVtZW50TmFtZSk7XG4gIH1cblxuICB2YXIgZWxlbWVudCA9IGZvcm0uZWxlbWVudHNbZWxlbWVudE5hbWVdO1xuICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudC5kaXNhYmxlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCFOT0RFX0xJU1RfQ0xBU1NFU1t0b1N0cmluZy5jYWxsKGVsZW1lbnQpXSkge1xuICAgIHJldHVybiBnZXRGb3JtRWxlbWVudFZhbHVlKGVsZW1lbnQsIG9wdGlvbnMudHJpbSk7XG4gIH1cblxuICAvLyBEZWFsIHdpdGggbXVsdGlwbGUgZm9ybSBjb250cm9scyB3aGljaCBoYXZlIHRoZSBzYW1lIG5hbWVcbiAgdmFyIGRhdGEgPSBbXTtcbiAgdmFyIGFsbFJhZGlvcyA9IHRydWU7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gZWxlbWVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoZWxlbWVudFtpXS5kaXNhYmxlZCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxSYWRpb3MgJiYgZWxlbWVudFtpXS50eXBlICE9PSAncmFkaW8nKSB7XG4gICAgICBhbGxSYWRpb3MgPSBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHZhbHVlID0gZ2V0Rm9ybUVsZW1lbnRWYWx1ZShlbGVtZW50W2ldLCBvcHRpb25zLnRyaW0pO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICBkYXRhID0gZGF0YS5jb25jYXQodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNwZWNpYWwgY2FzZSBmb3IgYW4gZWxlbWVudCB3aXRoIG11bHRpcGxlIHNhbWUtbmFtZWQgaW5wdXRzIHdoaWNoIHdlcmUgYWxsXG4gIC8vIHJhZGlvIGJ1dHRvbnM6IGlmIHRoZXJlIHdhcyBhIHNlbGVjdGVkIHZhbHVlLCBvbmx5IHJldHVybiB0aGUgdmFsdWUuXG4gIGlmIChhbGxSYWRpb3MgJiYgZGF0YS5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZGF0YVswXTtcbiAgfVxuXG4gIHJldHVybiBkYXRhLmxlbmd0aCA+IDAgPyBkYXRhIDogbnVsbDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IGEgZm9ybSBlbGVtZW50LlxuICogQHBhcmFtIHtib29sZWFtfSB0cmltIHNob3VsZCB2YWx1ZXMgZm9yIHRleHQgZW50cnkgaW5wdXRzIGJlIHRyaW1tZWQ/XG4gKiBAcmV0dXJuIHsoc3RyaW5nfEFycmF5LjxzdHJpbmc+fEZpbGV8QXJyYXkuPEZpbGU+KX0gdGhlIGVsZW1lbnQncyBzdWJtaXR0YWJsZVxuICogICB2YWx1ZShzKSwgb3IgbnVsbCBpZiBpdCBoYWQgbm9uZS5cbiAqL1xuZnVuY3Rpb24gZ2V0Rm9ybUVsZW1lbnRWYWx1ZShlbGVtZW50LCB0cmltKSB7XG4gIHZhciB2YWx1ZSA9IG51bGw7XG4gIHZhciB0eXBlID0gZWxlbWVudC50eXBlO1xuXG4gIGlmICh0eXBlID09PSAnc2VsZWN0LW9uZScpIHtcbiAgICBpZiAoZWxlbWVudC5vcHRpb25zLmxlbmd0aCkge1xuICAgICAgdmFsdWUgPSBlbGVtZW50Lm9wdGlvbnNbZWxlbWVudC5zZWxlY3RlZEluZGV4XS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgaWYgKHR5cGUgPT09ICdzZWxlY3QtbXVsdGlwbGUnKSB7XG4gICAgdmFsdWUgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGVsZW1lbnQub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChlbGVtZW50Lm9wdGlvbnNbaV0uc2VsZWN0ZWQpIHtcbiAgICAgICAgdmFsdWUucHVzaChlbGVtZW50Lm9wdGlvbnNbaV0udmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICB2YWx1ZSA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8vIElmIGEgZmlsZSBpbnB1dCBkb2Vzbid0IGhhdmUgYSBmaWxlcyBhdHRyaWJ1dGUsIGZhbGwgdGhyb3VnaCB0byB1c2luZyBpdHNcbiAgLy8gdmFsdWUgYXR0cmlidXRlLlxuICBpZiAodHlwZSA9PT0gJ2ZpbGUnICYmICdmaWxlcycgaW4gZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50Lm11bHRpcGxlKSB7XG4gICAgICB2YWx1ZSA9IHNsaWNlLmNhbGwoZWxlbWVudC5maWxlcyk7XG4gICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2hvdWxkIGJlIG51bGwgaWYgbm90IHByZXNlbnQsIGFjY29yZGluZyB0byB0aGUgc3BlY1xuICAgICAgdmFsdWUgPSBlbGVtZW50LmZpbGVzWzBdO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBpZiAoIUNIRUNLRURfSU5QVVRfVFlQRVNbdHlwZV0pIHtcbiAgICB2YWx1ZSA9IHRyaW0gPyBlbGVtZW50LnZhbHVlLnJlcGxhY2UoVFJJTV9SRSwgJycpIDogZWxlbWVudC52YWx1ZTtcbiAgfSBlbHNlIGlmIChlbGVtZW50LmNoZWNrZWQpIHtcbiAgICB2YWx1ZSA9IGVsZW1lbnQudmFsdWU7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmdldEZvcm1EYXRhLmdldE5hbWVkRm9ybUVsZW1lbnREYXRhID0gZ2V0TmFtZWRGb3JtRWxlbWVudERhdGE7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGdldEZvcm1EYXRhO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwibW9kdWxlLmV4cG9ydHMgPSBFdmVudFxuXG5mdW5jdGlvbiBFdmVudCgpIHtcbiAgICB2YXIgbGlzdGVuZXJzID0gW11cblxuICAgIHJldHVybiB7IGJyb2FkY2FzdDogYnJvYWRjYXN0LCBsaXN0ZW46IGV2ZW50IH1cblxuICAgIGZ1bmN0aW9uIGJyb2FkY2FzdCh2YWx1ZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGlzdGVuZXJzW2ldKHZhbHVlKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXZlbnQobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpXG5cbiAgICAgICAgcmV0dXJuIHJlbW92ZUxpc3RlbmVyXG5cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcilcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwidmFyIEV2ZW50ID0gcmVxdWlyZSgnLi9ldmVudC5qcycpXG5cbm1vZHVsZS5leHBvcnRzID0gU291cmNlXG5cbmZ1bmN0aW9uIFNvdXJjZShicm9hZGNhc3Rlcikge1xuICAgIHZhciB0dXBsZSA9IEV2ZW50KClcblxuICAgIGJyb2FkY2FzdGVyKHR1cGxlLmJyb2FkY2FzdClcblxuICAgIHJldHVybiB0dXBsZS5saXN0ZW5cbn1cbiIsInZhciB0b3BMZXZlbCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDpcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9XG52YXIgbWluRG9jID0gcmVxdWlyZSgnbWluLWRvY3VtZW50Jyk7XG5cbnZhciBkb2NjeTtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkb2NjeSA9IGRvY3VtZW50O1xufSBlbHNlIHtcbiAgICBkb2NjeSA9IHRvcExldmVsWydfX0dMT0JBTF9ET0NVTUVOVF9DQUNIRUA0J107XG5cbiAgICBpZiAoIWRvY2N5KSB7XG4gICAgICAgIGRvY2N5ID0gdG9wTGV2ZWxbJ19fR0xPQkFMX0RPQ1VNRU5UX0NBQ0hFQDQnXSA9IG1pbkRvYztcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9jY3k7XG4iLCJ2YXIgd2luO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHdpbiA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHdpbiA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIpe1xuICAgIHdpbiA9IHNlbGY7XG59IGVsc2Uge1xuICAgIHdpbiA9IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdpbjtcbiIsIm1vZHVsZS5leHBvcnRzID0gc2hpbVxuXG5mdW5jdGlvbiBzaGltIChlbGVtZW50LCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPT09ICdub25lJ1xuICAgIH1cblxuICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gJ25vbmUnIDogJydcbn1cbiIsIi8vIEh1bWFuaXplRHVyYXRpb24uanMgLSBodHRwOi8vZ2l0LmlvL2owSGdtUVxuXG47KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxhbmd1YWdlcyA9IHtcbiAgICBhcjoge1xuICAgICAgeTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMgPT09IDEgPyAn2LPZhtipJyA6ICfYs9mG2YjYp9iqJyB9LFxuICAgICAgbW86IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjID09PSAxID8gJ9i02YfYsScgOiAn2KPYtNmH2LEnIH0sXG4gICAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICfYo9iz2KjZiNi5JyA6ICfYo9iz2KfYqNmK2LknIH0sXG4gICAgICBkOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICfZitmI2YUnIDogJ9ij2YrYp9mFJyB9LFxuICAgICAgaDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMgPT09IDEgPyAn2LPYp9i52KknIDogJ9iz2KfYudin2KonIH0sXG4gICAgICBtOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICfYr9mC2YrZgtipJyA6ICfYr9mC2KfYptmCJyB9LFxuICAgICAgczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMgPT09IDEgPyAn2KvYp9mG2YrYqScgOiAn2KvZiNin2YbZiicgfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICfYrNiy2KEg2YXZhiDYp9mE2KvYp9mG2YrYqScgOiAn2KPYrNiy2KfYoSDZhdmGINin2YTYq9in2YbZitipJyB9LFxuICAgICAgZGVjaW1hbDogJywnXG4gICAgfSxcbiAgICBjYToge1xuICAgICAgeTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdhbnknICsgKGMgPT09IDEgPyAnJyA6ICdzJykgfSxcbiAgICAgIG1vOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ21lcycgKyAoYyA9PT0gMSA/ICcnIDogJ29zJykgfSxcbiAgICAgIHc6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnc2V0bWFuJyArIChjID09PSAxID8gJ2EnIDogJ2VzJykgfSxcbiAgICAgIGQ6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnZGknICsgKGMgPT09IDEgPyAnYScgOiAnZXMnKSB9LFxuICAgICAgaDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdob3InICsgKGMgPT09IDEgPyAnYScgOiAnZXMnKSB9LFxuICAgICAgbTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtaW51dCcgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdzZWdvbicgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgbXM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbWlsaXNlZ29uJyArIChjID09PSAxID8gJycgOiAncycpIH0sXG4gICAgICBkZWNpbWFsOiAnLCdcbiAgICB9LFxuICAgIGNzOiB7XG4gICAgICB5OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydyb2snLCAncm9rdScsICdyb2t5JywgJ2xldCddW2dldEN6ZWNoRm9ybShjKV0gfSxcbiAgICAgIG1vOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydtxJtzw61jJywgJ23Em3PDrWNlJywgJ23Em3PDrWNlJywgJ23Em3PDrWPFryddW2dldEN6ZWNoRm9ybShjKV0gfSxcbiAgICAgIHc6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ3TDvWRlbicsICd0w71kbmUnLCAndMO9ZG55JywgJ3TDvWRuxa8nXVtnZXRDemVjaEZvcm0oYyldIH0sXG4gICAgICBkOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydkZW4nLCAnZG5lJywgJ2RueScsICdkbsOtJ11bZ2V0Q3plY2hGb3JtKGMpXSB9LFxuICAgICAgaDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsnaG9kaW5hJywgJ2hvZGlueScsICdob2RpbnknLCAnaG9kaW4nXVtnZXRDemVjaEZvcm0oYyldIH0sXG4gICAgICBtOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydtaW51dGEnLCAnbWludXR5JywgJ21pbnV0eScsICdtaW51dCddW2dldEN6ZWNoRm9ybShjKV0gfSxcbiAgICAgIHM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ3Nla3VuZGEnLCAnc2VrdW5keScsICdzZWt1bmR5JywgJ3Nla3VuZCddW2dldEN6ZWNoRm9ybShjKV0gfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydtaWxpc2VrdW5kYScsICdtaWxpc2VrdW5keScsICdtaWxpc2VrdW5keScsICdtaWxpc2VrdW5kJ11bZ2V0Q3plY2hGb3JtKGMpXSB9LFxuICAgICAgZGVjaW1hbDogJywnXG4gICAgfSxcbiAgICBkYToge1xuICAgICAgeTogJ8OlcicsXG4gICAgICBtbzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtw6VuZWQnICsgKGMgPT09IDEgPyAnJyA6ICdlcicpIH0sXG4gICAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ3VnZScgKyAoYyA9PT0gMSA/ICcnIDogJ3InKSB9LFxuICAgICAgZDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdkYWcnICsgKGMgPT09IDEgPyAnJyA6ICdlJykgfSxcbiAgICAgIGg6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAndGltZScgKyAoYyA9PT0gMSA/ICcnIDogJ3InKSB9LFxuICAgICAgbTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtaW51dCcgKyAoYyA9PT0gMSA/ICcnIDogJ3RlcicpIH0sXG4gICAgICBzOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ3Nla3VuZCcgKyAoYyA9PT0gMSA/ICcnIDogJ2VyJykgfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ21pbGxpc2VrdW5kJyArIChjID09PSAxID8gJycgOiAnZXInKSB9LFxuICAgICAgZGVjaW1hbDogJywnXG4gICAgfSxcbiAgICBkZToge1xuICAgICAgeTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdKYWhyJyArIChjID09PSAxID8gJycgOiAnZScpIH0sXG4gICAgICBtbzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdNb25hdCcgKyAoYyA9PT0gMSA/ICcnIDogJ2UnKSB9LFxuICAgICAgdzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdXb2NoZScgKyAoYyA9PT0gMSA/ICcnIDogJ24nKSB9LFxuICAgICAgZDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdUYWcnICsgKGMgPT09IDEgPyAnJyA6ICdlJykgfSxcbiAgICAgIGg6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnU3R1bmRlJyArIChjID09PSAxID8gJycgOiAnbicpIH0sXG4gICAgICBtOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ01pbnV0ZScgKyAoYyA9PT0gMSA/ICcnIDogJ24nKSB9LFxuICAgICAgczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdTZWt1bmRlJyArIChjID09PSAxID8gJycgOiAnbicpIH0sXG4gICAgICBtczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdNaWxsaXNla3VuZGUnICsgKGMgPT09IDEgPyAnJyA6ICduJykgfSxcbiAgICAgIGRlY2ltYWw6ICcsJ1xuICAgIH0sXG4gICAgZW46IHtcbiAgICAgIHk6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAneWVhcicgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgbW86IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbW9udGgnICsgKGMgPT09IDEgPyAnJyA6ICdzJykgfSxcbiAgICAgIHc6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnd2VlaycgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgZDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdkYXknICsgKGMgPT09IDEgPyAnJyA6ICdzJykgfSxcbiAgICAgIGg6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnaG91cicgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgbTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtaW51dGUnICsgKGMgPT09IDEgPyAnJyA6ICdzJykgfSxcbiAgICAgIHM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnc2Vjb25kJyArIChjID09PSAxID8gJycgOiAncycpIH0sXG4gICAgICBtczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtaWxsaXNlY29uZCcgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgZGVjaW1hbDogJy4nXG4gICAgfSxcbiAgICBlczoge1xuICAgICAgeTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdhw7FvJyArIChjID09PSAxID8gJycgOiAncycpIH0sXG4gICAgICBtbzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtZXMnICsgKGMgPT09IDEgPyAnJyA6ICdlcycpIH0sXG4gICAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ3NlbWFuYScgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgZDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdkw61hJyArIChjID09PSAxID8gJycgOiAncycpIH0sXG4gICAgICBoOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ2hvcmEnICsgKGMgPT09IDEgPyAnJyA6ICdzJykgfSxcbiAgICAgIG06IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbWludXRvJyArIChjID09PSAxID8gJycgOiAncycpIH0sXG4gICAgICBzOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ3NlZ3VuZG8nICsgKGMgPT09IDEgPyAnJyA6ICdzJykgfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ21pbGlzZWd1bmRvJyArIChjID09PSAxID8gJycgOiAncycpIH0sXG4gICAgICBkZWNpbWFsOiAnLCdcbiAgICB9LFxuICAgIGZpOiB7XG4gICAgICB5OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICd2dW9zaScgOiAndnVvdHRhJyB9LFxuICAgICAgbW86IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjID09PSAxID8gJ2t1dWthdXNpJyA6ICdrdXVrYXV0dGEnIH0sXG4gICAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ3ZpaWtrbycgKyAoYyA9PT0gMSA/ICcnIDogJ2EnKSB9LFxuICAgICAgZDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdww6RpdsOkJyArIChjID09PSAxID8gJycgOiAnw6QnKSB9LFxuICAgICAgaDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICd0dW50aScgKyAoYyA9PT0gMSA/ICcnIDogJ2EnKSB9LFxuICAgICAgbTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtaW51dXR0aScgKyAoYyA9PT0gMSA/ICcnIDogJ2EnKSB9LFxuICAgICAgczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdzZWt1bnRpJyArIChjID09PSAxID8gJycgOiAnYScpIH0sXG4gICAgICBtczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtaWxsaXNla3VudGknICsgKGMgPT09IDEgPyAnJyA6ICdhJykgfSxcbiAgICAgIGRlY2ltYWw6ICcsJ1xuICAgIH0sXG4gICAgZnI6IHtcbiAgICAgIHk6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnYW4nICsgKGMgPj0gMiA/ICdzJyA6ICcnKSB9LFxuICAgICAgbW86ICdtb2lzJyxcbiAgICAgIHc6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnc2VtYWluZScgKyAoYyA+PSAyID8gJ3MnIDogJycpIH0sXG4gICAgICBkOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ2pvdXInICsgKGMgPj0gMiA/ICdzJyA6ICcnKSB9LFxuICAgICAgaDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdoZXVyZScgKyAoYyA+PSAyID8gJ3MnIDogJycpIH0sXG4gICAgICBtOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ21pbnV0ZScgKyAoYyA+PSAyID8gJ3MnIDogJycpIH0sXG4gICAgICBzOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ3NlY29uZGUnICsgKGMgPj0gMiA/ICdzJyA6ICcnKSB9LFxuICAgICAgbXM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbWlsbGlzZWNvbmRlJyArIChjID49IDIgPyAncycgOiAnJykgfSxcbiAgICAgIGRlY2ltYWw6ICcsJ1xuICAgIH0sXG4gICAgZ3I6IHtcbiAgICAgIHk6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjID09PSAxID8gJ8+Hz4HPjM69zr/PgicgOiAnz4fPgc+Mzr3Ouc6xJyB9LFxuICAgICAgbW86IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjID09PSAxID8gJ868zq7Ovc6xz4InIDogJ868zq7Ovc61z4InIH0sXG4gICAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICfOtc6yzrTOv868zqzOtM6xJyA6ICfOtc6yzrTOv868zqzOtM61z4InIH0sXG4gICAgICBkOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICfOvM6tz4HOsScgOiAnzrzOrc+BzrXPgicgfSxcbiAgICAgIGg6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjID09PSAxID8gJ8+Oz4HOsScgOiAnz47Pgc61z4InIH0sXG4gICAgICBtOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICfOu861z4DPhM+MJyA6ICfOu861z4DPhM6sJyB9LFxuICAgICAgczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMgPT09IDEgPyAnzrTOtc+Fz4TOtc+Bz4zOu861z4DPhM6/JyA6ICfOtM61z4XPhM61z4HPjM67zrXPgM+EzrEnIH0sXG4gICAgICBtczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMgPT09IDEgPyAnz4fOuc67zrnOv8+Dz4TPjCDPhM6/z4UgzrTOtc+Fz4TOtc+Bzr/Ou86tz4DPhM6/z4UnIDogJ8+HzrnOu865zr/Pg8+Ezqwgz4TOv8+FIM60zrXPhc+EzrXPgc6/zrvOrc+Az4TOv8+FJyB9LFxuICAgICAgZGVjaW1hbDogJywnXG4gICAgfSxcbiAgICBodToge1xuICAgICAgeTogJ8OpdicsXG4gICAgICBtbzogJ2jDs25hcCcsXG4gICAgICB3OiAnaMOpdCcsXG4gICAgICBkOiAnbmFwJyxcbiAgICAgIGg6ICfDs3JhJyxcbiAgICAgIG06ICdwZXJjJyxcbiAgICAgIHM6ICdtw6Fzb2RwZXJjJyxcbiAgICAgIG1zOiAnZXpyZWRtw6Fzb2RwZXJjJyxcbiAgICAgIGRlY2ltYWw6ICcsJ1xuICAgIH0sXG4gICAgaWQ6IHtcbiAgICAgIHk6ICd0YWh1bicsXG4gICAgICBtbzogJ2J1bGFuJyxcbiAgICAgIHc6ICdtaW5nZ3UnLFxuICAgICAgZDogJ2hhcmknLFxuICAgICAgaDogJ2phbScsXG4gICAgICBtOiAnbWVuaXQnLFxuICAgICAgczogJ2RldGlrJyxcbiAgICAgIG1zOiAnbWlsaWRldGlrJyxcbiAgICAgIGRlY2ltYWw6ICcuJ1xuICAgIH0sXG4gICAgaXM6IHtcbiAgICAgIHk6ICfDoXInLFxuICAgICAgbW86IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbcOhbnXDsCcgKyAoYyA9PT0gMSA/ICd1cicgOiAnaXInKSB9LFxuICAgICAgdzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICd2aWsnICsgKGMgPT09IDEgPyAnYScgOiAndXInKSB9LFxuICAgICAgZDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdkYWcnICsgKGMgPT09IDEgPyAndXInIDogJ2FyJykgfSxcbiAgICAgIGg6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAna2x1a2t1dMOtbScgKyAoYyA9PT0gMSA/ICdpJyA6ICdhcicpIH0sXG4gICAgICBtOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ23DrW7DunQnICsgKGMgPT09IDEgPyAnYScgOiAndXInKSB9LFxuICAgICAgczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdzZWvDum5kJyArIChjID09PSAxID8gJ2EnIDogJ3VyJykgfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ21pbGxpc2Vrw7puZCcgKyAoYyA9PT0gMSA/ICdhJyA6ICd1cicpIH0sXG4gICAgICBkZWNpbWFsOiAnLidcbiAgICB9LFxuICAgIGl0OiB7XG4gICAgICB5OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ2FubicgKyAoYyA9PT0gMSA/ICdvJyA6ICdpJykgfSxcbiAgICAgIG1vOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ21lcycgKyAoYyA9PT0gMSA/ICdlJyA6ICdpJykgfSxcbiAgICAgIHc6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnc2V0dGltYW4nICsgKGMgPT09IDEgPyAnYScgOiAnZScpIH0sXG4gICAgICBkOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ2dpb3JuJyArIChjID09PSAxID8gJ28nIDogJ2knKSB9LFxuICAgICAgaDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdvcicgKyAoYyA9PT0gMSA/ICdhJyA6ICdlJykgfSxcbiAgICAgIG06IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbWludXQnICsgKGMgPT09IDEgPyAnbycgOiAnaScpIH0sXG4gICAgICBzOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ3NlY29uZCcgKyAoYyA9PT0gMSA/ICdvJyA6ICdpJykgfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ21pbGxpc2Vjb25kJyArIChjID09PSAxID8gJ28nIDogJ2knKSB9LFxuICAgICAgZGVjaW1hbDogJywnXG4gICAgfSxcbiAgICBqYToge1xuICAgICAgeTogJ+W5tCcsXG4gICAgICBtbzogJ+aciCcsXG4gICAgICB3OiAn6YCxJyxcbiAgICAgIGQ6ICfml6UnLFxuICAgICAgaDogJ+aZgumWkycsXG4gICAgICBtOiAn5YiGJyxcbiAgICAgIHM6ICfnp5InLFxuICAgICAgbXM6ICfjg5/jg6rnp5InLFxuICAgICAgZGVjaW1hbDogJy4nXG4gICAgfSxcbiAgICBrbzoge1xuICAgICAgeTogJ+uFhCcsXG4gICAgICBtbzogJ+qwnOyblCcsXG4gICAgICB3OiAn7KO87J28JyxcbiAgICAgIGQ6ICfsnbwnLFxuICAgICAgaDogJ+yLnOqwhCcsXG4gICAgICBtOiAn67aEJyxcbiAgICAgIHM6ICfstIgnLFxuICAgICAgbXM6ICfrsIDrpqwg7LSIJyxcbiAgICAgIGRlY2ltYWw6ICcuJ1xuICAgIH0sXG4gICAgbHQ6IHtcbiAgICAgIHk6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAoKGMgJSAxMCA9PT0gMCkgfHwgKGMgJSAxMDAgPj0gMTAgJiYgYyAlIDEwMCA8PSAyMCkpID8gJ21ldMWzJyA6ICdtZXRhaScgfSxcbiAgICAgIG1vOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydtxJdudW8nLCAnbcSXbmVzaWFpJywgJ23El25lc2nFsyddW2dldExpdGh1YW5pYW5Gb3JtKGMpXSB9LFxuICAgICAgdzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsnc2F2YWl0xJcnLCAnc2F2YWl0xJdzJywgJ3NhdmFpxI1pxbMnXVtnZXRMaXRodWFuaWFuRm9ybShjKV0gfSxcbiAgICAgIGQ6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ2RpZW5hJywgJ2RpZW5vcycsICdkaWVuxbMnXVtnZXRMaXRodWFuaWFuRm9ybShjKV0gfSxcbiAgICAgIGg6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ3ZhbGFuZGEnLCAndmFsYW5kb3MnLCAndmFsYW5kxbMnXVtnZXRMaXRodWFuaWFuRm9ybShjKV0gfSxcbiAgICAgIG06IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ21pbnV0xJcnLCAnbWludXTEl3MnLCAnbWludcSNacWzJ11bZ2V0TGl0aHVhbmlhbkZvcm0oYyldIH0sXG4gICAgICBzOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydzZWt1bmTElycsICdzZWt1bmTEl3MnLCAnc2VrdW5kxb5pxbMnXVtnZXRMaXRodWFuaWFuRm9ybShjKV0gfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydtaWxpc2VrdW5kxJcnLCAnbWlsaXNla3VuZMSXcycsICdtaWxpc2VrdW5kxb5pxbMnXVtnZXRMaXRodWFuaWFuRm9ybShjKV0gfSxcbiAgICAgIGRlY2ltYWw6ICcsJ1xuICAgIH0sXG4gICAgbXM6IHtcbiAgICAgIHk6ICd0YWh1bicsXG4gICAgICBtbzogJ2J1bGFuJyxcbiAgICAgIHc6ICdtaW5nZ3UnLFxuICAgICAgZDogJ2hhcmknLFxuICAgICAgaDogJ2phbScsXG4gICAgICBtOiAnbWluaXQnLFxuICAgICAgczogJ3NhYXQnLFxuICAgICAgbXM6ICdtaWxpc2FhdCcsXG4gICAgICBkZWNpbWFsOiAnLidcbiAgICB9LFxuICAgIG5sOiB7XG4gICAgICB5OiAnamFhcicsXG4gICAgICBtbzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMgPT09IDEgPyAnbWFhbmQnIDogJ21hYW5kZW4nIH0sXG4gICAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyA9PT0gMSA/ICd3ZWVrJyA6ICd3ZWtlbicgfSxcbiAgICAgIGQ6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjID09PSAxID8gJ2RhZycgOiAnZGFnZW4nIH0sXG4gICAgICBoOiAndXVyJyxcbiAgICAgIG06IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjID09PSAxID8gJ21pbnV1dCcgOiAnbWludXRlbicgfSxcbiAgICAgIHM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjID09PSAxID8gJ3NlY29uZGUnIDogJ3NlY29uZGVuJyB9LFxuICAgICAgbXM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjID09PSAxID8gJ21pbGxpc2Vjb25kZScgOiAnbWlsbGlzZWNvbmRlbicgfSxcbiAgICAgIGRlY2ltYWw6ICcsJ1xuICAgIH0sXG4gICAgbm86IHtcbiAgICAgIHk6ICfDpXInLFxuICAgICAgbW86IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbcOlbmVkJyArIChjID09PSAxID8gJycgOiAnZXInKSB9LFxuICAgICAgdzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICd1a2UnICsgKGMgPT09IDEgPyAnJyA6ICdyJykgfSxcbiAgICAgIGQ6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnZGFnJyArIChjID09PSAxID8gJycgOiAnZXInKSB9LFxuICAgICAgaDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICd0aW1lJyArIChjID09PSAxID8gJycgOiAncicpIH0sXG4gICAgICBtOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ21pbnV0dCcgKyAoYyA9PT0gMSA/ICcnIDogJ2VyJykgfSxcbiAgICAgIHM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnc2VrdW5kJyArIChjID09PSAxID8gJycgOiAnZXInKSB9LFxuICAgICAgbXM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbWlsbGlzZWt1bmQnICsgKGMgPT09IDEgPyAnJyA6ICdlcicpIH0sXG4gICAgICBkZWNpbWFsOiAnLCdcbiAgICB9LFxuICAgIHBsOiB7XG4gICAgICB5OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydyb2snLCAncm9rdScsICdsYXRhJywgJ2xhdCddW2dldFBvbGlzaEZvcm0oYyldIH0sXG4gICAgICBtbzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsnbWllc2nEhWMnLCAnbWllc2nEhWNhJywgJ21pZXNpxIVjZScsICdtaWVzacSZY3knXVtnZXRQb2xpc2hGb3JtKGMpXSB9LFxuICAgICAgdzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsndHlkemllxYQnLCAndHlnb2RuaWEnLCAndHlnb2RuaWUnLCAndHlnb2RuaSddW2dldFBvbGlzaEZvcm0oYyldIH0sXG4gICAgICBkOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydkemllxYQnLCAnZG5pYScsICdkbmknLCAnZG5pJ11bZ2V0UG9saXNoRm9ybShjKV0gfSxcbiAgICAgIGg6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ2dvZHppbmEnLCAnZ29kemlueScsICdnb2R6aW55JywgJ2dvZHppbiddW2dldFBvbGlzaEZvcm0oYyldIH0sXG4gICAgICBtOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydtaW51dGEnLCAnbWludXR5JywgJ21pbnV0eScsICdtaW51dCddW2dldFBvbGlzaEZvcm0oYyldIH0sXG4gICAgICBzOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWydzZWt1bmRhJywgJ3Nla3VuZHknLCAnc2VrdW5keScsICdzZWt1bmQnXVtnZXRQb2xpc2hGb3JtKGMpXSB9LFxuICAgICAgbXM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ21pbGlzZWt1bmRhJywgJ21pbGlzZWt1bmR5JywgJ21pbGlzZWt1bmR5JywgJ21pbGlzZWt1bmQnXVtnZXRQb2xpc2hGb3JtKGMpXSB9LFxuICAgICAgZGVjaW1hbDogJywnXG4gICAgfSxcbiAgICBwdDoge1xuICAgICAgeTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdhbm8nICsgKGMgPT09IDEgPyAnJyA6ICdzJykgfSxcbiAgICAgIG1vOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyAhPT0gMSA/ICdtZXNlcycgOiAnbcOqcycgfSxcbiAgICAgIHc6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnc2VtYW5hJyArIChjID09PSAxID8gJycgOiAncycpIH0sXG4gICAgICBkOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ2RpYScgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgaDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdob3JhJyArIChjID09PSAxID8gJycgOiAncycpIH0sXG4gICAgICBtOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ21pbnV0bycgKyAoYyA9PT0gMSA/ICcnIDogJ3MnKSB9LFxuICAgICAgczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdzZWd1bmRvJyArIChjID09PSAxID8gJycgOiAncycpIH0sXG4gICAgICBtczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtaWxpc3NlZ3VuZG8nICsgKGMgPT09IDEgPyAnJyA6ICdzJykgfSxcbiAgICAgIGRlY2ltYWw6ICcsJ1xuICAgIH0sXG4gICAgcnU6IHtcbiAgICAgIHk6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ9C70LXRgicsICfQs9C+0LQnLCAn0LPQvtC00LAnXVtnZXRTbGF2aWNGb3JtKGMpXSB9LFxuICAgICAgbW86IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ9C80LXRgdGP0YbQtdCyJywgJ9C80LXRgdGP0YYnLCAn0LzQtdGB0Y/RhtCwJ11bZ2V0U2xhdmljRm9ybShjKV0gfSxcbiAgICAgIHc6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ9C90LXQtNC10LvRjCcsICfQvdC10LTQtdC70Y8nLCAn0L3QtdC00LXQu9C4J11bZ2V0U2xhdmljRm9ybShjKV0gfSxcbiAgICAgIGQ6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ9C00L3QtdC5JywgJ9C00LXQvdGMJywgJ9C00L3RjyddW2dldFNsYXZpY0Zvcm0oYyldIH0sXG4gICAgICBoOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWyfRh9Cw0YHQvtCyJywgJ9GH0LDRgScsICfRh9Cw0YHQsCddW2dldFNsYXZpY0Zvcm0oYyldIH0sXG4gICAgICBtOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWyfQvNC40L3Rg9GCJywgJ9C80LjQvdGD0YLQsCcsICfQvNC40L3Rg9GC0YsnXVtnZXRTbGF2aWNGb3JtKGMpXSB9LFxuICAgICAgczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsn0YHQtdC60YPQvdC0JywgJ9GB0LXQutGD0L3QtNCwJywgJ9GB0LXQutGD0L3QtNGLJ11bZ2V0U2xhdmljRm9ybShjKV0gfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWyfQvNC40LvQu9C40YHQtdC60YPQvdC0JywgJ9C80LjQu9C70LjRgdC10LrRg9C90LTQsCcsICfQvNC40LvQu9C40YHQtdC60YPQvdC00YsnXVtnZXRTbGF2aWNGb3JtKGMpXSB9LFxuICAgICAgZGVjaW1hbDogJywnXG4gICAgfSxcbiAgICB1azoge1xuICAgICAgeTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsn0YDQvtC60ZbQsicsICfRgNGW0LonLCAn0YDQvtC60LgnXVtnZXRTbGF2aWNGb3JtKGMpXSB9LFxuICAgICAgbW86IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ9C80ZbRgdGP0YbRltCyJywgJ9C80ZbRgdGP0YbRjCcsICfQvNGW0YHRj9GG0ZYnXVtnZXRTbGF2aWNGb3JtKGMpXSB9LFxuICAgICAgdzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsn0L3QtdC00ZbQu9GMJywgJ9C90LXQtNGW0LvRjycsICfQvdC10LTRltC70ZYnXVtnZXRTbGF2aWNGb3JtKGMpXSB9LFxuICAgICAgZDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsn0LTQvdGW0LInLCAn0LTQtdC90YwnLCAn0LTQvdGWJ11bZ2V0U2xhdmljRm9ybShjKV0gfSxcbiAgICAgIGg6IGZ1bmN0aW9uIChjKSB7IHJldHVybiBbJ9Cz0L7QtNC40L0nLCAn0LPQvtC00LjQvdCwJywgJ9Cz0L7QtNC40L3QuCddW2dldFNsYXZpY0Zvcm0oYyldIH0sXG4gICAgICBtOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWyfRhdCy0LjQu9C40L0nLCAn0YXQstC40LvQuNC90LAnLCAn0YXQstC40LvQuNC90LgnXVtnZXRTbGF2aWNGb3JtKGMpXSB9LFxuICAgICAgczogZnVuY3Rpb24gKGMpIHsgcmV0dXJuIFsn0YHQtdC60YPQvdC0JywgJ9GB0LXQutGD0L3QtNCwJywgJ9GB0LXQutGD0L3QtNC4J11bZ2V0U2xhdmljRm9ybShjKV0gfSxcbiAgICAgIG1zOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gWyfQvNGW0LvRltGB0LXQutGD0L3QtCcsICfQvNGW0LvRltGB0LXQutGD0L3QtNCwJywgJ9C80ZbQu9GW0YHQtdC60YPQvdC00LgnXVtnZXRTbGF2aWNGb3JtKGMpXSB9LFxuICAgICAgZGVjaW1hbDogJywnXG4gICAgfSxcbiAgICBzdjoge1xuICAgICAgeTogJ8OlcicsXG4gICAgICBtbzogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtw6VuYWQnICsgKGMgPT09IDEgPyAnJyA6ICdlcicpIH0sXG4gICAgICB3OiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ3ZlY2snICsgKGMgPT09IDEgPyAnYScgOiAnb3InKSB9LFxuICAgICAgZDogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdkYWcnICsgKGMgPT09IDEgPyAnJyA6ICdhcicpIH0sXG4gICAgICBoOiBmdW5jdGlvbiAoYykgeyByZXR1cm4gJ3RpbW0nICsgKGMgPT09IDEgPyAnZScgOiAnYXInKSB9LFxuICAgICAgbTogZnVuY3Rpb24gKGMpIHsgcmV0dXJuICdtaW51dCcgKyAoYyA9PT0gMSA/ICcnIDogJ2VyJykgfSxcbiAgICAgIHM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnc2VrdW5kJyArIChjID09PSAxID8gJycgOiAnZXInKSB9LFxuICAgICAgbXM6IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnbWlsbGlzZWt1bmQnICsgKGMgPT09IDEgPyAnJyA6ICdlcicpIH0sXG4gICAgICBkZWNpbWFsOiAnLCdcbiAgICB9LFxuICAgIHRyOiB7XG4gICAgICB5OiAnecSxbCcsXG4gICAgICBtbzogJ2F5JyxcbiAgICAgIHc6ICdoYWZ0YScsXG4gICAgICBkOiAnZ8O8bicsXG4gICAgICBoOiAnc2FhdCcsXG4gICAgICBtOiAnZGFraWthJyxcbiAgICAgIHM6ICdzYW5peWUnLFxuICAgICAgbXM6ICdtaWxpc2FuaXllJyxcbiAgICAgIGRlY2ltYWw6ICcsJ1xuICAgIH0sXG4gICAgdmk6IHtcbiAgICAgIHk6ICduxINtJyxcbiAgICAgIG1vOiAndGjDoW5nJyxcbiAgICAgIHc6ICd0deG6p24nLFxuICAgICAgZDogJ25nw6B5JyxcbiAgICAgIGg6ICdnaeG7nScsXG4gICAgICBtOiAncGjDunQnLFxuICAgICAgczogJ2dpw6J5JyxcbiAgICAgIG1zOiAnbWlsaSBnacOieScsXG4gICAgICBkZWNpbWFsOiAnLCdcbiAgICB9LFxuICAgIHpoX0NOOiB7XG4gICAgICB5OiAn5bm0JyxcbiAgICAgIG1vOiAn5Liq5pyIJyxcbiAgICAgIHc6ICflkagnLFxuICAgICAgZDogJ+WkqScsXG4gICAgICBoOiAn5bCP5pe2JyxcbiAgICAgIG06ICfliIbpkp8nLFxuICAgICAgczogJ+enkicsXG4gICAgICBtczogJ+avq+enkicsXG4gICAgICBkZWNpbWFsOiAnLidcbiAgICB9LFxuICAgIHpoX1RXOiB7XG4gICAgICB5OiAn5bm0JyxcbiAgICAgIG1vOiAn5YCL5pyIJyxcbiAgICAgIHc6ICflkagnLFxuICAgICAgZDogJ+WkqScsXG4gICAgICBoOiAn5bCP5pmCJyxcbiAgICAgIG06ICfliIbpkJgnLFxuICAgICAgczogJ+enkicsXG4gICAgICBtczogJ+avq+enkicsXG4gICAgICBkZWNpbWFsOiAnLidcbiAgICB9XG4gIH1cblxuICAvLyBZb3UgY2FuIGNyZWF0ZSBhIGh1bWFuaXplciwgd2hpY2ggcmV0dXJucyBhIGZ1bmN0aW9uIHdpdGggZGVmYXVsdFxuICAvLyBwYXJhbWV0ZXJzLlxuICBmdW5jdGlvbiBodW1hbml6ZXIgKHBhc3NlZE9wdGlvbnMpIHtcbiAgICB2YXIgcmVzdWx0ID0gZnVuY3Rpb24gaHVtYW5pemVyIChtcywgaHVtYW5pemVyT3B0aW9ucykge1xuICAgICAgdmFyIG9wdGlvbnMgPSBleHRlbmQoe30sIHJlc3VsdCwgaHVtYW5pemVyT3B0aW9ucyB8fCB7fSlcbiAgICAgIHJldHVybiBkb0h1bWFuaXphdGlvbihtcywgb3B0aW9ucylcbiAgICB9XG5cbiAgICByZXR1cm4gZXh0ZW5kKHJlc3VsdCwge1xuICAgICAgbGFuZ3VhZ2U6ICdlbicsXG4gICAgICBkZWxpbWl0ZXI6ICcsICcsXG4gICAgICBzcGFjZXI6ICcgJyxcbiAgICAgIGNvbmp1bmN0aW9uOiAnJyxcbiAgICAgIHNlcmlhbENvbW1hOiB0cnVlLFxuICAgICAgdW5pdHM6IFsneScsICdtbycsICd3JywgJ2QnLCAnaCcsICdtJywgJ3MnXSxcbiAgICAgIGxhbmd1YWdlczoge30sXG4gICAgICByb3VuZDogZmFsc2UsXG4gICAgICB1bml0TWVhc3VyZXM6IHtcbiAgICAgICAgeTogMzE1NTc2MDAwMDAsXG4gICAgICAgIG1vOiAyNjI5ODAwMDAwLFxuICAgICAgICB3OiA2MDQ4MDAwMDAsXG4gICAgICAgIGQ6IDg2NDAwMDAwLFxuICAgICAgICBoOiAzNjAwMDAwLFxuICAgICAgICBtOiA2MDAwMCxcbiAgICAgICAgczogMTAwMCxcbiAgICAgICAgbXM6IDFcbiAgICAgIH1cbiAgICB9LCBwYXNzZWRPcHRpb25zKVxuICB9XG5cbiAgLy8gVGhlIG1haW4gZnVuY3Rpb24gaXMganVzdCBhIHdyYXBwZXIgYXJvdW5kIGEgZGVmYXVsdCBodW1hbml6ZXIuXG4gIHZhciBodW1hbml6ZUR1cmF0aW9uID0gaHVtYW5pemVyKHt9KVxuXG4gIC8vIGRvSHVtYW5pemF0aW9uIGRvZXMgdGhlIGJ1bGsgb2YgdGhlIHdvcmsuXG4gIGZ1bmN0aW9uIGRvSHVtYW5pemF0aW9uIChtcywgb3B0aW9ucykge1xuICAgIHZhciBpLCBsZW4sIHBpZWNlXG5cbiAgICAvLyBNYWtlIHN1cmUgd2UgaGF2ZSBhIHBvc2l0aXZlIG51bWJlci5cbiAgICAvLyBIYXMgdGhlIG5pY2Ugc2lkZWZmZWN0IG9mIHR1cm5pbmcgTnVtYmVyIG9iamVjdHMgaW50byBwcmltaXRpdmVzLlxuICAgIG1zID0gTWF0aC5hYnMobXMpXG5cbiAgICB2YXIgZGljdGlvbmFyeSA9IG9wdGlvbnMubGFuZ3VhZ2VzW29wdGlvbnMubGFuZ3VhZ2VdIHx8IGxhbmd1YWdlc1tvcHRpb25zLmxhbmd1YWdlXVxuICAgIGlmICghZGljdGlvbmFyeSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBsYW5ndWFnZSAnICsgZGljdGlvbmFyeSArICcuJylcbiAgICB9XG5cbiAgICB2YXIgcGllY2VzID0gW11cblxuICAgIC8vIFN0YXJ0IGF0IHRoZSB0b3AgYW5kIGtlZXAgcmVtb3ZpbmcgdW5pdHMsIGJpdCBieSBiaXQuXG4gICAgdmFyIHVuaXROYW1lLCB1bml0TVMsIHVuaXRDb3VudFxuICAgIGZvciAoaSA9IDAsIGxlbiA9IG9wdGlvbnMudW5pdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHVuaXROYW1lID0gb3B0aW9ucy51bml0c1tpXVxuICAgICAgdW5pdE1TID0gb3B0aW9ucy51bml0TWVhc3VyZXNbdW5pdE5hbWVdXG5cbiAgICAgIC8vIFdoYXQncyB0aGUgbnVtYmVyIG9mIGZ1bGwgdW5pdHMgd2UgY2FuIGZpdD9cbiAgICAgIGlmIChpICsgMSA9PT0gbGVuKSB7XG4gICAgICAgIHVuaXRDb3VudCA9IG1zIC8gdW5pdE1TXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1bml0Q291bnQgPSBNYXRoLmZsb29yKG1zIC8gdW5pdE1TKVxuICAgICAgfVxuXG4gICAgICAvLyBBZGQgdGhlIHN0cmluZy5cbiAgICAgIHBpZWNlcy5wdXNoKHtcbiAgICAgICAgdW5pdENvdW50OiB1bml0Q291bnQsXG4gICAgICAgIHVuaXROYW1lOiB1bml0TmFtZVxuICAgICAgfSlcblxuICAgICAgLy8gUmVtb3ZlIHdoYXQgd2UganVzdCBmaWd1cmVkIG91dC5cbiAgICAgIG1zIC09IHVuaXRDb3VudCAqIHVuaXRNU1xuICAgIH1cblxuICAgIHZhciBmaXJzdE9jY3VwaWVkVW5pdEluZGV4ID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBwaWVjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwaWVjZXNbaV0udW5pdENvdW50KSB7XG4gICAgICAgIGZpcnN0T2NjdXBpZWRVbml0SW5kZXggPSBpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMucm91bmQpIHtcbiAgICAgIHZhciByYXRpb1RvTGFyZ2VyVW5pdCwgcHJldmlvdXNQaWVjZVxuICAgICAgZm9yIChpID0gcGllY2VzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHBpZWNlID0gcGllY2VzW2ldXG4gICAgICAgIHBpZWNlLnVuaXRDb3VudCA9IE1hdGgucm91bmQocGllY2UudW5pdENvdW50KVxuXG4gICAgICAgIGlmIChpID09PSAwKSB7IGJyZWFrIH1cblxuICAgICAgICBwcmV2aW91c1BpZWNlID0gcGllY2VzW2kgLSAxXVxuXG4gICAgICAgIHJhdGlvVG9MYXJnZXJVbml0ID0gb3B0aW9ucy51bml0TWVhc3VyZXNbcHJldmlvdXNQaWVjZS51bml0TmFtZV0gLyBvcHRpb25zLnVuaXRNZWFzdXJlc1twaWVjZS51bml0TmFtZV1cbiAgICAgICAgaWYgKChwaWVjZS51bml0Q291bnQgJSByYXRpb1RvTGFyZ2VyVW5pdCkgPT09IDAgfHwgKG9wdGlvbnMubGFyZ2VzdCAmJiAoKG9wdGlvbnMubGFyZ2VzdCAtIDEpIDwgKGkgLSBmaXJzdE9jY3VwaWVkVW5pdEluZGV4KSkpKSB7XG4gICAgICAgICAgcHJldmlvdXNQaWVjZS51bml0Q291bnQgKz0gcGllY2UudW5pdENvdW50IC8gcmF0aW9Ub0xhcmdlclVuaXRcbiAgICAgICAgICBwaWVjZS51bml0Q291bnQgPSAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0gW11cbiAgICBmb3IgKGkgPSAwLCBwaWVjZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHBpZWNlID0gcGllY2VzW2ldXG4gICAgICBpZiAocGllY2UudW5pdENvdW50KSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHJlbmRlcihwaWVjZS51bml0Q291bnQsIHBpZWNlLnVuaXROYW1lLCBkaWN0aW9uYXJ5LCBvcHRpb25zKSlcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IG9wdGlvbnMubGFyZ2VzdCkgeyBicmVhayB9XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdC5sZW5ndGgpIHtcbiAgICAgIGlmICghb3B0aW9ucy5jb25qdW5jdGlvbiB8fCByZXN1bHQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQuam9pbihvcHRpb25zLmRlbGltaXRlcilcbiAgICAgIH0gZWxzZSBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICByZXR1cm4gcmVzdWx0LmpvaW4ob3B0aW9ucy5jb25qdW5jdGlvbilcbiAgICAgIH0gZWxzZSBpZiAocmVzdWx0Lmxlbmd0aCA+IDIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5zbGljZSgwLCAtMSkuam9pbihvcHRpb25zLmRlbGltaXRlcikgKyAob3B0aW9ucy5zZXJpYWxDb21tYSA/ICcsJyA6ICcnKSArIG9wdGlvbnMuY29uanVuY3Rpb24gKyByZXN1bHQuc2xpY2UoLTEpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZW5kZXIoMCwgb3B0aW9ucy51bml0c1tvcHRpb25zLnVuaXRzLmxlbmd0aCAtIDFdLCBkaWN0aW9uYXJ5LCBvcHRpb25zKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbmRlciAoY291bnQsIHR5cGUsIGRpY3Rpb25hcnksIG9wdGlvbnMpIHtcbiAgICB2YXIgZGVjaW1hbFxuICAgIGlmIChvcHRpb25zLmRlY2ltYWwgPT09IHZvaWQgMCkge1xuICAgICAgZGVjaW1hbCA9IGRpY3Rpb25hcnkuZGVjaW1hbFxuICAgIH0gZWxzZSB7XG4gICAgICBkZWNpbWFsID0gb3B0aW9ucy5kZWNpbWFsXG4gICAgfVxuXG4gICAgdmFyIGNvdW50U3RyID0gY291bnQudG9TdHJpbmcoKS5yZXBsYWNlKCcuJywgZGVjaW1hbClcblxuICAgIHZhciBkaWN0aW9uYXJ5VmFsdWUgPSBkaWN0aW9uYXJ5W3R5cGVdXG4gICAgdmFyIHdvcmRcbiAgICBpZiAodHlwZW9mIGRpY3Rpb25hcnlWYWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgd29yZCA9IGRpY3Rpb25hcnlWYWx1ZShjb3VudClcbiAgICB9IGVsc2Uge1xuICAgICAgd29yZCA9IGRpY3Rpb25hcnlWYWx1ZVxuICAgIH1cblxuICAgIHJldHVybiBjb3VudFN0ciArIG9wdGlvbnMuc3BhY2VyICsgd29yZFxuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kIChkZXN0aW5hdGlvbikge1xuICAgIHZhciBzb3VyY2VcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgc291cmNlID0gYXJndW1lbnRzW2ldXG4gICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgZGVzdGluYXRpb25bcHJvcF0gPSBzb3VyY2VbcHJvcF1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVzdGluYXRpb25cbiAgfVxuXG4gIC8vIEludGVybmFsIGhlbHBlciBmdW5jdGlvbiBmb3IgQ3plY2ggbGFuZ3VhZ2UuXG4gIGZ1bmN0aW9uIGdldEN6ZWNoRm9ybSAoYykge1xuICAgIGlmIChjID09PSAxKSB7XG4gICAgICByZXR1cm4gMFxuICAgIH0gZWxzZSBpZiAoTWF0aC5mbG9vcihjKSAhPT0gYykge1xuICAgICAgcmV0dXJuIDFcbiAgICB9IGVsc2UgaWYgKGMgJSAxMCA+PSAyICYmIGMgJSAxMCA8PSA0ICYmIGMgJSAxMDAgPCAxMCkge1xuICAgICAgcmV0dXJuIDJcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDNcbiAgICB9XG4gIH1cblxuICAvLyBJbnRlcm5hbCBoZWxwZXIgZnVuY3Rpb24gZm9yIFBvbGlzaCBsYW5ndWFnZS5cbiAgZnVuY3Rpb24gZ2V0UG9saXNoRm9ybSAoYykge1xuICAgIGlmIChjID09PSAxKSB7XG4gICAgICByZXR1cm4gMFxuICAgIH0gZWxzZSBpZiAoTWF0aC5mbG9vcihjKSAhPT0gYykge1xuICAgICAgcmV0dXJuIDFcbiAgICB9IGVsc2UgaWYgKGMgJSAxMCA+PSAyICYmIGMgJSAxMCA8PSA0ICYmICEoYyAlIDEwMCA+IDEwICYmIGMgJSAxMDAgPCAyMCkpIHtcbiAgICAgIHJldHVybiAyXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAzXG4gICAgfVxuICB9XG5cbiAgLy8gSW50ZXJuYWwgaGVscGVyIGZ1bmN0aW9uIGZvciBSdXNzaWFuIGFuZCBVa3JhbmlhbiBsYW5ndWFnZXMuXG4gIGZ1bmN0aW9uIGdldFNsYXZpY0Zvcm0gKGMpIHtcbiAgICBpZiAoTWF0aC5mbG9vcihjKSAhPT0gYykge1xuICAgICAgcmV0dXJuIDJcbiAgICB9IGVsc2UgaWYgKChjICUgMTAwID49IDUgJiYgYyAlIDEwMCA8PSAyMCkgfHwgKGMgJSAxMCA+PSA1ICYmIGMgJSAxMCA8PSA5KSB8fCBjICUgMTAgPT09IDApIHtcbiAgICAgIHJldHVybiAwXG4gICAgfSBlbHNlIGlmIChjICUgMTAgPT09IDEpIHtcbiAgICAgIHJldHVybiAxXG4gICAgfSBlbHNlIGlmIChjID4gMSkge1xuICAgICAgcmV0dXJuIDJcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDBcbiAgICB9XG4gIH1cblxuICAvLyBJbnRlcm5hbCBoZWxwZXIgZnVuY3Rpb24gZm9yIExpdGh1YW5pYW4gbGFuZ3VhZ2UuXG4gIGZ1bmN0aW9uIGdldExpdGh1YW5pYW5Gb3JtIChjKSB7XG4gICAgaWYgKGMgPT09IDEgfHwgKGMgJSAxMCA9PT0gMSAmJiBjICUgMTAwID4gMjApKSB7XG4gICAgICByZXR1cm4gMFxuICAgIH0gZWxzZSBpZiAoTWF0aC5mbG9vcihjKSAhPT0gYyB8fCAoYyAlIDEwID49IDIgJiYgYyAlIDEwMCA+IDIwKSB8fCAoYyAlIDEwID49IDIgJiYgYyAlIDEwMCA8IDEwKSkge1xuICAgICAgcmV0dXJuIDFcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDJcbiAgICB9XG4gIH1cblxuICBodW1hbml6ZUR1cmF0aW9uLmdldFN1cHBvcnRlZExhbmd1YWdlcyA9IGZ1bmN0aW9uIGdldFN1cHBvcnRlZExhbmd1YWdlcyAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdXG4gICAgZm9yICh2YXIgbGFuZ3VhZ2UgaW4gbGFuZ3VhZ2VzKSB7XG4gICAgICBpZiAobGFuZ3VhZ2VzLmhhc093blByb3BlcnR5KGxhbmd1YWdlKSkge1xuICAgICAgICByZXN1bHQucHVzaChsYW5ndWFnZSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgaHVtYW5pemVEdXJhdGlvbi5odW1hbml6ZXIgPSBodW1hbml6ZXJcblxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBodW1hbml6ZUR1cmF0aW9uXG4gICAgfSlcbiAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gaHVtYW5pemVEdXJhdGlvblxuICB9IGVsc2Uge1xuICAgIHRoaXMuaHVtYW5pemVEdXJhdGlvbiA9IGh1bWFuaXplRHVyYXRpb25cbiAgfVxufSkoKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgc2VtaVxuIiwidmFyIHNwbGl0ID0gcmVxdWlyZSgnYnJvd3Nlci1zcGxpdCcpXG52YXIgQ2xhc3NMaXN0ID0gcmVxdWlyZSgnY2xhc3MtbGlzdCcpXG5cbnZhciB3ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyByZXF1aXJlKCdodG1sLWVsZW1lbnQnKSA6IHdpbmRvd1xudmFyIGRvY3VtZW50ID0gdy5kb2N1bWVudFxudmFyIFRleHQgPSB3LlRleHRcblxuZnVuY3Rpb24gY29udGV4dCAoKSB7XG5cbiAgdmFyIGNsZWFudXBGdW5jcyA9IFtdXG5cbiAgZnVuY3Rpb24gaCgpIHtcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSwgZSA9IG51bGxcbiAgICBmdW5jdGlvbiBpdGVtIChsKSB7XG4gICAgICB2YXIgclxuICAgICAgZnVuY3Rpb24gcGFyc2VDbGFzcyAoc3RyaW5nKSB7XG4gICAgICAgIC8vIE91ciBtaW5pbWFsIHBhcnNlciBkb2VzbuKAmXQgdW5kZXJzdGFuZCBlc2NhcGluZyBDU1Mgc3BlY2lhbFxuICAgICAgICAvLyBjaGFyYWN0ZXJzIGxpa2UgYCNgLiBEb27igJl0IHVzZSB0aGVtLiBNb3JlIHJlYWRpbmc6XG4gICAgICAgIC8vIGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9jc3MtZXNjYXBlcyAuXG5cbiAgICAgICAgdmFyIG0gPSBzcGxpdChzdHJpbmcsIC8oW1xcLiNdP1teXFxzIy5dKykvKVxuICAgICAgICBpZigvXlxcLnwjLy50ZXN0KG1bMV0pKVxuICAgICAgICAgIGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICBmb3JFYWNoKG0sIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgdmFyIHMgPSB2LnN1YnN0cmluZygxLHYubGVuZ3RoKVxuICAgICAgICAgIGlmKCF2KSByZXR1cm5cbiAgICAgICAgICBpZighZSlcbiAgICAgICAgICAgIGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHYpXG4gICAgICAgICAgZWxzZSBpZiAodlswXSA9PT0gJy4nKVxuICAgICAgICAgICAgQ2xhc3NMaXN0KGUpLmFkZChzKVxuICAgICAgICAgIGVsc2UgaWYgKHZbMF0gPT09ICcjJylcbiAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKCdpZCcsIHMpXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmKGwgPT0gbnVsbClcbiAgICAgICAgO1xuICAgICAgZWxzZSBpZignc3RyaW5nJyA9PT0gdHlwZW9mIGwpIHtcbiAgICAgICAgaWYoIWUpXG4gICAgICAgICAgcGFyc2VDbGFzcyhsKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgZS5hcHBlbmRDaGlsZChyID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobCkpXG4gICAgICB9XG4gICAgICBlbHNlIGlmKCdudW1iZXInID09PSB0eXBlb2YgbFxuICAgICAgICB8fCAnYm9vbGVhbicgPT09IHR5cGVvZiBsXG4gICAgICAgIHx8IGwgaW5zdGFuY2VvZiBEYXRlXG4gICAgICAgIHx8IGwgaW5zdGFuY2VvZiBSZWdFeHAgKSB7XG4gICAgICAgICAgZS5hcHBlbmRDaGlsZChyID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobC50b1N0cmluZygpKSlcbiAgICAgIH1cbiAgICAgIC8vdGhlcmUgbWlnaHQgYmUgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzLi4uXG4gICAgICBlbHNlIGlmIChpc0FycmF5KGwpKVxuICAgICAgICBmb3JFYWNoKGwsIGl0ZW0pXG4gICAgICBlbHNlIGlmKGlzTm9kZShsKSlcbiAgICAgICAgZS5hcHBlbmRDaGlsZChyID0gbClcbiAgICAgIGVsc2UgaWYobCBpbnN0YW5jZW9mIFRleHQpXG4gICAgICAgIGUuYXBwZW5kQ2hpbGQociA9IGwpXG4gICAgICBlbHNlIGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIGwpIHtcbiAgICAgICAgZm9yICh2YXIgayBpbiBsKSB7XG4gICAgICAgICAgaWYoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGxba10pIHtcbiAgICAgICAgICAgIGlmKC9eb25cXHcrLy50ZXN0KGspKSB7XG4gICAgICAgICAgICAgIChmdW5jdGlvbiAoaywgbCkgeyAvLyBjYXB0dXJlIGssIGwgaW4gdGhlIGNsb3N1cmVcbiAgICAgICAgICAgICAgICBpZiAoZS5hZGRFdmVudExpc3RlbmVyKXtcbiAgICAgICAgICAgICAgICAgIGUuYWRkRXZlbnRMaXN0ZW5lcihrLnN1YnN0cmluZygyKSwgbFtrXSwgZmFsc2UpXG4gICAgICAgICAgICAgICAgICBjbGVhbnVwRnVuY3MucHVzaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBlLnJlbW92ZUV2ZW50TGlzdGVuZXIoay5zdWJzdHJpbmcoMiksIGxba10sIGZhbHNlKVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgIGUuYXR0YWNoRXZlbnQoaywgbFtrXSlcbiAgICAgICAgICAgICAgICAgIGNsZWFudXBGdW5jcy5wdXNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGUuZGV0YWNoRXZlbnQoaywgbFtrXSlcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KShrLCBsKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gb2JzZXJ2YWJsZVxuICAgICAgICAgICAgICBlW2tdID0gbFtrXSgpXG4gICAgICAgICAgICAgIGNsZWFudXBGdW5jcy5wdXNoKGxba10oZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICBlW2tdID0gdlxuICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZihrID09PSAnc3R5bGUnKSB7XG4gICAgICAgICAgICBpZignc3RyaW5nJyA9PT0gdHlwZW9mIGxba10pIHtcbiAgICAgICAgICAgICAgZS5zdHlsZS5jc3NUZXh0ID0gbFtrXVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgIGZvciAodmFyIHMgaW4gbFtrXSkgKGZ1bmN0aW9uKHMsIHYpIHtcbiAgICAgICAgICAgICAgICBpZignZnVuY3Rpb24nID09PSB0eXBlb2Ygdikge1xuICAgICAgICAgICAgICAgICAgLy8gb2JzZXJ2YWJsZVxuICAgICAgICAgICAgICAgICAgZS5zdHlsZS5zZXRQcm9wZXJ0eShzLCB2KCkpXG4gICAgICAgICAgICAgICAgICBjbGVhbnVwRnVuY3MucHVzaCh2KGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5zdHlsZS5zZXRQcm9wZXJ0eShzLCB2YWwpXG4gICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IGxba11bc10ubWF0Y2goLyguKilcXFcrIWltcG9ydGFudFxcVyokLyk7XG4gICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5zdHlsZS5zZXRQcm9wZXJ0eShzLCBtYXRjaFsxXSwgJ2ltcG9ydGFudCcpXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlLnN0eWxlLnNldFByb3BlcnR5KHMsIGxba11bc10pXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pKHMsIGxba11bc10pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmKGsgPT09ICdhdHRycycpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHYgaW4gbFtrXSkge1xuICAgICAgICAgICAgICBlLnNldEF0dHJpYnV0ZSh2LCBsW2tdW3ZdKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChrLnN1YnN0cigwLCA1KSA9PT0gXCJkYXRhLVwiKSB7XG4gICAgICAgICAgICBlLnNldEF0dHJpYnV0ZShrLCBsW2tdKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlW2tdID0gbFtrXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgbCkge1xuICAgICAgICAvL2Fzc3VtZSBpdCdzIGFuIG9ic2VydmFibGUhXG4gICAgICAgIHZhciB2ID0gbCgpXG4gICAgICAgIGUuYXBwZW5kQ2hpbGQociA9IGlzTm9kZSh2KSA/IHYgOiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2KSlcblxuICAgICAgICBjbGVhbnVwRnVuY3MucHVzaChsKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgaWYoaXNOb2RlKHYpICYmIHIucGFyZW50RWxlbWVudClcbiAgICAgICAgICAgIHIucGFyZW50RWxlbWVudC5yZXBsYWNlQ2hpbGQodiwgciksIHIgPSB2XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgci50ZXh0Q29udGVudCA9IHZcbiAgICAgICAgfSkpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiByXG4gICAgfVxuICAgIHdoaWxlKGFyZ3MubGVuZ3RoKVxuICAgICAgaXRlbShhcmdzLnNoaWZ0KCkpXG5cbiAgICByZXR1cm4gZVxuICB9XG5cbiAgaC5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xlYW51cEZ1bmNzLmxlbmd0aDsgaSsrKXtcbiAgICAgIGNsZWFudXBGdW5jc1tpXSgpXG4gICAgfVxuICAgIGNsZWFudXBGdW5jcy5sZW5ndGggPSAwXG4gIH1cblxuICByZXR1cm4gaFxufVxuXG52YXIgaCA9IG1vZHVsZS5leHBvcnRzID0gY29udGV4dCgpXG5oLmNvbnRleHQgPSBjb250ZXh0XG5cbmZ1bmN0aW9uIGlzTm9kZSAoZWwpIHtcbiAgcmV0dXJuIGVsICYmIGVsLm5vZGVOYW1lICYmIGVsLm5vZGVUeXBlXG59XG5cbmZ1bmN0aW9uIGZvckVhY2ggKGFyciwgZm4pIHtcbiAgaWYgKGFyci5mb3JFYWNoKSByZXR1cm4gYXJyLmZvckVhY2goZm4pXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSBmbihhcnJbaV0sIGkpXG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkgKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJ1xufVxuXG5cbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiXG52YXIgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyLCBvYmope1xuICBpZiAoaW5kZXhPZikgcmV0dXJuIGFyci5pbmRleE9mKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGFycltpXSA9PT0gb2JqKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59OyIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuIiwidmFyIGNvbnRhaW5lcnMgPSBbXTsgLy8gd2lsbCBzdG9yZSBjb250YWluZXIgSFRNTEVsZW1lbnQgcmVmZXJlbmNlc1xudmFyIHN0eWxlRWxlbWVudHMgPSBbXTsgLy8gd2lsbCBzdG9yZSB7cHJlcGVuZDogSFRNTEVsZW1lbnQsIGFwcGVuZDogSFRNTEVsZW1lbnR9XG5cbnZhciB1c2FnZSA9ICdpbnNlcnQtY3NzOiBZb3UgbmVlZCB0byBwcm92aWRlIGEgQ1NTIHN0cmluZy4gVXNhZ2U6IGluc2VydENzcyhjc3NTdHJpbmdbLCBvcHRpb25zXSkuJztcblxuZnVuY3Rpb24gaW5zZXJ0Q3NzKGNzcywgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKGNzcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcih1c2FnZSk7XG4gICAgfVxuXG4gICAgdmFyIHBvc2l0aW9uID0gb3B0aW9ucy5wcmVwZW5kID09PSB0cnVlID8gJ3ByZXBlbmQnIDogJ2FwcGVuZCc7XG4gICAgdmFyIGNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNvbnRhaW5lciA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKTtcbiAgICB2YXIgY29udGFpbmVySWQgPSBjb250YWluZXJzLmluZGV4T2YoY29udGFpbmVyKTtcblxuICAgIC8vIGZpcnN0IHRpbWUgd2Ugc2VlIHRoaXMgY29udGFpbmVyLCBjcmVhdGUgdGhlIG5lY2Vzc2FyeSBlbnRyaWVzXG4gICAgaWYgKGNvbnRhaW5lcklkID09PSAtMSkge1xuICAgICAgICBjb250YWluZXJJZCA9IGNvbnRhaW5lcnMucHVzaChjb250YWluZXIpIC0gMTtcbiAgICAgICAgc3R5bGVFbGVtZW50c1tjb250YWluZXJJZF0gPSB7fTtcbiAgICB9XG5cbiAgICAvLyB0cnkgdG8gZ2V0IHRoZSBjb3JyZXBvbmRpbmcgY29udGFpbmVyICsgcG9zaXRpb24gc3R5bGVFbGVtZW50LCBjcmVhdGUgaXQgb3RoZXJ3aXNlXG4gICAgdmFyIHN0eWxlRWxlbWVudDtcblxuICAgIGlmIChzdHlsZUVsZW1lbnRzW2NvbnRhaW5lcklkXSAhPT0gdW5kZWZpbmVkICYmIHN0eWxlRWxlbWVudHNbY29udGFpbmVySWRdW3Bvc2l0aW9uXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN0eWxlRWxlbWVudCA9IHN0eWxlRWxlbWVudHNbY29udGFpbmVySWRdW3Bvc2l0aW9uXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdHlsZUVsZW1lbnQgPSBzdHlsZUVsZW1lbnRzW2NvbnRhaW5lcklkXVtwb3NpdGlvbl0gPSBjcmVhdGVTdHlsZUVsZW1lbnQoKTtcblxuICAgICAgICBpZiAocG9zaXRpb24gPT09ICdwcmVwZW5kJykge1xuICAgICAgICAgICAgY29udGFpbmVyLmluc2VydEJlZm9yZShzdHlsZUVsZW1lbnQsIGNvbnRhaW5lci5jaGlsZE5vZGVzWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gc3RyaXAgcG90ZW50aWFsIFVURi04IEJPTSBpZiBjc3Mgd2FzIHJlYWQgZnJvbSBhIGZpbGVcbiAgICBpZiAoY3NzLmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikgeyBjc3MgPSBjc3Muc3Vic3RyKDEsIGNzcy5sZW5ndGgpOyB9XG5cbiAgICAvLyBhY3R1YWxseSBhZGQgdGhlIHN0eWxlc2hlZXRcbiAgICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICAgICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCArPSBjc3NcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdHlsZUVsZW1lbnQudGV4dENvbnRlbnQgKz0gY3NzO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZUVsZW1lbnQ7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQoKSB7XG4gICAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2NzcycpO1xuICAgIHJldHVybiBzdHlsZUVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0Q3NzO1xubW9kdWxlLmV4cG9ydHMuaW5zZXJ0Q3NzID0gaW5zZXJ0Q3NzO1xuIiwiLyohIG5wbS5pbS9pbnRlcnZhbG9tZXRlciAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBpbnRlcnZhbG9tZXRlcihjYiwgcmVxdWVzdCwgY2FuY2VsLCByZXF1ZXN0UGFyYW1ldGVyKSB7XG5cdHZhciByZXF1ZXN0SWQ7XG5cdHZhciBwcmV2aW91c0xvb3BUaW1lO1xuXHRmdW5jdGlvbiBsb29wKG5vdykge1xuXHRcdC8vIG11c3QgYmUgcmVxdWVzdGVkIGJlZm9yZSBjYigpIGJlY2F1c2UgdGhhdCBtaWdodCBjYWxsIC5zdG9wKClcblx0XHRyZXF1ZXN0SWQgPSByZXF1ZXN0KGxvb3AsIHJlcXVlc3RQYXJhbWV0ZXIpO1xuXG5cdFx0Ly8gY2FsbGVkIHdpdGggXCJtcyBzaW5jZSBsYXN0IGNhbGxcIi4gMCBvbiBzdGFydCgpXG5cdFx0Y2Iobm93IC0gKHByZXZpb3VzTG9vcFRpbWUgfHwgbm93KSk7XG5cblx0XHRwcmV2aW91c0xvb3BUaW1lID0gbm93O1xuXHR9XG5cdHJldHVybiB7XG5cdFx0c3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KCkge1xuXHRcdFx0aWYgKCFyZXF1ZXN0SWQpIHsgLy8gcHJldmVudCBkb3VibGUgc3RhcnRzXG5cdFx0XHRcdGxvb3AoMCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuXHRcdFx0Y2FuY2VsKHJlcXVlc3RJZCk7XG5cdFx0XHRyZXF1ZXN0SWQgPSBudWxsO1xuXHRcdFx0cHJldmlvdXNMb29wVGltZSA9IDA7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBmcmFtZUludGVydmFsb21ldGVyKGNiKSB7XG5cdHJldHVybiBpbnRlcnZhbG9tZXRlcihjYiwgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLCBjYW5jZWxBbmltYXRpb25GcmFtZSk7XG59XG5cbmZ1bmN0aW9uIHRpbWVySW50ZXJ2YWxvbWV0ZXIoY2IsIGRlbGF5KSB7XG5cdHJldHVybiBpbnRlcnZhbG9tZXRlcihjYiwgc2V0VGltZW91dCwgY2xlYXJUaW1lb3V0LCBkZWxheSk7XG59XG5cbmV4cG9ydHMuaW50ZXJ2YWxvbWV0ZXIgPSBpbnRlcnZhbG9tZXRlcjtcbmV4cG9ydHMuZnJhbWVJbnRlcnZhbG9tZXRlciA9IGZyYW1lSW50ZXJ2YWxvbWV0ZXI7XG5leHBvcnRzLnRpbWVySW50ZXJ2YWxvbWV0ZXIgPSB0aW1lckludGVydmFsb21ldGVyOyIsIi8qISBucG0uaW0vaXBob25lLWlubGluZS12aWRlbyAyLjIuMiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW50ZXJ2YWxvbWV0ZXIgPSByZXF1aXJlKCdpbnRlcnZhbG9tZXRlcicpO1xuXG5mdW5jdGlvbiBwcmV2ZW50RXZlbnQoZWxlbWVudCwgZXZlbnROYW1lLCB0ZXN0KSB7XG5cdGZ1bmN0aW9uIGhhbmRsZXIoZSkge1xuXHRcdGlmICghdGVzdCB8fCB0ZXN0KGVsZW1lbnQsIGV2ZW50TmFtZSkpIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHQvLyAvLyBjb25zb2xlLmxvZyhldmVudE5hbWUsICdwcmV2ZW50ZWQgb24nLCBlbGVtZW50KTtcblx0XHR9XG5cdH1cblx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcik7XG5cblx0Ly8gUmV0dXJuIGhhbmRsZXIgdG8gYWxsb3cgdG8gZGlzYWJsZSB0aGUgcHJldmVudGlvbi4gVXNhZ2U6XG5cdC8vIGNvbnN0IHByZXZlbnRpb25IYW5kbGVyID0gcHJldmVudEV2ZW50KGVsLCAnY2xpY2snKTtcblx0Ly8gZWwucmVtb3ZlRXZlbnRIYW5kbGVyKCdjbGljaycsIHByZXZlbnRpb25IYW5kbGVyKTtcblx0cmV0dXJuIGhhbmRsZXI7XG59XG5cbmZ1bmN0aW9uIHByb3h5UHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eU5hbWUsIHNvdXJjZU9iamVjdCwgY29weUZpcnN0KSB7XG5cdGZ1bmN0aW9uIGdldCgpIHtcblx0XHRyZXR1cm4gc291cmNlT2JqZWN0W3Byb3BlcnR5TmFtZV07XG5cdH1cblx0ZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG5cdFx0c291cmNlT2JqZWN0W3Byb3BlcnR5TmFtZV0gPSB2YWx1ZTtcblx0fVxuXG5cdGlmIChjb3B5Rmlyc3QpIHtcblx0XHRzZXQob2JqZWN0W3Byb3BlcnR5TmFtZV0pO1xuXHR9XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHlOYW1lLCB7Z2V0OiBnZXQsIHNldDogc2V0fSk7XG59XG5cbmZ1bmN0aW9uIHByb3h5RXZlbnQob2JqZWN0LCBldmVudE5hbWUsIHNvdXJjZU9iamVjdCkge1xuXHRzb3VyY2VPYmplY3QuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9iamVjdC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChldmVudE5hbWUpKTsgfSk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnRBc3luYyhlbGVtZW50LCB0eXBlKSB7XG5cdFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdGVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQodHlwZSkpO1xuXHR9KTtcbn1cblxudmFyIGlPUzhvcjkgPSB0eXBlb2YgZG9jdW1lbnQgPT09ICdvYmplY3QnICYmICdvYmplY3QtZml0JyBpbiBkb2N1bWVudC5oZWFkLnN0eWxlICYmICFtYXRjaE1lZGlhKCcoLXdlYmtpdC12aWRlby1wbGF5YWJsZS1pbmxpbmUpJykubWF0Y2hlcztcblxudmFyIElJViA9ICdiZnJlZC1pdDppcGhvbmUtaW5saW5lLXZpZGVvJztcbnZhciBJSVZFdmVudCA9ICdiZnJlZC1pdDppcGhvbmUtaW5saW5lLXZpZGVvOmV2ZW50JztcbnZhciBJSVZQbGF5ID0gJ2JmcmVkLWl0OmlwaG9uZS1pbmxpbmUtdmlkZW86bmF0aXZlcGxheSc7XG52YXIgSUlWUGF1c2UgPSAnYmZyZWQtaXQ6aXBob25lLWlubGluZS12aWRlbzpuYXRpdmVwYXVzZSc7XG5cbi8qKlxuICogVVRJTFNcbiAqL1xuXG5mdW5jdGlvbiBnZXRBdWRpb0Zyb21WaWRlbyh2aWRlbykge1xuXHR2YXIgYXVkaW8gPSBuZXcgQXVkaW8oKTtcblx0cHJveHlFdmVudCh2aWRlbywgJ3BsYXknLCBhdWRpbyk7XG5cdHByb3h5RXZlbnQodmlkZW8sICdwbGF5aW5nJywgYXVkaW8pO1xuXHRwcm94eUV2ZW50KHZpZGVvLCAncGF1c2UnLCBhdWRpbyk7XG5cdGF1ZGlvLmNyb3NzT3JpZ2luID0gdmlkZW8uY3Jvc3NPcmlnaW47XG5cblx0Ly8gJ2RhdGE6JyBjYXVzZXMgYXVkaW8ubmV0d29ya1N0YXRlID4gMFxuXHQvLyB3aGljaCB0aGVuIGFsbG93cyB0byBrZWVwIDxhdWRpbz4gaW4gYSByZXN1bWFibGUgcGxheWluZyBzdGF0ZVxuXHQvLyBpLmUuIG9uY2UgeW91IHNldCBhIHJlYWwgc3JjIGl0IHdpbGwga2VlcCBwbGF5aW5nIGlmIGl0IHdhcyBpZiAucGxheSgpIHdhcyBjYWxsZWRcblx0YXVkaW8uc3JjID0gdmlkZW8uc3JjIHx8IHZpZGVvLmN1cnJlbnRTcmMgfHwgJ2RhdGE6JztcblxuXHQvLyAvLyBpZiAoYXVkaW8uc3JjID09PSAnZGF0YTonKSB7XG5cdC8vICAgVE9ETzogd2FpdCBmb3IgdmlkZW8gdG8gYmUgc2VsZWN0ZWRcblx0Ly8gLy8gfVxuXHRyZXR1cm4gYXVkaW87XG59XG5cbnZhciBsYXN0UmVxdWVzdHMgPSBbXTtcbnZhciByZXF1ZXN0SW5kZXggPSAwO1xudmFyIGxhc3RUaW1ldXBkYXRlRXZlbnQ7XG5cbmZ1bmN0aW9uIHNldFRpbWUodmlkZW8sIHRpbWUsIHJlbWVtYmVyT25seSkge1xuXHQvLyBBbGxvdyBvbmUgdGltZXVwZGF0ZSBldmVudCBldmVyeSAyMDArIG1zXG5cdGlmICgobGFzdFRpbWV1cGRhdGVFdmVudCB8fCAwKSArIDIwMCA8IERhdGUubm93KCkpIHtcblx0XHR2aWRlb1tJSVZFdmVudF0gPSB0cnVlO1xuXHRcdGxhc3RUaW1ldXBkYXRlRXZlbnQgPSBEYXRlLm5vdygpO1xuXHR9XG5cdGlmICghcmVtZW1iZXJPbmx5KSB7XG5cdFx0dmlkZW8uY3VycmVudFRpbWUgPSB0aW1lO1xuXHR9XG5cdGxhc3RSZXF1ZXN0c1srK3JlcXVlc3RJbmRleCAlIDNdID0gdGltZSAqIDEwMCB8IDAgLyAxMDA7XG59XG5cbmZ1bmN0aW9uIGlzUGxheWVyRW5kZWQocGxheWVyKSB7XG5cdHJldHVybiBwbGF5ZXIuZHJpdmVyLmN1cnJlbnRUaW1lID49IHBsYXllci52aWRlby5kdXJhdGlvbjtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKHRpbWVEaWZmKSB7XG5cdHZhciBwbGF5ZXIgPSB0aGlzO1xuXHQvLyAvLyBjb25zb2xlLmxvZygndXBkYXRlJywgcGxheWVyLnZpZGVvLnJlYWR5U3RhdGUsIHBsYXllci52aWRlby5uZXR3b3JrU3RhdGUsIHBsYXllci5kcml2ZXIucmVhZHlTdGF0ZSwgcGxheWVyLmRyaXZlci5uZXR3b3JrU3RhdGUsIHBsYXllci5kcml2ZXIucGF1c2VkKTtcblx0aWYgKHBsYXllci52aWRlby5yZWFkeVN0YXRlID49IHBsYXllci52aWRlby5IQVZFX0ZVVFVSRV9EQVRBKSB7XG5cdFx0aWYgKCFwbGF5ZXIuaGFzQXVkaW8pIHtcblx0XHRcdHBsYXllci5kcml2ZXIuY3VycmVudFRpbWUgPSBwbGF5ZXIudmlkZW8uY3VycmVudFRpbWUgKyAoKHRpbWVEaWZmICogcGxheWVyLnZpZGVvLnBsYXliYWNrUmF0ZSkgLyAxMDAwKTtcblx0XHRcdGlmIChwbGF5ZXIudmlkZW8ubG9vcCAmJiBpc1BsYXllckVuZGVkKHBsYXllcikpIHtcblx0XHRcdFx0cGxheWVyLmRyaXZlci5jdXJyZW50VGltZSA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHNldFRpbWUocGxheWVyLnZpZGVvLCBwbGF5ZXIuZHJpdmVyLmN1cnJlbnRUaW1lKTtcblx0fSBlbHNlIGlmIChwbGF5ZXIudmlkZW8ubmV0d29ya1N0YXRlID09PSBwbGF5ZXIudmlkZW8uTkVUV09SS19JRExFICYmIHBsYXllci52aWRlby5idWZmZXJlZC5sZW5ndGggPT09IDApIHtcblx0XHQvLyBUaGlzIHNob3VsZCBoYXBwZW4gd2hlbiB0aGUgc291cmNlIGlzIGF2YWlsYWJsZSBidXQ6XG5cdFx0Ly8gLSBpdCdzIHBvdGVudGlhbGx5IHBsYXlpbmcgKC5wYXVzZWQgPT09IGZhbHNlKVxuXHRcdC8vIC0gaXQncyBub3QgcmVhZHkgdG8gcGxheVxuXHRcdC8vIC0gaXQncyBub3QgbG9hZGluZ1xuXHRcdC8vIElmIGl0IGhhc0F1ZGlvLCB0aGF0IHdpbGwgYmUgbG9hZGVkIGluIHRoZSAnZW1wdGllZCcgaGFuZGxlciBiZWxvd1xuXHRcdHBsYXllci52aWRlby5sb2FkKCk7XG5cdFx0Ly8gLy8gY29uc29sZS5sb2coJ1dpbGwgbG9hZCcpO1xuXHR9XG5cblx0Ly8gLy8gY29uc29sZS5hc3NlcnQocGxheWVyLnZpZGVvLmN1cnJlbnRUaW1lID09PSBwbGF5ZXIuZHJpdmVyLmN1cnJlbnRUaW1lLCAnVmlkZW8gbm90IHVwZGF0aW5nIScpO1xuXG5cdGlmIChwbGF5ZXIudmlkZW8uZW5kZWQpIHtcblx0XHRkZWxldGUgcGxheWVyLnZpZGVvW0lJVkV2ZW50XTsgLy8gQWxsb3cgdGltZXVwZGF0ZSBldmVudFxuXHRcdHBsYXllci52aWRlby5wYXVzZSh0cnVlKTtcblx0fVxufVxuXG4vKipcbiAqIE1FVEhPRFNcbiAqL1xuXG5mdW5jdGlvbiBwbGF5KCkge1xuXHQvLyAvLyBjb25zb2xlLmxvZygncGxheScpO1xuXHR2YXIgdmlkZW8gPSB0aGlzO1xuXHR2YXIgcGxheWVyID0gdmlkZW9bSUlWXTtcblxuXHQvLyBJZiBpdCdzIGZ1bGxzY3JlZW4sIHVzZSB0aGUgbmF0aXZlIHBsYXllclxuXHRpZiAodmlkZW8ud2Via2l0RGlzcGxheWluZ0Z1bGxzY3JlZW4pIHtcblx0XHR2aWRlb1tJSVZQbGF5XSgpO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmIChwbGF5ZXIuZHJpdmVyLnNyYyAhPT0gJ2RhdGE6JyAmJiBwbGF5ZXIuZHJpdmVyLnNyYyAhPT0gdmlkZW8uc3JjKSB7XG5cdFx0Ly8gLy8gY29uc29sZS5sb2coJ3NyYyBjaGFuZ2VkIG9uIHBsYXknLCB2aWRlby5zcmMpO1xuXHRcdHNldFRpbWUodmlkZW8sIDAsIHRydWUpO1xuXHRcdHBsYXllci5kcml2ZXIuc3JjID0gdmlkZW8uc3JjO1xuXHR9XG5cblx0aWYgKCF2aWRlby5wYXVzZWQpIHtcblx0XHRyZXR1cm47XG5cdH1cblx0cGxheWVyLnBhdXNlZCA9IGZhbHNlO1xuXG5cdGlmICh2aWRlby5idWZmZXJlZC5sZW5ndGggPT09IDApIHtcblx0XHQvLyAubG9hZCgpIGNhdXNlcyB0aGUgZW1wdGllZCBldmVudFxuXHRcdC8vIHRoZSBhbHRlcm5hdGl2ZSBpcyAucGxheSgpKy5wYXVzZSgpIGJ1dCB0aGF0IHRyaWdnZXJzIHBsYXkvcGF1c2UgZXZlbnRzLCBldmVuIHdvcnNlXG5cdFx0Ly8gcG9zc2libHkgdGhlIGFsdGVybmF0aXZlIGlzIHByZXZlbnRpbmcgdGhpcyBldmVudCBvbmx5IG9uY2Vcblx0XHR2aWRlby5sb2FkKCk7XG5cdH1cblxuXHRwbGF5ZXIuZHJpdmVyLnBsYXkoKTtcblx0cGxheWVyLnVwZGF0ZXIuc3RhcnQoKTtcblxuXHRpZiAoIXBsYXllci5oYXNBdWRpbykge1xuXHRcdGRpc3BhdGNoRXZlbnRBc3luYyh2aWRlbywgJ3BsYXknKTtcblx0XHRpZiAocGxheWVyLnZpZGVvLnJlYWR5U3RhdGUgPj0gcGxheWVyLnZpZGVvLkhBVkVfRU5PVUdIX0RBVEEpIHtcblx0XHRcdC8vIC8vIGNvbnNvbGUubG9nKCdvbnBsYXknKTtcblx0XHRcdGRpc3BhdGNoRXZlbnRBc3luYyh2aWRlbywgJ3BsYXlpbmcnKTtcblx0XHR9XG5cdH1cbn1cbmZ1bmN0aW9uIHBhdXNlKGZvcmNlRXZlbnRzKSB7XG5cdC8vIC8vIGNvbnNvbGUubG9nKCdwYXVzZScpO1xuXHR2YXIgdmlkZW8gPSB0aGlzO1xuXHR2YXIgcGxheWVyID0gdmlkZW9bSUlWXTtcblxuXHRwbGF5ZXIuZHJpdmVyLnBhdXNlKCk7XG5cdHBsYXllci51cGRhdGVyLnN0b3AoKTtcblxuXHQvLyBJZiBpdCdzIGZ1bGxzY3JlZW4sIHRoZSBkZXZlbG9wZXIgdGhlIG5hdGl2ZSBwbGF5ZXIucGF1c2UoKVxuXHQvLyBUaGlzIGlzIGF0IHRoZSBlbmQgb2YgcGF1c2UoKSBiZWNhdXNlIGl0IGFsc29cblx0Ly8gbmVlZHMgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIHNpbXVsYXRpb24gaXMgcGF1c2VkXG5cdGlmICh2aWRlby53ZWJraXREaXNwbGF5aW5nRnVsbHNjcmVlbikge1xuXHRcdHZpZGVvW0lJVlBhdXNlXSgpO1xuXHR9XG5cblx0aWYgKHBsYXllci5wYXVzZWQgJiYgIWZvcmNlRXZlbnRzKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0cGxheWVyLnBhdXNlZCA9IHRydWU7XG5cdGlmICghcGxheWVyLmhhc0F1ZGlvKSB7XG5cdFx0ZGlzcGF0Y2hFdmVudEFzeW5jKHZpZGVvLCAncGF1c2UnKTtcblx0fVxuXG5cdC8vIEhhbmRsZSB0aGUgJ2VuZGVkJyBldmVudCBvbmx5IGlmIGl0J3Mgbm90IGZ1bGxzY3JlZW5cblx0aWYgKHZpZGVvLmVuZGVkICYmICF2aWRlby53ZWJraXREaXNwbGF5aW5nRnVsbHNjcmVlbikge1xuXHRcdHZpZGVvW0lJVkV2ZW50XSA9IHRydWU7XG5cdFx0ZGlzcGF0Y2hFdmVudEFzeW5jKHZpZGVvLCAnZW5kZWQnKTtcblx0fVxufVxuXG4vKipcbiAqIFNFVFVQXG4gKi9cblxuZnVuY3Rpb24gYWRkUGxheWVyKHZpZGVvLCBoYXNBdWRpbykge1xuXHR2YXIgcGxheWVyID0ge307XG5cdHZpZGVvW0lJVl0gPSBwbGF5ZXI7XG5cdHBsYXllci5wYXVzZWQgPSB0cnVlOyAvLyBUcmFjayB3aGV0aGVyICdwYXVzZScgZXZlbnRzIGhhdmUgYmVlbiBmaXJlZFxuXHRwbGF5ZXIuaGFzQXVkaW8gPSBoYXNBdWRpbztcblx0cGxheWVyLnZpZGVvID0gdmlkZW87XG5cdHBsYXllci51cGRhdGVyID0gaW50ZXJ2YWxvbWV0ZXIuZnJhbWVJbnRlcnZhbG9tZXRlcih1cGRhdGUuYmluZChwbGF5ZXIpKTtcblxuXHRpZiAoaGFzQXVkaW8pIHtcblx0XHRwbGF5ZXIuZHJpdmVyID0gZ2V0QXVkaW9Gcm9tVmlkZW8odmlkZW8pO1xuXHR9IGVsc2Uge1xuXHRcdHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbnBsYXknLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAoIXZpZGVvLnBhdXNlZCkge1xuXHRcdFx0XHQvLyAvLyBjb25zb2xlLmxvZygnb25jYW5wbGF5Jyk7XG5cdFx0XHRcdGRpc3BhdGNoRXZlbnRBc3luYyh2aWRlbywgJ3BsYXlpbmcnKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRwbGF5ZXIuZHJpdmVyID0ge1xuXHRcdFx0c3JjOiB2aWRlby5zcmMgfHwgdmlkZW8uY3VycmVudFNyYyB8fCAnZGF0YTonLFxuXHRcdFx0bXV0ZWQ6IHRydWUsXG5cdFx0XHRwYXVzZWQ6IHRydWUsXG5cdFx0XHRwYXVzZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRwbGF5ZXIuZHJpdmVyLnBhdXNlZCA9IHRydWU7XG5cdFx0XHR9LFxuXHRcdFx0cGxheTogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRwbGF5ZXIuZHJpdmVyLnBhdXNlZCA9IGZhbHNlO1xuXHRcdFx0XHQvLyBNZWRpYSBhdXRvbWF0aWNhbGx5IGdvZXMgdG8gMCBpZiAucGxheSgpIGlzIGNhbGxlZCB3aGVuIGl0J3MgZG9uZVxuXHRcdFx0XHRpZiAoaXNQbGF5ZXJFbmRlZChwbGF5ZXIpKSB7XG5cdFx0XHRcdFx0c2V0VGltZSh2aWRlbywgMCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRnZXQgZW5kZWQoKSB7XG5cdFx0XHRcdHJldHVybiBpc1BsYXllckVuZGVkKHBsYXllcik7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIC5sb2FkKCkgY2F1c2VzIHRoZSBlbXB0aWVkIGV2ZW50XG5cdHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2VtcHRpZWQnLCBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gLy8gY29uc29sZS5sb2coJ2RyaXZlciBzcmMgaXMnLCBwbGF5ZXIuZHJpdmVyLnNyYyk7XG5cdFx0dmFyIHdhc0VtcHR5ID0gIXBsYXllci5kcml2ZXIuc3JjIHx8IHBsYXllci5kcml2ZXIuc3JjID09PSAnZGF0YTonO1xuXHRcdGlmIChwbGF5ZXIuZHJpdmVyLnNyYyAmJiBwbGF5ZXIuZHJpdmVyLnNyYyAhPT0gdmlkZW8uc3JjKSB7XG5cdFx0XHQvLyAvLyBjb25zb2xlLmxvZygnc3JjIGNoYW5nZWQgdG8nLCB2aWRlby5zcmMpO1xuXHRcdFx0c2V0VGltZSh2aWRlbywgMCwgdHJ1ZSk7XG5cdFx0XHRwbGF5ZXIuZHJpdmVyLnNyYyA9IHZpZGVvLnNyYztcblx0XHRcdC8vIFBsYXlpbmcgdmlkZW9zIHdpbGwgb25seSBrZWVwIHBsYXlpbmcgaWYgbm8gc3JjIHdhcyBwcmVzZW50IHdoZW4gLnBsYXkoKeKAmWVkXG5cdFx0XHRpZiAod2FzRW1wdHkgfHwgKCFoYXNBdWRpbyAmJiB2aWRlby5hdXRvcGxheSkpIHtcblx0XHRcdFx0cGxheWVyLmRyaXZlci5wbGF5KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwbGF5ZXIudXBkYXRlci5zdG9wKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LCBmYWxzZSk7XG5cblx0Ly8gU3RvcCBwcm9ncmFtbWF0aWMgcGxheWVyIHdoZW4gT1MgdGFrZXMgb3ZlclxuXHR2aWRlby5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRiZWdpbmZ1bGxzY3JlZW4nLCBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKCF2aWRlby5wYXVzZWQpIHtcblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSA8YXVkaW8+IGFuZCB0aGUgc3luY2VyL3VwZGF0ZXIgYXJlIHN0b3BwZWRcblx0XHRcdHZpZGVvLnBhdXNlKCk7XG5cblx0XHRcdC8vIFBsYXkgdmlkZW8gbmF0aXZlbHlcblx0XHRcdHZpZGVvW0lJVlBsYXldKCk7XG5cdFx0fSBlbHNlIGlmIChoYXNBdWRpbyAmJiBwbGF5ZXIuZHJpdmVyLmJ1ZmZlcmVkLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0Ly8gSWYgdGhlIGZpcnN0IHBsYXkgaXMgbmF0aXZlLFxuXHRcdFx0Ly8gdGhlIDxhdWRpbz4gbmVlZHMgdG8gYmUgYnVmZmVyZWQgbWFudWFsbHlcblx0XHRcdC8vIHNvIHdoZW4gdGhlIGZ1bGxzY3JlZW4gZW5kcywgaXQgY2FuIGJlIHNldCB0byB0aGUgc2FtZSBjdXJyZW50IHRpbWVcblx0XHRcdHBsYXllci5kcml2ZXIubG9hZCgpO1xuXHRcdH1cblx0fSk7XG5cdGlmIChoYXNBdWRpbykge1xuXHRcdHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdGVuZGZ1bGxzY3JlZW4nLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHQvLyBTeW5jIGF1ZGlvIHRvIG5ldyB2aWRlbyBwb3NpdGlvblxuXHRcdFx0cGxheWVyLmRyaXZlci5jdXJyZW50VGltZSA9IHZpZGVvLmN1cnJlbnRUaW1lO1xuXHRcdFx0Ly8gLy8gY29uc29sZS5hc3NlcnQocGxheWVyLmRyaXZlci5jdXJyZW50VGltZSA9PT0gdmlkZW8uY3VycmVudFRpbWUsICdBdWRpbyBub3Qgc3luY2VkJyk7XG5cdFx0fSk7XG5cblx0XHQvLyBBbGxvdyBzZWVraW5nXG5cdFx0dmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignc2Vla2luZycsIGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChsYXN0UmVxdWVzdHMuaW5kZXhPZih2aWRlby5jdXJyZW50VGltZSAqIDEwMCB8IDAgLyAxMDApIDwgMCkge1xuXHRcdFx0XHQvLyAvLyBjb25zb2xlLmxvZygnVXNlci1yZXF1ZXN0ZWQgc2Vla2luZycpO1xuXHRcdFx0XHRwbGF5ZXIuZHJpdmVyLmN1cnJlbnRUaW1lID0gdmlkZW8uY3VycmVudFRpbWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJldmVudFdpdGhQcm9wT3JGdWxsc2NyZWVuKGVsKSB7XG5cdHZhciBpc0FsbG93ZWQgPSBlbFtJSVZFdmVudF07XG5cdGRlbGV0ZSBlbFtJSVZFdmVudF07XG5cdHJldHVybiAhZWwud2Via2l0RGlzcGxheWluZ0Z1bGxzY3JlZW4gJiYgIWlzQWxsb3dlZDtcbn1cblxuZnVuY3Rpb24gb3ZlcmxvYWRBUEkodmlkZW8pIHtcblx0dmFyIHBsYXllciA9IHZpZGVvW0lJVl07XG5cdHZpZGVvW0lJVlBsYXldID0gdmlkZW8ucGxheTtcblx0dmlkZW9bSUlWUGF1c2VdID0gdmlkZW8ucGF1c2U7XG5cdHZpZGVvLnBsYXkgPSBwbGF5O1xuXHR2aWRlby5wYXVzZSA9IHBhdXNlO1xuXHRwcm94eVByb3BlcnR5KHZpZGVvLCAncGF1c2VkJywgcGxheWVyLmRyaXZlcik7XG5cdHByb3h5UHJvcGVydHkodmlkZW8sICdtdXRlZCcsIHBsYXllci5kcml2ZXIsIHRydWUpO1xuXHRwcm94eVByb3BlcnR5KHZpZGVvLCAncGxheWJhY2tSYXRlJywgcGxheWVyLmRyaXZlciwgdHJ1ZSk7XG5cdHByb3h5UHJvcGVydHkodmlkZW8sICdlbmRlZCcsIHBsYXllci5kcml2ZXIpO1xuXHRwcm94eVByb3BlcnR5KHZpZGVvLCAnbG9vcCcsIHBsYXllci5kcml2ZXIsIHRydWUpO1xuXG5cdC8vIElJViB3b3JrcyBieSBzZWVraW5nIDYwIHRpbWVzIHBlciBzZWNvbmQuXG5cdC8vIFRoZXNlIGV2ZW50cyBhcmUgbm93IHVzZWxlc3MuXG5cdHByZXZlbnRFdmVudCh2aWRlbywgJ3NlZWtpbmcnLCBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICFlbC53ZWJraXREaXNwbGF5aW5nRnVsbHNjcmVlbjsgfSk7XG5cdHByZXZlbnRFdmVudCh2aWRlbywgJ3NlZWtlZCcsIGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gIWVsLndlYmtpdERpc3BsYXlpbmdGdWxsc2NyZWVuOyB9KTtcblxuXHQvLyBMaW1pdCB0aW1ldXBkYXRlIGV2ZW50c1xuXHRwcmV2ZW50RXZlbnQodmlkZW8sICd0aW1ldXBkYXRlJywgcHJldmVudFdpdGhQcm9wT3JGdWxsc2NyZWVuKTtcblxuXHQvLyBQcmV2ZW50IG9jY2FzaW9uYWwgbmF0aXZlIGVuZGVkIGV2ZW50c1xuXHRwcmV2ZW50RXZlbnQodmlkZW8sICdlbmRlZCcsIHByZXZlbnRXaXRoUHJvcE9yRnVsbHNjcmVlbik7XG59XG5cbmZ1bmN0aW9uIGVuYWJsZUlubGluZVZpZGVvKHZpZGVvLCBvcHRzKSB7XG5cdGlmICggb3B0cyA9PT0gdm9pZCAwICkgb3B0cyA9IHt9O1xuXG5cdC8vIFN0b3AgaWYgYWxyZWFkeSBlbmFibGVkXG5cdGlmICh2aWRlb1tJSVZdKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gQWxsb3cgdGhlIHVzZXIgdG8gc2tpcCBkZXRlY3Rpb25cblx0aWYgKCFvcHRzLmV2ZXJ5d2hlcmUpIHtcblx0XHQvLyBPbmx5IGlPUzggYW5kIDkgYXJlIHN1cHBvcnRlZFxuXHRcdGlmICghaU9TOG9yOSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFN0b3AgaWYgaXQncyBub3QgYW4gYWxsb3dlZCBkZXZpY2Vcblx0XHRpZiAoIShvcHRzLmlQYWQgfHwgb3B0cy5pcGFkID8gL2lQaG9uZXxpUG9kfGlQYWQvIDogL2lQaG9uZXxpUG9kLykudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXG5cdC8vIFRyeSB0byBwYXVzZVxuXHR2aWRlby5wYXVzZSgpO1xuXG5cdC8vIFByZXZlbnQgYXV0b3BsYXkuXG5cdC8vIEFuIG5vbi1zdGFydGVkIGF1dG9wbGF5aW5nIHZpZGVvIGNhbid0IGJlIC5wYXVzZSgpJ2Rcblx0dmFyIHdpbGxBdXRvcGxheSA9IHZpZGVvLmF1dG9wbGF5O1xuXHR2aWRlby5hdXRvcGxheSA9IGZhbHNlO1xuXG5cdGFkZFBsYXllcih2aWRlbywgIXZpZGVvLm11dGVkKTtcblx0b3ZlcmxvYWRBUEkodmlkZW8pO1xuXHR2aWRlby5jbGFzc0xpc3QuYWRkKCdJSVYnKTtcblxuXHQvLyBBdXRvcGxheVxuXHRpZiAodmlkZW8ubXV0ZWQgJiYgd2lsbEF1dG9wbGF5KSB7XG5cdFx0dmlkZW8ucGxheSgpO1xuXHRcdHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXlpbmcnLCBmdW5jdGlvbiByZXN0b3JlQXV0b3BsYXkoKSB7XG5cdFx0XHR2aWRlby5hdXRvcGxheSA9IHRydWU7XG5cdFx0XHR2aWRlby5yZW1vdmVFdmVudExpc3RlbmVyKCdwbGF5aW5nJywgcmVzdG9yZUF1dG9wbGF5KTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICghL2lQaG9uZXxpUG9kfGlQYWQvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSkge1xuXHRcdGNvbnNvbGUud2FybignaXBob25lLWlubGluZS12aWRlbyBpcyBub3QgZ3VhcmFudGVlZCB0byB3b3JrIGluIGVtdWxhdGVkIGVudmlyb25tZW50cycpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW5hYmxlSW5saW5lVmlkZW87XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgbnVtYmVySXNOYW4gPSByZXF1aXJlKCdudW1iZXItaXMtbmFuJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzRmluaXRlIHx8IGZ1bmN0aW9uICh2YWwpIHtcblx0cmV0dXJuICEodHlwZW9mIHZhbCAhPT0gJ251bWJlcicgfHwgbnVtYmVySXNOYW4odmFsKSB8fCB2YWwgPT09IEluZmluaXR5IHx8IHZhbCA9PT0gLUluZmluaXR5KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGlzUG93ZXJPZlR3b1xuXG5mdW5jdGlvbiBpc1Bvd2VyT2ZUd28obikge1xuICByZXR1cm4gbiAhPT0gMCAmJiAobiAmIChuIC0gMSkpID09PSAwXG59IiwibW9kdWxlLmV4cG9ydHMgICAgICA9IGlzVHlwZWRBcnJheVxuaXNUeXBlZEFycmF5LnN0cmljdCA9IGlzU3RyaWN0VHlwZWRBcnJheVxuaXNUeXBlZEFycmF5Lmxvb3NlICA9IGlzTG9vc2VUeXBlZEFycmF5XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcbnZhciBuYW1lcyA9IHtcbiAgICAnW29iamVjdCBJbnQ4QXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IEludDE2QXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IEludDMyQXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IFVpbnQ4QXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XSc6IHRydWVcbiAgLCAnW29iamVjdCBVaW50MTZBcnJheV0nOiB0cnVlXG4gICwgJ1tvYmplY3QgVWludDMyQXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nOiB0cnVlXG4gICwgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSc6IHRydWVcbn1cblxuZnVuY3Rpb24gaXNUeXBlZEFycmF5KGFycikge1xuICByZXR1cm4gKFxuICAgICAgIGlzU3RyaWN0VHlwZWRBcnJheShhcnIpXG4gICAgfHwgaXNMb29zZVR5cGVkQXJyYXkoYXJyKVxuICApXG59XG5cbmZ1bmN0aW9uIGlzU3RyaWN0VHlwZWRBcnJheShhcnIpIHtcbiAgcmV0dXJuIChcbiAgICAgICBhcnIgaW5zdGFuY2VvZiBJbnQ4QXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBJbnQxNkFycmF5XG4gICAgfHwgYXJyIGluc3RhbmNlb2YgSW50MzJBcnJheVxuICAgIHx8IGFyciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheVxuICAgIHx8IGFyciBpbnN0YW5jZW9mIFVpbnQxNkFycmF5XG4gICAgfHwgYXJyIGluc3RhbmNlb2YgVWludDMyQXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXlcbiAgKVxufVxuXG5mdW5jdGlvbiBpc0xvb3NlVHlwZWRBcnJheShhcnIpIHtcbiAgcmV0dXJuIG5hbWVzW3RvU3RyaW5nLmNhbGwoYXJyKV1cbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0IEZhY2Vib29rLCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYW4gZW51bWVyYXRpb24gd2l0aCBrZXlzIGVxdWFsIHRvIHRoZWlyIHZhbHVlLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICpcbiAqICAgdmFyIENPTE9SUyA9IGtleU1pcnJvcih7Ymx1ZTogbnVsbCwgcmVkOiBudWxsfSk7XG4gKiAgIHZhciBteUNvbG9yID0gQ09MT1JTLmJsdWU7XG4gKiAgIHZhciBpc0NvbG9yVmFsaWQgPSAhIUNPTE9SU1tteUNvbG9yXTtcbiAqXG4gKiBUaGUgbGFzdCBsaW5lIGNvdWxkIG5vdCBiZSBwZXJmb3JtZWQgaWYgdGhlIHZhbHVlcyBvZiB0aGUgZ2VuZXJhdGVkIGVudW0gd2VyZVxuICogbm90IGVxdWFsIHRvIHRoZWlyIGtleXMuXG4gKlxuICogICBJbnB1dDogIHtrZXkxOiB2YWwxLCBrZXkyOiB2YWwyfVxuICogICBPdXRwdXQ6IHtrZXkxOiBrZXkxLCBrZXkyOiBrZXkyfVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xudmFyIGtleU1pcnJvciA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgcmV0ID0ge307XG4gIHZhciBrZXk7XG4gIGlmICghKG9iaiBpbnN0YW5jZW9mIE9iamVjdCAmJiAhQXJyYXkuaXNBcnJheShvYmopKSkge1xuICAgIHRocm93IG5ldyBFcnJvcigna2V5TWlycm9yKC4uLik6IEFyZ3VtZW50IG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICB9XG4gIGZvciAoa2V5IGluIG9iaikge1xuICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICByZXRba2V5XSA9IGtleTtcbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBrZXlNaXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgbnVtYmVySXNGaW5pdGUgPSByZXF1aXJlKCdpcy1maW5pdGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IGZ1bmN0aW9uICh4KSB7XG5cdHJldHVybiBudW1iZXJJc0Zpbml0ZSh4KSAmJiBNYXRoLmZsb29yKHgpID09PSB4O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uICh4KSB7XG5cdHJldHVybiB4ICE9PSB4O1xufTtcbiIsInZhciB3cmFwcHkgPSByZXF1aXJlKCd3cmFwcHknKVxubW9kdWxlLmV4cG9ydHMgPSB3cmFwcHkob25jZSlcbm1vZHVsZS5leHBvcnRzLnN0cmljdCA9IHdyYXBweShvbmNlU3RyaWN0KVxuXG5vbmNlLnByb3RvID0gb25jZShmdW5jdGlvbiAoKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGdW5jdGlvbi5wcm90b3R5cGUsICdvbmNlJywge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gb25jZSh0aGlzKVxuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bmN0aW9uLnByb3RvdHlwZSwgJ29uY2VTdHJpY3QnLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBvbmNlU3RyaWN0KHRoaXMpXG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSlcbn0pXG5cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBmID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChmLmNhbGxlZCkgcmV0dXJuIGYudmFsdWVcbiAgICBmLmNhbGxlZCA9IHRydWVcbiAgICByZXR1cm4gZi52YWx1ZSA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgfVxuICBmLmNhbGxlZCA9IGZhbHNlXG4gIHJldHVybiBmXG59XG5cbmZ1bmN0aW9uIG9uY2VTdHJpY3QgKGZuKSB7XG4gIHZhciBmID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChmLmNhbGxlZClcbiAgICAgIHRocm93IG5ldyBFcnJvcihmLm9uY2VFcnJvcilcbiAgICBmLmNhbGxlZCA9IHRydWVcbiAgICByZXR1cm4gZi52YWx1ZSA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgfVxuICB2YXIgbmFtZSA9IGZuLm5hbWUgfHwgJ0Z1bmN0aW9uIHdyYXBwZWQgd2l0aCBgb25jZWAnXG4gIGYub25jZUVycm9yID0gbmFtZSArIFwiIHNob3VsZG4ndCBiZSBjYWxsZWQgbW9yZSB0aGFuIG9uY2VcIlxuICBmLmNhbGxlZCA9IGZhbHNlXG4gIHJldHVybiBmXG59XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuMlxuKGZ1bmN0aW9uKCkge1xuICB2YXIgZ2V0TmFub1NlY29uZHMsIGhydGltZSwgbG9hZFRpbWUsIG1vZHVsZUxvYWRUaW1lLCBub2RlTG9hZFRpbWUsIHVwVGltZTtcblxuICBpZiAoKHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwZXJmb3JtYW5jZSAhPT0gbnVsbCkgJiYgcGVyZm9ybWFuY2Uubm93KSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB9O1xuICB9IGVsc2UgaWYgKCh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzICE9PSBudWxsKSAmJiBwcm9jZXNzLmhydGltZSkge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKGdldE5hbm9TZWNvbmRzKCkgLSBub2RlTG9hZFRpbWUpIC8gMWU2O1xuICAgIH07XG4gICAgaHJ0aW1lID0gcHJvY2Vzcy5ocnRpbWU7XG4gICAgZ2V0TmFub1NlY29uZHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBocjtcbiAgICAgIGhyID0gaHJ0aW1lKCk7XG4gICAgICByZXR1cm4gaHJbMF0gKiAxZTkgKyBoclsxXTtcbiAgICB9O1xuICAgIG1vZHVsZUxvYWRUaW1lID0gZ2V0TmFub1NlY29uZHMoKTtcbiAgICB1cFRpbWUgPSBwcm9jZXNzLnVwdGltZSgpICogMWU5O1xuICAgIG5vZGVMb2FkVGltZSA9IG1vZHVsZUxvYWRUaW1lIC0gdXBUaW1lO1xuICB9IGVsc2UgaWYgKERhdGUubm93KSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBEYXRlLm5vdygpIC0gbG9hZFRpbWU7XG4gICAgfTtcbiAgICBsb2FkVGltZSA9IERhdGUubm93KCk7XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIGxvYWRUaW1lO1xuICAgIH07XG4gICAgbG9hZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfVxuXG59KS5jYWxsKHRoaXMpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wZXJmb3JtYW5jZS1ub3cuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbmlmICghcHJvY2Vzcy52ZXJzaW9uIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YwLicpID09PSAwIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLicpID09PSAwICYmIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS44LicpICE9PSAwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gbmV4dFRpY2s7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3MubmV4dFRpY2s7XG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrKGZuLCBhcmcxLCBhcmcyLCBhcmczKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImNhbGxiYWNrXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cbiAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBhcmdzLCBpO1xuICBzd2l0Y2ggKGxlbikge1xuICBjYXNlIDA6XG4gIGNhc2UgMTpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmbik7XG4gIGNhc2UgMjpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tPbmUoKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEpO1xuICAgIH0pO1xuICBjYXNlIDM6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVHdvKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxLCBhcmcyKTtcbiAgICB9KTtcbiAgY2FzZSA0OlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1RocmVlKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICB9KTtcbiAgZGVmYXVsdDpcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgYXJncy5sZW5ndGgpIHtcbiAgICAgIGFyZ3NbaSsrXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrKCkge1xuICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSk7XG4gIH1cbn1cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJ2YXIgbm93ID0gcmVxdWlyZSgncGVyZm9ybWFuY2Utbm93JylcbiAgLCByb290ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB3aW5kb3dcbiAgLCB2ZW5kb3JzID0gWydtb3onLCAnd2Via2l0J11cbiAgLCBzdWZmaXggPSAnQW5pbWF0aW9uRnJhbWUnXG4gICwgcmFmID0gcm9vdFsncmVxdWVzdCcgKyBzdWZmaXhdXG4gICwgY2FmID0gcm9vdFsnY2FuY2VsJyArIHN1ZmZpeF0gfHwgcm9vdFsnY2FuY2VsUmVxdWVzdCcgKyBzdWZmaXhdXG5cbmZvcih2YXIgaSA9IDA7ICFyYWYgJiYgaSA8IHZlbmRvcnMubGVuZ3RoOyBpKyspIHtcbiAgcmFmID0gcm9vdFt2ZW5kb3JzW2ldICsgJ1JlcXVlc3QnICsgc3VmZml4XVxuICBjYWYgPSByb290W3ZlbmRvcnNbaV0gKyAnQ2FuY2VsJyArIHN1ZmZpeF1cbiAgICAgIHx8IHJvb3RbdmVuZG9yc1tpXSArICdDYW5jZWxSZXF1ZXN0JyArIHN1ZmZpeF1cbn1cblxuLy8gU29tZSB2ZXJzaW9ucyBvZiBGRiBoYXZlIHJBRiBidXQgbm90IGNBRlxuaWYoIXJhZiB8fCAhY2FmKSB7XG4gIHZhciBsYXN0ID0gMFxuICAgICwgaWQgPSAwXG4gICAgLCBxdWV1ZSA9IFtdXG4gICAgLCBmcmFtZUR1cmF0aW9uID0gMTAwMCAvIDYwXG5cbiAgcmFmID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBpZihxdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHZhciBfbm93ID0gbm93KClcbiAgICAgICAgLCBuZXh0ID0gTWF0aC5tYXgoMCwgZnJhbWVEdXJhdGlvbiAtIChfbm93IC0gbGFzdCkpXG4gICAgICBsYXN0ID0gbmV4dCArIF9ub3dcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjcCA9IHF1ZXVlLnNsaWNlKDApXG4gICAgICAgIC8vIENsZWFyIHF1ZXVlIGhlcmUgdG8gcHJldmVudFxuICAgICAgICAvLyBjYWxsYmFja3MgZnJvbSBhcHBlbmRpbmcgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRvIHRoZSBjdXJyZW50IGZyYW1lJ3MgcXVldWVcbiAgICAgICAgcXVldWUubGVuZ3RoID0gMFxuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgY3AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZighY3BbaV0uY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICB0cnl7XG4gICAgICAgICAgICAgIGNwW2ldLmNhbGxiYWNrKGxhc3QpXG4gICAgICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgdGhyb3cgZSB9LCAwKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgTWF0aC5yb3VuZChuZXh0KSlcbiAgICB9XG4gICAgcXVldWUucHVzaCh7XG4gICAgICBoYW5kbGU6ICsraWQsXG4gICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICBjYW5jZWxsZWQ6IGZhbHNlXG4gICAgfSlcbiAgICByZXR1cm4gaWRcbiAgfVxuXG4gIGNhZiA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYocXVldWVbaV0uaGFuZGxlID09PSBoYW5kbGUpIHtcbiAgICAgICAgcXVldWVbaV0uY2FuY2VsbGVkID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuKSB7XG4gIC8vIFdyYXAgaW4gYSBuZXcgZnVuY3Rpb24gdG8gcHJldmVudFxuICAvLyBgY2FuY2VsYCBwb3RlbnRpYWxseSBiZWluZyBhc3NpZ25lZFxuICAvLyB0byB0aGUgbmF0aXZlIHJBRiBmdW5jdGlvblxuICByZXR1cm4gcmFmLmNhbGwocm9vdCwgZm4pXG59XG5tb2R1bGUuZXhwb3J0cy5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgY2FmLmFwcGx5KHJvb3QsIGFyZ3VtZW50cylcbn1cbm1vZHVsZS5leHBvcnRzLnBvbHlmaWxsID0gZnVuY3Rpb24oKSB7XG4gIHJvb3QucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gcmFmXG4gIHJvb3QuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBjYWZcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxuLy8gU2luY2UgSlMgZG9lc24ndCBoYXZlIG11bHRpcGxlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UsIHRoaXMgY2xhc3Ncbi8vIHByb3RvdHlwYWxseSBpbmhlcml0cyBmcm9tIFJlYWRhYmxlLCBhbmQgdGhlbiBwYXJhc2l0aWNhbGx5IGZyb21cbi8vIFdyaXRhYmxlLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwcm9jZXNzTmV4dFRpY2sgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGtleXMucHVzaChrZXkpO1xuICB9cmV0dXJuIGtleXM7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gRHVwbGV4O1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBSZWFkYWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV9yZWFkYWJsZScpO1xudmFyIFdyaXRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3dyaXRhYmxlJyk7XG5cbnV0aWwuaW5oZXJpdHMoRHVwbGV4LCBSZWFkYWJsZSk7XG5cbnZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpO1xuZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gIHZhciBtZXRob2QgPSBrZXlzW3ZdO1xuICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG59XG5cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSByZXR1cm4gbmV3IER1cGxleChvcHRpb25zKTtcblxuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy53cml0YWJsZSA9PT0gZmFsc2UpIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKSB0aGlzLmFsbG93SGFsZk9wZW4gPSBmYWxzZTtcblxuICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTtcbn1cblxuLy8gdGhlIG5vLWhhbGYtb3BlbiBlbmZvcmNlclxuZnVuY3Rpb24gb25lbmQoKSB7XG4gIC8vIGlmIHdlIGFsbG93IGhhbGYtb3BlbiBzdGF0ZSwgb3IgaWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsXG4gIC8vIHRoZW4gd2UncmUgb2suXG4gIGlmICh0aGlzLmFsbG93SGFsZk9wZW4gfHwgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCkgcmV0dXJuO1xuXG4gIC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi5cbiAgLy8gQnV0IGFsbG93IG1vcmUgd3JpdGVzIHRvIGhhcHBlbiBpbiB0aGlzIHRpY2suXG4gIHByb2Nlc3NOZXh0VGljayhvbkVuZE5ULCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gb25FbmROVChzZWxmKSB7XG4gIHNlbGYuZW5kKCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbkR1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIHRoaXMuZW5kKCk7XG5cbiAgcHJvY2Vzc05leHRUaWNrKGNiLCBlcnIpO1xufTtcblxuZnVuY3Rpb24gZm9yRWFjaCh4cywgZikge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGYoeHNbaV0sIGkpO1xuICB9XG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHByb2Nlc3NOZXh0VGljayA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblJlYWRhYmxlLlJlYWRhYmxlU3RhdGUgPSBSZWFkYWJsZVN0YXRlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG52YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLy8gVE9ETyhibWV1cmVyKTogQ2hhbmdlIHRoaXMgYmFjayB0byBjb25zdCBvbmNlIGhvbGUgY2hlY2tzIGFyZVxuLy8gcHJvcGVybHkgb3B0aW1pemVkIGF3YXkgZWFybHkgaW4gSWduaXRpb24rVHVyYm9GYW4uXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBkZWJ1Z1V0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgZGVidWcgPSB2b2lkIDA7XG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXJMaXN0ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QnKTtcbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG52YXIgU3RyaW5nRGVjb2RlcjtcblxudXRpbC5pbmhlcml0cyhSZWFkYWJsZSwgU3RyZWFtKTtcblxudmFyIGtQcm94eUV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTtcblxuZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbikge1xuICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93blxuICAvLyBldmVudCBlbWl0dGVyIGltcGxlbWVudGF0aW9uIHdpdGggdGhlbS5cbiAgaWYgKHR5cGVvZiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lcihldmVudCwgZm4pO1xuICB9IGVsc2Uge1xuICAgIC8vIFRoaXMgaXMgYSBoYWNrIHRvIG1ha2Ugc3VyZSB0aGF0IG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSBhbnlcbiAgICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHNcbiAgICAvLyB0byBjb250aW51ZSB0byB3b3JrIHdpdGggb2xkZXIgdmVyc2lvbnMgb2YgTm9kZS5qcyB0aGF0IGRvIG5vdCBpbmNsdWRlXG4gICAgLy8gdGhlIHByZXBlbmRMaXN0ZW5lcigpIG1ldGhvZC4gVGhlIGdvYWwgaXMgdG8gZXZlbnR1YWxseSByZW1vdmUgdGhpcyBoYWNrLlxuICAgIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50LCBmbik7ZWxzZSBpZiAoaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyBcImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXJcIlxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod20gfHwgaHdtID09PSAwID8gaHdtIDogZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBBIGxpbmtlZCBsaXN0IGlzIHVzZWQgdG8gc3RvcmUgZGF0YSBjaHVua3MgaW5zdGVhZCBvZiBhbiBhcnJheSBiZWNhdXNlIHRoZVxuICAvLyBsaW5rZWQgbGlzdCBjYW4gcmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIGJlZ2lubmluZyBmYXN0ZXIgdGhhblxuICAvLyBhcnJheS5zaGlmdCgpXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgZXZlbnQgJ3JlYWRhYmxlJy8nZGF0YScgaXMgZW1pdHRlZFxuICAvLyBpbW1lZGlhdGVseSwgb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZVxuICAvLyBhbnkgYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3QgcmVhZCBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5XG4gIC8vIHRoYXQgd2UncmUgYXdhaXRpbmcgYSAncmVhZGFibGUnIGV2ZW50IGVtaXNzaW9uLlxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcbiAgdGhpcy5hd2FpdERyYWluID0gMDtcblxuICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcblxuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKSByZXR1cm4gbmV3IFJlYWRhYmxlKG9wdGlvbnMpO1xuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3lcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVhZCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fcmVhZCA9IG9wdGlvbnMucmVhZDtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cblJlYWRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICBjYihlcnIpO1xufTtcblxuLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuXG4vLyBUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgaGlnaFdhdGVyTWFyayBoYXMgbm90IGJlZW4gaGl0IHlldCxcbi8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGRcbi8vIHdyaXRlKCkgc29tZSBtb3JlLlxuUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBza2lwQ2h1bmtDaGVjaztcblxuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG4gICAgICBpZiAoZW5jb2RpbmcgIT09IHN0YXRlLmVuY29kaW5nKSB7XG4gICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgICAgICAgZW5jb2RpbmcgPSAnJztcbiAgICAgIH1cbiAgICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIGVuY29kaW5nLCBmYWxzZSwgc2tpcENodW5rQ2hlY2spO1xufTtcblxuLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKClcblJlYWRhYmxlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBudWxsLCB0cnVlLCBmYWxzZSk7XG59O1xuXG5mdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250LCBza2lwQ2h1bmtDaGVjaykge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBlcjtcbiAgICBpZiAoIXNraXBDaHVua0NoZWNrKSBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspO1xuICAgIGlmIChlcikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY2h1bmspICE9PSBCdWZmZXIucHJvdG90eXBlKSB7XG4gICAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGRUb0Zyb250KSB7XG4gICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50JykpO2Vsc2UgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRlZCkge1xuICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhZW5jb2RpbmcpIHtcbiAgICAgICAgICBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rLmxlbmd0aCAhPT0gMCkgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtlbHNlIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmVlZE1vcmVEYXRhKHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGFkZFRvRnJvbnQpIHtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5zeW5jKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtlbHNlIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcblxuICAgIGlmIChzdGF0ZS5uZWVkUmVhZGFibGUpIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICB9XG4gIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyO1xuICBpZiAoIV9pc1VpbnQ4QXJyYXkoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIHJldHVybiBlcjtcbn1cblxuLy8gaWYgaXQncyBwYXN0IHRoZSBoaWdoIHdhdGVyIG1hcmssIHdlIGNhbiBwdXNoIGluIHNvbWUgbW9yZS5cbi8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lXG4vLyBtb3JlIGJ5dGVzLiAgVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCxcbi8vIHN1Y2ggYXMgdGhlIHJlcGwuICBBbHNvLCBpZiB0aGUgcHVzaCgpIHRyaWdnZXJlZCBhXG4vLyByZWFkYWJsZSBldmVudCwgYW5kIHRoZSB1c2VyIGNhbGxlZCByZWFkKGxhcmdlTnVtYmVyKSBzdWNoIHRoYXRcbi8vIG5lZWRSZWFkYWJsZSB3YXMgc2V0LCB0aGVuIHdlIG91Z2h0IHRvIHB1c2ggbW9yZSwgc28gdGhhdCBhbm90aGVyXG4vLyAncmVhZGFibGUnIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLlxuZnVuY3Rpb24gbmVlZE1vcmVEYXRhKHN0YXRlKSB7XG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLm5lZWRSZWFkYWJsZSB8fCBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7XG59O1xuXG4vLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblJlYWRhYmxlLnByb3RvdHlwZS5zZXRFbmNvZGluZyA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IGVuYztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBEb24ndCByYWlzZSB0aGUgaHdtID4gOE1CXG52YXIgTUFYX0hXTSA9IDB4ODAwMDAwO1xuZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMiB0byBwcmV2ZW50IGluY3JlYXNpbmcgaHdtIGV4Y2Vzc2l2ZWx5IGluXG4gICAgLy8gdGlueSBhbW91bnRzXG4gICAgbi0tO1xuICAgIG4gfD0gbiA+Pj4gMTtcbiAgICBuIHw9IG4gPj4+IDI7XG4gICAgbiB8PSBuID4+PiA0O1xuICAgIG4gfD0gbiA+Pj4gODtcbiAgICBuIHw9IG4gPj4+IDE2O1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7XG4gIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxO1xuICBpZiAobiAhPT0gbikge1xuICAgIC8vIE9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCkgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfVxuICAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgY3VycmVudCBod20sIHRoZW4gcmFpc2UgdGhlIGh3bS5cbiAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7XG4gIGlmIChuIDw9IHN0YXRlLmxlbmd0aCkgcmV0dXJuIG47XG4gIC8vIERvbid0IGhhdmUgZW5vdWdoXG4gIGlmICghc3RhdGUuZW5kZWQpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sZW5ndGg7XG59XG5cbi8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIGRlYnVnKCdyZWFkJywgbik7XG4gIG4gPSBwYXJzZUludChuLCAxMCk7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBuT3JpZyA9IG47XG5cbiAgaWYgKG4gIT09IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gIC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUubmVlZFJlYWRhYmxlICYmIChzdGF0ZS5sZW5ndGggPj0gc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7ZWxzZSBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7XG5cbiAgLy8gaWYgd2UndmUgZW5kZWQsIGFuZCB3ZSdyZSBub3cgY2xlYXIsIHRoZW4gZmluaXNoIGl0IHVwLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQWxsIHRoZSBhY3R1YWwgY2h1bmsgZ2VuZXJhdGlvbiBsb2dpYyBuZWVkcyB0byBiZVxuICAvLyAqYmVsb3cqIHRoZSBjYWxsIHRvIF9yZWFkLiAgVGhlIHJlYXNvbiBpcyB0aGF0IGluIGNlcnRhaW5cbiAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZFxuICAvLyBtYXkgYmUgYSBjb21wbGV0ZWx5IHN5bmNocm9ub3VzIG9wZXJhdGlvbiB3aGljaCBtYXkgY2hhbmdlXG4gIC8vIHRoZSBzdGF0ZSBvZiB0aGUgcmVhZCBidWZmZXIsIHByb3ZpZGluZyBlbm91Z2ggZGF0YSB3aGVuXG4gIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLlxuICAvL1xuICAvLyBTbywgdGhlIHN0ZXBzIGFyZTpcbiAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkb1xuICAvLyBhIHJlYWQgZnJvbSB0aGUgYnVmZmVyLlxuICAvL1xuICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLlxuICAvLyBOb3RlIHRoYXQgdGhpcyBtYXkgYmUgYXN5bmNocm9ub3VzLCBvciBzeW5jaHJvbm91cy4gIFllcywgaXQgaXNcbiAgLy8gZGVlcGx5IHVnbHkgdG8gd3JpdGUgQVBJcyB0aGlzIHdheSwgYnV0IHRoYXQgc3RpbGwgZG9lc24ndCBtZWFuXG4gIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmVcbiAgLy8gZGVzaWduZWQgdG8gYmUgc3luYy9hc3luYyBhZ25vc3RpYy5cbiAgLy8gVGFrZSBub3RlIGlmIHRoZSBfcmVhZCBjYWxsIGlzIHN5bmMgb3IgYXN5bmMgKGllLCBpZiB0aGUgcmVhZCBjYWxsXG4gIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXRcbiAgLy8gJ3JlYWRhYmxlJyBldGMuXG4gIC8vXG4gIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi5cblxuICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuXG4gIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7XG4gIGRlYnVnKCduZWVkIHJlYWRhYmxlJywgZG9SZWFkKTtcblxuICAvLyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBsZXNzIHRoYW4gdGhlIGhpZ2hXYXRlck1hcmssIHRoZW4gYWxzbyByZWFkIHNvbWVcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCB8fCBzdGF0ZS5sZW5ndGggLSBuIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRvUmVhZCA9IHRydWU7XG4gICAgZGVidWcoJ2xlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrJywgZG9SZWFkKTtcbiAgfVxuXG4gIC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5XG4gIC8vIHJlYWRpbmcsIHRoZW4gaXQncyB1bm5lY2Vzc2FyeS5cbiAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHtcbiAgICBkb1JlYWQgPSBmYWxzZTtcbiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7XG4gIH0gZWxzZSBpZiAoZG9SZWFkKSB7XG4gICAgZGVidWcoJ2RvIHJlYWQnKTtcbiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTtcbiAgICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgICAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LlxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG4gICAgc3RhdGUuc3luYyA9IGZhbHNlO1xuICAgIC8vIElmIF9yZWFkIHB1c2hlZCBkYXRhIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgIHdpbGwgYmUgZmFsc2UsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuICAgIGlmICghc3RhdGUucmVhZGluZykgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTtcbiAgfVxuXG4gIHZhciByZXQ7XG4gIGlmIChuID4gMCkgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO2Vsc2UgcmV0ID0gbnVsbDtcblxuICBpZiAocmV0ID09PSBudWxsKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBuID0gMDtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5sZW5ndGggLT0gbjtcbiAgfVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcbiAgICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuXG4gICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAgIC8vIElmIHdlIHRyaWVkIHRvIHJlYWQoKSBwYXN0IHRoZSBFT0YsIHRoZW4gZW1pdCBlbmQgb24gdGhlIG5leHQgdGljay5cbiAgICBpZiAobk9yaWcgIT09IG4gJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO1xuICB9XG5cbiAgaWYgKHJldCAhPT0gbnVsbCkgdGhpcy5lbWl0KCdkYXRhJywgcmV0KTtcblxuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuO1xuICBpZiAoc3RhdGUuZGVjb2Rlcikge1xuICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG5cbiAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xufVxuXG4vLyBEb24ndCBlbWl0IHJlYWRhYmxlIHJpZ2h0IGF3YXkgaW4gc3luYyBtb2RlLCBiZWNhdXNlIHRoaXMgY2FuIHRyaWdnZXJcbi8vIGFub3RoZXIgcmVhZCgpIGNhbGwgPT4gc3RhY2sgb3ZlcmZsb3cuICBUaGlzIHdheSwgaXQgbWlnaHQgdHJpZ2dlclxuLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLlxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5mbG93aW5nKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlO1xuICAgIGlmIChzdGF0ZS5zeW5jKSBwcm9jZXNzTmV4dFRpY2soZW1pdFJlYWRhYmxlXywgc3RyZWFtKTtlbHNlIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpO1xuICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgZmxvdyhzdHJlYW0pO1xufVxuXG4vLyBhdCB0aGlzIHBvaW50LCB0aGUgdXNlciBoYXMgcHJlc3VtYWJseSBzZWVuIHRoZSAncmVhZGFibGUnIGV2ZW50LFxuLy8gYW5kIGNhbGxlZCByZWFkKCkgdG8gY29uc3VtZSBzb21lIGRhdGEuICB0aGF0IG1heSBoYXZlIHRyaWdnZXJlZFxuLy8gaW4gdHVybiBhbm90aGVyIF9yZWFkKG4pIGNhbGwsIGluIHdoaWNoIGNhc2UgcmVhZGluZyA9IHRydWUgaWZcbi8vIGl0J3MgaW4gcHJvZ3Jlc3MuXG4vLyBIb3dldmVyLCBpZiB3ZSdyZSBub3QgZW5kZWQsIG9yIHJlYWRpbmcsIGFuZCB0aGUgbGVuZ3RoIDwgaHdtLFxuLy8gdGhlbiBnbyBhaGVhZCBhbmQgdHJ5IHRvIHJlYWQgc29tZSBtb3JlIHByZWVtcHRpdmVseS5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmdNb3JlKSB7XG4gICAgc3RhdGUucmVhZGluZ01vcmUgPSB0cnVlO1xuICAgIHByb2Nlc3NOZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkZWJ1ZygnbWF5YmVSZWFkTW9yZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpXG4gICAgICAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxuICAgICAgYnJlYWs7ZWxzZSBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcbn1cblxuLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC5cbi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdfcmVhZCgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKGRlc3QsIHBpcGVPcHRzKSB7XG4gIHZhciBzcmMgPSB0aGlzO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIHN3aXRjaCAoc3RhdGUucGlwZXNDb3VudCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHN0YXRlLnBpcGVzID0gZGVzdDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHN0YXRlLnBpcGVzID0gW3N0YXRlLnBpcGVzLCBkZXN0XTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzdGF0ZS5waXBlcy5wdXNoKGRlc3QpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgc3RhdGUucGlwZXNDb3VudCArPSAxO1xuICBkZWJ1ZygncGlwZSBjb3VudD0lZCBvcHRzPSVqJywgc3RhdGUucGlwZXNDb3VudCwgcGlwZU9wdHMpO1xuXG4gIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSkgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRvdXQgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRlcnI7XG5cbiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IHVucGlwZTtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHByb2Nlc3NOZXh0VGljayhlbmRGbik7ZWxzZSBzcmMub25jZSgnZW5kJywgZW5kRm4pO1xuXG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUsIHVucGlwZUluZm8pIHtcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgaWYgKHVucGlwZUluZm8gJiYgdW5waXBlSW5mby5oYXNVbnBpcGVkID09PSBmYWxzZSkge1xuICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgZGVidWcoJ29uZW5kJyk7XG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG4gIC8vIHdoZW4gdGhlIGRlc3QgZHJhaW5zLCBpdCByZWR1Y2VzIHRoZSBhd2FpdERyYWluIGNvdW50ZXJcbiAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpXG4gIC8vIGhhbmRsZXIgaW4gZmxvdygpLCBidXQgYWRkaW5nIGFuZCByZW1vdmluZyByZXBlYXRlZGx5IGlzXG4gIC8vIHRvbyBzbG93LlxuICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7XG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlO1xuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIGRlYnVnKCdjbGVhbnVwJyk7XG4gICAgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCB1bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG5cbiAgICBjbGVhbmVkVXAgPSB0cnVlO1xuXG4gICAgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpc1xuICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydFxuICAgIC8vIGZsb3dpbmcgYWdhaW4uXG4gICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LlxuICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS5cbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7XG4gIH1cblxuICAvLyBJZiB0aGUgdXNlciBwdXNoZXMgbW9yZSBkYXRhIHdoaWxlIHdlJ3JlIHdyaXRpbmcgdG8gZGVzdCB0aGVuIHdlJ2xsIGVuZCB1cFxuICAvLyBpbiBvbmRhdGEgYWdhaW4uIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byBpbmNyZWFzZSBhd2FpdERyYWluIG9uY2UgYmVjYXVzZVxuICAvLyBkZXN0IHdpbGwgb25seSBlbWl0IG9uZSAnZHJhaW4nIGV2ZW50IGZvciB0aGUgbXVsdGlwbGUgd3JpdGVzLlxuICAvLyA9PiBJbnRyb2R1Y2UgYSBndWFyZCBvbiBpbmNyZWFzaW5nIGF3YWl0RHJhaW4uXG4gIHZhciBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gIHNyYy5vbignZGF0YScsIG9uZGF0YSk7XG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGRlYnVnKCdvbmRhdGEnKTtcbiAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGlmIChmYWxzZSA9PT0gcmV0ICYmICFpbmNyZWFzZWRBd2FpdERyYWluKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGVcbiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxuICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uXG4gICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbik7XG4gICAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKys7XG4gICAgICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSB0cnVlO1xuICAgICAgfVxuICAgICAgc3JjLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGRlYnVnKCdvbmVycm9yJywgZXIpO1xuICAgIHVucGlwZSgpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgaWYgKEVFbGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMCkgZGVzdC5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgdXNlcmxhbmQgb25lcy5cbiAgcHJlcGVuZExpc3RlbmVyKGRlc3QsICdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgZGVidWcoJ29uZmluaXNoJyk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblxuICBmdW5jdGlvbiB1bnBpcGUoKSB7XG4gICAgZGVidWcoJ3VucGlwZScpO1xuICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gIH1cblxuICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpO1xuXG4gIC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS5cbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BpcGUgcmVzdW1lJyk7XG4gICAgc3JjLnJlc3VtZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5mdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiA9PT0gMCAmJiBFRWxpc3RlbmVyQ291bnQoc3JjLCAnZGF0YScpKSB7XG4gICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICAgIGZsb3coc3JjKTtcbiAgICB9XG4gIH07XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbiAoZGVzdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgdW5waXBlSW5mbyA9IHsgaGFzVW5waXBlZDogZmFsc2UgfTtcblxuICAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpcztcblxuICAvLyBqdXN0IG9uZSBkZXN0aW5hdGlvbi4gIG1vc3QgY29tbW9uIGNhc2UuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gc3RhdGUucGlwZXM7XG5cbiAgICAvLyBnb3QgYSBtYXRjaC5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0c1tpXS5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICB9cmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLlxuICB2YXIgaW5kZXggPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIHRoaXM7XG5cbiAgc3RhdGUucGlwZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgc3RhdGUucGlwZXNDb3VudCAtPSAxO1xuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTtcblxuICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gc2V0IHVwIGRhdGEgZXZlbnRzIGlmIHRoZXkgYXJlIGFza2VkIGZvclxuLy8gRW5zdXJlIHJlYWRhYmxlIGxpc3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmdcblJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgZm4pIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUub24uY2FsbCh0aGlzLCBldiwgZm4pO1xuXG4gIGlmIChldiA9PT0gJ2RhdGEnKSB7XG4gICAgLy8gU3RhcnQgZmxvd2luZyBvbiBuZXh0IHRpY2sgaWYgc3RyZWFtIGlzbid0IGV4cGxpY2l0bHkgcGF1c2VkXG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHRoaXMucmVzdW1lKCk7XG4gIH0gZWxzZSBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgICAgIHByb2Nlc3NOZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcblxuZnVuY3Rpb24gblJlYWRpbmdOZXh0VGljayhzZWxmKSB7XG4gIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcbiAgc2VsZi5yZWFkKDApO1xufVxuXG4vLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lJyk7XG4gICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgcmVzdW1lKHRoaXMsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBwcm9jZXNzTmV4dFRpY2socmVzdW1lXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZykge1xuICAgIGRlYnVnKCdyZXN1bWUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH1cblxuICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTtcbiAgZmxvdyhzdHJlYW0pO1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2NhbGwgcGF1c2UgZmxvd2luZz0laicsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7XG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BhdXNlJyk7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZmxvdyhzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpO1xuICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7fVxufVxuXG4vLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZW5kJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XG4gICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgc2VsZi5wdXNoKGNodW5rKTtcbiAgICB9XG5cbiAgICBzZWxmLnB1c2gobnVsbCk7XG4gIH0pO1xuXG4gIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcblxuICAgIC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZVxuICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdW5kZWZpbmVkKSkgcmV0dXJuO2Vsc2UgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpIHJldHVybjtcblxuICAgIHZhciByZXQgPSBzZWxmLnB1c2goY2h1bmspO1xuICAgIGlmICghcmV0KSB7XG4gICAgICBwYXVzZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLnBhdXNlKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuXG4gIC8vIGltcG9ydGFudCB3aGVuIHdyYXBwaW5nIGZpbHRlcnMgYW5kIGR1cGxleGVzLlxuICBmb3IgKHZhciBpIGluIHN0cmVhbSkge1xuICAgIGlmICh0aGlzW2ldID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHN0cmVhbVtpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tpXSA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfShpKTtcbiAgICB9XG4gIH1cblxuICAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwga1Byb3h5RXZlbnRzLmxlbmd0aDsgbisrKSB7XG4gICAgc3RyZWFtLm9uKGtQcm94eUV2ZW50c1tuXSwgc2VsZi5lbWl0LmJpbmQoc2VsZiwga1Byb3h5RXZlbnRzW25dKSk7XG4gIH1cblxuICAvLyB3aGVuIHdlIHRyeSB0byBjb25zdW1lIHNvbWUgbW9yZSBieXRlcywgc2ltcGx5IHVucGF1c2UgdGhlXG4gIC8vIHVuZGVybHlpbmcgc3RyZWFtLlxuICBzZWxmLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBfcmVhZCcsIG4pO1xuICAgIGlmIChwYXVzZWQpIHtcbiAgICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtLnJlc3VtZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gc2VsZjtcbn07XG5cbi8vIGV4cG9zZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seS5cblJlYWRhYmxlLl9mcm9tTGlzdCA9IGZyb21MaXN0O1xuXG4vLyBQbHVjayBvZmYgbiBieXRlcyBmcm9tIGFuIGFycmF5IG9mIGJ1ZmZlcnMuXG4vLyBMZW5ndGggaXMgdGhlIGNvbWJpbmVkIGxlbmd0aHMgb2YgYWxsIHRoZSBidWZmZXJzIGluIHRoZSBsaXN0LlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkge1xuICAvLyBub3RoaW5nIGJ1ZmZlcmVkXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuXG4gIHZhciByZXQ7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXQgPSBzdGF0ZS5idWZmZXIuc2hpZnQoKTtlbHNlIGlmICghbiB8fCBuID49IHN0YXRlLmxlbmd0aCkge1xuICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgbGlzdFxuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSByZXQgPSBzdGF0ZS5idWZmZXIuam9pbignJyk7ZWxzZSBpZiAoc3RhdGUuYnVmZmVyLmxlbmd0aCA9PT0gMSkgcmV0ID0gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YTtlbHNlIHJldCA9IHN0YXRlLmJ1ZmZlci5jb25jYXQoc3RhdGUubGVuZ3RoKTtcbiAgICBzdGF0ZS5idWZmZXIuY2xlYXIoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZWFkIHBhcnQgb2YgbGlzdFxuICAgIHJldCA9IGZyb21MaXN0UGFydGlhbChuLCBzdGF0ZS5idWZmZXIsIHN0YXRlLmRlY29kZXIpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gRXh0cmFjdHMgb25seSBlbm91Z2ggYnVmZmVyZWQgZGF0YSB0byBzYXRpc2Z5IHRoZSBhbW91bnQgcmVxdWVzdGVkLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdFBhcnRpYWwobiwgbGlzdCwgaGFzU3RyaW5ncykge1xuICB2YXIgcmV0O1xuICBpZiAobiA8IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIHNsaWNlIGlzIHRoZSBzYW1lIGZvciBidWZmZXJzIGFuZCBzdHJpbmdzXG4gICAgcmV0ID0gbGlzdC5oZWFkLmRhdGEuc2xpY2UoMCwgbik7XG4gICAgbGlzdC5oZWFkLmRhdGEgPSBsaXN0LmhlYWQuZGF0YS5zbGljZShuKTtcbiAgfSBlbHNlIGlmIChuID09PSBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBmaXJzdCBjaHVuayBpcyBhIHBlcmZlY3QgbWF0Y2hcbiAgICByZXQgPSBsaXN0LnNoaWZ0KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVzdWx0IHNwYW5zIG1vcmUgdGhhbiBvbmUgYnVmZmVyXG4gICAgcmV0ID0gaGFzU3RyaW5ncyA/IGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIDogY29weUZyb21CdWZmZXIobiwgbGlzdCk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YVxuLy8gY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSB7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHZhciByZXQgPSBwLmRhdGE7XG4gIG4gLT0gcmV0Lmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgc3RyID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBzdHIubGVuZ3RoID8gc3RyLmxlbmd0aCA6IG47XG4gICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSByZXQgKz0gc3RyO2Vsc2UgcmV0ICs9IHN0ci5zbGljZSgwLCBuKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gc3RyLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBieXRlcyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGEgY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KSB7XG4gIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobik7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHAuZGF0YS5jb3B5KHJldCk7XG4gIG4gLT0gcC5kYXRhLmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgYnVmID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBidWYubGVuZ3RoID8gYnVmLmxlbmd0aCA6IG47XG4gICAgYnVmLmNvcHkocmV0LCByZXQubGVuZ3RoIC0gbiwgMCwgbmIpO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gYnVmLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBidWYuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gIC8vIElmIHdlIGdldCBoZXJlIGJlZm9yZSBjb25zdW1pbmcgYWxsIHRoZSBieXRlcywgdGhlbiB0aGF0IGlzIGFcbiAgLy8gYnVnIGluIG5vZGUuICBTaG91bGQgbmV2ZXIgaGFwcGVuLlxuICBpZiAoc3RhdGUubGVuZ3RoID4gMCkgdGhyb3cgbmV3IEVycm9yKCdcImVuZFJlYWRhYmxlKClcIiBjYWxsZWQgb24gbm9uLWVtcHR5IHN0cmVhbScpO1xuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCkge1xuICAgIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgICBwcm9jZXNzTmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUsIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7XG4gIC8vIENoZWNrIHRoYXQgd2UgZGlkbid0IGdldCBvbmUgbGFzdCB1bnNoaWZ0LlxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvckVhY2goeHMsIGYpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmKHhzW2ldLCBpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgdHJhbnNmb3JtIHN0cmVhbSBpcyBhIHJlYWRhYmxlL3dyaXRhYmxlIHN0cmVhbSB3aGVyZSB5b3UgZG9cbi8vIHNvbWV0aGluZyB3aXRoIHRoZSBkYXRhLiAgU29tZXRpbWVzIGl0J3MgY2FsbGVkIGEgXCJmaWx0ZXJcIixcbi8vIGJ1dCB0aGF0J3Mgbm90IGEgZ3JlYXQgbmFtZSBmb3IgaXQsIHNpbmNlIHRoYXQgaW1wbGllcyBhIHRoaW5nIHdoZXJlXG4vLyBzb21lIGJpdHMgcGFzcyB0aHJvdWdoLCBhbmQgb3RoZXJzIGFyZSBzaW1wbHkgaWdub3JlZC4gIChUaGF0IHdvdWxkXG4vLyBiZSBhIHZhbGlkIGV4YW1wbGUgb2YgYSB0cmFuc2Zvcm0sIG9mIGNvdXJzZS4pXG4vL1xuLy8gV2hpbGUgdGhlIG91dHB1dCBpcyBjYXVzYWxseSByZWxhdGVkIHRvIHRoZSBpbnB1dCwgaXQncyBub3QgYVxuLy8gbmVjZXNzYXJpbHkgc3ltbWV0cmljIG9yIHN5bmNocm9ub3VzIHRyYW5zZm9ybWF0aW9uLiAgRm9yIGV4YW1wbGUsXG4vLyBhIHpsaWIgc3RyZWFtIG1pZ2h0IHRha2UgbXVsdGlwbGUgcGxhaW4tdGV4dCB3cml0ZXMoKSwgYW5kIHRoZW5cbi8vIGVtaXQgYSBzaW5nbGUgY29tcHJlc3NlZCBjaHVuayBzb21lIHRpbWUgaW4gdGhlIGZ1dHVyZS5cbi8vXG4vLyBIZXJlJ3MgaG93IHRoaXMgd29ya3M6XG4vL1xuLy8gVGhlIFRyYW5zZm9ybSBzdHJlYW0gaGFzIGFsbCB0aGUgYXNwZWN0cyBvZiB0aGUgcmVhZGFibGUgYW5kIHdyaXRhYmxlXG4vLyBzdHJlYW0gY2xhc3Nlcy4gIFdoZW4geW91IHdyaXRlKGNodW5rKSwgdGhhdCBjYWxscyBfd3JpdGUoY2h1bmssY2IpXG4vLyBpbnRlcm5hbGx5LCBhbmQgcmV0dXJucyBmYWxzZSBpZiB0aGVyZSdzIGEgbG90IG9mIHBlbmRpbmcgd3JpdGVzXG4vLyBidWZmZXJlZCB1cC4gIFdoZW4geW91IGNhbGwgcmVhZCgpLCB0aGF0IGNhbGxzIF9yZWFkKG4pIHVudGlsXG4vLyB0aGVyZSdzIGVub3VnaCBwZW5kaW5nIHJlYWRhYmxlIGRhdGEgYnVmZmVyZWQgdXAuXG4vL1xuLy8gSW4gYSB0cmFuc2Zvcm0gc3RyZWFtLCB0aGUgd3JpdHRlbiBkYXRhIGlzIHBsYWNlZCBpbiBhIGJ1ZmZlci4gIFdoZW5cbi8vIF9yZWFkKG4pIGlzIGNhbGxlZCwgaXQgdHJhbnNmb3JtcyB0aGUgcXVldWVkIHVwIGRhdGEsIGNhbGxpbmcgdGhlXG4vLyBidWZmZXJlZCBfd3JpdGUgY2IncyBhcyBpdCBjb25zdW1lcyBjaHVua3MuICBJZiBjb25zdW1pbmcgYSBzaW5nbGVcbi8vIHdyaXR0ZW4gY2h1bmsgd291bGQgcmVzdWx0IGluIG11bHRpcGxlIG91dHB1dCBjaHVua3MsIHRoZW4gdGhlIGZpcnN0XG4vLyBvdXRwdXR0ZWQgYml0IGNhbGxzIHRoZSByZWFkY2IsIGFuZCBzdWJzZXF1ZW50IGNodW5rcyBqdXN0IGdvIGludG9cbi8vIHRoZSByZWFkIGJ1ZmZlciwgYW5kIHdpbGwgY2F1c2UgaXQgdG8gZW1pdCAncmVhZGFibGUnIGlmIG5lY2Vzc2FyeS5cbi8vXG4vLyBUaGlzIHdheSwgYmFjay1wcmVzc3VyZSBpcyBhY3R1YWxseSBkZXRlcm1pbmVkIGJ5IHRoZSByZWFkaW5nIHNpZGUsXG4vLyBzaW5jZSBfcmVhZCBoYXMgdG8gYmUgY2FsbGVkIHRvIHN0YXJ0IHByb2Nlc3NpbmcgYSBuZXcgY2h1bmsuICBIb3dldmVyLFxuLy8gYSBwYXRob2xvZ2ljYWwgaW5mbGF0ZSB0eXBlIG9mIHRyYW5zZm9ybSBjYW4gY2F1c2UgZXhjZXNzaXZlIGJ1ZmZlcmluZ1xuLy8gaGVyZS4gIEZvciBleGFtcGxlLCBpbWFnaW5lIGEgc3RyZWFtIHdoZXJlIGV2ZXJ5IGJ5dGUgb2YgaW5wdXQgaXNcbi8vIGludGVycHJldGVkIGFzIGFuIGludGVnZXIgZnJvbSAwLTI1NSwgYW5kIHRoZW4gcmVzdWx0cyBpbiB0aGF0IG1hbnlcbi8vIGJ5dGVzIG9mIG91dHB1dC4gIFdyaXRpbmcgdGhlIDQgYnl0ZXMge2ZmLGZmLGZmLGZmfSB3b3VsZCByZXN1bHQgaW5cbi8vIDFrYiBvZiBkYXRhIGJlaW5nIG91dHB1dC4gIEluIHRoaXMgY2FzZSwgeW91IGNvdWxkIHdyaXRlIGEgdmVyeSBzbWFsbFxuLy8gYW1vdW50IG9mIGlucHV0LCBhbmQgZW5kIHVwIHdpdGggYSB2ZXJ5IGxhcmdlIGFtb3VudCBvZiBvdXRwdXQuICBJblxuLy8gc3VjaCBhIHBhdGhvbG9naWNhbCBpbmZsYXRpbmcgbWVjaGFuaXNtLCB0aGVyZSdkIGJlIG5vIHdheSB0byB0ZWxsXG4vLyB0aGUgc3lzdGVtIHRvIHN0b3AgZG9pbmcgdGhlIHRyYW5zZm9ybS4gIEEgc2luZ2xlIDRNQiB3cml0ZSBjb3VsZFxuLy8gY2F1c2UgdGhlIHN5c3RlbSB0byBydW4gb3V0IG9mIG1lbW9yeS5cbi8vXG4vLyBIb3dldmVyLCBldmVuIGluIHN1Y2ggYSBwYXRob2xvZ2ljYWwgY2FzZSwgb25seSBhIHNpbmdsZSB3cml0dGVuIGNodW5rXG4vLyB3b3VsZCBiZSBjb25zdW1lZCwgYW5kIHRoZW4gdGhlIHJlc3Qgd291bGQgd2FpdCAodW4tdHJhbnNmb3JtZWQpIHVudGlsXG4vLyB0aGUgcmVzdWx0cyBvZiB0aGUgcHJldmlvdXMgdHJhbnNmb3JtZWQgY2h1bmsgd2VyZSBjb25zdW1lZC5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTtcblxudmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFRyYW5zZm9ybSwgRHVwbGV4KTtcblxuZnVuY3Rpb24gVHJhbnNmb3JtU3RhdGUoc3RyZWFtKSB7XG4gIHRoaXMuYWZ0ZXJUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoZXIsIGRhdGEpIHtcbiAgICByZXR1cm4gYWZ0ZXJUcmFuc2Zvcm0oc3RyZWFtLCBlciwgZGF0YSk7XG4gIH07XG5cbiAgdGhpcy5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHRoaXMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG4gIHRoaXMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRoaXMud3JpdGVlbmNvZGluZyA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgdmFyIHRzID0gc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKSB7XG4gICAgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignd3JpdGUgY2FsbGJhY2sgY2FsbGVkIG11bHRpcGxlIHRpbWVzJykpO1xuICB9XG5cbiAgdHMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRzLndyaXRlY2IgPSBudWxsO1xuXG4gIGlmIChkYXRhICE9PSBudWxsICYmIGRhdGEgIT09IHVuZGVmaW5lZCkgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgY2IoZXIpO1xuXG4gIHZhciBycyA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgcnMucmVhZGluZyA9IGZhbHNlO1xuICBpZiAocnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHtcbiAgICBzdHJlYW0uX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn1cblxuZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpIHJldHVybiBuZXcgVHJhbnNmb3JtKG9wdGlvbnMpO1xuXG4gIER1cGxleC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlID0gbmV3IFRyYW5zZm9ybVN0YXRlKHRoaXMpO1xuXG4gIHZhciBzdHJlYW0gPSB0aGlzO1xuXG4gIC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgLy8gd2UgaGF2ZSBpbXBsZW1lbnRlZCB0aGUgX3JlYWQgbWV0aG9kLCBhbmQgZG9uZSB0aGUgb3RoZXIgdGhpbmdzXG4gIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGVcbiAgLy8gc3luYyBndWFyZCBmbGFnLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMuZmx1c2g7XG4gIH1cblxuICAvLyBXaGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuXG4gIHRoaXMub25jZSgncHJlZmluaXNoJywgZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fZmx1c2ggPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uIChlciwgZGF0YSkge1xuICAgICAgZG9uZShzdHJlYW0sIGVyLCBkYXRhKTtcbiAgICB9KTtlbHNlIGRvbmUoc3RyZWFtKTtcbiAgfSk7XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ190cmFuc2Zvcm0oKSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fCBycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufTtcblxuLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS5cbi8vIF90cmFuc2Zvcm0gZG9lcyBhbGwgdGhlIHdvcmsuXG4vLyBUaGF0IHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhlIHJlYWRhYmxlIHNpZGUgd2FudHMgbW9yZSBkYXRhLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmIHRzLndyaXRlY2IgJiYgIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7XG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG4gICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gIH1cbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIER1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kuY2FsbCh0aGlzLCBlcnIsIGZ1bmN0aW9uIChlcnIyKSB7XG4gICAgY2IoZXJyMik7XG4gICAgX3RoaXMuZW1pdCgnY2xvc2UnKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXG4gIGlmIChkYXRhICE9PSBudWxsICYmIGRhdGEgIT09IHVuZGVmaW5lZCkgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgdmFyIHdzID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgdHMgPSBzdHJlYW0uX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh3cy5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHdzLmxlbmd0aCAhPSAwJyk7XG5cbiAgaWYgKHRzLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nJyk7XG5cbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHByb2Nlc3NOZXh0VGljayA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBXcml0YWJsZTtcblxuLyogPHJlcGxhY2VtZW50PiAqL1xuZnVuY3Rpb24gV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aGlzLmNodW5rID0gY2h1bms7XG4gIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgdGhpcy5jYWxsYmFjayA9IGNiO1xuICB0aGlzLm5leHQgPSBudWxsO1xufVxuXG4vLyBJdCBzZWVtcyBhIGxpbmtlZCBsaXN0IGJ1dCBpdCBpcyBub3Rcbi8vIHRoZXJlIHdpbGwgYmUgb25seSAyIG9mIHRoZXNlIGZvciBlYWNoIHN0cmVhbVxuZnVuY3Rpb24gQ29ya2VkUmVxdWVzdChzdGF0ZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMuZW50cnkgPSBudWxsO1xuICB0aGlzLmZpbmlzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBvbkNvcmtlZEZpbmlzaChfdGhpcywgc3RhdGUpO1xuICB9O1xufVxuLyogPC9yZXBsYWNlbWVudD4gKi9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBhc3luY1dyaXRlID0gIXByb2Nlc3MuYnJvd3NlciAmJiBbJ3YwLjEwJywgJ3YwLjkuJ10uaW5kZXhPZihwcm9jZXNzLnZlcnNpb24uc2xpY2UoMCwgNSkpID4gLTEgPyBzZXRJbW1lZGlhdGUgOiBwcm9jZXNzTmV4dFRpY2s7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpbnRlcm5hbFV0aWwgPSB7XG4gIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKVxufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG5cbnV0aWwuaW5oZXJpdHMoV3JpdGFibGUsIFN0cmVhbSk7XG5cbmZ1bmN0aW9uIG5vcCgpIHt9XG5cbmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgb3Igbm90IHRoaXMgc3RyZWFtXG4gIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIHRoYXQgd2UgYWx3YXlzIHJldHVybiBmYWxzZSBpZlxuICAvLyB0aGUgZW50aXJlIGJ1ZmZlciBpcyBub3QgZmx1c2hlZCBpbW1lZGlhdGVseSBvbiB3cml0ZSgpXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bSB8fCBod20gPT09IDAgPyBod20gOiBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIGlmIF9maW5hbCBoYXMgYmVlbiBjYWxsZWRcbiAgdGhpcy5maW5hbENhbGxlZCA9IGZhbHNlO1xuXG4gIC8vIGRyYWluIGV2ZW50IGZsYWcuXG4gIHRoaXMubmVlZERyYWluID0gZmFsc2U7XG4gIC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7XG4gIC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcbiAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xuICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmdcbiAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cbiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVTdHJpbmdzID0gIW5vRGVjb2RlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcbiAgLy8gc29ja2V0IG9yIGZpbGUuXG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLlxuICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcblxuICAvLyB3aGVuIHRydWUgYWxsIHdyaXRlcyB3aWxsIGJlIGJ1ZmZlcmVkIHVudGlsIC51bmNvcmsoKSBjYWxsXG4gIHRoaXMuY29ya2VkID0gMDtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoXG4gIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxuICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXG4gIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uIChlcikge1xuICAgIG9ud3JpdGUoc3RyZWFtLCBlcik7XG4gIH07XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQgdGhlIHVzZXIgc3VwcGxpZXMgdG8gd3JpdGUoY2h1bmssZW5jb2RpbmcsY2IpXG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG5cbiAgLy8gdGhlIGFtb3VudCB0aGF0IGlzIGJlaW5nIHdyaXR0ZW4gd2hlbiBfd3JpdGUgaXMgY2FsbGVkLlxuICB0aGlzLndyaXRlbGVuID0gMDtcblxuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cbiAgLy8gbnVtYmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3NcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG4gIHRoaXMucGVuZGluZ2NiID0gMDtcblxuICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG4gIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zXG4gIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuXG4gIC8vIGNvdW50IGJ1ZmZlcmVkIHJlcXVlc3RzXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuXG4gIC8vIGFsbG9jYXRlIHRoZSBmaXJzdCBDb3JrZWRSZXF1ZXN0LCB0aGVyZSBpcyBhbHdheXNcbiAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3b1xuICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpO1xufVxuXG5Xcml0YWJsZVN0YXRlLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXIoKSB7XG4gIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXJlZFJlcXVlc3Q7XG4gIHZhciBvdXQgPSBbXTtcbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0YXRlLnByb3RvdHlwZSwgJ2J1ZmZlcicsIHtcbiAgICAgIGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpXG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHt9XG59KSgpO1xuXG4vLyBUZXN0IF93cml0YWJsZVN0YXRlIGZvciBpbmhlcml0YW5jZSB0byBhY2NvdW50IGZvciBEdXBsZXggc3RyZWFtcyxcbi8vIHdob3NlIHByb3RvdHlwZSBjaGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS5cbnZhciByZWFsSGFzSW5zdGFuY2U7XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICBpZiAocmVhbEhhc0luc3RhbmNlLmNhbGwodGhpcywgb2JqZWN0KSkgcmV0dXJuIHRydWU7XG5cbiAgICAgIHJldHVybiBvYmplY3QgJiYgb2JqZWN0Ll93cml0YWJsZVN0YXRlIGluc3RhbmNlb2YgV3JpdGFibGVTdGF0ZTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiB0aGlzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBXcml0YWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0b28uXG4gIC8vIGByZWFsSGFzSW5zdGFuY2VgIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHVzaW5nIHBsYWluIGBpbnN0YW5jZW9mYFxuICAvLyB3b3VsZCByZXR1cm4gZmFsc2UsIGFzIG5vIGBfd3JpdGFibGVTdGF0ZWAgcHJvcGVydHkgaXMgYXR0YWNoZWQuXG5cbiAgLy8gVHJ5aW5nIHRvIHVzZSB0aGUgY3VzdG9tIGBpbnN0YW5jZW9mYCBmb3IgV3JpdGFibGUgaGVyZSB3aWxsIGFsc28gYnJlYWsgdGhlXG4gIC8vIE5vZGUuanMgTGF6eVRyYW5zZm9ybSBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaGFzIGEgbm9uLXRyaXZpYWwgZ2V0dGVyIGZvclxuICAvLyBgX3dyaXRhYmxlU3RhdGVgIHRoYXQgd291bGQgbGVhZCB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gIGlmICghcmVhbEhhc0luc3RhbmNlLmNhbGwoV3JpdGFibGUsIHRoaXMpICYmICEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHtcbiAgICByZXR1cm4gbmV3IFdyaXRhYmxlKG9wdGlvbnMpO1xuICB9XG5cbiAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeS5cbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGUgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRlID0gb3B0aW9ucy53cml0ZTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZXYgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRldiA9IG9wdGlvbnMud3JpdGV2O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmluYWwgPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZpbmFsID0gb3B0aW9ucy5maW5hbDtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG4vLyBPdGhlcndpc2UgcGVvcGxlIGNhbiBwaXBlIFdyaXRhYmxlIHN0cmVhbXMsIHdoaWNoIGlzIGp1c3Qgd3JvbmcuXG5Xcml0YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignQ2Fubm90IHBpcGUsIG5vdCByZWFkYWJsZScpKTtcbn07XG5cbmZ1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoc3RyZWFtLCBjYikge1xuICB2YXIgZXIgPSBuZXcgRXJyb3IoJ3dyaXRlIGFmdGVyIGVuZCcpO1xuICAvLyBUT0RPOiBkZWZlciBlcnJvciBldmVudHMgY29uc2lzdGVudGx5IGV2ZXJ5d2hlcmUsIG5vdCBqdXN0IHRoZSBjYlxuICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIHByb2Nlc3NOZXh0VGljayhjYiwgZXIpO1xufVxuXG4vLyBDaGVja3MgdGhhdCBhIHVzZXItc3VwcGxpZWQgY2h1bmsgaXMgdmFsaWQsIGVzcGVjaWFsbHkgZm9yIHRoZSBwYXJ0aWN1bGFyXG4vLyBtb2RlIHRoZSBzdHJlYW0gaXMgaW4uIEN1cnJlbnRseSB0aGlzIG1lYW5zIHRoYXQgYG51bGxgIGlzIG5ldmVyIGFjY2VwdGVkXG4vLyBhbmQgdW5kZWZpbmVkL25vbi1zdHJpbmcgdmFsdWVzIGFyZSBvbmx5IGFsbG93ZWQgaW4gb2JqZWN0IG1vZGUuXG5mdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBjYikge1xuICB2YXIgdmFsaWQgPSB0cnVlO1xuICB2YXIgZXIgPSBmYWxzZTtcblxuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ01heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgaWYgKGVyKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIHByb2Nlc3NOZXh0VGljayhjYiwgZXIpO1xuICAgIHZhbGlkID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbGlkO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuICB2YXIgcmV0ID0gZmFsc2U7XG4gIHZhciBpc0J1ZiA9IF9pc1VpbnQ4QXJyYXkoY2h1bmspICYmICFzdGF0ZS5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0J1ZiAmJiAhQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkge1xuICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoaXNCdWYpIGVuY29kaW5nID0gJ2J1ZmZlcic7ZWxzZSBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcblxuICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSBjYiA9IG5vcDtcblxuICBpZiAoc3RhdGUuZW5kZWQpIHdyaXRlQWZ0ZXJFbmQodGhpcywgY2IpO2Vsc2UgaWYgKGlzQnVmIHx8IHZhbGlkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBjYikpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgc3RhdGUuY29ya2VkKys7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUudW5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQtLTtcblxuICAgIGlmICghc3RhdGUud3JpdGluZyAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIGNsZWFyQnVmZmVyKHRoaXMsIHN0YXRlKTtcbiAgfVxufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnNldERlZmF1bHRFbmNvZGluZyA9IGZ1bmN0aW9uIHNldERlZmF1bHRFbmNvZGluZyhlbmNvZGluZykge1xuICAvLyBub2RlOjpQYXJzZUVuY29kaW5nKCkgcmVxdWlyZXMgbG93ZXIgY2FzZS5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIGVuY29kaW5nID0gZW5jb2RpbmcudG9Mb3dlckNhc2UoKTtcbiAgaWYgKCEoWydoZXgnLCAndXRmOCcsICd1dGYtOCcsICdhc2NpaScsICdiaW5hcnknLCAnYmFzZTY0JywgJ3VjczInLCAndWNzLTInLCAndXRmMTZsZScsICd1dGYtMTZsZScsICdyYXcnXS5pbmRleE9mKChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpKSA+IC0xKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKTtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2RpbmcgPSBlbmNvZGluZztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKSB7XG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiBzdGF0ZS5kZWNvZGVTdHJpbmdzICE9PSBmYWxzZSAmJiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICB9XG4gIHJldHVybiBjaHVuaztcbn1cblxuLy8gaWYgd2UncmUgYWxyZWFkeSB3cml0aW5nIHNvbWV0aGluZywgdGhlbiBqdXN0IHB1dCB0aGlzXG4vLyBpbiB0aGUgcXVldWUsIGFuZCB3YWl0IG91ciB0dXJuLiAgT3RoZXJ3aXNlLCBjYWxsIF93cml0ZVxuLy8gSWYgd2UgcmV0dXJuIGZhbHNlLCB0aGVuIHdlIG5lZWQgYSBkcmFpbiBldmVudCwgc28gc2V0IHRoYXQgZmxhZy5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgaWYgKCFpc0J1Zikge1xuICAgIHZhciBuZXdDaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuICAgIGlmIChjaHVuayAhPT0gbmV3Q2h1bmspIHtcbiAgICAgIGlzQnVmID0gdHJ1ZTtcbiAgICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gICAgICBjaHVuayA9IG5ld0NodW5rO1xuICAgIH1cbiAgfVxuICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgc3RhdGUubGVuZ3RoICs9IGxlbjtcblxuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG4gIGlmICghcmV0KSBzdGF0ZS5uZWVkRHJhaW4gPSB0cnVlO1xuXG4gIGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZCkge1xuICAgIHZhciBsYXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0ge1xuICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLFxuICAgICAgaXNCdWY6IGlzQnVmLFxuICAgICAgY2FsbGJhY2s6IGNiLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG4gICAgaWYgKGxhc3QpIHtcbiAgICAgIGxhc3QubmV4dCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7XG4gIH0gZWxzZSB7XG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBpZiAod3JpdGV2KSBzdHJlYW0uX3dyaXRldihjaHVuaywgc3RhdGUub253cml0ZSk7ZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7XG4gIHN0YXRlLnN5bmMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikge1xuICAtLXN0YXRlLnBlbmRpbmdjYjtcblxuICBpZiAoc3luYykge1xuICAgIC8vIGRlZmVyIHRoZSBjYWxsYmFjayBpZiB3ZSBhcmUgYmVpbmcgY2FsbGVkIHN5bmNocm9ub3VzbHlcbiAgICAvLyB0byBhdm9pZCBwaWxpbmcgdXAgdGhpbmdzIG9uIHRoZSBzdGFja1xuICAgIHByb2Nlc3NOZXh0VGljayhjYiwgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBhbmQgaXQgd2lsbCBhbHdheXMgaGFwcGVuXG4gICAgLy8gYWZ0ZXIgZXJyb3JcbiAgICBwcm9jZXNzTmV4dFRpY2soZmluaXNoTWF5YmUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY2FsbGVyIGV4cGVjdCB0aGlzIHRvIGhhcHBlbiBiZWZvcmUgaWZcbiAgICAvLyBpdCBpcyBhc3luY1xuICAgIGNiKGVyKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGJ1dCBmaW5pc2ggbXVzdFxuICAgIC8vIGFsd2F5cyBmb2xsb3cgZXJyb3JcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcblxuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuXG4gIGlmIChlcikgb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYik7ZWxzZSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXRcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcblxuICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICAvKjxyZXBsYWNlbWVudD4qL1xuICAgICAgYXN5bmNXcml0ZShhZnRlcldyaXRlLCBzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgLyo8L3JlcGxhY2VtZW50PiovXG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpO1xuICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgY2IoKTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbi8vIE11c3QgZm9yY2UgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIG5leHRUaWNrLCBzbyB0aGF0IHdlIGRvbid0XG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG4vLyB2YWx1ZSwgYW5kIGhhcyBhIGNoYW5jZSB0byBhdHRhY2ggYSAnZHJhaW4nIGxpc3RlbmVyLlxuZnVuY3Rpb24gb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHtcbiAgICBzdGF0ZS5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKTtcbiAgfVxufVxuXG4vLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdFxuZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0O1xuXG4gIGlmIChzdHJlYW0uX3dyaXRldiAmJiBlbnRyeSAmJiBlbnRyeS5uZXh0KSB7XG4gICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKVxuICAgIHZhciBsID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQ7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShsKTtcbiAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlO1xuICAgIGhvbGRlci5lbnRyeSA9IGVudHJ5O1xuXG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgYWxsQnVmZmVycyA9IHRydWU7XG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICBidWZmZXJbY291bnRdID0gZW50cnk7XG4gICAgICBpZiAoIWVudHJ5LmlzQnVmKSBhbGxCdWZmZXJzID0gZmFsc2U7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBjb3VudCArPSAxO1xuICAgIH1cbiAgICBidWZmZXIuYWxsQnVmZmVycyA9IGFsbEJ1ZmZlcnM7XG5cbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgYnVmZmVyLCAnJywgaG9sZGVyLmZpbmlzaCk7XG5cbiAgICAvLyBkb1dyaXRlIGlzIGFsbW9zdCBhbHdheXMgYXN5bmMsIGRlZmVyIHRoZXNlIHRvIHNhdmUgYSBiaXQgb2YgdGltZVxuICAgIC8vIGFzIHRoZSBob3QgcGF0aCBlbmRzIHdpdGggZG9Xcml0ZVxuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICAgIGlmIChob2xkZXIubmV4dCkge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gaG9sZGVyLm5leHQ7XG4gICAgICBob2xkZXIubmV4dCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHN0YXRlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gU2xvdyBjYXNlLCB3cml0ZSBjaHVua3Mgb25lLWJ5LW9uZVxuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7XG4gICAgICB2YXIgZW5jb2RpbmcgPSBlbnRyeS5lbmNvZGluZztcbiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgICAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5XG4gICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cbiAgICAgIGlmIChzdGF0ZS53cml0aW5nKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlbnRyeSA9PT0gbnVsbCkgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIH1cblxuICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRXJyb3IoJ193cml0ZSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGV2ID0gbnVsbDtcblxuV3JpdGFibGUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gY2h1bms7XG4gICAgY2h1bmsgPSBudWxsO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChjaHVuayAhPT0gbnVsbCAmJiBjaHVuayAhPT0gdW5kZWZpbmVkKSB0aGlzLndyaXRlKGNodW5rLCBlbmNvZGluZyk7XG5cbiAgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3NcbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZCA9IDE7XG4gICAgdGhpcy51bmNvcmsoKTtcbiAgfVxuXG4gIC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy5cbiAgaWYgKCFzdGF0ZS5lbmRpbmcgJiYgIXN0YXRlLmZpbmlzaGVkKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xufTtcblxuZnVuY3Rpb24gbmVlZEZpbmlzaChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuZW5kaW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS53cml0aW5nO1xufVxuZnVuY3Rpb24gY2FsbEZpbmFsKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RyZWFtLl9maW5hbChmdW5jdGlvbiAoZXJyKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgaWYgKGVycikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9XG4gICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnByZWZpbmlzaGVkICYmICFzdGF0ZS5maW5hbENhbGxlZCkge1xuICAgIGlmICh0eXBlb2Ygc3RyZWFtLl9maW5hbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgICBzdGF0ZS5maW5hbENhbGxlZCA9IHRydWU7XG4gICAgICBwcm9jZXNzTmV4dFRpY2soY2FsbEZpbmFsLCBzdHJlYW0sIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG4gIGlmIChuZWVkKSB7XG4gICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5lZWQ7XG59XG5cbmZ1bmN0aW9uIGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7XG4gIHN0YXRlLmVuZGluZyA9IHRydWU7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICBpZiAoY2IpIHtcbiAgICBpZiAoc3RhdGUuZmluaXNoZWQpIHByb2Nlc3NOZXh0VGljayhjYik7ZWxzZSBzdHJlYW0ub25jZSgnZmluaXNoJywgY2IpO1xuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgc3RyZWFtLndyaXRhYmxlID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9uQ29ya2VkRmluaXNoKGNvcmtSZXEsIHN0YXRlLCBlcnIpIHtcbiAgdmFyIGVudHJ5ID0gY29ya1JlcS5lbnRyeTtcbiAgY29ya1JlcS5lbnRyeSA9IG51bGw7XG4gIHdoaWxlIChlbnRyeSkge1xuICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGNiKGVycik7XG4gICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICB9XG4gIGlmIChzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUpIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IGNvcmtSZXE7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gY29ya1JlcTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMuZW5kKCk7XG4gIGNiKGVycik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbmZ1bmN0aW9uIGNvcHlCdWZmZXIoc3JjLCB0YXJnZXQsIG9mZnNldCkge1xuICBzcmMuY29weSh0YXJnZXQsIG9mZnNldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCdWZmZXJMaXN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWZmZXJMaXN0KTtcblxuICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogdGhpcy5oZWFkIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gc2hpZnQoKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIC0tdGhpcy5sZW5ndGg7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKHMpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7XG4gICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgIHJldCArPSBzICsgcC5kYXRhO1xuICAgIH1yZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdChuKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChwKSB7XG4gICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgIGkgKz0gcC5kYXRhLmxlbmd0aDtcbiAgICAgIHAgPSBwLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgcmV0dXJuIEJ1ZmZlckxpc3Q7XG59KCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcHJvY2Vzc05leHRUaWNrID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vLyB1bmRvY3VtZW50ZWQgY2IoKSBBUEksIG5lZWRlZCBmb3IgY29yZSwgbm90IGZvciBwdWJsaWMgQVBJXG5mdW5jdGlvbiBkZXN0cm95KGVyciwgY2IpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgcmVhZGFibGVEZXN0cm95ZWQgPSB0aGlzLl9yZWFkYWJsZVN0YXRlICYmIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB2YXIgd3JpdGFibGVEZXN0cm95ZWQgPSB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuXG4gIGlmIChyZWFkYWJsZURlc3Ryb3llZCB8fCB3cml0YWJsZURlc3Ryb3llZCkge1xuICAgIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9IGVsc2UgaWYgKGVyciAmJiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUgfHwgIXRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSkge1xuICAgICAgcHJvY2Vzc05leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyB3ZSBzZXQgZGVzdHJveWVkIHRvIHRydWUgYmVmb3JlIGZpcmluZyBlcnJvciBjYWxsYmFja3MgaW4gb3JkZXJcbiAgLy8gdG8gbWFrZSBpdCByZS1lbnRyYW5jZSBzYWZlIGluIGNhc2UgZGVzdHJveSgpIGlzIGNhbGxlZCB3aXRoaW4gY2FsbGJhY2tzXG5cbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICAvLyBpZiB0aGlzIGlzIGEgZHVwbGV4IHN0cmVhbSBtYXJrIHRoZSB3cml0YWJsZSBwYXJ0IGFzIGRlc3Ryb3llZCBhcyB3ZWxsXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgdGhpcy5fZGVzdHJveShlcnIgfHwgbnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmICghY2IgJiYgZXJyKSB7XG4gICAgICBwcm9jZXNzTmV4dFRpY2soZW1pdEVycm9yTlQsIF90aGlzLCBlcnIpO1xuICAgICAgaWYgKF90aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgIF90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB1bmRlc3Ryb3koKSB7XG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdEVycm9yTlQoc2VsZiwgZXJyKSB7XG4gIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVzdHJveTogZGVzdHJveSxcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3lcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIGlzRW5jb2RpbmcgPSBCdWZmZXIuaXNFbmNvZGluZyB8fCBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgZW5jb2RpbmcgPSAnJyArIGVuY29kaW5nO1xuICBzd2l0Y2ggKGVuY29kaW5nICYmIGVuY29kaW5nLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOmNhc2UgJ3V0ZjgnOmNhc2UgJ3V0Zi04JzpjYXNlICdhc2NpaSc6Y2FzZSAnYmluYXJ5JzpjYXNlICdiYXNlNjQnOmNhc2UgJ3VjczInOmNhc2UgJ3Vjcy0yJzpjYXNlICd1dGYxNmxlJzpjYXNlICd1dGYtMTZsZSc6Y2FzZSAncmF3JzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9ub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgaWYgKCFlbmMpIHJldHVybiAndXRmOCc7XG4gIHZhciByZXRyaWVkO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jKSB7XG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuICd1dGY4JztcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiAndXRmMTZsZSc7XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuICdsYXRpbjEnO1xuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBlbmM7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAocmV0cmllZCkgcmV0dXJuOyAvLyB1bmRlZmluZWRcbiAgICAgICAgZW5jID0gKCcnICsgZW5jKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXRyaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIERvIG5vdCBjYWNoZSBgQnVmZmVyLmlzRW5jb2RpbmdgIHdoZW4gY2hlY2tpbmcgZW5jb2RpbmcgbmFtZXMgYXMgc29tZVxuLy8gbW9kdWxlcyBtb25rZXktcGF0Y2ggaXQgdG8gc3VwcG9ydCBhZGRpdGlvbmFsIGVuY29kaW5nc1xuZnVuY3Rpb24gbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIHZhciBuZW5jID0gX25vcm1hbGl6ZUVuY29kaW5nKGVuYyk7XG4gIGlmICh0eXBlb2YgbmVuYyAhPT0gJ3N0cmluZycgJiYgKEJ1ZmZlci5pc0VuY29kaW5nID09PSBpc0VuY29kaW5nIHx8ICFpc0VuY29kaW5nKGVuYykpKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmMpO1xuICByZXR1cm4gbmVuYyB8fCBlbmM7XG59XG5cbi8vIFN0cmluZ0RlY29kZXIgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGZvciBlZmZpY2llbnRseSBzcGxpdHRpbmcgYSBzZXJpZXMgb2Zcbi8vIGJ1ZmZlcnMgaW50byBhIHNlcmllcyBvZiBKUyBzdHJpbmdzIHdpdGhvdXQgYnJlYWtpbmcgYXBhcnQgbXVsdGktYnl0ZVxuLy8gY2hhcmFjdGVycy5cbmV4cG9ydHMuU3RyaW5nRGVjb2RlciA9IFN0cmluZ0RlY29kZXI7XG5mdW5jdGlvbiBTdHJpbmdEZWNvZGVyKGVuY29kaW5nKSB7XG4gIHRoaXMuZW5jb2RpbmcgPSBub3JtYWxpemVFbmNvZGluZyhlbmNvZGluZyk7XG4gIHZhciBuYjtcbiAgc3dpdGNoICh0aGlzLmVuY29kaW5nKSB7XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICB0aGlzLnRleHQgPSB1dGYxNlRleHQ7XG4gICAgICB0aGlzLmVuZCA9IHV0ZjE2RW5kO1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndXRmOCc6XG4gICAgICB0aGlzLmZpbGxMYXN0ID0gdXRmOEZpbGxMYXN0O1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHRoaXMudGV4dCA9IGJhc2U2NFRleHQ7XG4gICAgICB0aGlzLmVuZCA9IGJhc2U2NEVuZDtcbiAgICAgIG5iID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLndyaXRlID0gc2ltcGxlV3JpdGU7XG4gICAgICB0aGlzLmVuZCA9IHNpbXBsZUVuZDtcbiAgICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgdGhpcy5sYXN0VG90YWwgPSAwO1xuICB0aGlzLmxhc3RDaGFyID0gQnVmZmVyLmFsbG9jVW5zYWZlKG5iKTtcbn1cblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmIChidWYubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gIHZhciByO1xuICB2YXIgaTtcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICByID0gdGhpcy5maWxsTGFzdChidWYpO1xuICAgIGlmIChyID09PSB1bmRlZmluZWQpIHJldHVybiAnJztcbiAgICBpID0gdGhpcy5sYXN0TmVlZDtcbiAgICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgfSBlbHNlIHtcbiAgICBpID0gMDtcbiAgfVxuICBpZiAoaSA8IGJ1Zi5sZW5ndGgpIHJldHVybiByID8gciArIHRoaXMudGV4dChidWYsIGkpIDogdGhpcy50ZXh0KGJ1ZiwgaSk7XG4gIHJldHVybiByIHx8ICcnO1xufTtcblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gdXRmOEVuZDtcblxuLy8gUmV0dXJucyBvbmx5IGNvbXBsZXRlIGNoYXJhY3RlcnMgaW4gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLnRleHQgPSB1dGY4VGV4dDtcblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBwYXJ0aWFsIG5vbi1VVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZmlsbExhc3QgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59O1xuXG4vLyBDaGVja3MgdGhlIHR5cGUgb2YgYSBVVEYtOCBieXRlLCB3aGV0aGVyIGl0J3MgQVNDSUksIGEgbGVhZGluZyBieXRlLCBvciBhXG4vLyBjb250aW51YXRpb24gYnl0ZS5cbmZ1bmN0aW9uIHV0ZjhDaGVja0J5dGUoYnl0ZSkge1xuICBpZiAoYnl0ZSA8PSAweDdGKSByZXR1cm4gMDtlbHNlIGlmIChieXRlID4+IDUgPT09IDB4MDYpIHJldHVybiAyO2Vsc2UgaWYgKGJ5dGUgPj4gNCA9PT0gMHgwRSkgcmV0dXJuIDM7ZWxzZSBpZiAoYnl0ZSA+PiAzID09PSAweDFFKSByZXR1cm4gNDtcbiAgcmV0dXJuIC0xO1xufVxuXG4vLyBDaGVja3MgYXQgbW9zdCAzIGJ5dGVzIGF0IHRoZSBlbmQgb2YgYSBCdWZmZXIgaW4gb3JkZXIgdG8gZGV0ZWN0IGFuXG4vLyBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyLiBUaGUgdG90YWwgbnVtYmVyIG9mIGJ5dGVzICgyLCAzLCBvciA0KVxuLy8gbmVlZGVkIHRvIGNvbXBsZXRlIHRoZSBVVEYtOCBjaGFyYWN0ZXIgKGlmIGFwcGxpY2FibGUpIGFyZSByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0luY29tcGxldGUoc2VsZiwgYnVmLCBpKSB7XG4gIHZhciBqID0gYnVmLmxlbmd0aCAtIDE7XG4gIGlmIChqIDwgaSkgcmV0dXJuIDA7XG4gIHZhciBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAxO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSkgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDI7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkge1xuICAgICAgaWYgKG5iID09PSAyKSBuYiA9IDA7ZWxzZSBzZWxmLmxhc3ROZWVkID0gbmIgLSAzO1xuICAgIH1cbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbi8vIFZhbGlkYXRlcyBhcyBtYW55IGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciBhc1xuLy8gbmVlZGVkIG9yIGFyZSBhdmFpbGFibGUuIElmIHdlIHNlZSBhIG5vbi1jb250aW51YXRpb24gYnl0ZSB3aGVyZSB3ZSBleHBlY3Rcbi8vIG9uZSwgd2UgXCJyZXBsYWNlXCIgdGhlIHZhbGlkYXRlZCBjb250aW51YXRpb24gYnl0ZXMgd2UndmUgc2VlbiBzbyBmYXIgd2l0aFxuLy8gVVRGLTggcmVwbGFjZW1lbnQgY2hhcmFjdGVycyAoJ1xcdWZmZmQnKSwgdG8gbWF0Y2ggdjgncyBVVEYtOCBkZWNvZGluZ1xuLy8gYmVoYXZpb3IuIFRoZSBjb250aW51YXRpb24gYnl0ZSBjaGVjayBpcyBpbmNsdWRlZCB0aHJlZSB0aW1lcyBpbiB0aGUgY2FzZVxuLy8gd2hlcmUgYWxsIG9mIHRoZSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgY2hhcmFjdGVyIGV4aXN0IGluIHRoZSBzYW1lIGJ1ZmZlci5cbi8vIEl0IGlzIGFsc28gZG9uZSB0aGlzIHdheSBhcyBhIHNsaWdodCBwZXJmb3JtYW5jZSBpbmNyZWFzZSBpbnN0ZWFkIG9mIHVzaW5nIGFcbi8vIGxvb3AuXG5mdW5jdGlvbiB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHNlbGYsIGJ1ZiwgcCkge1xuICBpZiAoKGJ1ZlswXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgc2VsZi5sYXN0TmVlZCA9IDA7XG4gICAgcmV0dXJuICdcXHVmZmZkJy5yZXBlYXQocCk7XG4gIH1cbiAgaWYgKHNlbGYubGFzdE5lZWQgPiAxICYmIGJ1Zi5sZW5ndGggPiAxKSB7XG4gICAgaWYgKChidWZbMV0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgc2VsZi5sYXN0TmVlZCA9IDE7XG4gICAgICByZXR1cm4gJ1xcdWZmZmQnLnJlcGVhdChwICsgMSk7XG4gICAgfVxuICAgIGlmIChzZWxmLmxhc3ROZWVkID4gMiAmJiBidWYubGVuZ3RoID4gMikge1xuICAgICAgaWYgKChidWZbMl0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgICBzZWxmLmxhc3ROZWVkID0gMjtcbiAgICAgICAgcmV0dXJuICdcXHVmZmZkJy5yZXBlYXQocCArIDIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXIuXG5mdW5jdGlvbiB1dGY4RmlsbExhc3QoYnVmKSB7XG4gIHZhciBwID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICB2YXIgciA9IHV0ZjhDaGVja0V4dHJhQnl0ZXModGhpcywgYnVmLCBwKTtcbiAgaWYgKHIgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHI7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn1cblxuLy8gUmV0dXJucyBhbGwgY29tcGxldGUgVVRGLTggY2hhcmFjdGVycyBpbiBhIEJ1ZmZlci4gSWYgdGhlIEJ1ZmZlciBlbmRlZCBvbiBhXG4vLyBwYXJ0aWFsIGNoYXJhY3RlciwgdGhlIGNoYXJhY3RlcidzIGJ5dGVzIGFyZSBidWZmZXJlZCB1bnRpbCB0aGUgcmVxdWlyZWRcbi8vIG51bWJlciBvZiBieXRlcyBhcmUgYXZhaWxhYmxlLlxuZnVuY3Rpb24gdXRmOFRleHQoYnVmLCBpKSB7XG4gIHZhciB0b3RhbCA9IHV0ZjhDaGVja0luY29tcGxldGUodGhpcywgYnVmLCBpKTtcbiAgaWYgKCF0aGlzLmxhc3ROZWVkKSByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSk7XG4gIHRoaXMubGFzdFRvdGFsID0gdG90YWw7XG4gIHZhciBlbmQgPSBidWYubGVuZ3RoIC0gKHRvdGFsIC0gdGhpcy5sYXN0TmVlZCk7XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIDAsIGVuZCk7XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpLCBlbmQpO1xufVxuXG4vLyBGb3IgVVRGLTgsIGEgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGZvciBlYWNoIGJ1ZmZlcmVkIGJ5dGUgb2YgYSAocGFydGlhbClcbi8vIGNoYXJhY3RlciBuZWVkcyB0byBiZSBhZGRlZCB0byB0aGUgb3V0cHV0LlxuZnVuY3Rpb24gdXRmOEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyAnXFx1ZmZmZCcucmVwZWF0KHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCk7XG4gIHJldHVybiByO1xufVxuXG4vLyBVVEYtMTZMRSB0eXBpY2FsbHkgbmVlZHMgdHdvIGJ5dGVzIHBlciBjaGFyYWN0ZXIsIGJ1dCBldmVuIGlmIHdlIGhhdmUgYW4gZXZlblxuLy8gbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSwgd2UgbmVlZCB0byBjaGVjayBpZiB3ZSBlbmQgb24gYSBsZWFkaW5nL2hpZ2hcbi8vIHN1cnJvZ2F0ZS4gSW4gdGhhdCBjYXNlLCB3ZSBuZWVkIHRvIHdhaXQgZm9yIHRoZSBuZXh0IHR3byBieXRlcyBpbiBvcmRlciB0b1xuLy8gZGVjb2RlIHRoZSBsYXN0IGNoYXJhY3RlciBwcm9wZXJseS5cbmZ1bmN0aW9uIHV0ZjE2VGV4dChidWYsIGkpIHtcbiAgaWYgKChidWYubGVuZ3RoIC0gaSkgJSAyID09PSAwKSB7XG4gICAgdmFyIHIgPSBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpKTtcbiAgICBpZiAocikge1xuICAgICAgdmFyIGMgPSByLmNoYXJDb2RlQXQoci5sZW5ndGggLSAxKTtcbiAgICAgIGlmIChjID49IDB4RDgwMCAmJiBjIDw9IDB4REJGRikge1xuICAgICAgICB0aGlzLmxhc3ROZWVkID0gMjtcbiAgICAgICAgdGhpcy5sYXN0VG90YWwgPSA0O1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgICAgIHJldHVybiByLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDE7XG4gIHRoaXMubGFzdFRvdGFsID0gMjtcbiAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpLCBidWYubGVuZ3RoIC0gMSk7XG59XG5cbi8vIEZvciBVVEYtMTZMRSB3ZSBkbyBub3QgZXhwbGljaXRseSBhcHBlbmQgc3BlY2lhbCByZXBsYWNlbWVudCBjaGFyYWN0ZXJzIGlmIHdlXG4vLyBlbmQgb24gYSBwYXJ0aWFsIGNoYXJhY3Rlciwgd2Ugc2ltcGx5IGxldCB2OCBoYW5kbGUgdGhhdC5cbmZ1bmN0aW9uIHV0ZjE2RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgdmFyIGVuZCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgICByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ3V0ZjE2bGUnLCAwLCBlbmQpO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRUZXh0KGJ1ZiwgaSkge1xuICB2YXIgbiA9IChidWYubGVuZ3RoIC0gaSkgJSAzO1xuICBpZiAobiA9PT0gMCkgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSk7XG4gIHRoaXMubGFzdE5lZWQgPSAzIC0gbjtcbiAgdGhpcy5sYXN0VG90YWwgPSAzO1xuICBpZiAobiA9PT0gMSkge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGksIGJ1Zi5sZW5ndGggLSBuKTtcbn1cblxuZnVuY3Rpb24gYmFzZTY0RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ2Jhc2U2NCcsIDAsIDMgLSB0aGlzLmxhc3ROZWVkKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFBhc3MgYnl0ZXMgb24gdGhyb3VnaCBmb3Igc2luZ2xlLWJ5dGUgZW5jb2RpbmdzIChlLmcuIGFzY2lpLCBsYXRpbjEsIGhleClcbmZ1bmN0aW9uIHNpbXBsZVdyaXRlKGJ1Zikge1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiBzaW1wbGVFbmQoYnVmKSB7XG4gIHJldHVybiBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcmVhZGFibGUuanMnKTtcbmV4cG9ydHMuU3RyZWFtID0gZXhwb3J0cztcbmV4cG9ydHMuUmVhZGFibGUgPSBleHBvcnRzO1xuZXhwb3J0cy5Xcml0YWJsZSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbmV4cG9ydHMuRHVwbGV4ID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbmV4cG9ydHMuVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMnKTtcbmV4cG9ydHMuUGFzc1Rocm91Z2ggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFkeXN0YXRlID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWR5c3RhdGUnKVxuICAsIHdpbiA9IChuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykpKClcbiAgLCBjb21wbGV0ZSA9ICdjb21wbGV0ZSdcbiAgLCByb290ID0gdHJ1ZVxuICAsIGRvYyA9IHdpbi5kb2N1bWVudFxuICAsIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG4oZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgLy9cbiAgLy8gQmFpbCBvdXQgZWFybHkgaWYgdGhlIGRvY3VtZW50IGlzIGFscmVhZHkgZnVsbHkgbG9hZGVkLiBUaGlzIG1lYW5zIHRoYXQgdGhpc1xuICAvLyBzY3JpcHQgaXMgbG9hZGVkIGFmdGVyIHRoZSBvbmxvYWQgZXZlbnQuXG4gIC8vXG4gIGlmIChjb21wbGV0ZSA9PT0gZG9jLnJlYWR5U3RhdGUpIHtcbiAgICByZXR1cm4gcmVhZHlzdGF0ZS5jaGFuZ2UoY29tcGxldGUpO1xuICB9XG5cbiAgLy9cbiAgLy8gVXNlIGZlYXR1cmUgZGV0ZWN0aW9uIHRvIHNlZSB3aGF0IGtpbmQgb2YgYnJvd3NlciBlbnZpcm9ubWVudCB3ZSdyZSBkZWFsaW5nXG4gIC8vIHdpdGguIE9sZCB2ZXJzaW9ucyBvZiBJbnRlcm5ldCBFeHBsb3JlciBkbyBub3Qgc3VwcG9ydCB0aGUgYWRkRXZlbnRMaXN0ZW5lclxuICAvLyBpbnRlcmZhY2Ugc28gd2UgY2FuIGFsc28gc2FmZWx5IGFzc3VtZSB0aGF0IHdlIG5lZWQgdG8gZmFsbCBiYWNrIHRvIHBvbGxpbmcuXG4gIC8vXG4gIHZhciBtb2Rlcm4gPSAhIWRvYy5hZGRFdmVudExpc3RlbmVyXG4gICAgLCBwcmVmaXggPSBtb2Rlcm4gPyAnJyA6ICdvbidcbiAgICAsIG9uID0gbW9kZXJuID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ2F0dGFjaEV2ZW50J1xuICAgICwgb2ZmID0gbW9kZXJuID8gJ3JlbW92ZUV2ZW50TGlzdGVuZXInIDogJ2RldGFjaEV2ZW50JztcblxuICBpZiAoIW1vZGVybiAmJiAnZnVuY3Rpb24nID09PSB0eXBlb2YgaHRtbC5kb1Njcm9sbCkge1xuICAgIHRyeSB7IHJvb3QgPSAhd2luLmZyYW1lRWxlbWVudDsgfVxuICAgIGNhdGNoIChlKSB7fVxuXG4gICAgaWYgKHJvb3QpIChmdW5jdGlvbiBwb2xsaW5nKCkge1xuICAgICAgdHJ5IHsgaHRtbC5kb1Njcm9sbCgnbGVmdCcpOyB9XG4gICAgICBjYXRjaCAoZSkgeyByZXR1cm4gc2V0VGltZW91dChwb2xsaW5nLCA1MCk7IH1cblxuICAgICAgcmVhZHlzdGF0ZS5jaGFuZ2UoJ2ludGVyYWN0aXZlJyk7XG4gICAgfSgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgdGhlIHZhcmlvdXMgb2YgZXZlbnQgbGlzdGVuZXIgY2FsbHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2dCBTaW1wbGUgRE9NIGV2ZW50LlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGNoYW5nZShldnQpIHtcbiAgICBldnQgPSBldnQgfHwgd2luLmV2ZW50O1xuXG4gICAgaWYgKCdyZWFkeXN0YXRlY2hhbmdlJyA9PT0gZXZ0LnR5cGUpIHtcbiAgICAgIHJlYWR5c3RhdGUuY2hhbmdlKGRvYy5yZWFkeVN0YXRlKTtcbiAgICAgIGlmIChjb21wbGV0ZSAhPT0gZG9jLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoJ2xvYWQnID09PSBldnQudHlwZSkgcmVhZHlzdGF0ZS5jaGFuZ2UoJ2NvbXBsZXRlJyk7XG4gICAgZWxzZSByZWFkeXN0YXRlLmNoYW5nZSgnaW50ZXJhY3RpdmUnKTtcblxuICAgIC8vXG4gICAgLy8gSG91c2Uga2VlcGluZywgcmVtb3ZlIG91ciBhc3NpZ25lZCBldmVudCBsaXN0ZW5lcnMuXG4gICAgLy9cbiAgICAoZXZ0LnR5cGUgPT09ICdsb2FkJyA/IHdpbiA6IGRvYylbb2ZmXShldnQudHlwZSwgY2hhbmdlLCBmYWxzZSk7XG4gIH1cblxuICAvL1xuICAvLyBBc3NpZ24gYSBzaGl0IGxvYWQgb2YgZXZlbnQgbGlzdGVuZXJzIHNvIHdlIGNhbiB1cGRhdGUgb3VyIGludGVybmFsIHN0YXRlLlxuICAvL1xuICBkb2Nbb25dKHByZWZpeCArJ0RPTUNvbnRlbnRMb2FkZWQnLCBjaGFuZ2UsIGZhbHNlKTtcbiAgZG9jW29uXShwcmVmaXggKydyZWFkeXN0YXRlY2hhbmdlJywgY2hhbmdlLCBmYWxzZSk7XG4gIHdpbltvbl0ocHJlZml4ICsnbG9hZCcsIGNoYW5nZSwgZmFsc2UpO1xufSAoKSk7XG5cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIG5ldyBwcm90b3R5cGUgbWV0aG9kIHdoaWNoIHdpbGwgdGhlIGdpdmVuIGZ1bmN0aW9uIG9uY2UgdGhlXG4gKiBkZXNpcmVkIHN0YXRlIGhhcyBiZWVuIHJlYWNoZWQuIFRoZSByZXR1cm5lZCBmdW5jdGlvbiBhY2NlcHRzIDIgYXJndW1lbnRzOlxuICpcbiAqIC0gZm46IFRoZSBhc3NpZ25lZCBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBiZSBjYWxsZWQuXG4gKiAtIGNvbnRleHQ6IENvbnRleHQvdGhpcyB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gd2UgbmVlZCB0byBleGVjdXRlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdGF0ZSBUaGUgc3RhdGUgd2UgbmVlZCB0byBvcGVyYXRlIHVwb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGUoc3RhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByb3h5KGZuLCBjb250ZXh0KSB7XG4gICAgdmFyIHJzID0gdGhpcztcblxuICAgIGlmIChycy5pcyhzdGF0ZSkpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBmbi5jYWxsKGNvbnRleHQsIHJzLnJlYWR5U3RhdGUpO1xuICAgICAgfSwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghcnMuX2V2ZW50c1tzdGF0ZV0pIHJzLl9ldmVudHNbc3RhdGVdID0gW107XG4gICAgICBycy5fZXZlbnRzW3N0YXRlXS5wdXNoKHsgZm46IGZuLCBjb250ZXh0OiBjb250ZXh0IH0pO1xuICAgIH1cblxuICAgIHJldHVybiBycztcbiAgfTtcbn1cblxuLyoqXG4gKiBSUyAocmVhZHlTdGF0ZSkgaW5zdGFuY2UuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBSUygpIHtcbiAgdGhpcy5yZWFkeVN0YXRlID0gUlMuVU5LTk9XTjtcbiAgdGhpcy5fZXZlbnRzID0ge307XG59XG5cbi8qKlxuICogVGhlIGVudmlyb25tZW50IGNhbiBiZSBpbiBkaWZmZXJlbnQgc3RhdGVzLiBUaGUgZm9sbG93aW5nIHN0YXRlcyBhcmVcbiAqIGdlbmVyYXRlZDpcbiAqXG4gKiAtIEFMTDogICAgICAgICBUaGUgSSBkb24ndCByZWFsbHkgZ2l2ZSBhIGZ1Y2sgc3RhdGUuXG4gKiAtIFVOS05PV046ICAgICBXZSBnb3QgYW4gdW5rbm93biByZWFkeVN0YXRlIHdlIHNob3VsZCBzdGFydCBsaXN0ZW5pbmcgZm9yIGV2ZW50cy5cbiAqIC0gTE9BRElORzogICAgIEVudmlyb25tZW50IGlzIGN1cnJlbnRseSBsb2FkaW5nLlxuICogLSBJTlRFUkFDVElWRTogRW52aXJvbm1lbnQgaXMgcmVhZHkgZm9yIG1vZGlmaWNhdGlvbi5cbiAqIC0gQ09NUExFVEU6ICAgIEFsbCByZXNvdXJjZXMgaGF2ZSBiZWVuIGxvYWRlZC5cbiAqXG4gKiBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBvcmRlciBvZiB0aGUgYHN0YXRlc2Agc3RyaW5nL2FycmF5IGlzIG9mIHZpdGFsXG4gKiBpbXBvcnRhbmNlIGFzIGl0J3MgdXNlZCBpbiB0aGUgcmVhZHlTdGF0ZSBjaGVjay5cbiAqXG4gKiBAdHlwZSB7TnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xuUlMuc3RhdGVzID0gJ0FMTCxVTktOT1dOLExPQURJTkcsSU5URVJBQ1RJVkUsQ09NUExFVEUnLnNwbGl0KCcsJyk7XG5cbmZvciAodmFyIHMgPSAwLCBzdGF0ZTsgcyA8IFJTLnN0YXRlcy5sZW5ndGg7IHMrKykge1xuICBzdGF0ZSA9IFJTLnN0YXRlc1tzXTtcblxuICBSU1tzdGF0ZV0gPSBSUy5wcm90b3R5cGVbc3RhdGVdID0gcztcbiAgUlMucHJvdG90eXBlW3N0YXRlLnRvTG93ZXJDYXNlKCldID0gZ2VuZXJhdGUoc3RhdGUpO1xufVxuXG4vKipcbiAqIEEgY2hhbmdlIGluIHRoZSBlbnZpcm9ubWVudCBoYXMgYmVlbiBkZXRlY3RlZCBzbyB3ZSBuZWVkIHRvIGNoYW5nZSBvdXJcbiAqIHJlYWR5U3RhdGUgYW5kIGNhbGwgYXNzaWduZWQgZXZlbnQgbGlzdGVuZXJzIGFuZCB0aG9zZSBvZiB0aGUgcHJldmlvdXNcbiAqIHN0YXRlcy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gc3RhdGUgVGhlIG5ldyByZWFkeVN0YXRlIHRoYXQgd2UgZGV0ZWN0ZWQuXG4gKiBAcmV0dXJucyB7UlN9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuUlMucHJvdG90eXBlLmNoYW5nZSA9IGZ1bmN0aW9uIGNoYW5nZShzdGF0ZSkge1xuICBzdGF0ZSA9IHRoaXMuY2xlYW4oc3RhdGUsIHRydWUpO1xuXG4gIHZhciBqXG4gICAgLCBuYW1lXG4gICAgLCBpID0gMFxuICAgICwgbGlzdGVuZXJcbiAgICAsIHJzID0gdGhpc1xuICAgICwgcHJldmlvdXNseSA9IHJzLnJlYWR5U3RhdGU7XG5cbiAgaWYgKHByZXZpb3VzbHkgPj0gc3RhdGUpIHJldHVybiBycztcblxuICBycy5yZWFkeVN0YXRlID0gc3RhdGU7XG5cbiAgZm9yICg7IGkgPCBSUy5zdGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaSA+IHN0YXRlKSBicmVhaztcbiAgICBuYW1lID0gUlMuc3RhdGVzW2ldO1xuXG4gICAgaWYgKG5hbWUgaW4gcnMuX2V2ZW50cykge1xuICAgICAgZm9yIChqID0gMDsgaiA8IHJzLl9ldmVudHNbbmFtZV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgbGlzdGVuZXIgPSBycy5fZXZlbnRzW25hbWVdW2pdO1xuICAgICAgICBsaXN0ZW5lci5mbi5jYWxsKGxpc3RlbmVyLmNvbnRleHQgfHwgcnMsIHByZXZpb3VzbHkpO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgcnMuX2V2ZW50c1tuYW1lXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcnM7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHdlJ3JlIGN1cnJlbnRseSBpbiBhIGdpdmVuIHJlYWR5U3RhdGUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBzdGF0ZSBUaGUgcmVxdWlyZWQgcmVhZHlTdGF0ZS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBJbmRpY2F0aW9uIGlmIHRoaXMgc3RhdGUgaGFzIGJlZW4gcmVhY2hlZC5cbiAqIEBhcGkgcHVibGljXG4gKi9cblJTLnByb3RvdHlwZS5pcyA9IGZ1bmN0aW9uIGlzKHN0YXRlKSB7XG4gIHJldHVybiB0aGlzLnJlYWR5U3RhdGUgPj0gdGhpcy5jbGVhbihzdGF0ZSwgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIFRyYW5zZm9ybSBhIHN0YXRlIHRvIGEgbnVtYmVyIG9yIHRvVXBwZXJDYXNlLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHN0YXRlIFN0YXRlIHRvIHRyYW5zZm9ybS5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gbnIgQ2hhbmdlIHRvIG51bWJlci5cbiAqIEByZXR1cm5zIHtNaXhlZH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblJTLnByb3RvdHlwZS5jbGVhbiA9IGZ1bmN0aW9uIHRyYW5zZm9ybShzdGF0ZSwgbnIpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2Ygc3RhdGU7XG5cbiAgaWYgKG5yKSByZXR1cm4gJ251bWJlcicgIT09IHR5cGVcbiAgPyArUlNbc3RhdGUudG9VcHBlckNhc2UoKV0gfHwgMFxuICA6IHN0YXRlO1xuXG4gIHJldHVybiAoJ251bWJlcicgPT09IHR5cGUgPyBSUy5zdGF0ZXNbc3RhdGVdIDogc3RhdGUpLnRvVXBwZXJDYXNlKCk7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGV2ZW50IGxpc3RlbmVycy4gVXNlZnVsIHdoZW4geW91IHdhbnQgdG8gdW5sb2FkIHJlYWR5c3RhdGVjaGFuZ2VcbiAqIGNvbXBsZXRlbHkgc28gdGhhdCBpdCB3b24ndCByZWFjdCB0byBhbnkgZXZlbnRzIGFueW1vcmUuIFNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3Vuc2hpZnRpby9yZWFkeXN0YXRlL2lzc3Vlcy84XG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBycyBzbyB0aGF0IGNhbGxzIGNhbiBiZSBjaGFpbmVkLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuUlMucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycygpIHtcbiAgdGhpcy5fZXZlbnRzID0ge307XG4gIHJldHVybiB0aGlzO1xufVxuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xubW9kdWxlLmV4cG9ydHMgPSBuZXcgUlMoKTtcbiIsIi8qKlxuICogcmVxdWVzdC1mcmFtZSAtIHJlcXVlc3RBbmltYXRpb25GcmFtZSAmIGNhbmNlbEFuaW1hdGlvbkZyYW1lIHBvbHlmaWxsIGZvciBvcHRpbWFsIGNyb3NzLWJyb3dzZXIgZGV2ZWxvcG1lbnQuXG4gKiBAdmVyc2lvbiB2MS41LjNcbiAqIEBsaWNlbnNlIE1JVFxuICogQ29weXJpZ2h0IEp1bGllbiBFdGllbm5lIDIwMTUgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLnJlcXVlc3RGcmFtZSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHR5cGUgLSByZXF1ZXN0IHwgY2FuY2VsIHwgbmF0aXZlLlxuICogQHJldHVybiB7RnVuY3Rpb259IFRpbWluZyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gcmVxdWVzdEZyYW1lKHR5cGUpIHtcbiAgICAvLyBUaGUgb25seSB2ZW5kb3IgcHJlZml4ZXMgcmVxdWlyZWQuXG4gICAgdmFyIHZlbmRvcnMgPSBbJ21veicsICd3ZWJraXQnXTtcblxuICAgIC8vIERpc2Fzc2VtYmxlZCB0aW1pbmcgZnVuY3Rpb24gYWJicmV2aWF0aW9ucy5cbiAgICB2YXIgYUYgPSAnQW5pbWF0aW9uRnJhbWUnO1xuICAgIHZhciBycUFGID0gJ1JlcXVlc3QnICsgYUY7XG5cbiAgICAvLyBDaGVja3MgZm9yIGZpcmVmb3ggNCAtIDEwIGZ1bmN0aW9uIHBhaXIgbWlzbWF0Y2guXG4gICAgdmFyIG1velJBRiA9IHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgdmFyIG1vekNBRiA9IHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZTtcbiAgICB2YXIgaGFzTW96TWlzbWF0Y2ggPSBtb3pSQUYgJiYgIW1vekNBRjtcblxuICAgIC8vIEZpbmFsIGFzc2lnbmVkIGZ1bmN0aW9ucy5cbiAgICB2YXIgYXNzaWduZWRSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgdmFyIGFzc2lnbmVkQ2FuY2VsQW5pbWF0aW9uRnJhbWU7XG5cbiAgICAvLyBJbml0aWFsIHRpbWUgb2YgdGhlIHRpbWluZyBsYXBzZS5cbiAgICB2YXIgcHJldmlvdXNUaW1lID0gMDtcblxuICAgIHZhciByZXF1ZXN0RnJhbWVNYWluO1xuXG4gICAgLy8gRGF0ZS5ub3cgcG9seWZpbGwsIG1haW5seSBmb3IgbGVnYWN5IElFIHZlcnNpb25zLlxuICAgIGlmICghRGF0ZS5ub3cpIHtcbiAgICAgICAgRGF0ZS5ub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaGFzSU9TNlJlcXVlc3RBbmltYXRpb25GcmFtZUJ1Zy5cbiAgICAgKiBAU2VlIHtATGluayBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9qdWxpZW5ldGllLzg2YWMzOTRlYzQxZjEyNzFmZjBhfVxuICAgICAqIC0gZm9yIENvbW1lbnRhcnkuXG4gICAgICogQENvcHlyaWdodCAyMDE1IC0gSnVsaWVuIEV0aWVubmUuIFxuICAgICAqIEBMaWNlbnNlOiBNSVQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzSU9TNlJlcXVlc3RBbmltYXRpb25GcmFtZUJ1ZygpIHtcbiAgICAgICAgdmFyIHdlYmtpdFJBRiA9IHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgICAgIHZhciByQUYgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXG4gICAgICAgIC8vIENTUy8gRGV2aWNlIHdpdGggbWF4IGZvciBpT1M2IERldmljZXMuXG4gICAgICAgIHZhciBoYXNNb2JpbGVEZXZpY2VXaWR0aCA9IHNjcmVlbi53aWR0aCA8PSA3NjggPyB0cnVlIDogZmFsc2U7XG5cbiAgICAgICAgLy8gT25seSBzdXBwb3J0cyB3ZWJraXQgcHJlZml4ZWQgcmVxdWVzdEFuaW10aW9uRnJhbmUuXG4gICAgICAgIHZhciByZXF1aXJlc1dlYmtpdHByZWZpeCA9ICEod2Via2l0UkFGICYmIHJBRik7XG5cbiAgICAgICAgLy8gaU9TNiB3ZWJraXQgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCBwZXJmb3JtYW5jZSBub3cuXG4gICAgICAgIHZhciBoYXNOb05hdmlnYXRpb25UaW1pbmcgPSB3aW5kb3cucGVyZm9ybWFuY2UgPyBmYWxzZSA6IHRydWU7XG5cbiAgICAgICAgdmFyIGlPUzZOb3RpY2UgPSAnc2V0VGltZW91dCBpcyBiZWluZyB1c2VkIGFzIGEgc3Vic3RpdGl1ZSBmb3IgXFxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGR1ZSB0byBhIGJ1ZyB3aXRoaW4gaU9TIDYgYnVpbGRzJztcblxuICAgICAgICB2YXIgaGFzSU9TNkJ1ZyA9IHJlcXVpcmVzV2Via2l0cHJlZml4ICYmIGhhc01vYmlsZURldmljZVdpZHRoICYmIGhhc05vTmF2aWdhdGlvblRpbWluZztcblxuICAgICAgICB2YXIgYnVnQ2hlY2tyZXN1bHRzID0gZnVuY3Rpb24gYnVnQ2hlY2tyZXN1bHRzKHRpbWluZ0ZuQSwgdGltaW5nRm5CLCBub3RpY2UpIHtcbiAgICAgICAgICAgIGlmICh0aW1pbmdGbkEgfHwgdGltaW5nRm5CKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKG5vdGljZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZGlzcGxheVJlc3VsdHMgPSBmdW5jdGlvbiBkaXNwbGF5UmVzdWx0cyhoYXNCdWcsIGhhc0J1Z05vdGljZSwgd2Via2l0Rm4sIG5hdGl2ZUZuKSB7XG4gICAgICAgICAgICBpZiAoaGFzQnVnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1Z0NoZWNrcmVzdWx0cyh3ZWJraXRGbiwgbmF0aXZlRm4sIGhhc0J1Z05vdGljZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZGlzcGxheVJlc3VsdHMoaGFzSU9TNkJ1ZywgaU9TNk5vdGljZSwgd2Via2l0UkFGLCByQUYpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE5hdGl2ZSBjbGVhclRpbWVvdXQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xlYXJUaW1lb3V0V2l0aElkKGlkKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmFzZWQgb24gYSBwb2x5ZmlsbCBieSBFcmlrLCBpbnRyb2R1Y2VkIGJ5IFBhdWwgSXJpc2ggJiBcbiAgICAgKiBmdXJ0aGVyIGltcHJvdmVkIGJ5IERhcml1cyBCYWNvbi5cbiAgICAgKiBAc2VlICB7QGxpbmsgaHR0cDovL3d3dy5wYXVsaXJpc2guY29tLzIwMTEvXG4gICAgICogcmVxdWVzdGFuaW1hdGlvbmZyYW1lLWZvci1zbWFydC1hbmltYXRpbmd9XG4gICAgICogQHNlZSAge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXJpdXMvcmVxdWVzdEFuaW1hdGlvbkZyYW1lL2Jsb2IvXG4gICAgICogbWFzdGVyL3JlcXVlc3RBbmltYXRpb25GcmFtZS5qc31cbiAgICAgKiBAY2FsbGJhY2sge051bWJlcn0gVGltZXN0YW1wLlxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBzZXRUaW1lb3V0IEZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFRpbWVvdXRXaXRoVGltZXN0YW1wKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBpbW1lZGlhdGVUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdmFyIGxhcHNlZFRpbWUgPSBNYXRoLm1heChwcmV2aW91c1RpbWUgKyAxNiwgaW1tZWRpYXRlVGltZSk7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHByZXZpb3VzVGltZSA9IGxhcHNlZFRpbWUpO1xuICAgICAgICB9LCBsYXBzZWRUaW1lIC0gaW1tZWRpYXRlVGltZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUXVlcmllcyB0aGUgbmF0aXZlIGZ1bmN0aW9uLCBwcmVmaXhlZCBmdW5jdGlvbiBcbiAgICAgKiBvciB1c2UgdGhlIHNldFRpbWVvdXRXaXRoVGltZXN0YW1wIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHF1ZXJ5UmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkge1xuICAgICAgICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbHRlcikge1xuICAgICAgICAgICAgYXNzaWduZWRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbJ3JlcXVlc3QnICsgYUZdIHx8IHdpbmRvd1t2ZW5kb3JzLmZpbHRlcihmdW5jdGlvbiAodmVuZG9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvd1t2ZW5kb3IgKyBycUFGXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gdmVuZG9yO1xuICAgICAgICAgICAgfSkgKyBycUFGXSB8fCBzZXRUaW1lb3V0V2l0aFRpbWVzdGFtcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0V2l0aFRpbWVzdGFtcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWhhc0lPUzZSZXF1ZXN0QW5pbWF0aW9uRnJhbWVCdWcoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFzc2lnbmVkUmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXRXaXRoVGltZXN0YW1wO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUXVlcmllcyB0aGUgbmF0aXZlIGZ1bmN0aW9uLCBwcmVmaXhlZCBmdW5jdGlvbiBcbiAgICAgKiBvciB1c2UgdGhlIGNsZWFyVGltZW91dFdpdGhJZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBxdWVyeUNhbmNlbEFuaW1hdGlvbkZyYW1lKCkge1xuICAgICAgICB2YXIgY2FuY2VsbGF0aW9uTmFtZXMgPSBbXTtcbiAgICAgICAgaWYgKEFycmF5LnByb3RvdHlwZS5tYXApIHtcbiAgICAgICAgICAgIHZlbmRvcnMubWFwKGZ1bmN0aW9uICh2ZW5kb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWydDYW5jZWwnLCAnQ2FuY2VsUmVxdWVzdCddLm1hcChmdW5jdGlvbiAoY2FuY2VsbGF0aW9uTmFtZVByZWZpeCkge1xuICAgICAgICAgICAgICAgICAgICBjYW5jZWxsYXRpb25OYW1lcy5wdXNoKHZlbmRvciArIGNhbmNlbGxhdGlvbk5hbWVQcmVmaXggKyBhRik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjbGVhclRpbWVvdXRXaXRoSWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2tzIGZvciB0aGUgcHJlZml4ZWQgY2FuY2VsQW5pbWF0aW9uRnJhbWUgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAqIEBwYXJhbSAge0FycmF5fSBwcmVmaXhlZE5hbWVzIC0gQW4gYXJyYXkgb2YgdGhlIHByZWZpeGVkIG5hbWVzLiBcbiAgICAgICAgICogQHBhcmFtICB7TnVtYmVyfSBpIC0gSXRlcmF0aW9uIHN0YXJ0IHBvaW50LlxuICAgICAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gcHJlZml4ZWQgY2FuY2VsQW5pbWF0aW9uRnJhbWUgZnVuY3Rpb24uXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBwcmVmaXhlZENhbmNlbEFuaW1hdGlvbkZyYW1lKHByZWZpeGVkTmFtZXMsIGkpIHtcbiAgICAgICAgICAgIHZhciBjYW5jZWxsYXRpb25GdW5jdGlvbiA9IHZvaWQgMDtcbiAgICAgICAgICAgIGZvciAoOyBpIDwgcHJlZml4ZWROYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh3aW5kb3dbcHJlZml4ZWROYW1lc1tpXV0pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsbGF0aW9uRnVuY3Rpb24gPSB3aW5kb3dbcHJlZml4ZWROYW1lc1tpXV07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYW5jZWxsYXRpb25GdW5jdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVzZSB0cnV0aGx5IGZ1bmN0aW9uXG4gICAgICAgIGFzc2lnbmVkQ2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbJ2NhbmNlbCcgKyBhRl0gfHwgcHJlZml4ZWRDYW5jZWxBbmltYXRpb25GcmFtZShjYW5jZWxsYXRpb25OYW1lcywgMCkgfHwgY2xlYXJUaW1lb3V0V2l0aElkO1xuXG4gICAgICAgIC8vIENoZWNrIGZvciBpT1MgNiBidWdcbiAgICAgICAgaWYgKCFoYXNJT1M2UmVxdWVzdEFuaW1hdGlvbkZyYW1lQnVnKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBhc3NpZ25lZENhbmNlbEFuaW1hdGlvbkZyYW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dFdpdGhJZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFJlcXVlc3RGbigpIHtcbiAgICAgICAgaWYgKGhhc01vek1pc21hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dFdpdGhUaW1lc3RhbXA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcXVlcnlSZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENhbmNlbEZuKCkge1xuICAgICAgICByZXR1cm4gcXVlcnlDYW5jZWxBbmltYXRpb25GcmFtZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE5hdGl2ZUZuKCkge1xuICAgICAgICBpZiAoaGFzTW96TWlzbWF0Y2gpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBzZXRUaW1lb3V0V2l0aFRpbWVzdGFtcDtcbiAgICAgICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGNsZWFyVGltZW91dFdpdGhJZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBxdWVyeVJlcXVlc3RBbmltYXRpb25GcmFtZSgpO1xuICAgICAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gcXVlcnlDYW5jZWxBbmltYXRpb25GcmFtZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgdmFsdWUgXCJyZXF1ZXN0XCIgc2luZ2xlcyBvdXQgZmlyZWZveCA0IC0gMTAgYW5kIFxuICAgICAqIGFzc2lnbnMgdGhlIHNldFRpbWVvdXQgZnVuY3Rpb24gaWYgcGxhdXNpYmxlLlxuICAgICAqL1xuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ3JlcXVlc3QnOlxuICAgICAgICBjYXNlICcnOlxuICAgICAgICAgICAgcmVxdWVzdEZyYW1lTWFpbiA9IGdldFJlcXVlc3RGbigpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnY2FuY2VsJzpcbiAgICAgICAgICAgIHJlcXVlc3RGcmFtZU1haW4gPSBnZXRDYW5jZWxGbigpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbmF0aXZlJzpcbiAgICAgICAgICAgIHNldE5hdGl2ZUZuKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWVzdEZyYW1lIHBhcmFtZXRlciBpcyBub3QgYSB0eXBlLicpO1xuICAgIH1cbiAgICByZXR1cm4gcmVxdWVzdEZyYW1lTWFpbjtcbn1cblxucmV0dXJuIHJlcXVlc3RGcmFtZTtcblxufSkpKTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHNoaWZ0XG5cbmZ1bmN0aW9uIHNoaWZ0IChzdHJlYW0pIHtcbiAgdmFyIHJzID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlXG4gIGlmICghcnMpIHJldHVybiBudWxsXG4gIHJldHVybiBycy5vYmplY3RNb2RlID8gc3RyZWFtLnJlYWQoKSA6IHN0cmVhbS5yZWFkKGdldFN0YXRlTGVuZ3RoKHJzKSlcbn1cblxuZnVuY3Rpb24gZ2V0U3RhdGVMZW5ndGggKHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5idWZmZXIubGVuZ3RoKSB7XG4gICAgLy8gU2luY2Ugbm9kZSA2LjMuMCBzdGF0ZS5idWZmZXIgaXMgYSBCdWZmZXJMaXN0IG5vdCBhbiBhcnJheVxuICAgIGlmIChzdGF0ZS5idWZmZXIuaGVhZCkge1xuICAgICAgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoXG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXRlLmJ1ZmZlclswXS5sZW5ndGhcbiAgfVxuXG4gIHJldHVybiBzdGF0ZS5sZW5ndGhcbn1cbiIsIi8qKlxuICogUm9vdCByZWZlcmVuY2UgZm9yIGlmcmFtZXMuXG4gKi9cblxudmFyIHJvb3Q7XG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHsgLy8gQnJvd3NlciB3aW5kb3dcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7IC8vIFdlYiBXb3JrZXJcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgeyAvLyBPdGhlciBlbnZpcm9ubWVudHNcbiAgY29uc29sZS53YXJuKFwiVXNpbmcgYnJvd3Nlci1vbmx5IHZlcnNpb24gb2Ygc3VwZXJhZ2VudCBpbiBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcbiAgcm9vdCA9IHRoaXM7XG59XG5cbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBSZXF1ZXN0QmFzZSA9IHJlcXVpcmUoJy4vcmVxdWVzdC1iYXNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzLW9iamVjdCcpO1xudmFyIFJlc3BvbnNlQmFzZSA9IHJlcXVpcmUoJy4vcmVzcG9uc2UtYmFzZScpO1xudmFyIHNob3VsZFJldHJ5ID0gcmVxdWlyZSgnLi9zaG91bGQtcmV0cnknKTtcblxuLyoqXG4gKiBOb29wLlxuICovXG5cbmZ1bmN0aW9uIG5vb3AoKXt9O1xuXG4vKipcbiAqIEV4cG9zZSBgcmVxdWVzdGAuXG4gKi9cblxudmFyIHJlcXVlc3QgPSBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtZXRob2QsIHVybCkge1xuICAvLyBjYWxsYmFja1xuICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgdXJsKSB7XG4gICAgcmV0dXJuIG5ldyBleHBvcnRzLlJlcXVlc3QoJ0dFVCcsIG1ldGhvZCkuZW5kKHVybCk7XG4gIH1cblxuICAvLyB1cmwgZmlyc3RcbiAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIHJldHVybiBuZXcgZXhwb3J0cy5SZXF1ZXN0KCdHRVQnLCBtZXRob2QpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBleHBvcnRzLlJlcXVlc3QobWV0aG9kLCB1cmwpO1xufVxuXG5leHBvcnRzLlJlcXVlc3QgPSBSZXF1ZXN0O1xuXG4vKipcbiAqIERldGVybWluZSBYSFIuXG4gKi9cblxucmVxdWVzdC5nZXRYSFIgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChyb290LlhNTEh0dHBSZXF1ZXN0XG4gICAgICAmJiAoIXJvb3QubG9jYXRpb24gfHwgJ2ZpbGU6JyAhPSByb290LmxvY2F0aW9uLnByb3RvY29sXG4gICAgICAgICAgfHwgIXJvb3QuQWN0aXZlWE9iamVjdCkpIHtcbiAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0O1xuICB9IGVsc2Uge1xuICAgIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgnTWljcm9zb2Z0LlhNTEhUVFAnKTsgfSBjYXRjaChlKSB7fVxuICAgIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgnTXN4bWwyLlhNTEhUVFAuNi4wJyk7IH0gY2F0Y2goZSkge31cbiAgICB0cnkgeyByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ01zeG1sMi5YTUxIVFRQLjMuMCcpOyB9IGNhdGNoKGUpIHt9XG4gICAgdHJ5IHsgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCdNc3htbDIuWE1MSFRUUCcpOyB9IGNhdGNoKGUpIHt9XG4gIH1cbiAgdGhyb3cgRXJyb3IoXCJCcm93c2VyLW9ubHkgdmVyc2lvbiBvZiBzdXBlcmFnZW50IGNvdWxkIG5vdCBmaW5kIFhIUlwiKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBhZGRlZCB0byBzdXBwb3J0IElFLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG52YXIgdHJpbSA9ICcnLnRyaW1cbiAgPyBmdW5jdGlvbihzKSB7IHJldHVybiBzLnRyaW0oKTsgfVxuICA6IGZ1bmN0aW9uKHMpIHsgcmV0dXJuIHMucmVwbGFjZSgvKF5cXHMqfFxccyokKS9nLCAnJyk7IH07XG5cbi8qKlxuICogU2VyaWFsaXplIHRoZSBnaXZlbiBgb2JqYC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZXJpYWxpemUob2JqKSB7XG4gIGlmICghaXNPYmplY3Qob2JqKSkgcmV0dXJuIG9iajtcbiAgdmFyIHBhaXJzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBwdXNoRW5jb2RlZEtleVZhbHVlUGFpcihwYWlycywga2V5LCBvYmpba2V5XSk7XG4gIH1cbiAgcmV0dXJuIHBhaXJzLmpvaW4oJyYnKTtcbn1cblxuLyoqXG4gKiBIZWxwcyAnc2VyaWFsaXplJyB3aXRoIHNlcmlhbGl6aW5nIGFycmF5cy5cbiAqIE11dGF0ZXMgdGhlIHBhaXJzIGFycmF5LlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzXG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqL1xuXG5mdW5jdGlvbiBwdXNoRW5jb2RlZEtleVZhbHVlUGFpcihwYWlycywga2V5LCB2YWwpIHtcbiAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgdmFsLmZvckVhY2goZnVuY3Rpb24odikge1xuICAgICAgICBwdXNoRW5jb2RlZEtleVZhbHVlUGFpcihwYWlycywga2V5LCB2KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSkge1xuICAgICAgZm9yKHZhciBzdWJrZXkgaW4gdmFsKSB7XG4gICAgICAgIHB1c2hFbmNvZGVkS2V5VmFsdWVQYWlyKHBhaXJzLCBrZXkgKyAnWycgKyBzdWJrZXkgKyAnXScsIHZhbFtzdWJrZXldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFpcnMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KVxuICAgICAgICArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodmFsID09PSBudWxsKSB7XG4gICAgcGFpcnMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFeHBvc2Ugc2VyaWFsaXphdGlvbiBtZXRob2QuXG4gKi9cblxuIHJlcXVlc3Quc2VyaWFsaXplT2JqZWN0ID0gc2VyaWFsaXplO1xuXG4gLyoqXG4gICogUGFyc2UgdGhlIGdpdmVuIHgtd3d3LWZvcm0tdXJsZW5jb2RlZCBgc3RyYC5cbiAgKlxuICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICogQGFwaSBwcml2YXRlXG4gICovXG5cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nKHN0cikge1xuICB2YXIgb2JqID0ge307XG4gIHZhciBwYWlycyA9IHN0ci5zcGxpdCgnJicpO1xuICB2YXIgcGFpcjtcbiAgdmFyIHBvcztcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gcGFpcnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBwYWlyID0gcGFpcnNbaV07XG4gICAgcG9zID0gcGFpci5pbmRleE9mKCc9Jyk7XG4gICAgaWYgKHBvcyA9PSAtMSkge1xuICAgICAgb2JqW2RlY29kZVVSSUNvbXBvbmVudChwYWlyKV0gPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2RlY29kZVVSSUNvbXBvbmVudChwYWlyLnNsaWNlKDAsIHBvcykpXSA9XG4gICAgICAgIGRlY29kZVVSSUNvbXBvbmVudChwYWlyLnNsaWNlKHBvcyArIDEpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIEV4cG9zZSBwYXJzZXIuXG4gKi9cblxucmVxdWVzdC5wYXJzZVN0cmluZyA9IHBhcnNlU3RyaW5nO1xuXG4vKipcbiAqIERlZmF1bHQgTUlNRSB0eXBlIG1hcC5cbiAqXG4gKiAgICAgc3VwZXJhZ2VudC50eXBlcy54bWwgPSAnYXBwbGljYXRpb24veG1sJztcbiAqXG4gKi9cblxucmVxdWVzdC50eXBlcyA9IHtcbiAgaHRtbDogJ3RleHQvaHRtbCcsXG4gIGpzb246ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgeG1sOiAndGV4dC94bWwnLFxuICB1cmxlbmNvZGVkOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgJ2Zvcm0nOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgJ2Zvcm0tZGF0YSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG4vKipcbiAqIERlZmF1bHQgc2VyaWFsaXphdGlvbiBtYXAuXG4gKlxuICogICAgIHN1cGVyYWdlbnQuc2VyaWFsaXplWydhcHBsaWNhdGlvbi94bWwnXSA9IGZ1bmN0aW9uKG9iail7XG4gKiAgICAgICByZXR1cm4gJ2dlbmVyYXRlZCB4bWwgaGVyZSc7XG4gKiAgICAgfTtcbiAqXG4gKi9cblxuIHJlcXVlc3Quc2VyaWFsaXplID0ge1xuICAgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc6IHNlcmlhbGl6ZSxcbiAgICdhcHBsaWNhdGlvbi9qc29uJzogSlNPTi5zdHJpbmdpZnlcbiB9O1xuXG4gLyoqXG4gICogRGVmYXVsdCBwYXJzZXJzLlxuICAqXG4gICogICAgIHN1cGVyYWdlbnQucGFyc2VbJ2FwcGxpY2F0aW9uL3htbCddID0gZnVuY3Rpb24oc3RyKXtcbiAgKiAgICAgICByZXR1cm4geyBvYmplY3QgcGFyc2VkIGZyb20gc3RyIH07XG4gICogICAgIH07XG4gICpcbiAgKi9cblxucmVxdWVzdC5wYXJzZSA9IHtcbiAgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc6IHBhcnNlU3RyaW5nLFxuICAnYXBwbGljYXRpb24vanNvbic6IEpTT04ucGFyc2Vcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGhlYWRlciBgc3RyYCBpbnRvXG4gKiBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgbWFwcGVkIGZpZWxkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZUhlYWRlcihzdHIpIHtcbiAgdmFyIGxpbmVzID0gc3RyLnNwbGl0KC9cXHI/XFxuLyk7XG4gIHZhciBmaWVsZHMgPSB7fTtcbiAgdmFyIGluZGV4O1xuICB2YXIgbGluZTtcbiAgdmFyIGZpZWxkO1xuICB2YXIgdmFsO1xuXG4gIGxpbmVzLnBvcCgpOyAvLyB0cmFpbGluZyBDUkxGXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGxpbmVzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgbGluZSA9IGxpbmVzW2ldO1xuICAgIGluZGV4ID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAgZmllbGQgPSBsaW5lLnNsaWNlKDAsIGluZGV4KS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHRyaW0obGluZS5zbGljZShpbmRleCArIDEpKTtcbiAgICBmaWVsZHNbZmllbGRdID0gdmFsO1xuICB9XG5cbiAgcmV0dXJuIGZpZWxkcztcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBgbWltZWAgaXMganNvbiBvciBoYXMgK2pzb24gc3RydWN0dXJlZCBzeW50YXggc3VmZml4LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtaW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNKU09OKG1pbWUpIHtcbiAgcmV0dXJuIC9bXFwvK11qc29uXFxiLy50ZXN0KG1pbWUpO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYFJlc3BvbnNlYCB3aXRoIHRoZSBnaXZlbiBgeGhyYC5cbiAqXG4gKiAgLSBzZXQgZmxhZ3MgKC5vaywgLmVycm9yLCBldGMpXG4gKiAgLSBwYXJzZSBoZWFkZXJcbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgQWxpYXNpbmcgYHN1cGVyYWdlbnRgIGFzIGByZXF1ZXN0YCBpcyBuaWNlOlxuICpcbiAqICAgICAgcmVxdWVzdCA9IHN1cGVyYWdlbnQ7XG4gKlxuICogIFdlIGNhbiB1c2UgdGhlIHByb21pc2UtbGlrZSBBUEksIG9yIHBhc3MgY2FsbGJhY2tzOlxuICpcbiAqICAgICAgcmVxdWVzdC5nZXQoJy8nKS5lbmQoZnVuY3Rpb24ocmVzKXt9KTtcbiAqICAgICAgcmVxdWVzdC5nZXQoJy8nLCBmdW5jdGlvbihyZXMpe30pO1xuICpcbiAqICBTZW5kaW5nIGRhdGEgY2FuIGJlIGNoYWluZWQ6XG4gKlxuICogICAgICByZXF1ZXN0XG4gKiAgICAgICAgLnBvc3QoJy91c2VyJylcbiAqICAgICAgICAuc2VuZCh7IG5hbWU6ICd0aicgfSlcbiAqICAgICAgICAuZW5kKGZ1bmN0aW9uKHJlcyl7fSk7XG4gKlxuICogIE9yIHBhc3NlZCB0byBgLnNlbmQoKWA6XG4gKlxuICogICAgICByZXF1ZXN0XG4gKiAgICAgICAgLnBvc3QoJy91c2VyJylcbiAqICAgICAgICAuc2VuZCh7IG5hbWU6ICd0aicgfSwgZnVuY3Rpb24ocmVzKXt9KTtcbiAqXG4gKiAgT3IgcGFzc2VkIHRvIGAucG9zdCgpYDpcbiAqXG4gKiAgICAgIHJlcXVlc3RcbiAqICAgICAgICAucG9zdCgnL3VzZXInLCB7IG5hbWU6ICd0aicgfSlcbiAqICAgICAgICAuZW5kKGZ1bmN0aW9uKHJlcyl7fSk7XG4gKlxuICogT3IgZnVydGhlciByZWR1Y2VkIHRvIGEgc2luZ2xlIGNhbGwgZm9yIHNpbXBsZSBjYXNlczpcbiAqXG4gKiAgICAgIHJlcXVlc3RcbiAqICAgICAgICAucG9zdCgnL3VzZXInLCB7IG5hbWU6ICd0aicgfSwgZnVuY3Rpb24ocmVzKXt9KTtcbiAqXG4gKiBAcGFyYW0ge1hNTEhUVFBSZXF1ZXN0fSB4aHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBSZXNwb25zZShyZXEpIHtcbiAgdGhpcy5yZXEgPSByZXE7XG4gIHRoaXMueGhyID0gdGhpcy5yZXEueGhyO1xuICAvLyByZXNwb25zZVRleHQgaXMgYWNjZXNzaWJsZSBvbmx5IGlmIHJlc3BvbnNlVHlwZSBpcyAnJyBvciAndGV4dCcgYW5kIG9uIG9sZGVyIGJyb3dzZXJzXG4gIHRoaXMudGV4dCA9ICgodGhpcy5yZXEubWV0aG9kICE9J0hFQUQnICYmICh0aGlzLnhoci5yZXNwb25zZVR5cGUgPT09ICcnIHx8IHRoaXMueGhyLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnKSkgfHwgdHlwZW9mIHRoaXMueGhyLnJlc3BvbnNlVHlwZSA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgID8gdGhpcy54aHIucmVzcG9uc2VUZXh0XG4gICAgIDogbnVsbDtcbiAgdGhpcy5zdGF0dXNUZXh0ID0gdGhpcy5yZXEueGhyLnN0YXR1c1RleHQ7XG4gIHZhciBzdGF0dXMgPSB0aGlzLnhoci5zdGF0dXM7XG4gIC8vIGhhbmRsZSBJRTkgYnVnOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwMDQ2OTcyL21zaWUtcmV0dXJucy1zdGF0dXMtY29kZS1vZi0xMjIzLWZvci1hamF4LXJlcXVlc3RcbiAgaWYgKHN0YXR1cyA9PT0gMTIyMykge1xuICAgICAgc3RhdHVzID0gMjA0O1xuICB9XG4gIHRoaXMuX3NldFN0YXR1c1Byb3BlcnRpZXMoc3RhdHVzKTtcbiAgdGhpcy5oZWFkZXIgPSB0aGlzLmhlYWRlcnMgPSBwYXJzZUhlYWRlcih0aGlzLnhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSk7XG4gIC8vIGdldEFsbFJlc3BvbnNlSGVhZGVycyBzb21ldGltZXMgZmFsc2VseSByZXR1cm5zIFwiXCIgZm9yIENPUlMgcmVxdWVzdHMsIGJ1dFxuICAvLyBnZXRSZXNwb25zZUhlYWRlciBzdGlsbCB3b3Jrcy4gc28gd2UgZ2V0IGNvbnRlbnQtdHlwZSBldmVuIGlmIGdldHRpbmdcbiAgLy8gb3RoZXIgaGVhZGVycyBmYWlscy5cbiAgdGhpcy5oZWFkZXJbJ2NvbnRlbnQtdHlwZSddID0gdGhpcy54aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ2NvbnRlbnQtdHlwZScpO1xuICB0aGlzLl9zZXRIZWFkZXJQcm9wZXJ0aWVzKHRoaXMuaGVhZGVyKTtcblxuICBpZiAobnVsbCA9PT0gdGhpcy50ZXh0ICYmIHJlcS5fcmVzcG9uc2VUeXBlKSB7XG4gICAgdGhpcy5ib2R5ID0gdGhpcy54aHIucmVzcG9uc2U7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5ib2R5ID0gdGhpcy5yZXEubWV0aG9kICE9ICdIRUFEJ1xuICAgICAgPyB0aGlzLl9wYXJzZUJvZHkodGhpcy50ZXh0ID8gdGhpcy50ZXh0IDogdGhpcy54aHIucmVzcG9uc2UpXG4gICAgICA6IG51bGw7XG4gIH1cbn1cblxuUmVzcG9uc2VCYXNlKFJlc3BvbnNlLnByb3RvdHlwZSk7XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGJvZHkgYHN0cmAuXG4gKlxuICogVXNlZCBmb3IgYXV0by1wYXJzaW5nIG9mIGJvZGllcy4gUGFyc2Vyc1xuICogYXJlIGRlZmluZWQgb24gdGhlIGBzdXBlcmFnZW50LnBhcnNlYCBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXNwb25zZS5wcm90b3R5cGUuX3BhcnNlQm9keSA9IGZ1bmN0aW9uKHN0cil7XG4gIHZhciBwYXJzZSA9IHJlcXVlc3QucGFyc2VbdGhpcy50eXBlXTtcbiAgaWYodGhpcy5yZXEuX3BhcnNlcikge1xuICAgIHJldHVybiB0aGlzLnJlcS5fcGFyc2VyKHRoaXMsIHN0cik7XG4gIH1cbiAgaWYgKCFwYXJzZSAmJiBpc0pTT04odGhpcy50eXBlKSkge1xuICAgIHBhcnNlID0gcmVxdWVzdC5wYXJzZVsnYXBwbGljYXRpb24vanNvbiddO1xuICB9XG4gIHJldHVybiBwYXJzZSAmJiBzdHIgJiYgKHN0ci5sZW5ndGggfHwgc3RyIGluc3RhbmNlb2YgT2JqZWN0KVxuICAgID8gcGFyc2Uoc3RyKVxuICAgIDogbnVsbDtcbn07XG5cbi8qKlxuICogUmV0dXJuIGFuIGBFcnJvcmAgcmVwcmVzZW50YXRpdmUgb2YgdGhpcyByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJuIHtFcnJvcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVzcG9uc2UucHJvdG90eXBlLnRvRXJyb3IgPSBmdW5jdGlvbigpe1xuICB2YXIgcmVxID0gdGhpcy5yZXE7XG4gIHZhciBtZXRob2QgPSByZXEubWV0aG9kO1xuICB2YXIgdXJsID0gcmVxLnVybDtcblxuICB2YXIgbXNnID0gJ2Nhbm5vdCAnICsgbWV0aG9kICsgJyAnICsgdXJsICsgJyAoJyArIHRoaXMuc3RhdHVzICsgJyknO1xuICB2YXIgZXJyID0gbmV3IEVycm9yKG1zZyk7XG4gIGVyci5zdGF0dXMgPSB0aGlzLnN0YXR1cztcbiAgZXJyLm1ldGhvZCA9IG1ldGhvZDtcbiAgZXJyLnVybCA9IHVybDtcblxuICByZXR1cm4gZXJyO1xufTtcblxuLyoqXG4gKiBFeHBvc2UgYFJlc3BvbnNlYC5cbiAqL1xuXG5yZXF1ZXN0LlJlc3BvbnNlID0gUmVzcG9uc2U7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBhIG5ldyBgUmVxdWVzdGAgd2l0aCB0aGUgZ2l2ZW4gYG1ldGhvZGAgYW5kIGB1cmxgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2RcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gUmVxdWVzdChtZXRob2QsIHVybCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuX3F1ZXJ5ID0gdGhpcy5fcXVlcnkgfHwgW107XG4gIHRoaXMubWV0aG9kID0gbWV0aG9kO1xuICB0aGlzLnVybCA9IHVybDtcbiAgdGhpcy5oZWFkZXIgPSB7fTsgLy8gcHJlc2VydmVzIGhlYWRlciBuYW1lIGNhc2VcbiAgdGhpcy5faGVhZGVyID0ge307IC8vIGNvZXJjZXMgaGVhZGVyIG5hbWVzIHRvIGxvd2VyY2FzZVxuICB0aGlzLm9uKCdlbmQnLCBmdW5jdGlvbigpe1xuICAgIHZhciBlcnIgPSBudWxsO1xuICAgIHZhciByZXMgPSBudWxsO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJlcyA9IG5ldyBSZXNwb25zZShzZWxmKTtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIGVyciA9IG5ldyBFcnJvcignUGFyc2VyIGlzIHVuYWJsZSB0byBwYXJzZSB0aGUgcmVzcG9uc2UnKTtcbiAgICAgIGVyci5wYXJzZSA9IHRydWU7XG4gICAgICBlcnIub3JpZ2luYWwgPSBlO1xuICAgICAgLy8gaXNzdWUgIzY3NTogcmV0dXJuIHRoZSByYXcgcmVzcG9uc2UgaWYgdGhlIHJlc3BvbnNlIHBhcnNpbmcgZmFpbHNcbiAgICAgIGlmIChzZWxmLnhocikge1xuICAgICAgICAvLyBpZTkgZG9lc24ndCBoYXZlICdyZXNwb25zZScgcHJvcGVydHlcbiAgICAgICAgZXJyLnJhd1Jlc3BvbnNlID0gdHlwZW9mIHNlbGYueGhyLnJlc3BvbnNlVHlwZSA9PSAndW5kZWZpbmVkJyA/IHNlbGYueGhyLnJlc3BvbnNlVGV4dCA6IHNlbGYueGhyLnJlc3BvbnNlO1xuICAgICAgICAvLyBpc3N1ZSAjODc2OiByZXR1cm4gdGhlIGh0dHAgc3RhdHVzIGNvZGUgaWYgdGhlIHJlc3BvbnNlIHBhcnNpbmcgZmFpbHNcbiAgICAgICAgZXJyLnN0YXR1cyA9IHNlbGYueGhyLnN0YXR1cyA/IHNlbGYueGhyLnN0YXR1cyA6IG51bGw7XG4gICAgICAgIGVyci5zdGF0dXNDb2RlID0gZXJyLnN0YXR1czsgLy8gYmFja3dhcmRzLWNvbXBhdCBvbmx5XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnIucmF3UmVzcG9uc2UgPSBudWxsO1xuICAgICAgICBlcnIuc3RhdHVzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGYuY2FsbGJhY2soZXJyKTtcbiAgICB9XG5cbiAgICBzZWxmLmVtaXQoJ3Jlc3BvbnNlJywgcmVzKTtcblxuICAgIHZhciBuZXdfZXJyO1xuICAgIHRyeSB7XG4gICAgICBpZiAoIXNlbGYuX2lzUmVzcG9uc2VPSyhyZXMpKSB7XG4gICAgICAgIG5ld19lcnIgPSBuZXcgRXJyb3IocmVzLnN0YXR1c1RleHQgfHwgJ1Vuc3VjY2Vzc2Z1bCBIVFRQIHJlc3BvbnNlJyk7XG4gICAgICAgIG5ld19lcnIub3JpZ2luYWwgPSBlcnI7XG4gICAgICAgIG5ld19lcnIucmVzcG9uc2UgPSByZXM7XG4gICAgICAgIG5ld19lcnIuc3RhdHVzID0gcmVzLnN0YXR1cztcbiAgICAgIH1cbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIG5ld19lcnIgPSBlOyAvLyAjOTg1IHRvdWNoaW5nIHJlcyBtYXkgY2F1c2UgSU5WQUxJRF9TVEFURV9FUlIgb24gb2xkIEFuZHJvaWRcbiAgICB9XG5cbiAgICAvLyAjMTAwMCBkb24ndCBjYXRjaCBlcnJvcnMgZnJvbSB0aGUgY2FsbGJhY2sgdG8gYXZvaWQgZG91YmxlIGNhbGxpbmcgaXRcbiAgICBpZiAobmV3X2Vycikge1xuICAgICAgc2VsZi5jYWxsYmFjayhuZXdfZXJyLCByZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLmNhbGxiYWNrKG51bGwsIHJlcyk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBNaXhpbiBgRW1pdHRlcmAgYW5kIGBSZXF1ZXN0QmFzZWAuXG4gKi9cblxuRW1pdHRlcihSZXF1ZXN0LnByb3RvdHlwZSk7XG5SZXF1ZXN0QmFzZShSZXF1ZXN0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogU2V0IENvbnRlbnQtVHlwZSB0byBgdHlwZWAsIG1hcHBpbmcgdmFsdWVzIGZyb20gYHJlcXVlc3QudHlwZXNgLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgc3VwZXJhZ2VudC50eXBlcy54bWwgPSAnYXBwbGljYXRpb24veG1sJztcbiAqXG4gKiAgICAgIHJlcXVlc3QucG9zdCgnLycpXG4gKiAgICAgICAgLnR5cGUoJ3htbCcpXG4gKiAgICAgICAgLnNlbmQoeG1sc3RyaW5nKVxuICogICAgICAgIC5lbmQoY2FsbGJhY2spO1xuICpcbiAqICAgICAgcmVxdWVzdC5wb3N0KCcvJylcbiAqICAgICAgICAudHlwZSgnYXBwbGljYXRpb24veG1sJylcbiAqICAgICAgICAuc2VuZCh4bWxzdHJpbmcpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS50eXBlID0gZnVuY3Rpb24odHlwZSl7XG4gIHRoaXMuc2V0KCdDb250ZW50LVR5cGUnLCByZXF1ZXN0LnR5cGVzW3R5cGVdIHx8IHR5cGUpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IEFjY2VwdCB0byBgdHlwZWAsIG1hcHBpbmcgdmFsdWVzIGZyb20gYHJlcXVlc3QudHlwZXNgLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgc3VwZXJhZ2VudC50eXBlcy5qc29uID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICpcbiAqICAgICAgcmVxdWVzdC5nZXQoJy9hZ2VudCcpXG4gKiAgICAgICAgLmFjY2VwdCgnanNvbicpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogICAgICByZXF1ZXN0LmdldCgnL2FnZW50JylcbiAqICAgICAgICAuYWNjZXB0KCdhcHBsaWNhdGlvbi9qc29uJylcbiAqICAgICAgICAuZW5kKGNhbGxiYWNrKTtcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYWNjZXB0XG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24odHlwZSl7XG4gIHRoaXMuc2V0KCdBY2NlcHQnLCByZXF1ZXN0LnR5cGVzW3R5cGVdIHx8IHR5cGUpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IEF1dGhvcml6YXRpb24gZmllbGQgdmFsdWUgd2l0aCBgdXNlcmAgYW5kIGBwYXNzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXNlclxuICogQHBhcmFtIHtTdHJpbmd9IFtwYXNzXSBvcHRpb25hbCBpbiBjYXNlIG9mIHVzaW5nICdiZWFyZXInIGFzIHR5cGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIHdpdGggJ3R5cGUnIHByb3BlcnR5ICdhdXRvJywgJ2Jhc2ljJyBvciAnYmVhcmVyJyAoZGVmYXVsdCAnYmFzaWMnKVxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmF1dGggPSBmdW5jdGlvbih1c2VyLCBwYXNzLCBvcHRpb25zKXtcbiAgaWYgKHR5cGVvZiBwYXNzID09PSAnb2JqZWN0JyAmJiBwYXNzICE9PSBudWxsKSB7IC8vIHBhc3MgaXMgb3B0aW9uYWwgYW5kIGNhbiBzdWJzdGl0dXRlIGZvciBvcHRpb25zXG4gICAgb3B0aW9ucyA9IHBhc3M7XG4gIH1cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHR5cGU6ICdmdW5jdGlvbicgPT09IHR5cGVvZiBidG9hID8gJ2Jhc2ljJyA6ICdhdXRvJyxcbiAgICB9XG4gIH1cblxuICBzd2l0Y2ggKG9wdGlvbnMudHlwZSkge1xuICAgIGNhc2UgJ2Jhc2ljJzpcbiAgICAgIHRoaXMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0Jhc2ljICcgKyBidG9hKHVzZXIgKyAnOicgKyBwYXNzKSk7XG4gICAgYnJlYWs7XG5cbiAgICBjYXNlICdhdXRvJzpcbiAgICAgIHRoaXMudXNlcm5hbWUgPSB1c2VyO1xuICAgICAgdGhpcy5wYXNzd29yZCA9IHBhc3M7XG4gICAgYnJlYWs7XG5cbiAgICBjYXNlICdiZWFyZXInOiAvLyB1c2FnZSB3b3VsZCBiZSAuYXV0aChhY2Nlc3NUb2tlbiwgeyB0eXBlOiAnYmVhcmVyJyB9KVxuICAgICAgdGhpcy5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmVhcmVyICcgKyB1c2VyKTtcbiAgICBicmVhaztcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQWRkIHF1ZXJ5LXN0cmluZyBgdmFsYC5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgIHJlcXVlc3QuZ2V0KCcvc2hvZXMnKVxuICogICAgIC5xdWVyeSgnc2l6ZT0xMCcpXG4gKiAgICAgLnF1ZXJ5KHsgY29sb3I6ICdibHVlJyB9KVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gdmFsXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbih2YWwpe1xuICBpZiAoJ3N0cmluZycgIT0gdHlwZW9mIHZhbCkgdmFsID0gc2VyaWFsaXplKHZhbCk7XG4gIGlmICh2YWwpIHRoaXMuX3F1ZXJ5LnB1c2godmFsKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFF1ZXVlIHRoZSBnaXZlbiBgZmlsZWAgYXMgYW4gYXR0YWNobWVudCB0byB0aGUgc3BlY2lmaWVkIGBmaWVsZGAsXG4gKiB3aXRoIG9wdGlvbmFsIGBvcHRpb25zYCAob3IgZmlsZW5hbWUpLlxuICpcbiAqIGBgYCBqc1xuICogcmVxdWVzdC5wb3N0KCcvdXBsb2FkJylcbiAqICAgLmF0dGFjaCgnY29udGVudCcsIG5ldyBCbG9iKFsnPGEgaWQ9XCJhXCI+PGIgaWQ9XCJiXCI+aGV5ITwvYj48L2E+J10sIHsgdHlwZTogXCJ0ZXh0L2h0bWxcIn0pKVxuICogICAuZW5kKGNhbGxiYWNrKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWVsZFxuICogQHBhcmFtIHtCbG9ifEZpbGV9IGZpbGVcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uKGZpZWxkLCBmaWxlLCBvcHRpb25zKXtcbiAgaWYgKGZpbGUpIHtcbiAgICBpZiAodGhpcy5fZGF0YSkge1xuICAgICAgdGhyb3cgRXJyb3IoXCJzdXBlcmFnZW50IGNhbid0IG1peCAuc2VuZCgpIGFuZCAuYXR0YWNoKClcIik7XG4gICAgfVxuXG4gICAgdGhpcy5fZ2V0Rm9ybURhdGEoKS5hcHBlbmQoZmllbGQsIGZpbGUsIG9wdGlvbnMgfHwgZmlsZS5uYW1lKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cblJlcXVlc3QucHJvdG90eXBlLl9nZXRGb3JtRGF0YSA9IGZ1bmN0aW9uKCl7XG4gIGlmICghdGhpcy5fZm9ybURhdGEpIHtcbiAgICB0aGlzLl9mb3JtRGF0YSA9IG5ldyByb290LkZvcm1EYXRhKCk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX2Zvcm1EYXRhO1xufTtcblxuLyoqXG4gKiBJbnZva2UgdGhlIGNhbGxiYWNrIHdpdGggYGVycmAgYW5kIGByZXNgXG4gKiBhbmQgaGFuZGxlIGFyaXR5IGNoZWNrLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVyclxuICogQHBhcmFtIHtSZXNwb25zZX0gcmVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jYWxsYmFjayA9IGZ1bmN0aW9uKGVyciwgcmVzKXtcbiAgLy8gY29uc29sZS5sb2codGhpcy5fcmV0cmllcywgdGhpcy5fbWF4UmV0cmllcylcbiAgaWYgKHRoaXMuX21heFJldHJpZXMgJiYgdGhpcy5fcmV0cmllcysrIDwgdGhpcy5fbWF4UmV0cmllcyAmJiBzaG91bGRSZXRyeShlcnIsIHJlcykpIHtcbiAgICByZXR1cm4gdGhpcy5fcmV0cnkoKTtcbiAgfVxuXG4gIHZhciBmbiA9IHRoaXMuX2NhbGxiYWNrO1xuICB0aGlzLmNsZWFyVGltZW91dCgpO1xuXG4gIGlmIChlcnIpIHtcbiAgICBpZiAodGhpcy5fbWF4UmV0cmllcykgZXJyLnJldHJpZXMgPSB0aGlzLl9yZXRyaWVzIC0gMTtcbiAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgfVxuXG4gIGZuKGVyciwgcmVzKTtcbn07XG5cbi8qKlxuICogSW52b2tlIGNhbGxiYWNrIHdpdGggeC1kb21haW4gZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY3Jvc3NEb21haW5FcnJvciA9IGZ1bmN0aW9uKCl7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1JlcXVlc3QgaGFzIGJlZW4gdGVybWluYXRlZFxcblBvc3NpYmxlIGNhdXNlczogdGhlIG5ldHdvcmsgaXMgb2ZmbGluZSwgT3JpZ2luIGlzIG5vdCBhbGxvd2VkIGJ5IEFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbiwgdGhlIHBhZ2UgaXMgYmVpbmcgdW5sb2FkZWQsIGV0Yy4nKTtcbiAgZXJyLmNyb3NzRG9tYWluID0gdHJ1ZTtcblxuICBlcnIuc3RhdHVzID0gdGhpcy5zdGF0dXM7XG4gIGVyci5tZXRob2QgPSB0aGlzLm1ldGhvZDtcbiAgZXJyLnVybCA9IHRoaXMudXJsO1xuXG4gIHRoaXMuY2FsbGJhY2soZXJyKTtcbn07XG5cbi8vIFRoaXMgb25seSB3YXJucywgYmVjYXVzZSB0aGUgcmVxdWVzdCBpcyBzdGlsbCBsaWtlbHkgdG8gd29ya1xuUmVxdWVzdC5wcm90b3R5cGUuYnVmZmVyID0gUmVxdWVzdC5wcm90b3R5cGUuY2EgPSBSZXF1ZXN0LnByb3RvdHlwZS5hZ2VudCA9IGZ1bmN0aW9uKCl7XG4gIGNvbnNvbGUud2FybihcIlRoaXMgaXMgbm90IHN1cHBvcnRlZCBpbiBicm93c2VyIHZlcnNpb24gb2Ygc3VwZXJhZ2VudFwiKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBUaGlzIHRocm93cywgYmVjYXVzZSBpdCBjYW4ndCBzZW5kL3JlY2VpdmUgZGF0YSBhcyBleHBlY3RlZFxuUmVxdWVzdC5wcm90b3R5cGUucGlwZSA9IFJlcXVlc3QucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oKXtcbiAgdGhyb3cgRXJyb3IoXCJTdHJlYW1pbmcgaXMgbm90IHN1cHBvcnRlZCBpbiBicm93c2VyIHZlcnNpb24gb2Ygc3VwZXJhZ2VudFwiKTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYG9iamAgaXMgYSBob3N0IG9iamVjdCxcbiAqIHdlIGRvbid0IHdhbnQgdG8gc2VyaWFsaXplIHRoZXNlIDopXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5SZXF1ZXN0LnByb3RvdHlwZS5faXNIb3N0ID0gZnVuY3Rpb24gX2lzSG9zdChvYmopIHtcbiAgLy8gTmF0aXZlIG9iamVjdHMgc3RyaW5naWZ5IHRvIFtvYmplY3QgRmlsZV0sIFtvYmplY3QgQmxvYl0sIFtvYmplY3QgRm9ybURhdGFdLCBldGMuXG4gIHJldHVybiBvYmogJiYgJ29iamVjdCcgPT09IHR5cGVvZiBvYmogJiYgIUFycmF5LmlzQXJyYXkob2JqKSAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSAhPT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbi8qKlxuICogSW5pdGlhdGUgcmVxdWVzdCwgaW52b2tpbmcgY2FsbGJhY2sgYGZuKHJlcylgXG4gKiB3aXRoIGFuIGluc3RhbmNlb2YgYFJlc3BvbnNlYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGZuKXtcbiAgaWYgKHRoaXMuX2VuZENhbGxlZCkge1xuICAgIGNvbnNvbGUud2FybihcIldhcm5pbmc6IC5lbmQoKSB3YXMgY2FsbGVkIHR3aWNlLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQgaW4gc3VwZXJhZ2VudFwiKTtcbiAgfVxuICB0aGlzLl9lbmRDYWxsZWQgPSB0cnVlO1xuXG4gIC8vIHN0b3JlIGNhbGxiYWNrXG4gIHRoaXMuX2NhbGxiYWNrID0gZm4gfHwgbm9vcDtcblxuICAvLyBxdWVyeXN0cmluZ1xuICB0aGlzLl9maW5hbGl6ZVF1ZXJ5U3RyaW5nKCk7XG5cbiAgcmV0dXJuIHRoaXMuX2VuZCgpO1xufTtcblxuUmVxdWVzdC5wcm90b3R5cGUuX2VuZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB4aHIgPSB0aGlzLnhociA9IHJlcXVlc3QuZ2V0WEhSKCk7XG4gIHZhciBkYXRhID0gdGhpcy5fZm9ybURhdGEgfHwgdGhpcy5fZGF0YTtcblxuICB0aGlzLl9zZXRUaW1lb3V0cygpO1xuXG4gIC8vIHN0YXRlIGNoYW5nZVxuICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgcmVhZHlTdGF0ZSA9IHhoci5yZWFkeVN0YXRlO1xuICAgIGlmIChyZWFkeVN0YXRlID49IDIgJiYgc2VsZi5fcmVzcG9uc2VUaW1lb3V0VGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dChzZWxmLl9yZXNwb25zZVRpbWVvdXRUaW1lcik7XG4gICAgfVxuICAgIGlmICg0ICE9IHJlYWR5U3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJbiBJRTksIHJlYWRzIHRvIGFueSBwcm9wZXJ0eSAoZS5nLiBzdGF0dXMpIG9mZiBvZiBhbiBhYm9ydGVkIFhIUiB3aWxsXG4gICAgLy8gcmVzdWx0IGluIHRoZSBlcnJvciBcIkNvdWxkIG5vdCBjb21wbGV0ZSB0aGUgb3BlcmF0aW9uIGR1ZSB0byBlcnJvciBjMDBjMDIzZlwiXG4gICAgdmFyIHN0YXR1cztcbiAgICB0cnkgeyBzdGF0dXMgPSB4aHIuc3RhdHVzIH0gY2F0Y2goZSkgeyBzdGF0dXMgPSAwOyB9XG5cbiAgICBpZiAoIXN0YXR1cykge1xuICAgICAgaWYgKHNlbGYudGltZWRvdXQgfHwgc2VsZi5fYWJvcnRlZCkgcmV0dXJuO1xuICAgICAgcmV0dXJuIHNlbGYuY3Jvc3NEb21haW5FcnJvcigpO1xuICAgIH1cbiAgICBzZWxmLmVtaXQoJ2VuZCcpO1xuICB9O1xuXG4gIC8vIHByb2dyZXNzXG4gIHZhciBoYW5kbGVQcm9ncmVzcyA9IGZ1bmN0aW9uKGRpcmVjdGlvbiwgZSkge1xuICAgIGlmIChlLnRvdGFsID4gMCkge1xuICAgICAgZS5wZXJjZW50ID0gZS5sb2FkZWQgLyBlLnRvdGFsICogMTAwO1xuICAgIH1cbiAgICBlLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICBzZWxmLmVtaXQoJ3Byb2dyZXNzJywgZSk7XG4gIH1cbiAgaWYgKHRoaXMuaGFzTGlzdGVuZXJzKCdwcm9ncmVzcycpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHhoci5vbnByb2dyZXNzID0gaGFuZGxlUHJvZ3Jlc3MuYmluZChudWxsLCAnZG93bmxvYWQnKTtcbiAgICAgIGlmICh4aHIudXBsb2FkKSB7XG4gICAgICAgIHhoci51cGxvYWQub25wcm9ncmVzcyA9IGhhbmRsZVByb2dyZXNzLmJpbmQobnVsbCwgJ3VwbG9hZCcpO1xuICAgICAgfVxuICAgIH0gY2F0Y2goZSkge1xuICAgICAgLy8gQWNjZXNzaW5nIHhoci51cGxvYWQgZmFpbHMgaW4gSUUgZnJvbSBhIHdlYiB3b3JrZXIsIHNvIGp1c3QgcHJldGVuZCBpdCBkb2Vzbid0IGV4aXN0LlxuICAgICAgLy8gUmVwb3J0ZWQgaGVyZTpcbiAgICAgIC8vIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvODM3MjQ1L3htbGh0dHByZXF1ZXN0LXVwbG9hZC10aHJvd3MtaW52YWxpZC1hcmd1bWVudC13aGVuLXVzZWQtZnJvbS13ZWItd29ya2VyLWNvbnRleHRcbiAgICB9XG4gIH1cblxuICAvLyBpbml0aWF0ZSByZXF1ZXN0XG4gIHRyeSB7XG4gICAgaWYgKHRoaXMudXNlcm5hbWUgJiYgdGhpcy5wYXNzd29yZCkge1xuICAgICAgeGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJsLCB0cnVlLCB0aGlzLnVzZXJuYW1lLCB0aGlzLnBhc3N3b3JkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJsLCB0cnVlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIHNlZSAjMTE0OVxuICAgIHJldHVybiB0aGlzLmNhbGxiYWNrKGVycik7XG4gIH1cblxuICAvLyBDT1JTXG4gIGlmICh0aGlzLl93aXRoQ3JlZGVudGlhbHMpIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuXG4gIC8vIGJvZHlcbiAgaWYgKCF0aGlzLl9mb3JtRGF0YSAmJiAnR0VUJyAhPSB0aGlzLm1ldGhvZCAmJiAnSEVBRCcgIT0gdGhpcy5tZXRob2QgJiYgJ3N0cmluZycgIT0gdHlwZW9mIGRhdGEgJiYgIXRoaXMuX2lzSG9zdChkYXRhKSkge1xuICAgIC8vIHNlcmlhbGl6ZSBzdHVmZlxuICAgIHZhciBjb250ZW50VHlwZSA9IHRoaXMuX2hlYWRlclsnY29udGVudC10eXBlJ107XG4gICAgdmFyIHNlcmlhbGl6ZSA9IHRoaXMuX3NlcmlhbGl6ZXIgfHwgcmVxdWVzdC5zZXJpYWxpemVbY29udGVudFR5cGUgPyBjb250ZW50VHlwZS5zcGxpdCgnOycpWzBdIDogJyddO1xuICAgIGlmICghc2VyaWFsaXplICYmIGlzSlNPTihjb250ZW50VHlwZSkpIHtcbiAgICAgIHNlcmlhbGl6ZSA9IHJlcXVlc3Quc2VyaWFsaXplWydhcHBsaWNhdGlvbi9qc29uJ107XG4gICAgfVxuICAgIGlmIChzZXJpYWxpemUpIGRhdGEgPSBzZXJpYWxpemUoZGF0YSk7XG4gIH1cblxuICAvLyBzZXQgaGVhZGVyIGZpZWxkc1xuICBmb3IgKHZhciBmaWVsZCBpbiB0aGlzLmhlYWRlcikge1xuICAgIGlmIChudWxsID09IHRoaXMuaGVhZGVyW2ZpZWxkXSkgY29udGludWU7XG5cbiAgICBpZiAodGhpcy5oZWFkZXIuaGFzT3duUHJvcGVydHkoZmllbGQpKVxuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoZmllbGQsIHRoaXMuaGVhZGVyW2ZpZWxkXSk7XG4gIH1cblxuICBpZiAodGhpcy5fcmVzcG9uc2VUeXBlKSB7XG4gICAgeGhyLnJlc3BvbnNlVHlwZSA9IHRoaXMuX3Jlc3BvbnNlVHlwZTtcbiAgfVxuXG4gIC8vIHNlbmQgc3R1ZmZcbiAgdGhpcy5lbWl0KCdyZXF1ZXN0JywgdGhpcyk7XG5cbiAgLy8gSUUxMSB4aHIuc2VuZCh1bmRlZmluZWQpIHNlbmRzICd1bmRlZmluZWQnIHN0cmluZyBhcyBQT1NUIHBheWxvYWQgKGluc3RlYWQgb2Ygbm90aGluZylcbiAgLy8gV2UgbmVlZCBudWxsIGhlcmUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgeGhyLnNlbmQodHlwZW9mIGRhdGEgIT09ICd1bmRlZmluZWQnID8gZGF0YSA6IG51bGwpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogR0VUIGB1cmxgIHdpdGggb3B0aW9uYWwgY2FsbGJhY2sgYGZuKHJlcylgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7TWl4ZWR8RnVuY3Rpb259IFtkYXRhXSBvciBmblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2ZuXVxuICogQHJldHVybiB7UmVxdWVzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucmVxdWVzdC5nZXQgPSBmdW5jdGlvbih1cmwsIGRhdGEsIGZuKXtcbiAgdmFyIHJlcSA9IHJlcXVlc3QoJ0dFVCcsIHVybCk7XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBkYXRhKSBmbiA9IGRhdGEsIGRhdGEgPSBudWxsO1xuICBpZiAoZGF0YSkgcmVxLnF1ZXJ5KGRhdGEpO1xuICBpZiAoZm4pIHJlcS5lbmQoZm4pO1xuICByZXR1cm4gcmVxO1xufTtcblxuLyoqXG4gKiBIRUFEIGB1cmxgIHdpdGggb3B0aW9uYWwgY2FsbGJhY2sgYGZuKHJlcylgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7TWl4ZWR8RnVuY3Rpb259IFtkYXRhXSBvciBmblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2ZuXVxuICogQHJldHVybiB7UmVxdWVzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucmVxdWVzdC5oZWFkID0gZnVuY3Rpb24odXJsLCBkYXRhLCBmbil7XG4gIHZhciByZXEgPSByZXF1ZXN0KCdIRUFEJywgdXJsKTtcbiAgaWYgKCdmdW5jdGlvbicgPT0gdHlwZW9mIGRhdGEpIGZuID0gZGF0YSwgZGF0YSA9IG51bGw7XG4gIGlmIChkYXRhKSByZXEucXVlcnkoZGF0YSk7XG4gIGlmIChmbikgcmVxLmVuZChmbik7XG4gIHJldHVybiByZXE7XG59O1xuXG4vKipcbiAqIE9QVElPTlMgcXVlcnkgdG8gYHVybGAgd2l0aCBvcHRpb25hbCBjYWxsYmFjayBgZm4ocmVzKWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHBhcmFtIHtNaXhlZHxGdW5jdGlvbn0gW2RhdGFdIG9yIGZuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZm5dXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5yZXF1ZXN0Lm9wdGlvbnMgPSBmdW5jdGlvbih1cmwsIGRhdGEsIGZuKXtcbiAgdmFyIHJlcSA9IHJlcXVlc3QoJ09QVElPTlMnLCB1cmwpO1xuICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgZGF0YSkgZm4gPSBkYXRhLCBkYXRhID0gbnVsbDtcbiAgaWYgKGRhdGEpIHJlcS5zZW5kKGRhdGEpO1xuICBpZiAoZm4pIHJlcS5lbmQoZm4pO1xuICByZXR1cm4gcmVxO1xufTtcblxuLyoqXG4gKiBERUxFVEUgYHVybGAgd2l0aCBvcHRpb25hbCBgZGF0YWAgYW5kIGNhbGxiYWNrIGBmbihyZXMpYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge01peGVkfSBbZGF0YV1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtmbl1cbiAqIEByZXR1cm4ge1JlcXVlc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlbCh1cmwsIGRhdGEsIGZuKXtcbiAgdmFyIHJlcSA9IHJlcXVlc3QoJ0RFTEVURScsIHVybCk7XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBkYXRhKSBmbiA9IGRhdGEsIGRhdGEgPSBudWxsO1xuICBpZiAoZGF0YSkgcmVxLnNlbmQoZGF0YSk7XG4gIGlmIChmbikgcmVxLmVuZChmbik7XG4gIHJldHVybiByZXE7XG59O1xuXG5yZXF1ZXN0WydkZWwnXSA9IGRlbDtcbnJlcXVlc3RbJ2RlbGV0ZSddID0gZGVsO1xuXG4vKipcbiAqIFBBVENIIGB1cmxgIHdpdGggb3B0aW9uYWwgYGRhdGFgIGFuZCBjYWxsYmFjayBgZm4ocmVzKWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHBhcmFtIHtNaXhlZH0gW2RhdGFdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZm5dXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5yZXF1ZXN0LnBhdGNoID0gZnVuY3Rpb24odXJsLCBkYXRhLCBmbil7XG4gIHZhciByZXEgPSByZXF1ZXN0KCdQQVRDSCcsIHVybCk7XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBkYXRhKSBmbiA9IGRhdGEsIGRhdGEgPSBudWxsO1xuICBpZiAoZGF0YSkgcmVxLnNlbmQoZGF0YSk7XG4gIGlmIChmbikgcmVxLmVuZChmbik7XG4gIHJldHVybiByZXE7XG59O1xuXG4vKipcbiAqIFBPU1QgYHVybGAgd2l0aCBvcHRpb25hbCBgZGF0YWAgYW5kIGNhbGxiYWNrIGBmbihyZXMpYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge01peGVkfSBbZGF0YV1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtmbl1cbiAqIEByZXR1cm4ge1JlcXVlc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnJlcXVlc3QucG9zdCA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgZm4pe1xuICB2YXIgcmVxID0gcmVxdWVzdCgnUE9TVCcsIHVybCk7XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBkYXRhKSBmbiA9IGRhdGEsIGRhdGEgPSBudWxsO1xuICBpZiAoZGF0YSkgcmVxLnNlbmQoZGF0YSk7XG4gIGlmIChmbikgcmVxLmVuZChmbik7XG4gIHJldHVybiByZXE7XG59O1xuXG4vKipcbiAqIFBVVCBgdXJsYCB3aXRoIG9wdGlvbmFsIGBkYXRhYCBhbmQgY2FsbGJhY2sgYGZuKHJlcylgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7TWl4ZWR8RnVuY3Rpb259IFtkYXRhXSBvciBmblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2ZuXVxuICogQHJldHVybiB7UmVxdWVzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucmVxdWVzdC5wdXQgPSBmdW5jdGlvbih1cmwsIGRhdGEsIGZuKXtcbiAgdmFyIHJlcSA9IHJlcXVlc3QoJ1BVVCcsIHVybCk7XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBkYXRhKSBmbiA9IGRhdGEsIGRhdGEgPSBudWxsO1xuICBpZiAoZGF0YSkgcmVxLnNlbmQoZGF0YSk7XG4gIGlmIChmbikgcmVxLmVuZChmbik7XG4gIHJldHVybiByZXE7XG59O1xuIiwiLyoqXG4gKiBDaGVjayBpZiBgb2JqYCBpcyBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gbnVsbCAhPT0gb2JqICYmICdvYmplY3QnID09PSB0eXBlb2Ygb2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwiLyoqXG4gKiBNb2R1bGUgb2YgbWl4ZWQtaW4gZnVuY3Rpb25zIHNoYXJlZCBiZXR3ZWVuIG5vZGUgYW5kIGNsaWVudCBjb2RlXG4gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXMtb2JqZWN0Jyk7XG5cbi8qKlxuICogRXhwb3NlIGBSZXF1ZXN0QmFzZWAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBSZXF1ZXN0QmFzZTtcblxuLyoqXG4gKiBJbml0aWFsaXplIGEgbmV3IGBSZXF1ZXN0QmFzZWAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBSZXF1ZXN0QmFzZShvYmopIHtcbiAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XG59XG5cbi8qKlxuICogTWl4aW4gdGhlIHByb3RvdHlwZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG1peGluKG9iaikge1xuICBmb3IgKHZhciBrZXkgaW4gUmVxdWVzdEJhc2UucHJvdG90eXBlKSB7XG4gICAgb2JqW2tleV0gPSBSZXF1ZXN0QmFzZS5wcm90b3R5cGVba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIENsZWFyIHByZXZpb3VzIHRpbWVvdXQuXG4gKlxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5jbGVhclRpbWVvdXQgPSBmdW5jdGlvbiBfY2xlYXJUaW1lb3V0KCl7XG4gIGNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XG4gIGNsZWFyVGltZW91dCh0aGlzLl9yZXNwb25zZVRpbWVvdXRUaW1lcik7XG4gIGRlbGV0ZSB0aGlzLl90aW1lcjtcbiAgZGVsZXRlIHRoaXMuX3Jlc3BvbnNlVGltZW91dFRpbWVyO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogT3ZlcnJpZGUgZGVmYXVsdCByZXNwb25zZSBib2R5IHBhcnNlclxuICpcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgdG8gY29udmVydCBpbmNvbWluZyBkYXRhIGludG8gcmVxdWVzdC5ib2R5XG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gcGFyc2UoZm4pe1xuICB0aGlzLl9wYXJzZXIgPSBmbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldCBmb3JtYXQgb2YgYmluYXJ5IHJlc3BvbnNlIGJvZHkuXG4gKiBJbiBicm93c2VyIHZhbGlkIGZvcm1hdHMgYXJlICdibG9iJyBhbmQgJ2FycmF5YnVmZmVyJyxcbiAqIHdoaWNoIHJldHVybiBCbG9iIGFuZCBBcnJheUJ1ZmZlciwgcmVzcGVjdGl2ZWx5LlxuICpcbiAqIEluIE5vZGUgYWxsIHZhbHVlcyByZXN1bHQgaW4gQnVmZmVyLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgcmVxLmdldCgnLycpXG4gKiAgICAgICAgLnJlc3BvbnNlVHlwZSgnYmxvYicpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHZhbFxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5yZXNwb25zZVR5cGUgPSBmdW5jdGlvbih2YWwpe1xuICB0aGlzLl9yZXNwb25zZVR5cGUgPSB2YWw7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBPdmVycmlkZSBkZWZhdWx0IHJlcXVlc3QgYm9keSBzZXJpYWxpemVyXG4gKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB0byBjb252ZXJ0IGRhdGEgc2V0IHZpYSAuc2VuZCBvciAuYXR0YWNoIGludG8gcGF5bG9hZCB0byBzZW5kXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uIHNlcmlhbGl6ZShmbil7XG4gIHRoaXMuX3NlcmlhbGl6ZXIgPSBmbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldCB0aW1lb3V0cy5cbiAqXG4gKiAtIHJlc3BvbnNlIHRpbWVvdXQgaXMgdGltZSBiZXR3ZWVuIHNlbmRpbmcgcmVxdWVzdCBhbmQgcmVjZWl2aW5nIHRoZSBmaXJzdCBieXRlIG9mIHRoZSByZXNwb25zZS4gSW5jbHVkZXMgRE5TIGFuZCBjb25uZWN0aW9uIHRpbWUuXG4gKiAtIGRlYWRsaW5lIGlzIHRoZSB0aW1lIGZyb20gc3RhcnQgb2YgdGhlIHJlcXVlc3QgdG8gcmVjZWl2aW5nIHJlc3BvbnNlIGJvZHkgaW4gZnVsbC4gSWYgdGhlIGRlYWRsaW5lIGlzIHRvbyBzaG9ydCBsYXJnZSBmaWxlcyBtYXkgbm90IGxvYWQgYXQgYWxsIG9uIHNsb3cgY29ubmVjdGlvbnMuXG4gKlxuICogVmFsdWUgb2YgMCBvciBmYWxzZSBtZWFucyBubyB0aW1lb3V0LlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfE9iamVjdH0gbXMgb3Ige3Jlc3BvbnNlLCBkZWFkbGluZX1cbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUudGltZW91dCA9IGZ1bmN0aW9uIHRpbWVvdXQob3B0aW9ucyl7XG4gIGlmICghb3B0aW9ucyB8fCAnb2JqZWN0JyAhPT0gdHlwZW9mIG9wdGlvbnMpIHtcbiAgICB0aGlzLl90aW1lb3V0ID0gb3B0aW9ucztcbiAgICB0aGlzLl9yZXNwb25zZVRpbWVvdXQgPSAwO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZm9yKHZhciBvcHRpb24gaW4gb3B0aW9ucykge1xuICAgIHN3aXRjaChvcHRpb24pIHtcbiAgICAgIGNhc2UgJ2RlYWRsaW5lJzpcbiAgICAgICAgdGhpcy5fdGltZW91dCA9IG9wdGlvbnMuZGVhZGxpbmU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmVzcG9uc2UnOlxuICAgICAgICB0aGlzLl9yZXNwb25zZVRpbWVvdXQgPSBvcHRpb25zLnJlc3BvbnNlO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbnNvbGUud2FybihcIlVua25vd24gdGltZW91dCBvcHRpb25cIiwgb3B0aW9uKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldCBudW1iZXIgb2YgcmV0cnkgYXR0ZW1wdHMgb24gZXJyb3IuXG4gKlxuICogRmFpbGVkIHJlcXVlc3RzIHdpbGwgYmUgcmV0cmllZCAnY291bnQnIHRpbWVzIGlmIHRpbWVvdXQgb3IgZXJyLmNvZGUgPj0gNTAwLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudFxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5yZXRyeSA9IGZ1bmN0aW9uIHJldHJ5KGNvdW50KXtcbiAgLy8gRGVmYXVsdCB0byAxIGlmIG5vIGNvdW50IHBhc3NlZCBvciB0cnVlXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8IGNvdW50ID09PSB0cnVlKSBjb3VudCA9IDE7XG4gIGlmIChjb3VudCA8PSAwKSBjb3VudCA9IDA7XG4gIHRoaXMuX21heFJldHJpZXMgPSBjb3VudDtcbiAgdGhpcy5fcmV0cmllcyA9IDA7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZXRyeSByZXF1ZXN0XG4gKlxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuX3JldHJ5ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY2xlYXJUaW1lb3V0KCk7XG5cbiAgLy8gbm9kZVxuICBpZiAodGhpcy5yZXEpIHtcbiAgICB0aGlzLnJlcSA9IG51bGw7XG4gICAgdGhpcy5yZXEgPSB0aGlzLnJlcXVlc3QoKTtcbiAgfVxuXG4gIHRoaXMuX2Fib3J0ZWQgPSBmYWxzZTtcbiAgdGhpcy50aW1lZG91dCA9IGZhbHNlO1xuXG4gIHJldHVybiB0aGlzLl9lbmQoKTtcbn07XG5cbi8qKlxuICogUHJvbWlzZSBzdXBwb3J0XG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3JlamVjdF1cbiAqIEByZXR1cm4ge1JlcXVlc3R9XG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbiB0aGVuKHJlc29sdmUsIHJlamVjdCkge1xuICBpZiAoIXRoaXMuX2Z1bGxmaWxsZWRQcm9taXNlKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICh0aGlzLl9lbmRDYWxsZWQpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIldhcm5pbmc6IHN1cGVyYWdlbnQgcmVxdWVzdCB3YXMgc2VudCB0d2ljZSwgYmVjYXVzZSBib3RoIC5lbmQoKSBhbmQgLnRoZW4oKSB3ZXJlIGNhbGxlZC4gTmV2ZXIgY2FsbCAuZW5kKCkgaWYgeW91IHVzZSBwcm9taXNlc1wiKTtcbiAgICB9XG4gICAgdGhpcy5fZnVsbGZpbGxlZFByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihpbm5lclJlc29sdmUsIGlubmVyUmVqZWN0KXtcbiAgICAgIHNlbGYuZW5kKGZ1bmN0aW9uKGVyciwgcmVzKXtcbiAgICAgICAgaWYgKGVycikgaW5uZXJSZWplY3QoZXJyKTsgZWxzZSBpbm5lclJlc29sdmUocmVzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB0aGlzLl9mdWxsZmlsbGVkUHJvbWlzZS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG59XG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5jYXRjaCA9IGZ1bmN0aW9uKGNiKSB7XG4gIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBjYik7XG59O1xuXG4vKipcbiAqIEFsbG93IGZvciBleHRlbnNpb25cbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZuKSB7XG4gIGZuKHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn1cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLm9rID0gZnVuY3Rpb24oY2IpIHtcbiAgaWYgKCdmdW5jdGlvbicgIT09IHR5cGVvZiBjYikgdGhyb3cgRXJyb3IoXCJDYWxsYmFjayByZXF1aXJlZFwiKTtcbiAgdGhpcy5fb2tDYWxsYmFjayA9IGNiO1xuICByZXR1cm4gdGhpcztcbn07XG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5faXNSZXNwb25zZU9LID0gZnVuY3Rpb24ocmVzKSB7XG4gIGlmICghcmVzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMuX29rQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5fb2tDYWxsYmFjayhyZXMpO1xuICB9XG5cbiAgcmV0dXJuIHJlcy5zdGF0dXMgPj0gMjAwICYmIHJlcy5zdGF0dXMgPCAzMDA7XG59O1xuXG5cbi8qKlxuICogR2V0IHJlcXVlc3QgaGVhZGVyIGBmaWVsZGAuXG4gKiBDYXNlLWluc2Vuc2l0aXZlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWVsZFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oZmllbGQpe1xuICByZXR1cm4gdGhpcy5faGVhZGVyW2ZpZWxkLnRvTG93ZXJDYXNlKCldO1xufTtcblxuLyoqXG4gKiBHZXQgY2FzZS1pbnNlbnNpdGl2ZSBoZWFkZXIgYGZpZWxkYCB2YWx1ZS5cbiAqIFRoaXMgaXMgYSBkZXByZWNhdGVkIGludGVybmFsIEFQSS4gVXNlIGAuZ2V0KGZpZWxkKWAgaW5zdGVhZC5cbiAqXG4gKiAoZ2V0SGVhZGVyIGlzIG5vIGxvbmdlciB1c2VkIGludGVybmFsbHkgYnkgdGhlIHN1cGVyYWdlbnQgY29kZSBiYXNlKVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWVsZFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKiBAZGVwcmVjYXRlZFxuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5nZXRIZWFkZXIgPSBSZXF1ZXN0QmFzZS5wcm90b3R5cGUuZ2V0O1xuXG4vKipcbiAqIFNldCBoZWFkZXIgYGZpZWxkYCB0byBgdmFsYCwgb3IgbXVsdGlwbGUgZmllbGRzIHdpdGggb25lIG9iamVjdC5cbiAqIENhc2UtaW5zZW5zaXRpdmUuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgICByZXEuZ2V0KCcvJylcbiAqICAgICAgICAuc2V0KCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpXG4gKiAgICAgICAgLnNldCgnWC1BUEktS2V5JywgJ2Zvb2JhcicpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogICAgICByZXEuZ2V0KCcvJylcbiAqICAgICAgICAuc2V0KHsgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsICdYLUFQSS1LZXknOiAnZm9vYmFyJyB9KVxuICogICAgICAgIC5lbmQoY2FsbGJhY2spO1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gZmllbGRcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWxcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oZmllbGQsIHZhbCl7XG4gIGlmIChpc09iamVjdChmaWVsZCkpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZmllbGQpIHtcbiAgICAgIHRoaXMuc2V0KGtleSwgZmllbGRba2V5XSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHRoaXMuX2hlYWRlcltmaWVsZC50b0xvd2VyQ2FzZSgpXSA9IHZhbDtcbiAgdGhpcy5oZWFkZXJbZmllbGRdID0gdmFsO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIGhlYWRlciBgZmllbGRgLlxuICogQ2FzZS1pbnNlbnNpdGl2ZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICAgcmVxLmdldCgnLycpXG4gKiAgICAgICAgLnVuc2V0KCdVc2VyLUFnZW50JylcbiAqICAgICAgICAuZW5kKGNhbGxiYWNrKTtcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmllbGRcbiAqL1xuUmVxdWVzdEJhc2UucHJvdG90eXBlLnVuc2V0ID0gZnVuY3Rpb24oZmllbGQpe1xuICBkZWxldGUgdGhpcy5faGVhZGVyW2ZpZWxkLnRvTG93ZXJDYXNlKCldO1xuICBkZWxldGUgdGhpcy5oZWFkZXJbZmllbGRdO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogV3JpdGUgdGhlIGZpZWxkIGBuYW1lYCBhbmQgYHZhbGAsIG9yIG11bHRpcGxlIGZpZWxkcyB3aXRoIG9uZSBvYmplY3RcbiAqIGZvciBcIm11bHRpcGFydC9mb3JtLWRhdGFcIiByZXF1ZXN0IGJvZGllcy5cbiAqXG4gKiBgYGAganNcbiAqIHJlcXVlc3QucG9zdCgnL3VwbG9hZCcpXG4gKiAgIC5maWVsZCgnZm9vJywgJ2JhcicpXG4gKiAgIC5lbmQoY2FsbGJhY2spO1xuICpcbiAqIHJlcXVlc3QucG9zdCgnL3VwbG9hZCcpXG4gKiAgIC5maWVsZCh7IGZvbzogJ2JhcicsIGJhejogJ3F1eCcgfSlcbiAqICAgLmVuZChjYWxsYmFjayk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IG5hbWVcbiAqIEBwYXJhbSB7U3RyaW5nfEJsb2J8RmlsZXxCdWZmZXJ8ZnMuUmVhZFN0cmVhbX0gdmFsXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5maWVsZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbCkge1xuXG4gIC8vIG5hbWUgc2hvdWxkIGJlIGVpdGhlciBhIHN0cmluZyBvciBhbiBvYmplY3QuXG4gIGlmIChudWxsID09PSBuYW1lIHx8ICB1bmRlZmluZWQgPT09IG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJy5maWVsZChuYW1lLCB2YWwpIG5hbWUgY2FuIG5vdCBiZSBlbXB0eScpO1xuICB9XG5cbiAgaWYgKHRoaXMuX2RhdGEpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiLmZpZWxkKCkgY2FuJ3QgYmUgdXNlZCBpZiAuc2VuZCgpIGlzIHVzZWQuIFBsZWFzZSB1c2Ugb25seSAuc2VuZCgpIG9yIG9ubHkgLmZpZWxkKCkgJiAuYXR0YWNoKClcIik7XG4gIH1cblxuICBpZiAoaXNPYmplY3QobmFtZSkpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gbmFtZSkge1xuICAgICAgdGhpcy5maWVsZChrZXksIG5hbWVba2V5XSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgIGZvciAodmFyIGkgaW4gdmFsKSB7XG4gICAgICB0aGlzLmZpZWxkKG5hbWUsIHZhbFtpXSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gdmFsIHNob3VsZCBiZSBkZWZpbmVkIG5vd1xuICBpZiAobnVsbCA9PT0gdmFsIHx8IHVuZGVmaW5lZCA9PT0gdmFsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCcuZmllbGQobmFtZSwgdmFsKSB2YWwgY2FuIG5vdCBiZSBlbXB0eScpO1xuICB9XG4gIGlmICgnYm9vbGVhbicgPT09IHR5cGVvZiB2YWwpIHtcbiAgICB2YWwgPSAnJyArIHZhbDtcbiAgfVxuICB0aGlzLl9nZXRGb3JtRGF0YSgpLmFwcGVuZChuYW1lLCB2YWwpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQWJvcnQgdGhlIHJlcXVlc3QsIGFuZCBjbGVhciBwb3RlbnRpYWwgdGltZW91dC5cbiAqXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuUmVxdWVzdEJhc2UucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24oKXtcbiAgaWYgKHRoaXMuX2Fib3J0ZWQpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB0aGlzLl9hYm9ydGVkID0gdHJ1ZTtcbiAgdGhpcy54aHIgJiYgdGhpcy54aHIuYWJvcnQoKTsgLy8gYnJvd3NlclxuICB0aGlzLnJlcSAmJiB0aGlzLnJlcS5hYm9ydCgpOyAvLyBub2RlXG4gIHRoaXMuY2xlYXJUaW1lb3V0KCk7XG4gIHRoaXMuZW1pdCgnYWJvcnQnKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEVuYWJsZSB0cmFuc21pc3Npb24gb2YgY29va2llcyB3aXRoIHgtZG9tYWluIHJlcXVlc3RzLlxuICpcbiAqIE5vdGUgdGhhdCBmb3IgdGhpcyB0byB3b3JrIHRoZSBvcmlnaW4gbXVzdCBub3QgYmVcbiAqIHVzaW5nIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCIgd2l0aCBhIHdpbGRjYXJkLFxuICogYW5kIGFsc28gbXVzdCBzZXQgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1DcmVkZW50aWFsc1wiXG4gKiB0byBcInRydWVcIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS53aXRoQ3JlZGVudGlhbHMgPSBmdW5jdGlvbihvbil7XG4gIC8vIFRoaXMgaXMgYnJvd3Nlci1vbmx5IGZ1bmN0aW9uYWxpdHkuIE5vZGUgc2lkZSBpcyBuby1vcC5cbiAgaWYob249PXVuZGVmaW5lZCkgb24gPSB0cnVlO1xuICB0aGlzLl93aXRoQ3JlZGVudGlhbHMgPSBvbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWF4IHJlZGlyZWN0cyB0byBgbmAuIERvZXMgbm90aW5nIGluIGJyb3dzZXIgWEhSIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBuXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnJlZGlyZWN0cyA9IGZ1bmN0aW9uKG4pe1xuICB0aGlzLl9tYXhSZWRpcmVjdHMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ29udmVydCB0byBhIHBsYWluIGphdmFzY3JpcHQgb2JqZWN0IChub3QgSlNPTiBzdHJpbmcpIG9mIHNjYWxhciBwcm9wZXJ0aWVzLlxuICogTm90ZSBhcyB0aGlzIG1ldGhvZCBpcyBkZXNpZ25lZCB0byByZXR1cm4gYSB1c2VmdWwgbm9uLXRoaXMgdmFsdWUsXG4gKiBpdCBjYW5ub3QgYmUgY2hhaW5lZC5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IGRlc2NyaWJpbmcgbWV0aG9kLCB1cmwsIGFuZCBkYXRhIG9mIHRoaXMgcmVxdWVzdFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHtcbiAgICBtZXRob2Q6IHRoaXMubWV0aG9kLFxuICAgIHVybDogdGhpcy51cmwsXG4gICAgZGF0YTogdGhpcy5fZGF0YSxcbiAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJcbiAgfTtcbn07XG5cblxuLyoqXG4gKiBTZW5kIGBkYXRhYCBhcyB0aGUgcmVxdWVzdCBib2R5LCBkZWZhdWx0aW5nIHRoZSBgLnR5cGUoKWAgdG8gXCJqc29uXCIgd2hlblxuICogYW4gb2JqZWN0IGlzIGdpdmVuLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgIC8vIG1hbnVhbCBqc29uXG4gKiAgICAgICByZXF1ZXN0LnBvc3QoJy91c2VyJylcbiAqICAgICAgICAgLnR5cGUoJ2pzb24nKVxuICogICAgICAgICAuc2VuZCgne1wibmFtZVwiOlwidGpcIn0nKVxuICogICAgICAgICAuZW5kKGNhbGxiYWNrKVxuICpcbiAqICAgICAgIC8vIGF1dG8ganNvblxuICogICAgICAgcmVxdWVzdC5wb3N0KCcvdXNlcicpXG4gKiAgICAgICAgIC5zZW5kKHsgbmFtZTogJ3RqJyB9KVxuICogICAgICAgICAuZW5kKGNhbGxiYWNrKVxuICpcbiAqICAgICAgIC8vIG1hbnVhbCB4LXd3dy1mb3JtLXVybGVuY29kZWRcbiAqICAgICAgIHJlcXVlc3QucG9zdCgnL3VzZXInKVxuICogICAgICAgICAudHlwZSgnZm9ybScpXG4gKiAgICAgICAgIC5zZW5kKCduYW1lPXRqJylcbiAqICAgICAgICAgLmVuZChjYWxsYmFjaylcbiAqXG4gKiAgICAgICAvLyBhdXRvIHgtd3d3LWZvcm0tdXJsZW5jb2RlZFxuICogICAgICAgcmVxdWVzdC5wb3N0KCcvdXNlcicpXG4gKiAgICAgICAgIC50eXBlKCdmb3JtJylcbiAqICAgICAgICAgLnNlbmQoeyBuYW1lOiAndGonIH0pXG4gKiAgICAgICAgIC5lbmQoY2FsbGJhY2spXG4gKlxuICogICAgICAgLy8gZGVmYXVsdHMgdG8geC13d3ctZm9ybS11cmxlbmNvZGVkXG4gKiAgICAgIHJlcXVlc3QucG9zdCgnL3VzZXInKVxuICogICAgICAgIC5zZW5kKCduYW1lPXRvYmknKVxuICogICAgICAgIC5zZW5kKCdzcGVjaWVzPWZlcnJldCcpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjaylcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGRhdGFcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKGRhdGEpe1xuICB2YXIgaXNPYmogPSBpc09iamVjdChkYXRhKTtcbiAgdmFyIHR5cGUgPSB0aGlzLl9oZWFkZXJbJ2NvbnRlbnQtdHlwZSddO1xuXG4gIGlmICh0aGlzLl9mb3JtRGF0YSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCIuc2VuZCgpIGNhbid0IGJlIHVzZWQgaWYgLmF0dGFjaCgpIG9yIC5maWVsZCgpIGlzIHVzZWQuIFBsZWFzZSB1c2Ugb25seSAuc2VuZCgpIG9yIG9ubHkgLmZpZWxkKCkgJiAuYXR0YWNoKClcIik7XG4gIH1cblxuICBpZiAoaXNPYmogJiYgIXRoaXMuX2RhdGEpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgdGhpcy5fZGF0YSA9IFtdO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzSG9zdChkYXRhKSkge1xuICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChkYXRhICYmIHRoaXMuX2RhdGEgJiYgdGhpcy5faXNIb3N0KHRoaXMuX2RhdGEpKSB7XG4gICAgdGhyb3cgRXJyb3IoXCJDYW4ndCBtZXJnZSB0aGVzZSBzZW5kIGNhbGxzXCIpO1xuICB9XG5cbiAgLy8gbWVyZ2VcbiAgaWYgKGlzT2JqICYmIGlzT2JqZWN0KHRoaXMuX2RhdGEpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgIHRoaXMuX2RhdGFba2V5XSA9IGRhdGFba2V5XTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIGRhdGEpIHtcbiAgICAvLyBkZWZhdWx0IHRvIHgtd3d3LWZvcm0tdXJsZW5jb2RlZFxuICAgIGlmICghdHlwZSkgdGhpcy50eXBlKCdmb3JtJyk7XG4gICAgdHlwZSA9IHRoaXMuX2hlYWRlclsnY29udGVudC10eXBlJ107XG4gICAgaWYgKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnID09IHR5cGUpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSB0aGlzLl9kYXRhXG4gICAgICAgID8gdGhpcy5fZGF0YSArICcmJyArIGRhdGFcbiAgICAgICAgOiBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9kYXRhID0gKHRoaXMuX2RhdGEgfHwgJycpICsgZGF0YTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gIH1cblxuICBpZiAoIWlzT2JqIHx8IHRoaXMuX2lzSG9zdChkYXRhKSkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZGVmYXVsdCB0byBqc29uXG4gIGlmICghdHlwZSkgdGhpcy50eXBlKCdqc29uJyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIFNvcnQgYHF1ZXJ5c3RyaW5nYCBieSB0aGUgc29ydCBmdW5jdGlvblxuICpcbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICAgICAvLyBkZWZhdWx0IG9yZGVyXG4gKiAgICAgICByZXF1ZXN0LmdldCgnL3VzZXInKVxuICogICAgICAgICAucXVlcnkoJ25hbWU9TmljaycpXG4gKiAgICAgICAgIC5xdWVyeSgnc2VhcmNoPU1hbm55JylcbiAqICAgICAgICAgLnNvcnRRdWVyeSgpXG4gKiAgICAgICAgIC5lbmQoY2FsbGJhY2spXG4gKlxuICogICAgICAgLy8gY3VzdG9taXplZCBzb3J0IGZ1bmN0aW9uXG4gKiAgICAgICByZXF1ZXN0LmdldCgnL3VzZXInKVxuICogICAgICAgICAucXVlcnkoJ25hbWU9TmljaycpXG4gKiAgICAgICAgIC5xdWVyeSgnc2VhcmNoPU1hbm55JylcbiAqICAgICAgICAgLnNvcnRRdWVyeShmdW5jdGlvbihhLCBiKXtcbiAqICAgICAgICAgICByZXR1cm4gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAqICAgICAgICAgfSlcbiAqICAgICAgICAgLmVuZChjYWxsYmFjaylcbiAqXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc29ydFxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5zb3J0UXVlcnkgPSBmdW5jdGlvbihzb3J0KSB7XG4gIC8vIF9zb3J0IGRlZmF1bHQgdG8gdHJ1ZSBidXQgb3RoZXJ3aXNlIGNhbiBiZSBhIGZ1bmN0aW9uIG9yIGJvb2xlYW5cbiAgdGhpcy5fc29ydCA9IHR5cGVvZiBzb3J0ID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBzb3J0O1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ29tcG9zZSBxdWVyeXN0cmluZyB0byBhcHBlbmQgdG8gcmVxLnVybFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuX2ZpbmFsaXplUXVlcnlTdHJpbmcgPSBmdW5jdGlvbigpe1xuICB2YXIgcXVlcnkgPSB0aGlzLl9xdWVyeS5qb2luKCcmJyk7XG4gIGlmIChxdWVyeSkge1xuICAgIHRoaXMudXJsICs9ICh0aGlzLnVybC5pbmRleE9mKCc/JykgPj0gMCA/ICcmJyA6ICc/JykgKyBxdWVyeTtcbiAgfVxuICB0aGlzLl9xdWVyeS5sZW5ndGggPSAwOyAvLyBNYWtlcyB0aGUgY2FsbCBpZGVtcG90ZW50XG5cbiAgaWYgKHRoaXMuX3NvcnQpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnVybC5pbmRleE9mKCc/Jyk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHZhciBxdWVyeUFyciA9IHRoaXMudXJsLnN1YnN0cmluZyhpbmRleCArIDEpLnNwbGl0KCcmJyk7XG4gICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHRoaXMuX3NvcnQpIHtcbiAgICAgICAgcXVlcnlBcnIuc29ydCh0aGlzLl9zb3J0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXJ5QXJyLnNvcnQoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudXJsID0gdGhpcy51cmwuc3Vic3RyaW5nKDAsIGluZGV4KSArICc/JyArIHF1ZXJ5QXJyLmpvaW4oJyYnKTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIEZvciBiYWNrd2FyZHMgY29tcGF0IG9ubHlcblJlcXVlc3RCYXNlLnByb3RvdHlwZS5fYXBwZW5kUXVlcnlTdHJpbmcgPSBmdW5jdGlvbigpIHtjb25zb2xlLnRyYWNlKFwiVW5zdXBwb3J0ZWRcIik7fVxuXG4vKipcbiAqIEludm9rZSBjYWxsYmFjayB3aXRoIHRpbWVvdXQgZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLl90aW1lb3V0RXJyb3IgPSBmdW5jdGlvbihyZWFzb24sIHRpbWVvdXQsIGVycm5vKXtcbiAgaWYgKHRoaXMuX2Fib3J0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGVyciA9IG5ldyBFcnJvcihyZWFzb24gKyB0aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyk7XG4gIGVyci50aW1lb3V0ID0gdGltZW91dDtcbiAgZXJyLmNvZGUgPSAnRUNPTk5BQk9SVEVEJztcbiAgZXJyLmVycm5vID0gZXJybm87XG4gIHRoaXMudGltZWRvdXQgPSB0cnVlO1xuICB0aGlzLmFib3J0KCk7XG4gIHRoaXMuY2FsbGJhY2soZXJyKTtcbn07XG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5fc2V0VGltZW91dHMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIGRlYWRsaW5lXG4gIGlmICh0aGlzLl90aW1lb3V0ICYmICF0aGlzLl90aW1lcikge1xuICAgIHRoaXMuX3RpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgc2VsZi5fdGltZW91dEVycm9yKCdUaW1lb3V0IG9mICcsIHNlbGYuX3RpbWVvdXQsICdFVElNRScpO1xuICAgIH0sIHRoaXMuX3RpbWVvdXQpO1xuICB9XG4gIC8vIHJlc3BvbnNlIHRpbWVvdXRcbiAgaWYgKHRoaXMuX3Jlc3BvbnNlVGltZW91dCAmJiAhdGhpcy5fcmVzcG9uc2VUaW1lb3V0VGltZXIpIHtcbiAgICB0aGlzLl9yZXNwb25zZVRpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHNlbGYuX3RpbWVvdXRFcnJvcignUmVzcG9uc2UgdGltZW91dCBvZiAnLCBzZWxmLl9yZXNwb25zZVRpbWVvdXQsICdFVElNRURPVVQnKTtcbiAgICB9LCB0aGlzLl9yZXNwb25zZVRpbWVvdXQpO1xuICB9XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbi8qKlxuICogRXhwb3NlIGBSZXNwb25zZUJhc2VgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVzcG9uc2VCYXNlO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYFJlc3BvbnNlQmFzZWAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBSZXNwb25zZUJhc2Uob2JqKSB7XG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xufVxuXG4vKipcbiAqIE1peGluIHRoZSBwcm90b3R5cGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBtaXhpbihvYmopIHtcbiAgZm9yICh2YXIga2V5IGluIFJlc3BvbnNlQmFzZS5wcm90b3R5cGUpIHtcbiAgICBvYmpba2V5XSA9IFJlc3BvbnNlQmFzZS5wcm90b3R5cGVba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIEdldCBjYXNlLWluc2Vuc2l0aXZlIGBmaWVsZGAgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlc3BvbnNlQmFzZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oZmllbGQpe1xuICAgIHJldHVybiB0aGlzLmhlYWRlcltmaWVsZC50b0xvd2VyQ2FzZSgpXTtcbn07XG5cbi8qKlxuICogU2V0IGhlYWRlciByZWxhdGVkIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGAudHlwZWAgdGhlIGNvbnRlbnQgdHlwZSB3aXRob3V0IHBhcmFtc1xuICpcbiAqIEEgcmVzcG9uc2Ugb2YgXCJDb250ZW50LVR5cGU6IHRleHQvcGxhaW47IGNoYXJzZXQ9dXRmLThcIlxuICogd2lsbCBwcm92aWRlIHlvdSB3aXRoIGEgYC50eXBlYCBvZiBcInRleHQvcGxhaW5cIi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXNwb25zZUJhc2UucHJvdG90eXBlLl9zZXRIZWFkZXJQcm9wZXJ0aWVzID0gZnVuY3Rpb24oaGVhZGVyKXtcbiAgICAvLyBUT0RPOiBtb2FyIVxuICAgIC8vIFRPRE86IG1ha2UgdGhpcyBhIHV0aWxcblxuICAgIC8vIGNvbnRlbnQtdHlwZVxuICAgIHZhciBjdCA9IGhlYWRlclsnY29udGVudC10eXBlJ10gfHwgJyc7XG4gICAgdGhpcy50eXBlID0gdXRpbHMudHlwZShjdCk7XG5cbiAgICAvLyBwYXJhbXNcbiAgICB2YXIgcGFyYW1zID0gdXRpbHMucGFyYW1zKGN0KTtcbiAgICBmb3IgKHZhciBrZXkgaW4gcGFyYW1zKSB0aGlzW2tleV0gPSBwYXJhbXNba2V5XTtcblxuICAgIHRoaXMubGlua3MgPSB7fTtcblxuICAgIC8vIGxpbmtzXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGhlYWRlci5saW5rKSB7XG4gICAgICAgICAgICB0aGlzLmxpbmtzID0gdXRpbHMucGFyc2VMaW5rcyhoZWFkZXIubGluayk7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gaWdub3JlXG4gICAgfVxufTtcblxuLyoqXG4gKiBTZXQgZmxhZ3Mgc3VjaCBhcyBgLm9rYCBiYXNlZCBvbiBgc3RhdHVzYC5cbiAqXG4gKiBGb3IgZXhhbXBsZSBhIDJ4eCByZXNwb25zZSB3aWxsIGdpdmUgeW91IGEgYC5va2Agb2YgX190cnVlX19cbiAqIHdoZXJlYXMgNXh4IHdpbGwgYmUgX19mYWxzZV9fIGFuZCBgLmVycm9yYCB3aWxsIGJlIF9fdHJ1ZV9fLiBUaGVcbiAqIGAuY2xpZW50RXJyb3JgIGFuZCBgLnNlcnZlckVycm9yYCBhcmUgYWxzbyBhdmFpbGFibGUgdG8gYmUgbW9yZVxuICogc3BlY2lmaWMsIGFuZCBgLnN0YXR1c1R5cGVgIGlzIHRoZSBjbGFzcyBvZiBlcnJvciByYW5naW5nIGZyb20gMS4uNVxuICogc29tZXRpbWVzIHVzZWZ1bCBmb3IgbWFwcGluZyByZXNwb25kIGNvbG9ycyBldGMuXG4gKlxuICogXCJzdWdhclwiIHByb3BlcnRpZXMgYXJlIGFsc28gZGVmaW5lZCBmb3IgY29tbW9uIGNhc2VzLiBDdXJyZW50bHkgcHJvdmlkaW5nOlxuICpcbiAqICAgLSAubm9Db250ZW50XG4gKiAgIC0gLmJhZFJlcXVlc3RcbiAqICAgLSAudW5hdXRob3JpemVkXG4gKiAgIC0gLm5vdEFjY2VwdGFibGVcbiAqICAgLSAubm90Rm91bmRcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gc3RhdHVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXNwb25zZUJhc2UucHJvdG90eXBlLl9zZXRTdGF0dXNQcm9wZXJ0aWVzID0gZnVuY3Rpb24oc3RhdHVzKXtcbiAgICB2YXIgdHlwZSA9IHN0YXR1cyAvIDEwMCB8IDA7XG5cbiAgICAvLyBzdGF0dXMgLyBjbGFzc1xuICAgIHRoaXMuc3RhdHVzID0gdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzO1xuICAgIHRoaXMuc3RhdHVzVHlwZSA9IHR5cGU7XG5cbiAgICAvLyBiYXNpY3NcbiAgICB0aGlzLmluZm8gPSAxID09IHR5cGU7XG4gICAgdGhpcy5vayA9IDIgPT0gdHlwZTtcbiAgICB0aGlzLnJlZGlyZWN0ID0gMyA9PSB0eXBlO1xuICAgIHRoaXMuY2xpZW50RXJyb3IgPSA0ID09IHR5cGU7XG4gICAgdGhpcy5zZXJ2ZXJFcnJvciA9IDUgPT0gdHlwZTtcbiAgICB0aGlzLmVycm9yID0gKDQgPT0gdHlwZSB8fCA1ID09IHR5cGUpXG4gICAgICAgID8gdGhpcy50b0Vycm9yKClcbiAgICAgICAgOiBmYWxzZTtcblxuICAgIC8vIHN1Z2FyXG4gICAgdGhpcy5hY2NlcHRlZCA9IDIwMiA9PSBzdGF0dXM7XG4gICAgdGhpcy5ub0NvbnRlbnQgPSAyMDQgPT0gc3RhdHVzO1xuICAgIHRoaXMuYmFkUmVxdWVzdCA9IDQwMCA9PSBzdGF0dXM7XG4gICAgdGhpcy51bmF1dGhvcml6ZWQgPSA0MDEgPT0gc3RhdHVzO1xuICAgIHRoaXMubm90QWNjZXB0YWJsZSA9IDQwNiA9PSBzdGF0dXM7XG4gICAgdGhpcy5mb3JiaWRkZW4gPSA0MDMgPT0gc3RhdHVzO1xuICAgIHRoaXMubm90Rm91bmQgPSA0MDQgPT0gc3RhdHVzO1xufTtcbiIsInZhciBFUlJPUl9DT0RFUyA9IFtcbiAgJ0VDT05OUkVTRVQnLFxuICAnRVRJTUVET1VUJyxcbiAgJ0VBRERSSU5GTycsXG4gICdFU09DS0VUVElNRURPVVQnXG5dO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHJlcXVlc3Qgc2hvdWxkIGJlIHJldHJpZWQuXG4gKiAoQm9ycm93ZWQgZnJvbSBzZWdtZW50aW8vc3VwZXJhZ2VudC1yZXRyeSlcbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJcbiAqIEBwYXJhbSB7UmVzcG9uc2V9IFtyZXNdXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaG91bGRSZXRyeShlcnIsIHJlcykge1xuICBpZiAoZXJyICYmIGVyci5jb2RlICYmIH5FUlJPUl9DT0RFUy5pbmRleE9mKGVyci5jb2RlKSkgcmV0dXJuIHRydWU7XG4gIGlmIChyZXMgJiYgcmVzLnN0YXR1cyAmJiByZXMuc3RhdHVzID49IDUwMCkgcmV0dXJuIHRydWU7XG4gIC8vIFN1cGVyYWdlbnQgdGltZW91dFxuICBpZiAoZXJyICYmICd0aW1lb3V0JyBpbiBlcnIgJiYgZXJyLmNvZGUgPT0gJ0VDT05OQUJPUlRFRCcpIHJldHVybiB0cnVlO1xuICBpZiAoZXJyICYmICdjcm9zc0RvbWFpbicgaW4gZXJyKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufTtcbiIsIlxuLyoqXG4gKiBSZXR1cm4gdGhlIG1pbWUgdHlwZSBmb3IgdGhlIGdpdmVuIGBzdHJgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMudHlwZSA9IGZ1bmN0aW9uKHN0cil7XG4gIHJldHVybiBzdHIuc3BsaXQoLyAqOyAqLykuc2hpZnQoKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIGhlYWRlciBmaWVsZCBwYXJhbWV0ZXJzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMucGFyYW1zID0gZnVuY3Rpb24oc3RyKXtcbiAgcmV0dXJuIHN0ci5zcGxpdCgvICo7ICovKS5yZWR1Y2UoZnVuY3Rpb24ob2JqLCBzdHIpe1xuICAgIHZhciBwYXJ0cyA9IHN0ci5zcGxpdCgvICo9ICovKTtcbiAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKTtcbiAgICB2YXIgdmFsID0gcGFydHMuc2hpZnQoKTtcblxuICAgIGlmIChrZXkgJiYgdmFsKSBvYmpba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gb2JqO1xuICB9LCB7fSk7XG59O1xuXG4vKipcbiAqIFBhcnNlIExpbmsgaGVhZGVyIGZpZWxkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLnBhcnNlTGlua3MgPSBmdW5jdGlvbihzdHIpe1xuICByZXR1cm4gc3RyLnNwbGl0KC8gKiwgKi8pLnJlZHVjZShmdW5jdGlvbihvYmosIHN0cil7XG4gICAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KC8gKjsgKi8pO1xuICAgIHZhciB1cmwgPSBwYXJ0c1swXS5zbGljZSgxLCAtMSk7XG4gICAgdmFyIHJlbCA9IHBhcnRzWzFdLnNwbGl0KC8gKj0gKi8pWzFdLnNsaWNlKDEsIC0xKTtcbiAgICBvYmpbcmVsXSA9IHVybDtcbiAgICByZXR1cm4gb2JqO1xuICB9LCB7fSk7XG59O1xuXG4vKipcbiAqIFN0cmlwIGNvbnRlbnQgcmVsYXRlZCBmaWVsZHMgZnJvbSBgaGVhZGVyYC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyXG4gKiBAcmV0dXJuIHtPYmplY3R9IGhlYWRlclxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5jbGVhbkhlYWRlciA9IGZ1bmN0aW9uKGhlYWRlciwgc2hvdWxkU3RyaXBDb29raWUpe1xuICBkZWxldGUgaGVhZGVyWydjb250ZW50LXR5cGUnXTtcbiAgZGVsZXRlIGhlYWRlclsnY29udGVudC1sZW5ndGgnXTtcbiAgZGVsZXRlIGhlYWRlclsndHJhbnNmZXItZW5jb2RpbmcnXTtcbiAgZGVsZXRlIGhlYWRlclsnaG9zdCddO1xuICBpZiAoc2hvdWxkU3RyaXBDb29raWUpIHtcbiAgICBkZWxldGUgaGVhZGVyWydjb29raWUnXTtcbiAgfVxuICByZXR1cm4gaGVhZGVyO1xufTsiLCIvKipcbiAqIENvbnZlcnQgYSB0eXBlZCBhcnJheSB0byBhIEJ1ZmZlciB3aXRob3V0IGEgY29weVxuICpcbiAqIEF1dGhvcjogICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogTGljZW5zZTogIE1JVFxuICpcbiAqIGBucG0gaW5zdGFsbCB0eXBlZGFycmF5LXRvLWJ1ZmZlcmBcbiAqL1xuXG52YXIgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnaXMtdHlwZWRhcnJheScpLnN0cmljdFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHR5cGVkYXJyYXlUb0J1ZmZlciAoYXJyKSB7XG4gIGlmIChpc1R5cGVkQXJyYXkoYXJyKSkge1xuICAgIC8vIFRvIGF2b2lkIGEgY29weSwgdXNlIHRoZSB0eXBlZCBhcnJheSdzIHVuZGVybHlpbmcgQXJyYXlCdWZmZXIgdG8gYmFjayBuZXcgQnVmZmVyXG4gICAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoYXJyLmJ1ZmZlcilcbiAgICBpZiAoYXJyLmJ5dGVMZW5ndGggIT09IGFyci5idWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgICAgLy8gUmVzcGVjdCB0aGUgXCJ2aWV3XCIsIGkuZS4gYnl0ZU9mZnNldCBhbmQgYnl0ZUxlbmd0aCwgd2l0aG91dCBkb2luZyBhIGNvcHlcbiAgICAgIGJ1ZiA9IGJ1Zi5zbGljZShhcnIuYnl0ZU9mZnNldCwgYXJyLmJ5dGVPZmZzZXQgKyBhcnIuYnl0ZUxlbmd0aClcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZlxuICB9IGVsc2Uge1xuICAgIC8vIFBhc3MgdGhyb3VnaCBhbGwgb3RoZXIgdHlwZXMgdG8gdGhlIGBCdWZmZXJgIGNvbnN0cnVjdG9yXG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJyKVxuICB9XG59XG4iLCIvKipcbiAqIFVBUGFyc2VyLmpzIHYwLjcuMTRcbiAqIExpZ2h0d2VpZ2h0IEphdmFTY3JpcHQtYmFzZWQgVXNlci1BZ2VudCBzdHJpbmcgcGFyc2VyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFpc2FsbWFuL3VhLXBhcnNlci1qc1xuICpcbiAqIENvcHlyaWdodCDCqSAyMDEyLTIwMTYgRmFpc2FsIFNhbG1hbiA8Znl6bG1hbkBnbWFpbC5jb20+XG4gKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIEdQTHYyICYgTUlUXG4gKi9cblxuKGZ1bmN0aW9uICh3aW5kb3csIHVuZGVmaW5lZCkge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBDb25zdGFudHNcbiAgICAvLy8vLy8vLy8vLy8vXG5cblxuICAgIHZhciBMSUJWRVJTSU9OICA9ICcwLjcuMTQnLFxuICAgICAgICBFTVBUWSAgICAgICA9ICcnLFxuICAgICAgICBVTktOT1dOICAgICA9ICc/JyxcbiAgICAgICAgRlVOQ19UWVBFICAgPSAnZnVuY3Rpb24nLFxuICAgICAgICBVTkRFRl9UWVBFICA9ICd1bmRlZmluZWQnLFxuICAgICAgICBPQkpfVFlQRSAgICA9ICdvYmplY3QnLFxuICAgICAgICBTVFJfVFlQRSAgICA9ICdzdHJpbmcnLFxuICAgICAgICBNQUpPUiAgICAgICA9ICdtYWpvcicsIC8vIGRlcHJlY2F0ZWRcbiAgICAgICAgTU9ERUwgICAgICAgPSAnbW9kZWwnLFxuICAgICAgICBOQU1FICAgICAgICA9ICduYW1lJyxcbiAgICAgICAgVFlQRSAgICAgICAgPSAndHlwZScsXG4gICAgICAgIFZFTkRPUiAgICAgID0gJ3ZlbmRvcicsXG4gICAgICAgIFZFUlNJT04gICAgID0gJ3ZlcnNpb24nLFxuICAgICAgICBBUkNISVRFQ1RVUkU9ICdhcmNoaXRlY3R1cmUnLFxuICAgICAgICBDT05TT0xFICAgICA9ICdjb25zb2xlJyxcbiAgICAgICAgTU9CSUxFICAgICAgPSAnbW9iaWxlJyxcbiAgICAgICAgVEFCTEVUICAgICAgPSAndGFibGV0JyxcbiAgICAgICAgU01BUlRUViAgICAgPSAnc21hcnR0dicsXG4gICAgICAgIFdFQVJBQkxFICAgID0gJ3dlYXJhYmxlJyxcbiAgICAgICAgRU1CRURERUQgICAgPSAnZW1iZWRkZWQnO1xuXG5cbiAgICAvLy8vLy8vLy8vL1xuICAgIC8vIEhlbHBlclxuICAgIC8vLy8vLy8vLy9cblxuXG4gICAgdmFyIHV0aWwgPSB7XG4gICAgICAgIGV4dGVuZCA6IGZ1bmN0aW9uIChyZWdleGVzLCBleHRlbnNpb25zKSB7XG4gICAgICAgICAgICB2YXIgbWFyZ2VkUmVnZXhlcyA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiByZWdleGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4dGVuc2lvbnNbaV0gJiYgZXh0ZW5zaW9uc1tpXS5sZW5ndGggJSAyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdlZFJlZ2V4ZXNbaV0gPSBleHRlbnNpb25zW2ldLmNvbmNhdChyZWdleGVzW2ldKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtYXJnZWRSZWdleGVzW2ldID0gcmVnZXhlc1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWFyZ2VkUmVnZXhlcztcbiAgICAgICAgfSxcbiAgICAgICAgaGFzIDogZnVuY3Rpb24gKHN0cjEsIHN0cjIpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHN0cjEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHIyLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzdHIxLnRvTG93ZXJDYXNlKCkpICE9PSAtMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbG93ZXJpemUgOiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1ham9yIDogZnVuY3Rpb24gKHZlcnNpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YodmVyc2lvbikgPT09IFNUUl9UWVBFID8gdmVyc2lvbi5yZXBsYWNlKC9bXlxcZFxcLl0vZywnJykuc3BsaXQoXCIuXCIpWzBdIDogdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgICB0cmltIDogZnVuY3Rpb24gKHN0cikge1xuICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csICcnKTtcbiAgICAgICAgfVxuICAgIH07XG5cblxuICAgIC8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIE1hcCBoZWxwZXJcbiAgICAvLy8vLy8vLy8vLy8vL1xuXG5cbiAgICB2YXIgbWFwcGVyID0ge1xuXG4gICAgICAgIHJneCA6IGZ1bmN0aW9uICh1YSwgYXJyYXlzKSB7XG5cbiAgICAgICAgICAgIC8vdmFyIHJlc3VsdCA9IHt9LFxuICAgICAgICAgICAgdmFyIGkgPSAwLCBqLCBrLCBwLCBxLCBtYXRjaGVzLCBtYXRjaDsvLywgYXJncyA9IGFyZ3VtZW50cztcblxuICAgICAgICAgICAgLyovLyBjb25zdHJ1Y3Qgb2JqZWN0IGJhcmVib25lc1xuICAgICAgICAgICAgZm9yIChwID0gMDsgcCA8IGFyZ3NbMV0ubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgICAgICBxID0gYXJnc1sxXVtwXTtcbiAgICAgICAgICAgICAgICByZXN1bHRbdHlwZW9mIHEgPT09IE9CSl9UWVBFID8gcVswXSA6IHFdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSovXG5cbiAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCBhbGwgcmVnZXhlcyBtYXBzXG4gICAgICAgICAgICB3aGlsZSAoaSA8IGFycmF5cy5sZW5ndGggJiYgIW1hdGNoZXMpIHtcblxuICAgICAgICAgICAgICAgIHZhciByZWdleCA9IGFycmF5c1tpXSwgICAgICAgLy8gZXZlbiBzZXF1ZW5jZSAoMCwyLDQsLi4pXG4gICAgICAgICAgICAgICAgICAgIHByb3BzID0gYXJyYXlzW2kgKyAxXTsgICAvLyBvZGQgc2VxdWVuY2UgKDEsMyw1LC4uKVxuICAgICAgICAgICAgICAgIGogPSBrID0gMDtcblxuICAgICAgICAgICAgICAgIC8vIHRyeSBtYXRjaGluZyB1YXN0cmluZyB3aXRoIHJlZ2V4ZXNcbiAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IHJlZ2V4Lmxlbmd0aCAmJiAhbWF0Y2hlcykge1xuXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPSByZWdleFtqKytdLmV4ZWModWEpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghIW1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocCA9IDA7IHAgPCBwcm9wcy5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gbWF0Y2hlc1srK2tdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEgPSBwcm9wc1twXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBnaXZlbiBwcm9wZXJ0eSBpcyBhY3R1YWxseSBhcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcSA9PT0gT0JKX1RZUEUgJiYgcS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLmxlbmd0aCA9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHFbMV0gPT0gRlVOQ19UWVBFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXNzaWduIG1vZGlmaWVkIG1hdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1txWzBdXSA9IHFbMV0uY2FsbCh0aGlzLCBtYXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFzc2lnbiBnaXZlbiB2YWx1ZSwgaWdub3JlIHJlZ2V4IG1hdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1txWzBdXSA9IHFbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocS5sZW5ndGggPT0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgd2hldGhlciBmdW5jdGlvbiBvciByZWdleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBxWzFdID09PSBGVU5DX1RZUEUgJiYgIShxWzFdLmV4ZWMgJiYgcVsxXS50ZXN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGwgZnVuY3Rpb24gKHVzdWFsbHkgc3RyaW5nIG1hcHBlcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3FbMF1dID0gbWF0Y2ggPyBxWzFdLmNhbGwodGhpcywgbWF0Y2gsIHFbMl0pIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzYW5pdGl6ZSBtYXRjaCB1c2luZyBnaXZlbiByZWdleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcVswXV0gPSBtYXRjaCA/IG1hdGNoLnJlcGxhY2UocVsxXSwgcVsyXSkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocS5sZW5ndGggPT0gNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcVswXV0gPSBtYXRjaCA/IHFbM10uY2FsbCh0aGlzLCBtYXRjaC5yZXBsYWNlKHFbMV0sIHFbMl0pKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcV0gPSBtYXRjaCA/IG1hdGNoIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHRoaXMpO1xuICAgICAgICAgICAgLy9yZXR1cm4gdGhpcztcbiAgICAgICAgfSxcblxuICAgICAgICBzdHIgOiBmdW5jdGlvbiAoc3RyLCBtYXApIHtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBtYXApIHtcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBhcnJheVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWFwW2ldID09PSBPQkpfVFlQRSAmJiBtYXBbaV0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1hcFtpXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaGFzKG1hcFtpXVtqXSwgc3RyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoaSA9PT0gVU5LTk9XTikgPyB1bmRlZmluZWQgOiBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsLmhhcyhtYXBbaV0sIHN0cikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChpID09PSBVTktOT1dOKSA/IHVuZGVmaW5lZCA6IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgfVxuICAgIH07XG5cblxuICAgIC8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIFN0cmluZyBtYXBcbiAgICAvLy8vLy8vLy8vLy8vL1xuXG5cbiAgICB2YXIgbWFwcyA9IHtcblxuICAgICAgICBicm93c2VyIDoge1xuICAgICAgICAgICAgb2xkc2FmYXJpIDoge1xuICAgICAgICAgICAgICAgIHZlcnNpb24gOiB7XG4gICAgICAgICAgICAgICAgICAgICcxLjAnICAgOiAnLzgnLFxuICAgICAgICAgICAgICAgICAgICAnMS4yJyAgIDogJy8xJyxcbiAgICAgICAgICAgICAgICAgICAgJzEuMycgICA6ICcvMycsXG4gICAgICAgICAgICAgICAgICAgICcyLjAnICAgOiAnLzQxMicsXG4gICAgICAgICAgICAgICAgICAgICcyLjAuMicgOiAnLzQxNicsXG4gICAgICAgICAgICAgICAgICAgICcyLjAuMycgOiAnLzQxNycsXG4gICAgICAgICAgICAgICAgICAgICcyLjAuNCcgOiAnLzQxOScsXG4gICAgICAgICAgICAgICAgICAgICc/JyAgICAgOiAnLydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGV2aWNlIDoge1xuICAgICAgICAgICAgYW1hem9uIDoge1xuICAgICAgICAgICAgICAgIG1vZGVsIDoge1xuICAgICAgICAgICAgICAgICAgICAnRmlyZSBQaG9uZScgOiBbJ1NEJywgJ0tGJ11cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3ByaW50IDoge1xuICAgICAgICAgICAgICAgIG1vZGVsIDoge1xuICAgICAgICAgICAgICAgICAgICAnRXZvIFNoaWZ0IDRHJyA6ICc3MzczS1QnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2ZW5kb3IgOiB7XG4gICAgICAgICAgICAgICAgICAgICdIVEMnICAgICAgIDogJ0FQQScsXG4gICAgICAgICAgICAgICAgICAgICdTcHJpbnQnICAgIDogJ1NwcmludCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgb3MgOiB7XG4gICAgICAgICAgICB3aW5kb3dzIDoge1xuICAgICAgICAgICAgICAgIHZlcnNpb24gOiB7XG4gICAgICAgICAgICAgICAgICAgICdNRScgICAgICAgIDogJzQuOTAnLFxuICAgICAgICAgICAgICAgICAgICAnTlQgMy4xMScgICA6ICdOVDMuNTEnLFxuICAgICAgICAgICAgICAgICAgICAnTlQgNC4wJyAgICA6ICdOVDQuMCcsXG4gICAgICAgICAgICAgICAgICAgICcyMDAwJyAgICAgIDogJ05UIDUuMCcsXG4gICAgICAgICAgICAgICAgICAgICdYUCcgICAgICAgIDogWydOVCA1LjEnLCAnTlQgNS4yJ10sXG4gICAgICAgICAgICAgICAgICAgICdWaXN0YScgICAgIDogJ05UIDYuMCcsXG4gICAgICAgICAgICAgICAgICAgICc3JyAgICAgICAgIDogJ05UIDYuMScsXG4gICAgICAgICAgICAgICAgICAgICc4JyAgICAgICAgIDogJ05UIDYuMicsXG4gICAgICAgICAgICAgICAgICAgICc4LjEnICAgICAgIDogJ05UIDYuMycsXG4gICAgICAgICAgICAgICAgICAgICcxMCcgICAgICAgIDogWydOVCA2LjQnLCAnTlQgMTAuMCddLFxuICAgICAgICAgICAgICAgICAgICAnUlQnICAgICAgICA6ICdBUk0nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuXG4gICAgLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBSZWdleCBtYXBcbiAgICAvLy8vLy8vLy8vLy8vXG5cblxuICAgIHZhciByZWdleGVzID0ge1xuXG4gICAgICAgIGJyb3dzZXIgOiBbW1xuXG4gICAgICAgICAgICAvLyBQcmVzdG8gYmFzZWRcbiAgICAgICAgICAgIC8ob3BlcmFcXHNtaW5pKVxcLyhbXFx3XFwuLV0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9wZXJhIE1pbmlcbiAgICAgICAgICAgIC8ob3BlcmFcXHNbbW9iaWxldGFiXSspLit2ZXJzaW9uXFwvKFtcXHdcXC4tXSspL2ksICAgICAgICAgICAgICAgICAgICAgIC8vIE9wZXJhIE1vYmkvVGFibGV0XG4gICAgICAgICAgICAvKG9wZXJhKS4rdmVyc2lvblxcLyhbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9wZXJhID4gOS44MFxuICAgICAgICAgICAgLyhvcGVyYSlbXFwvXFxzXSsoW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmEgPCA5LjgwXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhvcGlvcylbXFwvXFxzXSsoW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BlcmEgbWluaSBvbiBpcGhvbmUgPj0gOC4wXG4gICAgICAgICAgICBdLCBbW05BTUUsICdPcGVyYSBNaW5pJ10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC9cXHMob3ByKVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9wZXJhIFdlYmtpdFxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnT3BlcmEnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLy8gTWl4ZWRcbiAgICAgICAgICAgIC8oa2luZGxlKVxcLyhbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2luZGxlXG4gICAgICAgICAgICAvKGx1bmFzY2FwZXxtYXh0aG9ufG5ldGZyb250fGphc21pbmV8YmxhemVyKVtcXC9cXHNdPyhbXFx3XFwuXSspKi9pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMdW5hc2NhcGUvTWF4dGhvbi9OZXRmcm9udC9KYXNtaW5lL0JsYXplclxuXG4gICAgICAgICAgICAvLyBUcmlkZW50IGJhc2VkXG4gICAgICAgICAgICAvKGF2YW50XFxzfGllbW9iaWxlfHNsaW18YmFpZHUpKD86YnJvd3Nlcik/W1xcL1xcc10/KFtcXHdcXC5dKikvaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXZhbnQvSUVNb2JpbGUvU2xpbUJyb3dzZXIvQmFpZHVcbiAgICAgICAgICAgIC8oPzptc3xcXCgpKGllKVxccyhbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEludGVybmV0IEV4cGxvcmVyXG5cbiAgICAgICAgICAgIC8vIFdlYmtpdC9LSFRNTCBiYXNlZFxuICAgICAgICAgICAgLyhyZWtvbnEpXFwvKFtcXHdcXC5dKykqL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWtvbnFcbiAgICAgICAgICAgIC8oY2hyb21pdW18ZmxvY2t8cm9ja21lbHR8bWlkb3JpfGVwaXBoYW55fHNpbGt8c2t5ZmlyZXxvdmlicm93c2VyfGJvbHR8aXJvbnx2aXZhbGRpfGlyaWRpdW18cGhhbnRvbWpzfGJvd3NlcilcXC8oW1xcd1xcLi1dKykvaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaHJvbWl1bS9GbG9jay9Sb2NrTWVsdC9NaWRvcmkvRXBpcGhhbnkvU2lsay9Ta3lmaXJlL0JvbHQvSXJvbi9JcmlkaXVtL1BoYW50b21KUy9Cb3dzZXJcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKHRyaWRlbnQpLitydls6XFxzXShbXFx3XFwuXSspLitsaWtlXFxzZ2Vja28vaSAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJRTExXG4gICAgICAgICAgICBdLCBbW05BTUUsICdJRSddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGVkZ2UpXFwvKChcXGQrKT9bXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNaWNyb3NvZnQgRWRnZVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oeWFicm93c2VyKVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gWWFuZGV4XG4gICAgICAgICAgICBdLCBbW05BTUUsICdZYW5kZXgnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhwdWZmaW4pXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQdWZmaW5cbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ1B1ZmZpbiddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKCg/OltcXHNcXC9dKXVjP1xccz9icm93c2VyfCg/Omp1Yy4rKXVjd2ViKVtcXC9cXHNdPyhbXFx3XFwuXSspL2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVUNCcm93c2VyXG4gICAgICAgICAgICBdLCBbW05BTUUsICdVQ0Jyb3dzZXInXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhjb21vZG9fZHJhZ29uKVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21vZG8gRHJhZ29uXG4gICAgICAgICAgICBdLCBbW05BTUUsIC9fL2csICcgJ10sIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8obWljcm9tZXNzZW5nZXIpXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2VDaGF0XG4gICAgICAgICAgICBdLCBbW05BTUUsICdXZUNoYXQnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhRUSlcXC8oW1xcZFxcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBRUSwgYWthIFNob3VRXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgL20/KHFxYnJvd3NlcilbXFwvXFxzXT8oW1xcd1xcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUVFCcm93c2VyXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgL3hpYW9taVxcL21pdWlicm93c2VyXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTUlVSSBCcm93c2VyXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsICdNSVVJIEJyb3dzZXInXV0sIFtcblxuICAgICAgICAgICAgLztmYmF2XFwvKFtcXHdcXC5dKyk7L2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGYWNlYm9vayBBcHAgZm9yIGlPUyAmIEFuZHJvaWRcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ0ZhY2Vib29rJ11dLCBbXG5cbiAgICAgICAgICAgIC8oaGVhZGxlc3NjaHJvbWUpIChbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaHJvbWUgSGVhZGxlc3NcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ0Nocm9tZSBIZWFkbGVzcyddXSwgW1xuXG4gICAgICAgICAgICAvXFxzd3ZcXCkuKyhjaHJvbWUpXFwvKFtcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hyb21lIFdlYlZpZXdcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgLyguKykvLCAnJDEgV2ViVmlldyddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKCg/Om9jdWx1c3xzYW1zdW5nKWJyb3dzZXIpXFwvKFtcXHdcXC5dKykvaVxuICAgICAgICAgICAgXSwgW1tOQU1FLCAvKC4rKD86Z3x1cykpKC4rKS8sICckMSAkMiddLCBWRVJTSU9OXSwgWyAgICAgICAgICAgICAgICAvLyBPY3VsdXMgLyBTYW1zdW5nIEJyb3dzZXJcblxuICAgICAgICAgICAgL2FuZHJvaWQuK3ZlcnNpb25cXC8oW1xcd1xcLl0rKVxccysoPzptb2JpbGVcXHM/c2FmYXJpfHNhZmFyaSkqL2kgICAgICAgIC8vIEFuZHJvaWQgQnJvd3NlclxuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCAnQW5kcm9pZCBCcm93c2VyJ11dLCBbXG5cbiAgICAgICAgICAgIC8oY2hyb21lfG9tbml3ZWJ8YXJvcmF8W3RpemVub2thXXs1fVxccz9icm93c2VyKVxcL3Y/KFtcXHdcXC5dKykvaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaHJvbWUvT21uaVdlYi9Bcm9yYS9UaXplbi9Ob2tpYVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oZG9sZmluKVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG9scGhpblxuICAgICAgICAgICAgXSwgW1tOQU1FLCAnRG9scGhpbiddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKCg/OmFuZHJvaWQuKyljcm1vfGNyaW9zKVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENocm9tZSBmb3IgQW5kcm9pZC9pT1NcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ0Nocm9tZSddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGNvYXN0KVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9wZXJhIENvYXN0XG4gICAgICAgICAgICBdLCBbW05BTUUsICdPcGVyYSBDb2FzdCddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvZnhpb3NcXC8oW1xcd1xcLi1dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggZm9yIGlPU1xuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCAnRmlyZWZveCddXSwgW1xuXG4gICAgICAgICAgICAvdmVyc2lvblxcLyhbXFx3XFwuXSspLis/bW9iaWxlXFwvXFx3K1xccyhzYWZhcmkpL2kgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vYmlsZSBTYWZhcmlcbiAgICAgICAgICAgIF0sIFtWRVJTSU9OLCBbTkFNRSwgJ01vYmlsZSBTYWZhcmknXV0sIFtcblxuICAgICAgICAgICAgL3ZlcnNpb25cXC8oW1xcd1xcLl0rKS4rPyhtb2JpbGVcXHM/c2FmYXJpfHNhZmFyaSkvaSAgICAgICAgICAgICAgICAgICAgLy8gU2FmYXJpICYgU2FmYXJpIE1vYmlsZVxuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIE5BTUVdLCBbXG5cbiAgICAgICAgICAgIC93ZWJraXQuKz8obW9iaWxlXFxzP3NhZmFyaXxzYWZhcmkpKFxcL1tcXHdcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgIC8vIFNhZmFyaSA8IDMuMFxuICAgICAgICAgICAgXSwgW05BTUUsIFtWRVJTSU9OLCBtYXBwZXIuc3RyLCBtYXBzLmJyb3dzZXIub2xkc2FmYXJpLnZlcnNpb25dXSwgW1xuXG4gICAgICAgICAgICAvKGtvbnF1ZXJvcilcXC8oW1xcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtvbnF1ZXJvclxuICAgICAgICAgICAgLyh3ZWJraXR8a2h0bWwpXFwvKFtcXHdcXC5dKykvaVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8vIEdlY2tvIGJhc2VkXG4gICAgICAgICAgICAvKG5hdmlnYXRvcnxuZXRzY2FwZSlcXC8oW1xcd1xcLi1dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5ldHNjYXBlXG4gICAgICAgICAgICBdLCBbW05BTUUsICdOZXRzY2FwZSddLCBWRVJTSU9OXSwgW1xuICAgICAgICAgICAgLyhzd2lmdGZveCkvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTd2lmdGZveFxuICAgICAgICAgICAgLyhpY2VkcmFnb258aWNld2Vhc2VsfGNhbWlub3xjaGltZXJhfGZlbm5lY3xtYWVtb1xcc2Jyb3dzZXJ8bWluaW1vfGNvbmtlcm9yKVtcXC9cXHNdPyhbXFx3XFwuXFwrXSspL2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEljZURyYWdvbi9JY2V3ZWFzZWwvQ2FtaW5vL0NoaW1lcmEvRmVubmVjL01hZW1vL01pbmltby9Db25rZXJvclxuICAgICAgICAgICAgLyhmaXJlZm94fHNlYW1vbmtleXxrLW1lbGVvbnxpY2VjYXR8aWNlYXBlfGZpcmViaXJkfHBob2VuaXgpXFwvKFtcXHdcXC4tXSspL2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpcmVmb3gvU2VhTW9ua2V5L0stTWVsZW9uL0ljZUNhdC9JY2VBcGUvRmlyZWJpcmQvUGhvZW5peFxuICAgICAgICAgICAgLyhtb3ppbGxhKVxcLyhbXFx3XFwuXSspLitydlxcOi4rZ2Vja29cXC9cXGQrL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNb3ppbGxhXG5cbiAgICAgICAgICAgIC8vIE90aGVyXG4gICAgICAgICAgICAvKHBvbGFyaXN8bHlueHxkaWxsb3xpY2FifGRvcmlzfGFtYXlhfHczbXxuZXRzdXJmfHNsZWlwbmlyKVtcXC9cXHNdPyhbXFx3XFwuXSspL2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBvbGFyaXMvTHlueC9EaWxsby9pQ2FiL0RvcmlzL0FtYXlhL3czbS9OZXRTdXJmL1NsZWlwbmlyXG4gICAgICAgICAgICAvKGxpbmtzKVxcc1xcKChbXFx3XFwuXSspL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMaW5rc1xuICAgICAgICAgICAgLyhnb2Jyb3dzZXIpXFwvPyhbXFx3XFwuXSspKi9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHb0Jyb3dzZXJcbiAgICAgICAgICAgIC8oaWNlXFxzP2Jyb3dzZXIpXFwvdj8oW1xcd1xcLl9dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElDRSBCcm93c2VyXG4gICAgICAgICAgICAvKG1vc2FpYylbXFwvXFxzXShbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNb3NhaWNcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXVxuXG4gICAgICAgICAgICAvKiAvLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgIC8vIE1lZGlhIHBsYXllcnMgQkVHSU5cbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgICAgICAsIFtcblxuICAgICAgICAgICAgLyhhcHBsZSg/OmNvcmVtZWRpYXwpKVxcLygoXFxkKylbXFx3XFwuX10rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2VuZXJpYyBBcHBsZSBDb3JlTWVkaWFcbiAgICAgICAgICAgIC8oY29yZW1lZGlhKSB2KChcXGQrKVtcXHdcXC5fXSspL2lcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGFxdWFsdW5nfGx5c3NuYXxic3BsYXllcilcXC8oKFxcZCspP1tcXHdcXC4tXSspL2kgICAgICAgICAgICAgICAgICAgICAvLyBBcXVhbHVuZy9MeXNzbmEvQlNQbGF5ZXJcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGFyZXN8b3NzcHJveHkpXFxzKChcXGQrKVtcXHdcXC4tXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBcmVzL09TU1Byb3h5XG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhhdWRhY2lvdXN8YXVkaW11c2ljc3RyZWFtfGFtYXJva3xiYXNzfGNvcmV8ZGFsdmlrfGdub21lbXBsYXllcnxtdXNpYyBvbiBjb25zb2xlfG5zcGxheWVyfHBzcC1pbnRlcm5ldHJhZGlvcGxheWVyfHZpZGVvcylcXC8oKFxcZCspW1xcd1xcLi1dKykvaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXVkYWNpb3VzL0F1ZGlNdXNpY1N0cmVhbS9BbWFyb2svQkFTUy9PcGVuQ09SRS9EYWx2aWsvR25vbWVNcGxheWVyL01vQ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOU1BsYXllci9QU1AtSW50ZXJuZXRSYWRpb1BsYXllci9WaWRlb3NcbiAgICAgICAgICAgIC8oY2xlbWVudGluZXxtdXNpYyBwbGF5ZXIgZGFlbW9uKVxccygoXFxkKylbXFx3XFwuLV0rKS9pLCAgICAgICAgICAgICAgIC8vIENsZW1lbnRpbmUvTVBEXG4gICAgICAgICAgICAvKGxnIHBsYXllcnxuZXhwbGF5ZXIpXFxzKChcXGQrKVtcXGRcXC5dKykvaSxcbiAgICAgICAgICAgIC9wbGF5ZXJcXC8obmV4cGxheWVyfGxnIHBsYXllcilcXHMoKFxcZCspW1xcd1xcLi1dKykvaSAgICAgICAgICAgICAgICAgICAvLyBOZXhQbGF5ZXIvTEcgUGxheWVyXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcbiAgICAgICAgICAgIC8obmV4cGxheWVyKVxccygoXFxkKylbXFx3XFwuLV0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5leHBsYXllclxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8oZmxycClcXC8oKFxcZCspW1xcd1xcLi1dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZsaXAgUGxheWVyXG4gICAgICAgICAgICBdLCBbW05BTUUsICdGbGlwIFBsYXllciddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGZzdHJlYW18bmF0aXZlaG9zdHxxdWVyeXNlZWtzcGlkZXJ8aWEtYXJjaGl2ZXJ8ZmFjZWJvb2tleHRlcm5hbGhpdCkvaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGU3RyZWFtL05hdGl2ZUhvc3QvUXVlcnlTZWVrU3BpZGVyL0lBIEFyY2hpdmVyL2ZhY2Vib29rZXh0ZXJuYWxoaXRcbiAgICAgICAgICAgIF0sIFtOQU1FXSwgW1xuXG4gICAgICAgICAgICAvKGdzdHJlYW1lcikgc291cGh0dHBzcmMgKD86XFwoW15cXCldK1xcKSl7MCwxfSBsaWJzb3VwXFwvKChcXGQrKVtcXHdcXC4tXSspL2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR3N0cmVhbWVyXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhodGMgc3RyZWFtaW5nIHBsYXllcilcXHNbXFx3X10rXFxzXFwvXFxzKChcXGQrKVtcXGRcXC5dKykvaSwgICAgICAgICAgICAgIC8vIEhUQyBTdHJlYW1pbmcgUGxheWVyXG4gICAgICAgICAgICAvKGphdmF8cHl0aG9uLXVybGxpYnxweXRob24tcmVxdWVzdHN8d2dldHxsaWJjdXJsKVxcLygoXFxkKylbXFx3XFwuLV9dKykvaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSmF2YS91cmxsaWIvcmVxdWVzdHMvd2dldC9jVVJMXG4gICAgICAgICAgICAvKGxhdmYpKChcXGQrKVtcXGRcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExhdmYgKEZGTVBFRylcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGh0Y19vbmVfcylcXC8oKFxcZCspW1xcZFxcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIVEMgT25lIFNcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgL18vZywgJyAnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhtcGxheWVyKSg/Olxcc3xcXC8pKD86KD86c2hlcnB5YS0pezAsMX1zdm4pKD86LXxcXHMpKHJcXGQrKD86LVxcZCtbXFx3XFwuLV0rKXswLDF9KS9pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1QbGF5ZXIgU1ZOXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhtcGxheWVyKSg/Olxcc3xcXC98W3Vua293LV0rKSgoXFxkKylbXFx3XFwuLV0rKS9pICAgICAgICAgICAgICAgICAgICAgIC8vIE1QbGF5ZXJcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKG1wbGF5ZXIpL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1QbGF5ZXIgKG5vIG90aGVyIGluZm8pXG4gICAgICAgICAgICAvKHlvdXJtdXplKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFlvdXJNdXplXG4gICAgICAgICAgICAvKG1lZGlhIHBsYXllciBjbGFzc2ljfG5lcm8gc2hvd3RpbWUpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1lZGlhIFBsYXllciBDbGFzc2ljL05lcm8gU2hvd1RpbWVcbiAgICAgICAgICAgIF0sIFtOQU1FXSwgW1xuXG4gICAgICAgICAgICAvKG5lcm8gKD86aG9tZXxzY291dCkpXFwvKChcXGQrKVtcXHdcXC4tXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOZXJvIEhvbWUvTmVybyBTY291dFxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC8obm9raWFcXGQrKVxcLygoXFxkKylbXFx3XFwuLV0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb2tpYVxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dLCBbXG5cbiAgICAgICAgICAgIC9cXHMoc29uZ2JpcmQpXFwvKChcXGQrKVtcXHdcXC4tXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTb25nYmlyZC9QaGlsaXBzLVNvbmdiaXJkXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyh3aW5hbXApMyB2ZXJzaW9uICgoXFxkKylbXFx3XFwuLV0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXaW5hbXBcbiAgICAgICAgICAgIC8od2luYW1wKVxccygoXFxkKylbXFx3XFwuLV0rKS9pLFxuICAgICAgICAgICAgLyh3aW5hbXApbXBlZ1xcLygoXFxkKylbXFx3XFwuLV0rKS9pXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhvY21zLWJvdHx0YXBpbnJhZGlvfHR1bmVpbiByYWRpb3x1bmtub3dufHdpbmFtcHxpbmxpZ2h0IHJhZGlvKS9pICAvLyBPQ01TLWJvdC90YXAgaW4gcmFkaW8vdHVuZWluL3Vua25vd24vd2luYW1wIChubyBvdGhlciBpbmZvKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbmxpZ2h0IHJhZGlvXG4gICAgICAgICAgICBdLCBbTkFNRV0sIFtcblxuICAgICAgICAgICAgLyhxdWlja3RpbWV8cm1hfHJhZGlvYXBwfHJhZGlvY2xpZW50YXBwbGljYXRpb258c291bmR0YXB8dG90ZW18c3RhZ2VmcmlnaHR8c3RyZWFtaXVtKVxcLygoXFxkKylbXFx3XFwuLV0rKS9pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFF1aWNrVGltZS9SZWFsTWVkaWEvUmFkaW9BcHAvUmFkaW9DbGllbnRBcHBsaWNhdGlvbi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU291bmRUYXAvVG90ZW0vU3RhZ2VmcmlnaHQvU3RyZWFtaXVtXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLyhzbXApKChcXGQrKVtcXGRcXC5dKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTTVBcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKHZsYykgbWVkaWEgcGxheWVyIC0gdmVyc2lvbiAoKFxcZCspW1xcd1xcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgIC8vIFZMQyBWaWRlb2xhblxuICAgICAgICAgICAgLyh2bGMpXFwvKChcXGQrKVtcXHdcXC4tXSspL2ksXG4gICAgICAgICAgICAvKHhibWN8Z3Zmc3x4aW5lfHhtbXN8aXJhcHApXFwvKChcXGQrKVtcXHdcXC4tXSspL2ksICAgICAgICAgICAgICAgICAgICAvLyBYQk1DL2d2ZnMvWGluZS9YTU1TL2lyYXBwXG4gICAgICAgICAgICAvKGZvb2JhcjIwMDApXFwvKChcXGQrKVtcXGRcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb29iYXIyMDAwXG4gICAgICAgICAgICAvKGl0dW5lcylcXC8oKFxcZCspW1xcZFxcLl0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpVHVuZXNcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKHdtcGxheWVyKVxcLygoXFxkKylbXFx3XFwuLV0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXaW5kb3dzIE1lZGlhIFBsYXllclxuICAgICAgICAgICAgLyh3aW5kb3dzLW1lZGlhLXBsYXllcilcXC8oKFxcZCspW1xcd1xcLi1dKykvaVxuICAgICAgICAgICAgXSwgW1tOQU1FLCAvLS9nLCAnICddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvd2luZG93c1xcLygoXFxkKylbXFx3XFwuLV0rKSB1cG5wXFwvW1xcZFxcLl0rIGRsbmFkb2NcXC9bXFxkXFwuXSsgKGhvbWUgbWVkaWEgc2VydmVyKS9pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdpbmRvd3MgTWVkaWEgU2VydmVyXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgW05BTUUsICdXaW5kb3dzJ11dLCBbXG5cbiAgICAgICAgICAgIC8oY29tXFwucmlzZXVwcmFkaW9hbGFybSlcXC8oKFxcZCspW1xcZFxcLl0qKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSaXNlVVAgUmFkaW8gQWxhcm1cbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKHJhZC5pbylcXHMoKFxcZCspW1xcZFxcLl0rKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSYWQuaW9cbiAgICAgICAgICAgIC8ocmFkaW8uKD86ZGV8YXR8ZnIpKVxccygoXFxkKylbXFxkXFwuXSspL2lcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ3JhZC5pbyddLCBWRVJTSU9OXVxuXG4gICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAvLyBNZWRpYSBwbGF5ZXJzIEVORFxuICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8qL1xuXG4gICAgICAgIF0sXG5cbiAgICAgICAgY3B1IDogW1tcblxuICAgICAgICAgICAgLyg/OihhbWR8eCg/Oig/Ojg2fDY0KVtfLV0pP3x3b3d8d2luKTY0KVs7XFwpXS9pICAgICAgICAgICAgICAgICAgICAgLy8gQU1ENjRcbiAgICAgICAgICAgIF0sIFtbQVJDSElURUNUVVJFLCAnYW1kNjQnXV0sIFtcblxuICAgICAgICAgICAgLyhpYTMyKD89OykpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJQTMyIChxdWlja3RpbWUpXG4gICAgICAgICAgICBdLCBbW0FSQ0hJVEVDVFVSRSwgdXRpbC5sb3dlcml6ZV1dLCBbXG5cbiAgICAgICAgICAgIC8oKD86aVszNDZdfHgpODYpWztcXCldL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElBMzJcbiAgICAgICAgICAgIF0sIFtbQVJDSElURUNUVVJFLCAnaWEzMiddXSwgW1xuXG4gICAgICAgICAgICAvLyBQb2NrZXRQQyBtaXN0YWtlbmx5IGlkZW50aWZpZWQgYXMgUG93ZXJQQ1xuICAgICAgICAgICAgL3dpbmRvd3NcXHMoY2V8bW9iaWxlKTtcXHNwcGM7L2lcbiAgICAgICAgICAgIF0sIFtbQVJDSElURUNUVVJFLCAnYXJtJ11dLCBbXG5cbiAgICAgICAgICAgIC8oKD86cHBjfHBvd2VycGMpKD86NjQpPykoPzpcXHNtYWN8O3xcXCkpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQb3dlclBDXG4gICAgICAgICAgICBdLCBbW0FSQ0hJVEVDVFVSRSwgL293ZXIvLCAnJywgdXRpbC5sb3dlcml6ZV1dLCBbXG5cbiAgICAgICAgICAgIC8oc3VuNFxcdylbO1xcKV0vaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTUEFSQ1xuICAgICAgICAgICAgXSwgW1tBUkNISVRFQ1RVUkUsICdzcGFyYyddXSwgW1xuXG4gICAgICAgICAgICAvKCg/OmF2cjMyfGlhNjQoPz07KSl8NjhrKD89XFwpKXxhcm0oPzo2NHwoPz12XFxkKzspKXwoPz1hdG1lbFxccylhdnJ8KD86aXJpeHxtaXBzfHNwYXJjKSg/OjY0KT8oPz07KXxwYS1yaXNjKS9pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElBNjQsIDY4SywgQVJNLzY0LCBBVlIvMzIsIElSSVgvNjQsIE1JUFMvNjQsIFNQQVJDLzY0LCBQQS1SSVNDXG4gICAgICAgICAgICBdLCBbW0FSQ0hJVEVDVFVSRSwgdXRpbC5sb3dlcml6ZV1dXG4gICAgICAgIF0sXG5cbiAgICAgICAgZGV2aWNlIDogW1tcblxuICAgICAgICAgICAgL1xcKChpcGFkfHBsYXlib29rKTtbXFx3XFxzXFwpOy1dKyhyaW18YXBwbGUpL2kgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaVBhZC9QbGF5Qm9va1xuICAgICAgICAgICAgXSwgW01PREVMLCBWRU5ET1IsIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYXBwbGVjb3JlbWVkaWFcXC9bXFx3XFwuXSsgXFwoKGlwYWQpLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpUGFkXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdBcHBsZSddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgLyhhcHBsZVxcc3swLDF9dHYpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXBwbGUgVFZcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdBcHBsZSBUViddLCBbVkVORE9SLCAnQXBwbGUnXV0sIFtcblxuICAgICAgICAgICAgLyhhcmNob3MpXFxzKGdhbWVwYWQyPykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXJjaG9zXG4gICAgICAgICAgICAvKGhwKS4rKHRvdWNocGFkKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhQIFRvdWNoUGFkXG4gICAgICAgICAgICAvKGhwKS4rKHRhYmxldCkvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhQIFRhYmxldFxuICAgICAgICAgICAgLyhraW5kbGUpXFwvKFtcXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBLaW5kbGVcbiAgICAgICAgICAgIC9cXHMobm9vaylbXFx3XFxzXStidWlsZFxcLyhcXHcrKS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb29rXG4gICAgICAgICAgICAvKGRlbGwpXFxzKHN0cmVhW2twclxcc1xcZF0qW1xcZGtvXSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWxsIFN0cmVha1xuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvKGtmW0Etel0rKVxcc2J1aWxkXFwvW1xcd1xcLl0rLipzaWxrXFwvL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2luZGxlIEZpcmUgSERcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0FtYXpvbiddLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC8oc2R8a2YpWzAzNDloaWpvcnN0dXddK1xcc2J1aWxkXFwvW1xcd1xcLl0rLipzaWxrXFwvL2kgICAgICAgICAgICAgICAgICAvLyBGaXJlIFBob25lXG4gICAgICAgICAgICBdLCBbW01PREVMLCBtYXBwZXIuc3RyLCBtYXBzLmRldmljZS5hbWF6b24ubW9kZWxdLCBbVkVORE9SLCAnQW1hem9uJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvXFwoKGlwW2hvbmVkfFxcc1xcdypdKyk7LisoYXBwbGUpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlQb2QvaVBob25lXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFZFTkRPUiwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvXFwoKGlwW2hvbmVkfFxcc1xcdypdKyk7L2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlQb2QvaVBob25lXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdBcHBsZSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLyhibGFja2JlcnJ5KVtcXHMtXT8oXFx3KykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJsYWNrQmVycnlcbiAgICAgICAgICAgIC8oYmxhY2tiZXJyeXxiZW5xfHBhbG0oPz1cXC0pfHNvbnllcmljc3NvbnxhY2VyfGFzdXN8ZGVsbHxtZWl6dXxtb3Rvcm9sYXxwb2x5dHJvbilbXFxzXy1dPyhbXFx3LV0rKSovaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmVuUS9QYWxtL1NvbnktRXJpY3Nzb24vQWNlci9Bc3VzL0RlbGwvTWVpenUvTW90b3JvbGEvUG9seXRyb25cbiAgICAgICAgICAgIC8oaHApXFxzKFtcXHdcXHNdK1xcdykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhQIGlQQVFcbiAgICAgICAgICAgIC8oYXN1cyktPyhcXHcrKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFzdXNcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC9cXChiYjEwO1xccyhcXHcrKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmxhY2tCZXJyeSAxMFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnQmxhY2tCZXJyeSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXN1cyBUYWJsZXRzXG4gICAgICAgICAgICAvYW5kcm9pZC4rKHRyYW5zZm9bcHJpbWVcXHNdezQsMTB9XFxzXFx3K3xlZWVwY3xzbGlkZXJcXHNcXHcrfG5leHVzIDd8cGFkZm9uZSkvaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnQXN1cyddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgLyhzb255KVxccyh0YWJsZXRcXHNbcHNdKVxcc2J1aWxkXFwvL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvbnlcbiAgICAgICAgICAgIC8oc29ueSk/KD86c2dwLispXFxzYnVpbGRcXC8vaVxuICAgICAgICAgICAgXSwgW1tWRU5ET1IsICdTb255J10sIFtNT0RFTCwgJ1hwZXJpYSBUYWJsZXQnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvYW5kcm9pZC4rXFxzKFtjLWddXFxkezR9fHNvWy1sXVxcdyspXFxzYnVpbGRcXC8vaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnU29ueSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgL1xccyhvdXlhKVxccy9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE91eWFcbiAgICAgICAgICAgIC8obmludGVuZG8pXFxzKFt3aWRzM3VdKykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5pbnRlbmRvXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIENPTlNPTEVdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rO1xccyhzaGllbGQpXFxzYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTnZpZGlhXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdOdmlkaWEnXSwgW1RZUEUsIENPTlNPTEVdXSwgW1xuXG4gICAgICAgICAgICAvKHBsYXlzdGF0aW9uXFxzWzM0cG9ydGFibGV2aV0rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQbGF5c3RhdGlvblxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnU29ueSddLCBbVFlQRSwgQ09OU09MRV1dLCBbXG5cbiAgICAgICAgICAgIC8oc3ByaW50XFxzKFxcdyspKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTcHJpbnQgUGhvbmVzXG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgbWFwcGVyLnN0ciwgbWFwcy5kZXZpY2Uuc3ByaW50LnZlbmRvcl0sIFtNT0RFTCwgbWFwcGVyLnN0ciwgbWFwcy5kZXZpY2Uuc3ByaW50Lm1vZGVsXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8obGVub3ZvKVxccz8oUyg/OjUwMDB8NjAwMCkrKD86Wy1dW1xcdytdKSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMZW5vdm8gdGFibGV0c1xuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvKGh0YylbO19cXHMtXSsoW1xcd1xcc10rKD89XFwpKXxcXHcrKSovaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSFRDXG4gICAgICAgICAgICAvKHp0ZSktKFxcdyspKi9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBaVEVcbiAgICAgICAgICAgIC8oYWxjYXRlbHxnZWVrc3Bob25lfGxlbm92b3xuZXhpYW58cGFuYXNvbmljfCg/PTtcXHMpc29ueSlbX1xccy1dPyhbXFx3LV0rKSovaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbGNhdGVsL0dlZWtzUGhvbmUvTGVub3ZvL05leGlhbi9QYW5hc29uaWMvU29ueVxuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgW01PREVMLCAvXy9nLCAnICddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLyhuZXh1c1xcczkpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSFRDIE5leHVzIDlcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0hUQyddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2RcXC9odWF3ZWkoW1xcd1xccy1dKylbO1xcKV0vaSxcbiAgICAgICAgICAgIC8obmV4dXNcXHM2cCkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEh1YXdlaVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnSHVhd2VpJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvKG1pY3Jvc29mdCk7XFxzKGx1bWlhW1xcc1xcd10rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1pY3Jvc29mdCBMdW1pYVxuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvW1xcc1xcKDtdKHhib3goPzpcXHNvbmUpPylbXFxzXFwpO10vaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWljcm9zb2Z0IFhib3hcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ01pY3Jvc29mdCddLCBbVFlQRSwgQ09OU09MRV1dLCBbXG4gICAgICAgICAgICAvKGtpblxcLltvbmV0d117M30pL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNaWNyb3NvZnQgS2luXG4gICAgICAgICAgICBdLCBbW01PREVMLCAvXFwuL2csICcgJ10sIFtWRU5ET1IsICdNaWNyb3NvZnQnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTW90b3JvbGFcbiAgICAgICAgICAgIC9cXHMobWlsZXN0b25lfGRyb2lkKD86WzItNHhdfFxccyg/OmJpb25pY3x4Mnxwcm98cmF6cikpPyg6P1xcczRnKT8pW1xcd1xcc10rYnVpbGRcXC8vaSxcbiAgICAgICAgICAgIC9tb3RbXFxzLV0/KFxcdyspKi9pLFxuICAgICAgICAgICAgLyhYVFxcZHszLDR9KSBidWlsZFxcLy9pLFxuICAgICAgICAgICAgLyhuZXh1c1xcczYpL2lcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ01vdG9yb2xhJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuICAgICAgICAgICAgL2FuZHJvaWQuK1xccyhtejYwXFxkfHhvb21bXFxzMl17MCwyfSlcXHNidWlsZFxcLy9pXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdNb3Rvcm9sYSddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2hiYnR2XFwvXFxkK1xcLlxcZCtcXC5cXGQrXFxzK1xcKFtcXHdcXHNdKjtcXHMqKFxcd1teO10qKTsoW147XSopL2kgICAgICAgICAgICAvLyBIYmJUViBkZXZpY2VzXG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgdXRpbC50cmltXSwgW01PREVMLCB1dGlsLnRyaW1dLCBbVFlQRSwgU01BUlRUVl1dLCBbXG5cbiAgICAgICAgICAgIC9oYmJ0di4rbWFwbGU7KFxcZCspL2lcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsIC9eLywgJ1NtYXJ0VFYnXSwgW1ZFTkRPUiwgJ1NhbXN1bmcnXSwgW1RZUEUsIFNNQVJUVFZdXSwgW1xuXG4gICAgICAgICAgICAvXFwoZHR2W1xcKTtdLisoYXF1b3MpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2hhcnBcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1NoYXJwJ10sIFtUWVBFLCBTTUFSVFRWXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKygoc2NoLWlbODldMFxcZHxzaHctbTM4MHN8Z3QtcFxcZHs0fXxndC1uXFxkK3xzZ2gtdDhbNTZdOXxuZXh1cyAxMCkpL2ksXG4gICAgICAgICAgICAvKChTTS1UXFx3KykpL2lcbiAgICAgICAgICAgIF0sIFtbVkVORE9SLCAnU2Ftc3VuZyddLCBNT0RFTCwgW1RZUEUsIFRBQkxFVF1dLCBbICAgICAgICAgICAgICAgICAgLy8gU2Ftc3VuZ1xuICAgICAgICAgICAgL3NtYXJ0LXR2Lisoc2Ftc3VuZykvaVxuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgW1RZUEUsIFNNQVJUVFZdLCBNT0RFTF0sIFtcbiAgICAgICAgICAgIC8oKHNbY2dwXWgtXFx3K3xndC1cXHcrfGdhbGF4eVxcc25leHVzfHNtLVxcd1tcXHdcXGRdKykpL2ksXG4gICAgICAgICAgICAvKHNhbVtzdW5nXSopW1xccy1dKihcXHcrLT9bXFx3LV0qKSovaSxcbiAgICAgICAgICAgIC9zZWMtKChzZ2hcXHcrKSkvaVxuICAgICAgICAgICAgXSwgW1tWRU5ET1IsICdTYW1zdW5nJ10sIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgL3NpZS0oXFx3KykqL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2llbWVuc1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnU2llbWVucyddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLyhtYWVtb3xub2tpYSkuKihuOTAwfGx1bWlhXFxzXFxkKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5va2lhXG4gICAgICAgICAgICAvKG5va2lhKVtcXHNfLV0/KFtcXHctXSspKi9pXG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgJ05va2lhJ10sIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWRcXHMzXFwuW1xcc1xcdzstXXsxMH0oYVxcZHszfSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFjZXJcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0FjZXInXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLisoW3ZsXWtcXC0/XFxkezN9KVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTEcgVGFibGV0XG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdMRyddLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC9hbmRyb2lkXFxzM1xcLltcXHNcXHc7LV17MTB9KGxnPyktKFswNmN2OV17Myw0fSkvaSAgICAgICAgICAgICAgICAgICAgIC8vIExHIFRhYmxldFxuICAgICAgICAgICAgXSwgW1tWRU5ET1IsICdMRyddLCBNT0RFTCwgW1RZUEUsIFRBQkxFVF1dLCBbXG4gICAgICAgICAgICAvKGxnKSBuZXRjYXN0XFwudHYvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMRyBTbWFydFRWXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIFNNQVJUVFZdXSwgW1xuICAgICAgICAgICAgLyhuZXh1c1xcc1s0NV0pL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTEdcbiAgICAgICAgICAgIC9sZ1tlO1xcc1xcLy1dKyhcXHcrKSovaSxcbiAgICAgICAgICAgIC9hbmRyb2lkLitsZyhcXC0/W1xcZFxcd10rKVxccytidWlsZC9pXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdMRyddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKyhpZGVhdGFiW2EtejAtOVxcLVxcc10rKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExlbm92b1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnTGVub3ZvJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvbGludXg7LisoKGpvbGxhKSk7L2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEpvbGxhXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8oKHBlYmJsZSkpYXBwXFwvW1xcZFxcLl0rXFxzL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBlYmJsZVxuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBXRUFSQUJMRV1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLis7XFxzKG9wcG8pXFxzPyhbXFx3XFxzXSspXFxzYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPUFBPXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC9jcmtleS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR29vZ2xlIENocm9tZWNhc3RcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdDaHJvbWVjYXN0J10sIFtWRU5ET1IsICdHb29nbGUnXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKztcXHMoZ2xhc3MpXFxzXFxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHb29nbGUgR2xhc3NcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0dvb2dsZSddLCBbVFlQRSwgV0VBUkFCTEVdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rO1xccyhwaXhlbCBjKVxccy9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR29vZ2xlIFBpeGVsIENcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0dvb2dsZSddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKztcXHMocGl4ZWwgeGx8cGl4ZWwpXFxzL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdvb2dsZSBQaXhlbFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnR29vZ2xlJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rKFxcdyspXFxzK2J1aWxkXFwvaG1cXDEvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBYaWFvbWkgSG9uZ21pICdudW1lcmljJyBtb2RlbHNcbiAgICAgICAgICAgIC9hbmRyb2lkLisoaG1bXFxzXFwtX10qbm90ZT9bXFxzX10qKD86XFxkXFx3KT8pXFxzK2J1aWxkL2ksICAgICAgICAgICAgICAgLy8gWGlhb21pIEhvbmdtaVxuICAgICAgICAgICAgL2FuZHJvaWQuKyhtaVtcXHNcXC1fXSooPzpvbmV8b25lW1xcc19dcGx1c3xub3RlIGx0ZSk/W1xcc19dKig/OlxcZFxcdyk/KVxccytidWlsZC9pICAgIC8vIFhpYW9taSBNaVxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgL18vZywgJyAnXSwgW1ZFTkRPUiwgJ1hpYW9taSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKztcXHMobVsxLTVdXFxzbm90ZSlcXHNidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNZWl6dSBUYWJsZXRcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ01laXp1J10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rYTAwMCgxKVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPbmVQbHVzXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdPbmVQbHVzJ10sIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKihSQ1RbXFxkXFx3XSspXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUkNBIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1JDQSddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooVmVudWVbXFxkXFxzXSopXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlbGwgVmVudWUgVGFibGV0c1xuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnRGVsbCddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooUVtUfE1dW1xcZFxcd10rKVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcml6b24gVGFibGV0XG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdWZXJpem9uJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKyhCYXJuZXNbJlxcc10rTm9ibGVcXHMrfEJOW1JUXSkoVj8uKilcXHMrYnVpbGQvaSAgICAgLy8gQmFybmVzICYgTm9ibGUgVGFibGV0XG4gICAgICAgICAgICBdLCBbW1ZFTkRPUiwgJ0Jhcm5lcyAmIE5vYmxlJ10sIE1PREVMLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccysoVE1cXGR7M30uKlxcYilcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJhcm5lcyAmIE5vYmxlIFRhYmxldFxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnTnVWaXNpb24nXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMqKHp0ZSk/Lisoa1xcZHsyfSlcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgIC8vIFpURSBLIFNlcmllcyBUYWJsZXRcbiAgICAgICAgICAgIF0sIFtbVkVORE9SLCAnWlRFJ10sIE1PREVMLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooZ2VuXFxkezN9KVxccytidWlsZC4qNDloL2kgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3dpc3MgR0VOIE1vYmlsZVxuICAgICAgICAgICAgXSwgW01PREVMLCBbVkVORE9SLCAnU3dpc3MnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMqKHp1clxcZHszfSlcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN3aXNzIFpVUiBUYWJsZXRcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1N3aXNzJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKigoWmVraSk/VEIuKlxcYilcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAvLyBaZWtpIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1pla2knXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC8oYW5kcm9pZCkuK1s7XFwvXVxccysoW1lSXVxcZHsyfXg/LiopXFxzK2J1aWxkL2ksXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKyhEcmFnb25bXFwtXFxzXStUb3VjaFxccyt8RFQpKC4rKVxccytidWlsZC9pICAgICAgICAgIC8vIERyYWdvbiBUb3VjaCBUYWJsZXRcbiAgICAgICAgICAgIF0sIFtbVkVORE9SLCAnRHJhZ29uIFRvdWNoJ10sIE1PREVMLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooTlMtPy4rKVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbnNpZ25pYSBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdJbnNpZ25pYSddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooKE5YfE5leHQpLT8uKylcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOZXh0Qm9vayBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdOZXh0Qm9vayddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooWHRyZW1lXFxfPyk/KFYoMVswNDVdfDJbMDE1XXwzMHw0MHw2MHw3WzA1XXw5MCkpXFxzK2J1aWxkL2lcbiAgICAgICAgICAgIF0sIFtbVkVORE9SLCAnVm9pY2UnXSwgTU9ERUwsIFtUWVBFLCBNT0JJTEVdXSwgWyAgICAgICAgICAgICAgICAgICAgLy8gVm9pY2UgWHRyZW1lIFBob25lc1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKihMVlRFTFxcLT8pPyhWMVsxMl0pXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAvLyBMdlRlbCBQaG9uZXNcbiAgICAgICAgICAgIF0sIFtbVkVORE9SLCAnTHZUZWwnXSwgTU9ERUwsIFtUWVBFLCBNT0JJTEVdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKihWKDEwME1EfDcwME5BfDcwMTF8OTE3RykuKlxcYilcXHMrYnVpbGQvaSAgICAgICAgICAvLyBFbnZpemVuIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ0Vudml6ZW4nXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLitbO1xcL11cXHMqKExlW1xcc1xcLV0rUGFuKVtcXHNcXC1dKyguKlxcYilcXHMrYnVpbGQvaSAgICAgICAgICAgICAvLyBMZSBQYW4gVGFibGV0c1xuICAgICAgICAgICAgXSwgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBUQUJMRVRdXSwgW1xuXG4gICAgICAgICAgICAvYW5kcm9pZC4rWztcXC9dXFxzKihUcmlvW1xcc1xcLV0qLiopXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFjaFNwZWVkIFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ01hY2hTcGVlZCddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccyooVHJpbml0eSlbXFwtXFxzXSooVFxcZHszfSlcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAvLyBUcmluaXR5IFRhYmxldHNcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuK1s7XFwvXVxccypUVV8oMTQ5MSlcXHMrYnVpbGQvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSb3RvciBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdSb3RvciddLCBbVFlQRSwgVEFCTEVUXV0sIFtcblxuICAgICAgICAgICAgL2FuZHJvaWQuKyhLUyguKykpXFxzK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW1hem9uIEtpbmRsZSBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdBbWF6b24nXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9hbmRyb2lkLisoR2lnYXNldClbXFxzXFwtXSsoUS4rKVxccytidWlsZC9pICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2lnYXNldCBUYWJsZXRzXG4gICAgICAgICAgICBdLCBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC9cXHModGFibGV0fHRhYilbO1xcL10vaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVbmlkZW50aWZpYWJsZSBUYWJsZXRcbiAgICAgICAgICAgIC9cXHMobW9iaWxlKSg/Ols7XFwvXXxcXHNzYWZhcmkpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVW5pZGVudGlmaWFibGUgTW9iaWxlXG4gICAgICAgICAgICBdLCBbW1RZUEUsIHV0aWwubG93ZXJpemVdLCBWRU5ET1IsIE1PREVMXSwgW1xuXG4gICAgICAgICAgICAvKGFuZHJvaWQuKylbO1xcL10uK2J1aWxkL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZW5lcmljIEFuZHJvaWQgRGV2aWNlXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdHZW5lcmljJ11dXG5cblxuICAgICAgICAvKi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAvLyBUT0RPOiBtb3ZlIHRvIHN0cmluZyBtYXBcbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAgICAgLyhDNjYwMykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTb255IFhwZXJpYSBaIEM2NjAzXG4gICAgICAgICAgICBdLCBbW01PREVMLCAnWHBlcmlhIFogQzY2MDMnXSwgW1ZFTkRPUiwgJ1NvbnknXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvKEM2OTAzKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvbnkgWHBlcmlhIFogMVxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ1hwZXJpYSBaIDEnXSwgW1ZFTkRPUiwgJ1NvbnknXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8oU00tRzkwMFtGfEhdKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2Ftc3VuZyBHYWxheHkgUzVcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdHYWxheHkgUzUnXSwgW1ZFTkRPUiwgJ1NhbXN1bmcnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvKFNNLUc3MTAyKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhbXN1bmcgR2FsYXh5IEdyYW5kIDJcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdHYWxheHkgR3JhbmQgMiddLCBbVkVORE9SLCAnU2Ftc3VuZyddLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC8oU00tRzUzMEgpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2Ftc3VuZyBHYWxheHkgR3JhbmQgUHJpbWVcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdHYWxheHkgR3JhbmQgUHJpbWUnXSwgW1ZFTkRPUiwgJ1NhbXN1bmcnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvKFNNLUczMTNIWikvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhbXN1bmcgR2FsYXh5IFZcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdHYWxheHkgViddLCBbVkVORE9SLCAnU2Ftc3VuZyddLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC8oU00tVDgwNSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2Ftc3VuZyBHYWxheHkgVGFiIFMgMTAuNVxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ0dhbGF4eSBUYWIgUyAxMC41J10sIFtWRU5ET1IsICdTYW1zdW5nJ10sIFtUWVBFLCBUQUJMRVRdXSwgW1xuICAgICAgICAgICAgLyhTTS1HODAwRikvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTYW1zdW5nIEdhbGF4eSBTNSBNaW5pXG4gICAgICAgICAgICBdLCBbW01PREVMLCAnR2FsYXh5IFM1IE1pbmknXSwgW1ZFTkRPUiwgJ1NhbXN1bmcnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG4gICAgICAgICAgICAvKFNNLVQzMTEpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhbXN1bmcgR2FsYXh5IFRhYiAzIDguMFxuICAgICAgICAgICAgXSwgW1tNT0RFTCwgJ0dhbGF4eSBUYWIgMyA4LjAnXSwgW1ZFTkRPUiwgJ1NhbXN1bmcnXSwgW1RZUEUsIFRBQkxFVF1dLCBbXG5cbiAgICAgICAgICAgIC8oVDNDKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWR2YW4gVmFuZHJvaWQgVDNDXG4gICAgICAgICAgICBdLCBbTU9ERUwsIFtWRU5ET1IsICdBZHZhbiddLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC8oQURWQU4gVDFKXFwrKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkdmFuIFZhbmRyb2lkIFQxSitcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdWYW5kcm9pZCBUMUorJ10sIFtWRU5ET1IsICdBZHZhbiddLCBbVFlQRSwgVEFCTEVUXV0sIFtcbiAgICAgICAgICAgIC8oQURWQU4gUzRBKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWR2YW4gVmFuZHJvaWQgUzRBXG4gICAgICAgICAgICBdLCBbW01PREVMLCAnVmFuZHJvaWQgUzRBJ10sIFtWRU5ET1IsICdBZHZhbiddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLyhWOTcyTSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBaVEUgVjk3Mk1cbiAgICAgICAgICAgIF0sIFtNT0RFTCwgW1ZFTkRPUiwgJ1pURSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcblxuICAgICAgICAgICAgLyhpLW1vYmlsZSlcXHMoSVFcXHNbXFxkXFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaS1tb2JpbGUgSVFcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC8oSVE2LjMpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaS1tb2JpbGUgSVEgSVEgNi4zXG4gICAgICAgICAgICBdLCBbW01PREVMLCAnSVEgNi4zJ10sIFtWRU5ET1IsICdpLW1vYmlsZSddLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC8oaS1tb2JpbGUpXFxzKGktc3R5bGVcXHNbXFxkXFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGktbW9iaWxlIGktU1RZTEVcbiAgICAgICAgICAgIF0sIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgTU9CSUxFXV0sIFtcbiAgICAgICAgICAgIC8oaS1TVFlMRTIuMSkvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaS1tb2JpbGUgaS1TVFlMRSAyLjFcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdpLVNUWUxFIDIuMSddLCBbVkVORE9SLCAnaS1tb2JpbGUnXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8obW9iaWlzdGFyIHRvdWNoIExBSSA1MTIpL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW9iaWlzdGFyIHRvdWNoIExBSSA1MTJcbiAgICAgICAgICAgIF0sIFtbTU9ERUwsICdUb3VjaCBMQUkgNTEyJ10sIFtWRU5ET1IsICdtb2JpaXN0YXInXSwgW1RZUEUsIE1PQklMRV1dLCBbXG5cbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgIC8vIEVORCBUT0RPXG4gICAgICAgICAgICAvLy8vLy8vLy8vLyovXG5cbiAgICAgICAgXSxcblxuICAgICAgICBlbmdpbmUgOiBbW1xuXG4gICAgICAgICAgICAvd2luZG93cy4rXFxzZWRnZVxcLyhbXFx3XFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFZGdlSFRNTFxuICAgICAgICAgICAgXSwgW1ZFUlNJT04sIFtOQU1FLCAnRWRnZUhUTUwnXV0sIFtcblxuICAgICAgICAgICAgLyhwcmVzdG8pXFwvKFtcXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmVzdG9cbiAgICAgICAgICAgIC8od2Via2l0fHRyaWRlbnR8bmV0ZnJvbnR8bmV0c3VyZnxhbWF5YXxseW54fHczbSlcXC8oW1xcd1xcLl0rKS9pLCAgICAgLy8gV2ViS2l0L1RyaWRlbnQvTmV0RnJvbnQvTmV0U3VyZi9BbWF5YS9MeW54L3czbVxuICAgICAgICAgICAgLyhraHRtbHx0YXNtYW58bGlua3MpW1xcL1xcc11cXCg/KFtcXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtIVE1ML1Rhc21hbi9MaW5rc1xuICAgICAgICAgICAgLyhpY2FiKVtcXC9cXHNdKFsyM11cXC5bXFxkXFwuXSspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlDYWJcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvcnZcXDooW1xcd1xcLl0rKS4qKGdlY2tvKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdlY2tvXG4gICAgICAgICAgICBdLCBbVkVSU0lPTiwgTkFNRV1cbiAgICAgICAgXSxcblxuICAgICAgICBvcyA6IFtbXG5cbiAgICAgICAgICAgIC8vIFdpbmRvd3MgYmFzZWRcbiAgICAgICAgICAgIC9taWNyb3NvZnRcXHMod2luZG93cylcXHModmlzdGF8eHApL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXaW5kb3dzIChpVHVuZXMpXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcbiAgICAgICAgICAgIC8od2luZG93cylcXHNudFxcczZcXC4yO1xccyhhcm0pL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdpbmRvd3MgUlRcbiAgICAgICAgICAgIC8od2luZG93c1xcc3Bob25lKD86XFxzb3MpKilbXFxzXFwvXT8oW1xcZFxcLlxcc10rXFx3KSovaSwgICAgICAgICAgICAgICAgICAvLyBXaW5kb3dzIFBob25lXG4gICAgICAgICAgICAvKHdpbmRvd3NcXHNtb2JpbGV8d2luZG93cylbXFxzXFwvXT8oW250Y2VcXGRcXC5cXHNdK1xcdykvaVxuICAgICAgICAgICAgXSwgW05BTUUsIFtWRVJTSU9OLCBtYXBwZXIuc3RyLCBtYXBzLm9zLndpbmRvd3MudmVyc2lvbl1dLCBbXG4gICAgICAgICAgICAvKHdpbig/PTN8OXxuKXx3aW5cXHM5eFxccykoW250XFxkXFwuXSspL2lcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ1dpbmRvd3MnXSwgW1ZFUlNJT04sIG1hcHBlci5zdHIsIG1hcHMub3Mud2luZG93cy52ZXJzaW9uXV0sIFtcblxuICAgICAgICAgICAgLy8gTW9iaWxlL0VtYmVkZGVkIE9TXG4gICAgICAgICAgICAvXFwoKGJiKSgxMCk7L2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCbGFja0JlcnJ5IDEwXG4gICAgICAgICAgICBdLCBbW05BTUUsICdCbGFja0JlcnJ5J10sIFZFUlNJT05dLCBbXG4gICAgICAgICAgICAvKGJsYWNrYmVycnkpXFx3KlxcLz8oW1xcd1xcLl0rKSovaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCbGFja2JlcnJ5XG4gICAgICAgICAgICAvKHRpemVuKVtcXC9cXHNdKFtcXHdcXC5dKykvaSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaXplblxuICAgICAgICAgICAgLyhhbmRyb2lkfHdlYm9zfHBhbG1cXHNvc3xxbnh8YmFkYXxyaW1cXHN0YWJsZXRcXHNvc3xtZWVnb3xjb250aWtpKVtcXC9cXHMtXT8oW1xcd1xcLl0rKSovaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW5kcm9pZC9XZWJPUy9QYWxtL1FOWC9CYWRhL1JJTS9NZWVHby9Db250aWtpXG4gICAgICAgICAgICAvbGludXg7Lisoc2FpbGZpc2gpOy9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhaWxmaXNoIE9TXG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sIFtcbiAgICAgICAgICAgIC8oc3ltYmlhblxccz9vc3xzeW1ib3N8czYwKD89OykpW1xcL1xccy1dPyhbXFx3XFwuXSspKi9pICAgICAgICAgICAgICAgICAvLyBTeW1iaWFuXG4gICAgICAgICAgICBdLCBbW05BTUUsICdTeW1iaWFuJ10sIFZFUlNJT05dLCBbXG4gICAgICAgICAgICAvXFwoKHNlcmllczQwKTsvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXJpZXMgNDBcbiAgICAgICAgICAgIF0sIFtOQU1FXSwgW1xuICAgICAgICAgICAgL21vemlsbGEuK1xcKG1vYmlsZTsuK2dlY2tvLitmaXJlZm94L2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyZWZveCBPU1xuICAgICAgICAgICAgXSwgW1tOQU1FLCAnRmlyZWZveCBPUyddLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvLyBDb25zb2xlXG4gICAgICAgICAgICAvKG5pbnRlbmRvfHBsYXlzdGF0aW9uKVxccyhbd2lkczM0cG9ydGFibGV2dV0rKS9pLCAgICAgICAgICAgICAgICAgICAvLyBOaW50ZW5kby9QbGF5c3RhdGlvblxuXG4gICAgICAgICAgICAvLyBHTlUvTGludXggYmFzZWRcbiAgICAgICAgICAgIC8obWludClbXFwvXFxzXFwoXT8oXFx3KykqL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1pbnRcbiAgICAgICAgICAgIC8obWFnZWlhfHZlY3RvcmxpbnV4KVs7XFxzXS9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hZ2VpYS9WZWN0b3JMaW51eFxuICAgICAgICAgICAgLyhqb2xpfFtreGxuXT91YnVudHV8ZGViaWFufFtvcGVuXSpzdXNlfGdlbnRvb3woPz1cXHMpYXJjaHxzbGFja3dhcmV8ZmVkb3JhfG1hbmRyaXZhfGNlbnRvc3xwY2xpbnV4b3N8cmVkaGF0fHplbndhbGt8bGlucHVzKVtcXC9cXHMtXT8oPyFjaHJvbSkoW1xcd1xcLi1dKykqL2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEpvbGkvVWJ1bnR1L0RlYmlhbi9TVVNFL0dlbnRvby9BcmNoL1NsYWNrd2FyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGZWRvcmEvTWFuZHJpdmEvQ2VudE9TL1BDTGludXhPUy9SZWRIYXQvWmVud2Fsay9MaW5wdXNcbiAgICAgICAgICAgIC8oaHVyZHxsaW51eClcXHM/KFtcXHdcXC5dKykqL2ksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSHVyZC9MaW51eFxuICAgICAgICAgICAgLyhnbnUpXFxzPyhbXFx3XFwuXSspKi9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHTlVcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSwgW1xuXG4gICAgICAgICAgICAvKGNyb3MpXFxzW1xcd10rXFxzKFtcXHdcXC5dK1xcdykvaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENocm9taXVtIE9TXG4gICAgICAgICAgICBdLCBbW05BTUUsICdDaHJvbWl1bSBPUyddLCBWRVJTSU9OXSxbXG5cbiAgICAgICAgICAgIC8vIFNvbGFyaXNcbiAgICAgICAgICAgIC8oc3Vub3MpXFxzPyhbXFx3XFwuXStcXGQpKi9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvbGFyaXNcbiAgICAgICAgICAgIF0sIFtbTkFNRSwgJ1NvbGFyaXMnXSwgVkVSU0lPTl0sIFtcblxuICAgICAgICAgICAgLy8gQlNEIGJhc2VkXG4gICAgICAgICAgICAvXFxzKFtmcmVudG9wYy1dezAsNH1ic2R8ZHJhZ29uZmx5KVxccz8oW1xcd1xcLl0rKSovaSAgICAgICAgICAgICAgICAgICAvLyBGcmVlQlNEL05ldEJTRC9PcGVuQlNEL1BDLUJTRC9EcmFnb25GbHlcbiAgICAgICAgICAgIF0sIFtOQU1FLCBWRVJTSU9OXSxbXG5cbiAgICAgICAgICAgIC8oaGFpa3UpXFxzKFxcdyspL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhaWt1XG4gICAgICAgICAgICBdLCBbTkFNRSwgVkVSU0lPTl0sW1xuXG4gICAgICAgICAgICAvY2ZuZXR3b3JrXFwvLitkYXJ3aW4vaSxcbiAgICAgICAgICAgIC9pcFtob25lYWRdKyg/Oi4qb3NcXHMoW1xcd10rKSpcXHNsaWtlXFxzbWFjfDtcXHNvcGVyYSkvaSAgICAgICAgICAgICAgICAvLyBpT1NcbiAgICAgICAgICAgIF0sIFtbVkVSU0lPTiwgL18vZywgJy4nXSwgW05BTUUsICdpT1MnXV0sIFtcblxuICAgICAgICAgICAgLyhtYWNcXHNvc1xcc3gpXFxzPyhbXFx3XFxzXFwuXStcXHcpKi9pLFxuICAgICAgICAgICAgLyhtYWNpbnRvc2h8bWFjKD89X3Bvd2VycGMpXFxzKS9pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFjIE9TXG4gICAgICAgICAgICBdLCBbW05BTUUsICdNYWMgT1MnXSwgW1ZFUlNJT04sIC9fL2csICcuJ11dLCBbXG5cbiAgICAgICAgICAgIC8vIE90aGVyXG4gICAgICAgICAgICAvKCg/Om9wZW4pP3NvbGFyaXMpW1xcL1xccy1dPyhbXFx3XFwuXSspKi9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTb2xhcmlzXG4gICAgICAgICAgICAvKGFpeClcXHMoKFxcZCkoPz1cXC58XFwpfFxccylbXFx3XFwuXSopKi9pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBSVhcbiAgICAgICAgICAgIC8ocGxhblxcczl8bWluaXh8YmVvc3xvc1xcLzJ8YW1pZ2Fvc3xtb3JwaG9zfHJpc2NcXHNvc3xvcGVudm1zKS9pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQbGFuOS9NaW5peC9CZU9TL09TMi9BbWlnYU9TL01vcnBoT1MvUklTQ09TL09wZW5WTVNcbiAgICAgICAgICAgIC8odW5peClcXHM/KFtcXHdcXC5dKykqL2kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVU5JWFxuICAgICAgICAgICAgXSwgW05BTUUsIFZFUlNJT05dXG4gICAgICAgIF1cbiAgICB9O1xuXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIENvbnN0cnVjdG9yXG4gICAgLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgdmFyIEJyb3dzZXIgPSBmdW5jdGlvbiAobmFtZSwgdmVyc2lvbikge1xuICAgICAgICB0aGlzW05BTUVdID0gbmFtZTtcbiAgICAgICAgdGhpc1tWRVJTSU9OXSA9IHZlcnNpb247XG4gICAgfTtcbiAgICB2YXIgQ1BVID0gZnVuY3Rpb24gKGFyY2gpIHtcbiAgICAgICAgdGhpc1tBUkNISVRFQ1RVUkVdID0gYXJjaDtcbiAgICB9O1xuICAgIHZhciBEZXZpY2UgPSBmdW5jdGlvbiAodmVuZG9yLCBtb2RlbCwgdHlwZSkge1xuICAgICAgICB0aGlzW1ZFTkRPUl0gPSB2ZW5kb3I7XG4gICAgICAgIHRoaXNbTU9ERUxdID0gbW9kZWw7XG4gICAgICAgIHRoaXNbVFlQRV0gPSB0eXBlO1xuICAgIH07XG4gICAgdmFyIEVuZ2luZSA9IEJyb3dzZXI7XG4gICAgdmFyIE9TID0gQnJvd3NlcjtcblxuICAgIHZhciBVQVBhcnNlciA9IGZ1bmN0aW9uICh1YXN0cmluZywgZXh0ZW5zaW9ucykge1xuXG4gICAgICAgIGlmICh0eXBlb2YgdWFzdHJpbmcgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBleHRlbnNpb25zID0gdWFzdHJpbmc7XG4gICAgICAgICAgICB1YXN0cmluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBVQVBhcnNlcikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVUFQYXJzZXIodWFzdHJpbmcsIGV4dGVuc2lvbnMpLmdldFJlc3VsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVhID0gdWFzdHJpbmcgfHwgKCh3aW5kb3cgJiYgd2luZG93Lm5hdmlnYXRvciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgPyB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCA6IEVNUFRZKTtcbiAgICAgICAgdmFyIHJneG1hcCA9IGV4dGVuc2lvbnMgPyB1dGlsLmV4dGVuZChyZWdleGVzLCBleHRlbnNpb25zKSA6IHJlZ2V4ZXM7XG4gICAgICAgIHZhciBicm93c2VyID0gbmV3IEJyb3dzZXIoKTtcbiAgICAgICAgdmFyIGNwdSA9IG5ldyBDUFUoKTtcbiAgICAgICAgdmFyIGRldmljZSA9IG5ldyBEZXZpY2UoKTtcbiAgICAgICAgdmFyIGVuZ2luZSA9IG5ldyBFbmdpbmUoKTtcbiAgICAgICAgdmFyIG9zID0gbmV3IE9TKCk7XG5cbiAgICAgICAgdGhpcy5nZXRCcm93c2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbWFwcGVyLnJneC5jYWxsKGJyb3dzZXIsIHVhLCByZ3htYXAuYnJvd3Nlcik7XG4gICAgICAgICAgICBicm93c2VyLm1ham9yID0gdXRpbC5tYWpvcihicm93c2VyLnZlcnNpb24pOyAvLyBkZXByZWNhdGVkXG4gICAgICAgICAgICByZXR1cm4gYnJvd3NlcjtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRDUFUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBtYXBwZXIucmd4LmNhbGwoY3B1LCB1YSwgcmd4bWFwLmNwdSk7XG4gICAgICAgICAgICByZXR1cm4gY3B1O1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldERldmljZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG1hcHBlci5yZ3guY2FsbChkZXZpY2UsIHVhLCByZ3htYXAuZGV2aWNlKTtcbiAgICAgICAgICAgIHJldHVybiBkZXZpY2U7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0RW5naW5lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbWFwcGVyLnJneC5jYWxsKGVuZ2luZSwgdWEsIHJneG1hcC5lbmdpbmUpO1xuICAgICAgICAgICAgcmV0dXJuIGVuZ2luZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRPUyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG1hcHBlci5yZ3guY2FsbChvcywgdWEsIHJneG1hcC5vcyk7XG4gICAgICAgICAgICByZXR1cm4gb3M7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0UmVzdWx0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1YSAgICAgIDogdGhpcy5nZXRVQSgpLFxuICAgICAgICAgICAgICAgIGJyb3dzZXIgOiB0aGlzLmdldEJyb3dzZXIoKSxcbiAgICAgICAgICAgICAgICBlbmdpbmUgIDogdGhpcy5nZXRFbmdpbmUoKSxcbiAgICAgICAgICAgICAgICBvcyAgICAgIDogdGhpcy5nZXRPUygpLFxuICAgICAgICAgICAgICAgIGRldmljZSAgOiB0aGlzLmdldERldmljZSgpLFxuICAgICAgICAgICAgICAgIGNwdSAgICAgOiB0aGlzLmdldENQVSgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldFVBID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHVhO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNldFVBID0gZnVuY3Rpb24gKHVhc3RyaW5nKSB7XG4gICAgICAgICAgICB1YSA9IHVhc3RyaW5nO1xuICAgICAgICAgICAgYnJvd3NlciA9IG5ldyBCcm93c2VyKCk7XG4gICAgICAgICAgICBjcHUgPSBuZXcgQ1BVKCk7XG4gICAgICAgICAgICBkZXZpY2UgPSBuZXcgRGV2aWNlKCk7XG4gICAgICAgICAgICBlbmdpbmUgPSBuZXcgRW5naW5lKCk7XG4gICAgICAgICAgICBvcyA9IG5ldyBPUygpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBVQVBhcnNlci5WRVJTSU9OID0gTElCVkVSU0lPTjtcbiAgICBVQVBhcnNlci5CUk9XU0VSID0ge1xuICAgICAgICBOQU1FICAgIDogTkFNRSxcbiAgICAgICAgTUFKT1IgICA6IE1BSk9SLCAvLyBkZXByZWNhdGVkXG4gICAgICAgIFZFUlNJT04gOiBWRVJTSU9OXG4gICAgfTtcbiAgICBVQVBhcnNlci5DUFUgPSB7XG4gICAgICAgIEFSQ0hJVEVDVFVSRSA6IEFSQ0hJVEVDVFVSRVxuICAgIH07XG4gICAgVUFQYXJzZXIuREVWSUNFID0ge1xuICAgICAgICBNT0RFTCAgIDogTU9ERUwsXG4gICAgICAgIFZFTkRPUiAgOiBWRU5ET1IsXG4gICAgICAgIFRZUEUgICAgOiBUWVBFLFxuICAgICAgICBDT05TT0xFIDogQ09OU09MRSxcbiAgICAgICAgTU9CSUxFICA6IE1PQklMRSxcbiAgICAgICAgU01BUlRUViA6IFNNQVJUVFYsXG4gICAgICAgIFRBQkxFVCAgOiBUQUJMRVQsXG4gICAgICAgIFdFQVJBQkxFOiBXRUFSQUJMRSxcbiAgICAgICAgRU1CRURERUQ6IEVNQkVEREVEXG4gICAgfTtcbiAgICBVQVBhcnNlci5FTkdJTkUgPSB7XG4gICAgICAgIE5BTUUgICAgOiBOQU1FLFxuICAgICAgICBWRVJTSU9OIDogVkVSU0lPTlxuICAgIH07XG4gICAgVUFQYXJzZXIuT1MgPSB7XG4gICAgICAgIE5BTUUgICAgOiBOQU1FLFxuICAgICAgICBWRVJTSU9OIDogVkVSU0lPTlxuICAgIH07XG4gICAgLy9VQVBhcnNlci5VdGlscyA9IHV0aWw7XG5cbiAgICAvLy8vLy8vLy8vL1xuICAgIC8vIEV4cG9ydFxuICAgIC8vLy8vLy8vLy9cblxuXG4gICAgLy8gY2hlY2sganMgZW52aXJvbm1lbnRcbiAgICBpZiAodHlwZW9mKGV4cG9ydHMpICE9PSBVTkRFRl9UWVBFKSB7XG4gICAgICAgIC8vIG5vZGVqcyBlbnZcbiAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGUgIT09IFVOREVGX1RZUEUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IFVBUGFyc2VyO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydHMuVUFQYXJzZXIgPSBVQVBhcnNlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZXF1aXJlanMgZW52IChvcHRpb25hbClcbiAgICAgICAgaWYgKHR5cGVvZihkZWZpbmUpID09PSBGVU5DX1RZUEUgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAgICAgZGVmaW5lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVUFQYXJzZXI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cpIHtcbiAgICAgICAgICAgIC8vIGJyb3dzZXIgZW52XG4gICAgICAgICAgICB3aW5kb3cuVUFQYXJzZXIgPSBVQVBhcnNlcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGpRdWVyeS9aZXB0byBzcGVjaWZpYyAob3B0aW9uYWwpXG4gICAgLy8gTm90ZTpcbiAgICAvLyAgIEluIEFNRCBlbnYgdGhlIGdsb2JhbCBzY29wZSBzaG91bGQgYmUga2VwdCBjbGVhbiwgYnV0IGpRdWVyeSBpcyBhbiBleGNlcHRpb24uXG4gICAgLy8gICBqUXVlcnkgYWx3YXlzIGV4cG9ydHMgdG8gZ2xvYmFsIHNjb3BlLCB1bmxlc3MgalF1ZXJ5Lm5vQ29uZmxpY3QodHJ1ZSkgaXMgdXNlZCxcbiAgICAvLyAgIGFuZCB3ZSBzaG91bGQgY2F0Y2ggdGhhdC5cbiAgICB2YXIgJCA9IHdpbmRvdyAmJiAod2luZG93LmpRdWVyeSB8fCB3aW5kb3cuWmVwdG8pO1xuICAgIGlmICh0eXBlb2YgJCAhPT0gVU5ERUZfVFlQRSkge1xuICAgICAgICB2YXIgcGFyc2VyID0gbmV3IFVBUGFyc2VyKCk7XG4gICAgICAgICQudWEgPSBwYXJzZXIuZ2V0UmVzdWx0KCk7XG4gICAgICAgICQudWEuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlci5nZXRVQSgpO1xuICAgICAgICB9O1xuICAgICAgICAkLnVhLnNldCA9IGZ1bmN0aW9uICh1YXN0cmluZykge1xuICAgICAgICAgICAgcGFyc2VyLnNldFVBKHVhc3RyaW5nKTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBwYXJzZXIuZ2V0UmVzdWx0KCk7XG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICQudWFbcHJvcF0gPSByZXN1bHRbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG59KSh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyA/IHdpbmRvdyA6IHRoaXMpO1xuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZGVwcmVjYXRlO1xuXG4vKipcbiAqIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4gKiBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2Uubm9EZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudGhyb3dEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCB0aHJvdyBhbiBFcnJvciB3aGVuIGludm9rZWQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50cmFjZURlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIGludm9rZSBgY29uc29sZS50cmFjZSgpYCBpbnN0ZWFkIG9mIGBjb25zb2xlLmVycm9yKClgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gdGhlIGZ1bmN0aW9uIHRvIGRlcHJlY2F0ZVxuICogQHBhcmFtIHtTdHJpbmd9IG1zZyAtIHRoZSBzdHJpbmcgdG8gcHJpbnQgdG8gdGhlIGNvbnNvbGUgd2hlbiBgZm5gIGlzIGludm9rZWRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYSBuZXcgXCJkZXByZWNhdGVkXCIgdmVyc2lvbiBvZiBgZm5gXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZSAoZm4sIG1zZykge1xuICBpZiAoY29uZmlnKCdub0RlcHJlY2F0aW9uJykpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChjb25maWcoJ3Rocm93RGVwcmVjYXRpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAoY29uZmlnKCd0cmFjZURlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBgbG9jYWxTdG9yYWdlYCBmb3IgYm9vbGVhbiB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBgbmFtZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29uZmlnIChuYW1lKSB7XG4gIC8vIGFjY2Vzc2luZyBnbG9iYWwubG9jYWxTdG9yYWdlIGNhbiB0cmlnZ2VyIGEgRE9NRXhjZXB0aW9uIGluIHNhbmRib3hlZCBpZnJhbWVzXG4gIHRyeSB7XG4gICAgaWYgKCFnbG9iYWwubG9jYWxTdG9yYWdlKSByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHZhbCA9IGdsb2JhbC5sb2NhbFN0b3JhZ2VbbmFtZV07XG4gIGlmIChudWxsID09IHZhbCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcbmV4cG9ydHMuZm9ybWF0ID0gZnVuY3Rpb24oZikge1xuICBpZiAoIWlzU3RyaW5nKGYpKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgb2JqZWN0cy5wdXNoKGluc3BlY3QoYXJndW1lbnRzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHZhciBpID0gMTtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24oeCkge1xuICAgIGlmICh4ID09PSAnJSUnKSByZXR1cm4gJyUnO1xuICAgIGlmIChpID49IGxlbikgcmV0dXJuIHg7XG4gICAgc3dpdGNoICh4KSB7XG4gICAgICBjYXNlICclcyc6IHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVkJzogcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWonOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pO1xuICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICB9KTtcbiAgZm9yICh2YXIgeCA9IGFyZ3NbaV07IGkgPCBsZW47IHggPSBhcmdzWysraV0pIHtcbiAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkge1xuICAgICAgc3RyICs9ICcgJyArIHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnICcgKyBpbnNwZWN0KHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vLyBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuLy8gUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbi8vIElmIC0tbm8tZGVwcmVjYXRpb24gaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG5leHBvcnRzLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKGZuLCBtc2cpIHtcbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKGlzVW5kZWZpbmVkKGdsb2JhbC5wcm9jZXNzKSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn07XG5cblxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52aXJvbjtcbmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpXG4gICAgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAobmV3IFJlZ0V4cCgnXFxcXGInICsgc2V0ICsgJ1xcXFxiJywgJ2knKS50ZXN0KGRlYnVnRW52aXJvbikpIHtcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZnVuY3Rpb24gaXNBcnJheShhcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiZcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IHJlcXVpcmUoJy4vc3VwcG9ydC9pc0J1ZmZlcicpO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cblxudmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLFxuICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblxuLy8gMjYgRmViIDE2OjE5OjM0XG5mdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcbiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcbn1cblxuXG4vLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKlxuICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXG4gKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZVxuICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG4gKiAgICAgcHJvdG90eXBlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uXG4gKi9cbmV4cG9ydHMuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufTtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gRlVOQ1RJT05TIC8vXG5cbnZhciBpc1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cblxuLy8gSVMgRkxPQVQzMkFSUkFZIC8vXG5cbi8qKlxuKiBGVU5DVElPTjogaXNGbG9hdDMyQXJyYXkoIHZhbHVlIClcbipcdFZhbGlkYXRlcyBpZiBhIHZhbHVlIGlzIGEgRmxvYXQzMkFycmF5LlxuKlxuKiBAcGFyYW0geyp9IHZhbHVlIC0gdmFsdWUgdG8gdmFsaWRhdGVcbiogQHJldHVybnMge0Jvb2xlYW59IGJvb2xlYW4gaW5kaWNhdGluZyBpZiBhIHZhbHVlIGlzIGEgRmxvYXQzMkFycmF5XG4qL1xuZnVuY3Rpb24gaXNGbG9hdDMyQXJyYXkoIHZhbHVlICkge1xuXHRyZXR1cm4gaXNTdHIuY2FsbCggdmFsdWUgKSA9PT0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XSc7XG59IC8vIGVuZCBGVU5DVElPTiBpc0Zsb2F0MzJBcnJheSgpXG5cblxuLy8gRVhQT1JUUyAvL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRmxvYXQzMkFycmF5O1xuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBkdXBsZXhpZnkgPSByZXF1aXJlKCdkdXBsZXhpZnknKVxudmFyIFdTID0gcmVxdWlyZSgnd3MnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbm1vZHVsZS5leHBvcnRzID0gV2ViU29ja2V0U3RyZWFtXG5cbmZ1bmN0aW9uIGJ1aWxkUHJveHkgKG9wdGlvbnMsIHNvY2tldFdyaXRlLCBzb2NrZXRFbmQpIHtcbiAgdmFyIHByb3h5ID0gbmV3IFRyYW5zZm9ybSh7XG4gICAgb2JqZWN0TW9kZTogb3B0aW9ucy5vYmplY3RNb2RlXG4gIH0pXG5cbiAgcHJveHkuX2Rlc3Ryb3llZCA9IGZhbHNlXG4gIHByb3h5Ll93cml0ZSA9IHNvY2tldFdyaXRlXG4gIHByb3h5Ll9mbHVzaCA9IHNvY2tldEVuZFxuXG4gIHByb3h5LmRlc3Ryb3kgPSBmdW5jdGlvbihlcnIpIHtcbiAgICBpZiAodGhpcy5fZGVzdHJveWVkKSByZXR1cm5cbiAgICAgIHRoaXMuX2Rlc3Ryb3llZCA9IHRydWVcblxuICAgIHZhciBzZWxmID0gdGhpc1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoZXJyKVxuICAgICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKVxuICAgICAgc2VsZi5lbWl0KCdjbG9zZScpXG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiBwcm94eVxufVxuXG5mdW5jdGlvbiBXZWJTb2NrZXRTdHJlYW0odGFyZ2V0LCBwcm90b2NvbHMsIG9wdGlvbnMpIHtcbiAgdmFyIHN0cmVhbSwgc29ja2V0XG5cbiAgdmFyIGlzQnJvd3NlciA9IHByb2Nlc3MudGl0bGUgPT09ICdicm93c2VyJ1xuICB2YXIgaXNOYXRpdmUgPSAhIWdsb2JhbC5XZWJTb2NrZXRcbiAgdmFyIHNvY2tldFdyaXRlID0gaXNCcm93c2VyID8gc29ja2V0V3JpdGVCcm93c2VyIDogc29ja2V0V3JpdGVOb2RlXG5cbiAgaWYgKHByb3RvY29scyAmJiAhQXJyYXkuaXNBcnJheShwcm90b2NvbHMpICYmICdvYmplY3QnID09PSB0eXBlb2YgcHJvdG9jb2xzKSB7XG4gICAgLy8gYWNjZXB0IHRoZSBcIm9wdGlvbnNcIiBPYmplY3QgYXMgdGhlIDJuZCBhcmd1bWVudFxuICAgIG9wdGlvbnMgPSBwcm90b2NvbHNcbiAgICBwcm90b2NvbHMgPSBudWxsXG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucHJvdG9jb2wgPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkob3B0aW9ucy5wcm90b2NvbCkpIHtcbiAgICAgIHByb3RvY29scyA9IG9wdGlvbnMucHJvdG9jb2w7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge31cblxuICBpZiAob3B0aW9ucy5vYmplY3RNb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICBvcHRpb25zLm9iamVjdE1vZGUgPSAhKG9wdGlvbnMuYmluYXJ5ID09PSB0cnVlIHx8IG9wdGlvbnMuYmluYXJ5ID09PSB1bmRlZmluZWQpXG4gIH1cblxuICB2YXIgcHJveHkgPSBidWlsZFByb3h5KG9wdGlvbnMsIHNvY2tldFdyaXRlLCBzb2NrZXRFbmQpXG5cbiAgaWYgKCFvcHRpb25zLm9iamVjdE1vZGUpIHtcbiAgICBwcm94eS5fd3JpdGV2ID0gd3JpdGV2XG4gIH1cblxuICAvLyBicm93c2VyIG9ubHk6IHNldHMgdGhlIG1heGltdW0gc29ja2V0IGJ1ZmZlciBzaXplIGJlZm9yZSB0aHJvdHRsaW5nXG4gIHZhciBidWZmZXJTaXplID0gb3B0aW9ucy5icm93c2VyQnVmZmVyU2l6ZSB8fCAxMDI0ICogNTEyXG5cbiAgLy8gYnJvd3NlciBvbmx5OiBob3cgbG9uZyB0byB3YWl0IHdoZW4gdGhyb3R0bGluZ1xuICB2YXIgYnVmZmVyVGltZW91dCA9IG9wdGlvbnMuYnJvd3NlckJ1ZmZlclRpbWVvdXQgfHwgMTAwMFxuXG4gIC8vIHVzZSBleGlzdGluZyBXZWJTb2NrZXQgb2JqZWN0IHRoYXQgd2FzIHBhc3NlZCBpblxuICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcpIHtcbiAgICBzb2NrZXQgPSB0YXJnZXRcbiAgLy8gb3RoZXJ3aXNlIG1ha2UgYSBuZXcgb25lXG4gIH0gZWxzZSB7XG4gICAgLy8gc3BlY2lhbCBjb25zdHJ1Y3RvciB0cmVhdG1lbnQgZm9yIG5hdGl2ZSB3ZWJzb2NrZXRzIGluIGJyb3dzZXJzLCBzZWVcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF4b2dkZW4vd2Vic29ja2V0LXN0cmVhbS9pc3N1ZXMvODJcbiAgICBpZiAoaXNOYXRpdmUgJiYgaXNCcm93c2VyKSB7XG4gICAgICBzb2NrZXQgPSBuZXcgV1ModGFyZ2V0LCBwcm90b2NvbHMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNvY2tldCA9IG5ldyBXUyh0YXJnZXQsIHByb3RvY29scywgb3B0aW9ucylcbiAgICB9XG5cbiAgICBzb2NrZXQuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcidcbiAgfVxuXG4gIC8vIHdhcyBhbHJlYWR5IG9wZW4gd2hlbiBwYXNzZWQgaW5cbiAgaWYgKHNvY2tldC5yZWFkeVN0YXRlID09PSBzb2NrZXQuT1BFTikge1xuICAgIHN0cmVhbSA9IHByb3h5XG4gIH0gZWxzZSB7XG4gICAgc3RyZWFtID0gZHVwbGV4aWZ5Lm9iaigpXG4gICAgc29ja2V0Lm9ub3BlbiA9IG9ub3BlblxuICB9XG5cbiAgc3RyZWFtLnNvY2tldCA9IHNvY2tldFxuXG4gIHNvY2tldC5vbmNsb3NlID0gb25jbG9zZVxuICBzb2NrZXQub25lcnJvciA9IG9uZXJyb3JcbiAgc29ja2V0Lm9ubWVzc2FnZSA9IG9ubWVzc2FnZVxuXG4gIHByb3h5Lm9uKCdjbG9zZScsIGRlc3Ryb3kpXG5cbiAgdmFyIGNvZXJjZVRvQnVmZmVyID0gIW9wdGlvbnMub2JqZWN0TW9kZVxuXG4gIGZ1bmN0aW9uIHNvY2tldFdyaXRlTm9kZShjaHVuaywgZW5jLCBuZXh0KSB7XG4gICAgLy8gYXZvaWQgZXJyb3JzLCB0aGlzIG5ldmVyIGhhcHBlbnMgdW5sZXNzXG4gICAgLy8gZGVzdHJveSgpIGlzIGNhbGxlZFxuICAgIGlmIChzb2NrZXQucmVhZHlTdGF0ZSAhPT0gc29ja2V0Lk9QRU4pIHtcbiAgICAgIG5leHQoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGNvZXJjZVRvQnVmZmVyICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNodW5rID0gbmV3IEJ1ZmZlcihjaHVuaywgJ3V0ZjgnKVxuICAgIH1cbiAgICBzb2NrZXQuc2VuZChjaHVuaywgbmV4dClcbiAgfVxuXG4gIGZ1bmN0aW9uIHNvY2tldFdyaXRlQnJvd3NlcihjaHVuaywgZW5jLCBuZXh0KSB7XG4gICAgaWYgKHNvY2tldC5idWZmZXJlZEFtb3VudCA+IGJ1ZmZlclNpemUpIHtcbiAgICAgIHNldFRpbWVvdXQoc29ja2V0V3JpdGVCcm93c2VyLCBidWZmZXJUaW1lb3V0LCBjaHVuaywgZW5jLCBuZXh0KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGNvZXJjZVRvQnVmZmVyICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNodW5rID0gbmV3IEJ1ZmZlcihjaHVuaywgJ3V0ZjgnKVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBzb2NrZXQuc2VuZChjaHVuaylcbiAgICB9IGNhdGNoKGVycikge1xuICAgICAgcmV0dXJuIG5leHQoZXJyKVxuICAgIH1cblxuICAgIG5leHQoKVxuICB9XG5cbiAgZnVuY3Rpb24gc29ja2V0RW5kKGRvbmUpIHtcbiAgICBzb2NrZXQuY2xvc2UoKVxuICAgIGRvbmUoKVxuICB9XG5cbiAgZnVuY3Rpb24gb25vcGVuKCkge1xuICAgIHN0cmVhbS5zZXRSZWFkYWJsZShwcm94eSlcbiAgICBzdHJlYW0uc2V0V3JpdGFibGUocHJveHkpXG4gICAgc3RyZWFtLmVtaXQoJ2Nvbm5lY3QnKVxuICB9XG5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBzdHJlYW0uZW5kKClcbiAgICBzdHJlYW0uZGVzdHJveSgpXG4gIH1cblxuICBmdW5jdGlvbiBvbmVycm9yKGVycikge1xuICAgIHN0cmVhbS5kZXN0cm95KGVycilcbiAgfVxuXG4gIGZ1bmN0aW9uIG9ubWVzc2FnZShldmVudCkge1xuICAgIHZhciBkYXRhID0gZXZlbnQuZGF0YVxuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIGRhdGEgPSBCdWZmZXIuZnJvbShuZXcgVWludDhBcnJheShkYXRhKSlcbiAgICBlbHNlIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCAndXRmOCcpXG4gICAgcHJveHkucHVzaChkYXRhKVxuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBzb2NrZXQuY2xvc2UoKVxuICB9XG5cbiAgLy8gdGhpcyBpcyB0byBiZSBlbmFibGVkIG9ubHkgaWYgb2JqZWN0TW9kZSBpcyBmYWxzZVxuICBmdW5jdGlvbiB3cml0ZXYgKGNodW5rcywgY2IpIHtcbiAgICB2YXIgYnVmZmVycyA9IG5ldyBBcnJheShjaHVua3MubGVuZ3RoKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2h1bmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rc1tpXS5jaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYnVmZmVyc1tpXSA9IEJ1ZmZlci5mcm9tKGNodW5rc1tpXSwgJ3V0ZjgnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnVmZmVyc1tpXSA9IGNodW5rc1tpXS5jaHVua1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3dyaXRlKEJ1ZmZlci5jb25jYXQoYnVmZmVycyksICdiaW5hcnknLCBjYilcbiAgfVxuXG4gIHJldHVybiBzdHJlYW1cbn1cbiIsIlxudmFyIHdzID0gbnVsbFxuXG5pZiAodHlwZW9mIFdlYlNvY2tldCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd3MgPSBXZWJTb2NrZXRcbn0gZWxzZSBpZiAodHlwZW9mIE1veldlYlNvY2tldCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd3MgPSBNb3pXZWJTb2NrZXRcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd3MgPSB3aW5kb3cuV2ViU29ja2V0IHx8IHdpbmRvdy5Nb3pXZWJTb2NrZXRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3c1xuIiwiLy8gUmV0dXJucyBhIHdyYXBwZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgd3JhcHBlZCBjYWxsYmFja1xuLy8gVGhlIHdyYXBwZXIgZnVuY3Rpb24gc2hvdWxkIGRvIHNvbWUgc3R1ZmYsIGFuZCByZXR1cm4gYVxuLy8gcHJlc3VtYWJseSBkaWZmZXJlbnQgY2FsbGJhY2sgZnVuY3Rpb24uXG4vLyBUaGlzIG1ha2VzIHN1cmUgdGhhdCBvd24gcHJvcGVydGllcyBhcmUgcmV0YWluZWQsIHNvIHRoYXRcbi8vIGRlY29yYXRpb25zIGFuZCBzdWNoIGFyZSBub3QgbG9zdCBhbG9uZyB0aGUgd2F5LlxubW9kdWxlLmV4cG9ydHMgPSB3cmFwcHlcbmZ1bmN0aW9uIHdyYXBweSAoZm4sIGNiKSB7XG4gIGlmIChmbiAmJiBjYikgcmV0dXJuIHdyYXBweShmbikoY2IpXG5cbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCduZWVkIHdyYXBwZXIgZnVuY3Rpb24nKVxuXG4gIE9iamVjdC5rZXlzKGZuKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgd3JhcHBlcltrXSA9IGZuW2tdXG4gIH0pXG5cbiAgcmV0dXJuIHdyYXBwZXJcblxuICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldXG4gICAgfVxuICAgIHZhciByZXQgPSBmbi5hcHBseSh0aGlzLCBhcmdzKVxuICAgIHZhciBjYiA9IGFyZ3NbYXJncy5sZW5ndGgtMV1cbiAgICBpZiAodHlwZW9mIHJldCA9PT0gJ2Z1bmN0aW9uJyAmJiByZXQgIT09IGNiKSB7XG4gICAgICBPYmplY3Qua2V5cyhjYikuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICByZXRba10gPSBjYltrXVxuICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIHJldFxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwibmFtZVwiOiBcInZpZGVvbWFpbC1jbGllbnRcIixcbiAgXCJ2ZXJzaW9uXCI6IFwiMi4xLjE5XCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJBIHdpY2tlZCBucG0gcGFja2FnZSB0byByZWNvcmQgdmlkZW9zIGRpcmVjdGx5IGluIHRoZSBicm93c2VyLCB3b2hvb28hXCIsXG4gIFwiYXV0aG9yXCI6IFwiTWljaGFlbCBIZXViZXJnZXIgPG1pY2hhZWwuaGV1YmVyZ2VyQGJpbmFyeWtpdGNoZW4uY29tPlwiLFxuICBcImNvbnRyaWJ1dG9yc1wiOiBbXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiTWljaGFlbCBIZXViZXJnZXJcIixcbiAgICAgIFwiZW1haWxcIjogXCJtaWNoYWVsLmhldWJlcmdlckBiaW5hcnlraXRjaGVuLmNvbVwiXG4gICAgfVxuICBdLFxuICBcImhvbWVwYWdlXCI6IFwiaHR0cHM6Ly92aWRlb21haWwuaW9cIixcbiAgXCJyZXBvc2l0b3J5XCI6IHtcbiAgICBcInR5cGVcIjogXCJnaXRcIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC1jbGllbnQuZ2l0XCJcbiAgfSxcbiAgXCJsaWNlbnNlXCI6IFwiQ0MwLTEuMFwiLFxuICBcInJlYWRtZUZpbGVuYW1lXCI6IFwiUkVBRE1FLm1kXCIsXG4gIFwibW9kdWxlXCI6IFwic3JjL2luZGV4LmpzXCIsXG4gIFwibWFpblwiOiBcImRpc3QvdmlkZW9tYWlsLWNsaWVudC5qc1wiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwidGVzdFwiOiBcImd1bHAgdGVzdFwiLFxuICAgIFwic3RhcnRcIjogXCJndWxwIGV4YW1wbGVzXCIsXG4gICAgXCJwYXRjaFwiOiBcIi4vZW52L2Rldi9yZWxlYXNlLnNoIC0taW1wb3J0YW5jZT1wYXRjaFwiLFxuICAgIFwibWlub3JcIjogXCIuL2Vudi9kZXYvcmVsZWFzZS5zaCAtLWltcG9ydGFuY2U9bWlub3JcIixcbiAgICBcIm1ham9yXCI6IFwiLi9lbnYvZGV2L3JlbGVhc2Uuc2ggLS1pbXBvcnRhbmNlPW1ham9yXCJcbiAgfSxcbiAgXCJlbmdpbmVzXCI6IHtcbiAgICBcIm5vZGVcIjogXCJeOC4zLjBcIixcbiAgICBcInlhcm5cIjogXCJeMS4xLjBcIlxuICB9LFxuICBcImtleXdvcmRzXCI6IFtcbiAgICBcIndlYmNhbVwiLFxuICAgIFwidmlkZW9cIixcbiAgICBcInZpZGVvbWFpbFwiLFxuICAgIFwiZW5jb2RlclwiLFxuICAgIFwiZ2V0dXNlcm1lZGlhXCIsXG4gICAgXCJhdWRpb1wiLFxuICAgIFwicmVjb3JkZXJcIlxuICBdLFxuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJhZGQtZXZlbnRsaXN0ZW5lci13aXRoLW9wdGlvbnNcIjogXCIxLjI1LjBcIixcbiAgICBcImFuaW1pdHRlclwiOiBcIjMuMC4wXCIsXG4gICAgXCJhdWRpby1zYW1wbGVcIjogXCIxLjAuM1wiLFxuICAgIFwiY2FudmFzLXRvLWJ1ZmZlclwiOiBcIjEuMC45XCIsXG4gICAgXCJjbGFzc2xpc3QuanNcIjogXCIxLjEuMjAxNTAzMTJcIixcbiAgICBcImNvbnRhaW5zXCI6IFwiMC4xLjFcIixcbiAgICBcImNyZWF0ZS1lcnJvclwiOiBcIjAuMy4xXCIsXG4gICAgXCJkZWVwbWVyZ2VcIjogXCIyLjAuMFwiLFxuICAgIFwiZGVmaW5lZFwiOiBcIjEuMC4wXCIsXG4gICAgXCJkZXNwb3RcIjogXCIxLjEuM1wiLFxuICAgIFwiZG9jdW1lbnQtdmlzaWJpbGl0eVwiOiBcIjEuMC4xXCIsXG4gICAgXCJlbGVtZW50LWNsb3Nlc3RcIjogXCIyLjAuMlwiLFxuICAgIFwiZmlsZXNpemVcIjogXCIzLjUuMTBcIixcbiAgICBcImdldC1mb3JtLWRhdGFcIjogXCIxLjIuNVwiLFxuICAgIFwiaGlkZGVuXCI6IFwiMS4xLjFcIixcbiAgICBcImh1bWFuaXplLWR1cmF0aW9uXCI6IFwiMy4xMC4xXCIsXG4gICAgXCJoeXBlcnNjcmlwdFwiOiBcIjIuMC4yXCIsXG4gICAgXCJpbnNlcnQtY3NzXCI6IFwiMi4wLjBcIixcbiAgICBcImlwaG9uZS1pbmxpbmUtdmlkZW9cIjogXCIyLjIuMlwiLFxuICAgIFwiaXMtcG93ZXItb2YtdHdvXCI6IFwiMS4wLjBcIixcbiAgICBcImtleW1pcnJvclwiOiBcIjAuMS4xXCIsXG4gICAgXCJudW1iZXItaXMtaW50ZWdlclwiOiBcIjEuMC4xXCIsXG4gICAgXCJyZWFkeXN0YXRlXCI6IFwiMC4zLjBcIixcbiAgICBcInJlcXVlc3QtZnJhbWVcIjogXCIxLjUuM1wiLFxuICAgIFwic3VwZXJhZ2VudFwiOiBcIjMuNi4zXCIsXG4gICAgXCJ1YS1wYXJzZXItanNcIjogXCIwLjcuMTRcIixcbiAgICBcIndlYnNvY2tldC1zdHJlYW1cIjogXCI1LjAuMVwiXG4gIH0sXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcImJhYmVsLXBvbHlmaWxsXCI6IFwiNi4yNi4wXCIsXG4gICAgXCJiYWJlbC1wcmVzZXQtZW52XCI6IFwiMS42LjBcIixcbiAgICBcImJhYmVsaWZ5XCI6IFwiNy4zLjBcIixcbiAgICBcImJvZHktcGFyc2VyXCI6IFwiMS4xOC4yXCIsXG4gICAgXCJicm93c2VyaWZ5XCI6IFwiMTQuNC4wXCIsXG4gICAgXCJjb25uZWN0LXNlbmQtanNvblwiOiBcIjEuMC4wXCIsXG4gICAgXCJkZWxcIjogXCIzLjAuMFwiLFxuICAgIFwiZ2xvYlwiOiBcIjcuMS4yXCIsXG4gICAgXCJndWxwXCI6IFwiMy45LjFcIixcbiAgICBcImd1bHAtYXV0b3ByZWZpeGVyXCI6IFwiNC4wLjBcIixcbiAgICBcImd1bHAtYnVtcFwiOiBcIjIuOC4wXCIsXG4gICAgXCJndWxwLWJ5dGVkaWZmXCI6IFwiMS4wLjBcIixcbiAgICBcImd1bHAtY29uY2F0XCI6IFwiMi42LjFcIixcbiAgICBcImd1bHAtY29ubmVjdFwiOiBcIjUuMC4wXCIsXG4gICAgXCJndWxwLWNzc25hbm9cIjogXCIyLjEuMlwiLFxuICAgIFwiZ3VscC1kZXJlcXVpcmVcIjogXCIyLjEuMFwiLFxuICAgIFwiZ3VscC1pZlwiOiBcIjIuMC4yXCIsXG4gICAgXCJndWxwLWluamVjdC1zdHJpbmdcIjogXCIxLjEuMFwiLFxuICAgIFwiZ3VscC1sb2FkLXBsdWdpbnNcIjogXCIxLjUuMFwiLFxuICAgIFwiZ3VscC1wbHVtYmVyXCI6IFwiMS4xLjBcIixcbiAgICBcImd1bHAtcmVuYW1lXCI6IFwiMS4yLjJcIixcbiAgICBcImd1bHAtc291cmNlbWFwc1wiOiBcIjIuNi4xXCIsXG4gICAgXCJndWxwLXN0YW5kYXJkXCI6IFwiMTAuMS4xXCIsXG4gICAgXCJndWxwLXN0eWx1c1wiOiBcIjIuNi4wXCIsXG4gICAgXCJndWxwLXRvZG9cIjogXCI1LjQuMFwiLFxuICAgIFwiZ3VscC11Z2xpZnlcIjogXCIzLjAuMFwiLFxuICAgIFwiZ3VscC11dGlsXCI6IFwiMy4wLjhcIixcbiAgICBcIm1pbmltaXN0XCI6IFwiMS4yLjBcIixcbiAgICBcIm5pYlwiOiBcIjEuMS4yXCIsXG4gICAgXCJyb3V0ZXJcIjogXCIxLjMuMlwiLFxuICAgIFwic3NsLXJvb3QtY2FzXCI6IFwiMS4yLjRcIixcbiAgICBcInN0YW5kYXJkXCI6IFwiMTAuMC4zXCIsXG4gICAgXCJ0YXAtc3VtbWFyeVwiOiBcIjQuMC4wXCIsXG4gICAgXCJ0YXBlXCI6IFwiNC44LjBcIixcbiAgICBcInRhcGUtY2F0Y2hcIjogXCIxLjAuNlwiLFxuICAgIFwidGFwZS1ydW5cIjogXCIzLjAuMFwiLFxuICAgIFwidmlueWwtYnVmZmVyXCI6IFwiMS4wLjBcIixcbiAgICBcInZpbnlsLXNvdXJjZS1zdHJlYW1cIjogXCIxLjEuMFwiLFxuICAgIFwid2F0Y2hpZnlcIjogXCIzLjkuMFwiXG4gIH1cbn1cbiIsImltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnZGVlcG1lcmdlJ1xuaW1wb3J0IHJlYWR5c3RhdGUgZnJvbSAncmVhZHlzdGF0ZSdcbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnXG5cbmltcG9ydCBkZWZhdWx0T3B0aW9ucyBmcm9tICcuL29wdGlvbnMnXG5pbXBvcnQgQ29uc3RhbnRzIGZyb20gJy4vY29uc3RhbnRzJ1xuaW1wb3J0IEV2ZW50cyBmcm9tICcuL2V2ZW50cydcbmltcG9ydCBDb2xsZWN0TG9nZ2VyIGZyb20gJy4vdXRpbC9jb2xsZWN0TG9nZ2VyJ1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuL3V0aWwvZXZlbnRFbWl0dGVyJ1xuaW1wb3J0IENvbnRhaW5lciBmcm9tICcuL3dyYXBwZXJzL2NvbnRhaW5lcidcbmltcG9ydCBSZXBsYXkgZnJvbSAnLi93cmFwcGVycy92aXN1YWxzL3JlcGxheSdcbmltcG9ydCBPcHRpb25zV3JhcHBlciBmcm9tICcuL3dyYXBwZXJzL29wdGlvbnNXcmFwcGVyJ1xuaW1wb3J0IEJyb3dzZXIgZnJvbSAnLi91dGlsL2Jyb3dzZXInXG5pbXBvcnQgUmVzb3VyY2UgZnJvbSAnLi9yZXNvdXJjZSdcblxudmFyIGNvbGxlY3RMb2dnZXJcbnZhciBicm93c2VyXG5cbmZ1bmN0aW9uIGFkanVzdE9wdGlvbnMgKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBsb2NhbE9wdGlvbnMgPSBkZWVwbWVyZ2UoZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpXG5cbiAgY29sbGVjdExvZ2dlciA9IGNvbGxlY3RMb2dnZXIgfHwgbmV3IENvbGxlY3RMb2dnZXIobG9jYWxPcHRpb25zKVxuXG4gIGxvY2FsT3B0aW9ucy5sb2dnZXIgPSBjb2xsZWN0TG9nZ2VyXG4gIGxvY2FsT3B0aW9ucy5kZWJ1ZyA9IGxvY2FsT3B0aW9ucy5sb2dnZXIuZGVidWdcblxuICBPcHRpb25zV3JhcHBlci5hZGRGdW5jdGlvbnMobG9jYWxPcHRpb25zKVxuXG4gIHJldHVybiBsb2NhbE9wdGlvbnNcbn1cblxuZnVuY3Rpb24gZ2V0QnJvd3NlciAobG9jYWxPcHRpb25zKSB7XG4gIGlmICghYnJvd3Nlcikge1xuICAgIGJyb3dzZXIgPSBuZXcgQnJvd3Nlcihsb2NhbE9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gYnJvd3NlclxufVxuXG5jb25zdCBWaWRlb21haWxDbGllbnQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBjb25zdCBsb2NhbE9wdGlvbnMgPSBhZGp1c3RPcHRpb25zKG9wdGlvbnMpXG4gIGNvbnN0IGNvbnRhaW5lciA9IG5ldyBDb250YWluZXIobG9jYWxPcHRpb25zKVxuICBjb25zdCBkZWJ1ZyA9IGxvY2FsT3B0aW9ucy5kZWJ1Z1xuXG4gIHZhciByZXBsYXlcblxuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzLCBsb2NhbE9wdGlvbnMsICdWaWRlb21haWxDbGllbnQnKVxuXG4gIC8vIGV4cG9zZSBhbGwgcG9zc2libGUgZXZlbnRzXG4gIHRoaXMuZXZlbnRzID0gRXZlbnRzXG5cbiAgZnVuY3Rpb24gYnVpbGQgKCkge1xuICAgIHZhciBidWlsZGluZyA9IGZhbHNlXG5cbiAgICByZWFkeXN0YXRlLmludGVyYWN0aXZlKGZ1bmN0aW9uIChwcmV2aW91c1N0YXRlKSB7XG4gICAgICBkZWJ1ZyhcbiAgICAgICAgJ0NsaWVudDogaW50ZXJhY3RpdmUoKSwnLFxuICAgICAgICAncHJldmlvdXNTdGF0ZSA9JywgcHJldmlvdXNTdGF0ZSArICcsJyxcbiAgICAgICAgJyFidWlsZGluZyA9JywgIWJ1aWxkaW5nICsgJywnLFxuICAgICAgICAnIWlzQnVpbHQoKSA9JywgIWNvbnRhaW5lci5pc0J1aWx0KClcbiAgICAgIClcblxuICAgICAgLy8gaXQgY2FuIGhhcHBlbiB0aGF0IGl0IGdldHMgY2FsbGVkIHR3aWNlLCBpLkUuIHdoZW4gYW4gZXJyb3IgaXMgdGhyb3duXG4gICAgICAvLyBpbiB0aGUgbWlkZGxlIG9mIHRoZSBidWlsZCgpIGZuXG4gICAgICBpZiAoIWJ1aWxkaW5nICYmICFjb250YWluZXIuaXNCdWlsdCgpKSB7XG4gICAgICAgIGJ1aWxkaW5nID0gdHJ1ZVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnRhaW5lci5idWlsZCgpXG4gICAgICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgICAgIHRocm93IGV4Y1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGJ1aWxkaW5nID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB0aGlzLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNvbnRhaW5lci5pc0J1aWx0KCkpIHtcbiAgICAgIGNvbnRhaW5lci5zaG93KClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbmNlKEV2ZW50cy5CVUlMVCwgY29udGFpbmVyLnNob3cpXG4gICAgfVxuICB9XG5cbiAgLy8gYXV0b21hdGljYWxseSBhZGRzIGEgPHZpZGVvPiBlbGVtZW50IGluc2lkZSB0aGUgZ2l2ZW4gcGFyZW50RWxlbWVudCBhbmQgbG9hZHNcbiAgLy8gaXQgd2l0aCB0aGUgdmlkZW9tYWlsXG4gIHRoaXMucmVwbGF5ID0gZnVuY3Rpb24gKHZpZGVvbWFpbCwgcGFyZW50RWxlbWVudCkge1xuICAgIGZ1bmN0aW9uIGJ1aWxkUmVwbGF5ICgpIHtcbiAgICAgIGlmICh0eXBlb2YgcGFyZW50RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGFyZW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBhcmVudEVsZW1lbnQpXG4gICAgICB9XG5cbiAgICAgIGlmICghcGFyZW50RWxlbWVudCkge1xuICAgICAgICBpZiAoIWNvbnRhaW5lci5pc0J1aWx0KCkpIHtcbiAgICAgICAgICAvLyB0aGlzIHdpbGwgdHJ5IGJ1aWxkIGFsbCBvdmVyIGFnYWluXG4gICAgICAgICAgY29udGFpbmVyLmJ1aWxkKClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY29udGFpbmVyLmhhc0VsZW1lbnQoKSkge1xuICAgICAgICAgIC8vIGlmIGNvbnRhaW5lci5zZXRFbGVtZW50KCkgZmFpbGVkIHRvbywgdGhlbiBjb21wbGFpblxuICAgICAgICAgIHJlYWR5c3RhdGUucmVtb3ZlQWxsTGlzdGVuZXJzKClcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byByZXBsYXkgdmlkZW8gd2l0aG91dCBhIGNvbnRhaW5lciBub3IgcGFyZW50IGVsZW1lbnQuJylcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNvbnRhaW5lci5pc091dHNpZGVFbGVtZW50T2YocGFyZW50RWxlbWVudCkpIHtcbiAgICAgICAgICByZXBsYXkgPSBuZXcgUmVwbGF5KHBhcmVudEVsZW1lbnQsIGxvY2FsT3B0aW9ucylcbiAgICAgICAgICByZXBsYXkuYnVpbGQoKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghcmVwbGF5KSB7XG4gICAgICAgIHJlcGxheSA9IGNvbnRhaW5lci5nZXRSZXBsYXkoKVxuICAgICAgfVxuXG4gICAgICBpZiAoIXBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgcGFyZW50RWxlbWVudCA9IHJlcGxheS5nZXRQYXJlbnRFbGVtZW50KClcbiAgICAgIH1cblxuICAgICAgaWYgKHZpZGVvbWFpbCkge1xuICAgICAgICB2aWRlb21haWwgPSBjb250YWluZXIuYWRkUGxheWVyRGltZW5zaW9ucyh2aWRlb21haWwsIHBhcmVudEVsZW1lbnQpXG4gICAgICB9XG5cbiAgICAgIGlmIChjb250YWluZXIuaXNPdXRzaWRlRWxlbWVudE9mKHBhcmVudEVsZW1lbnQpKSB7XG4gICAgICAgIC8vIHJlcGxheSBlbGVtZW50IG11c3QgYmUgb3V0c2lkZSBvZiB0aGUgY29udGFpbmVyXG4gICAgICAgIGNvbnRhaW5lci5oaWRlRm9ybSh7ZGVlcDogdHJ1ZX0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250YWluZXIubG9hZEZvcm0odmlkZW9tYWlsKVxuICAgICAgfVxuXG4gICAgICAvLyBzbGlnaHQgZGVsYXkgbmVlZGVkIHRvIGF2b2lkIEhUVFAgNDE2IGVycm9ycyAocmVxdWVzdCByYW5nZSB1bmF2YWlsYWJsZSlcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXBsYXkuc2V0VmlkZW9tYWlsKHZpZGVvbWFpbClcbiAgICAgICAgY29udGFpbmVyLnNob3dSZXBsYXlPbmx5KClcbiAgICAgIH0sIDEwZTIpIC8vIG5vdCBzdXJlLCBidXQgcHJvYmFibHkgY2FuIGJlIHJlZHVjZWQgYSBiaXRcbiAgICB9XG5cbiAgICByZWFkeXN0YXRlLmludGVyYWN0aXZlKGJ1aWxkUmVwbGF5KVxuICB9XG5cbiAgdGhpcy5zdGFydE92ZXIgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgaWYgKHJlcGxheSkge1xuICAgICAgcmVwbGF5LmhpZGUoKVxuICAgICAgcmVwbGF5LnJlc2V0KClcbiAgICB9XG5cbiAgICBjb250YWluZXIuc3RhcnRPdmVyKHBhcmFtcylcbiAgfVxuXG4gIHRoaXMudW5sb2FkID0gZnVuY3Rpb24gKGUpIHtcbiAgICByZWFkeXN0YXRlLnJlbW92ZUFsbExpc3RlbmVycygpXG4gICAgY29udGFpbmVyLnVubG9hZChlKVxuICB9XG5cbiAgdGhpcy5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnRhaW5lci5oaWRlKClcbiAgfVxuXG4gIHRoaXMuZ2V0ID0gZnVuY3Rpb24gKGtleSwgY2IpIHtcbiAgICBuZXcgUmVzb3VyY2UobG9jYWxPcHRpb25zKS5nZXQoa2V5LCBmdW5jdGlvbiAoZXJyLCB2aWRlb21haWwpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY2IoZXJyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2IobnVsbCwgY29udGFpbmVyLmFkZFBsYXllckRpbWVuc2lvbnModmlkZW9tYWlsKSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgdGhpcy5jYW5SZWNvcmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldEJyb3dzZXIobG9jYWxPcHRpb25zKS5jYW5SZWNvcmQoKVxuICB9XG5cbiAgLy8gcmV0dXJuIHRydWUgd2hlbiBhIHZpZGVvIGhhcyBiZWVuIHJlY29yZGVkIGJ1dCBpcyBub3Qgc2VudCB5ZXRcbiAgdGhpcy5pc0RpcnR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjb250YWluZXIuaXNEaXJ0eSgpXG4gIH1cblxuICB0aGlzLnN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb250YWluZXIuc3VibWl0KClcbiAgfVxuXG4gIHRoaXMuZ2V0TG9nTGluZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGxvY2FsT3B0aW9ucy5sb2dnZXIgJiYgbG9jYWxPcHRpb25zLmxvZ2dlci5nZXRMaW5lcykge1xuICAgICAgcmV0dXJuIGxvY2FsT3B0aW9ucy5sb2dnZXIuZ2V0TGluZXMoKVxuICAgIH1cbiAgfVxuXG4gIGJ1aWxkKClcbn1cblxudXRpbC5pbmhlcml0cyhWaWRlb21haWxDbGllbnQsIEV2ZW50RW1pdHRlcilcblxuT2JqZWN0LmtleXMoQ29uc3RhbnRzLnB1YmxpYykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICBWaWRlb21haWxDbGllbnRbbmFtZV0gPSBDb25zdGFudHMucHVibGljW25hbWVdXG59KVxuXG4vLyBqdXN0IGFub3RoZXIgY29udmVuaWVudCB0aGluZ1xuVmlkZW9tYWlsQ2xpZW50LmV2ZW50cyA9IEV2ZW50c1xuXG5leHBvcnQgZGVmYXVsdCBWaWRlb21haWxDbGllbnRcbiIsIi8vIGNvbnN0YW50cyAoY2hhbmdpbmcgdGhlc2Ugb25seSBicmVhayBkb3duIGZ1bmN0aW9uYWxpdHksIHNvIGJlIGNhcmVmdWwpXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgU0lURV9OQU1FX0xBQkVMOiAneC12aWRlb21haWwtc2l0ZS1uYW1lJyxcbiAgVkVSU0lPTl9MQUJFTDogJ3ZpZGVvbWFpbENsaWVudFZlcnNpb24nLFxuXG4gIHB1YmxpYzoge1xuICAgIEVOQ19UWVBFX0FQUF9KU09OOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgRU5DX1RZUEVfRk9STTogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgfVxufVxuIiwiaW1wb3J0IGtleW1pcnJvciBmcm9tICdrZXltaXJyb3InXG5cbmV4cG9ydCBkZWZhdWx0IGtleW1pcnJvcih7XG4gIEJVSUxUOiBudWxsLCAvLyBhbGwgZG9tIGVsZW1lbnRzIGFyZSByZWFkeSwgYXJlIGluIHRoZSBET01cbiAgRk9STV9SRUFEWTogbnVsbCwgLy8gZm9ybSBpcyByZWFkeSwgYXZhaWxhYmxlIGluIHRoZSBET01cbiAgTE9BRElOR19VU0VSX01FRElBOiBudWxsLCAvLyBhc2tpbmcgZm9yIHdlYmNhbSBhY2Nlc3NcbiAgVVNFUl9NRURJQV9SRUFEWTogbnVsbCwgLy8gdXNlciBtZWRpYSAoPSB3ZWJjYW0pIGlzIHJlYWR5LCBsb2FkZWRcbiAgQ09OTkVDVElORzogbnVsbCwgLy8gc29ja2V0IGlzIGNvbm5lY3RpbmcgdG8gc2VydmVyXG4gIENPTk5FQ1RFRDogbnVsbCwgLy8gc29ja2V0IGlzIGNvbm5lY3RlZCB0byBzZXJ2ZXJcbiAgRElTQ09OTkVDVEVEOiBudWxsLCAvLyBzb2NrZXQgdG8gc2VydmVyIGlzIGRpc2Nvbm5lY3RlZFxuICBDT1VOVERPV046IG51bGwsIC8vIGNvdW50ZG93biBmb3IgcmVjb3JkaW5nIGhhcyBzdGFydGVkXG4gIFJFQ09SRElORzogbnVsbCwgLy8gd2ViY2FtIGlzIHJlY29yZGluZ1xuICBTVE9QUElORzogbnVsbCwgLy8gcmVjb3JkaW5nIGlzIGJlaW5nIHN0b3BwZWQgKD0gcHJldmlldylcbiAgUFJPR1JFU1M6IG51bGwsIC8vIHN0YXJ0IHNlbmRpbmdcbiAgQkVHSU5fQVVESU9fRU5DT0RJTkc6IG51bGwsIC8vIGVuY29kaW5nIHZpZGVvXG4gIEJFR0lOX1ZJREVPX0VOQ09ESU5HOiBudWxsLCAvLyBlbmNvZGluZyB2aWRlb1xuICBSRVNFVFRJTkc6IG51bGwsIC8vIHJlc2V0dGluZyBldmVyeXRoaW5nIHRvIGdvIGJhY2sgdG8gaW5pdGlhbCBzdGF0ZVxuICBQQVVTRUQ6IG51bGwsIC8vIHJlY29yZGluZyBpcyBiZWluZyBwYXVzZWRcbiAgUkVTVU1JTkc6IG51bGwsIC8vIHJlY29yZGluZyBpcyByZXN1bWVkXG4gIFBSRVZJRVc6IG51bGwsIC8vIHZpZGVvIHByZXZpZXcgaXMgc2V0XG4gIFBSRVZJRVdfU0hPV046IG51bGwsIC8vIHZpZGVvIHByZXZpZXcgaXMgc2hvd25cbiAgUkVQTEFZX1NIT1dOOiBudWxsLCAvLyBzdWJtaXR0ZWQgdmlkZW8gaXMgc2hvd25cbiAgSU5WQUxJRDogbnVsbCwgLy8gZm9ybSBpcyBpbnZhbGlkXG4gIFZBTElEQVRJTkc6IG51bGwsIC8vIGZvcm0gaXMgYmVpbmcgdmFsaWRhdGVkXG4gIFZBTElEOiBudWxsLCAvLyBmb3JtIGlzIHZhbGlkXG4gIFNVQk1JVFRJTkc6IG51bGwsIC8vIGZvcm0gaXMgYmVpbmcgc3VibWl0dGVkXG4gIFNVQk1JVFRFRDogbnVsbCwgLy8gZm9ybSBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgc3VibWl0dGVkXG4gIEVSUk9SOiBudWxsLCAvLyBhbiBlcnJvciBvY2N1cmVkXG4gIEJMT0NLSU5HOiBudWxsLCAvLyBzb21ldGhpbmcgc2VyaW91cywgbW9zdCBsaWtlbHkgYW4gZXJyb3IsIGlzIHNob3duIGFuZCBibG9ja3NcbiAgU0VORElOR19GSVJTVF9GUkFNRTogbnVsbCwgLy8gZW1pdHRlZCBiZWZvcmUgdGhlIGZpcnN0IGZyYW1lIGlzIGJlaW5nIGNvbXB1dGVkXG4gIEZJUlNUX0ZSQU1FX1NFTlQ6IG51bGwsIC8vIGVtaXR0ZWQgb25jZSB3aGVuIGZpc3QgZnJhbWUgaGFzIGJlZW4gc2VudCB0byBzZXJ2ZXJcbiAgSElERTogbnVsbCwgLy8gZW1pdHRlZCB3aGVuIGhpZGRlblxuICBOT1RJRllJTkc6IG51bGwsIC8vIG5vdGlmaWVzIHVzZXIgYWJvdXQgc29tZXRoaW5nIChub3QgYmxvY2tpbmcpXG4gIEVOQUJMSU5HX0FVRElPOiBudWxsLCAvLyBhYm91dCB0byBlbmFibGUgYXVkaW9cbiAgRElTQUJMSU5HX0FVRElPOiBudWxsLCAvLyBhYm91dCB0byBkaXNhYmxlIGF1ZGlvXG4gIExPQURFRF9NRVRBX0RBVEE6IG51bGwsIC8vIHJhaXNlZCB3aGVuIHdlYmNhbSBrbm93cyBpdHMgZGltZW5zaW9uc1xuICBFVkVOVF9FTUlUVEVEOiBudWxsLCAvLyBmb3IgZGVidWdnaW5nIG9ubHksIGlzIGVtaXR0ZWQgd2hlbiBhbiBldmVudCBpcyBlbWl0dGVkIGxvbCxcbiAgR09JTkdfQkFDSzogbnVsbCwgLy8gc3dpdGNoIGZyb20gcmVwbGF5aW5nIGJhY2sgdG8gcmVjb3JkaW5nXG4gIFNUQVJUSU5HX09WRVI6IG51bGwsIC8vIHN0YXJ0aW5nIGFsbCBvdmVyIGFnYWluIGJhY2sgdG8gaXRzIGluaXRhbCBzdGF0ZVxuICBBU0tJTkdfV0VCQ0FNX1BFUk1JU1NJT046IG51bGwsIC8vIHdoZW4gYWJvdXQgdG8gYXNrIGZvciB3ZWJjYW0gcGVybWlzc2lvbnNcbiAgVklTSUJMRTogbnVsbCwgLy8gZG9jdW1lbnQganVzdCBiZWNhbWUgdmlzaWJsZVxuICBJTlZJU0lCTEU6IG51bGwgIC8vIGRvY3VtZW50IGp1c3QgYmVjYW1lIElOdmlzaWJsZVxufSlcbiIsImltcG9ydCB7dmVyc2lvbn0gZnJvbSAnLi4vcGFja2FnZS5qc29uJ1xuXG5jb25zdCBQUk9EVUNUSU9OID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvZ2dlcjogbnVsbCwgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmaW5lIGxvZ2dpbmcgaW5zdGFuY2UuIGxlYXZlIG51bGwgZm9yIGRlZmF1bHQsIGNvbnNvbGUuXG4gIGxvZ1N0YWNrU2l6ZTogMzAsICAgICAgICAgICAgICAgICAgICAgLy8gbGltaXRzIHRoZSBzdGFjayBzaXplIG9mIGxvZyBvdXRwdXRzIHRvIGNvbGxlY3RcbiAgdmVyYm9zZTogIVBST0RVQ1RJT04sICAgICAgICAgICAgICAgICAvLyBzZXQgdHJ1ZSB0byBsb2cgbW9yZSBpbmZvXG4gIGJhc2VVcmw6ICdodHRwczovL3ZpZGVvbWFpbC5pbycsICAgICAgLy8gbGVhdmUgYXMgaXQsIHBlcm1hbmVudCB1cmwgdG8gcG9zdCB2aWRlb3NcbiAgc29ja2V0VXJsOiAnd3NzOi8vdmlkZW9tYWlsLmlvJywgICAgICAvLyBsZWF2ZSBhcyBpdCwgcGVybWFuZW50IHVybCB0byBzZW5kIGZyYW1lc1xuICBzaXRlTmFtZTogJ3ZpZGVvbWFpbC1jbGllbnQtZGVtbycsICAgIC8vIFJlcXVpcmVkIGZvciBBUEksIHVzZSBodHRwczovL3ZpZGVvbWFpbC5pby93aGl0ZWxpc3RcbiAgY2FjaGU6IHRydWUsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZWR1Y2VzIEdFVCBxdWVyaWVzIHdoZW4gbG9hZGluZyB2aWRlb3NcbiAgaW5zZXJ0Q3NzOiB0cnVlLCAgICAgICAgICAgICAgICAgICAgICAvLyBpbnNlcnRzIHByZWRlZmluZWQgQ1NTLCBzZWUgZXhhbXBsZXNcbiAgZW5hYmxlUGF1c2U6IHRydWUsICAgICAgICAgICAgICAgICAgICAvLyBlbmFibGUgcGF1c2UvcmVzdW1lIGJ1dHRvblxuICBlbmFibGVBdXRvUGF1c2U6IHRydWUsICAgICAgICAgICAgICAgIC8vIGF1dG9tYXRpY2FsbHkgcGF1c2VzIHdoZW4gd2luZG93IGJlY29tZXMgaW5hY3RpdmVcbiAgZW5hYmxlU3BhY2U6IHRydWUsICAgICAgICAgICAgICAgICAgICAvLyBoaXR0aW5nIHNwYWNlIGNhbiBwYXVzZSByZWNvcmRpbmdcbiAgZGlzYWJsZVN1Ym1pdDogZmFsc2UsICAgICAgICAgICAgICAgICAvLyBzZXQgdGhpcyB0byB0cnVlIGlmIHlvdSBkbyBub3Qgd2FudCB0byBzdWJtaXQgdmlkZW9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBqdXN0IHdhbnQgdG8gcmVjb3JkIGFuZCByZXBsYXkgdGhlc2UgdGVtcG9yYXJpbHlcbiAgZW5hYmxlQXV0b1ZhbGlkYXRpb246IHRydWUsICAgICAgICAgICAvLyBhdXRvbWF0aWNhbGx5IHZhbGlkYXRlcyBhbGwgZm9ybSBpbnB1dHMgaWYgYW55IGV4aXN0IGFuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvZXMgbm90IC9lbmFibGUgZGlzYWJsZSBzdWJtaXQgYnV0dG9uIGFmdGVyIHJlY29yZGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gc29tZXRoaW5nIGVsc2Ugc2VlbXMgaW52YWxpZC5cblxuICBlbmN0eXBlOiAnYXBwbGljYXRpb24vanNvbicsICAgICAgICAgIC8vIGVuY3R5cGUgZm9yIHRoZSBmb3JtIHN1Ym1pc3Npb24uIGN1cnJlbnRseSBpbXBsZW1lbnRlZCBhcmU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gJ2FwcGxpY2F0aW9uL2pzb24nIGFuZCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xuXG4gIC8vIGRlZmF1bHQgQ1NTIHNlbGVjdG9ycyB5b3UgY2FuIGFsdGVyLCBzZWUgZXhhbXBsZXNcbiAgc2VsZWN0b3JzOiB7XG4gICAgY29udGFpbmVySWQ6ICd2aWRlb21haWwnLFxuICAgIHJlcGxheUNsYXNzOiAncmVwbGF5JyxcbiAgICB1c2VyTWVkaWFDbGFzczogJ3VzZXJNZWRpYScsXG4gICAgdmlzdWFsc0NsYXNzOiAndmlzdWFscycsXG4gICAgYnV0dG9uQ2xhc3M6IG51bGwsICAgICAgICAgICAgICAgICAgLy8gY2FuIGFsc28gYmUgdXNlZCBhcyBhIGRlZmF1bHQgY2xhc3MgZm9yIGFsbCBidXR0b25zXG4gICAgYnV0dG9uc0NsYXNzOiAnYnV0dG9ucycsXG5cbiAgICByZWNvcmRCdXR0b25DbGFzczogJ3JlY29yZCcsXG4gICAgcGF1c2VCdXR0b25DbGFzczogJ3BhdXNlJyxcbiAgICByZXN1bWVCdXR0b25DbGFzczogJ3Jlc3VtZScsXG4gICAgcHJldmlld0J1dHRvbkNsYXNzOiAncHJldmlldycsXG4gICAgcmVjb3JkQWdhaW5CdXR0b25DbGFzczogJ3JlY29yZEFnYWluJyxcbiAgICBzdWJtaXRCdXR0b25DbGFzczogJ3N1Ym1pdCcsXG5cbiAgICBzdWJqZWN0SW5wdXROYW1lOiAnc3ViamVjdCcsICAgICAgICAgLy8gdGhlIGZvcm0gaW5wdXQgbmFtZSBmb3Igc3ViamVjdFxuICAgIGZyb21JbnB1dE5hbWU6ICdmcm9tJywgICAgICAgICAgICAgICAvLyB0aGUgZm9ybSBpbnB1dCBuYW1lIGZvciB0aGUgZnJvbSBlbWFpbFxuICAgIHRvSW5wdXROYW1lOiAndG8nLCAgICAgICAgICAgICAgICAgICAvLyB0aGUgZm9ybSBpbnB1dCBuYW1lIGZvciB0aGUgdG8gZW1haWxcbiAgICBib2R5SW5wdXROYW1lOiAnYm9keScsICAgICAgICAgICAgICAgLy8gdGhlIGZvcm0gaW5wdXQgbmFtZSBmb3IgdGhlIG1lc3NhZ2UgKGJvZHkpXG5cbiAgICBrZXlJbnB1dE5hbWU6ICd2aWRlb21haWxfa2V5JyxcbiAgICBwYXJlbnRLZXlJbnB1dE5hbWU6ICd2aWRlb21haWxfcGFyZW50X2tleScsXG4gICAgYWxpYXNJbnB1dE5hbWU6ICd2aWRlb21haWxfYWxpYXMnLFxuXG4gICAgZm9ybUlkOiBudWxsLCAgICAgICAgICAgICAgICAgICAgIC8vIGF1dG9tYXRpY2FsbHkgZGV0ZWN0cyBmb3JtIGlmIGFueVxuICAgIHN1Ym1pdEJ1dHRvbklkOiBudWxsLCAgICAgICAgICAgICAvLyBzZW1pLWF1dG9tYXRpY2FsbHkgZGV0ZWN0cyBzdWJtaXQgYnV0dG9uIGluIHRoZSBmb3JtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBpZiB0aGF0IGRvZXMgbm90IHdvcmssIHRyeSB1c2luZyB0aGVcbiAgICBzdWJtaXRCdXR0b25TZWxlY3RvcjogbnVsbCAgICAgICAgLy8gc3VibWl0QnV0dG9uU2VsZWN0b3JcbiAgfSxcblxuICBhdWRpbzoge1xuICAgIGVuYWJsZWQ6IGZhbHNlLCAgICAgICAgICAgICAgICAgICAvLyBzZXQgdG8gdHJ1ZSBmb3IgZXhwZXJpbWVudGlhbCBhdWRpbyByZWNvcmRpbmdcbiAgICAnc3dpdGNoJzogZmFsc2UsICAgICAgICAgICAgICAgICAgLy8gZW5hYmxlcyBhIHN3aXRjaGVyIGZvciBhdWRpbyByZWNvcmRpbmcgKG9uL29mZilcbiAgICB2b2x1bWU6IDAuMiwgICAgICAgICAgICAgICAgICAgICAgLy8gbXVzdCBiZSBiZXR3ZWVuIDAgLi4gMSBidXQgMC4yMCBpcyByZWNvbW1lZGVkIHRvIGF2b2lkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRpc3RvcnRpbmcgYXQgdGhlIGhpZ2hlciB2b2x1bWUgcGVha3NcbiAgICBidWZmZXJTaXplOiAxMDI0ICAgICAgICAgICAgICAgICAgLy8gZGVjaWRlcyBob3cgb2Z0ZW4gdGhlIGF1ZGlvIGlzIGJlaW5nIHNhbXBsZWQsIG11c3QgYmUgYSBwb3dlciBvZiB0d28uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBoaWdoZXIgdGhlIGxlc3MgdHJhZmZpYywgYnV0IGhhcmRlciB0byBhZGp1c3Qgd2l0aCBydWJiZXJiYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIG1hdGNoIHdpdGggdGhlIHZpZGVvIGxlbmd0aCBvbiBzZXJ2ZXIgc2lkZSBkdXJpbmcgZW5jb2RpbmdcbiAgfSxcblxuICB2aWRlbzoge1xuICAgIGZwczogMTUsICAgICAgICAgICAgICAgICAgICAvLyBkZXBlbmRzIG9uIHlvdXIgY29ubmVjdGlvblxuICAgIGxpbWl0U2Vjb25kczogMzAsICAgICAgICAgICAvLyByZWNvcmRpbmcgYXV0b21hdGljYWxseSBzdG9wcyBhZnRlciB0aGF0IGxpbWl0XG4gICAgY291bnRkb3duOiAzLCAgICAgICAgICAgICAgIC8vIHNldCBpdCB0byAwIG9yIGZhbHNlIHRvIGRpc2FibGUgaXRcblxuICAgIC8vIGl0IGlzIHJlY29tbWVuZGVkIHRvIHNldCBvbmUgZGltZW5zaW9uIG9ubHkgYW5kIGxlYXZlIHRoZSBvdGhlciBvbmUgdG8gYXV0b1xuICAgIC8vIGJlY2F1c2UgZWFjaCB3ZWJjYW0gaGFzIGEgZGlmZmVyZW50IGFzcGVjdCByYXRpb1xuXG4gICAgd2lkdGg6ICdhdXRvJywgICAgICAvLyBvciB1c2UgYW4gaW50ZWdlciBmb3IgZXhhY3QgcGl4ZWxzXG4gICAgaGVpZ2h0OiAnYXV0bycgICAgICAvLyBvciB1c2UgYW4gaW50ZWdlciBmb3IgZXhhY3QgcGl4ZWxzXG4gIH0sXG5cbiAgaW1hZ2U6IHtcbiAgICBxdWFsaXR5OiAwLjQ0LFxuICAgIHR5cGVzOiBbJ3dlYnAnLCAnanBlZyddICAgLy8gcmVjb21tZW5kZWQgc2V0dGluZ3MgdG8gbWFrZSBtb3N0IG9mIGFsbCBicm93c2Vyc1xuICB9LFxuXG4gIC8vIGFsdGVyIHRoZXNlIHRleHQgZm9yIGludGVybmF0aW9uYWxpc2F0aW9uXG4gIHRleHQ6IHtcbiAgICBwYXVzZWRIZWFkZXI6ICdQYXVzZWQnLFxuICAgIHBhdXNlZEhpbnQ6IG51bGwsXG4gICAgc2VuZGluZzogJ1RlbGVwb3J0aW5nJyxcbiAgICBlbmNvZGluZzogJ0VuY29kaW5nJyxcbiAgICBsaW1pdFJlYWNoZWQ6ICdMaW1pdCByZWFjaGVkJyxcbiAgICBidXR0b25zOiB7XG4gICAgICAncmVjb3JkJzogJ1JlY29yZCB2aWRlbycsXG4gICAgICAncmVjb3JkQWdhaW4nOiAnUmVjb3JkIGFnYWluJyxcbiAgICAgICdyZXN1bWUnOiAnUmVzdW1lJyxcbiAgICAgICdwYXVzZSc6ICdQYXVzZScsXG4gICAgICAncHJldmlldyc6ICdQcmV2aWV3J1xuICAgIH1cbiAgfSxcblxuICBub3RpZmllcjoge1xuICAgIGVudGVydGFpbjogZmFsc2UsICAgLy8gd2hlbiB0cnVlLCB1c2VyIGlzIGVudGVydGFpbmVkIHdoaWxlIHdhaXRpbmcsIHNlZSBleGFtcGxlc1xuICAgIGVudGVydGFpbkNsYXNzOiAnYmcnLFxuICAgIGVudGVydGFpbkxpbWl0OiA2LFxuICAgIGVudGVydGFpbkludGVydmFsOiA5MDAwXG4gIH0sXG5cbiAgdGltZW91dHM6IHtcbiAgICB1c2VyTWVkaWE6IDIwZTMsICAgICAgICAgLy8gaW4gbWlsbGlzZWNvbmRzLCBpbmNyZWFzZSBpZiB5b3Ugd2FudCB1c2VyIGdpdmUgbW9yZSB0aW1lIHRvIGVuYWJsZSB3ZWJjYW1cbiAgICBjb25uZWN0aW9uOiAxZTQsICAgICAgICAgLy8gaW4gc2Vjb25kcywgaW5jcmVhc2UgaWYgYXBpIGlzIHNsb3dcbiAgICBwaW5nSW50ZXJ2YWw6IDQ1ZTMgICAgICAgLy8gaW4gbWlsbGlzZWNvbmRzLCBrZWVwcyB3ZWJzdHJlYW0gKGNvbm5lY3Rpb24pIGFsaXZlIHdoZW4gcGF1c2luZ1xuICB9LFxuXG4gIGNhbGxiYWNrczoge1xuICAgIC8vIGEgY3VzdG9tIGNhbGxiYWNrIHRvIHR3ZWFrIGZvcm0gZGF0YSBiZWZvcmUgcG9zdGluZyB0byBzZXJ2ZXJcbiAgICAvLyB0aGlzIGlzIGZvciBhZHZhbmNlZCB1c2Ugb25seSBhbmQgc2hvdWxkbid0IGJlIHVzZWQgaWYgcG9zc2libGVcbiAgICBhZGp1c3RGb3JtRGF0YUJlZm9yZVBvc3Rpbmc6IG51bGxcbiAgfSxcblxuICBkZWZhdWx0czoge1xuICAgIGZyb206IG51bGwsICAgICAgIC8vIGRlZmluZSBkZWZhdWx0IEZST00gZW1haWwgYWRkcmVzc1xuICAgIHRvOiBudWxsLCAgICAgICAgIC8vIGRlZmluZSBkZWZhdWx0IFRPIGVtYWlsIGFkZHJlc3NcbiAgICBzdWJqZWN0OiBudWxsLCAgICAvLyBkZWZpbmUgZGVmYXVsdCBzdWJqZWN0IGxpbmVcbiAgICBib2R5OiBudWxsICAgICAgICAvLyBkZWZpbmUgZGVmYXVsdCBib2R5IGNvbnRlbnRcbiAgfSxcblxuICAvLyBhIHNwZWNpYWwgZmxhZyB0byBpbmRpY2F0ZSB0aGF0IGV2ZXJ5dGhpbmcgdG8gYmUgaW5pdGlhbGlzZWRcbiAgLy8gc2VydmVzIG9ubHkgZm9yIHBsYXlpbmcgZXhpc3RpbmcgdmlkZW9tYWlscyB3aXRoIHRoZSByZXBsYXkgZnVuY3Rpb25cbiAgcGxheWVyT25seTogZmFsc2UsXG5cbiAgLy8gc2hvdyBlcnJvcnMgaW5zaWRlIHRoZSBjb250YWluZXI/XG4gIGRpc3BsYXlFcnJvcnM6IHRydWUsXG5cbiAgLy8gdHJ1ZSA9IGFsbCBmb3JtIGlucHV0cyBnZXQgZGlzYWJsZWQgYW5kIGRpc2FwcGVhciB3aGVuIGJyb3dzZXIgY2FuJ3QgcmVjb3JkXG4gIGFkanVzdEZvcm1PbkJyb3dzZXJFcnJvcjogZmFsc2UsXG5cbiAgLy8gd2hlbiB0cnVlLCBhbnkgZXJyb3JzIHdpbGwgYmUgc2VudCB0byB0aGUgdmlkZW9tYWlsIHNlcnZlciBmb3IgYW5hbHlzaXNcbiAgLy8gcHM6IGNhbiBiZSBhIGZ1bmN0aW9uIHRvbyByZXR1cm5pbmcgYSBib29sZWFuXG4gIHJlcG9ydEVycm9yczogZmFsc2UsXG5cbiAgLy8ganVzdCBmb3IgdGVzdGluZyBwdXJwb3NlcyB0byBzaW11bGF0ZSBicm93c2VyIGFnZW50IGhhbmRsaW5nXG4gIGZha2VVYVN0cmluZzogbnVsbCxcblxuICB2ZXJzaW9uOiB2ZXJzaW9uXG59XG4iLCJpbXBvcnQgc3VwZXJhZ2VudCBmcm9tICdzdXBlcmFnZW50J1xuaW1wb3J0IENvbnN0YW50cyBmcm9tICcuL2NvbnN0YW50cydcblxuY29uc3QgQ0FDSEVfS0VZID0gJ2FsaWFzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAob3B0aW9ucykge1xuICBjb25zdCBjYWNoZSA9IHt9XG5cbiAgZnVuY3Rpb24gYXBwbHlEZWZhdWx0VmFsdWUgKHZpZGVvbWFpbCwgbmFtZSkge1xuICAgIGlmIChvcHRpb25zLmRlZmF1bHRzW25hbWVdICYmICF2aWRlb21haWxbbmFtZV0pIHtcbiAgICAgIHZpZGVvbWFpbFtuYW1lXSA9IG9wdGlvbnMuZGVmYXVsdHNbbmFtZV1cbiAgICB9XG5cbiAgICByZXR1cm4gdmlkZW9tYWlsXG4gIH1cblxuICBmdW5jdGlvbiBhcHBseURlZmF1bHRWYWx1ZXMgKHZpZGVvbWFpbCkge1xuICAgIGlmIChvcHRpb25zLmRlZmF1bHRzKSB7XG4gICAgICB2aWRlb21haWwgPSBhcHBseURlZmF1bHRWYWx1ZSh2aWRlb21haWwsICdmcm9tJylcbiAgICAgIHZpZGVvbWFpbCA9IGFwcGx5RGVmYXVsdFZhbHVlKHZpZGVvbWFpbCwgJ3RvJylcbiAgICAgIHZpZGVvbWFpbCA9IGFwcGx5RGVmYXVsdFZhbHVlKHZpZGVvbWFpbCwgJ3N1YmplY3QnKVxuICAgICAgdmlkZW9tYWlsID0gYXBwbHlEZWZhdWx0VmFsdWUodmlkZW9tYWlsLCAnYm9keScpXG4gICAgfVxuXG4gICAgcmV0dXJuIHZpZGVvbWFpbFxuICB9XG5cbiAgZnVuY3Rpb24gcGFja0Vycm9yIChlcnIsIHJlcykge1xuICAgIGlmIChyZXMgJiYgcmVzLmJvZHkgJiYgcmVzLmJvZHkuZXJyb3IpIHtcbiAgICAgIC8vIHVzZSB0aGUgc2VydmVyIGdlbmVyYXRlZCB0ZXh0IGluc3RlYWQgb2YgdGhlIHN1cGVyYWdlbnQncyBkZWZhdWx0IHRleHRcbiAgICAgIGVyciA9IHJlcy5ib2R5LmVycm9yXG5cbiAgICAgIGlmICghZXJyLm1lc3NhZ2UgJiYgcmVzLnRleHQpIHtcbiAgICAgICAgZXJyLm1lc3NhZ2UgPSByZXMudGV4dFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlcnJcbiAgfVxuXG4gIGZ1bmN0aW9uIGZldGNoIChhbGlhcywgY2IpIHtcbiAgICBzdXBlcmFnZW50XG4gICAgICAuZ2V0KCcvdmlkZW9tYWlsLycgKyBhbGlhcyArICcvc25hcHNob3QnKVxuICAgICAgLnNldCgnQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKVxuICAgICAgLnNldChDb25zdGFudHMuU0lURV9OQU1FX0xBQkVMLCBvcHRpb25zLnNpdGVOYW1lKVxuICAgICAgLnRpbWVvdXQob3B0aW9ucy50aW1lb3V0cy5jb25uZWN0aW9uKVxuICAgICAgLmVuZChmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgZXJyID0gcGFja0Vycm9yKGVyciwgcmVzKVxuXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjYihlcnIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgdmlkZW9tYWlsID0gcmVzLmJvZHlcblxuICAgICAgICAgIGlmIChvcHRpb25zLmNhY2hlKSB7XG4gICAgICAgICAgICBjYWNoZVtDQUNIRV9LRVldID0gdmlkZW9tYWlsXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2IobnVsbCwgdmlkZW9tYWlsKVxuICAgICAgICB9XG4gICAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gd3JpdGUgKG1ldGhvZCwgdmlkZW9tYWlsLCBpZGVudGlmaWVyLCBjYikge1xuICAgIGlmICghY2IpIHtcbiAgICAgIGNiID0gaWRlbnRpZmllclxuICAgICAgaWRlbnRpZmllciA9IG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHt9XG5cbiAgICB2YXIgdXJsID0gb3B0aW9ucy5iYXNlVXJsICsgJy92aWRlb21haWwvJ1xuICAgIHZhciByZXF1ZXN0XG5cbiAgICBpZiAoaWRlbnRpZmllcikge1xuICAgICAgdXJsICs9IGlkZW50aWZpZXJcbiAgICB9XG5cbiAgICByZXF1ZXN0ID0gc3VwZXJhZ2VudChtZXRob2QsIHVybClcblxuICAgIHF1ZXJ5UGFyYW1zW0NvbnN0YW50cy5TSVRFX05BTUVfTEFCRUxdID0gb3B0aW9ucy5zaXRlTmFtZVxuXG4gICAgcmVxdWVzdFxuICAgICAgLnF1ZXJ5KHF1ZXJ5UGFyYW1zKVxuICAgICAgLnNlbmQodmlkZW9tYWlsKVxuICAgICAgLnRpbWVvdXQob3B0aW9ucy50aW1lb3V0KVxuICAgICAgLmVuZChmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgZXJyID0gcGFja0Vycm9yKGVyciwgcmVzKVxuXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjYihlcnIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG9wdGlvbnMuY2FjaGUgJiYgdmlkZW9tYWlsW0NBQ0hFX0tFWV0pIHtcbiAgICAgICAgICAgIGNhY2hlW3ZpZGVvbWFpbFtDQUNIRV9LRVldXSA9IHJlcy5ib2R5LnZpZGVvbWFpbFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNiKG51bGwsIHJlcy5ib2R5LnZpZGVvbWFpbCwgcmVzLmJvZHkpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gIH1cblxuICB0aGlzLmdldCA9IGZ1bmN0aW9uIChhbGlhcywgY2IpIHtcbiAgICBpZiAob3B0aW9ucy5jYWNoZSAmJiBjYWNoZVthbGlhc10pIHtcbiAgICAgIC8vIGtlZXAgYWxsIGNhbGxiYWNrcyBhc3luY1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNiKG51bGwsIGNhY2hlW2FsaWFzXSlcbiAgICAgIH0sIDApXG4gICAgfSBlbHNlIHtcbiAgICAgIGZldGNoKGFsaWFzLCBjYilcbiAgICB9XG4gIH1cblxuICB0aGlzLnJlcG9ydEVycm9yID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHt9XG4gICAgY29uc3QgdXJsID0gb3B0aW9ucy5iYXNlVXJsICsgJy9jbGllbnQtZXJyb3IvJ1xuICAgIGNvbnN0IHJlcXVlc3QgPSBzdXBlcmFnZW50KCdwb3N0JywgdXJsKVxuXG4gICAgcXVlcnlQYXJhbXNbQ29uc3RhbnRzLlNJVEVfTkFNRV9MQUJFTF0gPSBvcHRpb25zLnNpdGVOYW1lXG5cbiAgICByZXF1ZXN0XG4gICAgICAucXVlcnkocXVlcnlQYXJhbXMpXG4gICAgICAuc2VuZChlcnIpXG4gICAgICAudGltZW91dChvcHRpb25zLnRpbWVvdXQpXG4gICAgICAuZW5kKGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICBlcnIgPSBwYWNrRXJyb3IoZXJyLCByZXMpXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjYiAmJiBjYihlcnIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2IgJiYgY2IoKVxuICAgICAgICB9XG4gICAgICB9KVxuICB9XG5cbiAgdGhpcy5wb3N0ID0gZnVuY3Rpb24gKHZpZGVvbWFpbCwgY2IpIHtcbiAgICB2aWRlb21haWwgPSBhcHBseURlZmF1bHRWYWx1ZXModmlkZW9tYWlsKVxuXG4gICAgLy8gYWx3YXlzIGdvb2QgdG8ga25vdyB0aGUgdmVyc2lvbiBvZiB0aGUgY2xpZW50XG4gICAgLy8gdGhlIHZpZGVvbWFpbCB3YXMgc3VibWl0dGVkIHdpdGhcbiAgICB2aWRlb21haWxbQ29uc3RhbnRzLlZFUlNJT05fTEFCRUxdID0gb3B0aW9ucy52ZXJzaW9uXG5cbiAgICBpZiAob3B0aW9ucy5jYWxsYmFja3MuYWRqdXN0Rm9ybURhdGFCZWZvcmVQb3N0aW5nKSB7XG4gICAgICBvcHRpb25zLmNhbGxiYWNrcy5hZGp1c3RGb3JtRGF0YUJlZm9yZVBvc3RpbmcoXG4gICAgICAgIHZpZGVvbWFpbCxcbiAgICAgICAgZnVuY3Rpb24gKGVyciwgYWRqdXN0ZWRWaWRlb21haWwpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBjYihlcnIpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyaXRlKCdwb3N0JywgYWRqdXN0ZWRWaWRlb21haWwsIGNiKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB3cml0ZSgncG9zdCcsIHZpZGVvbWFpbCwgY2IpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5wdXQgPSBmdW5jdGlvbiAodmlkZW9tYWlsLCBjYikge1xuICAgIHdyaXRlKCdwdXQnLCB2aWRlb21haWwsIHZpZGVvbWFpbC5rZXksIGNiKVxuICB9XG5cbiAgdGhpcy5mb3JtID0gZnVuY3Rpb24gKGZvcm1EYXRhLCB1cmwsIGNiKSB7XG4gICAgdmFyIGZvcm1UeXBlXG5cbiAgICBzd2l0Y2ggKG9wdGlvbnMuZW5jdHlwZSkge1xuICAgICAgY2FzZSBDb25zdGFudHMucHVibGljLkVOQ19UWVBFX0FQUF9KU09OOlxuICAgICAgICBmb3JtVHlwZSA9ICdqc29uJ1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSBDb25zdGFudHMucHVibGljLkVOQ19UWVBFX0ZPUk06XG4gICAgICAgIGZvcm1UeXBlID0gJ2Zvcm0nXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBrZWVwIGFsbCBjYWxsYmFja3MgYXN5bmNcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgY2IobmV3IEVycm9yKCdJbnZhbGlkIGVuY3R5cGUgZ2l2ZW46ICcgKyBvcHRpb25zLmVuY3R5cGUpKVxuICAgICAgICB9LCAwKVxuICAgIH1cblxuICAgIGlmIChmb3JtVHlwZSkge1xuICAgICAgc3VwZXJhZ2VudFxuICAgICAgICAucG9zdCh1cmwpXG4gICAgICAgIC50eXBlKGZvcm1UeXBlKVxuICAgICAgICAuc2VuZChmb3JtRGF0YSlcbiAgICAgICAgLnRpbWVvdXQob3B0aW9ucy50aW1lb3V0KVxuICAgICAgICAuZW5kKGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICAgIGVyciA9IHBhY2tFcnJvcihlcnIsIHJlcylcblxuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGNiKGVycilcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2IobnVsbCwgcmVzKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzPSdALXdlYmtpdC1rZXlmcmFtZXMgYXswJXtvcGFjaXR5Oi45fTM1JXtvcGFjaXR5Oi45fTUwJXtvcGFjaXR5Oi4xfTg1JXtvcGFjaXR5Oi4xfXRve29wYWNpdHk6Ljl9fUBrZXlmcmFtZXMgYXswJXtvcGFjaXR5Oi45fTM1JXtvcGFjaXR5Oi45fTUwJXtvcGFjaXR5Oi4xfTg1JXtvcGFjaXR5Oi4xfXRve29wYWNpdHk6Ljl9fS5JSVY6Oi13ZWJraXQtbWVkaWEtY29udHJvbHMtcGxheS1idXR0b24sLklJVjo6LXdlYmtpdC1tZWRpYS1jb250cm9scy1zdGFydC1wbGF5YmFjay1idXR0b257b3BhY2l0eTowO3BvaW50ZXItZXZlbnRzOm5vbmU7d2lkdGg6NXB4fS52aWRlb21haWwgLnZpc3VhbHN7cG9zaXRpb246cmVsYXRpdmV9LnZpZGVvbWFpbCAudmlzdWFscyB2aWRlby5yZXBsYXl7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0udmlkZW9tYWlsIC5jb3VudGRvd24sLnZpZGVvbWFpbCAucGF1c2VkSGVhZGVyLC52aWRlb21haWwgLnBhdXNlZEhpbnQsLnZpZGVvbWFpbCAucmVjb3JkTm90ZSwudmlkZW9tYWlsIC5yZWNvcmRUaW1lcnttYXJnaW46MDtoZWlnaHQ6YXV0b30udmlkZW9tYWlsIC5jb3VudGRvd24sLnZpZGVvbWFpbCAucGF1c2VkLC52aWRlb21haWwgLnJlY29yZE5vdGUsLnZpZGVvbWFpbCAucmVjb3JkVGltZXIsLnZpZGVvbWFpbCBub3NjcmlwdHtwb3NpdGlvbjphYnNvbHV0ZX0udmlkZW9tYWlsIC5jb3VudGRvd24sLnZpZGVvbWFpbCAucGF1c2VkSGVhZGVyLC52aWRlb21haWwgLnBhdXNlZEhpbnQsLnZpZGVvbWFpbCAucmVjb3JkTm90ZSwudmlkZW9tYWlsIC5yZWNvcmRUaW1lciwudmlkZW9tYWlsIG5vc2NyaXB0e2ZvbnQtd2VpZ2h0OjcwMH0udmlkZW9tYWlsIC5jb3VudGRvd24sLnZpZGVvbWFpbCAucGF1c2VkLC52aWRlb21haWwgbm9zY3JpcHR7d2lkdGg6MTAwJTt0b3A6NTAlOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSl9LnZpZGVvbWFpbCAuY291bnRkb3duLC52aWRlb21haWwgLnBhdXNlZEhlYWRlciwudmlkZW9tYWlsIC5wYXVzZWRIaW50e3RleHQtYWxpZ246Y2VudGVyO3RleHQtc2hhZG93OjAgMCAycHggI2ZmZn0udmlkZW9tYWlsIC5jb3VudGRvd24sLnZpZGVvbWFpbCAucGF1c2VkSGVhZGVye29wYWNpdHk6Ljg1O2ZvbnQtc2l6ZTo0NDAlfS52aWRlb21haWwgLnBhdXNlZEhpbnR7Zm9udC1zaXplOjE1MCV9LnZpZGVvbWFpbCAucmVjb3JkTm90ZSwudmlkZW9tYWlsIC5yZWNvcmRUaW1lcntyaWdodDouN2VtO2JhY2tncm91bmQ6aHNsYSgwLDAlLDQlLC44KTtwYWRkaW5nOi40ZW0gLjRlbSAuM2VtO3RyYW5zaXRpb246YWxsIDFzIGVhc2U7Y29sb3I6IzAwZDgxNDtmb250LWZhbWlseTptb25vc3BhY2U7b3BhY2l0eTouOX0udmlkZW9tYWlsIC5yZWNvcmROb3RlLm5lYXIsLnZpZGVvbWFpbCAucmVjb3JkVGltZXIubmVhcntjb2xvcjojZWI5MzY5fS52aWRlb21haWwgLnJlY29yZE5vdGUubmlnaCwudmlkZW9tYWlsIC5yZWNvcmRUaW1lci5uaWdoe2NvbG9yOiNlYTRiMmF9LnZpZGVvbWFpbCAucmVjb3JkVGltZXJ7dG9wOi43ZW19LnZpZGVvbWFpbCAucmVjb3JkTm90ZXt0b3A6My42ZW19LnZpZGVvbWFpbCAucmVjb3JkTm90ZTpiZWZvcmV7Y29udGVudDpcIlJFQ1wiOy13ZWJraXQtYW5pbWF0aW9uOmEgMXMgaW5maW5pdGU7YW5pbWF0aW9uOmEgMXMgaW5maW5pdGV9LnZpZGVvbWFpbCAubm90aWZpZXJ7b3ZlcmZsb3c6aGlkZGVuO2JveC1zaXppbmc6Ym9yZGVyLWJveDtoZWlnaHQ6MTAwJX0udmlkZW9tYWlsIC5yYWRpb0dyb3Vwe2Rpc3BsYXk6YmxvY2t9LnZpZGVvbWFpbCB2aWRlb3ttYXJnaW4tYm90dG9tOjB9JyIsImltcG9ydCBpc1BPVCBmcm9tICdpcy1wb3dlci1vZi10d28nXG5pbXBvcnQgQXVkaW9TYW1wbGUgZnJvbSAnYXVkaW8tc2FtcGxlJ1xuXG5pbXBvcnQgVmlkZW9tYWlsRXJyb3IgZnJvbSAnLi92aWRlb21haWxFcnJvcidcblxuY29uc3QgQ0hBTk5FTFMgPSAxXG5cbi8vIGZvciBpbnNwaXJhdGlvbiBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zYWViZWthc3NlYmlsL21pY3JvcGhvbmUtc3RyZWFtXG5cbi8vIHRvZG8gY29kZSBuZWVkcyByZXdyaXRlXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh1c2VyTWVkaWEsIG9wdGlvbnMpIHtcbiAgdmFyIHNjcmlwdFByb2Nlc3NvclxuICB2YXIgYXVkaW9JbnB1dFxuICB2YXIgdmNBdWRpb0NvbnRleHRcblxuICBmdW5jdGlvbiBoYXNBdWRpb0NvbnRleHQgKCkge1xuICAgIHJldHVybiAhIWdldEF1ZGlvQ29udGV4dCgpXG4gIH1cblxuICBmdW5jdGlvbiBnZXRBdWRpb0NvbnRleHQgKCkge1xuICAgIC8vIGluc3RhbnRpYXRlIG9ubHkgb25jZVxuICAgIGlmICghdmNBdWRpb0NvbnRleHQpIHtcbiAgICAgIGNvbnN0IEF1ZGlvQ29udGV4dCA9IHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dFxuICAgICAgdmNBdWRpb0NvbnRleHQgPSBuZXcgQXVkaW9Db250ZXh0KClcbiAgICB9XG5cbiAgICByZXR1cm4gdmNBdWRpb0NvbnRleHRcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQXVkaW9Qcm9jZXNzIChlLCBjYikge1xuICAgIGlmICghdXNlck1lZGlhLmlzUmVjb3JkaW5nKCkgfHwgdXNlck1lZGlhLmlzUGF1c2VkKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIFJldHVybnMgYSBGbG9hdDMyQXJyYXkgY29udGFpbmluZyB0aGUgUENNIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSBjaGFubmVsLFxuICAgIC8vIGRlZmluZWQgYnkgdGhlIGNoYW5uZWwgcGFyYW1ldGVyICh3aXRoIDAgcmVwcmVzZW50aW5nIHRoZSBmaXJzdCBjaGFubmVsKVxuICAgIGNvbnN0IGZsb2F0MzJBcnJheSA9IGUuaW5wdXRCdWZmZXIuZ2V0Q2hhbm5lbERhdGEoMClcblxuICAgIGNiKG5ldyBBdWRpb1NhbXBsZShmbG9hdDMyQXJyYXkpKVxuICB9XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24gKGxvY2FsTWVkaWFTdHJlYW0pIHtcbiAgICBvcHRpb25zLmRlYnVnKCdBdWRpb1JlY29yZGVyOiBpbml0KCknKVxuXG4gICAgLy8gY3JlYXRlcyBhbiBhdWRpbyBub2RlIGZyb20gdGhlIG1pY3JvcGhvbmUgaW5jb21pbmcgc3RyZWFtXG4gICAgY29uc3Qgdm9sdW1lID0gZ2V0QXVkaW9Db250ZXh0KCkuY3JlYXRlR2FpbigpXG5cbiAgICB0cnkge1xuICAgICAgYXVkaW9JbnB1dCA9IGdldEF1ZGlvQ29udGV4dCgpLmNyZWF0ZU1lZGlhU3RyZWFtU291cmNlKGxvY2FsTWVkaWFTdHJlYW0pXG4gICAgfSBjYXRjaCAoZXhjKSB7XG4gICAgICB0aHJvdyBWaWRlb21haWxFcnJvci5jcmVhdGUoXG4gICAgICAgICdXZWJjYW0gaGFzIG5vIGF1ZGlvJyxcbiAgICAgICAgZXhjLnRvU3RyaW5nKCksXG4gICAgICAgIG9wdGlvbnNcbiAgICAgIClcbiAgICB9XG5cbiAgICBpZiAoIWlzUE9UKG9wdGlvbnMuYXVkaW8uYnVmZmVyU2l6ZSkpIHtcbiAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnQXVkaW8gYnVmZmVyIHNpemUgbXVzdCBiZSBhIHBvd2VyIG9mIHR3by4nLCBvcHRpb25zKVxuICAgIH0gZWxzZSBpZiAoIW9wdGlvbnMuYXVkaW8udm9sdW1lIHx8IG9wdGlvbnMuYXVkaW8udm9sdW1lID4gMSkge1xuICAgICAgdGhyb3cgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdBdWRpbyB2b2x1bWUgbXVzdCBiZSBiZXR3ZWVuIHplcm8gYW5kIG9uZS4nLCBvcHRpb25zKVxuICAgIH1cblxuICAgIHZvbHVtZS5nYWluLnZhbHVlID0gb3B0aW9ucy5hdWRpby52b2x1bWVcblxuICAgIC8vIENyZWF0ZSBhIFNjcmlwdFByb2Nlc3Nvck5vZGUgd2l0aCB0aGUgZ2l2ZW4gYnVmZmVyU2l6ZSBhbmRcbiAgICAvLyBhIHNpbmdsZSBpbnB1dCBhbmQgb3V0cHV0IGNoYW5uZWxcbiAgICBzY3JpcHRQcm9jZXNzb3IgPSBnZXRBdWRpb0NvbnRleHQoKS5jcmVhdGVTY3JpcHRQcm9jZXNzb3IoXG4gICAgICBvcHRpb25zLmF1ZGlvLmJ1ZmZlclNpemUsXG4gICAgICBDSEFOTkVMUyxcbiAgICAgIENIQU5ORUxTXG4gICAgKVxuXG4gICAgLy8gY29ubmVjdCBzdHJlYW0gdG8gb3VyIHNjcmlwdFByb2Nlc3NvclxuICAgIGF1ZGlvSW5wdXQuY29ubmVjdChzY3JpcHRQcm9jZXNzb3IpXG5cbiAgICAvLyBjb25uZWN0IG91ciBzY3JpcHRQcm9jZXNzb3IgdG8gdGhlIHByZXZpb3VzIGRlc3RpbmF0aW9uXG4gICAgc2NyaXB0UHJvY2Vzc29yLmNvbm5lY3QoZ2V0QXVkaW9Db250ZXh0KCkuZGVzdGluYXRpb24pXG5cbiAgICAvLyBjb25uZWN0IHZvbHVtZVxuICAgIGF1ZGlvSW5wdXQuY29ubmVjdCh2b2x1bWUpXG4gICAgdm9sdW1lLmNvbm5lY3Qoc2NyaXB0UHJvY2Vzc29yKVxuICB9XG5cbiAgdGhpcy5yZWNvcmQgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICBvcHRpb25zLmRlYnVnKCdBdWRpb1JlY29yZGVyOiByZWNvcmQoKScpXG5cbiAgICBzY3JpcHRQcm9jZXNzb3Iub25hdWRpb3Byb2Nlc3MgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgb25BdWRpb1Byb2Nlc3MoZSwgY2IpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgIG9wdGlvbnMuZGVidWcoJ0F1ZGlvUmVjb3JkZXI6IHN0b3AoKScpXG5cbiAgICBpZiAoc2NyaXB0UHJvY2Vzc29yKSB7XG4gICAgICBzY3JpcHRQcm9jZXNzb3Iub25hdWRpb3Byb2Nlc3MgPSB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBpZiAoYXVkaW9JbnB1dCkge1xuICAgICAgYXVkaW9JbnB1dC5kaXNjb25uZWN0KClcbiAgICB9XG5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQXVkaW9Db250ZXh0L2Nsb3NlXG4gICAgaWYgKGhhc0F1ZGlvQ29udGV4dCgpKSB7XG4gICAgICBpZiAoZ2V0QXVkaW9Db250ZXh0KCkuY2xvc2UpIHtcbiAgICAgICAgZ2V0QXVkaW9Db250ZXh0KClcbiAgICAgICAgICAuY2xvc2UoKVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZGVidWcoJ0F1ZGlvUmVjb3JkZXI6IGF1ZGlvIGNvbnRleHQgaXMgY2xvc2VkJylcbiAgICAgICAgICAgIHZjQXVkaW9Db250ZXh0ID0gbnVsbFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZShlcnIsIG9wdGlvbnMpXG4gICAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZjQXVkaW9Db250ZXh0ID0gbnVsbFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuZ2V0U2FtcGxlUmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaGFzQXVkaW9Db250ZXh0KCkpIHtcbiAgICAgIHJldHVybiBnZXRBdWRpb0NvbnRleHQoKS5zYW1wbGVSYXRlXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IFVBUGFyc2VyIGZyb20gJ3VhLXBhcnNlci1qcydcbmltcG9ydCBkZWZpbmVkIGZyb20gJ2RlZmluZWQnXG5pbXBvcnQgVmlkZW9tYWlsRXJyb3IgZnJvbSAnLi92aWRlb21haWxFcnJvcidcblxuY29uc3QgQnJvd3NlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgY29uc3QgZmlyZWZveERvd25sb2FkID0gJ2h0dHA6Ly93d3cubW96aWxsYS5vcmcvZmlyZWZveC91cGRhdGUvJ1xuICBjb25zdCBlZGdlRG93bmxvYWQgPSAnaHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9lbi11cy9kb3dubG9hZC9kZXRhaWxzLmFzcHg/aWQ9NDgxMjYnXG4gIGNvbnN0IGNocm9tZURvd25sb2FkID0gJ2h0dHA6Ly93d3cuZ29vZ2xlLmNvbS9jaHJvbWUvJ1xuICBjb25zdCBjaHJvbWl1bURvd25sb2FkID0gJ2h0dHA6Ly93d3cuY2hyb21pdW0ub3JnL2dldHRpbmctaW52b2x2ZWQvZG93bmxvYWQtY2hyb21pdW0nXG4gIGNvbnN0IGJyb3dzZUhhcHB5TGluayA9ICdodHRwOi8vYnJvd3NlaGFwcHkuY29tJ1xuICBjb25zdCB1YSA9IGRlZmluZWQob3B0aW9ucy5mYWtlVWFTdHJpbmcsIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHdpbmRvdy5uYXZpZ2F0b3IgJiZcbiAgICB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudFxuICApLCAnJylcblxuICBjb25zdCB1YVBhcnNlciA9IG5ldyBVQVBhcnNlcih1YSkuZ2V0UmVzdWx0KClcblxuICBjb25zdCBpc0lPUyA9IHVhUGFyc2VyLm9zLm5hbWUgPT09ICdpT1MnXG4gIGNvbnN0IGJyb3dzZXJWZXJzaW9uID0gcGFyc2VGbG9hdCh1YVBhcnNlci5icm93c2VyLnZlcnNpb24pXG4gIGNvbnN0IGlzQ2hyb21lID0gdWFQYXJzZXIuYnJvd3Nlci5uYW1lID09PSAnQ2hyb21lJ1xuICBjb25zdCBpc0Nocm9taXVtID0gdWFQYXJzZXIuYnJvd3Nlci5uYW1lID09PSAnQ2hyb21pdW0nXG4gIGNvbnN0IGZpcmVmb3ggPSB1YVBhcnNlci5icm93c2VyLm5hbWUgPT09ICdGaXJlZm94J1xuICBjb25zdCBvc1ZlcnNpb24gPSBwYXJzZUZsb2F0KHVhUGFyc2VyLm9zLnZlcnNpb24pXG4gIGNvbnN0IGlzV2luZG93cyA9IHVhUGFyc2VyLm9zLm5hbWUgPT09ICdXaW5kb3dzJ1xuICBjb25zdCBpc0VkZ2UgPSB1YVBhcnNlci5icm93c2VyLm5hbWUgPT09ICdFZGdlJyB8fCAoaXNXaW5kb3dzICYmIG9zVmVyc2lvbiA+PSAxMClcbiAgY29uc3QgaXNJRSA9IC9JRS8udGVzdCh1YVBhcnNlci5icm93c2VyLm5hbWUpXG4gIGNvbnN0IGlzU2FmYXJpID0gL1NhZmFyaS8udGVzdCh1YVBhcnNlci5icm93c2VyLm5hbWUpXG4gIGNvbnN0IGlzT3BlcmEgPSAvT3BlcmEvLnRlc3QodWFQYXJzZXIuYnJvd3Nlci5uYW1lKVxuICBjb25zdCBpc0FuZHJvaWQgPSAvQW5kcm9pZC8udGVzdCh1YVBhcnNlci5vcy5uYW1lKVxuICBjb25zdCBjaHJvbWVCYXNlZCA9IGlzQ2hyb21lIHx8IGlzQ2hyb21pdW1cblxuICBjb25zdCBpc09rU2FmYXJpID0gaXNTYWZhcmkgJiYgYnJvd3NlclZlcnNpb24gPj0gMTFcbiAgY29uc3QgaXNPa0lPUyA9IGlzSU9TICYmIG9zVmVyc2lvbiA+PSAxMVxuICBjb25zdCBpc0JhZElPUyA9IGlzSU9TICYmIG9zVmVyc2lvbiA8IDExXG5cbiAgY29uc3Qgb2tCcm93c2VyID1cbiAgICBjaHJvbWVCYXNlZCB8fFxuICAgIGZpcmVmb3ggfHxcbiAgICBpc0FuZHJvaWQgfHxcbiAgICBpc09wZXJhIHx8XG4gICAgaXNFZGdlIHx8XG4gICAgaXNPa1NhZmFyaSB8fFxuICAgIGlzT2tJT1NcblxuICBjb25zdCBzZWxmID0gdGhpc1xuXG4gIHZhciB2aWRlb1R5cGVcblxuICBmdW5jdGlvbiBnZXRSZWNvbW1lbmRhdGlvbiAoKSB7XG4gICAgdmFyIHdhcm5pbmdcblxuICAgIGlmIChmaXJlZm94KSB7XG4gICAgICBpZiAoaXNJT1MpIHtcbiAgICAgICAgd2FybmluZyA9ICdGaXJlZm94IG9uIGlPUyBpcyBub3QgcmVhZHkgZm9yIHdlYmNhbXMgeWV0LiBIb3BlZnVsbHkgaW4gbmVhciBmdXR1cmUgLi4uJ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyA9ICdQcm9iYWJseSB5b3UgbmVlZCB0byA8YSBocmVmPVwiJyArIGZpcmVmb3hEb3dubG9hZCArICdcIiB0YXJnZXQ9XCJfYmxhbmtcIj4nICtcbiAgICAgICAgICAgICAgICAgICd1cGdyYWRlIEZpcmVmb3g8L2E+IHRvIGZpeCB0aGlzLidcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQ2hyb21lKSB7XG4gICAgICBpZiAoaXNJT1MpIHtcbiAgICAgICAgd2FybmluZyA9ICdDaHJvbWUgb24gaU9TIGlzIG5vdCByZWFkeSBmb3Igd2ViY2FtcyB5ZXQuIEhvcGVmdWxseSBpbiBuZWFyIGZ1dHVyZSAuLi4nXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nID0gJ1Byb2JhYmx5IHlvdSBuZWVkIHRvIDxhIGhyZWY9XCInICsgY2hyb21lRG93bmxvYWQgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+JyArXG4gICAgICAgICAgICAgICAgICAndXBncmFkZSBDaHJvbWU8L2E+IHRvIGZpeCB0aGlzLidcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQ2hyb21pdW0pIHtcbiAgICAgIHdhcm5pbmcgPSAnUHJvYmFibHkgeW91IG5lZWQgdG8gPGEgaHJlZj1cIicgKyBjaHJvbWl1bURvd25sb2FkICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiPicgK1xuICAgICAgICAgICAgICAgICd1cGdyYWRlIENocm9taXVtPC9hPiB0byBmaXggdGhpcy4nXG4gICAgfSBlbHNlIGlmIChpc0lFKSB7XG4gICAgICB3YXJuaW5nID0gJ0luc3RlYWQgb2YgSW50ZXJuZXQgRXhwbG9yZXIgeW91IG5lZWQgdG8gdXBncmFkZSB0bycgK1xuICAgICAgICAgICAgICAgICcgPGEgaHJlZj1cIicgKyBlZGdlRG93bmxvYWQgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+RWRnZTwvYT4uJ1xuICAgIH0gZWxzZSBpZiAoaXNTYWZhcmkpIHtcbiAgICAgIHdhcm5pbmcgPSAnU2FmYXJpIGJlbG93IHZlcnNpb24gMTEgaGFzIG5vIHdlYmNhbSBzdXBwb3J0Ljxici8+QmV0dGVyIHVwZ3JhZGUgU2FmYXJpIG9yIHBpY2snICtcbiAgICAgICAgICAgICAgICAnIDxhIGhyZWY9XCInICsgY2hyb21lRG93bmxvYWQgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+Q2hyb21lPC9hPiwnICtcbiAgICAgICAgICAgICAgICAnIDxhIGhyZWY9XCInICsgZmlyZWZveERvd25sb2FkICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiPkZpcmVmb3g8L2E+IG9yIEFuZHJvaWQuJ1xuICAgIH1cblxuICAgIHJldHVybiB3YXJuaW5nXG4gIH1cblxuICBmdW5jdGlvbiBnZXRVc2VyTWVkaWFXYXJuaW5nICgpIHtcbiAgICB2YXIgd2FybmluZ1xuXG4gICAgaWYgKGlzQmFkSU9TKSB7XG4gICAgICB3YXJuaW5nID0gJ09uIGlQYWRzL2lQaG9uZXMgYmVsb3cgaU9TIHYxMSB0aGlzIHdlYmNhbSBmZWF0dXJlIGlzIG1pc3NpbmcuPGJyLz48YnIvPicgK1xuICAgICAgICAgICAgICAgICdGb3Igbm93LCB3ZSByZWNvbW1lbmQgeW91IHRvIHVwZ3JhZGUgaU9TIG9yIHRvIHVzZSBhbiBBbmRyb2lkIGRldmljZS4nXG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmcgPSBnZXRSZWNvbW1lbmRhdGlvbigpXG4gICAgfVxuXG4gICAgaWYgKCF3YXJuaW5nKSB7XG4gICAgICBpZiAoc2VsZi5pc0Nocm9tZUJhc2VkKCkgfHwgc2VsZi5pc0ZpcmVmb3goKSB8fCBpc1NhZmFyaSkge1xuICAgICAgICB3YXJuaW5nID0gJ0ZvciB0aGUgd2ViY2FtIGZlYXR1cmUsIHlvdXIgYnJvd3NlciBuZWVkcyBhbiB1cGdyYWRlLidcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcgPSAnSGVuY2Ugd2UgcmVjb21tZW5kIHlvdSB0byB1c2UgZWl0aGVyICcgK1xuICAgICAgICAgICAgICAgICAgJzxhIGhyZWY9XCInICsgY2hyb21lRG93bmxvYWQgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+Q2hyb21lPC9hPiwgJyArXG4gICAgICAgICAgICAgICAgICAnPGEgaHJlZj1cIicgKyBmaXJlZm94RG93bmxvYWQgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+RmlyZWZveDwvYT4sICcgK1xuICAgICAgICAgICAgICAgICAgJzxhIGhyZWY9XCInICsgZWRnZURvd25sb2FkICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiPkVkZ2U8L2E+IG9yIEFuZHJvaWQuJ1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3YXJuaW5nXG4gIH1cblxuICBmdW5jdGlvbiBnZXRQbGF5YmFja1dhcm5pbmcgKCkge1xuICAgIHZhciB3YXJuaW5nID0gZ2V0UmVjb21tZW5kYXRpb24oKVxuXG4gICAgaWYgKCF3YXJuaW5nKSB7XG4gICAgICB3YXJuaW5nID0gJzxhIGhyZWY9XCInICsgYnJvd3NlSGFwcHlMaW5rICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiPlVwZ3JhZGluZyB5b3VyIGJyb3dzZXI8L2E+IG1pZ2h0IGhlbHAuJ1xuICAgIH1cblxuICAgIHJldHVybiB3YXJuaW5nXG4gIH1cblxuICBmdW5jdGlvbiBjYW5QbGF5VHlwZSAodmlkZW8sIHR5cGUpIHtcbiAgICB2YXIgY2FuUGxheVR5cGVcblxuICAgIGlmICh2aWRlbyAmJiB2aWRlby5jYW5QbGF5VHlwZSkge1xuICAgICAgY2FuUGxheVR5cGUgPSB2aWRlby5jYW5QbGF5VHlwZSgndmlkZW8vJyArIHR5cGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGNhblBsYXlUeXBlXG4gIH1cblxuICAvLyBqdXN0IHRlbXBvcmFyeVxuICB0aGlzLmNhblJlY29yZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBoYXNOYXZpZ2F0b3IgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJ1xuICAgIHZhciBjYW5SZWNvcmQgPSBmYWxzZVxuXG4gICAgaWYgKGhhc05hdmlnYXRvciAmJiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKSB7XG4gICAgICBjYW5SZWNvcmQgPSB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBnZXRVc2VyTWVkaWFUeXBlID0gaGFzTmF2aWdhdG9yICYmIHR5cGVvZiBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhX1xuXG4gICAgICBjYW5SZWNvcmQgPSBnZXRVc2VyTWVkaWFUeXBlID09PSAnZnVuY3Rpb24nXG4gICAgfVxuXG4gICAgcmV0dXJuIGNhblJlY29yZFxuICB9XG5cbiAgdGhpcy5jaGVja1JlY29yZGluZ0NhcGFiaWxpdGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXJyXG5cbiAgICBpZiAoIW9rQnJvd3NlciB8fCAhdGhpcy5jYW5SZWNvcmQoKSkge1xuICAgICAgY29uc3QgY2xhc3NMaXN0ID0gW11cblxuICAgICAgaWYgKGlzQmFkSU9TKSB7XG4gICAgICAgIGNsYXNzTGlzdC5wdXNoKFZpZGVvbWFpbEVycm9yLklPU19QUk9CTEVNKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xhc3NMaXN0LnB1c2goVmlkZW9tYWlsRXJyb3IuQlJPV1NFUl9QUk9CTEVNKVxuICAgICAgfVxuXG4gICAgICBlcnIgPSBWaWRlb21haWxFcnJvci5jcmVhdGUoe1xuICAgICAgICBtZXNzYWdlOiAnU29ycnksIHlvdXIgYnJvd3NlciBpcyB1bmFibGUgdG8gdXNlIHdlYmNhbXMnXG4gICAgICB9LCBnZXRVc2VyTWVkaWFXYXJuaW5nKCksIG9wdGlvbnMsIHtcbiAgICAgICAgY2xhc3NMaXN0OiBjbGFzc0xpc3RcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIGVyclxuICB9XG5cbiAgdGhpcy5jaGVja1BsYXliYWNrQ2FwYWJpbGl0aWVzID0gZnVuY3Rpb24gKHZpZGVvKSB7XG4gICAgb3B0aW9ucy5kZWJ1ZygnQnJvd3NlcjogY2hlY2tQbGF5YmFja0NhcGFiaWxpdGllcygpJylcblxuICAgIHZhciBlcnJcbiAgICB2YXIgbWVzc2FnZVxuXG4gICAgaWYgKCF2aWRlbykge1xuICAgICAgbWVzc2FnZSA9ICdObyBIVE1MNSBzdXBwb3J0IGZvciB2aWRlbyB0YWchJ1xuICAgIH0gZWxzZSBpZiAoIXRoaXMuZ2V0VmlkZW9UeXBlKHZpZGVvKSkge1xuICAgICAgbWVzc2FnZSA9ICdZb3VyIG9sZCBicm93c2VyIGNhbm5vdCBzdXBwb3J0IG1vZGVybiB2aWRlbyBjb2RlY3MnXG4gICAgfSBlbHNlIGlmICghdmlkZW8uc2V0QXR0cmlidXRlKSB7XG4gICAgICAvLyBmaXhlcyBcIk5vdCBpbXBsZW1lbnRlZFwiIGVycm9yIG9uIG9sZGVyIGJyb3dzZXJzXG4gICAgICBtZXNzYWdlID0gJ1VuYWJsZSB0byBzZXQgdmlkZW8gYXR0cmlidXRlcyBpbiB5b3VyIG9sZCBicm93c2VyJ1xuICAgIH1cblxuICAgIGlmIChtZXNzYWdlKSB7XG4gICAgICBlcnIgPSBWaWRlb21haWxFcnJvci5jcmVhdGUobWVzc2FnZSwgZ2V0UGxheWJhY2tXYXJuaW5nKCksIG9wdGlvbnMpXG4gICAgfVxuXG4gICAgcmV0dXJuIGVyclxuICB9XG5cbiAgdGhpcy5jaGVja0J1ZmZlclR5cGVzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlcnJcblxuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2Ygd2luZG93LmF0b2IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBlcnIgPSBWaWRlb21haWxFcnJvci5jcmVhdGUoJ2F0b2IgaXMgbm90IHN1cHBvcnRlZCcsIG9wdGlvbnMpXG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93LkFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZXJyID0gVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdBcnJheUJ1ZmZlcnMgYXJlIG5vdCBzdXBwb3J0ZWQnLCBvcHRpb25zKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdy5VaW50OEFycmF5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZXJyID0gVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdVaW50OEFycmF5cyBhcmUgbm90IHN1cHBvcnRlZCcsIG9wdGlvbnMpXG4gICAgfVxuXG4gICAgcmV0dXJuIGVyclxuICB9XG5cbiAgdGhpcy5nZXRWaWRlb1R5cGUgPSBmdW5jdGlvbiAodmlkZW8pIHtcbiAgICBpZiAoIXZpZGVvVHlwZSkge1xuICAgICAgLy8gdGhlcmUgaXMgYSBidWcgaW4gY2FuUGxheVR5cGUgd2l0aGluIGNocm9tZSBmb3IgbXA0XG4gICAgICBpZiAoY2FuUGxheVR5cGUodmlkZW8sICdtcDQnKSAmJiAhY2hyb21lQmFzZWQpIHtcbiAgICAgICAgdmlkZW9UeXBlID0gJ21wNCdcbiAgICAgIH0gZWxzZSBpZiAoY2FuUGxheVR5cGUodmlkZW8sICd3ZWJtJykpIHtcbiAgICAgICAgdmlkZW9UeXBlID0gJ3dlYm0nXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHZpZGVvVHlwZVxuICB9XG5cbiAgdGhpcy5nZXROb0FjY2Vzc0lzc3VlID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSAnVW5hYmxlIHRvIGFjY2VzcyB3ZWJjYW0nXG4gICAgdmFyIGV4cGxhbmF0aW9uXG5cbiAgICBpZiAodGhpcy5pc0Nocm9tZUJhc2VkKCkpIHtcbiAgICAgIGV4cGxhbmF0aW9uID0gJ0NsaWNrIG9uIHRoZSBhbGxvdyBidXR0b24gdG8gZ3JhbnQgYWNjZXNzIHRvIHlvdXIgd2ViY2FtLidcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNGaXJlZm94KCkpIHtcbiAgICAgIGV4cGxhbmF0aW9uID0gJ1BsZWFzZSBncmFudCBGaXJlZm94IGFjY2VzcyB0byB5b3VyIHdlYmNhbS4nXG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cGxhbmF0aW9uID0gJ1lvdXIgc3lzdGVtIGRvZXMgbm90IGxldCB5b3VyIGJyb3dzZXIgYWNjZXNzIHlvdXIgd2ViY2FtLidcbiAgICB9XG5cbiAgICByZXR1cm4gVmlkZW9tYWlsRXJyb3IuY3JlYXRlKG1lc3NhZ2UsIGV4cGxhbmF0aW9uLCBvcHRpb25zKVxuICB9XG5cbiAgdGhpcy5pc0Nocm9tZUJhc2VkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjaHJvbWVCYXNlZFxuICB9XG5cbiAgdGhpcy5pc0ZpcmVmb3ggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZpcmVmb3hcbiAgfVxuXG4gIHRoaXMuaXNFZGdlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpc0VkZ2VcbiAgfVxuXG4gIHRoaXMuaXNBbmRyb2lkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpc0FuZHJvaWRcbiAgfVxuXG4gIHRoaXMuaXNNb2JpbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVhUGFyc2VyLmRldmljZS50eXBlID09PSAnbW9iaWxlJ1xuICB9XG5cbiAgdGhpcy5pc09rU2FmYXJpID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpc09rU2FmYXJpXG4gIH1cblxuICB0aGlzLmdldFVzZWZ1bERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJyb3dzZXI6IHVhUGFyc2VyLmJyb3dzZXIsXG4gICAgICBkZXZpY2U6IHVhUGFyc2VyLmRldmljZSxcbiAgICAgIG9zOiB1YVBhcnNlci5vcyxcbiAgICAgIGVuZ2luZTogdWFQYXJzZXIuZW5naW5lLFxuICAgICAgdXNlckFnZW50OiB1YVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCcm93c2VyXG5cbi8vIHNvIHRoYXQgd2UgYWxzbyBjYW4gcmVxdWlyZSgpIGl0IGZyb20gdmlkZW9tYWlsRXJyb3IuanMgd2l0aGluXG5tb2R1bGUuZXhwb3J0cyA9IEJyb3dzZXJcbiIsImltcG9ydCB1dGlsIGZyb20gJ3V0aWwnXG5pbXBvcnQgQnJvd3NlciBmcm9tICcuL2Jyb3dzZXInXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChsb2NhbE9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBicm93c2VyID0gbmV3IEJyb3dzZXIobG9jYWxPcHRpb25zKVxuICBjb25zdCBsb2dnZXIgPSBsb2NhbE9wdGlvbnMubG9nZ2VyIHx8IGNvbnNvbGVcbiAgY29uc3QgY29udGFpbmVySWQgPSAobG9jYWxPcHRpb25zLnNlbGVjdG9ycyAmJiBsb2NhbE9wdGlvbnMuc2VsZWN0b3JzLmNvbnRhaW5lcklkKSB8fCAndW5kZWZpbmVkIGNvbnRhaW5lciBpZCdcbiAgY29uc3Qgc3RhY2sgPSBbXVxuXG4gIGZ1bmN0aW9uIGxpZm8gKGxldmVsLCBwYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgbGluZSA9IHV0aWwuZm9ybWF0LmFwcGx5KHV0aWwsIHBhcmFtZXRlcnMpXG5cbiAgICBpZiAoc3RhY2subGVuZ3RoID4gbG9jYWxPcHRpb25zLmxvZ1N0YWNrU2l6ZSkge1xuICAgICAgc3RhY2sucG9wKClcbiAgICB9XG5cbiAgICBzdGFjay5wdXNoKCdbJyArIGxldmVsICsgJ10gJyArIGxpbmUpXG5cbiAgICByZXR1cm4gbGluZVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkQ29udGFpbmVySWQgKGZpcnN0QXJndW1lbnQpIHtcbiAgICByZXR1cm4gJyMnICsgY29udGFpbmVySWQgKyAnIFsnICsgbmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKSArICddID4gJyArIGZpcnN0QXJndW1lbnRcbiAgfVxuXG4gIC8vIHdvcmthcm91bmQ6IHNpbmNlIHdlIGNhbm5vdCBvdmVyd3JpdGUgY29uc29sZS5sb2cgd2l0aG91dCBoYXZpbmcgdGhlIGNvcnJlY3QgZmlsZSBhbmQgbGluZSBudW1iZXJcbiAgLy8gd2UnbGwgdXNlIGdyb3VwQ29sbGFwc2VkKCkgYW5kIHRyYWNlKCkgaW5zdGVhZCB0byBnZXQgdGhlc2UuXG4gIHRoaXMuZGVidWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gYWx3YXlzIGFkZCBpdCBmb3IgYmV0dGVyIGNsaWVudCBlcnJvciByZXBvcnRzXG4gICAgY29uc3QgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKVxuICAgIGFyZ3NbMF0gPSBhZGRDb250YWluZXJJZChhcmdzWzBdKVxuXG4gICAgY29uc3Qgb3V0cHV0ID0gbGlmbygnZGVidWcnLCBhcmdzKVxuXG4gICAgaWYgKGxvY2FsT3B0aW9ucy52ZXJib3NlKSB7XG4gICAgICBpZiAoYnJvd3Nlci5pc0ZpcmVmb3goKSkge1xuICAgICAgICBsb2dnZXIuZGVidWcob3V0cHV0KVxuICAgICAgfSBlbHNlIGlmIChsb2dnZXIuZ3JvdXBDb2xsYXBzZWQpIHtcbiAgICAgICAgbG9nZ2VyLmdyb3VwQ29sbGFwc2VkKG91dHB1dClcbiAgICAgICAgbG9nZ2VyLnRyYWNlKCdUcmFjZScpXG4gICAgICAgIGxvZ2dlci5ncm91cEVuZCgpXG4gICAgICB9IGVsc2UgaWYgKGxvZ2dlci5kZWJ1Zykge1xuICAgICAgICBsb2dnZXIuZGVidWcob3V0cHV0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbGFzdCByZXNvcnQgaWYgZXZlcnl0aGluZyBlbHNlIGZhaWxzIGZvciBhbnkgd2VpcmQgcmVhc29uc1xuICAgICAgICBjb25zb2xlLmxvZyhvdXRwdXQpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApXG4gICAgYXJnc1swXSA9IGFkZENvbnRhaW5lcklkKGFyZ3NbMF0pXG5cbiAgICBsb2dnZXIuZXJyb3IobGlmbygnZXJyb3InLCBhcmdzKSlcbiAgfVxuXG4gIHRoaXMud2FybiA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApXG4gICAgYXJnc1swXSA9IGFkZENvbnRhaW5lcklkKGFyZ3NbMF0pXG5cbiAgICBsb2dnZXIud2FybihsaWZvKCd3YXJuJywgYXJncykpXG4gIH1cblxuICB0aGlzLmdldExpbmVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzdGFja1xuICB9XG59XG4iLCJpbXBvcnQgZGVzcG90IGZyb20gJ2Rlc3BvdCdcblxuaW1wb3J0IFZpZGVvbWFpbEVycm9yIGZyb20gJy4vdmlkZW9tYWlsRXJyb3InXG5pbXBvcnQgRXZlbnRzIGZyb20gJy4vLi4vZXZlbnRzJ1xuXG4vLyBUT0RPOiBNQUtFIEVWRU5UIEVNSVRUSU5HIElOIERFU1BPVCBOT1QgR0xPQkFMIEJVVCBCWSBDT05UQUlORVIgSUQgSU5TVEVBRFxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAob3B0aW9ucywgbmFtZSkge1xuICB0aGlzLmVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBjb25zdCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKVxuXG4gICAgaWYgKCFldmVudCkge1xuICAgICAgdGhyb3cgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdZb3UgY2Fubm90IGVtaXQgd2l0aG91dCBhbiBldmVudC4nLCBvcHRpb25zKVxuICAgIH1cblxuICAgIC8vIEF1dG9tYXRpY2FsbHkgY29udmVydCBlcnJvcnMgdG8gdmlkZW9tYWlsIGVycm9yc1xuICAgIGlmIChldmVudCA9PT0gRXZlbnRzLkVSUk9SKSB7XG4gICAgICB2YXIgZXJyID0gYXJnc1sxXVxuXG4gICAgICBlcnIgPSBWaWRlb21haWxFcnJvci5jcmVhdGUoZXJyLCBvcHRpb25zKVxuXG4gICAgICBhcmdzWzFdID0gZXJyXG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZGVidWcpIHtcbiAgICAgIGlmIChldmVudCAhPT0gJ3JlbW92ZUxpc3RlbmVyJyAmJiBldmVudCAhPT0gJ25ld0xpc3RlbmVyJykge1xuICAgICAgICB2YXIgbW9yZUFyZ3VtZW50c1xuXG4gICAgICAgIGlmIChhcmdzWzFdKSB7XG4gICAgICAgICAgbW9yZUFyZ3VtZW50cyA9IGFyZ3Muc2xpY2UoMSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb3JlQXJndW1lbnRzKSB7XG4gICAgICAgICAgb3B0aW9ucy5kZWJ1ZygnJXMgZW1pdHM6ICVzJywgbmFtZSwgZXZlbnQsIG1vcmVBcmd1bWVudHMpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9ucy5kZWJ1ZygnJXMgZW1pdHM6ICVzJywgbmFtZSwgZXZlbnQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBkZXNwb3QuZW1pdC5hcHBseShkZXNwb3QsIGFyZ3MpXG5cbiAgICAvLyBUb2RvOiBoYXZlIHRoaXMgZW1pdHRlZCB0aHJvdWdoIGEgY29uZmlndXJhdGlvbiBiZWNhdXNlIGl0IGlzIHByZXR0eSBub2lzeVxuICAgIC8vIGlmIChldmVudCAhPT0gRXZlbnRzLkVWRU5UX0VNSVRURUQpXG4gICAgLy8gICAgIHRoaXMuZW1pdChFdmVudHMuRVZFTlRfRU1JVFRFRCwgZXZlbnQpXG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICB0aGlzLm9uID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgY2IpIHtcbiAgICByZXR1cm4gZGVzcG90Lm9uKGV2ZW50TmFtZSwgY2IpXG4gIH1cblxuICB0aGlzLm9uY2UgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYikge1xuICAgIHJldHVybiBkZXNwb3Qub25jZShldmVudE5hbWUsIGNiKVxuICB9XG5cbiAgdGhpcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgcmV0dXJuIGRlc3BvdC5saXN0ZW5lcnMoZXZlbnROYW1lKVxuICB9XG5cbiAgdGhpcy5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGNiKSB7XG4gICAgcmV0dXJuIGRlc3BvdC5yZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIGNiKVxuICB9XG5cbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgZGVzcG90LnJlbW92ZUFsbExpc3RlbmVycygpXG4gIH1cbn1cbiIsImltcG9ydCBmaWxlc2l6ZSBmcm9tICdmaWxlc2l6ZSdcbmltcG9ydCBodW1hbml6ZUR1cmF0aW9uIGZyb20gJ2h1bWFuaXplLWR1cmF0aW9uJ1xuXG4vLyB0b2RvIGdldCByaWQgb2YgdGhpcyBjbGFzcyBhbmQgdXNlIHRob3NlIGltcG9ydHMgZGlyZWN0bHlcblxuZXhwb3J0IGRlZmF1bHQge1xuICBmaWxlc2l6ZTogZnVuY3Rpb24gKGJ5dGVzLCByb3VuZCkge1xuICAgIHJldHVybiBmaWxlc2l6ZShieXRlcywge1xuICAgICAgcm91bmQ6IHJvdW5kXG4gICAgfSlcbiAgfSxcblxuICB0b1RpbWU6IGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIGh1bWFuaXplRHVyYXRpb24odClcbiAgfVxufVxuIiwiLy8gdGFrZW4gZnJvbVxuLy8gaHR0cHM6Ly9iYmMuZ2l0aHViLmlvL3RhbC9qc2RvYy9ldmVudHNfbWVkaWFldmVudC5qcy5odG1sXG5cbmV4cG9ydCBkZWZhdWx0IFtcbiAgLy8gVGhlIHVzZXIgYWdlbnQgYmVnaW5zIGxvb2tpbmcgZm9yIG1lZGlhIGRhdGEsIGFzIHBhcnQgb2ZcbiAgLy8gdGhlIHJlc291cmNlIHNlbGVjdGlvbiBhbGdvcml0aG0uXG4gICdsb2Fkc3RhcnQnLFxuXG4gIC8vIFRoZSB1c2VyIGFnZW50IGlzIGludGVudGlvbmFsbHkgbm90IGN1cnJlbnRseSBmZXRjaGluZyBtZWRpYSBkYXRhLFxuICAvLyBidXQgZG9lcyBub3QgaGF2ZSB0aGUgZW50aXJlIG1lZGlhIHJlc291cmNlIGRvd25sb2FkZWQuIG5ldHdvcmtTdGF0ZSBlcXVhbHMgTkVUV09SS19JRExFXG4gICdzdXNwZW5kJyxcblxuICAvLyBQbGF5YmFjayBoYXMgYmVndW4uIEZpcmVkIGFmdGVyIHRoZSBwbGF5KCkgbWV0aG9kIGhhcyByZXR1cm5lZCxcbiAgLy8gb3Igd2hlbiB0aGUgYXV0b3BsYXkgYXR0cmlidXRlIGhhcyBjYXVzZWQgcGxheWJhY2sgdG8gYmVnaW4uXG4gIC8vIHBhdXNlZCBpcyBuZXdseSBmYWxzZS5cbiAgLy8gJ3BsYXknLCBjb21tZW50ZWQgb3V0IHNpbmNlIGl0IGhhcyBzcGVjaWFsIHRyZWF0bWVudFxuXG4gIC8vIFRoZSB1c2VyIGFnZW50IGhhcyBqdXN0IGRldGVybWluZWQgdGhlIGR1cmF0aW9uIGFuZCBkaW1lbnNpb25zIG9mIHRoZVxuICAvLyBtZWRpYSByZXNvdXJjZSBhbmQgdGhlIHRpbWVkIHRyYWNrcyBhcmUgcmVhZHkuXG4gIC8vIHJlYWR5U3RhdGUgaXMgbmV3bHkgZXF1YWwgdG8gSEFWRV9NRVRBREFUQSBvciBncmVhdGVyIGZvciB0aGUgZmlyc3QgdGltZS5cbiAgLy8gJ2xvYWRlZG1ldGFkYXRhJywgY29tbWVudGVkIG91dCBzaW5jZSBpdCBoYXMgc3BlY2lhbCB0cmVhdG1lbnRcblxuICAvLyBUaGUgdXNlciBhZ2VudCBpcyBmZXRjaGluZyBtZWRpYSBkYXRhLlxuICAncHJvZ3Jlc3MnLFxuXG4gIC8vIFRoZSB1c2VyIGFnZW50IGlzIGludGVudGlvbmFsbHkgbm90IGN1cnJlbnRseSBmZXRjaGluZyBtZWRpYSBkYXRhLFxuICAvLyBidXQgZG9lcyBub3QgaGF2ZSB0aGUgZW50aXJlIG1lZGlhIHJlc291cmNlIGRvd25sb2FkZWQuXG4gIC8vICdzdXNwZW5kJywgLy8gY29tbWVudGVkIG91dCwgd2UgYXJlIGFscmVhZHkgbGlzdGVuaW5nIHRvIGl0IGluIGNvZGVcblxuICAvLyBFdmVudCBUaGUgdXNlciBhZ2VudCBzdG9wcyBmZXRjaGluZyB0aGUgbWVkaWEgZGF0YSBiZWZvcmUgaXQgaXMgY29tcGxldGVseSBkb3dubG9hZGVkLFxuICAvLyBidXQgbm90IGR1ZSB0byBhbiBlcnJvci4gIGVycm9yIGlzIGFuIG9iamVjdCB3aXRoIHRoZSBjb2RlIE1FRElBX0VSUl9BQk9SVEVELlxuICAnYWJvcnQnLFxuXG4gIC8vIEEgbWVkaWEgZWxlbWVudCB3aG9zZSBuZXR3b3JrU3RhdGUgd2FzIHByZXZpb3VzbHkgbm90IGluIHRoZSBORVRXT1JLX0VNUFRZXG4gIC8vIHN0YXRlIGhhcyBqdXN0IHN3aXRjaGVkIHRvIHRoYXQgc3RhdGUgKGVpdGhlciBiZWNhdXNlIG9mIGEgZmF0YWwgZXJyb3JcbiAgLy8gZHVyaW5nIGxvYWQgdGhhdCdzIGFib3V0IHRvIGJlIHJlcG9ydGVkLCBvciBiZWNhdXNlIHRoZSBsb2FkKCkgbWV0aG9kIHdhc1xuICAvLyBpbnZva2VkIHdoaWxlIHRoZSByZXNvdXJjZSBzZWxlY3Rpb24gYWxnb3JpdGhtIHdhcyBhbHJlYWR5IHJ1bm5pbmcpLlxuICAnZW1wdGllZCcsXG5cbiAgLy8gVGhlIHVzZXIgYWdlbnQgaXMgdHJ5aW5nIHRvIGZldGNoIG1lZGlhIGRhdGEsIGJ1dCBkYXRhIGlzXG4gIC8vIHVuZXhwZWN0ZWRseSBub3QgZm9ydGhjb21pbmdcbiAgJ3N0YWxsZWQnLFxuXG4gIC8vIFBsYXliYWNrIGhhcyBiZWVuIHBhdXNlZC4gRmlyZWQgYWZ0ZXIgdGhlIHBhdXNlKCkgbWV0aG9kIGhhcyByZXR1cm5lZC5cbiAgLy8gcGF1c2VkIGlzIG5ld2x5IHRydWUuXG4gICdwYXVzZScsXG5cbiAgIC8vIFRoZSB1c2VyIGFnZW50IGNhbiByZW5kZXIgdGhlIG1lZGlhIGRhdGEgYXQgdGhlIGN1cnJlbnQgcGxheWJhY2sgcG9zaXRpb25cbiAgIC8vIGZvciB0aGUgZmlyc3QgdGltZS5cbiAgIC8vIHJlYWR5U3RhdGUgbmV3bHkgaW5jcmVhc2VkIHRvIEhBVkVfQ1VSUkVOVF9EQVRBIG9yIGdyZWF0ZXIgZm9yIHRoZSBmaXJzdCB0aW1lLlxuICAnbG9hZGVkZGF0YScsXG5cbiAgLy8gUGxheWJhY2sgaGFzIHN0b3BwZWQgYmVjYXVzZSB0aGUgbmV4dCBmcmFtZSBpcyBub3QgYXZhaWxhYmxlLCBidXQgdGhlIHVzZXJcbiAgLy8gYWdlbnQgZXhwZWN0cyB0aGF0IGZyYW1lIHRvIGJlY29tZSBhdmFpbGFibGUgaW4gZHVlIGNvdXJzZS5cbiAgLy8gcmVhZHlTdGF0ZSBpcyBuZXdseSBlcXVhbCB0byBvciBsZXNzIHRoYW4gSEFWRV9DVVJSRU5UX0RBVEEsXG4gIC8vIGFuZCBwYXVzZWQgaXMgZmFsc2UuIEVpdGhlciBzZWVraW5nIGlzIHRydWUsIG9yIHRoZSBjdXJyZW50IHBsYXliYWNrXG4gIC8vIHBvc2l0aW9uIGlzIG5vdCBjb250YWluZWQgaW4gYW55IG9mIHRoZSByYW5nZXMgaW4gYnVmZmVyZWQuXG4gIC8vIEl0IGlzIHBvc3NpYmxlIGZvciBwbGF5YmFjayB0byBzdG9wIGZvciB0d28gb3RoZXIgcmVhc29ucyB3aXRob3V0XG4gIC8vIHBhdXNlZCBiZWluZyBmYWxzZSwgYnV0IHRob3NlIHR3byByZWFzb25zIGRvIG5vdCBmaXJlIHRoaXMgZXZlbnQ6XG4gIC8vIG1heWJlIHBsYXliYWNrIGVuZGVkLCBvciBwbGF5YmFjayBzdG9wcGVkIGR1ZSB0byBlcnJvcnMuXG4gICd3YWl0aW5nJyxcblxuICAvLyBQbGF5YmFjayBoYXMgc3RhcnRlZC4gcmVhZHlTdGF0ZSBpcyBuZXdseSBlcXVhbCB0byBvciBncmVhdGVyIHRoYW5cbiAgLy8gSEFWRV9GVVRVUkVfREFUQSwgcGF1c2VkIGlzIGZhbHNlLCBzZWVraW5nIGlzIGZhbHNlLFxuICAvLyBvciB0aGUgY3VycmVudCBwbGF5YmFjayBwb3NpdGlvbiBpcyBjb250YWluZWQgaW4gb25lIG9mIHRoZSByYW5nZXMgaW4gYnVmZmVyZWQuXG4gICdwbGF5aW5nJyxcblxuICAvLyBUaGUgdXNlciBhZ2VudCBjYW4gcmVzdW1lIHBsYXliYWNrIG9mIHRoZSBtZWRpYSBkYXRhLFxuICAvLyBidXQgZXN0aW1hdGVzIHRoYXQgaWYgcGxheWJhY2sgd2VyZSB0byBiZSBzdGFydGVkIG5vdywgdGhlIG1lZGlhIHJlc291cmNlXG4gIC8vIGNvdWxkIG5vdCBiZSByZW5kZXJlZCBhdCB0aGUgY3VycmVudCBwbGF5YmFjayByYXRlIHVwIHRvIGl0cyBlbmQgd2l0aG91dFxuICAvLyBoYXZpbmcgdG8gc3RvcCBmb3IgZnVydGhlciBidWZmZXJpbmcgb2YgY29udGVudC5cbiAgLy8gcmVhZHlTdGF0ZSBuZXdseSBpbmNyZWFzZWQgdG8gSEFWRV9GVVRVUkVfREFUQSBvciBncmVhdGVyLlxuICAnY2FucGxheScsXG5cbiAgLy8gVGhlIHVzZXIgYWdlbnQgZXN0aW1hdGVzIHRoYXQgaWYgcGxheWJhY2sgd2VyZSB0byBiZSBzdGFydGVkIG5vdyxcbiAgLy8gdGhlIG1lZGlhIHJlc291cmNlIGNvdWxkIGJlIHJlbmRlcmVkIGF0IHRoZSBjdXJyZW50IHBsYXliYWNrIHJhdGVcbiAgLy8gYWxsIHRoZSB3YXkgdG8gaXRzIGVuZCB3aXRob3V0IGhhdmluZyB0byBzdG9wIGZvciBmdXJ0aGVyIGJ1ZmZlcmluZy5cbiAgLy8gcmVhZHlTdGF0ZSBpcyBuZXdseSBlcXVhbCB0byBIQVZFX0VOT1VHSF9EQVRBLlxuICAnY2FucGxheXRocm91Z2gnLFxuXG4gIC8vIFRoZSBzZWVraW5nIElETCBhdHRyaWJ1dGUgY2hhbmdlZCB0byB0cnVlIGFuZCB0aGUgc2VlayBvcGVyYXRpb24gaXNcbiAgLy8gdGFraW5nIGxvbmcgZW5vdWdoIHRoYXQgdGhlIHVzZXIgYWdlbnQgaGFzIHRpbWUgdG8gZmlyZSB0aGUgZXZlbnQuXG4gICdzZWVraW5nJyxcblxuICAvLyBUaGUgc2Vla2luZyBJREwgYXR0cmlidXRlIGNoYW5nZWQgdG8gZmFsc2UuXG4gICdzZWVrZWQnLFxuXG4gIC8vIFBsYXliYWNrIGhhcyBzdG9wcGVkIGJlY2F1c2UgdGhlIGVuZCBvZiB0aGUgbWVkaWEgcmVzb3VyY2Ugd2FzIHJlYWNoZWQuXG4gIC8vIGN1cnJlbnRUaW1lIGVxdWFscyB0aGUgZW5kIG9mIHRoZSBtZWRpYSByZXNvdXJjZTsgZW5kZWQgaXMgdHJ1ZS5cbiAgJ2VuZGVkJyxcblxuICAvLyBFaXRoZXIgdGhlIGRlZmF1bHRQbGF5YmFja1JhdGUgb3IgdGhlIHBsYXliYWNrUmF0ZSBhdHRyaWJ1dGVcbiAgLy8gaGFzIGp1c3QgYmVlbiB1cGRhdGVkLlxuICAncmF0ZWNoYW5nZScsXG5cbiAgLy8gVGhlIGR1cmF0aW9uIGF0dHJpYnV0ZSBoYXMganVzdCBiZWVuIHVwZGF0ZWQuXG4gICdkdXJhdGlvbmNoYW5nZScsXG5cbiAgLy8gRWl0aGVyIHRoZSB2b2x1bWUgYXR0cmlidXRlIG9yIHRoZSBtdXRlZCBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQuXG4gIC8vIEZpcmVkIGFmdGVyIHRoZSByZWxldmFudCBhdHRyaWJ1dGUncyBzZXR0ZXIgaGFzIHJldHVybmVkLlxuICAndm9sdW1lY2hhbmdlJ1xuXG4gIC8vIGNvbW1lbnRlZCBvdXQsIGhhcHBlbiB0b28gb2Z0ZW5cblxuICAvLyBUaGUgY3VycmVudCBwbGF5YmFjayBwb3NpdGlvbiBjaGFuZ2VkIGFzIHBhcnQgb2Ygbm9ybWFsIHBsYXliYWNrIG9yIGluXG4gIC8vIGFuIGVzcGVjaWFsbHkgaW50ZXJlc3Rpbmcgd2F5LCBmb3IgZXhhbXBsZSBkaXNjb250aW51b3VzbHkuXG4gIC8vICd0aW1ldXBkYXRlJ1xuXVxuIiwiY29uc3QgREFTSCA9ICctICdcbmNvbnN0IFNFUEFSQVRPUiA9ICc8YnIvPicgKyBEQVNIXG5cbmZ1bmN0aW9uIGFycmF5VG9TdHJpbmcgKGFycmF5KSB7XG4gIGlmIChhcnJheS5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgbGluZXMgPSBbXVxuXG4gICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC50b1N0cmluZykge1xuICAgICAgICBsaW5lcy5wdXNoKGVsZW1lbnQudG9TdHJpbmcoKSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIERBU0ggKyBsaW5lcy5qb2luKFNFUEFSQVRPUilcbiAgfVxufVxuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyAob2JqZWN0LCBvcHRpb25zKSB7XG4gIGNvbnN0IHByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpXG4gIGNvbnN0IGV4Y2x1ZGVzID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5leGNsdWRlcykgfHwgbnVsbFxuICBjb25zdCBsaW5lcyA9IFtdXG4gIHZhciBzTGluZXNcblxuICBpZiAocHJvcGVydHlOYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIGV4Y2x1ZGUgPSBmYWxzZVxuXG4gICAgcHJvcGVydHlOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBpZiAoZXhjbHVkZXMpIHtcbiAgICAgICAgZXhjbHVkZSA9IGV4Y2x1ZGVzLmluZGV4T2YobmFtZSkgPj0gMFxuICAgICAgfVxuXG4gICAgICBpZiAoIWV4Y2x1ZGUgJiYgb2JqZWN0W25hbWVdICYmIG9iamVjdFtuYW1lXS50b1N0cmluZykge1xuICAgICAgICBsaW5lcy5wdXNoKG9iamVjdFtuYW1lXS50b1N0cmluZygpKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBpZiAobGluZXMubGVuZ3RoID09PSAxKSB7XG4gICAgc0xpbmVzID0gbGluZXMuam9pbigpXG4gIH0gZWxzZSBpZiAobGluZXMubGVuZ3RoID4gMSkge1xuICAgIHNMaW5lcyA9IERBU0ggKyBsaW5lcy5qb2luKFNFUEFSQVRPUilcbiAgfVxuXG4gIHJldHVybiBzTGluZXNcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGFueXRoaW5nLCBvcHRpb25zKSB7XG4gIGlmIChhbnl0aGluZyA9PT0gbnVsbCkge1xuICAgIHJldHVybiAnbnVsbCdcbiAgfSBlbHNlIGlmICh0eXBlb2YgYW55dGhpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuICd1bmRlZmluZWQnXG4gIH0gZWxzZSBpZiAodHlwZW9mIGFueXRoaW5nID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBhbnl0aGluZ1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYW55dGhpbmcpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9TdHJpbmcoYW55dGhpbmcpXG4gIH0gZWxzZSBpZiAodHlwZW9mIGFueXRoaW5nID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBvYmplY3RUb1N0cmluZyhhbnl0aGluZywgb3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYW55dGhpbmcudG9TdHJpbmcoKVxuICB9XG59XG4iLCJpbXBvcnQgJ2NsYXNzbGlzdC5qcydcblxuLy8gbmVlZGVkIGZvciBJRSAxMVxuaW1wb3J0ICdlbGVtZW50LWNsb3Nlc3QnXG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qdWxpZW5ldGllL3JlcXVlc3QtZnJhbWVcbmltcG9ydCByZXF1ZXN0RnJhbWUgZnJvbSAncmVxdWVzdC1mcmFtZSdcblxuLy8gdXNlIHRob3NlIGRlZmF1bHQgcGFyYW1zIGZvciB1bml0IHRlc3RzXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAod2luZG93ID0ge30sIG5hdmlnYXRvciA9IHt9KSB7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qdWxpZW5ldGllL3JlcXVlc3QtZnJhbWUvaXNzdWVzLzZcbiAgaWYgKCF3aW5kb3cuc2NyZWVuKSB7XG4gICAgd2luZG93LnNjcmVlbiA9IHt9XG4gIH1cblxuICByZXF1ZXN0RnJhbWUoJ25hdGl2ZScpXG5cbiAgLy8gYXZvaWRzIHdhcm5pbmcgXCJuYXZpZ2F0b3IubW96R2V0VXNlck1lZGlhIGhhcyBiZWVuIHJlcGxhY2VkIGJ5IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhXCIsXG4gIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vYmluYXJ5a2l0Y2hlbi92aWRlb21haWwtY2xpZW50L2lzc3Vlcy83OVxuICBpZiAobmF2aWdhdG9yLm1lZGlhRGV2aWNlcyAmJiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSkge1xuICAgIC8vIGRvIG5vdCBzaGltXG4gIH0gZWxzZSB7XG4gICAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYV8gPVxuICAgICAgICAgICAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSB8fFxuICAgICAgICAgICAgbmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYSB8fFxuICAgICAgICAgICAgbmF2aWdhdG9yLm1vekdldFVzZXJNZWRpYSB8fFxuICAgICAgICAgICAgbmF2aWdhdG9yLm1zR2V0VXNlck1lZGlhXG4gIH1cblxuICBpZiAoIXdpbmRvdy5BdWRpb0NvbnRleHQgJiYgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCkge1xuICAgIHdpbmRvdy5BdWRpb0NvbnRleHQgPSB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0XG4gIH1cblxuICBpZiAoIXdpbmRvdy5VUkwpIHtcbiAgICB3aW5kb3cuVVJMID0gd2luZG93LndlYmtpdFVSTCB8fCB3aW5kb3cubW96VVJMIHx8IHdpbmRvdy5tc1VSTFxuICB9XG5cbiAgY29uc3QgbWV0aG9kcyA9IFtcbiAgICAnZGVidWcnLCAnZ3JvdXBDb2xsYXBzZWQnLCAnZ3JvdXBFbmQnLCAnZXJyb3InLFxuICAgICdleGNlcHRpb24nLCAnaW5mbycsICdsb2cnLCAndHJhY2UnLCAnd2FybidcbiAgXVxuXG4gIHZhciBjb25zb2xlID0ge31cblxuICBpZiAod2luZG93LmNvbnNvbGUpIHtcbiAgICBjb25zb2xlID0gd2luZG93LmNvbnNvbGVcbiAgfSBlbHNlIHtcbiAgICB3aW5kb3cuY29uc29sZSA9IGZ1bmN0aW9uICgpIHt9XG4gIH1cblxuICB2YXIgbWV0aG9kXG4gIHZhciBsZW5ndGggPSBtZXRob2RzLmxlbmd0aFxuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIG1ldGhvZCA9IG1ldGhvZHNbbGVuZ3RoXVxuXG4gICAgaWYgKCFjb25zb2xlW21ldGhvZF0pIHtcbiAgICAgIGNvbnNvbGVbbWV0aG9kXSA9IGZ1bmN0aW9uICgpIHt9XG4gICAgfVxuICB9XG59XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGdyaWVzc2VyL2NyZWF0ZS1lcnJvclxuaW1wb3J0IGNyZWF0ZUVycm9yIGZyb20gJ2NyZWF0ZS1lcnJvcidcbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnXG5cbmltcG9ydCBvcmlnaW5hbFByZXR0eSBmcm9tICcuL3ByZXR0eSdcbmltcG9ydCBSZXNvdXJjZSBmcm9tICcuLy4uL3Jlc291cmNlJ1xuXG5jb25zdCBWSURFT01BSUxfRVJSX05BTUUgPSAnVmlkZW9tYWlsIEVycm9yJ1xuXG5jb25zdCBWaWRlb21haWxFcnJvciA9IGNyZWF0ZUVycm9yKEVycm9yLCBWSURFT01BSUxfRVJSX05BTUUsIHtcbiAgJ2V4cGxhbmF0aW9uJzogdW5kZWZpbmVkLFxuICAnbG9nTGluZXMnOiB1bmRlZmluZWQsXG4gICd1c2VyYWdlbnQnOiB1bmRlZmluZWQsXG4gICd1cmwnOiB1bmRlZmluZWQsXG4gICdzdGFjayc6IHVuZGVmaW5lZFxufSlcblxuLy8gc2hpbSBwcmV0dHkgdG8gZXhjbHVkZSBzdGFjayBhbHdheXNcbmNvbnN0IHByZXR0eSA9IGZ1bmN0aW9uIChhbnl0aGluZykge1xuICByZXR1cm4gb3JpZ2luYWxQcmV0dHkoYW55dGhpbmcsIHtleGNsdWRlczogWydzdGFjayddfSlcbn1cblxuLy8gc3RhdGljIGFuZCBwdWJsaWMgYXR0cmlidXRlIG9mIHRoaXMgY2xhc3NcblZpZGVvbWFpbEVycm9yLlBFUk1JU1NJT05fREVOSUVEID0gJ1BFUk1JU1NJT05fREVOSUVEJ1xuVmlkZW9tYWlsRXJyb3IuTk9UX0FMTE9XRURfRVJST1IgPSAnTm90QWxsb3dlZEVycm9yJ1xuVmlkZW9tYWlsRXJyb3IuTk9UX0NPTk5FQ1RFRCA9ICdOb3QgY29ubmVjdGVkJ1xuVmlkZW9tYWlsRXJyb3IuRE9NX0VYQ0VQVElPTiA9ICdET01FeGNlcHRpb24nXG5WaWRlb21haWxFcnJvci5TVEFSVElOR19GQUlMRUQgPSAnU3RhcnRpbmcgdmlkZW8gZmFpbGVkJ1xuVmlkZW9tYWlsRXJyb3IuTUVESUFfREVWSUNFX05PVF9TVVBQT1JURUQgPSAnTWVkaWFEZXZpY2VOb3RTdXBwb3J0ZWQnXG5WaWRlb21haWxFcnJvci5CUk9XU0VSX1BST0JMRU0gPSAnYnJvd3Nlci1wcm9ibGVtJ1xuVmlkZW9tYWlsRXJyb3IuV0VCQ0FNX1BST0JMRU0gPSAnd2ViY2FtLXByb2JsZW0nXG5WaWRlb21haWxFcnJvci5JT1NfUFJPQkxFTSA9ICdpb3MtcHJvYmxlbSdcblZpZGVvbWFpbEVycm9yLk9WRVJDT05TVFJBSU5FRCA9ICdPdmVyY29uc3RyYWluZWRFcnJvcidcblxuLy8gc3RhdGljIGZ1bmN0aW9uIHRvIGNvbnZlcnQgYW4gZXJyb3IgaW50byBhIHZpZGVvbWFpbCBlcnJvclxuVmlkZW9tYWlsRXJyb3IuY3JlYXRlID0gZnVuY3Rpb24gKGVyciwgZXhwbGFuYXRpb24sIG9wdGlvbnMsIHBhcmFtZXRlcnMpIHtcbiAgaWYgKGVyciAmJiBlcnIubmFtZSA9PT0gVklERU9NQUlMX0VSUl9OQU1FKSB7XG4gICAgcmV0dXJuIGVyclxuICB9XG5cbiAgaWYgKCFvcHRpb25zICYmIGV4cGxhbmF0aW9uKSB7XG4gICAgb3B0aW9ucyA9IGV4cGxhbmF0aW9uXG4gICAgZXhwbGFuYXRpb24gPSB1bmRlZmluZWRcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzIHx8IHt9XG5cbiAgLy8gYmUgc3VwZXIgcm9idXN0XG4gIGNvbnN0IGRlYnVnID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWJ1ZykgfHwgY29uc29sZS5sb2dcbiAgY29uc3QgYXVkaW9FbmFibGVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmlzQXVkaW9FbmFibGVkICYmIG9wdGlvbnMuaXNBdWRpb0VuYWJsZWQoKVxuXG4gIGRlYnVnKCdWaWRlb21haWxFcnJvcjogY3JlYXRlKCknKVxuXG4gIGNvbnN0IGNsYXNzTGlzdCA9IHBhcmFtZXRlcnMuY2xhc3NMaXN0IHx8IFtdXG5cbiAgLy8gUmVxdWlyZSBCcm93c2VyIGhlcmUsIG5vdCBhdCB0aGUgdG9wIG9mIHRoZSBmaWxlIHRvIGF2b2lkXG4gIC8vIHJlY3Vyc2lvbi4gQmVjYXVzZSB0aGUgQnJvd3NlciBjbGFzcyBpcyByZXF1aXJpbmcgdGhpcyBmaWxlIGFzIHdlbGwuXG4gIGNvbnN0IEJyb3dzZXIgPSByZXF1aXJlKCcuL2Jyb3dzZXInKVxuICBjb25zdCBicm93c2VyID0gbmV3IEJyb3dzZXIob3B0aW9ucylcblxuICB2YXIgZXJyVHlwZVxuICB2YXIgbWVzc2FnZVxuICB2YXIgc3RhY2tcblxuICAgIC8vIHdob2xlIGNvZGUgaXMgdWdseSBiZWNhdXNlIGFsbCBicm93c2VycyBiZWhhdmUgc28gZGlmZmVyZW50bHkgOihcblxuICBpZiAodHlwZW9mIGVyciA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAoZXJyLmNvZGUgPT09IDM1KSB7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYmluYXJ5a2l0Y2hlbi92aWRlb21haWwuaW8vaXNzdWVzLzQxMVxuICAgICAgZXJyVHlwZSA9IFZpZGVvbWFpbEVycm9yLk5PVF9BTExPV0VEX0VSUk9SXG4gICAgfSBlbHNlIGlmIChlcnIuY29kZSA9PT0gMSAmJiBlcnIuUEVSTUlTU0lPTl9ERU5JRUQgPT09IDEpIHtcbiAgICAgIGVyclR5cGUgPSBWaWRlb21haWxFcnJvci5QRVJNSVNTSU9OX0RFTklFRFxuICAgIH0gZWxzZSBpZiAoZXJyLmNvbnN0cnVjdG9yICYmIGVyci5jb25zdHJ1Y3Rvci5uYW1lID09PSBWaWRlb21haWxFcnJvci5ET01fRVhDRVBUSU9OKSB7XG4gICAgICBlcnJUeXBlID0gVmlkZW9tYWlsRXJyb3IuRE9NX0VYQ0VQVElPTlxuICAgIH0gZWxzZSBpZiAoZXJyLmNvbnN0cnVjdG9yICYmIGVyci5jb25zdHJ1Y3Rvci5uYW1lID09PSBWaWRlb21haWxFcnJvci5PVkVSQ09OU1RSQUlORUQpIHtcbiAgICAgIGVyclR5cGUgPSBWaWRlb21haWxFcnJvci5PVkVSQ09OU1RSQUlORURcbiAgICB9IGVsc2UgaWYgKGVyci5tZXNzYWdlID09PSBWaWRlb21haWxFcnJvci5TVEFSVElOR19GQUlMRUQpIHtcbiAgICAgIGVyclR5cGUgPSBlcnIubWVzc2FnZVxuICAgIH0gZWxzZSBpZiAoZXJyLm5hbWUpIHtcbiAgICAgIGVyclR5cGUgPSBlcnIubmFtZVxuICAgIH0gZWxzZSBpZiAoZXJyLnR5cGUgPT09ICdlcnJvcicgJiYgZXJyLnRhcmdldC5idWZmZXJlZEFtb3VudCA9PT0gMCkge1xuICAgICAgZXJyVHlwZSA9IFZpZGVvbWFpbEVycm9yLk5PVF9DT05ORUNURURcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXJyID09PSBWaWRlb21haWxFcnJvci5OT1RfQ09OTkVDVEVEKSB7XG4gICAgZXJyVHlwZSA9IFZpZGVvbWFpbEVycm9yLk5PVF9DT05ORUNURURcbiAgfSBlbHNlIHtcbiAgICBlcnJUeXBlID0gZXJyXG4gIH1cblxuICBpZiAoZXJyICYmIGVyci5zdGFjaykge1xuICAgIHN0YWNrID0gZXJyLnN0YWNrXG4gIH1cblxuICBzd2l0Y2ggKGVyclR5cGUpIHtcbiAgICBjYXNlIFZpZGVvbWFpbEVycm9yLk9WRVJDT05TVFJBSU5FRDpcbiAgICAgIG1lc3NhZ2UgPSAnSW52YWxpZCB3ZWJjYW0gY29uc3RyYWludHMnXG5cbiAgICAgIGlmIChlcnIuY29uc3RyYWludCkge1xuICAgICAgICBpZiAoZXJyLmNvbnN0cmFpbnQgPT09ICd3aWR0aCcpIHtcbiAgICAgICAgICBleHBsYW5hdGlvbiA9ICdZb3VyIHdlYmNhbSBkb2VzIG5vdCBtZWV0IHRoZSB3aWR0aCByZXF1aXJlbWVudC4nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXhwbGFuYXRpb24gPSAnVW5tZXQgY29uc3RyYWludDogJyArIGVyci5jb25zdHJhaW50XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4cGxhbmF0aW9uID0gJyBEZXRhaWxzOiAnICsgcHJldHR5KGVycilcbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnU291cmNlVW5hdmFpbGFibGVFcnJvcic6XG4gICAgICBtZXNzYWdlID0gJ1NvdXJjZSBvZiB5b3VyIHdlYmNhbSBjYW5ub3QgYmUgYWNjZXNzZWQnXG4gICAgICBleHBsYW5hdGlvbiA9ICdQcm9iYWJseSBpdCBpcyBsb2NrZWQgZnJvbSBhbm90aGVyIHByb2Nlc3Mgb3IgaGFzIGEgaGFyZHdhcmUgZXJyb3IuJ1xuXG4gICAgICBpZiAoZXJyLm1lc3NhZ2UpIHtcbiAgICAgICAgZXJyLm1lc3NhZ2UgKz0gJyBEZXRhaWxzOiAnICsgZXJyLm1lc3NhZ2VcbiAgICAgIH1cblxuICAgICAgYnJlYWtcbiAgICBjYXNlICdOb3RGb3VuZEVycm9yJzpcbiAgICBjYXNlICdOT19ERVZJQ0VTX0ZPVU5EJzpcbiAgICAgIGlmIChhdWRpb0VuYWJsZWQpIHtcbiAgICAgICAgbWVzc2FnZSA9ICdObyB3ZWJjYW0gbm9yIG1pY3JvcGhvbmUgZm91bmQnXG4gICAgICAgIGV4cGxhbmF0aW9uID0gJ1lvdXIgYnJvd3NlciBjYW5ub3QgZmluZCBhIHdlYmNhbSB3aXRoIG1pY3JvcGhvbmUgYXR0YWNoZWQgdG8geW91ciBtYWNoaW5lLidcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lc3NhZ2UgPSAnTm8gd2ViY2FtIGZvdW5kJ1xuICAgICAgICBleHBsYW5hdGlvbiA9ICdZb3VyIGJyb3dzZXIgY2Fubm90IGZpbmQgYSB3ZWJjYW0gYXR0YWNoZWQgdG8geW91ciBtYWNoaW5lLidcbiAgICAgIH1cblxuICAgICAgY2xhc3NMaXN0LnB1c2goVmlkZW9tYWlsRXJyb3IuV0VCQ0FNX1BST0JMRU0pXG4gICAgICBicmVha1xuXG4gICAgY2FzZSAnUGVybWlzc2lvbkRpc21pc3NlZEVycm9yJzpcbiAgICAgIG1lc3NhZ2UgPSAnT29vcHMsIHlvdSBkaWRuXFwndCBnaXZlIG1lIGFueSBwZXJtaXNzaW9ucz8nXG4gICAgICBleHBsYW5hdGlvbiA9ICdMb29rcyBsaWtlIHlvdSBza2lwcGVkIHRoZSB3ZWJjYW0gcGVybWlzc2lvbiBkaWFsb2d1ZS48YnIvPicgK1xuICAgICAgICAgICAgICAgICAgICAnUGxlYXNlIGdyYW50IGFjY2VzcyBuZXh0IHRpbWUgdGhlIGRpYWxvZ3VlIGFwcGVhcnMuJ1xuICAgICAgY2xhc3NMaXN0LnB1c2goVmlkZW9tYWlsRXJyb3IuV0VCQ0FNX1BST0JMRU0pXG4gICAgICBicmVha1xuXG4gICAgY2FzZSBWaWRlb21haWxFcnJvci5OT1RfQUxMT1dFRF9FUlJPUjpcbiAgICBjYXNlIFZpZGVvbWFpbEVycm9yLlBFUk1JU1NJT05fREVOSUVEOlxuICAgIGNhc2UgJ1Blcm1pc3Npb25EZW5pZWRFcnJvcic6XG4gICAgICBtZXNzYWdlID0gJ1Blcm1pc3Npb24gZGVuaWVkJ1xuXG4gICAgICBleHBsYW5hdGlvbiA9ICdDYW5ub3QgYWNjZXNzIHlvdXIgd2ViY2FtLiBUaGlzIGNhbiBoYXZlIHR3byByZWFzb25zOjxici8+JyArXG4gICAgICAgICAgICAgICAgICAgICdhKSB5b3UgYmxvY2tlZCBhY2Nlc3MgdG8gd2ViY2FtOyBvcjxici8+JyArXG4gICAgICAgICAgICAgICAgICAgICdiKSB5b3VyIHdlYmNhbSBpcyBhbHJlYWR5IGluIHVzZS4nXG5cbiAgICAgIGNsYXNzTGlzdC5wdXNoKFZpZGVvbWFpbEVycm9yLldFQkNBTV9QUk9CTEVNKVxuXG4gICAgICBicmVha1xuXG4gICAgY2FzZSAnSEFSRFdBUkVfVU5BVkFJTEFCTEUnOlxuICAgICAgbWVzc2FnZSA9ICdXZWJjYW0gaXMgdW5hdmFpbGFibGUnXG4gICAgICBleHBsYW5hdGlvbiA9ICdNYXliZSBpdCBpcyBhbHJlYWR5IGJ1c3kgaW4gYW5vdGhlciB3aW5kb3c/J1xuXG4gICAgICBpZiAoYnJvd3Nlci5pc0Nocm9tZUJhc2VkKCkpIHtcbiAgICAgICAgZXhwbGFuYXRpb24gKz0gJyBPciB5b3UgaGF2ZSB0byBhbGxvdyBhY2Nlc3MgYWJvdmU/J1xuICAgICAgfVxuXG4gICAgICBjbGFzc0xpc3QucHVzaChWaWRlb21haWxFcnJvci5XRUJDQU1fUFJPQkxFTSlcblxuICAgICAgYnJlYWtcblxuICAgIGNhc2UgVmlkZW9tYWlsRXJyb3IuTk9UX0NPTk5FQ1RFRDpcbiAgICAgIG1lc3NhZ2UgPSAnVW5hYmxlIHRvIHRyYW5zZmVyIGRhdGEnXG4gICAgICBleHBsYW5hdGlvbiA9ICdVbmFibGUgdG8gbWFpbnRhaW4gYSB3ZWJzb2NrZXQgdG8gdGhlIHNlcnZlci4gRWl0aGVyIHNlcnZlciBvciAnICtcbiAgICAgICAgICAgICAgICAgICAgJ3lvdXIgY29ubmVjdGlvbiBpcyBkb3duLiBUcnlpbmcgdG8gcmVjb25uZWN0IGV2ZXJ5IHR3byBzZWNvbmRzIOKApidcbiAgICAgIGJyZWFrXG5cbiAgICBjYXNlICdOT19WSURFT19GRUVEJzpcbiAgICAgIG1lc3NhZ2UgPSAnTm8gdmlkZW8gZmVlZCBmb3VuZCEnXG4gICAgICBleHBsYW5hdGlvbiA9ICdZb3VyIHdlYmNhbSBpcyBhbHJlYWR5IHVzZWQgaW4gYW5vdGhlciBicm93c2VyLidcbiAgICAgIGNsYXNzTGlzdC5wdXNoKFZpZGVvbWFpbEVycm9yLldFQkNBTV9QUk9CTEVNKVxuICAgICAgYnJlYWtcblxuICAgIGNhc2UgVmlkZW9tYWlsRXJyb3IuU1RBUlRJTkdfRkFJTEVEOlxuICAgICAgbWVzc2FnZSA9ICdTdGFydGluZyB2aWRlbyBmYWlsZWQnXG4gICAgICBleHBsYW5hdGlvbiA9ICdNb3N0IGxpa2VseSB0aGlzIGhhcHBlbnMgd2hlbiB0aGUgd2ViYW0gaXMgYWxyZWFkeSBhY3RpdmUgaW4gYW5vdGhlciBicm93c2VyLidcbiAgICAgIGNsYXNzTGlzdC5wdXNoKFZpZGVvbWFpbEVycm9yLldFQkNBTV9QUk9CTEVNKVxuICAgICAgYnJlYWtcblxuICAgIGNhc2UgJ0RldmljZXNOb3RGb3VuZEVycm9yJzpcbiAgICAgIG1lc3NhZ2UgPSAnTm8gYXZhaWxhYmxlIHdlYmNhbSBjb3VsZCBiZSBmb3VuZCdcbiAgICAgIGV4cGxhbmF0aW9uID0gJ0xvb2tzIGxpa2UgeW91IGRvIG5vdCBoYXZlIGFueSB3ZWJjYW0gYXR0YWNoZWQgdG8geW91ciBtYWNoaW5lOyBvciAnICtcbiAgICAgICAgICAgICAgICAgICAgJ3RoZSBvbmUgeW91IHBsdWdnZWQgaW4gaXMgYWxyZWFkeSB1c2VkLidcbiAgICAgIGNsYXNzTGlzdC5wdXNoKFZpZGVvbWFpbEVycm9yLldFQkNBTV9QUk9CTEVNKVxuICAgICAgYnJlYWtcblxuICAgIGNhc2UgVmlkZW9tYWlsRXJyb3IuRE9NX0VYQ0VQVElPTjpcbiAgICAgIGlmIChlcnIuY29kZSA9PT0gOSkge1xuICAgICAgICBjb25zdCBuZXdVcmwgPSAnaHR0cHM6JyArIHdpbmRvdy5sb2NhdGlvbi5ocmVmLnN1YnN0cmluZyh3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wubGVuZ3RoKVxuICAgICAgICBtZXNzYWdlID0gJ1NlY3VyaXR5IHVwZ3JhZGUgbmVlZGVkJ1xuICAgICAgICBleHBsYW5hdGlvbiA9ICdDbGljayA8YSBocmVmPVwiJyArIG5ld1VybCArICdcIj5oZXJlPC9hPiB0byBzd2l0Y2ggdG8gSFRUUHMgd2hpY2ggaXMgbW9yZSBzYWZlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICcgYW5kIGVuYWJsZXMgZW5jcnlwdGVkIHZpZGVvbWFpbCB0cmFuc2ZlcnMuJ1xuICAgICAgICBjbGFzc0xpc3QucHVzaChWaWRlb21haWxFcnJvci5CUk9XU0VSX1BST0JMRU0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlID0gVmlkZW9tYWlsRXJyb3IuRE9NX0VYQ0VQVElPTlxuICAgICAgICBleHBsYW5hdGlvbiA9IHByZXR0eShlcnIpXG4gICAgICB9XG4gICAgICBicmVha1xuXG4gICAgLy8gQ2hyb21lIGhhcyBhIHdlaXJkIHByb2JsZW0gd2hlcmUgaWYgeW91IHRyeSB0byBkbyBhIGdldFVzZXJNZWRpYSByZXF1ZXN0IHRvbyBlYXJseSwgaXRcbiAgICAvLyBjYW4gcmV0dXJuIGEgTWVkaWFEZXZpY2VOb3RTdXBwb3J0ZWQgZXJyb3IgKGV2ZW4gdGhvdWdoIG5vdGhpbmcgaXMgd3JvbmcgYW5kIHBlcm1pc3Npb25cbiAgICAvLyBoYXMgYmVlbiBncmFudGVkKS4gTG9vayBhdCB1c2VyTWVkaWFFcnJvckNhbGxiYWNrKCkgaW4gcmVjb3JkZXIsIHRoZXJlIHdlIGRvIG5vdFxuICAgIC8vIGVtaXQgdGhvc2Uga2luZCBvZiBlcnJvcnMgZnVydGhlciBhbmQganVzdCByZXRyeS5cbiAgICAvL1xuICAgIC8vIGJ1dCBmb3Igd2hhdGV2ZXIgcmVhc29ucywgaWYgaXQgaGFwcGVucyB0byByZWFjaCB0aGlzIGNvZGUsIHRoZW4gaW52ZXN0aWdhdGUgdGhpcyBmdXJ0aGVyLlxuICAgIGNhc2UgVmlkZW9tYWlsRXJyb3IuTUVESUFfREVWSUNFX05PVF9TVVBQT1JURUQ6XG4gICAgICBtZXNzYWdlID0gJ01lZGlhIGRldmljZSBub3Qgc3VwcG9ydGVkJ1xuICAgICAgZXhwbGFuYXRpb24gPSBwcmV0dHkoZXJyKVxuICAgICAgYnJlYWtcblxuICAgIGRlZmF1bHQ6XG4gICAgICBjb25zdCBvcmlnaW5hbEV4cGxhbmF0aW9uID0gZXhwbGFuYXRpb25cblxuICAgICAgaWYgKGV4cGxhbmF0aW9uICYmIHR5cGVvZiBleHBsYW5hdGlvbiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZXhwbGFuYXRpb24gPSBwcmV0dHkoZXhwbGFuYXRpb24pXG4gICAgICB9XG5cbiAgICAgIC8vIGl0IGNhbiBiZSB0aGF0IGV4cGxhbmF0aW9uIGl0c2VsZiBpcyBhbiBlcnJvciBvYmplY3RcbiAgICAgIC8vIGVycm9yIG9iamVjdHMgY2FuIGJlIHByZXR0aWZpZWQgdG8gdW5kZWZpbmVkIHNvbWV0aW1lc1xuICAgICAgaWYgKCFleHBsYW5hdGlvbiAmJiBvcmlnaW5hbEV4cGxhbmF0aW9uKSB7XG4gICAgICAgIGlmIChvcmlnaW5hbEV4cGxhbmF0aW9uLm1lc3NhZ2UpIHtcbiAgICAgICAgICBleHBsYW5hdGlvbiA9IG9yaWdpbmFsRXhwbGFuYXRpb24ubWVzc2FnZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHRyaWVkIHRvU3RyaW5nIGJlZm9yZSBidXQgbmFoXG4gICAgICAgICAgZXhwbGFuYXRpb24gPSB1dGlsLmluc3BlY3Qob3JpZ2luYWxFeHBsYW5hdGlvbiwge3Nob3dIaWRkZW46IHRydWV9KVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlcnIgJiYgdHlwZW9mIGVyciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWVzc2FnZSA9IGVyclxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGlmIChlcnIubWVzc2FnZSkge1xuICAgICAgICAgICAgbWVzc2FnZSA9IHByZXR0eShlcnIubWVzc2FnZSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXJyICYmIGVyci5leHBsYW5hdGlvbikge1xuICAgICAgICAgIGlmICghZXhwbGFuYXRpb24pIHtcbiAgICAgICAgICAgIGV4cGxhbmF0aW9uID0gcHJldHR5KGVyci5leHBsYW5hdGlvbilcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXhwbGFuYXRpb24gKz0gJzs8YnIvPicgKyBwcmV0dHkoZXJyLmV4cGxhbmF0aW9uKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnIgJiYgZXJyLmRldGFpbHMpIHtcbiAgICAgICAgICB2YXIgZGV0YWlscyA9IHByZXR0eShlcnIuZGV0YWlscylcblxuICAgICAgICAgIGlmICghZXhwbGFuYXRpb24pIHtcbiAgICAgICAgICAgIGV4cGxhbmF0aW9uID0gZGV0YWlsc1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleHBsYW5hdGlvbiArPSAnOzxici8+JyArIGRldGFpbHNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gZm9yIHdlaXJkLCB1bmRlZmluZWQgY2FzZXNcbiAgICAgIGlmICghbWVzc2FnZSkge1xuICAgICAgICBpZiAoZXJyVHlwZSkge1xuICAgICAgICAgIG1lc3NhZ2UgPSBlcnJUeXBlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWV4cGxhbmF0aW9uICYmIGVycikge1xuICAgICAgICAgIGV4cGxhbmF0aW9uID0gcHJldHR5KGVyciwge2V4Y2x1ZGVzOiBbJ3N0YWNrJ119KVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYXZvaWQgZHVwZXNcbiAgICAgICAgaWYgKHByZXR0eShtZXNzYWdlKSA9PT0gZXhwbGFuYXRpb24pIHtcbiAgICAgICAgICBleHBsYW5hdGlvbiA9IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGJyZWFrXG4gIH1cblxuICB2YXIgbG9nTGluZXMgPSBudWxsXG5cbiAgaWYgKG9wdGlvbnMubG9nZ2VyICYmIG9wdGlvbnMubG9nZ2VyLmdldExpbmVzKSB7XG4gICAgbG9nTGluZXMgPSBvcHRpb25zLmxvZ2dlci5nZXRMaW5lcygpXG4gIH1cblxuICBpZiAoc3RhY2spIHtcbiAgICBtZXNzYWdlID0gbmV3IEVycm9yKG1lc3NhZ2UpXG4gICAgbWVzc2FnZS5zdGFjayA9IHN0YWNrXG4gIH1cblxuICB2YXIgZXJyQ29kZSA9ICdub25lJ1xuXG4gIGlmIChlcnIpIHtcbiAgICBlcnJDb2RlID0gJ2NvZGU9JyArIChlcnIuY29kZSA/IGVyci5jb2RlIDogJ3VuZGVmaW5lZCcpXG4gICAgZXJyQ29kZSArPSAnLCB0eXBlPScgKyAoZXJyLnR5cGUgPyBlcnIudHlwZSA6ICd1bmRlZmluZWQnKVxuICAgIGVyckNvZGUgKz0gJywgbmFtZT0nICsgKGVyci5uYW1lID8gZXJyLm5hbWUgOiAndW5kZWZpbmVkJylcbiAgfVxuXG4gIGNvbnN0IHZpZGVvbWFpbEVycm9yID0gbmV3IFZpZGVvbWFpbEVycm9yKG1lc3NhZ2UsIHtcbiAgICBleHBsYW5hdGlvbjogZXhwbGFuYXRpb24sXG4gICAgbG9nTGluZXM6IGxvZ0xpbmVzLFxuICAgIGNsaWVudDogYnJvd3Nlci5nZXRVc2VmdWxEYXRhKCksXG4gICAgdXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZixcbiAgICBjb2RlOiBlcnJDb2RlLFxuICAgIHN0YWNrOiBzdGFjayAvLyBoYXZlIHRvIGFzc2lnbiBpdCBtYW51YWxseSBhZ2FpbiBiZWNhdXNlIGl0IGlzIGtpbmRhIHByb3RlY3RlZFxuICB9KVxuXG4gIHZhciByZXNvdXJjZVxuICB2YXIgcmVwb3J0RXJyb3JzID0gZmFsc2VcblxuICBpZiAob3B0aW9ucy5yZXBvcnRFcnJvcnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVwb3J0RXJyb3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXBvcnRFcnJvcnMgPSBvcHRpb25zLnJlcG9ydEVycm9ycyh2aWRlb21haWxFcnJvcilcbiAgICB9IGVsc2Uge1xuICAgICAgcmVwb3J0RXJyb3JzID0gb3B0aW9ucy5yZXBvcnRFcnJvcnNcbiAgICB9XG4gIH1cblxuICBpZiAocmVwb3J0RXJyb3JzKSB7XG4gICAgcmVzb3VyY2UgPSBuZXcgUmVzb3VyY2Uob3B0aW9ucylcbiAgfVxuXG4gIGlmIChyZXNvdXJjZSkge1xuICAgIHJlc291cmNlLnJlcG9ydEVycm9yKHZpZGVvbWFpbEVycm9yLCBmdW5jdGlvbiAoZXJyMikge1xuICAgICAgaWYgKGVycjIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIHJlcG9ydCBlcnJvcicsIGVycjIpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc0NsYXNzIChuYW1lKSB7XG4gICAgcmV0dXJuIGNsYXNzTGlzdC5pbmRleE9mKG5hbWUpID49IDBcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQnJvd3NlclByb2JsZW0gKCkge1xuICAgIHJldHVybiBoYXNDbGFzcyhWaWRlb21haWxFcnJvci5CUk9XU0VSX1BST0JMRU0pIHx8IHBhcmFtZXRlcnMuYnJvd3NlclByb2JsZW1cbiAgfVxuXG4gIC8vIGFkZCBzb21lIHB1YmxpYyBmdW5jdGlvbnNcblxuICAvLyB0aGlzIG9uZSBpcyB1c2VmdWwgc28gdGhhdCB0aGUgbm90aWZpZXIgY2FuIGhhdmUgZGlmZmVyZW50IGNzcyBjbGFzc2VzXG4gIHZpZGVvbWFpbEVycm9yLmdldENsYXNzTGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2xhc3NMaXN0XG4gIH1cblxuICB2aWRlb21haWxFcnJvci5yZW1vdmVEaW1lbnNpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBoYXNDbGFzcyhWaWRlb21haWxFcnJvci5JT1NfUFJPQkxFTSkgfHwgYnJvd3Nlci5pc01vYmlsZSgpXG4gIH1cblxuICB2aWRlb21haWxFcnJvci5oaWRlQnV0dG9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNCcm93c2VyUHJvYmxlbSgpIHx8IGhhc0NsYXNzKFZpZGVvbWFpbEVycm9yLklPU19QUk9CTEVNKVxuICB9XG5cbiAgdmlkZW9tYWlsRXJyb3IuaGlkZUZvcm0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGhhc0NsYXNzKFZpZGVvbWFpbEVycm9yLklPU19QUk9CTEVNKVxuICB9XG5cbiAgcmV0dXJuIHZpZGVvbWFpbEVycm9yXG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpZGVvbWFpbEVycm9yXG4iLCJpbXBvcnQgdXRpbCBmcm9tICd1dGlsJ1xuaW1wb3J0IGggZnJvbSAnaHlwZXJzY3JpcHQnXG5pbXBvcnQgaGlkZGVuIGZyb20gJ2hpZGRlbidcbmltcG9ydCBjb250YWlucyBmcm9tICdjb250YWlucydcblxuaW1wb3J0IEV2ZW50cyBmcm9tICcuLy4uL2V2ZW50cydcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi8uLi91dGlsL2V2ZW50RW1pdHRlcidcblxuY29uc3QgQnV0dG9ucyA9IGZ1bmN0aW9uIChjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcywgb3B0aW9ucywgJ0J1dHRvbnMnKVxuXG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGNvbnN0IGRlYnVnID0gb3B0aW9ucy5kZWJ1Z1xuXG4gIHZhciBidXR0b25zRWxlbWVudFxuICB2YXIgcmVjb3JkQnV0dG9uXG4gIHZhciBwYXVzZUJ1dHRvblxuICB2YXIgcmVzdW1lQnV0dG9uXG4gIHZhciBwcmV2aWV3QnV0dG9uXG4gIHZhciByZWNvcmRBZ2FpbkJ1dHRvblxuICB2YXIgc3VibWl0QnV0dG9uXG5cbiAgdmFyIGF1ZGlvT25SYWRpb1BhaXJcbiAgdmFyIGF1ZGlvT2ZmUmFkaW9QYWlyXG5cbiAgdmFyIGJ1aWx0XG5cbiAgZnVuY3Rpb24gaGlkZSAoZWxlbWVudHMpIHtcbiAgICBpZiAoZWxlbWVudHMgJiYgIUFycmF5LmlzQXJyYXkoZWxlbWVudHMpKSB7XG4gICAgICBlbGVtZW50cyA9IFtlbGVtZW50c11cbiAgICB9XG5cbiAgICBlbGVtZW50cyAmJiBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBoaWRkZW4oZWxlbWVudCwgdHJ1ZSlcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gc2hvdyAoZWxlbWVudHMpIHtcbiAgICBpZiAoZWxlbWVudHMgJiYgIUFycmF5LmlzQXJyYXkoZWxlbWVudHMpKSB7XG4gICAgICBlbGVtZW50cyA9IFtlbGVtZW50c11cbiAgICB9XG5cbiAgICBlbGVtZW50cyAmJiBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBoaWRkZW4oZWxlbWVudCwgZmFsc2UpXG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU2hvd24gKGVsZW1lbnRzKSB7XG4gICAgdmFyIGlzU2hvd24gPSBlbGVtZW50cyAmJiB0cnVlXG5cbiAgICBpZiAoZWxlbWVudHMgJiYgIUFycmF5LmlzQXJyYXkoZWxlbWVudHMpKSB7XG4gICAgICBlbGVtZW50cyA9IFtlbGVtZW50c11cbiAgICB9XG5cbiAgICBlbGVtZW50cyAmJiBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpc1Nob3duID0gaXNTaG93biAmJiBlbGVtZW50ICYmICFoaWRkZW4oZWxlbWVudClcbiAgICB9KVxuXG4gICAgcmV0dXJuIGlzU2hvd25cbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc2FibGUgKGVsZW1lbnRzKSB7XG4gICAgaWYgKGVsZW1lbnRzICYmICFBcnJheS5pc0FycmF5KGVsZW1lbnRzKSkge1xuICAgICAgZWxlbWVudHMgPSBbZWxlbWVudHNdXG4gICAgfVxuXG4gICAgZWxlbWVudHMgJiYgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKGVsZW1lbnQudGFnTmFtZSA9PT0gJ0lOUFVUJyB8fCBlbGVtZW50LnRhZ05hbWUgPT09ICdCVVRUT04nKSB7XG4gICAgICAgIGVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2Rpc2FibGVkJylcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gZW5hYmxlIChlbGVtZW50cykge1xuICAgIGlmIChlbGVtZW50cyAmJiAhQXJyYXkuaXNBcnJheShlbGVtZW50cykpIHtcbiAgICAgIGVsZW1lbnRzID0gW2VsZW1lbnRzXVxuICAgIH1cblxuICAgIGVsZW1lbnRzICYmIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGlmIChlbGVtZW50LnRhZ05hbWUgPT09ICdJTlBVVCcgfHwgZWxlbWVudC50YWdOYW1lID09PSAnQlVUVE9OJykge1xuICAgICAgICBlbGVtZW50LmRpc2FibGVkID0gZmFsc2VcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBhZGp1c3RCdXR0b24gKGJ1dHRvbkVsZW1lbnQsIHNob3csIHR5cGUsIGRpc2FibGVkKSB7XG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBkaXNhYmxlKGJ1dHRvbkVsZW1lbnQpXG4gICAgfVxuXG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIGJ1dHRvbkVsZW1lbnQudHlwZSA9IHR5cGVcbiAgICB9IGVsc2UgaWYgKCFidXR0b25FbGVtZW50LnR5cGUpIHtcbiAgICAgIGJ1dHRvbkVsZW1lbnQudHlwZSA9ICdidXR0b24nXG4gICAgfVxuXG4gICAgIXNob3cgJiYgaGlkZShidXR0b25FbGVtZW50KVxuXG4gICAgcmV0dXJuIGJ1dHRvbkVsZW1lbnRcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VDbGlja0hhbmRsZXIgKGVsZW1lbnQsIGNsaWNrSGFuZGxlcikge1xuICAgIGNvbnN0IHdyYXBwZWRDbGlja0hhbmRsZXIgPSAoZSkgPT4ge1xuICAgICAgZSAmJiBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICAgdHJ5IHtcbiAgICAgICAgY2xpY2tIYW5kbGVyKHtldmVudDogZX0pXG4gICAgICB9IGNhdGNoIChleGMpIHtcbiAgICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgZXhjKVxuICAgICAgfVxuICAgIH1cblxuICAgIGVsZW1lbnQub25jbGljayA9IHdyYXBwZWRDbGlja0hhbmRsZXJcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VSYWRpb0J1dHRvblBhaXIgKG9wdGlvbnMpIHtcbiAgICB2YXIgcmFkaW9CdXR0b25FbGVtZW50XG4gICAgdmFyIHJhZGlvQnV0dG9uR3JvdXBcblxuICAgIGlmIChvcHRpb25zLmlkKSB7XG4gICAgICByYWRpb0J1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvcHRpb25zLmlkKVxuICAgIH1cblxuICAgIGlmICghcmFkaW9CdXR0b25FbGVtZW50KSB7XG4gICAgICByYWRpb0J1dHRvbkVsZW1lbnQgPSBoKCdpbnB1dCMnICsgb3B0aW9ucy5pZCwge1xuICAgICAgICB0eXBlOiAncmFkaW8nLFxuICAgICAgICBuYW1lOiBvcHRpb25zLm5hbWUsXG4gICAgICAgIHZhbHVlOiBvcHRpb25zLnZhbHVlLFxuICAgICAgICBjaGVja2VkOiBvcHRpb25zLmNoZWNrZWRcbiAgICAgIH0pXG5cbiAgICAgIHJhZGlvQnV0dG9uR3JvdXAgPSBoKCdzcGFuLnJhZGlvR3JvdXAnLCByYWRpb0J1dHRvbkVsZW1lbnQsIGgoJ2xhYmVsJywge1xuICAgICAgICAnaHRtbEZvcic6IG9wdGlvbnMuaWRcbiAgICAgIH0sIG9wdGlvbnMubGFiZWwpKVxuXG4gICAgICAvLyBkb3VibGUgY2hlY2sgdGhhdCBzdWJtaXQgYnV0dG9uIGlzIGFscmVhZHkgaW4gdGhlIGJ1dHRvbnNFbGVtZW50IGNvbnRhaW5lciBhcyBhIGNoaWxkP1xuICAgICAgaWYgKHN1Ym1pdEJ1dHRvbiAmJiBjb250YWlucyhidXR0b25zRWxlbWVudCwgc3VibWl0QnV0dG9uKSkge1xuICAgICAgICBidXR0b25zRWxlbWVudC5pbnNlcnRCZWZvcmUocmFkaW9CdXR0b25Hcm91cCwgc3VibWl0QnV0dG9uKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnV0dG9uc0VsZW1lbnQuYXBwZW5kQ2hpbGQocmFkaW9CdXR0b25Hcm91cClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jaGFuZ2VIYW5kbGVyKSB7XG4gICAgICByYWRpb0J1dHRvbkVsZW1lbnQub25jaGFuZ2UgPSBvcHRpb25zLmNoYW5nZUhhbmRsZXJcbiAgICB9XG5cbiAgICBkaXNhYmxlKHJhZGlvQnV0dG9uRWxlbWVudClcblxuICAgIHJldHVybiBbcmFkaW9CdXR0b25FbGVtZW50LCByYWRpb0J1dHRvbkdyb3VwXVxuICB9XG5cbiAgZnVuY3Rpb24gbWFrZUJ1dHRvbiAoYnV0dG9uQ2xhc3MsIHRleHQsIGNsaWNrSGFuZGxlciwgc2hvdywgaWQsIHR5cGUsIHNlbGVjdG9yLCBkaXNhYmxlZCA9IHRydWUpIHtcbiAgICB2YXIgYnV0dG9uRWxlbWVudFxuXG4gICAgaWYgKGlkKSB7XG4gICAgICBidXR0b25FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpXG4gICAgfSBlbHNlIGlmIChzZWxlY3Rvcikge1xuICAgICAgYnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1dHRvbkVsZW1lbnQgPSBidXR0b25zRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIGJ1dHRvbkNsYXNzKVxuICAgIH1cblxuICAgIGlmICghYnV0dG9uRWxlbWVudCkge1xuICAgICAgaWYgKG9wdGlvbnMuc2VsZWN0b3JzLmJ1dHRvbkNsYXNzKSB7XG4gICAgICAgIGJ1dHRvbkNsYXNzICs9ICcuJyArIG9wdGlvbnMuc2VsZWN0b3JzLmJ1dHRvbkNsYXNzXG4gICAgICB9XG5cbiAgICAgIGJ1dHRvbkVsZW1lbnQgPSBoKCdidXR0b24uJyArIGJ1dHRvbkNsYXNzKVxuICAgICAgYnV0dG9uRWxlbWVudCA9IGFkanVzdEJ1dHRvbihidXR0b25FbGVtZW50LCBzaG93LCB0eXBlLCBkaXNhYmxlZClcblxuICAgICAgYnV0dG9uRWxlbWVudC5pbm5lckhUTUwgPSB0ZXh0XG5cbiAgICAgIC8vIGRvdWJsZSBjaGVjayB0aGF0IHN1Ym1pdCBidXR0b24gaXMgYWxyZWFkeSBpbiB0aGUgYnV0dG9uc0VsZW1lbnQgY29udGFpbmVyXG4gICAgICBpZiAoc3VibWl0QnV0dG9uICYmIGNvbnRhaW5zKGJ1dHRvbnNFbGVtZW50LCBzdWJtaXRCdXR0b24pKSB7XG4gICAgICAgIGJ1dHRvbnNFbGVtZW50Lmluc2VydEJlZm9yZShidXR0b25FbGVtZW50LCBzdWJtaXRCdXR0b24pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBidXR0b25zRWxlbWVudC5hcHBlbmRDaGlsZChidXR0b25FbGVtZW50KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBidXR0b25FbGVtZW50ID0gYWRqdXN0QnV0dG9uKGJ1dHRvbkVsZW1lbnQsIHNob3csIHR5cGUsIGRpc2FibGVkKVxuICAgIH1cblxuICAgIGlmIChjbGlja0hhbmRsZXIpIHtcbiAgICAgIHJlcGxhY2VDbGlja0hhbmRsZXIoYnV0dG9uRWxlbWVudCwgY2xpY2tIYW5kbGVyKVxuICAgIH1cblxuICAgIHJldHVybiBidXR0b25FbGVtZW50XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZEJ1dHRvbnMgKCkge1xuICAgIGlmICghb3B0aW9ucy5kaXNhYmxlU3VibWl0KSB7XG4gICAgICBpZiAoIXN1Ym1pdEJ1dHRvbikge1xuICAgICAgICBzdWJtaXRCdXR0b24gPSBtYWtlQnV0dG9uKFxuICAgICAgICAgIG9wdGlvbnMuc2VsZWN0b3JzLnN1Ym1pdEJ1dHRvbkNsYXNzLFxuICAgICAgICAgICdTdWJtaXQnLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICBvcHRpb25zLnNlbGVjdG9ycy5zdWJtaXRCdXR0b25JZCxcbiAgICAgICAgICAnc3VibWl0JyxcbiAgICAgICAgICBvcHRpb25zLnNlbGVjdG9ycy5zdWJtaXRCdXR0b25TZWxlY3RvcixcbiAgICAgICAgICBvcHRpb25zLmVuYWJsZUF1dG9WYWxpZGF0aW9uXG4gICAgICAgIClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpc2FibGUoc3VibWl0QnV0dG9uKVxuICAgICAgfVxuXG4gICAgICAvLyBubyBuZWVkIHRvIGxpc3RlbiB0byB0aGUgc3VibWl0IGV2ZW50IHdoZW4gaXQncyBhbHJlYWR5IGxpc3RlbmVkXG4gICAgICAvLyB3aXRoaW4gdGhlIGZvcm0gZWxlbWVudCBjbGFzc1xuICAgICAgaWYgKCFjb250YWluZXIuaGFzRm9ybSgpICYmIHN1Ym1pdEJ1dHRvbikge1xuICAgICAgICByZXBsYWNlQ2xpY2tIYW5kbGVyKHN1Ym1pdEJ1dHRvbiwgc3VibWl0KVxuICAgICAgfVxuICAgIH1cblxuICAgIHJlY29yZEJ1dHRvbiA9IG1ha2VCdXR0b24oXG4gICAgICBvcHRpb25zLnNlbGVjdG9ycy5yZWNvcmRCdXR0b25DbGFzcyxcbiAgICAgIG9wdGlvbnMudGV4dC5idXR0b25zLnJlY29yZCxcbiAgICAgIHJlY29yZCxcbiAgICAgIGZhbHNlXG4gICAgKVxuXG4gICAgaWYgKG9wdGlvbnMuZW5hYmxlUGF1c2UpIHtcbiAgICAgIHBhdXNlQnV0dG9uID0gbWFrZUJ1dHRvbihcbiAgICAgICAgb3B0aW9ucy5zZWxlY3RvcnMucGF1c2VCdXR0b25DbGFzcyxcbiAgICAgICAgb3B0aW9ucy50ZXh0LmJ1dHRvbnMucGF1c2UsXG4gICAgICAgIGNvbnRhaW5lci5wYXVzZSxcbiAgICAgICAgZmFsc2VcbiAgICAgIClcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5lbmFibGVQYXVzZSkge1xuICAgICAgcmVzdW1lQnV0dG9uID0gbWFrZUJ1dHRvbihcbiAgICAgICAgb3B0aW9ucy5zZWxlY3RvcnMucmVzdW1lQnV0dG9uQ2xhc3MsXG4gICAgICAgIG9wdGlvbnMudGV4dC5idXR0b25zLnJlc3VtZSxcbiAgICAgICAgY29udGFpbmVyLnJlc3VtZSxcbiAgICAgICAgZmFsc2VcbiAgICAgIClcbiAgICB9XG5cbiAgICAvLyBzaG93IHN0b3Agb25seSB3aGVuIHBhdXNlIGlzIGVuYWJsZWQgLSBsb29rcyBiZXR0ZXIgdGhhdCB3YXkgb3RoZXJ3aXNlIGJ1dHRvblxuICAgIC8vIG1vdmUgbGVmdCBhbmQgcmlnaHQgYmV0d2VlbiByZWNvcmQgYW5kIHN0b3AgKHByZXZpZXcpXG4gICAgcHJldmlld0J1dHRvbiA9IG1ha2VCdXR0b24oXG4gICAgICBvcHRpb25zLnNlbGVjdG9ycy5wcmV2aWV3QnV0dG9uQ2xhc3MsXG4gICAgICBvcHRpb25zLnRleHQuYnV0dG9ucy5wcmV2aWV3LFxuICAgICAgY29udGFpbmVyLnN0b3AsXG4gICAgICBmYWxzZVxuICAgIClcblxuICAgIHJlY29yZEFnYWluQnV0dG9uID0gbWFrZUJ1dHRvbihcbiAgICAgIG9wdGlvbnMuc2VsZWN0b3JzLnJlY29yZEFnYWluQnV0dG9uQ2xhc3MsXG4gICAgICBvcHRpb25zLnRleHQuYnV0dG9ucy5yZWNvcmRBZ2FpbixcbiAgICAgIHJlY29yZEFnYWluLFxuICAgICAgZmFsc2VcbiAgICApXG5cbiAgICBpZiAob3B0aW9ucy5hdWRpbyAmJiBvcHRpb25zLmF1ZGlvLnN3aXRjaCkge1xuICAgICAgYXVkaW9PZmZSYWRpb1BhaXIgPSBtYWtlUmFkaW9CdXR0b25QYWlyKHtcbiAgICAgICAgaWQ6ICdhdWRpb09mZk9wdGlvbicsXG4gICAgICAgIG5hbWU6ICdhdWRpbycsXG4gICAgICAgIHZhbHVlOiAnb2ZmJyxcbiAgICAgICAgbGFiZWw6ICdBdWRpbyBPZmYnLFxuICAgICAgICBjaGVja2VkOiAhb3B0aW9ucy5pc0F1ZGlvRW5hYmxlZCgpLFxuICAgICAgICBjaGFuZ2VIYW5kbGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29udGFpbmVyLmRpc2FibGVBdWRpbygpXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIGF1ZGlvT25SYWRpb1BhaXIgPSBtYWtlUmFkaW9CdXR0b25QYWlyKHtcbiAgICAgICAgaWQ6ICdhdWRpb09uT3B0aW9uJyxcbiAgICAgICAgbmFtZTogJ2F1ZGlvJyxcbiAgICAgICAgdmFsdWU6ICdvbicsXG4gICAgICAgIGxhYmVsOiAnQXVkaW8gT24gKEJldGEpJyxcbiAgICAgICAgY2hlY2tlZDogb3B0aW9ucy5pc0F1ZGlvRW5hYmxlZCgpLFxuICAgICAgICBjaGFuZ2VIYW5kbGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29udGFpbmVyLmVuYWJsZUF1ZGlvKClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkZvcm1SZWFkeSAocGFyYW1zKSB7XG4gICAgLy8gbm8gbmVlZCB0byBzaG93IHJlY29yZCBidXR0b24gd2hlbiBkb2luZyBhIHJlY29yZCBhZ2FpblxuICAgIGlmICghaXNTaG93bihyZWNvcmRBZ2FpbkJ1dHRvbikpIHtcbiAgICAgIGlmICghcGFyYW1zLnBhdXNlZCkge1xuICAgICAgICBzaG93KHJlY29yZEJ1dHRvbilcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXBhcmFtcy5wYXVzZWQpIHtcbiAgICAgIGRpc2FibGUocHJldmlld0J1dHRvbilcbiAgICAgIGhpZGUocHJldmlld0J1dHRvbilcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMuZW5hYmxlQXV0b1ZhbGlkYXRpb24pIHtcbiAgICAgIGVuYWJsZShzdWJtaXRCdXR0b24pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Hb2luZ0JhY2sgKCkge1xuICAgIGhpZGUocmVjb3JkQWdhaW5CdXR0b24pXG4gICAgc2hvdyhyZWNvcmRCdXR0b24pXG4gICAgc2hvdyhzdWJtaXRCdXR0b24pXG4gIH1cblxuICBmdW5jdGlvbiBvblJlcGxheVNob3duICgpIHtcbiAgICBzZWxmLmhpZGUoKVxuICB9XG5cbiAgZnVuY3Rpb24gb25Vc2VyTWVkaWFSZWFkeSAob3B0aW9ucykge1xuICAgIG9uRm9ybVJlYWR5KG9wdGlvbnMpXG5cbiAgICBpZiAoaXNTaG93bihyZWNvcmRCdXR0b24pKSB7XG4gICAgICBlbmFibGUocmVjb3JkQnV0dG9uKVxuICAgIH1cblxuICAgIGlmIChpc1Nob3duKGF1ZGlvT25SYWRpb1BhaXIpKSB7XG4gICAgICBlbmFibGUoYXVkaW9PblJhZGlvUGFpcilcbiAgICB9XG5cbiAgICBpZiAoaXNTaG93bihhdWRpb09mZlJhZGlvUGFpcikpIHtcbiAgICAgIGVuYWJsZShhdWRpb09mZlJhZGlvUGFpcilcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5lbmFibGVBdXRvVmFsaWRhdGlvbikge1xuICAgICAgZGlzYWJsZShzdWJtaXRCdXR0b24pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25SZXNldHRpbmcgKCkge1xuICAgIGRpc2FibGUoc3VibWl0QnV0dG9uKVxuXG4gICAgc2VsZi5yZXNldCgpXG4gIH1cblxuICBmdW5jdGlvbiBvblByZXZpZXcgKCkge1xuICAgIGhpZGUocmVjb3JkQnV0dG9uKVxuICAgIGhpZGUocHJldmlld0J1dHRvbilcbiAgICBkaXNhYmxlKGF1ZGlvT25SYWRpb1BhaXIpXG4gICAgZGlzYWJsZShhdWRpb09mZlJhZGlvUGFpcilcblxuICAgIHNob3cocmVjb3JkQWdhaW5CdXR0b24pXG4gICAgZW5hYmxlKHJlY29yZEFnYWluQnV0dG9uKVxuXG4gICAgaWYgKCFvcHRpb25zLmVuYWJsZUF1dG9WYWxpZGF0aW9uKSB7XG4gICAgICBlbmFibGUoc3VibWl0QnV0dG9uKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuZW5hYmxlU3VibWl0ID0gZnVuY3Rpb24gKCkge1xuICAgIGVuYWJsZShzdWJtaXRCdXR0b24pXG4gIH1cblxuICB0aGlzLmFkanVzdEJ1dHRvbnNGb3JQYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNlbGYuaXNDb3VudGluZ0Rvd24oKSkge1xuICAgICAgcGF1c2VCdXR0b24gJiYgaGlkZShwYXVzZUJ1dHRvbilcbiAgICAgIHNob3cocmVzdW1lQnV0dG9uKVxuICAgICAgZW5hYmxlKHJlc3VtZUJ1dHRvbilcbiAgICAgIGhpZGUocmVjb3JkQnV0dG9uKVxuICAgICAgc2hvdyhwcmV2aWV3QnV0dG9uKVxuICAgICAgZW5hYmxlKHByZXZpZXdCdXR0b24pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25GaXJzdEZyYW1lU2VudCAoKSB7XG4gICAgaGlkZShyZWNvcmRCdXR0b24pXG4gICAgaGlkZShyZWNvcmRBZ2FpbkJ1dHRvbilcblxuICAgIGlmIChwYXVzZUJ1dHRvbikge1xuICAgICAgc2hvdyhwYXVzZUJ1dHRvbilcbiAgICAgIGVuYWJsZShwYXVzZUJ1dHRvbilcbiAgICB9XG5cbiAgICBlbmFibGUocHJldmlld0J1dHRvbilcbiAgICBzaG93KHByZXZpZXdCdXR0b24pXG4gIH1cblxuICBmdW5jdGlvbiBvblJlY29yZGluZyAoZnJhbWVzQ291bnQpIHtcbiAgICAvLyBpdCBpcyBwb3NzaWJsZSB0byBoaWRlIHdoaWxlIHJlY29yZGluZywgaGVuY2VcbiAgICAvLyBjaGVjayBmcmFtZXNDb3VudCBmaXJzdCAoY29taW5nIGZyb20gcmVjb3JkZXIpXG4gICAgaWYgKGZyYW1lc0NvdW50ID4gMSkge1xuICAgICAgb25GaXJzdEZyYW1lU2VudCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGRpc2FibGUoYXVkaW9PZmZSYWRpb1BhaXIpXG4gICAgICBkaXNhYmxlKGF1ZGlvT25SYWRpb1BhaXIpXG4gICAgICBkaXNhYmxlKHJlY29yZEFnYWluQnV0dG9uKVxuICAgICAgZGlzYWJsZShyZWNvcmRCdXR0b24pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25SZXN1bWluZyAoKSB7XG4gICAgaGlkZShyZXN1bWVCdXR0b24pXG4gICAgaGlkZShyZWNvcmRCdXR0b24pXG5cbiAgICBpZiAocGF1c2VCdXR0b24pIHtcbiAgICAgIGVuYWJsZShwYXVzZUJ1dHRvbilcbiAgICAgIHNob3cocGF1c2VCdXR0b24pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25TdG9wcGluZyAoKSB7XG4gICAgZGlzYWJsZShwcmV2aWV3QnV0dG9uKVxuICAgIGhpZGUocGF1c2VCdXR0b24pXG4gICAgaGlkZShyZXN1bWVCdXR0b24pXG4gIH1cblxuICBmdW5jdGlvbiBvbkNvdW50ZG93biAoKSB7XG4gICAgZGlzYWJsZShyZWNvcmRCdXR0b24pXG4gICAgZGlzYWJsZShhdWRpb09mZlJhZGlvUGFpcilcbiAgICBkaXNhYmxlKGF1ZGlvT25SYWRpb1BhaXIpXG4gIH1cblxuICBmdW5jdGlvbiBvblN1Ym1pdHRpbmcgKCkge1xuICAgIGRpc2FibGUoc3VibWl0QnV0dG9uKVxuICAgIGRpc2FibGUocmVjb3JkQWdhaW5CdXR0b24pXG4gIH1cblxuICBmdW5jdGlvbiBvblN1Ym1pdHRlZCAoKSB7XG4gICAgZGlzYWJsZShwcmV2aWV3QnV0dG9uKVxuICAgIGRpc2FibGUocmVjb3JkQWdhaW5CdXR0b24pXG4gICAgZGlzYWJsZShyZWNvcmRCdXR0b24pXG4gICAgZGlzYWJsZShzdWJtaXRCdXR0b24pXG4gIH1cblxuICBmdW5jdGlvbiBvbkludmFsaWQgKCkge1xuICAgIGlmIChvcHRpb25zLmVuYWJsZUF1dG9WYWxpZGF0aW9uKSB7XG4gICAgICBkaXNhYmxlKHN1Ym1pdEJ1dHRvbilcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblZhbGlkICgpIHtcbiAgICBpZiAob3B0aW9ucy5lbmFibGVBdXRvVmFsaWRhdGlvbikge1xuICAgICAgZW5hYmxlKHN1Ym1pdEJ1dHRvbilcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkhpZGRlbiAoKSB7XG4gICAgaGlkZShyZWNvcmRCdXR0b24pXG4gICAgaGlkZShwcmV2aWV3QnV0dG9uKVxuICAgIGhpZGUocmVjb3JkQWdhaW5CdXR0b24pXG4gICAgaGlkZShyZXN1bWVCdXR0b24pXG4gIH1cblxuICBmdW5jdGlvbiBvbkVuYWJsaW5nQXVkaW8gKCkge1xuICAgIGRpc2FibGUocmVjb3JkQnV0dG9uKVxuICAgIGRpc2FibGUoYXVkaW9PblJhZGlvUGFpcilcbiAgICBkaXNhYmxlKGF1ZGlvT2ZmUmFkaW9QYWlyKVxuICB9XG5cbiAgZnVuY3Rpb24gb25EaXNhYmxpbmdBdWRpbyAoKSB7XG4gICAgZGlzYWJsZShyZWNvcmRCdXR0b24pXG4gICAgZGlzYWJsZShhdWRpb09uUmFkaW9QYWlyKVxuICAgIGRpc2FibGUoYXVkaW9PZmZSYWRpb1BhaXIpXG4gIH1cblxuICBmdW5jdGlvbiByZWNvcmRBZ2FpbiAoKSB7XG4gICAgZGlzYWJsZShyZWNvcmRBZ2FpbkJ1dHRvbilcbiAgICBjb250YWluZXIuYmVnaW5XYWl0aW5nKClcbiAgICBjb250YWluZXIucmVjb3JkQWdhaW4oKVxuICB9XG5cbiAgZnVuY3Rpb24gb25TdGFydGluZ092ZXIgKCkge1xuICAgIHNob3coc3VibWl0QnV0dG9uKVxuICB9XG5cbiAgZnVuY3Rpb24gc3VibWl0ICgpIHtcbiAgICBjb250YWluZXIuc3VibWl0KClcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29yZCAocGFyYW1zKSB7XG4gICAgZGlzYWJsZShyZWNvcmRCdXR0b24pXG4gICAgY29udGFpbmVyLnJlY29yZChwYXJhbXMpXG4gIH1cblxuICBmdW5jdGlvbiBpbml0RXZlbnRzICgpIHtcbiAgICBkZWJ1ZygnQnV0dG9uczogaW5pdEV2ZW50cygpJylcblxuICAgIHNlbGYub24oRXZlbnRzLlVTRVJfTUVESUFfUkVBRFksIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICBvblVzZXJNZWRpYVJlYWR5KG9wdGlvbnMpXG4gICAgfSkub24oRXZlbnRzLlBSRVZJRVcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIG9uUHJldmlldygpXG4gICAgfSkub24oRXZlbnRzLlBBVVNFRCwgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5hZGp1c3RCdXR0b25zRm9yUGF1c2UoKVxuICAgIH0pLm9uKEV2ZW50cy5SRUNPUkRJTkcsIGZ1bmN0aW9uIChmcmFtZXNDb3VudCkge1xuICAgICAgb25SZWNvcmRpbmcoZnJhbWVzQ291bnQpXG4gICAgfSkub24oRXZlbnRzLkZJUlNUX0ZSQU1FX1NFTlQsIGZ1bmN0aW9uICgpIHtcbiAgICAgIG9uRmlyc3RGcmFtZVNlbnQoKVxuICAgIH0pLm9uKEV2ZW50cy5SRVNVTUlORywgZnVuY3Rpb24gKCkge1xuICAgICAgb25SZXN1bWluZygpXG4gICAgfSkub24oRXZlbnRzLlNUT1BQSU5HLCBmdW5jdGlvbiAoKSB7XG4gICAgICBvblN0b3BwaW5nKClcbiAgICB9KS5vbihFdmVudHMuQ09VTlRET1dOLCBmdW5jdGlvbiAoKSB7XG4gICAgICBvbkNvdW50ZG93bigpXG4gICAgfSkub24oRXZlbnRzLlNVQk1JVFRJTkcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIG9uU3VibWl0dGluZygpXG4gICAgfSkub24oRXZlbnRzLlJFU0VUVElORywgZnVuY3Rpb24gKCkge1xuICAgICAgb25SZXNldHRpbmcoKVxuICAgIH0pLm9uKEV2ZW50cy5JTlZBTElELCBmdW5jdGlvbiAoKSB7XG4gICAgICBvbkludmFsaWQoKVxuICAgIH0pLm9uKEV2ZW50cy5WQUxJRCwgZnVuY3Rpb24gKCkge1xuICAgICAgb25WYWxpZCgpXG4gICAgfSkub24oRXZlbnRzLlNVQk1JVFRFRCwgZnVuY3Rpb24gKCkge1xuICAgICAgb25TdWJtaXR0ZWQoKVxuICAgIH0pLm9uKEV2ZW50cy5ISURFLCBmdW5jdGlvbiAoKSB7XG4gICAgICBvbkhpZGRlbigpXG4gICAgfSkub24oRXZlbnRzLkZPUk1fUkVBRFksIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICBvbkZvcm1SZWFkeShvcHRpb25zKVxuICAgIH0pLm9uKEV2ZW50cy5SRVBMQVlfU0hPV04sIGZ1bmN0aW9uICgpIHtcbiAgICAgIG9uUmVwbGF5U2hvd24oKVxuICAgIH0pLm9uKEV2ZW50cy5HT0lOR19CQUNLLCBmdW5jdGlvbiAoKSB7XG4gICAgICBvbkdvaW5nQmFjaygpXG4gICAgfSkub24oRXZlbnRzLkVOQUJMSU5HX0FVRElPLCBmdW5jdGlvbiAoKSB7XG4gICAgICBvbkVuYWJsaW5nQXVkaW8oKVxuICAgIH0pLm9uKEV2ZW50cy5ESVNBQkxJTkdfQVVESU8sIGZ1bmN0aW9uICgpIHtcbiAgICAgIG9uRGlzYWJsaW5nQXVkaW8oKVxuICAgIH0pLm9uKEV2ZW50cy5TVEFSVElOR19PVkVSLCBmdW5jdGlvbiAoKSB7XG4gICAgICBvblN0YXJ0aW5nT3ZlcigpXG4gICAgfSkub24oRXZlbnRzLkVSUk9SLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAvLyBzaW5jZSBodHRwczovL2dpdGh1Yi5jb20vYmluYXJ5a2l0Y2hlbi92aWRlb21haWwtY2xpZW50L2lzc3Vlcy82MFxuICAgICAgLy8gd2UgaGlkZSBhcmVhcyB0byBtYWtlIGl0IGVhc2llciBmb3IgdGhlIHVzZXJcbiAgICAgIGlmIChlcnIuaGlkZUJ1dHRvbnMgJiYgZXJyLmhpZGVCdXR0b25zKCkgJiYgb3B0aW9ucy5hZGp1c3RGb3JtT25Ccm93c2VyRXJyb3IpIHtcbiAgICAgICAgc2VsZi5oaWRlKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICBvcHRpb25zLmRlYnVnKCdCdXR0b25zOiByZXNldCgpJylcblxuICAgIGRpc2FibGUocGF1c2VCdXR0b24pXG4gICAgZGlzYWJsZShyZXN1bWVCdXR0b24pXG4gICAgZGlzYWJsZShyZWNvcmRCdXR0b24pXG4gICAgZGlzYWJsZShwcmV2aWV3QnV0dG9uKVxuICAgIGRpc2FibGUocmVjb3JkQWdhaW5CdXR0b24pXG4gIH1cblxuICB0aGlzLmlzUmVjb3JkQWdhaW5CdXR0b25FbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhcmVjb3JkQWdhaW5CdXR0b24uZGlzYWJsZWRcbiAgfVxuXG4gIHRoaXMuaXNSZWNvcmRCdXR0b25FbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhcmVjb3JkQnV0dG9uLmRpc2FibGVkXG4gIH1cblxuICB0aGlzLnNldFN1Ym1pdEJ1dHRvbiA9IGZ1bmN0aW9uIChuZXdTdWJtaXRCdXR0b24pIHtcbiAgICBzdWJtaXRCdXR0b24gPSBuZXdTdWJtaXRCdXR0b25cbiAgfVxuXG4gIHRoaXMuZ2V0U3VibWl0QnV0dG9uID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzdWJtaXRCdXR0b25cbiAgfVxuXG4gIHRoaXMuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgYnV0dG9uc0VsZW1lbnQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLicgKyBvcHRpb25zLnNlbGVjdG9ycy5idXR0b25zQ2xhc3MpXG5cbiAgICBpZiAoIWJ1dHRvbnNFbGVtZW50KSB7XG4gICAgICBidXR0b25zRWxlbWVudCA9IGgoJ2Rpdi4nICsgb3B0aW9ucy5zZWxlY3RvcnMuYnV0dG9uc0NsYXNzKVxuXG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uc0VsZW1lbnQpXG4gICAgfVxuXG4gICAgYnVpbGRCdXR0b25zKClcblxuICAgICFidWlsdCAmJiBpbml0RXZlbnRzKClcblxuICAgIGJ1aWx0ID0gdHJ1ZVxuICB9XG5cbiAgdGhpcy51bmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgYnVpbHQgPSBmYWxzZVxuICB9XG5cbiAgdGhpcy5oaWRlID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIGhpZGUoYnV0dG9uc0VsZW1lbnQpXG5cbiAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5kZWVwKSB7XG4gICAgICBoaWRlKHJlY29yZEJ1dHRvbilcbiAgICAgIGhpZGUocGF1c2VCdXR0b24pXG4gICAgICBoaWRlKHJlc3VtZUJ1dHRvbilcbiAgICAgIGhpZGUocHJldmlld0J1dHRvbilcbiAgICAgIGhpZGUocmVjb3JkQWdhaW5CdXR0b24pXG4gICAgICBoaWRlKHN1Ym1pdEJ1dHRvbilcbiAgICB9XG4gIH1cblxuICB0aGlzLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2hvdyhidXR0b25zRWxlbWVudClcbiAgfVxuXG4gIHRoaXMuaXNDb3VudGluZ0Rvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5pc0NvdW50aW5nRG93bigpXG4gIH1cbn1cblxudXRpbC5pbmhlcml0cyhCdXR0b25zLCBFdmVudEVtaXR0ZXIpXG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbnNcbiIsImltcG9ydCBpbnNlcnRDc3MgZnJvbSAnaW5zZXJ0LWNzcydcbmltcG9ydCBoaWRkZW4gZnJvbSAnaGlkZGVuJ1xuaW1wb3J0IHV0aWwgZnJvbSAndXRpbCdcbmltcG9ydCBWaXNpYmlsaXR5IGZyb20gJ2RvY3VtZW50LXZpc2liaWxpdHknXG5cbmltcG9ydCBEaW1lbnNpb24gZnJvbSAnLi9kaW1lbnNpb24nXG5pbXBvcnQgVmlzdWFscyBmcm9tICcuL3Zpc3VhbHMnXG5pbXBvcnQgQnV0dG9ucyBmcm9tICcuL2J1dHRvbnMnXG5pbXBvcnQgRm9ybSBmcm9tICcuL2Zvcm0nXG5pbXBvcnQgT3B0aW9uc1dyYXBwZXIgZnJvbSAnLi9vcHRpb25zV3JhcHBlcidcblxuaW1wb3J0IFJlc291cmNlIGZyb20gJy4vLi4vcmVzb3VyY2UnXG5pbXBvcnQgRXZlbnRzIGZyb20gJy4vLi4vZXZlbnRzJ1xuXG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJy4vLi4vdXRpbC9ldmVudEVtaXR0ZXInXG5pbXBvcnQgVmlkZW9tYWlsRXJyb3IgZnJvbSAnLi8uLi91dGlsL3ZpZGVvbWFpbEVycm9yJ1xuaW1wb3J0IGNzcyBmcm9tICcuLy4uL3N0eWxlcy9jc3MvbWFpbi5taW4uY3NzLmpzJ1xuXG52YXIgQ29udGFpbmVyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcywgb3B0aW9ucywgJ0NvbnRhaW5lcicpXG5cbiAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICBjb25zdCB2aXNpYmlsaXR5ID0gVmlzaWJpbGl0eSgpXG4gIGNvbnN0IHZpc3VhbHMgPSBuZXcgVmlzdWFscyh0aGlzLCBvcHRpb25zKVxuICBjb25zdCBidXR0b25zID0gbmV3IEJ1dHRvbnModGhpcywgb3B0aW9ucylcbiAgY29uc3QgcmVzb3VyY2UgPSBuZXcgUmVzb3VyY2Uob3B0aW9ucylcbiAgY29uc3QgaHRtbEVsZW1lbnQgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2h0bWwnKVxuICBjb25zdCBkZWJ1ZyA9IG9wdGlvbnMuZGVidWdcblxuICB2YXIgaGFzRXJyb3IgPSBmYWxzZVxuICB2YXIgc3VibWl0dGVkID0gZmFsc2VcbiAgdmFyIGxhc3RWYWxpZGF0aW9uID0gZmFsc2VcblxuICB2YXIgY29udGFpbmVyRWxlbWVudFxuICB2YXIgYnVpbHRcbiAgdmFyIGZvcm1cblxuICBmdW5jdGlvbiBwcmVwZW5kRGVmYXVsdENzcyAoKSB7XG4gICAgaW5zZXJ0Q3NzKGNzcywge3ByZXBlbmQ6IHRydWV9KVxuICB9XG5cbiAgICAvLyBzaW5jZSBodHRwczovL2dpdGh1Yi5jb20vYmluYXJ5a2l0Y2hlbi92aWRlb21haWwtY2xpZW50L2lzc3Vlcy84N1xuICBmdW5jdGlvbiBmaW5kUGFyZW50Rm9ybUVsZW1lbnQgKCkge1xuICAgIHJldHVybiBjb250YWluZXJFbGVtZW50LmNsb3Nlc3QoJ2Zvcm0nKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Rm9ybUVsZW1lbnQgKCkge1xuICAgIHZhciBmb3JtRWxlbWVudFxuXG4gICAgaWYgKGNvbnRhaW5lckVsZW1lbnQudGFnTmFtZSA9PT0gJ0ZPUk0nKSB7XG4gICAgICBmb3JtRWxlbWVudCA9IGNvbnRhaW5lckVsZW1lbnRcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuc2VsZWN0b3JzLmZvcm1JZCkge1xuICAgICAgZm9ybUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvcHRpb25zLnNlbGVjdG9ycy5mb3JtSWQpXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcm1FbGVtZW50ID0gZmluZFBhcmVudEZvcm1FbGVtZW50KClcbiAgICB9XG5cbiAgICByZXR1cm4gZm9ybUVsZW1lbnRcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkRm9ybSAoKSB7XG4gICAgY29uc3QgZm9ybUVsZW1lbnQgPSBnZXRGb3JtRWxlbWVudCgpXG5cbiAgICBpZiAoZm9ybUVsZW1lbnQpIHtcbiAgICAgIGRlYnVnKCdDb250YWluZXI6IGJ1aWxkRm9ybSgpJylcbiAgICAgIGZvcm0gPSBuZXcgRm9ybShzZWxmLCBmb3JtRWxlbWVudCwgb3B0aW9ucylcblxuICAgICAgY29uc3Qgc3VibWl0QnV0dG9uID0gZm9ybS5maW5kU3VibWl0QnV0dG9uKClcbiAgICAgIHN1Ym1pdEJ1dHRvbiAmJiBidXR0b25zLnNldFN1Ym1pdEJ1dHRvbihzdWJtaXRCdXR0b24pXG5cbiAgICAgIGZvcm0uYnVpbGQoKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkQ2hpbGRyZW4gKCkge1xuICAgIGRlYnVnKCdDb250YWluZXI6IGJ1aWxkQ2hpbGRyZW4oKScpXG5cbiAgICBpZiAoIWNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgICBzZWxmLmVtaXQoRXZlbnRzLkVSUk9SLCBWaWRlb21haWxFcnJvci5jcmVhdGUoJ1NvcnJ5LCB5b3VyIGJyb3dzZXIgaXMgdG9vIG9sZCEnLCBvcHRpb25zKSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKCd2aWRlb21haWwnKVxuXG4gICAgICBpZiAoIW9wdGlvbnMucGxheWVyT25seSkge1xuICAgICAgICBidXR0b25zLmJ1aWxkKClcbiAgICAgIH1cblxuICAgICAgdmlzdWFscy5idWlsZCgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0Vycm9yIChlcnIpIHtcbiAgICBoYXNFcnJvciA9IHRydWVcblxuICAgIGlmIChlcnIuc3RhY2spIHtcbiAgICAgIG9wdGlvbnMubG9nZ2VyLmVycm9yKGVyci5zdGFjaylcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucy5sb2dnZXIuZXJyb3IoZXJyKVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmRpc3BsYXlFcnJvcnMpIHtcbiAgICAgIHZpc3VhbHMuZXJyb3IoZXJyKVxuICAgIH0gZWxzZSB7XG4gICAgICB2aXN1YWxzLnJlc2V0KClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0RXZlbnRzICgpIHtcbiAgICBkZWJ1ZygnQ29udGFpbmVyOiBpbml0RXZlbnRzKCknKVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIChlKSA9PiB7XG4gICAgICBzZWxmLnVubG9hZChlKVxuICAgIH0pXG5cbiAgICBpZiAoIW9wdGlvbnMucGxheWVyT25seSkge1xuICAgICAgdmlzaWJpbGl0eS5vbkNoYW5nZShmdW5jdGlvbiAodmlzaWJsZSkge1xuICAgICAgICAvLyBidWlsdD8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC5pby9pc3N1ZXMvMzI2XG4gICAgICAgIGlmIChidWlsdCkge1xuICAgICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pc0F1dG9QYXVzZUVuYWJsZWQoKSAmJiBzZWxmLmlzQ291bnRpbmdEb3duKCkpIHtcbiAgICAgICAgICAgICAgc2VsZi5yZXN1bWUoKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWxmLmVtaXQoRXZlbnRzLlZJU0lCTEUpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlzQXV0b1BhdXNlRW5hYmxlZCgpICYmIChzZWxmLmlzQ291bnRpbmdEb3duKCkgfHwgc2VsZi5pc1JlY29yZGluZygpKSkge1xuICAgICAgICAgICAgICBzZWxmLnBhdXNlKCdkb2N1bWVudCBpbnZpc2libGUnKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWxmLmVtaXQoRXZlbnRzLklOVklTSUJMRSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZW5hYmxlU3BhY2UpIHtcbiAgICAgIGlmICghb3B0aW9ucy5wbGF5ZXJPbmx5KSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgY29uc3QgdGFnTmFtZSA9IGUudGFyZ2V0LnRhZ05hbWVcblxuICAgICAgICAgIGlmICh0YWdOYW1lICE9PSAnSU5QVVQnICYmIHRhZ05hbWUgIT09ICdURVhUQVJFQScpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBlLmtleUNvZGUgPyBlLmtleUNvZGUgOiBlLndoaWNoXG5cbiAgICAgICAgICAgIGlmIChjb2RlID09PSAzMikge1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICAgICAgICAgICBpZiAob3B0aW9ucy5lbmFibGVQYXVzZSkge1xuICAgICAgICAgICAgICAgIHZpc3VhbHMucGF1c2VPclJlc3VtZSgpXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmlzdWFscy5yZWNvcmRPclN0b3AoKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGJldHRlciB0byBrZWVwIHRoZSBvbmUgYW5kIG9ubHkgZXJyb3IgbGlzdGVuZXJzXG4gICAgLy8gYXQgb25lIHNwb3QsIGhlcmUsIGJlY2F1c2UgdW5sb2FkKCkgd2lsbCBkbyBhIHJlbW92ZUFsbExpc3RlbmVycygpXG4gICAgc2VsZi5vbihFdmVudHMuRVJST1IsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIHByb2Nlc3NFcnJvcihlcnIpXG4gICAgICB1bmxvYWRDaGlsZHJlbihlcnIpXG5cbiAgICAgIGlmIChlcnIucmVtb3ZlRGltZW5zaW9ucyAmJiBlcnIucmVtb3ZlRGltZW5zaW9ucygpKSB7XG4gICAgICAgIHJlbW92ZURpbWVuc2lvbnMoKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBpZiAoIW9wdGlvbnMucGxheWVyT25seSkge1xuICAgICAgc2VsZi5vbihFdmVudHMuTE9BREVEX01FVEFfREFUQSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb3JyZWN0RGltZW5zaW9ucygpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9ucyAoKSB7XG4gICAgaWYgKG9wdGlvbnMuaGFzRGVmaW5lZFdpZHRoKCkgJiYgb3B0aW9ucy52aWRlby53aWR0aCAlIDIgIT09IDApIHtcbiAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnV2lkdGggbXVzdCBiZSBkaXZpc2libGUgYnkgdHdvLicsIG9wdGlvbnMpXG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaGFzRGVmaW5lZEhlaWdodCgpICYmIG9wdGlvbnMudmlkZW8uaGVpZ2h0ICUgMiAhPT0gMCkge1xuICAgICAgdGhyb3cgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdIZWlnaHQgbXVzdCBiZSBkaXZpc2libGUgYnkgdHdvLicsIG9wdGlvbnMpXG4gICAgfVxuICB9XG5cbiAgLy8gdGhpcyB3aWxsIGp1c3Qgc2V0IHRoZSB3aWR0aCBidXQgbm90IHRoZSBoZWlnaHQgYmVjYXVzZVxuICAvLyBpdCBjYW4gYmUgYSBmb3JtIHdpdGggbW9yZSBpbnB1dHMgZWxlbWVudHNcbiAgZnVuY3Rpb24gY29ycmVjdERpbWVuc2lvbnMgKCkge1xuICAgIGNvbnN0IHdpZHRoID0gdmlzdWFscy5nZXRSZWNvcmRlcldpZHRoKHRydWUpXG5cbiAgICBpZiAod2lkdGggPCAxKSB7XG4gICAgICB0aHJvdyBWaWRlb21haWxFcnJvci5jcmVhdGUoJ1JlY29yZGVyIHdpZHRoIGNhbm5vdCBiZSBsZXNzIHRoYW4gMSEnLCBvcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWluZXJFbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlRGltZW5zaW9ucyAoKSB7XG4gICAgY29udGFpbmVyRWxlbWVudC5zdHlsZS53aWR0aCA9ICdhdXRvJ1xuICB9XG5cbiAgZnVuY3Rpb24gdW5sb2FkQ2hpbGRyZW4gKGUpIHtcbiAgICB2aXN1YWxzLnVubG9hZChlKVxuICAgIGJ1dHRvbnMudW5sb2FkKClcbiAgICBzZWxmLmVuZFdhaXRpbmcoKVxuICB9XG5cbiAgZnVuY3Rpb24gaGlkZU15U2VsZiAoKSB7XG4gICAgaGlkZGVuKGNvbnRhaW5lckVsZW1lbnQsIHRydWUpXG4gIH1cblxuICAgIC8vIGZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC1jbGllbnQvaXNzdWVzLzcxXG4gIGZ1bmN0aW9uIHRyaW1FbWFpbCAoZW1haWwpIHtcbiAgICByZXR1cm4gZW1haWwucmVwbGFjZSgvKF5bLFxcc10rKXwoWyxcXHNdKyQpL2csICcnKVxuICB9XG5cbiAgZnVuY3Rpb24gc3VibWl0VmlkZW9tYWlsIChmb3JtRGF0YSwgbWV0aG9kLCBjYikge1xuICAgIGNvbnN0IEZPUk1fRklFTERTID0ge1xuICAgICAgJ3N1YmplY3QnOiBvcHRpb25zLnNlbGVjdG9ycy5zdWJqZWN0SW5wdXROYW1lLFxuICAgICAgJ2Zyb20nOiBvcHRpb25zLnNlbGVjdG9ycy5mcm9tSW5wdXROYW1lLFxuICAgICAgJ3RvJzogb3B0aW9ucy5zZWxlY3RvcnMudG9JbnB1dE5hbWUsXG4gICAgICAnYm9keSc6IG9wdGlvbnMuc2VsZWN0b3JzLmJvZHlJbnB1dE5hbWUsXG4gICAgICAna2V5Jzogb3B0aW9ucy5zZWxlY3RvcnMua2V5SW5wdXROYW1lLFxuICAgICAgJ3BhcmVudEtleSc6IG9wdGlvbnMuc2VsZWN0b3JzLnBhcmVudEtleUlucHV0TmFtZVxuICAgIH1cblxuICAgIGNvbnN0IHZpZGVvbWFpbEZvcm1EYXRhID0ge31cblxuICAgIE9iamVjdC5rZXlzKEZPUk1fRklFTERTKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmIChmb3JtRGF0YS5oYXNPd25Qcm9wZXJ0eShGT1JNX0ZJRUxEU1trZXldKSkge1xuICAgICAgICB2aWRlb21haWxGb3JtRGF0YVtrZXldID0gZm9ybURhdGFbRk9STV9GSUVMRFNba2V5XV1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgaWYgKHZpZGVvbWFpbEZvcm1EYXRhLmZyb20pIHtcbiAgICAgIHZpZGVvbWFpbEZvcm1EYXRhLmZyb20gPSB0cmltRW1haWwodmlkZW9tYWlsRm9ybURhdGEuZnJvbSlcbiAgICB9XG5cbiAgICBpZiAodmlkZW9tYWlsRm9ybURhdGEudG8pIHtcbiAgICAgIHZpZGVvbWFpbEZvcm1EYXRhLnRvID0gdHJpbUVtYWlsKHZpZGVvbWFpbEZvcm1EYXRhLnRvKVxuICAgIH1cblxuICAgICAgICAvLyB3aGVuIG1ldGhvZCBpcyB1bmRlZmluZWQsIHRyZWF0IGl0IGFzIGEgcG9zdFxuICAgIGlmIChpc1Bvc3QobWV0aG9kKSB8fCAhbWV0aG9kKSB7XG4gICAgICB2aWRlb21haWxGb3JtRGF0YS5yZWNvcmRpbmdTdGF0cyA9IHZpc3VhbHMuZ2V0UmVjb3JkaW5nU3RhdHMoKVxuICAgICAgdmlkZW9tYWlsRm9ybURhdGEud2lkdGggPSB2aXN1YWxzLmdldFJlY29yZGVyV2lkdGgodHJ1ZSlcbiAgICAgIHZpZGVvbWFpbEZvcm1EYXRhLmhlaWdodCA9IHZpc3VhbHMuZ2V0UmVjb3JkZXJIZWlnaHQodHJ1ZSlcblxuICAgICAgcmVzb3VyY2UucG9zdCh2aWRlb21haWxGb3JtRGF0YSwgY2IpXG4gICAgfSBlbHNlIGlmIChpc1B1dChtZXRob2QpKSB7XG4gICAgICByZXNvdXJjZS5wdXQodmlkZW9tYWlsRm9ybURhdGEsIGNiKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN1Ym1pdEZvcm0gKGZvcm1EYXRhLCB2aWRlb21haWxSZXNwb25zZSwgdXJsLCBjYikge1xuICAgIC8vIGZvciBub3csIGFjY2VwdCBQT1NUcyBvbmx5IHdoaWNoIGhhdmUgYW4gVVJMIHVubGlrZSBudWxsIGFuZFxuICAgIC8vIHRyZWF0IGFsbCBvdGhlciBzdWJtaXNzaW9ucyBhcyBkaXJlY3Qgc3VibWlzc2lvbnNcblxuICAgIGlmICghdXJsIHx8IHVybCA9PT0gJycpIHtcbiAgICAgIC8vIGZpZ3VyZSBvdXQgVVJMIGF1dG9tYXRpY2FsbHkgdGhlblxuICAgICAgdXJsID0gZG9jdW1lbnQuYmFzZVVSSVxuICAgIH1cblxuICAgIC8vIGNhbiBiZSBtaXNzaW5nIHdoZW4gbm8gdmlkZW9tYWlsIHdhcyByZWNvcmRlZCBhbmQgaXMgbm90IHJlcXVpcmVkXG4gICAgaWYgKHZpZGVvbWFpbFJlc3BvbnNlKSB7XG4gICAgICBmb3JtRGF0YVtvcHRpb25zLnNlbGVjdG9ycy5hbGlhc0lucHV0TmFtZV0gPSB2aWRlb21haWxSZXNwb25zZS52aWRlb21haWwuYWxpYXNcbiAgICB9XG5cbiAgICByZXNvdXJjZS5mb3JtKGZvcm1EYXRhLCB1cmwsIGNiKVxuICB9XG5cbiAgZnVuY3Rpb24gZmluYWxpemVTdWJtaXNzaW9ucyAoZXJyLCBtZXRob2QsIHZpZGVvbWFpbCwgcmVzcG9uc2UsIGZvcm1SZXNwb25zZSkge1xuICAgIHNlbGYuZW5kV2FpdGluZygpXG5cbiAgICBpZiAoZXJyKSB7XG4gICAgICBzZWxmLmVtaXQoRXZlbnRzLkVSUk9SLCBlcnIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHN1Ym1pdHRlZCA9IHRydWVcblxuICAgICAgLy8gbWVyZ2UgdHdvIGpzb24gcmVzcG9uc2UgYm9kaWVzIHRvIGZha2UgYXMgaWYgaXQgd2VyZSBvbmx5IG9uZSByZXF1ZXN0XG4gICAgICBpZiAocmVzcG9uc2UgJiYgZm9ybVJlc3BvbnNlICYmIGZvcm1SZXNwb25zZS5ib2R5KSB7XG4gICAgICAgIE9iamVjdC5rZXlzKGZvcm1SZXNwb25zZS5ib2R5KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXNwb25zZVtrZXldID0gZm9ybVJlc3BvbnNlLmJvZHlba2V5XVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBzZWxmLmVtaXQoXG4gICAgICAgIEV2ZW50cy5TVUJNSVRURUQsXG4gICAgICAgIHZpZGVvbWFpbCxcbiAgICAgICAgcmVzcG9uc2UgfHwgZm9ybVJlc3BvbnNlXG4gICAgICApXG5cbiAgICAgIGlmIChmb3JtUmVzcG9uc2UgJiYgZm9ybVJlc3BvbnNlLnR5cGUgPT09ICd0ZXh0L2h0bWwnICYmIGZvcm1SZXNwb25zZS50ZXh0KSB7XG4gICAgICAgIC8vIHNlcnZlciByZXBsaWVkIHdpdGggSFRNTCBjb250ZW50cyAtIGRpc3BsYXkgdGhlc2VcbiAgICAgICAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSBmb3JtUmVzcG9uc2UudGV4dFxuXG4gICAgICAgIC8vIHRvZG86IGZpZ3VyZSBvdXQgaG93IHRvIGZpcmUgZG9tJ3Mgb25sb2FkIGV2ZW50IGFnYWluXG4gICAgICAgIC8vIHRvZG86IG9yIGhvdyB0byBydW4gYWxsIHRoZSBzY3JpcHRzIG92ZXIgYWdhaW5cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLmFkZFBsYXllckRpbWVuc2lvbnMgPSBmdW5jdGlvbiAodmlkZW9tYWlsLCBlbGVtZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgIHZpZGVvbWFpbC5wbGF5ZXJIZWlnaHQgPSB0aGlzLmNhbGN1bGF0ZUhlaWdodCh7XG4gICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXG4gICAgICAgIHZpZGVvV2lkdGg6IHZpZGVvbWFpbC53aWR0aCxcbiAgICAgICAgcmF0aW86IHZpZGVvbWFpbC5oZWlnaHQgLyB2aWRlb21haWwud2lkdGhcbiAgICAgIH0sIGVsZW1lbnQpXG5cbiAgICAgIHZpZGVvbWFpbC5wbGF5ZXJXaWR0aCA9IHRoaXMuY2FsY3VsYXRlV2lkdGgoe1xuICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxuICAgICAgICB2aWRlb0hlaWdodDogdmlkZW9tYWlsLnBsYXllckhlaWdodCxcbiAgICAgICAgcmF0aW86IHZpZGVvbWFpbC5oZWlnaHQgLyB2aWRlb21haWwud2lkdGhcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiB2aWRlb21haWxcbiAgICB9IGNhdGNoIChleGMpIHtcbiAgICAgIHNlbGYuZW1pdChFdmVudHMuRVJST1IsIGV4YylcbiAgICB9XG4gIH1cblxuICB0aGlzLmxpbWl0V2lkdGggPSBmdW5jdGlvbiAod2lkdGgpIHtcbiAgICByZXR1cm4gRGltZW5zaW9uLmxpbWl0V2lkdGgoY29udGFpbmVyRWxlbWVudCwgd2lkdGgsIG9wdGlvbnMpXG4gIH1cblxuICB0aGlzLmxpbWl0SGVpZ2h0ID0gZnVuY3Rpb24gKGhlaWdodCkge1xuICAgIHJldHVybiBEaW1lbnNpb24ubGltaXRIZWlnaHQoaGVpZ2h0LCBvcHRpb25zKVxuICB9XG5cbiAgdGhpcy5jYWxjdWxhdGVXaWR0aCA9IGZ1bmN0aW9uIChmbk9wdGlvbnMpIHtcbiAgICByZXR1cm4gRGltZW5zaW9uLmNhbGN1bGF0ZVdpZHRoKFxuICAgICAgT3B0aW9uc1dyYXBwZXIubWVyZ2Uob3B0aW9ucywgZm5PcHRpb25zLCB0cnVlKVxuICAgIClcbiAgfVxuXG4gIHRoaXMuY2FsY3VsYXRlSGVpZ2h0ID0gZnVuY3Rpb24gKGZuT3B0aW9ucywgZWxlbWVudCkge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgaWYgKGNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudCA9IGNvbnRhaW5lckVsZW1lbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGJldHRlciB0aGFuIG5vdGhpbmdcbiAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmJvZHlcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gRGltZW5zaW9uLmNhbGN1bGF0ZUhlaWdodChcbiAgICAgIGVsZW1lbnQsXG4gICAgICBPcHRpb25zV3JhcHBlci5tZXJnZShvcHRpb25zLCBmbk9wdGlvbnMsIHRydWUpXG4gICAgKVxuICB9XG5cbiAgdGhpcy5hcmVWaXN1YWxzSGlkZGVuID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB2aXN1YWxzLmlzSGlkZGVuKClcbiAgfVxuXG4gIHRoaXMuaGFzRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFjb250YWluZXJFbGVtZW50XG4gIH1cblxuICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICBjb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3B0aW9ucy5zZWxlY3RvcnMuY29udGFpbmVySWQpXG5cbiAgICAgIC8vIG9ubHkgYnVpbGQgd2hlbiBhIGNvbnRhaW5lciBlbGVtZW50IGhhc3QgYmVlbiBmb3VuZCwgb3RoZXJ3aXNlXG4gICAgICAvLyBiZSBzaWxlbnQgYW5kIGRvIG5vdGhpbmdcbiAgICAgIGlmIChjb250YWluZXJFbGVtZW50KSB7XG4gICAgICAgIG9wdGlvbnMuaW5zZXJ0Q3NzICYmIHByZXBlbmREZWZhdWx0Q3NzKClcblxuICAgICAgICAhYnVpbHQgJiYgaW5pdEV2ZW50cygpXG4gICAgICAgIHZhbGlkYXRlT3B0aW9ucygpXG4gICAgICAgIGNvcnJlY3REaW1lbnNpb25zKClcblxuICAgICAgICBpZiAoIW9wdGlvbnMucGxheWVyT25seSkge1xuICAgICAgICAgIGJ1aWxkRm9ybSgpXG4gICAgICAgIH1cblxuICAgICAgICBidWlsZENoaWxkcmVuKClcblxuICAgICAgICBpZiAoIWhhc0Vycm9yKSB7XG4gICAgICAgICAgZGVidWcoJ0NvbnRhaW5lcjogYnVpbHQuJylcbiAgICAgICAgICBidWlsdCA9IHRydWVcbiAgICAgICAgICBzZWxmLmVtaXQoRXZlbnRzLkJVSUxUKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdDb250YWluZXI6IGJ1aWxkaW5nIGZhaWxlZCBkdWUgdG8gYW4gZXJyb3IuJylcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY29tbWVudGVkIG91dCBzaW5jZSBpdCBkb2VzIHRvbyBtdWNoIG5vaXNlIG9uIHZpZGVvbWFpbCdzIHZpZXcgcGFnZSB3aGljaCBpcyBmaW5lXG4gICAgICAgIC8vIGRlYnVnKCdDb250YWluZXI6IG5vIGNvbnRhaW5lciBlbGVtZW50IHdpdGggSUQgJyArIG9wdGlvbnMuc2VsZWN0b3JzLmNvbnRhaW5lcklkICsgJyBmb3VuZC4gRG8gbm90aGluZy4nKVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgaWYgKHZpc3VhbHMuaXNOb3RpZmllckJ1aWx0KCkpIHtcbiAgICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgZXhjKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXhjXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5nZXRTdWJtaXRCdXR0b24gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGJ1dHRvbnMuZ2V0U3VibWl0QnV0dG9uKClcbiAgfVxuXG4gIHRoaXMucXVlcnlTZWxlY3RvciA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgIHJldHVybiBjb250YWluZXJFbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXG4gIH1cblxuICB0aGlzLmJlZ2luV2FpdGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICBodG1sRWxlbWVudC5jbGFzc0xpc3QgJiYgaHRtbEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnd2FpdCcpXG4gIH1cblxuICB0aGlzLmVuZFdhaXRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgaHRtbEVsZW1lbnQuY2xhc3NMaXN0ICYmIGh0bWxFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3dhaXQnKVxuICB9XG5cbiAgdGhpcy5hcHBlbmRDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGQpXG4gIH1cblxuICB0aGlzLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIChjaGlsZCwgcmVmZXJlbmNlKSB7XG4gICAgY29udGFpbmVyRWxlbWVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHJlZmVyZW5jZSlcbiAgfVxuXG4gIHRoaXMudW5sb2FkID0gZnVuY3Rpb24gKGUpIHtcbiAgICBkZWJ1ZygnQ29udGFpbmVyOiB1bmxvYWQoKScsIGUpXG5cbiAgICB0cnkge1xuICAgICAgdW5sb2FkQ2hpbGRyZW4oZSlcbiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKClcblxuICAgICAgYnVpbHQgPSBzdWJtaXR0ZWQgPSBmYWxzZVxuICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgZXhjKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29udGFpbmVyRWxlbWVudCkge1xuICAgICAgaGlkZGVuKGNvbnRhaW5lckVsZW1lbnQsIGZhbHNlKVxuXG4gICAgICB2aXN1YWxzLnNob3coKVxuXG4gICAgICBpZiAoIWhhc0Vycm9yKSB7XG4gICAgICAgIGNvbnN0IHBhdXNlZCA9IHNlbGYuaXNQYXVzZWQoKVxuXG4gICAgICAgIGlmIChwYXVzZWQpIHtcbiAgICAgICAgICBidXR0b25zLmFkanVzdEJ1dHRvbnNGb3JQYXVzZSgpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBzaW5jZSBodHRwczovL2dpdGh1Yi5jb20vYmluYXJ5a2l0Y2hlbi92aWRlb21haWwtY2xpZW50L2lzc3Vlcy82MFxuICAgICAgICAvLyB3ZSBoaWRlIGFyZWFzIHRvIG1ha2UgaXQgZWFzaWVyIGZvciB0aGUgdXNlclxuICAgICAgICBidXR0b25zLnNob3coKVxuXG4gICAgICAgIGlmIChzZWxmLmlzUmVwbGF5U2hvd24oKSkge1xuICAgICAgICAgIHNlbGYuZW1pdChFdmVudHMuUFJFVklFVylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLmVtaXQoRXZlbnRzLkZPUk1fUkVBRFksIHtwYXVzZWQ6IHBhdXNlZH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ0NvbnRhaW5lcjogaGlkZSgpJylcblxuICAgIGhhc0Vycm9yID0gZmFsc2VcblxuICAgIHRoaXMuaXNSZWNvcmRpbmcoKSAmJiB0aGlzLnBhdXNlKClcblxuICAgIHZpc3VhbHMuaGlkZSgpXG5cbiAgICBpZiAoc3VibWl0dGVkKSB7XG4gICAgICBidXR0b25zLmhpZGUoKVxuICAgICAgaGlkZU15U2VsZigpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5zdGFydE92ZXIgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgdHJ5IHtcbiAgICAgIHNlbGYuZW1pdChFdmVudHMuU1RBUlRJTkdfT1ZFUilcblxuICAgICAgc3VibWl0dGVkID0gZmFsc2VcbiAgICAgIGZvcm0uc2hvdygpXG4gICAgICB2aXN1YWxzLmJhY2socGFyYW1zLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChwYXJhbXMua2VlcEhpZGRlbikge1xuICAgICAgICAgIC8vIGp1c3QgZW5hYmxlIGZvcm0sIGRvIG5vdGhpbmcgZWxzZS5cbiAgICAgICAgICAvLyBzZWUgZXhhbXBsZSBjb250YWN0X2Zvcm0uaHRtbCB3aGVuIHlvdSBzdWJtaXQgd2l0aG91dCB2aWRlb21pbFxuICAgICAgICAgIC8vIGFuZCBnbyBiYWNrXG4gICAgICAgICAgc2VsZi5lbmFibGVGb3JtKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLnNob3cocGFyYW1zKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgZXhjKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuc2hvd1JlcGxheU9ubHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgaGFzRXJyb3IgPSBmYWxzZVxuXG4gICAgdGhpcy5pc1JlY29yZGluZygpICYmIHRoaXMucGF1c2UoKVxuXG4gICAgdmlzdWFscy5zaG93UmVwbGF5T25seSgpXG5cbiAgICBzdWJtaXR0ZWQgJiYgYnV0dG9ucy5oaWRlKClcbiAgfVxuXG4gIHRoaXMuaXNOb3RpZnlpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHZpc3VhbHMuaXNOb3RpZnlpbmcoKVxuICB9XG5cbiAgdGhpcy5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdmlzdWFscy5pc1BhdXNlZCgpXG4gIH1cblxuICB0aGlzLnBhdXNlID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIHZpc3VhbHMucGF1c2UocGFyYW1zKVxuICB9XG5cbiAgLy8gdGhpcyBjb2RlIG5lZWRzIGEgZ29vZCByZXdyaXRlIDooXG4gIHRoaXMudmFsaWRhdGUgPSBmdW5jdGlvbiAoZm9yY2UpIHtcbiAgICB2YXIgcnVuVmFsaWRhdGlvbiA9IHRydWVcbiAgICB2YXIgdmFsaWRcblxuICAgIGlmICghb3B0aW9ucy5lbmFibGVBdXRvVmFsaWRhdGlvbikge1xuICAgICAgcnVuVmFsaWRhdGlvbiA9IGZhbHNlXG4gICAgICBsYXN0VmFsaWRhdGlvbiA9IHRydWUgLy8gbmVlZGVkIHNvIHRoYXQgaXQgY2FuIGJlIHN1Ym1pdHRlZCBhbnl3YXksIHNlZSBzdWJtaXQoKVxuICAgIH0gZWxzZSBpZiAoZm9yY2UpIHtcbiAgICAgIHJ1blZhbGlkYXRpb24gPSBmb3JjZVxuICAgIH0gZWxzZSBpZiAoc2VsZi5pc05vdGlmeWluZygpKSB7XG4gICAgICBydW5WYWxpZGF0aW9uID0gZmFsc2VcbiAgICB9IGVsc2UgaWYgKHZpc3VhbHMuaXNDb25uZWN0ZWQoKSkge1xuICAgICAgcnVuVmFsaWRhdGlvbiA9IHZpc3VhbHMuaXNVc2VyTWVkaWFMb2FkZWQoKSB8fCB2aXN1YWxzLmlzUmVwbGF5U2hvd24oKVxuICAgIH0gZWxzZSBpZiAodmlzdWFscy5pc0Nvbm5lY3RpbmcoKSkge1xuICAgICAgcnVuVmFsaWRhdGlvbiA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKHJ1blZhbGlkYXRpb24pIHtcbiAgICAgIHRoaXMuZW1pdChFdmVudHMuVkFMSURBVElORylcblxuICAgICAgY29uc3QgdmlzdWFsc1ZhbGlkID0gdmlzdWFscy52YWxpZGF0ZSgpICYmIGJ1dHRvbnMuaXNSZWNvcmRBZ2FpbkJ1dHRvbkVuYWJsZWQoKVxuICAgICAgdmFyIHdoeUludmFsaWRcblxuICAgICAgaWYgKGZvcm0pIHtcbiAgICAgICAgdmFsaWQgPSBmb3JtLnZhbGlkYXRlKClcblxuICAgICAgICBpZiAodmFsaWQpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuYXJlVmlzdWFsc0hpZGRlbigpICYmICF2aXN1YWxzVmFsaWQpIHtcbiAgICAgICAgICAgIGlmIChzdWJtaXR0ZWQgfHwgdGhpcy5pc1JlYWR5KCkgfHwgdGhpcy5pc1JlY29yZGluZygpIHx8IHRoaXMuaXNQYXVzZWQoKSB8fCB0aGlzLmlzQ291bnRpbmdEb3duKCkpIHtcbiAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAgICAgICAgIHdoeUludmFsaWQgPSAnVmlkZW8gaXMgbm90IHJlY29yZGVkJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBpbnZhbGlkSW5wdXQgPSBmb3JtLmdldEludmFsaWRFbGVtZW50KClcblxuICAgICAgICAgIGlmIChpbnZhbGlkSW5wdXQpIHtcbiAgICAgICAgICAgIHdoeUludmFsaWQgPSAnRm9ybSBpbnB1dCBuYW1lZCAnICsgaW52YWxpZElucHV0Lm5hbWUgKyAnIGlzIGludmFsaWQnXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdoeUludmFsaWQgPSAnRm9ybSBpbnB1dChzKCkgYXJlIGludmFsaWQnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWxpZCA9IHZpc3VhbHNWYWxpZFxuICAgICAgfVxuXG4gICAgICBpZiAodmFsaWQpIHtcbiAgICAgICAgdGhpcy5lbWl0KEV2ZW50cy5WQUxJRClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZW1pdChFdmVudHMuSU5WQUxJRCwgd2h5SW52YWxpZClcbiAgICAgIH1cblxuICAgICAgbGFzdFZhbGlkYXRpb24gPSB2YWxpZFxuICAgIH1cblxuICAgIHJldHVybiB2YWxpZFxuICB9XG5cbiAgdGhpcy5kaXNhYmxlRm9ybSA9IGZ1bmN0aW9uIChidXR0b25zVG9vKSB7XG4gICAgZm9ybSAmJiBmb3JtLmRpc2FibGUoYnV0dG9uc1RvbylcbiAgfVxuXG4gIHRoaXMuZW5hYmxlRm9ybSA9IGZ1bmN0aW9uIChidXR0b25zVG9vKSB7XG4gICAgZm9ybSAmJiBmb3JtLmVuYWJsZShidXR0b25zVG9vKVxuICB9XG5cbiAgdGhpcy5oYXNGb3JtID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIWZvcm1cbiAgfVxuXG4gIHRoaXMuaXNSZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYnV0dG9ucy5pc1JlY29yZEJ1dHRvbkVuYWJsZWQoKVxuICB9XG5cbiAgZnVuY3Rpb24gaXNQb3N0IChtZXRob2QpIHtcbiAgICByZXR1cm4gbWV0aG9kICYmIG1ldGhvZC50b1VwcGVyQ2FzZSgpID09PSAnUE9TVCdcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUHV0IChtZXRob2QpIHtcbiAgICByZXR1cm4gbWV0aG9kICYmIG1ldGhvZC50b1VwcGVyQ2FzZSgpID09PSAnUFVUJ1xuICB9XG5cbiAgdGhpcy5zdWJtaXRBbGwgPSBmdW5jdGlvbiAoZm9ybURhdGEsIG1ldGhvZCwgdXJsKSB7XG4gICAgdGhpcy5iZWdpbldhaXRpbmcoKVxuICAgIHRoaXMuZGlzYWJsZUZvcm0odHJ1ZSlcbiAgICB0aGlzLmVtaXQoRXZlbnRzLlNVQk1JVFRJTkcpXG5cbiAgICBjb25zdCBwb3N0ID0gaXNQb3N0KG1ldGhvZClcbiAgICBjb25zdCBoYXNWaWRlb21haWxLZXkgPSAhIWZvcm1EYXRhW29wdGlvbnMuc2VsZWN0b3JzLmtleUlucHV0TmFtZV1cblxuICAgICAgICAvLyBhIGNsb3N1cmUgc28gdGhhdCB3ZSBjYW4gYWNjZXNzIG1ldGhvZFxuICAgIHZhciBzdWJtaXRWaWRlb21haWxDYWxsYmFjayA9IGZ1bmN0aW9uIChlcnIxLCB2aWRlb21haWwsIHZpZGVvbWFpbFJlc3BvbnNlKSB7XG4gICAgICBpZiAoZXJyMSkge1xuICAgICAgICBmaW5hbGl6ZVN1Ym1pc3Npb25zKGVycjEsIG1ldGhvZCwgdmlkZW9tYWlsLCB2aWRlb21haWxSZXNwb25zZSlcbiAgICAgIH0gZWxzZSBpZiAocG9zdCkge1xuICAgICAgICBzdWJtaXRGb3JtKGZvcm1EYXRhLCB2aWRlb21haWxSZXNwb25zZSwgdXJsLCBmdW5jdGlvbiAoZXJyMiwgZm9ybVJlc3BvbnNlKSB7XG4gICAgICAgICAgZmluYWxpemVTdWJtaXNzaW9ucyhlcnIyLCBtZXRob2QsIHZpZGVvbWFpbCwgdmlkZW9tYWlsUmVzcG9uc2UsIGZvcm1SZXNwb25zZSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGl0J3MgYSBkaXJlY3Qgc3VibWlzc2lvblxuICAgICAgICBmaW5hbGl6ZVN1Ym1pc3Npb25zKG51bGwsIG1ldGhvZCwgdmlkZW9tYWlsLCB2aWRlb21haWxSZXNwb25zZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWhhc1ZpZGVvbWFpbEtleSkge1xuICAgICAgc3VibWl0Rm9ybShmb3JtRGF0YSwgbnVsbCwgdXJsLCBmdW5jdGlvbiAoZXJyMiwgZm9ybVJlc3BvbnNlKSB7XG4gICAgICAgIGZpbmFsaXplU3VibWlzc2lvbnMoZXJyMiwgbWV0aG9kLCBudWxsLCBudWxsLCBmb3JtUmVzcG9uc2UpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBzdWJtaXRWaWRlb21haWwoZm9ybURhdGEsIG1ldGhvZCwgc3VibWl0VmlkZW9tYWlsQ2FsbGJhY2spXG4gICAgfVxuICB9XG5cbiAgdGhpcy5pc0J1aWx0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBidWlsdFxuICB9XG5cbiAgdGhpcy5pc1JlcGxheVNob3duID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB2aXN1YWxzLmlzUmVwbGF5U2hvd24oKVxuICB9XG5cbiAgdGhpcy5pc0RpcnR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpc0RpcnR5ID0gZmFsc2VcblxuICAgIGlmIChmb3JtKSB7XG4gICAgICBpZiAodmlzdWFscy5pc1JlY29yZGVyVW5sb2FkZWQoKSkge1xuICAgICAgICBpc0RpcnR5ID0gZmFsc2VcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1JlcGxheVNob3duKCkgfHwgdGhpcy5pc1BhdXNlZCgpKSB7XG4gICAgICAgIGlzRGlydHkgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzRGlydHlcbiAgfVxuXG4gIHRoaXMuZ2V0UmVwbGF5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB2aXN1YWxzLmdldFJlcGxheSgpXG4gIH1cblxuICB0aGlzLmlzT3V0c2lkZUVsZW1lbnRPZiA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSAhPT0gY29udGFpbmVyRWxlbWVudCAmJiBlbGVtZW50ICE9PSBjb250YWluZXJFbGVtZW50XG4gIH1cblxuICB0aGlzLmhpZGVGb3JtID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIC8vIGZvcm0gY2hlY2sgbmVlZGVkLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLWNsaWVudC9pc3N1ZXMvMTI3XG4gICAgZm9ybSAmJiBmb3JtLmhpZGUoKVxuICAgIGJ1dHRvbnMgJiYgYnV0dG9ucy5oaWRlKHBhcmFtcylcbiAgfVxuXG4gIHRoaXMubG9hZEZvcm0gPSBmdW5jdGlvbiAodmlkZW9tYWlsKSB7XG4gICAgaWYgKGZvcm0pIHtcbiAgICAgIGZvcm0ubG9hZFZpZGVvbWFpbCh2aWRlb21haWwpXG4gICAgICB0aGlzLnZhbGlkYXRlKClcbiAgICB9XG4gIH1cblxuICB0aGlzLmVuYWJsZUF1ZGlvID0gZnVuY3Rpb24gKCkge1xuICAgIG9wdGlvbnMuc2V0QXVkaW9FbmFibGVkKHRydWUpXG4gICAgdGhpcy5lbWl0KEV2ZW50cy5FTkFCTElOR19BVURJTylcbiAgfVxuXG4gIHRoaXMuZGlzYWJsZUF1ZGlvID0gZnVuY3Rpb24gKCkge1xuICAgIG9wdGlvbnMuc2V0QXVkaW9FbmFibGVkKGZhbHNlKVxuICAgIHRoaXMuZW1pdChFdmVudHMuRElTQUJMSU5HX0FVRElPKVxuICB9XG5cbiAgdGhpcy5zdWJtaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGFzdFZhbGlkYXRpb24gJiYgZm9ybSAmJiBmb3JtLmRvVGhlU3VibWl0KClcbiAgfVxuXG4gIHRoaXMuaXNDb3VudGluZ0Rvd24gPSB2aXN1YWxzLmlzQ291bnRpbmdEb3duLmJpbmQodmlzdWFscylcbiAgdGhpcy5pc1JlY29yZGluZyA9IHZpc3VhbHMuaXNSZWNvcmRpbmcuYmluZCh2aXN1YWxzKVxuICB0aGlzLnJlY29yZCA9IHZpc3VhbHMucmVjb3JkLmJpbmQodmlzdWFscylcbiAgdGhpcy5yZXN1bWUgPSB2aXN1YWxzLnJlc3VtZS5iaW5kKHZpc3VhbHMpXG4gIHRoaXMuc3RvcCA9IHZpc3VhbHMuc3RvcC5iaW5kKHZpc3VhbHMpXG4gIHRoaXMucmVjb3JkQWdhaW4gPSB2aXN1YWxzLnJlY29yZEFnYWluLmJpbmQodmlzdWFscylcbn1cblxudXRpbC5pbmhlcml0cyhDb250YWluZXIsIEV2ZW50RW1pdHRlcilcblxuZXhwb3J0IGRlZmF1bHQgQ29udGFpbmVyXG4iLCJpbXBvcnQgbnVtYmVySXNJbnRlZ2VyIGZyb20gJ251bWJlci1pcy1pbnRlZ2VyJ1xuXG5pbXBvcnQgVmlkZW9tYWlsRXJyb3IgZnJvbSAnLi8uLi91dGlsL3ZpZGVvbWFpbEVycm9yJ1xuXG5mdW5jdGlvbiBnZXRPdXRlcldpZHRoIChlbGVtZW50KSB7XG4gIHZhciBvdXRlcldpZHRoID0gMFxuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICBpZiAocmVjdCkge1xuICAgIG91dGVyV2lkdGggPSByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0XG4gIH1cblxuICBpZiAob3V0ZXJXaWR0aCA8IDEpIHtcbiAgICAvLyBsYXN0IGVmZm9ydCwgY2FuIGhhcHBlbiB3aGVuIHJlcGxheWluZyBvbmx5XG4gICAgcmVjdCA9IGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICBvdXRlcldpZHRoID0gcmVjdC5yaWdodCAtIHJlY3QubGVmdFxuICB9XG5cbiAgcmV0dXJuIG91dGVyV2lkdGhcbn1cblxuZnVuY3Rpb24gZmlndXJlTWluSGVpZ2h0IChoZWlnaHQsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMuaGFzRGVmaW5lZEhlaWdodCgpKSB7XG4gICAgaWYgKCFoZWlnaHQpIHtcbiAgICAgIGhlaWdodCA9IG9wdGlvbnMudmlkZW8uaGVpZ2h0XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlaWdodCA9IE1hdGgubWluKG9wdGlvbnMudmlkZW8uaGVpZ2h0LCBoZWlnaHQpXG4gICAgfVxuICB9XG5cbiAgaWYgKG51bWJlcklzSW50ZWdlcihoZWlnaHQpICYmIGhlaWdodCA8IDEpIHtcbiAgICB0aHJvdyBWaWRlb21haWxFcnJvci5jcmVhdGUoXG4gICAgICAnR290IGEgdmlkZW8gaGVpZ2h0IGxlc3MgdGhhbiAxICgnICtcbiAgICAgIGhlaWdodCArXG4gICAgICAnKSB3aGlsZSBmaWd1cmluZyBvdXQgdGhlIG1pbmltdW0hJyxcbiAgICAgIG9wdGlvbnNcbiAgICApXG4gIH1cblxuICAvLyBqdXN0IHJldHVybiBpdCwgY2FuIGJlIFwiYXV0b1wiXG4gIHJldHVybiBoZWlnaHRcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gIGxpbWl0V2lkdGg6IGZ1bmN0aW9uIChlbGVtZW50LCB3aWR0aCwgb3B0aW9ucykge1xuICAgIGNvbnN0IG91dGVyV2lkdGggPSBnZXRPdXRlcldpZHRoKGVsZW1lbnQpXG4gICAgY29uc3QgbGltaXRlZFdpZHRoID0gb3V0ZXJXaWR0aCA+IDAgJiYgb3V0ZXJXaWR0aCA8IHdpZHRoID8gb3V0ZXJXaWR0aCA6IHdpZHRoXG5cbiAgICBpZiAobnVtYmVySXNJbnRlZ2VyKGxpbWl0ZWRXaWR0aCkgJiYgbGltaXRlZFdpZHRoIDwgMSkge1xuICAgICAgdGhyb3cgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdMaW1pdGVkIHdpZHRoIGNhbm5vdCBiZSBsZXNzIHRoYW4gMSEnLCBvcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbGltaXRlZFdpZHRoXG4gICAgfVxuICB9LFxuXG4gIC8vIHRoaXMgaXMgZGlmZmljdWx0IHRvIGNvbXB1dGUgYW5kIGlzIG5vdCBlbnRpcmVseSBjb3JyZWN0LlxuICAvLyBidXQgZ29vZCBlbm91Z2ggZm9yIG5vdyB0byBlbnN1cmUgc29tZSBzdGFiaWxpdHkuXG4gIGxpbWl0SGVpZ2h0OiBmdW5jdGlvbiAoaGVpZ2h0LCBvcHRpb25zKSB7XG4gICAgaWYgKG51bWJlcklzSW50ZWdlcihoZWlnaHQpICYmIGhlaWdodCA8IDEpIHtcbiAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnUGFzc2VkIGxpbWl0LWhlaWdodCBhcmd1bWVudCBjYW5ub3QgYmUgbGVzcyB0aGFuIDEhJywgb3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbGltaXRlZEhlaWdodCA9IE1hdGgubWluKFxuICAgICAgICBoZWlnaHQsXG4gICAgICAgIC8vIGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgICApXG5cbiAgICAgIGlmIChsaW1pdGVkSGVpZ2h0IDwgMSkge1xuICAgICAgICB0aHJvdyBWaWRlb21haWxFcnJvci5jcmVhdGUoJ0xpbWl0ZWQgaGVpZ2h0IGNhbm5vdCBiZSBsZXNzIHRoYW4gMSEnLCBvcHRpb25zKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxpbWl0ZWRIZWlnaHRcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY2FsY3VsYXRlV2lkdGg6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIGhlaWdodCA9IG9wdGlvbnMudmlkZW9IZWlnaHQgfHwgbnVsbFxuICAgIGNvbnN0IHJhdGlvID0gb3B0aW9ucy5yYXRpbyB8fCBvcHRpb25zLmdldFJhdGlvKClcblxuICAgIGhlaWdodCA9IGZpZ3VyZU1pbkhlaWdodChoZWlnaHQsIG9wdGlvbnMpXG5cbiAgICBpZiAob3B0aW9ucy5yZXNwb25zaXZlKSB7XG4gICAgICBoZWlnaHQgPSB0aGlzLmxpbWl0SGVpZ2h0KGhlaWdodCwgb3B0aW9ucylcbiAgICB9XG5cbiAgICBpZiAobnVtYmVySXNJbnRlZ2VyKGhlaWdodCkgJiYgaGVpZ2h0IDwgMSkge1xuICAgICAgdGhyb3cgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdIZWlnaHQgY2Fubm90IGJlIHNtYWxsZXIgdGhhbiAxIHdoZW4gY2FsY3VsYXRpbmcgd2lkdGguJywgb3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY2FsY3VsYXRlZFdpZHRoID0gcGFyc2VJbnQoaGVpZ2h0IC8gcmF0aW8pXG5cbiAgICAgIGlmIChjYWxjdWxhdGVkV2lkdGggPCAxKSB7XG4gICAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnQ2FsY3VsYXRlZCB3aWR0aCBjYW5ub3QgYmUgc21hbGxlciB0aGFuIDEhJywgb3B0aW9ucylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjYWxjdWxhdGVkV2lkdGhcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY2FsY3VsYXRlSGVpZ2h0OiBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMudmlkZW9XaWR0aCB8fCBudWxsXG4gICAgdmFyIGhlaWdodFxuXG4gICAgY29uc3QgcmF0aW8gPSBvcHRpb25zLnJhdGlvIHx8IG9wdGlvbnMuZ2V0UmF0aW8oKVxuXG4gICAgaWYgKG9wdGlvbnMuaGFzRGVmaW5lZFdpZHRoKCkpIHtcbiAgICAgIHdpZHRoID0gb3B0aW9ucy52aWRlby53aWR0aFxuICAgIH1cblxuICAgIGlmIChudW1iZXJJc0ludGVnZXIod2lkdGgpICYmIHdpZHRoIDwgMSkge1xuICAgICAgdGhyb3cgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdVbmFibGUgdG8gY2FsY3VsYXRlIGhlaWdodCB3aGVuIHdpZHRoIGlzIGxlc3MgdGhhbiAxLicsIG9wdGlvbnMpXG4gICAgfSBlbHNlIGlmIChvcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgIHdpZHRoID0gdGhpcy5saW1pdFdpZHRoKGVsZW1lbnQsIHdpZHRoLCBvcHRpb25zKVxuICAgIH1cblxuICAgIGlmICh3aWR0aCkge1xuICAgICAgaGVpZ2h0ID0gcGFyc2VJbnQod2lkdGggKiByYXRpbylcbiAgICB9XG5cbiAgICBpZiAobnVtYmVySXNJbnRlZ2VyKGhlaWdodCkgJiYgaGVpZ2h0IDwgMSkge1xuICAgICAgdGhyb3cgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdKdXN0IGNhbGN1bGF0ZWQgYSBoZWlnaHQgbGVzcyB0aGFuIDEgd2hpY2ggaXMgd3JvbmcuJywgb3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZpZ3VyZU1pbkhlaWdodChoZWlnaHQsIG9wdGlvbnMpXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgaCBmcm9tICdoeXBlcnNjcmlwdCdcbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnXG5pbXBvcnQgaGlkZGVuIGZyb20gJ2hpZGRlbidcbmltcG9ydCBnZXRGb3JtRGF0YSBmcm9tICdnZXQtZm9ybS1kYXRhJ1xuXG5pbXBvcnQgRXZlbnRzIGZyb20gJy4vLi4vZXZlbnRzJ1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLy4uL3V0aWwvZXZlbnRFbWl0dGVyJ1xuaW1wb3J0IFZpZGVvbWFpbEVycm9yIGZyb20gJy4vLi4vdXRpbC92aWRlb21haWxFcnJvcidcblxuY29uc3QgRm9ybSA9IGZ1bmN0aW9uIChjb250YWluZXIsIGZvcm1FbGVtZW50LCBvcHRpb25zKSB7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMsIG9wdGlvbnMsICdGb3JtJylcblxuICBjb25zdCBzZWxmID0gdGhpc1xuXG4gIHZhciBkaXNhYmxlQ29udGFpbmVyVmFsaWRhdGlvblxuICB2YXIga2V5SW5wdXRcblxuICBmdW5jdGlvbiBnZXREYXRhICgpIHtcbiAgICByZXR1cm4gZ2V0Rm9ybURhdGEoZm9ybUVsZW1lbnQpXG4gIH1cblxuICB0aGlzLmxvYWRWaWRlb21haWwgPSBmdW5jdGlvbiAodmlkZW9tYWlsKSB7XG4gICAgY29uc3QgbGltaXQgPSBmb3JtRWxlbWVudC5lbGVtZW50cy5sZW5ndGhcblxuICAgIHZhciBpbnB1dFxuICAgIHZhciBuYW1lXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbWl0OyBpKyspIHtcbiAgICAgIGlucHV0ID0gZm9ybUVsZW1lbnQuZWxlbWVudHNbaV1cbiAgICAgIG5hbWUgPSBpbnB1dC5uYW1lXG5cbiAgICAgIGlmICh2aWRlb21haWxbbmFtZV0pIHtcbiAgICAgICAgaW5wdXQudmFsdWUgPSB2aWRlb21haWxbbmFtZV1cbiAgICAgIH1cblxuICAgICAgaWYgKG5hbWUgPT09IG9wdGlvbnMuc2VsZWN0b3JzLnN1YmplY3RJbnB1dE5hbWUgfHxcbiAgICAgICAgICBuYW1lID09PSBvcHRpb25zLnNlbGVjdG9ycy5ib2R5SW5wdXROYW1lKSB7XG4gICAgICAgIGlucHV0LmRpc2FibGVkID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvcm1FbGVtZW50LnNldEF0dHJpYnV0ZSgnbWV0aG9kJywgJ3B1dCcpXG4gIH1cblxuICBmdW5jdGlvbiBpc05vdEJ1dHRvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LnRhZ05hbWUgIT09ICdCVVRUT04nICYmIGVsZW1lbnQudHlwZSAhPT0gJ3N1Ym1pdCdcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldERpc2FibGVkIChkaXNhYmxlZCwgYnV0dG9uc1Rvbykge1xuICAgIGNvbnN0IGxpbWl0ID0gZm9ybUVsZW1lbnQuZWxlbWVudHMubGVuZ3RoXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbWl0OyBpKyspIHtcbiAgICAgIGlmIChidXR0b25zVG9vIHx8ICghYnV0dG9uc1RvbyAmJiBpc05vdEJ1dHRvbihmb3JtRWxlbWVudC5lbGVtZW50c1tpXSkpKSB7XG4gICAgICAgIGZvcm1FbGVtZW50LmVsZW1lbnRzW2ldLmRpc2FibGVkID0gZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoaWRlQWxsICgpIHtcbiAgICBjb25zdCBsaW1pdCA9IGZvcm1FbGVtZW50LmVsZW1lbnRzLmxlbmd0aFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW1pdDsgaSsrKSB7XG4gICAgICBoaWRkZW4oZm9ybUVsZW1lbnQuZWxlbWVudHNbaV0sIHRydWUpXG4gICAgfVxuXG4gICAgaGlkZGVuKGZvcm1FbGVtZW50LCB0cnVlKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SW5wdXRFbGVtZW50cyAoKSB7XG4gICAgcmV0dXJuIGZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0LCB0ZXh0YXJlYScpXG4gIH1cblxuICBmdW5jdGlvbiBnZXRTZWxlY3RFbGVtZW50cyAoKSB7XG4gICAgcmV0dXJuIGZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlbGVjdCcpXG4gIH1cblxuICB0aGlzLmRpc2FibGUgPSBmdW5jdGlvbiAoYnV0dG9uc1Rvbykge1xuICAgIHNldERpc2FibGVkKHRydWUsIGJ1dHRvbnNUb28pXG4gIH1cblxuICB0aGlzLmVuYWJsZSA9IGZ1bmN0aW9uIChidXR0b25zVG9vKSB7XG4gICAgc2V0RGlzYWJsZWQoZmFsc2UsIGJ1dHRvbnNUb28pXG4gIH1cblxuICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChvcHRpb25zLmVuYWJsZUF1dG9WYWxpZGF0aW9uKSB7XG4gICAgICBjb25zdCBpbnB1dEVsZW1lbnRzID0gZ2V0SW5wdXRFbGVtZW50cygpXG4gICAgICB2YXIgaW5wdXRFbGVtZW50XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBpbnB1dEVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlucHV0RWxlbWVudCA9IGlucHV0RWxlbWVudHNbaV1cblxuICAgICAgICBpZiAoaW5wdXRFbGVtZW50LnR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29udGFpbmVyLnZhbGlkYXRlKClcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci52YWxpZGF0ZSgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJlY2F1c2Ugb2YgYW5ndWxhcidzIGRpZ2VzdCBjeWNsZSwgdmFsaWRhdGUgYWdhaW4gd2hlbiBpdCBiZWNhbWUgaW52YWxpZFxuICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW52YWxpZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIWRpc2FibGVDb250YWluZXJWYWxpZGF0aW9uKSB7XG4gICAgICAgICAgICBjb250YWluZXIudmFsaWRhdGUoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc2VsZWN0RWxlbWVudHMgPSBnZXRTZWxlY3RFbGVtZW50cygpXG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBsZW4yID0gc2VsZWN0RWxlbWVudHMubGVuZ3RoOyBqIDwgbGVuMjsgaisrKSB7XG4gICAgICAgIHNlbGVjdEVsZW1lbnRzW2pdLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb250YWluZXIudmFsaWRhdGUoKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIGtleUlucHV0ID0gZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cIicgKyBvcHRpb25zLnNlbGVjdG9ycy5rZXlJbnB1dE5hbWUgKyAnXCJdJylcblxuICAgIGlmICgha2V5SW5wdXQpIHtcbiAgICAgIGtleUlucHV0ID0gaCgnaW5wdXQnLCB7XG4gICAgICAgIG5hbWU6IG9wdGlvbnMuc2VsZWN0b3JzLmtleUlucHV0TmFtZSxcbiAgICAgICAgdHlwZTogJ2hpZGRlbidcbiAgICAgIH0pXG5cbiAgICAgIGZvcm1FbGVtZW50LmFwcGVuZENoaWxkKGtleUlucHV0KVxuICAgIH1cblxuICAgIHRoaXMub24oRXZlbnRzLlBSRVZJRVcsIGZ1bmN0aW9uICh2aWRlb21haWxLZXkpIHtcbiAgICAgIC8vIGJld2FyZSB0aGF0IHByZXZpZXcgZG9lc24ndCBhbHdheXMgY29tZSB3aXRoIGEga2V5LCBpLkUuXG4gICAgICAvLyBjb250YWluZXIuc2hvdygpIGNhbiBlbWl0IFBSRVZJRVcgd2l0aG91dCBhIGtleSB3aGVuIGEgcmVwbGF5IGFscmVhZHkgZXhpc3RzXG4gICAgICAvLyAoY2FuIGhhcHBlbiB3aGVuIHNob3dpbmcgLSBoaWRpbmcgLSBzaG93aW5nIHZpZGVvbWFpbCBvdmVyIGFnYWluKVxuXG4gICAgICAvLyBvbmx5IGVtaXQgZXJyb3IgaWYga2V5IGlzIG1pc3NpbmcgQU5EIHRoZSBpbnB1dCBoYXMgbm8ga2V5ICh2YWx1ZSkgeWV0XG4gICAgICBpZiAoIXZpZGVvbWFpbEtleSAmJiAha2V5SW5wdXQudmFsdWUpIHtcbiAgICAgICAgc2VsZi5lbWl0KFxuICAgICAgICAgIEV2ZW50cy5FUlJPUixcbiAgICAgICAgICBWaWRlb21haWxFcnJvci5jcmVhdGUoJ1ZpZGVvbWFpbCBrZXkgZm9yIHByZXZpZXcgaXMgbWlzc2luZyEnLCBvcHRpb25zKVxuICAgICAgICApXG4gICAgICB9IGVsc2UgaWYgKHZpZGVvbWFpbEtleSkge1xuICAgICAgICBrZXlJbnB1dC52YWx1ZSA9IHZpZGVvbWFpbEtleVxuICAgICAgfVxuICAgICAgLy8gZWxzZVxuICAgICAgLy8gbGVhdmUgYXMgaXQgYW5kIHVzZSBleGlzdGluZyBrZXlJbnB1dC52YWx1ZVxuICAgIH0pXG5cbiAgICAvLyBmaXhlcyBodHRwczovL2dpdGh1Yi5jb20vYmluYXJ5a2l0Y2hlbi92aWRlb21haWwtY2xpZW50L2lzc3Vlcy85MVxuICAgIHRoaXMub24oRXZlbnRzLkdPSU5HX0JBQ0ssICgpID0+IHtcbiAgICAgIGtleUlucHV0LnZhbHVlID0gbnVsbFxuICAgIH0pXG5cbiAgICB0aGlzLm9uKEV2ZW50cy5FUlJPUiwgZnVuY3Rpb24gKGVycikge1xuICAgICAgLy8gc2luY2UgaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLWNsaWVudC9pc3N1ZXMvNjBcbiAgICAgIC8vIHdlIGhpZGUgYXJlYXMgdG8gbWFrZSBpdCBlYXNpZXIgZm9yIHRoZSB1c2VyIHRvIHByb2Nlc3MgYW4gZXJyb3JcbiAgICAgIC8vICg9IGxlc3MgZGlzdHJhY3Rpb25zKVxuICAgICAgaWYgKGVyci5oaWRlRm9ybSAmJiBlcnIuaGlkZUZvcm0oKSAmJiBvcHRpb25zLmFkanVzdEZvcm1PbkJyb3dzZXJFcnJvcikge1xuICAgICAgICBoaWRlQWxsKClcbiAgICAgIH0gZWxzZSBpZiAoZXJyLmhpZGVCdXR0b25zICYmIGVyci5oaWRlQnV0dG9ucygpICYmIG9wdGlvbnMuYWRqdXN0Rm9ybU9uQnJvd3NlckVycm9yKSB7XG4gICAgICAgIGhpZGVTdWJtaXRCdXR0b24oKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLm9uKEV2ZW50cy5CVUlMVCwgZnVuY3Rpb24gKCkge1xuICAgICAgc3RhcnRMaXN0ZW5pbmdUb1N1Ym1pdEV2ZW50cygpXG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGhpZGVTdWJtaXRCdXR0b24gKCkge1xuICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IHNlbGYuZmluZFN1Ym1pdEJ1dHRvbigpXG4gICAgaGlkZGVuKHN1Ym1pdEJ1dHRvbiwgdHJ1ZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0TGlzdGVuaW5nVG9TdWJtaXRFdmVudHMgKCkge1xuICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGNvbnRhaW5lci5nZXRTdWJtaXRCdXR0b24oKVxuICAgIHN1Ym1pdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNlbGYuZG9UaGVTdWJtaXQuYmluZChzZWxmKSlcbiAgfVxuXG4gIHRoaXMuZG9UaGVTdWJtaXQgPSAoZSkgPT4ge1xuICAgIGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICAvLyBvbmx5IGFkanVzdCBzdWJtaXNzaW9uIHdoZW4gdGhlcmUgaXMgYSBjb250YWluZXIsIG90aGVyd2lzZVxuICAgIC8vIGRvIG5vdGhpbmcgYW5kIGxlYXZlIGFzIGl0IGZvciByb2J1c3RuZXNzXG4gICAgaWYgKGNvbnRhaW5lci5oYXNFbGVtZW50KCkpIHtcbiAgICAgIGNvbnRhaW5lci5zdWJtaXRBbGwoXG4gICAgICAgIGdldERhdGEoKSxcbiAgICAgICAgZm9ybUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdtZXRob2QnKSxcbiAgICAgICAgZm9ybUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhY3Rpb24nKVxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZSAvLyBpbXBvcnRhbnQgdG8gc3RvcCBzdWJtaXNzaW9uXG4gIH1cblxuICB0aGlzLmdldEludmFsaWRFbGVtZW50ID0gKCkgPT4ge1xuICAgIGNvbnN0IGlucHV0RWxlbWVudHMgPSBnZXRJbnB1dEVsZW1lbnRzKClcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBpbnB1dEVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoIWlucHV0RWxlbWVudHNbaV0udmFsaWRpdHkudmFsaWQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0RWxlbWVudHNbaV1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZWxlY3RFbGVtZW50cyA9IGdldFNlbGVjdEVsZW1lbnRzKClcblxuICAgIGZvciAodmFyIGogPSAwLCBsZW4yID0gc2VsZWN0RWxlbWVudHMubGVuZ3RoOyBqIDwgbGVuMjsgaisrKSB7XG4gICAgICBpZiAoIXNlbGVjdEVsZW1lbnRzW2ldLnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RFbGVtZW50c1tqXVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICB0aGlzLnZhbGlkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIHByZXZlbnRzIGVuZGxlc3MgdmFsaWRhdGlvbiBsb29wXG4gICAgZGlzYWJsZUNvbnRhaW5lclZhbGlkYXRpb24gPSB0cnVlXG5cbiAgICBjb25zdCBmb3JtSXNWYWxpZCA9IGZvcm1FbGVtZW50LmNoZWNrVmFsaWRpdHkoKVxuXG4gICAgZGlzYWJsZUNvbnRhaW5lclZhbGlkYXRpb24gPSBmYWxzZVxuXG4gICAgcmV0dXJuIGZvcm1Jc1ZhbGlkXG4gIH1cblxuICB0aGlzLmZpbmRTdWJtaXRCdXR0b24gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbdHlwZT0nc3VibWl0J11cIilcbiAgfVxuXG4gIHRoaXMuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3JtRWxlbWVudCAmJiBoaWRkZW4oZm9ybUVsZW1lbnQsIHRydWUpXG4gIH1cblxuICB0aGlzLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9ybUVsZW1lbnQgJiYgaGlkZGVuKGZvcm1FbGVtZW50LCBmYWxzZSlcbiAgfVxufVxuXG51dGlsLmluaGVyaXRzKEZvcm0sIEV2ZW50RW1pdHRlcilcblxuZXhwb3J0IGRlZmF1bHQgRm9ybVxuIiwiLy8gZW5oYW5jZXMgb3B0aW9ucyB3aXRoIHVzZWZ1bCBmdW5jdGlvbnMgd2UgY2FuIHJldXNlIGV2ZXJ5d2hlcmVcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnZGVlcG1lcmdlJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGFkZEZ1bmN0aW9uczogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgYXVkaW9FbmFibGVkID0gb3B0aW9ucy5hdWRpbyAmJiBvcHRpb25zLmF1ZGlvLmVuYWJsZWRcblxuICAgIG9wdGlvbnMuaGFzRGVmaW5lZEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZGVvLmhlaWdodCAmJiB0aGlzLnZpZGVvLmhlaWdodCAhPT0gJ2F1dG8nXG4gICAgfVxuXG4gICAgb3B0aW9ucy5oYXNEZWZpbmVkV2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy52aWRlby53aWR0aCAmJiB0aGlzLnZpZGVvLndpZHRoICE9PSAnYXV0bydcbiAgICB9XG5cbiAgICBvcHRpb25zLmhhc0RlZmluZWREaW1lbnNpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5oYXNEZWZpbmVkV2lkdGgoKSB8fCB0aGlzLmhhc0RlZmluZWRIZWlnaHQoKVxuICAgIH1cblxuICAgIG9wdGlvbnMuaGFzRGVmaW5lZERpbWVuc2lvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5oYXNEZWZpbmVkV2lkdGgoKSAmJiB0aGlzLmhhc0RlZmluZWRIZWlnaHQoKVxuICAgIH1cblxuICAgIG9wdGlvbnMuZ2V0UmF0aW8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcmF0aW8gPSAxIC8vIGp1c3QgYSBkZWZhdWx0IG9uZSB3aGVuIG5vIGNvbXB1dGF0aW9ucyBhcmUgcG9zc2libGVcblxuICAgICAgLy8gdG9kbyBmaXggdGhpcywgaXQncyBub3QgcmVhbGx5IGFuIG9wdGlvblxuICAgICAgY29uc3QgaGFzVmlkZW9EaW1lbnNpb25zID0gdGhpcy52aWRlb0hlaWdodCAmJiB0aGlzLnZpZGVvV2lkdGhcblxuICAgICAgaWYgKHRoaXMuaGFzRGVmaW5lZERpbWVuc2lvbnMoKSkge1xuICAgICAgICBpZiAoaGFzVmlkZW9EaW1lbnNpb25zKSB7XG4gICAgICAgICAgLy8gZmlndXJlIG91dCBmaXJzdCB3aGljaCBvbmUgdG8gcGlja1xuICAgICAgICAgIGlmICh0aGlzLnZpZGVvSGVpZ2h0IDwgdGhpcy52aWRlby5oZWlnaHQgfHxcbiAgICAgICAgICAgICAgdGhpcy52aWRlb1dpZHRoIDwgdGhpcy52aWRlby53aWR0aCkge1xuICAgICAgICAgICAgcmF0aW8gPSB0aGlzLnZpZGVvSGVpZ2h0IC8gdGhpcy52aWRlb1dpZHRoXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJhdGlvID0gdGhpcy52aWRlby5oZWlnaHQgLyB0aGlzLnZpZGVvLndpZHRoXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJhdGlvID0gdGhpcy52aWRlby5oZWlnaHQgLyB0aGlzLnZpZGVvLndpZHRoXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaGFzVmlkZW9EaW1lbnNpb25zKSB7XG4gICAgICAgIHJhdGlvID0gdGhpcy52aWRlb0hlaWdodCAvIHRoaXMudmlkZW9XaWR0aFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmF0aW9cbiAgICB9XG5cbiAgICBvcHRpb25zLmlzQXVkaW9FbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGF1ZGlvRW5hYmxlZFxuICAgIH1cblxuICAgIG9wdGlvbnMuc2V0QXVkaW9FbmFibGVkID0gZnVuY3Rpb24gKGVuYWJsZWQpIHtcbiAgICAgIGF1ZGlvRW5hYmxlZCA9IGVuYWJsZWRcbiAgICB9XG5cbiAgICBvcHRpb25zLmlzQXV0b1BhdXNlRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmVuYWJsZUF1dG9QYXVzZSAmJiB0aGlzLmVuYWJsZVBhdXNlXG4gICAgfVxuICB9LFxuXG4gIC8vIG5vdCB2ZXJ5IGVsZWdhbnQgYnV0IHdvcmtzISBhbmQgaWYgeW91IGhlcmUgYXJlIHJlYWRpbmcgdGhpcywgYW5kXG4gIC8vIHN0YXJ0IHRvIGRvdWJ0LCByZXN0IGFzc3VyZWQsIGl0J3Mgc29saWQgYW5kIHJ1biB0aG91c2FuZCB0aW1lcyBvdmVyXG4gIC8vIGFuZCBvdmVyIGFnYWluIGVhY2ggZGF5LiBhbmQgb3RoZXIgbGFyZ2Ugc2l0ZXMgb3V0IHRoZXJlIGhhdmUgdGhlaXIgb3duXG4gIC8vIHRlY2ggZGVidHMuIGhvcGUgaSBoYXZlIHNoYXR0ZXJlZCB5b3VyIGlsbHVzaW9uIG9uIHBlcmZlY3Rpb24/XG4gIG1lcmdlOiBmdW5jdGlvbiAoZGVmYXVsdE9wdGlvbnMsIG5ld09wdGlvbnMpIHtcbiAgICBjb25zdCBvcHRpb25zID0gZGVlcG1lcmdlKGRlZmF1bHRPcHRpb25zLCBuZXdPcHRpb25zKVxuXG4gICAgdGhpcy5hZGRGdW5jdGlvbnMob3B0aW9ucylcblxuICAgIHJldHVybiBvcHRpb25zXG4gIH1cbn1cbiIsImltcG9ydCB1dGlsIGZyb20gJ3V0aWwnXG5pbXBvcnQgaCBmcm9tICdoeXBlcnNjcmlwdCdcbmltcG9ydCBoaWRkZW4gZnJvbSAnaGlkZGVuJ1xuXG5pbXBvcnQgUmVwbGF5IGZyb20gJy4vdmlzdWFscy9yZXBsYXknXG5pbXBvcnQgUmVjb3JkZXIgZnJvbSAnLi92aXN1YWxzL3JlY29yZGVyJ1xuaW1wb3J0IE5vdGlmaWVyIGZyb20gJy4vdmlzdWFscy9ub3RpZmllcidcbmltcG9ydCBSZWNvcmRlckluc2lkZXMgZnJvbSAnLi92aXN1YWxzL2luc2lkZS9yZWNvcmRlckluc2lkZXMnXG5cbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi8uLi91dGlsL2V2ZW50RW1pdHRlcidcbmltcG9ydCBFdmVudHMgZnJvbSAnLi8uLi9ldmVudHMnXG5cbmNvbnN0IFZpc3VhbHMgPSBmdW5jdGlvbiAoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMsIG9wdGlvbnMsICdWaXN1YWxzJylcblxuICBjb25zdCBzZWxmID0gdGhpc1xuXG4gIC8vIGNhbiBiZSBvdmVyd3JpdHRlbiB3aXRoIHNldHRlciBmblxuICB2YXIgcmVwbGF5ID0gbmV3IFJlcGxheSh0aGlzLCBvcHRpb25zKVxuXG4gIGNvbnN0IHJlY29yZGVyID0gbmV3IFJlY29yZGVyKHRoaXMsIHJlcGxheSwgb3B0aW9ucylcbiAgY29uc3QgcmVjb3JkZXJJbnNpZGVzID0gbmV3IFJlY29yZGVySW5zaWRlcyh0aGlzLCBvcHRpb25zKVxuXG4gIGNvbnN0IG5vdGlmaWVyID0gbmV3IE5vdGlmaWVyKHRoaXMsIG9wdGlvbnMpXG5cbiAgY29uc3QgZGVidWcgPSBvcHRpb25zLmRlYnVnXG5cbiAgdmFyIHZpc3VhbHNFbGVtZW50XG4gIHZhciBidWlsdFxuXG4gIGZ1bmN0aW9uIGJ1aWxkTm9TY3JpcHRUYWcgKCkge1xuICAgIHZhciBub1NjcmlwdEVsZW1lbnQgPSBjb250YWluZXIucXVlcnlTZWxlY3Rvcignbm9zY3JpcHQnKVxuXG4gICAgaWYgKCFub1NjcmlwdEVsZW1lbnQpIHtcbiAgICAgIG5vU2NyaXB0RWxlbWVudCA9IGgoJ25vc2NyaXB0JylcbiAgICAgIG5vU2NyaXB0RWxlbWVudC5pbm5lckhUTUwgPSAnUGxlYXNlIGVuYWJsZSBKYXZhc2NyaXB0J1xuXG4gICAgICB2aXN1YWxzRWxlbWVudC5hcHBlbmRDaGlsZChub1NjcmlwdEVsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRDaGlsZHJlbiAoKSB7XG4gICAgZGVidWcoJ1Zpc3VhbHM6IGJ1aWxkQ2hpbGRyZW4oKScpXG5cbiAgICBidWlsZE5vU2NyaXB0VGFnKClcblxuICAgIGlmICghb3B0aW9ucy5wbGF5ZXJPbmx5KSB7XG4gICAgICBub3RpZmllci5idWlsZCgpXG4gICAgICByZWNvcmRlckluc2lkZXMuYnVpbGQoKVxuICAgIH1cblxuICAgIHJlcGxheS5idWlsZCgpXG5cbiAgICBkZWJ1ZygnVmlzdWFsczogYnVpbHQuJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRFdmVudHMgKCkge1xuICAgIGlmICghb3B0aW9ucy5wbGF5ZXJPbmx5KSB7XG4gICAgICBkZWJ1ZygnVmlzdWFsczogaW5pdEV2ZW50cygpJylcblxuICAgICAgc2VsZlxuICAgICAgICAub24oRXZlbnRzLlVTRVJfTUVESUFfUkVBRFksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBidWlsdCA9IHRydWVcbiAgICAgICAgICBzZWxmLmVuZFdhaXRpbmcoKVxuICAgICAgICAgIGNvbnRhaW5lci5lbmFibGVGb3JtKGZhbHNlKVxuICAgICAgICB9KVxuICAgICAgICAub24oRXZlbnRzLlBSRVZJRVcsICgpID0+IHtcbiAgICAgICAgICBzZWxmLmVuZFdhaXRpbmcoKVxuICAgICAgICB9KVxuICAgICAgICAub24oRXZlbnRzLkJMT0NLSU5HLCBmdW5jdGlvbiAoYmxvY2tpbmdPcHRpb25zKSB7XG4gICAgICAgICAgaWYgKCFibG9ja2luZ09wdGlvbnMuaGlkZUZvcm0gJiYgIW9wdGlvbnMuYWRqdXN0Rm9ybU9uQnJvd3NlckVycm9yKSB7XG4gICAgICAgICAgICAvLyBkbyBub3RoaW5nLCB1c2VyIHN0aWxsIGNhbiBlbnRlciBmb3JtIGlucHV0c1xuICAgICAgICAgICAgLy8gY2FuIGJlIHVzZWZ1bCB3aGVuIHlvdSBhcmUgb24gaS5FLiBzZWVmbG93J3MgY29udGFjdCBwYWdlIGFuZFxuICAgICAgICAgICAgLy8gc3RpbGwgd2FudCB0byB0aWNrIG9mZiB0aGUgd2ViY2FtIG9wdGlvblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250YWluZXIuZGlzYWJsZUZvcm0odHJ1ZSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihFdmVudHMuUFJFVklFV19TSE9XTiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnRhaW5lci52YWxpZGF0ZSh0cnVlKVxuICAgICAgICB9KVxuICAgICAgICAub24oRXZlbnRzLkxPQURFRF9NRVRBX0RBVEEsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb3JyZWN0RGltZW5zaW9ucygpXG4gICAgICAgIH0pXG4gICAgICAgIC5vbihFdmVudHMuRVJST1IsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBpZiAoZXJyLnJlbW92ZURpbWVuc2lvbnMgJiYgZXJyLnJlbW92ZURpbWVuc2lvbnMoKSkge1xuICAgICAgICAgICAgcmVtb3ZlRGltZW5zaW9ucygpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvcnJlY3REaW1lbnNpb25zICgpIHtcbiAgICB2aXN1YWxzRWxlbWVudC5zdHlsZS53aWR0aCA9IHNlbGYuZ2V0UmVjb3JkZXJXaWR0aCh0cnVlKSArICdweCdcbiAgICB2aXN1YWxzRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBzZWxmLmdldFJlY29yZGVySGVpZ2h0KHRydWUpICsgJ3B4J1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlRGltZW5zaW9ucyAoKSB7XG4gICAgdmlzdWFsc0VsZW1lbnQuc3R5bGUud2lkdGggPSAnYXV0bydcbiAgICB2aXN1YWxzRWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnYXV0bydcbiAgfVxuXG4gIHRoaXMuZ2V0UmF0aW8gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHZpc3VhbHNFbGVtZW50LmNsaWVudFdpZHRoKSB7XG4gICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIHNhZmFyaSwgc2VlIGdldFJhdGlvKCkgaW4gcmVjb3JkZXJcbiAgICAgIHJldHVybiB2aXN1YWxzRWxlbWVudC5jbGllbnRIZWlnaHQgLyB2aXN1YWxzRWxlbWVudC5jbGllbnRXaWR0aFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMFxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUmVjb3JkYWJsZSAoKSB7XG4gICAgcmV0dXJuICFzZWxmLmlzTm90aWZ5aW5nKCkgJiYgIXJlcGxheS5pc1Nob3duKCkgJiYgIXNlbGYuaXNDb3VudGluZ0Rvd24oKVxuICB9XG5cbiAgdGhpcy5pc0NvdW50aW5nRG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmVjb3JkZXJJbnNpZGVzLmlzQ291bnRpbmdEb3duKClcbiAgfVxuXG4gIHRoaXMuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmlzdWFsc0VsZW1lbnQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLicgKyBvcHRpb25zLnNlbGVjdG9ycy52aXN1YWxzQ2xhc3MpXG5cbiAgICBpZiAoIXZpc3VhbHNFbGVtZW50KSB7XG4gICAgICB2aXN1YWxzRWxlbWVudCA9IGgoJ2Rpdi4nICsgb3B0aW9ucy5zZWxlY3RvcnMudmlzdWFsc0NsYXNzKVxuXG4gICAgICBjb25zdCBidXR0b25zRWxlbWVudCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuJyArIG9wdGlvbnMuc2VsZWN0b3JzLmJ1dHRvbnNDbGFzcylcblxuICAgICAgLy8gbWFrZSBzdXJlIGl0J3MgcGxhY2VkIGJlZm9yZSB0aGUgYnV0dG9ucywgYnV0IG9ubHkgaWYgaXQncyBhIGNoaWxkXG4gICAgICAvLyBlbGVtZW50IG9mIHRoZSBjb250YWluZXIgPSBpbnNpZGUgdGhlIGNvbnRhaW5lclxuICAgICAgaWYgKGJ1dHRvbnNFbGVtZW50ICYmICFjb250YWluZXIuaXNPdXRzaWRlRWxlbWVudE9mKGJ1dHRvbnNFbGVtZW50KSkge1xuICAgICAgICBjb250YWluZXIuaW5zZXJ0QmVmb3JlKHZpc3VhbHNFbGVtZW50LCBidXR0b25zRWxlbWVudClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh2aXN1YWxzRWxlbWVudClcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkbyBub3QgaGlkZSB2aXN1YWxzIGVsZW1lbnQgc28gdGhhdCBhcHBzIGNhbiBnaXZlIGl0IGEgcHJlZGVmaW5lZFxuICAgIC8vIHdpZHRoIG9yIGhlaWdodCB0aHJvdWdoIGNzcyBidXQgaGlkZSBhbGwgY2hpbGRyZW5cblxuICAgIHZpc3VhbHNFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3Zpc3VhbHMnKVxuXG4gICAgY29ycmVjdERpbWVuc2lvbnMoKVxuXG4gICAgIWJ1aWx0ICYmIGluaXRFdmVudHMoKVxuICAgIGJ1aWxkQ2hpbGRyZW4oKVxuXG4gICAgLy8gbmVlZGVkIGZvciByZXBsYXkgaGFuZGxpbmcgYW5kIGNvbnRhaW5lci5pc091dHNpZGVFbGVtZW50T2YoKVxuICAgIHNlbGYucGFyZW50Tm9kZSA9IHZpc3VhbHNFbGVtZW50LnBhcmVudE5vZGVcblxuICAgIGJ1aWx0ID0gdHJ1ZVxuICB9XG5cbiAgdGhpcy5xdWVyeVNlbGVjdG9yID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHZpc3VhbHNFbGVtZW50ICYmIHZpc3VhbHNFbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXG4gIH1cblxuICB0aGlzLmFwcGVuZENoaWxkID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgdmlzdWFsc0VsZW1lbnQgJiYgdmlzdWFsc0VsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGQpXG4gIH1cblxuICB0aGlzLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgdmlzdWFsc0VsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGQpXG4gIH1cblxuICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW5kV2FpdGluZygpXG4gICAgcmVjb3JkZXIucmVzZXQoKVxuICB9XG5cbiAgdGhpcy5iZWdpbldhaXRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29udGFpbmVyLmJlZ2luV2FpdGluZygpXG4gIH1cblxuICB0aGlzLmVuZFdhaXRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29udGFpbmVyLmVuZFdhaXRpbmcoKVxuICB9XG5cbiAgdGhpcy5zdG9wID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIHJlY29yZGVyLnN0b3AocGFyYW1zKVxuICAgIHJlY29yZGVySW5zaWRlcy5oaWRlUGF1c2UoKVxuICB9XG5cbiAgdGhpcy5iYWNrID0gZnVuY3Rpb24gKHBhcmFtcywgY2IpIHtcbiAgICBpZiAoIWNiICYmIHBhcmFtcykge1xuICAgICAgY2IgPSBwYXJhbXNcbiAgICAgIHBhcmFtcyA9IHt9XG4gICAgfVxuXG4gICAgcmVwbGF5LmhpZGUoKVxuICAgIG5vdGlmaWVyLmhpZGUoKVxuXG4gICAgaWYgKHBhcmFtcy5rZWVwSGlkZGVuKSB7XG4gICAgICByZWNvcmRlci5oaWRlKClcbiAgICAgIGNiICYmIGNiKClcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjb3JkZXIuYmFjayhjYilcbiAgICB9XG4gIH1cblxuICB0aGlzLnJlY29yZEFnYWluID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLm9uY2UoRXZlbnRzLlVTRVJfTUVESUFfUkVBRFksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5yZWNvcmQoKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgdGhpcy51bmxvYWQgPSBmdW5jdGlvbiAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZWNvcmRlci51bmxvYWQoZSlcbiAgICAgIHJlY29yZGVySW5zaWRlcy51bmxvYWQoZSlcbiAgICAgIHJlcGxheS51bmxvYWQoZSlcblxuICAgICAgYnVpbHQgPSBmYWxzZVxuICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgdGhpcy5lbWl0KEV2ZW50cy5FUlJPUiwgZXhjKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuaXNOb3RpZnlpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5vdGlmaWVyLmlzVmlzaWJsZSgpXG4gIH1cblxuICB0aGlzLmlzUmVwbGF5U2hvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlcGxheS5pc1Nob3duKClcbiAgfVxuXG4gIHRoaXMucGF1c2UgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgcmVjb3JkZXIucGF1c2UocGFyYW1zKVxuICAgIHJlY29yZGVySW5zaWRlcy5zaG93UGF1c2UoKVxuICB9XG5cbiAgdGhpcy5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJlY29yZGVySW5zaWRlcy5pc0NvdW50aW5nRG93bigpKSB7XG4gICAgICByZWNvcmRlckluc2lkZXMucmVzdW1lQ291bnRkb3duKClcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjb3JkZXIucmVzdW1lKClcbiAgICB9XG5cbiAgICByZWNvcmRlckluc2lkZXMuaGlkZVBhdXNlKClcbiAgfVxuXG4gIHRoaXMucGF1c2VPclJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaXNSZWNvcmRhYmxlLmNhbGwodGhpcykpIHtcbiAgICAgIGlmICh0aGlzLmlzUmVjb3JkaW5nKCkpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpXG4gICAgICB9IGVsc2UgaWYgKHJlY29yZGVyLmlzUGF1c2VkKCkpIHtcbiAgICAgICAgdGhpcy5yZXN1bWUoKVxuICAgICAgfSBlbHNlIGlmIChyZWNvcmRlci5pc1JlYWR5KCkpIHtcbiAgICAgICAgdGhpcy5yZWNvcmQoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMucmVjb3JkT3JTdG9wID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc1JlY29yZGFibGUoKSkge1xuICAgICAgaWYgKHRoaXMuaXNSZWNvcmRpbmcoKSkge1xuICAgICAgICB0aGlzLnN0b3AoKVxuICAgICAgfSBlbHNlIGlmIChyZWNvcmRlci5pc1JlYWR5KCkpIHtcbiAgICAgICAgdGhpcy5yZWNvcmQoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMucmVjb3JkID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChvcHRpb25zLnZpZGVvLmNvdW50ZG93bikge1xuICAgICAgdGhpcy5lbWl0KEV2ZW50cy5DT1VOVERPV04pXG4gICAgICByZWNvcmRlckluc2lkZXMuc3RhcnRDb3VudGRvd24ocmVjb3JkZXIucmVjb3JkLmJpbmQocmVjb3JkZXIpKVxuICAgIH0gZWxzZSB7IHJlY29yZGVyLnJlY29yZCgpIH1cbiAgfVxuXG4gIHRoaXMuZ2V0UmVjb3JkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlY29yZGVyXG4gIH1cblxuICB0aGlzLmdldFJlcGxheSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmVwbGF5XG4gIH1cblxuICB0aGlzLnZhbGlkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZWNvcmRlci52YWxpZGF0ZSgpICYmIHRoaXMuaXNSZXBsYXlTaG93bigpXG4gIH1cblxuICB0aGlzLmdldFJlY29yZGluZ1N0YXRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZWNvcmRlci5nZXRSZWNvcmRpbmdTdGF0cygpXG4gIH1cblxuICB0aGlzLmdldEF1ZGlvU2FtcGxlUmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmVjb3JkZXIuZ2V0QXVkaW9TYW1wbGVSYXRlKClcbiAgfVxuXG4gIHRoaXMuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlY29yZGVyLmlzUGF1c2VkKClcbiAgfVxuXG4gIHRoaXMuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgbm90aWZpZXIuZXJyb3IoZXJyKVxuICB9XG5cbiAgdGhpcy5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh2aXN1YWxzRWxlbWVudCkge1xuICAgICAgaGlkZGVuKHZpc3VhbHNFbGVtZW50LCB0cnVlKVxuICAgICAgdGhpcy5lbWl0KEV2ZW50cy5ISURFKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuaXNIaWRkZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFidWlsdCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2UgaWYgKHZpc3VhbHNFbGVtZW50KSB7XG4gICAgICByZXR1cm4gaGlkZGVuKHZpc3VhbHNFbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuc2hvd1Zpc3VhbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmlzdWFsc0VsZW1lbnQgJiYgaGlkZGVuKHZpc3VhbHNFbGVtZW50LCBmYWxzZSlcbiAgfVxuXG4gIHRoaXMuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAhdGhpcy5pc1JlcGxheVNob3duKCkgJiYgdmlzdWFsc0VsZW1lbnQgJiYgcmVjb3JkZXIuYnVpbGQoKVxuICAgIHRoaXMuc2hvd1Zpc3VhbHMoKVxuICB9XG5cbiAgdGhpcy5zaG93UmVwbGF5T25seSA9IGZ1bmN0aW9uICgpIHtcbiAgICAhdGhpcy5pc1JlcGxheVNob3duKCkgJiYgcmVwbGF5LnNob3coKVxuXG4gICAgdGhpcy5zaG93KClcbiAgICByZWNvcmRlci5oaWRlKClcbiAgICBub3RpZmllci5oaWRlKClcbiAgfVxuXG4gIHRoaXMuaXNSZWNvcmRlclVubG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZWNvcmRlci5pc1VubG9hZGVkKClcbiAgfVxuXG4gIHRoaXMuaXNDb25uZWN0aW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZWNvcmRlci5pc0Nvbm5lY3RpbmcoKVxuICB9XG5cbiAgdGhpcy5nZXRSZWNvcmRlcldpZHRoID0gZnVuY3Rpb24gKHJlc3BvbnNpdmUpIHtcbiAgICByZXR1cm4gcmVjb3JkZXIuZ2V0UmVjb3JkZXJXaWR0aChyZXNwb25zaXZlKVxuICB9XG5cbiAgdGhpcy5nZXRSZWNvcmRlckhlaWdodCA9IGZ1bmN0aW9uIChyZXNwb25zaXZlKSB7XG4gICAgcmV0dXJuIHJlY29yZGVyLmdldFJlY29yZGVySGVpZ2h0KHJlc3BvbnNpdmUpXG4gIH1cblxuICB0aGlzLmxpbWl0V2lkdGggPSBmdW5jdGlvbiAod2lkdGgpIHtcbiAgICByZXR1cm4gY29udGFpbmVyLmxpbWl0V2lkdGgod2lkdGgsIG9wdGlvbnMpXG4gIH1cblxuICB0aGlzLmxpbWl0SGVpZ2h0ID0gZnVuY3Rpb24gKGhlaWdodCkge1xuICAgIHJldHVybiBjb250YWluZXIubGltaXRIZWlnaHQoaGVpZ2h0KVxuICB9XG5cbiAgdGhpcy5jYWxjdWxhdGVXaWR0aCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5jYWxjdWxhdGVXaWR0aChvcHRpb25zKVxuICB9XG5cbiAgdGhpcy5jYWxjdWxhdGVIZWlnaHQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHJldHVybiBjb250YWluZXIuY2FsY3VsYXRlSGVpZ2h0KG9wdGlvbnMpXG4gIH1cblxuICB0aGlzLmdldFJlcGxheSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmVwbGF5XG4gIH1cblxuICB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBmaXhlcyBodHRwczovL2dpdGh1Yi5jb20vYmluYXJ5a2l0Y2hlbi92aWRlb21haWwtY2xpZW50L2lzc3Vlcy8xMjZcbiAgICByZXR1cm4gdmlzdWFsc0VsZW1lbnQgJiYgdmlzdWFsc0VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgfVxuXG4gIHRoaXMuY2hlY2tUaW1lciA9IGZ1bmN0aW9uIChpbnRlcnZhbFN1bSkge1xuICAgIHJlY29yZGVySW5zaWRlcy5jaGVja1RpbWVyKGludGVydmFsU3VtKVxuICB9XG5cbiAgdGhpcy5pc05vdGlmaWVyQnVpbHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5vdGlmaWVyICYmIG5vdGlmaWVyLmlzQnVpbHQoKVxuICB9XG5cbiAgdGhpcy5pc1JlcGxheVNob3duID0gcmVwbGF5LmlzU2hvd24uYmluZChyZXBsYXkpXG4gIHRoaXMuaGlkZVJlcGxheSA9IHJlcGxheS5oaWRlLmJpbmQocmVwbGF5KVxuICB0aGlzLmhpZGVSZWNvcmRlciA9IHJlY29yZGVyLmhpZGUuYmluZChyZWNvcmRlcilcbiAgdGhpcy5pc1JlY29yZGluZyA9IHJlY29yZGVyLmlzUmVjb3JkaW5nLmJpbmQocmVjb3JkZXIpXG4gIHRoaXMuaXNVc2VyTWVkaWFMb2FkZWQgPSByZWNvcmRlci5pc1VzZXJNZWRpYUxvYWRlZC5iaW5kKHJlY29yZGVyKVxuICB0aGlzLmlzQ29ubmVjdGVkID0gcmVjb3JkZXIuaXNDb25uZWN0ZWQuYmluZChyZWNvcmRlcilcbn1cblxudXRpbC5pbmhlcml0cyhWaXN1YWxzLCBFdmVudEVtaXR0ZXIpXG5cbmV4cG9ydCBkZWZhdWx0IFZpc3VhbHNcbiIsImltcG9ydCBoIGZyb20gJ2h5cGVyc2NyaXB0J1xuaW1wb3J0IGhpZGRlbiBmcm9tICdoaWRkZW4nXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh2aXN1YWxzLCBvcHRpb25zKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgdmFyIGNvdW50ZG93bkVsZW1lbnRcbiAgdmFyIGludGVydmFsSWRcbiAgdmFyIGNvdW50ZG93blxuICB2YXIgcGF1c2VkXG5cbiAgZnVuY3Rpb24gZmlyZSAoY2IpIHtcbiAgICBzZWxmLnVubG9hZCgpXG4gICAgc2VsZi5oaWRlKClcblxuICAgIC8vIGtlZXAgYWxsIGNhbGxiYWNrcyBhc3luY1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgY2IoKVxuICAgIH0sIDApXG4gIH1cblxuICBmdW5jdGlvbiBjb3VudEJhY2t3YXJkIChjYikge1xuICAgIGlmICghcGF1c2VkKSB7XG4gICAgICBvcHRpb25zLmRlYnVnKCdDb3VudGRvd24nLCBjb3VudGRvd24pXG4gICAgICBjb3VudGRvd24tLVxuXG4gICAgICBpZiAoY291bnRkb3duIDwgMSkge1xuICAgICAgICBmaXJlKGNiKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY291bnRkb3duRWxlbWVudC5pbm5lckhUTUwgPSBjb3VudGRvd25cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgY291bnRkb3duRWxlbWVudC5pbm5lckhUTUwgPSBjb3VudGRvd24gPSBvcHRpb25zLnZpZGVvLmNvdW50ZG93blxuXG4gICAgdGhpcy5zaG93KClcblxuICAgIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbChjb3VudEJhY2t3YXJkLmJpbmQodGhpcywgY2IpLCA5NTApXG4gIH1cblxuICB0aGlzLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgIHBhdXNlZCA9IHRydWVcbiAgfVxuXG4gIHRoaXMucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHBhdXNlZCA9IGZhbHNlXG4gIH1cblxuICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgIGNvdW50ZG93bkVsZW1lbnQgPSB2aXN1YWxzLnF1ZXJ5U2VsZWN0b3IoJy5jb3VudGRvd24nKVxuXG4gICAgaWYgKCFjb3VudGRvd25FbGVtZW50KSB7XG4gICAgICBjb3VudGRvd25FbGVtZW50ID0gaCgncC5jb3VudGRvd24nKVxuXG4gICAgICB0aGlzLmhpZGUoKVxuXG4gICAgICB2aXN1YWxzLmFwcGVuZENoaWxkKGNvdW50ZG93bkVsZW1lbnQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGlkZSgpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIGhpZGRlbihjb3VudGRvd25FbGVtZW50LCBmYWxzZSlcbiAgfVxuXG4gIHRoaXMuaXNDb3VudGluZ0Rvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhaW50ZXJ2YWxJZFxuICB9XG5cbiAgdGhpcy51bmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKVxuICAgIHBhdXNlZCA9IGZhbHNlXG4gICAgaW50ZXJ2YWxJZCA9IG51bGxcbiAgfVxuXG4gIHRoaXMuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBoaWRkZW4oY291bnRkb3duRWxlbWVudCwgdHJ1ZSlcbiAgICB0aGlzLnVubG9hZCgpXG4gIH1cbn1cbiIsImltcG9ydCBoIGZyb20gJ2h5cGVyc2NyaXB0J1xuaW1wb3J0IGhpZGRlbiBmcm9tICdoaWRkZW4nXG5cbmltcG9ydCBWaWRlb21haWxFcnJvciBmcm9tICcuLy4uLy4uLy4uLy4uL3V0aWwvdmlkZW9tYWlsRXJyb3InXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh2aXN1YWxzLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucy50ZXh0LnBhdXNlZEhlYWRlcikge1xuICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnUGF1c2VkIGhlYWRlciBjYW5ub3QgYmUgZW1wdHknLCBvcHRpb25zKVxuICB9XG5cbiAgdmFyIHBhdXNlZEJsb2NrRWxlbWVudFxuICB2YXIgcGF1c2VkSGVhZGVyRWxlbWVudFxuICB2YXIgcGF1c2VkSGludEVsZW1lbnRcblxuICBmdW5jdGlvbiBoYXNQYXVzZWRIaW50ICgpIHtcbiAgICByZXR1cm4gb3B0aW9ucy50ZXh0LnBhdXNlZEhpbnRcbiAgfVxuXG4gIHRoaXMuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcGF1c2VkQmxvY2tFbGVtZW50ID0gdmlzdWFscy5xdWVyeVNlbGVjdG9yKCcucGF1c2VkJylcbiAgICBwYXVzZWRIZWFkZXJFbGVtZW50ID0gdmlzdWFscy5xdWVyeVNlbGVjdG9yKCcucGF1c2VkSGVhZGVyJylcblxuICAgIGlmICghcGF1c2VkSGVhZGVyRWxlbWVudCkge1xuICAgICAgcGF1c2VkQmxvY2tFbGVtZW50ID0gaCgnZGl2LnBhdXNlZCcpXG4gICAgICBwYXVzZWRIZWFkZXJFbGVtZW50ID0gaCgncC5wYXVzZWRIZWFkZXInKVxuXG4gICAgICB0aGlzLmhpZGUoKVxuXG4gICAgICBwYXVzZWRIZWFkZXJFbGVtZW50LmlubmVySFRNTCA9IG9wdGlvbnMudGV4dC5wYXVzZWRIZWFkZXJcblxuICAgICAgcGF1c2VkQmxvY2tFbGVtZW50LmFwcGVuZENoaWxkKHBhdXNlZEhlYWRlckVsZW1lbnQpXG5cbiAgICAgIGlmIChoYXNQYXVzZWRIaW50KCkpIHtcbiAgICAgICAgcGF1c2VkSGludEVsZW1lbnQgPSB2aXN1YWxzLnF1ZXJ5U2VsZWN0b3IoJy5wYXVzZWRIaW50JylcbiAgICAgICAgcGF1c2VkSGludEVsZW1lbnQgPSBoKCdwLnBhdXNlZEhpbnQnKVxuICAgICAgICBwYXVzZWRIaW50RWxlbWVudC5pbm5lckhUTUwgPSBvcHRpb25zLnRleHQucGF1c2VkSGludFxuICAgICAgICBwYXVzZWRCbG9ja0VsZW1lbnQuYXBwZW5kQ2hpbGQocGF1c2VkSGludEVsZW1lbnQpXG4gICAgICB9XG5cbiAgICAgIHZpc3VhbHMuYXBwZW5kQ2hpbGQocGF1c2VkQmxvY2tFbGVtZW50KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhpZGUoKVxuXG4gICAgICBwYXVzZWRIZWFkZXJFbGVtZW50LmlubmVySFRNTCA9IG9wdGlvbnMudGV4dC5wYXVzZWRIZWFkZXJcblxuICAgICAgaWYgKGhhc1BhdXNlZEhpbnQoKSkge1xuICAgICAgICBwYXVzZWRIaW50RWxlbWVudC5pbm5lckhUTUwgPSBvcHRpb25zLnRleHQucGF1c2VkSGludFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBoaWRkZW4ocGF1c2VkQmxvY2tFbGVtZW50LCB0cnVlKVxuICB9XG5cbiAgdGhpcy5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIGhpZGRlbihwYXVzZWRCbG9ja0VsZW1lbnQsIGZhbHNlKVxuICB9XG59XG4iLCJpbXBvcnQgaCBmcm9tICdoeXBlcnNjcmlwdCdcbmltcG9ydCBoaWRkZW4gZnJvbSAnaGlkZGVuJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAodmlzdWFscykge1xuICB2YXIgcmVjb3JkTm90ZUVsZW1lbnRcblxuICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgIHJlY29yZE5vdGVFbGVtZW50ID0gdmlzdWFscy5xdWVyeVNlbGVjdG9yKCcucmVjb3JkTm90ZScpXG5cbiAgICBpZiAoIXJlY29yZE5vdGVFbGVtZW50KSB7XG4gICAgICByZWNvcmROb3RlRWxlbWVudCA9IGgoJ3AucmVjb3JkTm90ZScpXG5cbiAgICAgIHRoaXMuaGlkZSgpXG5cbiAgICAgIHZpc3VhbHMuYXBwZW5kQ2hpbGQocmVjb3JkTm90ZUVsZW1lbnQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGlkZSgpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaGlkZSgpXG4gICAgcmVjb3JkTm90ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnbmVhcicpXG4gICAgcmVjb3JkTm90ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnbmlnaCcpXG4gIH1cblxuICB0aGlzLnNldE5lYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmVjb3JkTm90ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbmVhcicpXG4gIH1cblxuICB0aGlzLnNldE5pZ2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmVjb3JkTm90ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbmlnaCcpXG4gIH1cblxuICB0aGlzLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaGlkZGVuKHJlY29yZE5vdGVFbGVtZW50LCB0cnVlKVxuICB9XG5cbiAgdGhpcy5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIGhpZGRlbihyZWNvcmROb3RlRWxlbWVudCwgZmFsc2UpXG4gIH1cbn1cbiIsImltcG9ydCBoIGZyb20gJ2h5cGVyc2NyaXB0J1xuaW1wb3J0IGhpZGRlbiBmcm9tICdoaWRkZW4nXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh2aXN1YWxzLCByZWNvcmROb3RlLCBvcHRpb25zKSB7XG4gIHZhciByZWNvcmRUaW1lckVsZW1lbnRcblxuICB2YXIgbmVhckNvbXB1dGVkID0gZmFsc2VcbiAgdmFyIGVuZE5pZ2hDb21wdXRlZCA9IGZhbHNlXG5cbiAgdmFyIHN0YXJ0ZWRcbiAgdmFyIGNvdW50ZG93blxuXG4gIGZ1bmN0aW9uIHBhZCAobikge1xuICAgIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuIDogblxuICB9XG5cbiAgZnVuY3Rpb24gdGhyZXNob2xkUmVhY2hlZCAoc2VjcywgdGhyZXNob2xkKSB7XG4gICAgcmV0dXJuIHNlY3MgPj0gb3B0aW9ucy52aWRlby5saW1pdFNlY29uZHMgKiB0aHJlc2hvbGRcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzTmVhciAoc2Vjcykge1xuICAgIGlmICghbmVhckNvbXB1dGVkICYmIHRocmVzaG9sZFJlYWNoZWQoc2VjcywgMC42KSkge1xuICAgICAgbmVhckNvbXB1dGVkID0gdHJ1ZVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW5kSXNOaWdoIChzZWNzKSB7XG4gICAgaWYgKCFlbmROaWdoQ29tcHV0ZWQgJiYgdGhyZXNob2xkUmVhY2hlZChzZWNzLCAwLjgpKSB7XG4gICAgICBlbmROaWdoQ29tcHV0ZWQgPSB0cnVlXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXROZWFyICgpIHtcbiAgICByZWNvcmRUaW1lckVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbmVhcicpXG4gIH1cblxuICBmdW5jdGlvbiBzZXROaWdoICgpIHtcbiAgICByZWNvcmRUaW1lckVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbmlnaCcpXG4gIH1cblxuICB0aGlzLmNoZWNrID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgICBjb25zdCBuZXdDb3VudGRvd24gPSBnZXRTdGFydFNlY29uZHMoKSAtIE1hdGguZmxvb3Iob3B0cy5pbnRlcnZhbFN1bSAvIDFlMylcblxuICAgIC8vIHBlcmZvcm1hbmNlIG9wdGltaXNhdGlvbiAoYW5vdGhlciByZWFzb24gd2UgbmVlZCByZWFjdCBoZXJlISlcbiAgICBpZiAobmV3Q291bnRkb3duICE9PSBjb3VudGRvd24pIHtcbiAgICAgIGNvdW50ZG93biA9IG5ld0NvdW50ZG93blxuICAgICAgdXBkYXRlKClcbiAgICAgIGNvdW50ZG93biA8IDEgJiYgdmlzdWFscy5zdG9wKHRydWUpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlICgpIHtcbiAgICBjb25zdCBtaW5zID0gcGFyc2VJbnQoY291bnRkb3duIC8gNjAsIDEwKVxuICAgIGNvbnN0IHNlY3MgPSBjb3VudGRvd24gLSBtaW5zICogNjBcblxuICAgIGlmICghbmVhckNvbXB1dGVkIHx8ICFlbmROaWdoQ29tcHV0ZWQpIHtcbiAgICAgIGNvbnN0IHJlbWFpbmluZ1NlY29uZHMgPSBvcHRpb25zLnZpZGVvLmxpbWl0U2Vjb25kcyAtIGNvdW50ZG93blxuXG4gICAgICBpZiAoaXNOZWFyKHJlbWFpbmluZ1NlY29uZHMpKSB7XG4gICAgICAgIHJlY29yZE5vdGUuc2V0TmVhcigpXG4gICAgICAgIHNldE5lYXIoKVxuXG4gICAgICAgIG9wdGlvbnMuZGVidWcoJ0VuZCBpcyBuZWFyLCAnICsgY291bnRkb3duICsgJyBzZWNvbmRzIHRvIGdvJylcbiAgICAgIH0gZWxzZSBpZiAoZW5kSXNOaWdoKHJlbWFpbmluZ1NlY29uZHMpKSB7XG4gICAgICAgIHJlY29yZE5vdGUuc2V0TmlnaCgpXG4gICAgICAgIHNldE5pZ2goKVxuXG4gICAgICAgIG9wdGlvbnMuZGVidWcoJ0VuZCBpcyBuaWdoLCAnICsgY291bnRkb3duICsgJyBzZWNvbmRzIHRvIGdvJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZWNvcmRUaW1lckVsZW1lbnQuaW5uZXJIVE1MID0gbWlucyArICc6JyArIHBhZChzZWNzKVxuICB9XG5cbiAgZnVuY3Rpb24gaGlkZSAoKSB7XG4gICAgaGlkZGVuKHJlY29yZFRpbWVyRWxlbWVudCwgdHJ1ZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3cgKCkge1xuICAgIHJlY29yZFRpbWVyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCduZWFyJylcbiAgICByZWNvcmRUaW1lckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnbmlnaCcpXG5cbiAgICBoaWRkZW4ocmVjb3JkVGltZXJFbGVtZW50LCBmYWxzZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNlY29uZHNSZWNvcmRlZCAoKSB7XG4gICAgcmV0dXJuIGdldFN0YXJ0U2Vjb25kcygpIC0gY291bnRkb3duXG4gIH1cblxuICBmdW5jdGlvbiBnZXRTdGFydFNlY29uZHMgKCkge1xuICAgIHJldHVybiBvcHRpb25zLnZpZGVvLmxpbWl0U2Vjb25kc1xuICB9XG5cbiAgdGhpcy5zdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb3VudGRvd24gPSBnZXRTdGFydFNlY29uZHMoKVxuICAgIG5lYXJDb21wdXRlZCA9IGVuZE5pZ2hDb21wdXRlZCA9IGZhbHNlXG4gICAgc3RhcnRlZCA9IHRydWVcblxuICAgIHVwZGF0ZSgpXG5cbiAgICBzaG93KClcbiAgfVxuXG4gIHRoaXMucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmVjb3JkTm90ZS5oaWRlKClcbiAgfVxuXG4gIHRoaXMucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHJlY29yZE5vdGUuc2hvdygpXG4gIH1cblxuICBmdW5jdGlvbiBpc1N0b3BwZWQgKCkge1xuICAgIHJldHVybiBjb3VudGRvd24gPT09IG51bGxcbiAgfVxuXG4gIHRoaXMuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWlzU3RvcHBlZCgpICYmIHN0YXJ0ZWQpIHtcbiAgICAgIG9wdGlvbnMuZGVidWcoJ1N0b3BwaW5nIHJlY29yZCB0aW1lci4gV2FzIHJlY29yZGluZyBmb3IgYWJvdXQgficgKyBnZXRTZWNvbmRzUmVjb3JkZWQoKSArICcgc2Vjb25kcy4nKVxuXG4gICAgICBoaWRlKClcbiAgICAgIHJlY29yZE5vdGUuc3RvcCgpXG5cbiAgICAgIGNvdW50ZG93biA9IG51bGxcbiAgICAgIHN0YXJ0ZWQgPSBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmVjb3JkVGltZXJFbGVtZW50ID0gdmlzdWFscy5xdWVyeVNlbGVjdG9yKCcucmVjb3JkVGltZXInKVxuXG4gICAgaWYgKCFyZWNvcmRUaW1lckVsZW1lbnQpIHtcbiAgICAgIHJlY29yZFRpbWVyRWxlbWVudCA9IGgoJ3AucmVjb3JkVGltZXInKVxuXG4gICAgICBoaWRlKClcblxuICAgICAgdmlzdWFscy5hcHBlbmRDaGlsZChyZWNvcmRUaW1lckVsZW1lbnQpXG4gICAgfSBlbHNlIHtcbiAgICAgIGhpZGUoKVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHV0aWwgZnJvbSAndXRpbCdcblxuaW1wb3J0IEV2ZW50cyBmcm9tICcuLy4uLy4uLy4uL2V2ZW50cydcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi8uLi8uLi8uLi91dGlsL2V2ZW50RW1pdHRlcidcblxuaW1wb3J0IENvdW50ZG93biBmcm9tICcuL3JlY29yZGVyL2NvdW50ZG93bidcbmltcG9ydCBQYXVzZWROb3RlIGZyb20gJy4vcmVjb3JkZXIvcGF1c2VkTm90ZSdcbmltcG9ydCBSZWNvcmROb3RlIGZyb20gJy4vcmVjb3JkZXIvcmVjb3JkTm90ZSdcbmltcG9ydCBSZWNvcmRUaW1lciBmcm9tICcuL3JlY29yZGVyL3JlY29yZFRpbWVyJ1xuXG5jb25zdCBSZWNvcmRlckluc2lkZXMgPSBmdW5jdGlvbiAodmlzdWFscywgb3B0aW9ucykge1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzLCBvcHRpb25zLCAnUmVjb3JkZXJJbnNpZGVzJylcblxuICBjb25zdCBzZWxmID0gdGhpc1xuICBjb25zdCBkZWJ1ZyA9IG9wdGlvbnMuZGVidWdcblxuICBjb25zdCByZWNvcmROb3RlID0gbmV3IFJlY29yZE5vdGUodmlzdWFscylcbiAgY29uc3QgcmVjb3JkVGltZXIgPSBuZXcgUmVjb3JkVGltZXIodmlzdWFscywgcmVjb3JkTm90ZSwgb3B0aW9ucylcblxuICB2YXIgY291bnRkb3duXG4gIHZhciBwYXVzZWROb3RlXG4gIHZhciBidWlsdFxuXG4gIGlmIChvcHRpb25zLnZpZGVvLmNvdW50ZG93bikge1xuICAgIGNvdW50ZG93biA9IG5ldyBDb3VudGRvd24odmlzdWFscywgb3B0aW9ucylcbiAgfVxuXG4gIGlmIChvcHRpb25zLmVuYWJsZVBhdXNlKSB7XG4gICAgcGF1c2VkTm90ZSA9IG5ldyBQYXVzZWROb3RlKHZpc3VhbHMsIG9wdGlvbnMpXG4gIH1cblxuICBmdW5jdGlvbiBzdGFydFJlY29yZGluZyAoKSB7XG4gICAgcmVjb3JkVGltZXIuc3RhcnQoKVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzdW1lUmVjb3JkaW5nICgpIHtcbiAgICByZWNvcmRUaW1lci5yZXN1bWUoKVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcFJlY29yZGluZyAoKSB7XG4gICAgcmVjb3JkVGltZXIuc3RvcCgpXG4gIH1cblxuICBmdW5jdGlvbiBwYXVzZVJlY29yZGluZyAoKSB7XG4gICAgaWYgKHNlbGYuaXNDb3VudGluZ0Rvd24oKSkge1xuICAgICAgY291bnRkb3duLnBhdXNlKClcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjb3JkVGltZXIucGF1c2UoKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUmVzZXR0aW5nICgpIHtcbiAgICBzZWxmLmhpZGVQYXVzZSgpXG4gICAgc2VsZi5oaWRlQ291bnRkb3duKClcbiAgICByZWNvcmRUaW1lci5zdG9wKClcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRFdmVudHMgKCkge1xuICAgIGRlYnVnKCdSZWNvcmRlckluc2lkZXM6IGluaXRFdmVudHMoKScpXG5cbiAgICBzZWxmXG4gICAgICAub24oRXZlbnRzLlJFQ09SRElORywgZnVuY3Rpb24gKCkge1xuICAgICAgICBzdGFydFJlY29yZGluZygpXG4gICAgICB9KVxuICAgICAgLm9uKEV2ZW50cy5SRVNVTUlORywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXN1bWVSZWNvcmRpbmcoKVxuICAgICAgfSlcbiAgICAgIC5vbihFdmVudHMuU1RPUFBJTkcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3RvcFJlY29yZGluZygpXG4gICAgICB9KVxuICAgICAgLm9uKEV2ZW50cy5QQVVTRUQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcGF1c2VSZWNvcmRpbmcoKVxuICAgICAgfSlcbiAgICAgIC5vbihFdmVudHMuUkVTRVRUSU5HLCBvblJlc2V0dGluZylcbiAgICAgIC5vbihFdmVudHMuSElERSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLmhpZGVDb3VudGRvd24oKVxuICAgICAgfSlcbiAgfVxuXG4gIHRoaXMuYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ1JlY29yZGVySW5zaWRlczogYnVpbGQoKScpXG5cbiAgICBjb3VudGRvd24gJiYgY291bnRkb3duLmJ1aWxkKClcbiAgICBwYXVzZWROb3RlICYmIHBhdXNlZE5vdGUuYnVpbGQoKVxuXG4gICAgcmVjb3JkTm90ZS5idWlsZCgpXG4gICAgcmVjb3JkVGltZXIuYnVpbGQoKVxuXG4gICAgIWJ1aWx0ICYmIGluaXRFdmVudHMoKVxuXG4gICAgYnVpbHQgPSB0cnVlXG4gIH1cblxuICB0aGlzLnVubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb3VudGRvd24gJiYgY291bnRkb3duLnVubG9hZCgpXG5cbiAgICBidWlsdCA9IGZhbHNlXG4gIH1cblxuICB0aGlzLnNob3dQYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBwYXVzZWROb3RlICYmIHBhdXNlZE5vdGUuc2hvdygpXG4gIH1cblxuICB0aGlzLmhpZGVQYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBwYXVzZWROb3RlICYmIHBhdXNlZE5vdGUuaGlkZSgpXG4gIH1cblxuICB0aGlzLmhpZGVDb3VudGRvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRkb3duICYmIGNvdW50ZG93bi5oaWRlKClcbiAgfVxuXG4gIHRoaXMuc3RhcnRDb3VudGRvd24gPSBmdW5jdGlvbiAoY2IpIHtcbiAgICBjb3VudGRvd24gJiYgY291bnRkb3duLnN0YXJ0KGNiKVxuICB9XG5cbiAgdGhpcy5yZXN1bWVDb3VudGRvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRkb3duICYmIGNvdW50ZG93bi5yZXN1bWUoKVxuICB9XG5cbiAgdGhpcy5pc0NvdW50aW5nRG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY291bnRkb3duICYmIGNvdW50ZG93bi5pc0NvdW50aW5nRG93bigpXG4gIH1cblxuICB0aGlzLmNoZWNrVGltZXIgPSBmdW5jdGlvbiAoaW50ZXJ2YWxTdW0pIHtcbiAgICByZWNvcmRUaW1lci5jaGVjayhpbnRlcnZhbFN1bSlcbiAgfVxufVxuXG51dGlsLmluaGVyaXRzKFJlY29yZGVySW5zaWRlcywgRXZlbnRFbWl0dGVyKVxuXG5leHBvcnQgZGVmYXVsdCBSZWNvcmRlckluc2lkZXNcbiIsImltcG9ydCB1dGlsIGZyb20gJ3V0aWwnXG5pbXBvcnQgaCBmcm9tICdoeXBlcnNjcmlwdCdcbmltcG9ydCBoaWRkZW4gZnJvbSAnaGlkZGVuJ1xuXG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJy4vLi4vLi4vdXRpbC9ldmVudEVtaXR0ZXInXG5pbXBvcnQgRXZlbnRzIGZyb20gJy4vLi4vLi4vZXZlbnRzJ1xuXG5jb25zdCBOb3RpZmllciA9IGZ1bmN0aW9uICh2aXN1YWxzLCBvcHRpb25zKSB7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMsIG9wdGlvbnMsICdOb3RpZmllcicpXG5cbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgY29uc3QgZGVidWcgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVidWdcblxuICB2YXIgbm90aWZ5RWxlbWVudFxuICB2YXIgbWVzc2FnZUVsZW1lbnRcbiAgdmFyIGV4cGxhbmF0aW9uRWxlbWVudFxuICB2YXIgZW50ZXJ0YWluVGltZW91dElkXG4gIHZhciBlbnRlcnRhaW5pbmdcbiAgdmFyIGJ1aWx0XG5cbiAgZnVuY3Rpb24gb25TdG9wcGluZyAobGltaXRSZWFjaGVkKSB7XG4gICAgdmFyIGxlYWQgPSAnJ1xuXG4gICAgdmlzdWFscy5iZWdpbldhaXRpbmcoKVxuXG4gICAgaWYgKGxpbWl0UmVhY2hlZCkge1xuICAgICAgZGVidWcoJ0xpbWl0IHJlYWNoZWQnKVxuICAgICAgbGVhZCArPSBvcHRpb25zLnRleHQubGltaXRSZWFjaGVkICsgJy48YnIvPidcbiAgICB9XG5cbiAgICBsZWFkICs9IG9wdGlvbnMudGV4dC5zZW5kaW5nICsgJyDigKYnXG5cbiAgICBzZWxmLm5vdGlmeShsZWFkLCBudWxsLCB7XG4gICAgICBzdGlsbFdhaXQ6IHRydWUsXG4gICAgICBlbnRlcnRhaW46IG9wdGlvbnMubm90aWZpZXIuZW50ZXJ0YWluXG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ29ubmVjdGluZyAoKSB7XG4gICAgc2VsZi5ub3RpZnkoJ0Nvbm5lY3Rpbmcg4oCmJylcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uTG9hZGluZ1VzZXJNZWRpYSAoKSB7XG4gICAgc2VsZi5ub3RpZnkoJ0xvYWRpbmcgd2ViY2FtIOKApicpXG4gIH1cblxuICBmdW5jdGlvbiBvblByb2dyZXNzIChmcmFtZVByb2dyZXNzLCBzYW1wbGVQcm9ncmVzcykge1xuICAgIHZhciBvdmVyYWxsUHJvZ3Jlc3NcblxuICAgIGlmIChvcHRpb25zLmlzQXVkaW9FbmFibGVkKCkpIHtcbiAgICAgIG92ZXJhbGxQcm9ncmVzcyA9ICdWaWRlbzogJyArIGZyYW1lUHJvZ3Jlc3NcblxuICAgICAgaWYgKHNhbXBsZVByb2dyZXNzKSB7XG4gICAgICAgIG92ZXJhbGxQcm9ncmVzcyArPSAnLCBBdWRpbzogJyArIHNhbXBsZVByb2dyZXNzXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG92ZXJhbGxQcm9ncmVzcyA9IGZyYW1lUHJvZ3Jlc3NcbiAgICB9XG5cbiAgICBzZWxmLnNldEV4cGxhbmF0aW9uKG92ZXJhbGxQcm9ncmVzcylcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQmVnaW5WaWRlb0VuY29kaW5nICgpIHtcbiAgICB2aXN1YWxzLmJlZ2luV2FpdGluZygpXG5cbiAgICBjb25zdCBsZWFkID0gb3B0aW9ucy50ZXh0LmVuY29kaW5nICsgJyDigKYnXG5cbiAgICBzZWxmLm5vdGlmeShsZWFkLCBudWxsLCB7XG4gICAgICBzdGlsbFdhaXQ6IHRydWUsXG4gICAgICBlbnRlcnRhaW46IG9wdGlvbnMubm90aWZpZXIuZW50ZXJ0YWluXG4gICAgfSlcblxuICAgIGhpZGVFeHBsYW5hdGlvbigpXG4gIH1cblxuICBmdW5jdGlvbiBpbml0RXZlbnRzICgpIHtcbiAgICBkZWJ1ZygnTm90aWZpZXI6IGluaXRFdmVudHMoKScpXG5cbiAgICBzZWxmXG4gICAgICAub24oRXZlbnRzLkNPTk5FQ1RJTkcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb25Db25uZWN0aW5nKClcbiAgICAgIH0pXG4gICAgICAub24oRXZlbnRzLkxPQURJTkdfVVNFUl9NRURJQSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBvbkxvYWRpbmdVc2VyTWVkaWEoKVxuICAgICAgfSlcbiAgICAgIC5vbihFdmVudHMuVVNFUl9NRURJQV9SRUFEWSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLmhpZGUoKVxuICAgICAgfSlcbiAgICAgIC5vbihFdmVudHMuTE9BREVEX01FVEFfREFUQSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb3JyZWN0RGltZW5zaW9ucygpXG4gICAgICB9KVxuICAgICAgLm9uKEV2ZW50cy5QUkVWSUVXLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYuaGlkZSgpXG4gICAgICB9KVxuICAgICAgLm9uKEV2ZW50cy5TVE9QUElORywgZnVuY3Rpb24gKGxpbWl0UmVhY2hlZCkge1xuICAgICAgICBvblN0b3BwaW5nKGxpbWl0UmVhY2hlZClcbiAgICAgIH0pXG4gICAgICAub24oRXZlbnRzLlBST0dSRVNTLCBmdW5jdGlvbiAoZnJhbWVQcm9ncmVzcywgc2FtcGxlUHJvZ3Jlc3MpIHtcbiAgICAgICAgb25Qcm9ncmVzcyhmcmFtZVByb2dyZXNzLCBzYW1wbGVQcm9ncmVzcylcbiAgICAgIH0pXG4gICAgICAub24oRXZlbnRzLkJFR0lOX1ZJREVPX0VOQ09ESU5HLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9uQmVnaW5WaWRlb0VuY29kaW5nKClcbiAgICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBjb3JyZWN0RGltZW5zaW9ucyAoKSB7XG4gICAgbm90aWZ5RWxlbWVudC5zdHlsZS53aWR0aCA9IHZpc3VhbHMuZ2V0UmVjb3JkZXJXaWR0aCh0cnVlKSArICdweCdcbiAgICBub3RpZnlFbGVtZW50LnN0eWxlLmhlaWdodCA9IHZpc3VhbHMuZ2V0UmVjb3JkZXJIZWlnaHQodHJ1ZSkgKyAncHgnXG4gIH1cblxuICBmdW5jdGlvbiBzaG93ICgpIHtcbiAgICBub3RpZnlFbGVtZW50ICYmIGhpZGRlbihub3RpZnlFbGVtZW50LCBmYWxzZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1bkVudGVydGFpbm1lbnQgKCkge1xuICAgIGlmIChvcHRpb25zLm5vdGlmaWVyLmVudGVydGFpbikge1xuICAgICAgaWYgKCFlbnRlcnRhaW5pbmcpIHtcbiAgICAgICAgY29uc3QgcmFuZG9tQmFja2dyb3VuZENsYXNzID0gTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSAqIG9wdGlvbnMubm90aWZpZXIuZW50ZXJ0YWluTGltaXQpICsgMSlcblxuICAgICAgICBub3RpZnlFbGVtZW50LmNsYXNzTmFtZSA9ICdub3RpZmllciBlbnRlcnRhaW4gJyArXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5ub3RpZmllci5lbnRlcnRhaW5DbGFzcyArXG4gICAgICAgICAgICAgICAgcmFuZG9tQmFja2dyb3VuZENsYXNzXG5cbiAgICAgICAgZW50ZXJ0YWluVGltZW91dElkID0gc2V0VGltZW91dChydW5FbnRlcnRhaW5tZW50LCBvcHRpb25zLm5vdGlmaWVyLmVudGVydGFpbkludGVydmFsKVxuICAgICAgICBlbnRlcnRhaW5pbmcgPSB0cnVlXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbmNlbEVudGVydGFpbm1lbnQoKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbEVudGVydGFpbm1lbnQgKCkge1xuICAgIGlmIChub3RpZnlFbGVtZW50KSB7XG4gICAgICBub3RpZnlFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2VudGVydGFpbicpXG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KGVudGVydGFpblRpbWVvdXRJZClcbiAgICBlbnRlcnRhaW5UaW1lb3V0SWQgPSBudWxsXG4gICAgZW50ZXJ0YWluaW5nID0gZmFsc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldE1lc3NhZ2UgKG1lc3NhZ2UsIG1lc3NhZ2VPcHRpb25zKSB7XG4gICAgY29uc3QgcHJvYmxlbSA9IG1lc3NhZ2VPcHRpb25zLnByb2JsZW0gPyBtZXNzYWdlT3B0aW9ucy5wcm9ibGVtIDogZmFsc2VcblxuICAgIGlmIChtZXNzYWdlRWxlbWVudCkge1xuICAgICAgbWVzc2FnZUVsZW1lbnQuaW5uZXJIVE1MID0gKHByb2JsZW0gPyAnJiN4MjYzOTsgJyA6ICcnKSArIG1lc3NhZ2VcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucy5sb2dnZXIud2FybihcbiAgICAgICAgJ1VuYWJsZSB0byBzaG93IGZvbGxvd2luZyBiZWNhdXNlIG1lc3NhZ2VFbGVtZW50IGlzIGVtcHR5OicsXG4gICAgICAgIG1lc3NhZ2VcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICB0aGlzLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBlcnIubWVzc2FnZSA/IGVyci5tZXNzYWdlLnRvU3RyaW5nKCkgOiBlcnIudG9TdHJpbmcoKVxuICAgIGNvbnN0IGV4cGxhbmF0aW9uID0gZXJyLmV4cGxhbmF0aW9uID8gZXJyLmV4cGxhbmF0aW9uLnRvU3RyaW5nKCkgOiBudWxsXG5cbiAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgIG9wdGlvbnMuZGVidWcoJ1dlaXJkIGVtcHR5IG1lc3NhZ2UgZ2VuZXJhdGVkIGZvciBlcnJvcicsIGVycilcbiAgICB9XG5cbiAgICBzZWxmLm5vdGlmeShtZXNzYWdlLCBleHBsYW5hdGlvbiwge1xuICAgICAgYmxvY2tpbmc6IHRydWUsXG4gICAgICBwcm9ibGVtOiB0cnVlLFxuICAgICAgaGlkZUZvcm06IGVyci5oaWRlRm9ybSAmJiBlcnIuaGlkZUZvcm0oKSxcbiAgICAgIGNsYXNzTGlzdDogZXJyLmdldENsYXNzTGlzdCAmJiBlcnIuZ2V0Q2xhc3NMaXN0KCksXG4gICAgICByZW1vdmVEaW1lbnNpb25zOiBlcnIucmVtb3ZlRGltZW5zaW9ucyAmJiBlcnIucmVtb3ZlRGltZW5zaW9ucygpXG4gICAgfSlcbiAgfVxuXG4gIHRoaXMuc2V0RXhwbGFuYXRpb24gPSBmdW5jdGlvbiAoZXhwbGFuYXRpb24pIHtcbiAgICBpZiAoIWV4cGxhbmF0aW9uRWxlbWVudCkge1xuICAgICAgZXhwbGFuYXRpb25FbGVtZW50ID0gaCgncCcpXG5cbiAgICAgIGlmIChub3RpZnlFbGVtZW50KSB7XG4gICAgICAgIG5vdGlmeUVsZW1lbnQuYXBwZW5kQ2hpbGQoZXhwbGFuYXRpb25FbGVtZW50KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9ucy5sb2dnZXIud2FybihcbiAgICAgICAgICAnVW5hYmxlIHRvIHNob3cgZXhwbGFuYXRpb24gYmVjYXVzZSBub3RpZnlFbGVtZW50IGlzIGVtcHR5OicsXG4gICAgICAgICAgZXhwbGFuYXRpb25cbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cblxuICAgIGV4cGxhbmF0aW9uRWxlbWVudC5pbm5lckhUTUwgPSBleHBsYW5hdGlvblxuXG4gICAgaGlkZGVuKGV4cGxhbmF0aW9uRWxlbWVudCwgZmFsc2UpXG4gIH1cblxuICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgIG9wdGlvbnMuZGVidWcoJ05vdGlmaWVyOiBidWlsZCgpJylcblxuICAgIG5vdGlmeUVsZW1lbnQgPSB2aXN1YWxzLnF1ZXJ5U2VsZWN0b3IoJy5ub3RpZmllcicpXG5cbiAgICBpZiAoIW5vdGlmeUVsZW1lbnQpIHtcbiAgICAgIG5vdGlmeUVsZW1lbnQgPSBoKCcubm90aWZpZXInKSAvLyBkZWZhdWx0cyB0byBkaXZcblxuICAgICAgdGhpcy5oaWRlKClcblxuICAgICAgdmlzdWFscy5hcHBlbmRDaGlsZChub3RpZnlFbGVtZW50KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhpZGUoKVxuICAgIH1cblxuICAgICFidWlsdCAmJiBpbml0RXZlbnRzKClcblxuICAgIGJ1aWx0ID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gaGlkZUV4cGxhbmF0aW9uICgpIHtcbiAgICBpZiAoZXhwbGFuYXRpb25FbGVtZW50KSB7XG4gICAgICBleHBsYW5hdGlvbkVsZW1lbnQuaW5uZXJIVE1MID0gbnVsbFxuICAgICAgaGlkZGVuKGV4cGxhbmF0aW9uRWxlbWVudCwgdHJ1ZSlcbiAgICB9XG4gIH1cblxuICB0aGlzLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2FuY2VsRW50ZXJ0YWlubWVudCgpXG5cbiAgICBpZiAobm90aWZ5RWxlbWVudCkge1xuICAgICAgaGlkZGVuKG5vdGlmeUVsZW1lbnQsIHRydWUpXG4gICAgICBub3RpZnlFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2Jsb2NraW5nJylcbiAgICB9XG5cbiAgICBpZiAobWVzc2FnZUVsZW1lbnQpIHtcbiAgICAgIG1lc3NhZ2VFbGVtZW50LmlubmVySFRNTCA9IG51bGxcbiAgICB9XG5cbiAgICBoaWRlRXhwbGFuYXRpb24oKVxuICB9XG5cbiAgdGhpcy5pc1Zpc2libGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFidWlsdCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub3RpZnlFbGVtZW50ICYmICFoaWRkZW4obm90aWZ5RWxlbWVudClcbiAgICB9XG4gIH1cblxuICB0aGlzLmlzQnVpbHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGJ1aWx0XG4gIH1cblxuICB0aGlzLm5vdGlmeSA9IGZ1bmN0aW9uIChtZXNzYWdlLCBleHBsYW5hdGlvbiwgbm90aWZ5T3B0aW9ucykge1xuICAgIG9wdGlvbnMuZGVidWcoJ05vdGlmaWVyOiBub3RpZnkoKScpXG5cbiAgICBpZiAoIW5vdGlmeU9wdGlvbnMpIHtcbiAgICAgIG5vdGlmeU9wdGlvbnMgPSB7fVxuICAgIH1cblxuICAgIGNvbnN0IHN0aWxsV2FpdCA9IG5vdGlmeU9wdGlvbnMuc3RpbGxXYWl0ID8gbm90aWZ5T3B0aW9ucy5zdGlsbFdhaXQgOiBmYWxzZVxuICAgIGNvbnN0IGVudGVydGFpbiA9IG5vdGlmeU9wdGlvbnMuZW50ZXJ0YWluID8gbm90aWZ5T3B0aW9ucy5lbnRlcnRhaW4gOiBmYWxzZVxuICAgIGNvbnN0IGJsb2NraW5nID0gbm90aWZ5T3B0aW9ucy5ibG9ja2luZyA/IG5vdGlmeU9wdGlvbnMuYmxvY2tpbmcgOiBmYWxzZVxuICAgIGNvbnN0IGhpZGVGb3JtID0gbm90aWZ5T3B0aW9ucy5oaWRlRm9ybSA/IG5vdGlmeU9wdGlvbnMuaGlkZUZvcm0gOiBmYWxzZVxuICAgIGNvbnN0IGNsYXNzTGlzdCA9IG5vdGlmeU9wdGlvbnMuY2xhc3NMaXN0ID8gbm90aWZ5T3B0aW9ucy5jbGFzc0xpc3QgOiBmYWxzZVxuICAgIGNvbnN0IHJlbW92ZURpbWVuc2lvbnMgPSBub3RpZnlPcHRpb25zLnJlbW92ZURpbWVuc2lvbnMgPyBub3RpZnlPcHRpb25zLnJlbW92ZURpbWVuc2lvbnMgOiBmYWxzZVxuXG4gICAgaWYgKCFtZXNzYWdlRWxlbWVudCAmJiBub3RpZnlFbGVtZW50KSB7XG4gICAgICBtZXNzYWdlRWxlbWVudCA9IGgoJ2gyJylcblxuICAgICAgaWYgKGV4cGxhbmF0aW9uRWxlbWVudCkge1xuICAgICAgICBub3RpZnlFbGVtZW50Lmluc2VydEJlZm9yZShtZXNzYWdlRWxlbWVudCwgZXhwbGFuYXRpb25FbGVtZW50KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm90aWZ5RWxlbWVudC5hcHBlbmRDaGlsZChtZXNzYWdlRWxlbWVudClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobm90aWZ5RWxlbWVudCkge1xuICAgICAgLy8gcmVzZXRcbiAgICAgIGlmICghZW50ZXJ0YWluKSB7XG4gICAgICAgIG5vdGlmeUVsZW1lbnQuY2xhc3NOYW1lID0gJ25vdGlmaWVyJ1xuICAgICAgfVxuXG4gICAgICBpZiAoY2xhc3NMaXN0KSB7XG4gICAgICAgIGNsYXNzTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgICBub3RpZnlFbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBpZiAocmVtb3ZlRGltZW5zaW9ucykge1xuICAgICAgICBub3RpZnlFbGVtZW50LnN0eWxlLndpZHRoID0gJ2F1dG8nXG4gICAgICAgIG5vdGlmeUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGJsb2NraW5nKSB7XG4gICAgICBub3RpZnlFbGVtZW50ICYmIG5vdGlmeUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYmxvY2tpbmcnKVxuICAgICAgdGhpcy5lbWl0KEV2ZW50cy5CTE9DS0lORywge2hpZGVGb3JtOiBoaWRlRm9ybX0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW1pdChFdmVudHMuTk9USUZZSU5HKVxuICAgIH1cblxuICAgIHZpc3VhbHMuaGlkZVJlcGxheSgpXG4gICAgdmlzdWFscy5oaWRlUmVjb3JkZXIoKVxuXG4gICAgc2V0TWVzc2FnZShtZXNzYWdlLCBub3RpZnlPcHRpb25zKVxuXG4gICAgaWYgKGV4cGxhbmF0aW9uICYmIGV4cGxhbmF0aW9uLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuc2V0RXhwbGFuYXRpb24oZXhwbGFuYXRpb24pXG4gICAgfVxuXG4gICAgaWYgKGVudGVydGFpbikge1xuICAgICAgcnVuRW50ZXJ0YWlubWVudCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbmNlbEVudGVydGFpbm1lbnQoKVxuICAgIH1cblxuICAgIC8vIGp1c3QgYXMgYSBzYWZldHkgaW4gY2FzZSBpZiBhbiBlcnJvciBpcyB0aHJvd24gaW4gdGhlIG1pZGRsZSBvZiB0aGUgYnVpbGQgcHJvY2Vzc1xuICAgIC8vIGFuZCB2aXN1YWxzIGFyZW4ndCBidWlsdC9zaG93biB5ZXQuXG4gICAgdmlzdWFscy5zaG93VmlzdWFscygpXG5cbiAgICBzaG93KClcblxuICAgICFzdGlsbFdhaXQgJiYgdmlzdWFscy5lbmRXYWl0aW5nKClcbiAgfVxufVxuXG51dGlsLmluaGVyaXRzKE5vdGlmaWVyLCBFdmVudEVtaXR0ZXIpXG5cbmV4cG9ydCBkZWZhdWx0IE5vdGlmaWVyXG4iLCJpbXBvcnQgd2Vic29ja2V0IGZyb20gJ3dlYnNvY2tldC1zdHJlYW0nXG5pbXBvcnQgRnJhbWUgZnJvbSAnY2FudmFzLXRvLWJ1ZmZlcidcbmltcG9ydCB1dGlsIGZyb20gJ3V0aWwnXG5pbXBvcnQgaCBmcm9tICdoeXBlcnNjcmlwdCdcbmltcG9ydCBoaWRkZW4gZnJvbSAnaGlkZGVuJ1xuaW1wb3J0IGFuaW1pdHRlciBmcm9tICdhbmltaXR0ZXInXG5cbmltcG9ydCBVc2VyTWVkaWEgZnJvbSAnLi91c2VyTWVkaWEnXG5cbmltcG9ydCBFdmVudHMgZnJvbSAnLi8uLi8uLi9ldmVudHMnXG5pbXBvcnQgQ29uc3RhbnRzIGZyb20gJy4vLi4vLi4vY29uc3RhbnRzJ1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLy4uLy4uL3V0aWwvZXZlbnRFbWl0dGVyJ1xuaW1wb3J0IEJyb3dzZXIgZnJvbSAnLi8uLi8uLi91dGlsL2Jyb3dzZXInXG5pbXBvcnQgSHVtYW5pemUgZnJvbSAnLi8uLi8uLi91dGlsL2h1bWFuaXplJ1xuaW1wb3J0IHByZXR0eSBmcm9tICcuLy4uLy4uL3V0aWwvcHJldHR5J1xuaW1wb3J0IFZpZGVvbWFpbEVycm9yIGZyb20gJy4vLi4vLi4vdXRpbC92aWRlb21haWxFcnJvcidcblxuLy8gY3JlZGl0cyBodHRwOi8vMWxpbmVhcnQua3VsYW9uZS5jb20vIy9cbmNvbnN0IFBJUEVfU1lNQk9MID0gJ8KwwrrCpMO4LMK4wrgsw7jCpMK6wrBgwrDCusKkw7gswrgsw7jCpMKwwrrCpMO4LMK4wrgsw7jCpMK6wrBgwrDCusKkw7gswrggJ1xuXG5jb25zdCBSZWNvcmRlciA9IGZ1bmN0aW9uICh2aXN1YWxzLCByZXBsYXksIG9wdGlvbnMpIHtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcywgb3B0aW9ucywgJ1JlY29yZGVyJylcblxuICAgIC8vIHZhbGlkYXRlIHNvbWUgb3B0aW9ucyB0aGlzIGNsYXNzIG5lZWRzXG4gIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy52aWRlbyB8fCAhb3B0aW9ucy52aWRlby5mcHMpIHtcbiAgICB0aHJvdyBWaWRlb21haWxFcnJvci5jcmVhdGUoJ0ZQUyBtdXN0IGJlIGRlZmluZWQnLCBvcHRpb25zKVxuICB9XG5cbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgY29uc3QgYnJvd3NlciA9IG5ldyBCcm93c2VyKG9wdGlvbnMpXG4gIGNvbnN0IGRlYnVnID0gb3B0aW9ucy5kZWJ1Z1xuXG4gIHZhciBsb29wID0gbnVsbFxuXG4gIHZhciBvcmlnaW5hbEFuaW1hdGlvbkZyYW1lT2JqZWN0XG5cbiAgdmFyIHNhbXBsZXNDb3VudCA9IDBcbiAgdmFyIGZyYW1lc0NvdW50ID0gMFxuXG4gIHZhciByZWNvcmRpbmdTdGF0cyA9IHt9XG5cbiAgdmFyIGNvbmZpcm1lZEZyYW1lTnVtYmVyID0gMFxuICB2YXIgY29uZmlybWVkU2FtcGxlTnVtYmVyID0gMFxuXG4gIHZhciByZWNvcmRlckVsZW1lbnRcbiAgdmFyIHVzZXJNZWRpYVxuXG4gIHZhciB1c2VyTWVkaWFUaW1lb3V0XG4gIHZhciByZXRyeVRpbWVvdXRcblxuICB2YXIgYnl0ZXNTdW1cblxuICB2YXIgZnJhbWVQcm9ncmVzc1xuICB2YXIgc2FtcGxlUHJvZ3Jlc3NcblxuICB2YXIgY2FudmFzXG4gIHZhciBjdHhcblxuICB2YXIgdXNlck1lZGlhTG9hZGVkXG4gIHZhciB1c2VyTWVkaWFMb2FkaW5nXG4gIHZhciBzdWJtaXR0aW5nXG4gIHZhciB1bmxvYWRlZFxuICB2YXIgc3RvcFRpbWVcbiAgdmFyIHN0cmVhbVxuICB2YXIgY29ubmVjdGluZ1xuICB2YXIgY29ubmVjdGVkXG4gIHZhciBibG9ja2luZ1xuICB2YXIgYnVpbHRcbiAgdmFyIGtleVxuICB2YXIgd2FpdGluZ1RpbWVcblxuICB2YXIgcGluZ0ludGVydmFsXG5cbiAgdmFyIGZyYW1lXG5cbiAgdmFyIHJlY29yZGluZ0J1ZmZlckxlbmd0aFxuICB2YXIgcmVjb3JkaW5nQnVmZmVyXG5cbiAgZnVuY3Rpb24gd3JpdGVTdHJlYW0gKGJ1ZmZlciwgb3B0cykge1xuICAgIGlmIChzdHJlYW0pIHtcbiAgICAgIGlmIChzdHJlYW0uZGVzdHJveWVkKSB7XG4gICAgICAgIC8vIHByZXZlbnRzIGh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC5pby9pc3N1ZXMvMzkzXG4gICAgICAgIHN0b3BQaW5ncygpXG5cbiAgICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKFxuICAgICAgICAgICdBbHJlYWR5IGRpc2Nvbm5lY3RlZCcsXG4gICAgICAgICAgJ1NvcnJ5LCB0aGUgY29ubmVjdGlvbiB0byB0aGUgc2VydmVyIGhhcyBiZWVuIGRlc3Ryb3llZC4gUGxlYXNlIHJlbG9hZC4gJyArXG4gICAgICAgICAgJ0RldGFpbHMgb2YgYnVmZmVyOiAnICsgYnVmZmVyLnRvU3RyaW5nKCksXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICApKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgb25GbHVzaGVkQ2FsbGJhY2sgPSBvcHRzICYmIG9wdHMub25GbHVzaGVkQ2FsbGJhY2tcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIHN0cmVhbS53cml0ZShidWZmZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG9uRmx1c2hlZENhbGxiYWNrICYmIG9uRmx1c2hlZENhbGxiYWNrKG9wdHMpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBjYXRjaCAoZXhjKSB7XG4gICAgICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKFxuICAgICAgICAgICAgJ0ZhaWxlZCB3cml0aW5nIHRvIHNlcnZlcicsXG4gICAgICAgICAgICAnc3RyZWFtLndyaXRlKCkgZmFpbGVkIGJlY2F1c2Ugb2YgJyArIHByZXR0eShleGMpLFxuICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZW5kUGluZ3MgKCkge1xuICAgIHBpbmdJbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICBkZWJ1ZygnUmVjb3JkZXI6IHBpbmdpbmcuLi4nKVxuICAgICAgd3JpdGVTdHJlYW0oQnVmZmVyLmZyb20oJycpKVxuICAgIH0sIG9wdGlvbnMudGltZW91dHMucGluZ0ludGVydmFsKVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcFBpbmdzICgpIHtcbiAgICBjbGVhckludGVydmFsKHBpbmdJbnRlcnZhbClcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQXVkaW9TYW1wbGUgKGF1ZGlvU2FtcGxlKSB7XG4gICAgc2FtcGxlc0NvdW50KytcblxuICAgIGNvbnN0IGF1ZGlvQnVmZmVyID0gYXVkaW9TYW1wbGUudG9CdWZmZXIoKVxuXG4gICAgLy8gaWYgKG9wdGlvbnMudmVyYm9zZSkge1xuICAgIC8vICAgICBkZWJ1ZyhcbiAgICAvLyAgICAgICAgICdTYW1wbGUgIycgKyBzYW1wbGVzQ291bnQgKyAnICgnICsgYXVkaW9CdWZmZXIubGVuZ3RoICsgJyBieXRlcyk6J1xuICAgIC8vICAgICApXG4gICAgLy8gfVxuXG4gICAgd3JpdGVTdHJlYW0oYXVkaW9CdWZmZXIpXG4gIH1cblxuICBmdW5jdGlvbiBzaG93ICgpIHtcbiAgICByZWNvcmRlckVsZW1lbnQgJiYgaGlkZGVuKHJlY29yZGVyRWxlbWVudCwgZmFsc2UpXG4gIH1cblxuICBmdW5jdGlvbiBvblVzZXJNZWRpYVJlYWR5ICgpIHtcbiAgICB0cnkge1xuICAgICAgZGVidWcoJ1JlY29yZGVyOiBvblVzZXJNZWRpYVJlYWR5KCknKVxuXG4gICAgICB1c2VyTWVkaWFMb2FkaW5nID0gYmxvY2tpbmcgPSB1bmxvYWRlZCA9IHN1Ym1pdHRpbmcgPSBmYWxzZVxuICAgICAgdXNlck1lZGlhTG9hZGVkID0gdHJ1ZVxuXG4gICAgICBsb29wID0gY3JlYXRlTG9vcCgpXG5cbiAgICAgIHNob3coKVxuICAgICAgc2VsZi5lbWl0KEV2ZW50cy5VU0VSX01FRElBX1JFQURZLCB7cGF1c2VkOiBzZWxmLmlzUGF1c2VkKCl9KVxuICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgZXhjKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyUmV0cnlUaW1lb3V0ICgpIHtcbiAgICBkZWJ1ZygnUmVjb3JkZXI6IGNsZWFyUmV0cnlUaW1lb3V0KCknKVxuXG4gICAgcmV0cnlUaW1lb3V0ICYmIGNsZWFyVGltZW91dChyZXRyeVRpbWVvdXQpXG4gICAgcmV0cnlUaW1lb3V0ID0gbnVsbFxuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJVc2VyTWVkaWFUaW1lb3V0ICgpIHtcbiAgICBpZiAodXNlck1lZGlhVGltZW91dCkge1xuICAgICAgZGVidWcoJ1JlY29yZGVyOiBjbGVhclVzZXJNZWRpYVRpbWVvdXQoKScpXG5cbiAgICAgIHVzZXJNZWRpYVRpbWVvdXQgJiYgY2xlYXJUaW1lb3V0KHVzZXJNZWRpYVRpbWVvdXQpXG4gICAgICB1c2VyTWVkaWFUaW1lb3V0ID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGN1bGF0ZUZyYW1lUHJvZ3Jlc3MgKCkge1xuICAgIHJldHVybiAoY29uZmlybWVkRnJhbWVOdW1iZXIgLyAoZnJhbWVzQ291bnQgfHwgMSkgKiAxMDApLnRvRml4ZWQoMikgKyAnJSdcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGN1bGF0ZVNhbXBsZVByb2dyZXNzICgpIHtcbiAgICByZXR1cm4gKGNvbmZpcm1lZFNhbXBsZU51bWJlciAvIChzYW1wbGVzQ291bnQgfHwgMSkgKiAxMDApLnRvRml4ZWQoMikgKyAnJSdcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU92ZXJhbGxQcm9ncmVzcyAoKSB7XG4gICAgLy8gd2hlbiBwcm9ncmVzc2VzIGFyZW4ndCBpbml0aWFsaXplZCxcbiAgICAvLyB0aGVuIGRvIGEgZmlyc3QgY2FsY3VsYXRpb24gdG8gYXZvaWQgYGluZmluaXRlYCBvciBgbnVsbGAgZGlzcGxheXNcblxuICAgIGlmICghZnJhbWVQcm9ncmVzcykge1xuICAgICAgZnJhbWVQcm9ncmVzcyA9IGNhbGN1bGF0ZUZyYW1lUHJvZ3Jlc3MoKVxuICAgIH1cblxuICAgIGlmICghc2FtcGxlUHJvZ3Jlc3MpIHtcbiAgICAgIHNhbXBsZVByb2dyZXNzID0gY2FsY3VsYXRlU2FtcGxlUHJvZ3Jlc3MoKVxuICAgIH1cblxuICAgIHNlbGYuZW1pdChcbiAgICAgIEV2ZW50cy5QUk9HUkVTUyxcbiAgICAgIGZyYW1lUHJvZ3Jlc3MsXG4gICAgICBzYW1wbGVQcm9ncmVzc1xuICAgIClcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUZyYW1lUHJvZ3Jlc3MgKGFyZ3MpIHtcbiAgICBjb25maXJtZWRGcmFtZU51bWJlciA9IGFyZ3MuZnJhbWUgPyBhcmdzLmZyYW1lIDogY29uZmlybWVkRnJhbWVOdW1iZXJcblxuICAgIGZyYW1lUHJvZ3Jlc3MgPSBjYWxjdWxhdGVGcmFtZVByb2dyZXNzKClcblxuICAgIHVwZGF0ZU92ZXJhbGxQcm9ncmVzcygpXG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVTYW1wbGVQcm9ncmVzcyAoYXJncykge1xuICAgIGNvbmZpcm1lZFNhbXBsZU51bWJlciA9IGFyZ3Muc2FtcGxlID8gYXJncy5zYW1wbGUgOiBjb25maXJtZWRTYW1wbGVOdW1iZXJcblxuICAgIHNhbXBsZVByb2dyZXNzID0gY2FsY3VsYXRlU2FtcGxlUHJvZ3Jlc3MoKVxuXG4gICAgdXBkYXRlT3ZlcmFsbFByb2dyZXNzKClcbiAgfVxuXG4gIGZ1bmN0aW9uIHByZXZpZXcgKGFyZ3MpIHtcbiAgICBjb25maXJtZWRGcmFtZU51bWJlciA9XG4gICAgY29uZmlybWVkU2FtcGxlTnVtYmVyID1cbiAgICBzYW1wbGVzQ291bnQgPVxuICAgIGZyYW1lc0NvdW50ID0gMFxuXG4gICAgc2FtcGxlUHJvZ3Jlc3MgPSBmcmFtZVByb2dyZXNzID0gbnVsbFxuXG4gICAga2V5ID0gYXJncy5rZXlcblxuICAgIGlmIChhcmdzLm1wNCkge1xuICAgICAgcmVwbGF5LnNldE1wNFNvdXJjZShcbiAgICAgICAgYXJncy5tcDQgKyBDb25zdGFudHMuU0lURV9OQU1FX0xBQkVMICsgJy8nICsgb3B0aW9ucy5zaXRlTmFtZSArICcvdmlkZW9tYWlsLm1wNCcsXG4gICAgICAgIHRydWVcbiAgICAgIClcbiAgICB9XG5cbiAgICBpZiAoYXJncy53ZWJtKSB7XG4gICAgICByZXBsYXkuc2V0V2ViTVNvdXJjZShcbiAgICAgICAgYXJncy53ZWJtICsgQ29uc3RhbnRzLlNJVEVfTkFNRV9MQUJFTCArICcvJyArIG9wdGlvbnMuc2l0ZU5hbWUgKyAnL3ZpZGVvbWFpbC53ZWJtJyxcbiAgICAgICAgdHJ1ZVxuICAgICAgKVxuICAgIH1cblxuICAgIHNlbGYuaGlkZSgpXG5cbiAgICBjb25zdCB3aWR0aCA9IHNlbGYuZ2V0UmVjb3JkZXJXaWR0aCh0cnVlKVxuICAgIGNvbnN0IGhlaWdodCA9IHNlbGYuZ2V0UmVjb3JkZXJIZWlnaHQodHJ1ZSlcblxuICAgIHNlbGYuZW1pdChFdmVudHMuUFJFVklFVywga2V5LCB3aWR0aCwgaGVpZ2h0KVxuXG4gICAgLy8ga2VlcCBpdCBmb3IgcmVjb3JkaW5nIHN0YXRzXG4gICAgd2FpdGluZ1RpbWUgPSBEYXRlLm5vdygpIC0gc3RvcFRpbWVcblxuICAgIHJlY29yZGluZ1N0YXRzLndhaXRpbmdUaW1lID0gd2FpdGluZ1RpbWVcblxuICAgIGlmIChvcHRpb25zLmRlYnVnKSB7XG4gICAgICBkZWJ1ZyhcbiAgICAgICAgJ1doaWxlIHJlY29yZGluZywgJXMgaGF2ZSBiZWVuIHRyYW5zZmVycmVkIGFuZCB3YWl0aW5nIHRpbWUgd2FzICVzJyxcbiAgICAgICAgSHVtYW5pemUuZmlsZXNpemUoYnl0ZXNTdW0sIDIpLFxuICAgICAgICBIdW1hbml6ZS50b1RpbWUod2FpdGluZ1RpbWUpXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdFNvY2tldCAoY2IpIHtcbiAgICBpZiAoIWNvbm5lY3RlZCkge1xuICAgICAgY29ubmVjdGluZyA9IHRydWVcblxuICAgICAgZGVidWcoJ1JlY29yZGVyOiBpbml0aWFsaXNpbmcgd2ViIHNvY2tldCB0byAlcycsIG9wdGlvbnMuc29ja2V0VXJsKVxuXG4gICAgICBzZWxmLmVtaXQoRXZlbnRzLkNPTk5FQ1RJTkcpXG5cbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXhvZ2Rlbi93ZWJzb2NrZXQtc3RyZWFtI2JpbmFyeS1zb2NrZXRzXG5cbiAgICAgIC8vIHdlIHVzZSBxdWVyeSBwYXJhbWV0ZXJzIGhlcmUgYmVjYXVzZSB3ZSBjYW5ub3Qgc2V0IGN1c3RvbSBoZWFkZXJzIGluIHdlYiBzb2NrZXRzLFxuICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL2lzc3Vlcy80NjdcblxuICAgICAgY29uc3QgdXJsMkNvbm5lY3QgPVxuICAgICAgICBvcHRpb25zLnNvY2tldFVybCArXG4gICAgICAgICc/JyArXG4gICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChDb25zdGFudHMuU0lURV9OQU1FX0xBQkVMKSArXG4gICAgICAgICc9JyArXG4gICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChvcHRpb25zLnNpdGVOYW1lKVxuXG4gICAgICB0cnkge1xuICAgICAgICAvLyB3ZWJzb2NrZXQgb3B0aW9ucyBjYW5ub3QgYmUgc2V0IG9uIGNsaWVudCBzaWRlLCBvbmx5IG9uIHNlcnZlciwgc2VlXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXhvZ2Rlbi93ZWJzb2NrZXQtc3RyZWFtL2lzc3Vlcy8xMTYjaXNzdWVjb21tZW50LTI5NjQyMTA3N1xuICAgICAgICBzdHJlYW0gPSB3ZWJzb2NrZXQodXJsMkNvbm5lY3QsIHtcbiAgICAgICAgICBwZXJNZXNzYWdlRGVmbGF0ZTogZmFsc2UsXG4gICAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXhvZ2Rlbi93ZWJzb2NrZXQtc3RyZWFtL2lzc3Vlcy8xMTcjaXNzdWVjb21tZW50LTI5ODgyNjAxMVxuICAgICAgICAgIG9iamVjdE1vZGU6IHRydWVcbiAgICAgICAgfSlcbiAgICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgICBjb25uZWN0aW5nID0gY29ubmVjdGVkID0gZmFsc2VcblxuICAgICAgICB2YXIgZXJyXG5cbiAgICAgICAgaWYgKHR5cGVvZiB3ZWJzb2NrZXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgZXJyID0gVmlkZW9tYWlsRXJyb3IuY3JlYXRlKCdUaGVyZSBpcyBubyB3ZWJzb2NrZXQnLCAnQ2F1c2U6ICcgKyBwcmV0dHkoZXhjKSwgb3B0aW9ucylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlcnIgPSBWaWRlb21haWxFcnJvci5jcmVhdGUoXG4gICAgICAgICAgICAnRmFpbGVkIHRvIGNvbm5lY3QgdG8gc2VydmVyJyxcbiAgICAgICAgICAgICdQbGVhc2UgdXBncmFkZSB5b3VyIGJyb3dzZXIuIFlvdXIgY3VycmVudCB2ZXJzaW9uIGRvZXMgbm90IHNlZW0gdG8gc3VwcG9ydCB3ZWJzb2NrZXRzLicsXG4gICAgICAgICAgICBvcHRpb25zLCB7XG4gICAgICAgICAgICAgIGJyb3dzZXJQcm9ibGVtOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgKVxuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgZXJyKVxuICAgICAgfVxuXG4gICAgICBpZiAoc3RyZWFtKSB7XG4gICAgICAgIC8vIC8vIHVzZWZ1bCBmb3IgZGVidWdnaW5nIHN0cmVhbXNcbiAgICAgICAgLy9cbiAgICAgICAgLy8gaWYgKCFzdHJlYW0ub3JpZ2luYWxFbWl0KSB7XG4gICAgICAgIC8vICAgc3RyZWFtLm9yaWdpbmFsRW1pdCA9IHN0cmVhbS5lbWl0XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gc3RyZWFtLmVtaXQgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAvLyAgIGlmIChzdHJlYW0pIHtcbiAgICAgICAgLy8gICAgIGRlYnVnKFBJUEVfU1lNQk9MICsgJ0RlYnVnZ2luZyBzdHJlYW0gZXZlbnQ6JywgdHlwZSlcbiAgICAgICAgLy8gICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKVxuICAgICAgICAvLyAgICAgcmV0dXJuIHN0cmVhbS5vcmlnaW5hbEVtaXQuYXBwbHkoc3RyZWFtLCBhcmdzKVxuICAgICAgICAvLyAgIH1cbiAgICAgICAgLy8gfVxuXG4gICAgICAgIHN0cmVhbS5vbignY2xvc2UnLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgZGVidWcoUElQRV9TWU1CT0wgKyAnU3RyZWFtIGhhcyBjbG9zZWQnKVxuXG4gICAgICAgICAgY29ubmVjdGluZyA9IGNvbm5lY3RlZCA9IGZhbHNlXG5cbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBzZWxmLmVtaXQoRXZlbnRzLkVSUk9SLCBlcnIgfHwgJ1VuaGFuZGxlZCB3ZWJzb2NrZXQgZXJyb3InKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLmVtaXQoRXZlbnRzLkRJU0NPTk5FQ1RFRClcblxuICAgICAgICAgICAgLy8gcHJldmVudHMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYmluYXJ5a2l0Y2hlbi92aWRlb21haWwuaW8vaXNzdWVzLzI5NyBoYXBwZW5pbmdcbiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgc3RyZWFtLm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRlYnVnKFBJUEVfU1lNQk9MICsgJ1N0cmVhbSAqY29ubmVjdCogZXZlbnQgZW1pdHRlZCcpXG5cbiAgICAgICAgICBpZiAoIWNvbm5lY3RlZCkge1xuICAgICAgICAgICAgY29ubmVjdGVkID0gdHJ1ZVxuICAgICAgICAgICAgY29ubmVjdGluZyA9IHVubG9hZGVkID0gZmFsc2VcblxuICAgICAgICAgICAgc2VsZi5lbWl0KEV2ZW50cy5DT05ORUNURUQpXG5cbiAgICAgICAgICAgIGRlYnVnKCdHb2luZyB0byBhc2sgZm9yIHdlYmNhbSBwZXJtaXNzb25zIG5vdyAuLi4nKVxuXG4gICAgICAgICAgICBjYiAmJiBjYigpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgZGVidWcoUElQRV9TWU1CT0wgKyAnU3RyZWFtICpkYXRhKiBldmVudCBlbWl0dGVkJylcblxuICAgICAgICAgIHZhciBjb21tYW5kXG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29tbWFuZCA9IEpTT04ucGFyc2UoZGF0YS50b1N0cmluZygpKVxuICAgICAgICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgICAgICAgZGVidWcoJ0ZhaWxlZCB0byBwYXJzZSBjb21tYW5kOicsIGV4YylcblxuICAgICAgICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKFxuICAgICAgICAgICAgICAnSW52YWxpZCBzZXJ2ZXIgY29tbWFuZCcsXG4gICAgICAgICAgICAgIC8vIHRvU3RyaW5nKCkgc2luY2UgaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLmlvL2lzc3Vlcy8yODhcbiAgICAgICAgICAgICAgJ0NvbnRhY3QgdXMgYXNhcC4gQmFkIGNvbW1tYW5kIHdhcyAnICsgZGF0YS50b1N0cmluZygpICsgJy4gJyxcbiAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgKSlcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgZXhlY3V0ZUNvbW1hbmQuY2FsbChzZWxmLCBjb21tYW5kKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICBzdHJlYW0ub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGRlYnVnKFBJUEVfU1lNQk9MICsgJ1N0cmVhbSAqZXJyb3IqIGV2ZW50IGVtaXR0ZWQnKVxuXG4gICAgICAgICAgY29ubmVjdGluZyA9IGNvbm5lY3RlZCA9IGZhbHNlXG4gICAgICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgZXJyKVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIGp1c3QgZXhwZXJpbWVudGFsXG5cbiAgICAgICAgc3RyZWFtLm9uKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkZWJ1ZyhQSVBFX1NZTUJPTCArICdTdHJlYW0gKmRyYWluKiBldmVudCBlbWl0dGVkIChzaG91bGQgbm90IGhhcHBlbiEpJylcbiAgICAgICAgfSlcblxuICAgICAgICBzdHJlYW0ub24oJ3ByZWVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkZWJ1ZyhQSVBFX1NZTUJPTCArICdTdHJlYW0gKnByZWVuZCogZXZlbnQgZW1pdHRlZCcpXG4gICAgICAgIH0pXG5cbiAgICAgICAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGVidWcoUElQRV9TWU1CT0wgKyAnU3RyZWFtICplbmQqIGV2ZW50IGVtaXR0ZWQnKVxuICAgICAgICB9KVxuXG4gICAgICAgIHN0cmVhbS5vbignZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGVidWcoUElQRV9TWU1CT0wgKyAnU3RyZWFtICpkcmFpbiogZXZlbnQgZW1pdHRlZCcpXG4gICAgICAgIH0pXG5cbiAgICAgICAgc3RyZWFtLm9uKCdwaXBlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRlYnVnKFBJUEVfU1lNQk9MICsgJ1N0cmVhbSAqcGlwZSogZXZlbnQgZW1pdHRlZCcpXG4gICAgICAgIH0pXG5cbiAgICAgICAgc3RyZWFtLm9uKCd1bnBpcGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGVidWcoUElQRV9TWU1CT0wgKyAnU3RyZWFtICp1bnBpcGUqIGV2ZW50IGVtaXR0ZWQnKVxuICAgICAgICB9KVxuXG4gICAgICAgIHN0cmVhbS5vbigncmVzdW1lJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRlYnVnKFBJUEVfU1lNQk9MICsgJ1N0cmVhbSAqcmVzdW1lKiBldmVudCBlbWl0dGVkJylcbiAgICAgICAgfSlcblxuICAgICAgICBzdHJlYW0ub24oJ3VuY29yaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkZWJ1ZyhQSVBFX1NZTUJPTCArICdTdHJlYW0gKnVuY29yayogZXZlbnQgZW1pdHRlZCcpXG4gICAgICAgIH0pXG5cbiAgICAgICAgc3RyZWFtLm9uKCdyZWFkYWJsZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkZWJ1ZyhQSVBFX1NZTUJPTCArICdTdHJlYW0gKnByZWVuZCogZXZlbnQgZW1pdHRlZCcpXG4gICAgICAgIH0pXG5cbiAgICAgICAgc3RyZWFtLm9uKCdwcmVmaW5pc2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGVidWcoUElQRV9TWU1CT0wgKyAnU3RyZWFtICpwcmVlbmQqIGV2ZW50IGVtaXR0ZWQnKVxuICAgICAgICB9KVxuXG4gICAgICAgIHN0cmVhbS5vbignZmluaXNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRlYnVnKFBJUEVfU1lNQk9MICsgJ1N0cmVhbSAqcHJlZW5kKiBldmVudCBlbWl0dGVkJylcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzaG93VXNlck1lZGlhICgpIHtcbiAgICAvLyB1c2UgY29ubmVjdGVkIGZsYWcgdG8gcHJldmVudCB0aGlzIGZyb20gaGFwcGVuaW5nXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLmlvL2lzc3Vlcy8zMjNcbiAgICByZXR1cm4gY29ubmVjdGVkICYmIChpc05vdGlmeWluZygpIHx8ICFpc0hpZGRlbigpIHx8IGJsb2NraW5nKVxuICB9XG5cbiAgZnVuY3Rpb24gdXNlck1lZGlhRXJyb3JDYWxsYmFjayAoZXJyKSB7XG4gICAgdXNlck1lZGlhTG9hZGluZyA9IGZhbHNlXG4gICAgY2xlYXJVc2VyTWVkaWFUaW1lb3V0KClcblxuICAgIGRlYnVnKFxuICAgICAgJ1JlY29yZGVyOiB1c2VyTWVkaWFFcnJvckNhbGxiYWNrKCknLFxuICAgICAgJywgV2ViY2FtIGNoYXJhY3RlcmlzdGljczonLFxuICAgICAgdXNlck1lZGlhLmdldENoYXJhY3RlcmlzdGljcygpLFxuICAgICAgJywgdGVtcG9yYXJ5IGVyciBzdGFjazonLFxuICAgICAgKGVyciAmJiBlcnIuc3RhY2spIHx8ICcodW5kZWZpbmVkKSdcbiAgICApXG5cbiAgICBjb25zdCBlcnJvckxpc3RlbmVycyA9IHNlbGYubGlzdGVuZXJzKEV2ZW50cy5FUlJPUilcblxuICAgIGlmIChlcnJvckxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgIGlmIChlcnIubmFtZSAhPT0gVmlkZW9tYWlsRXJyb3IuTUVESUFfREVWSUNFX05PVF9TVVBQT1JURUQpIHtcbiAgICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKFxuICAgICAgICAgIGVycixcbiAgICAgICAgICBvcHRpb25zXG4gICAgICAgICkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkbyBub3QgZW1pdCBidXQgcmV0cnkgc2luY2UgTUVESUFfREVWSUNFX05PVF9TVVBQT1JURUQgY2FuIGJlIGEgcmFjZSBjb25kaXRpb25cbiAgICAgICAgZGVidWcoJ1JlY29yZGVyOiBpZ25vcmUgdXNlciBtZWRpYSBlcnJvcicsIGVycilcbiAgICAgIH1cblxuICAgICAgLy8gcmV0cnkgYWZ0ZXIgYSB3aGlsZVxuICAgICAgcmV0cnlUaW1lb3V0ID0gc2V0VGltZW91dChpbml0U29ja2V0LCBvcHRpb25zLnRpbWVvdXRzLnVzZXJNZWRpYSlcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHVubG9hZGVkKSB7XG4gICAgICAgIC8vIGNhbiBoYXBwZW4gdGhhdCBjb250YWluZXIgaXMgdW5sb2FkZWQgYnV0IHNvbWUgdXNlciBtZWRpYSByZWxhdGVkIGNhbGxiYWNrc1xuICAgICAgICAvLyBhcmUgc3RpbGwgaW4gcHJvY2Vzcy4gaW4gdGhhdCBjYXNlIGlnbm9yZSBlcnJvci5cbiAgICAgICAgZGVidWcoJ1JlY29yZGVyOiBhbHJlYWR5IHVubG9hZGVkLiBOb3QgZ29pbmcgdG8gdGhyb3cgZXJyb3InLCBlcnIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1ZygnUmVjb3JkZXI6IG5vIGVycm9yIGxpc3RlbmVycyBhdHRhY2hlZCBidXQgdGhyb3dpbmcgZXJyb3InLCBlcnIpXG5cbiAgICAgICAgLy8gd2VpcmQgc2l0dWF0aW9uLCB0aHJvdyBpdCBpbnN0ZWFkIG9mIGVtaXR0aW5nIHNpbmNlIHRoZXJlIGFyZSBubyBlcnJvciBsaXN0ZW5lcnNcbiAgICAgICAgdGhyb3cgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKFxuICAgICAgICAgIGVycixcbiAgICAgICAgICAnVW5hYmxlIHRvIHByb2Nlc3MgdGhpcyBlcnJvciBzaW5jZSB0aGVyZSBhcmUgbm8gZXJyb3IgbGlzdGVuZXJzIGFueW1vcmUuJyxcbiAgICAgICAgICBvcHRpb25zXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRVc2VyTWVkaWFDYWxsYmFjayAobG9jYWxTdHJlYW0pIHtcbiAgICBkZWJ1ZygnUmVjb3JkZXI6IGdldFVzZXJNZWRpYUNhbGxiYWNrKCknKVxuXG4gICAgaWYgKHNob3dVc2VyTWVkaWEoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2xlYXJVc2VyTWVkaWFUaW1lb3V0KClcblxuICAgICAgICB1c2VyTWVkaWEuaW5pdChcbiAgICAgICAgICBsb2NhbFN0cmVhbSxcbiAgICAgICAgICBvblVzZXJNZWRpYVJlYWR5LmJpbmQoc2VsZiksXG4gICAgICAgICAgb25BdWRpb1NhbXBsZS5iaW5kKHNlbGYpLFxuICAgICAgICAgIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIHNlbGYuZW1pdChFdmVudHMuRVJST1IsIGVycilcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgICBzZWxmLmVtaXQoRXZlbnRzLkVSUk9SLCBleGMpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbG9hZEdlbnVpbmVVc2VyTWVkaWEgKCkge1xuICAgIGlmICghbmF2aWdhdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05hdmlnYXRvciBpcyBtaXNzaW5nIScpXG4gICAgfVxuXG4gICAgZGVidWcoJ1JlY29yZGVyOiBsb2FkR2VudWluZVVzZXJNZWRpYSgpJylcblxuICAgIHNlbGYuZW1pdChFdmVudHMuQVNLSU5HX1dFQkNBTV9QRVJNSVNTSU9OKVxuXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL01lZGlhRGV2aWNlcy9nZXRVc2VyTWVkaWFcbiAgICBpZiAobmF2aWdhdG9yLm1lZGlhRGV2aWNlcyAmJiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSkge1xuICAgICAgLy8gcHJlZmVyIHRoZSBmcm9udCBjYW1lcmEgKGlmIG9uZSBpcyBhdmFpbGFibGUpIG92ZXIgdGhlIHJlYXIgb25lXG4gICAgICBjb25zdCBjb25zdHJhaW50cyA9IHtcbiAgICAgICAgdmlkZW86IHtcbiAgICAgICAgICBmYWNpbmdNb2RlOiAndXNlcicsXG4gICAgICAgICAgZnJhbWVSYXRlOiB7aWRlYWw6IG9wdGlvbnMudmlkZW8uZnBzfVxuICAgICAgICB9LFxuICAgICAgICBhdWRpbzogb3B0aW9ucy5pc0F1ZGlvRW5hYmxlZCgpXG4gICAgICB9XG5cbiAgICAgIGlmIChicm93c2VyLmlzT2tTYWZhcmkoKSkge1xuICAgICAgICAvLyBkbyBub3QgdXNlIHRob3NlIHdpZHRoL2hlaWdodCBjb25zdHJhaW50cyB5ZXQsXG4gICAgICAgIC8vIGN1cnJlbnQgc2FmYXJpIHdvdWxkIHRocm93IGFuIGVycm9yXG4gICAgICAgIC8vIHRvZG8gaW4gaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLWNsaWVudC9pc3N1ZXMvMTQyXG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChvcHRpb25zLmhhc0RlZmluZWRXaWR0aCgpKSB7XG4gICAgICAgICAgY29uc3RyYWludHMudmlkZW8ud2lkdGggPSB7aWRlYWw6IG9wdGlvbnMudmlkZW8ud2lkdGh9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5oYXNEZWZpbmVkSGVpZ2h0KCkpIHtcbiAgICAgICAgICBjb25zdHJhaW50cy52aWRlby5oZWlnaHQgPSB7aWRlYWw6IG9wdGlvbnMudmlkZW8uaGVpZ2h0fVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGRlYnVnKCdSZWNvcmRlcjogbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoKScsIGNvbnN0cmFpbnRzKVxuXG4gICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzXG4gICAgICAgIC5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpXG4gICAgICAgIC50aGVuKGdldFVzZXJNZWRpYUNhbGxiYWNrKVxuICAgICAgICAuY2F0Y2godXNlck1lZGlhRXJyb3JDYWxsYmFjaylcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ1JlY29yZGVyOiBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhKCknKVxuXG4gICAgICBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhXyh7XG4gICAgICAgIHZpZGVvOiB0cnVlLFxuICAgICAgICBhdWRpbzogb3B0aW9ucy5pc0F1ZGlvRW5hYmxlZCgpXG4gICAgICB9LCBnZXRVc2VyTWVkaWFDYWxsYmFjaywgdXNlck1lZGlhRXJyb3JDYWxsYmFjaylcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkVXNlck1lZGlhICgpIHtcbiAgICBpZiAodXNlck1lZGlhTG9hZGVkKSB7XG4gICAgICBkZWJ1ZygnUmVjb3JkZXI6IHNraXBwaW5nIGxvYWRVc2VyTWVkaWEoKSBiZWNhdXNlIGl0IGlzIGFscmVhZHkgbG9hZGVkJylcbiAgICAgIG9uVXNlck1lZGlhUmVhZHkoKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIGlmICh1c2VyTWVkaWFMb2FkaW5nKSB7XG4gICAgICBkZWJ1ZygnUmVjb3JkZXI6IHNraXBwaW5nIGxvYWRVc2VyTWVkaWEoKSBiZWNhdXNlIGl0IGlzIGFscmVhZHkgYXNraW5nIGZvciBwZXJtaXNzaW9uJylcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGRlYnVnKCdSZWNvcmRlcjogbG9hZFVzZXJNZWRpYSgpJylcblxuICAgIHNlbGYuZW1pdChFdmVudHMuTE9BRElOR19VU0VSX01FRElBKVxuXG4gICAgdHJ5IHtcbiAgICAgIHVzZXJNZWRpYVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFzZWxmLmlzUmVhZHkoKSkge1xuICAgICAgICAgIHNlbGYuZW1pdChFdmVudHMuRVJST1IsIGJyb3dzZXIuZ2V0Tm9BY2Nlc3NJc3N1ZSgpKVxuICAgICAgICB9XG4gICAgICB9LCBvcHRpb25zLnRpbWVvdXRzLnVzZXJNZWRpYSlcblxuICAgICAgdXNlck1lZGlhTG9hZGluZyA9IHRydWVcblxuICAgICAgbG9hZEdlbnVpbmVVc2VyTWVkaWEoKVxuICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgZGVidWcoJ1JlY29yZGVyOiBmYWlsZWQgdG8gbG9hZCBnZW51aW5lIHVzZXIgbWVkaWEnKVxuXG4gICAgICB1c2VyTWVkaWFMb2FkaW5nID0gZmFsc2VcblxuICAgICAgY29uc3QgZXJyb3JMaXN0ZW5lcnMgPSBzZWxmLmxpc3RlbmVycyhFdmVudHMuRVJST1IpXG5cbiAgICAgIGlmIChlcnJvckxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgZXhjKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWcoJ1JlY29yZGVyOiBubyBlcnJvciBsaXN0ZW5lcnMgYXR0YWNoZWQgYnV0IHRocm93aW5nIGV4Y2VwdGlvbicsIGV4YylcbiAgICAgICAgdGhyb3cgZXhjIC8vIHRocm93IGl0IGZ1cnRoZXJcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBleGVjdXRlQ29tbWFuZCAoY29tbWFuZCkge1xuICAgIHRyeSB7XG4gICAgICBkZWJ1ZyhcbiAgICAgICAgJ1NlcnZlciBjb21tYW5kZWQ6ICVzJyxcbiAgICAgICAgY29tbWFuZC5jb21tYW5kLFxuICAgICAgICBjb21tYW5kLmFyZ3MgPyAnLCAnICsgSlNPTi5zdHJpbmdpZnkoY29tbWFuZC5hcmdzKSA6ICcnXG4gICAgICApXG5cbiAgICAgIHN3aXRjaCAoY29tbWFuZC5jb21tYW5kKSB7XG4gICAgICAgIGNhc2UgJ3JlYWR5JzpcbiAgICAgICAgICBpZiAoIXVzZXJNZWRpYVRpbWVvdXQpIHsgbG9hZFVzZXJNZWRpYSgpIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdwcmV2aWV3JzpcbiAgICAgICAgICBwcmV2aWV3KGNvbW1hbmQuYXJncylcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgdGhpcy5lbWl0KEV2ZW50cy5FUlJPUiwgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKFxuICAgICAgICAgICAgJ09oIG5vLCBzZXJ2ZXIgZXJyb3IhJyxcbiAgICAgICAgICAgIGNvbW1hbmQuYXJncy5lcnIudG9TdHJpbmcoKSB8fCAnKE5vIGV4cGxhbmF0aW9uIGdpdmVuKScsXG4gICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgKSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdjb25maXJtRnJhbWUnOlxuICAgICAgICAgIHVwZGF0ZUZyYW1lUHJvZ3Jlc3MoY29tbWFuZC5hcmdzKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2NvbmZpcm1TYW1wbGUnOlxuICAgICAgICAgIHVwZGF0ZVNhbXBsZVByb2dyZXNzKGNvbW1hbmQuYXJncylcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdiZWdpbkF1ZGlvRW5jb2RpbmcnOlxuICAgICAgICAgIHRoaXMuZW1pdChFdmVudHMuQkVHSU5fQVVESU9fRU5DT0RJTkcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnYmVnaW5WaWRlb0VuY29kaW5nJzpcbiAgICAgICAgICB0aGlzLmVtaXQoRXZlbnRzLkJFR0lOX1ZJREVPX0VOQ09ESU5HKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhpcy5lbWl0KEV2ZW50cy5FUlJPUiwgJ1Vua25vd24gc2VydmVyIGNvbW1hbmQ6ICcgKyBjb21tYW5kLmNvbW1hbmQpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChleGMpIHtcbiAgICAgIHNlbGYuZW1pdChFdmVudHMuRVJST1IsIGV4YylcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc05vdGlmeWluZyAoKSB7XG4gICAgcmV0dXJuIHZpc3VhbHMuaXNOb3RpZnlpbmcoKVxuICB9XG5cbiAgZnVuY3Rpb24gaXNIaWRkZW4gKCkge1xuICAgIHJldHVybiAhcmVjb3JkZXJFbGVtZW50IHx8IGhpZGRlbihyZWNvcmRlckVsZW1lbnQpXG4gIH1cblxuICBmdW5jdGlvbiB3cml0ZUNvbW1hbmQgKGNvbW1hbmQsIGFyZ3MsIGNiKSB7XG4gICAgaWYgKCFjYiAmJiBhcmdzICYmIGFyZ3MuY29uc3RydWN0b3IgPT09IEZ1bmN0aW9uKSB7XG4gICAgICBjYiA9IGFyZ3NcbiAgICAgIGFyZ3MgPSBudWxsXG4gICAgfVxuXG4gICAgaWYgKCFjb25uZWN0ZWQpIHtcbiAgICAgIGRlYnVnKCdSZWNvbm5lY3RpbmcgZm9yIHRoZSBjb21tYW5kJywgY29tbWFuZCwgJ+KApicpXG5cbiAgICAgIGluaXRTb2NrZXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB3cml0ZUNvbW1hbmQoY29tbWFuZCwgYXJncylcbiAgICAgICAgY2IgJiYgY2IoKVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYgKHN0cmVhbSkge1xuICAgICAgZGVidWcoJyQgJXMnLCBjb21tYW5kLCBhcmdzID8gSlNPTi5zdHJpbmdpZnkoYXJncykgOiAnJylcblxuICAgICAgY29uc3QgY29tbWFuZE9iaiA9IHtcbiAgICAgICAgY29tbWFuZDogY29tbWFuZCxcbiAgICAgICAgYXJnczogYXJnc1xuICAgICAgfVxuXG4gICAgICAvLyB0b2RvIGNvbW1lbnRlZCBvdXQgYmVjYXVzZSBmb3Igc29tZSByZWFzb25zIHNlcnZlciBkb2VzIG5vdCBhY2NlcHQgc3VjaCBhIGxvbmdcbiAgICAgIC8vIGFycmF5IG9mIG1hbnkgbG9nIGxpbmVzLiB0byBleGFtaW5lIGxhdGVyLlxuICAgICAgLy9cbiAgICAgIC8vIGFkZCBzb21lIHVzZWZ1bCBkZWJ1ZyBpbmZvIHRvIGV4YW1pbmUgd2VpcmQgc3R1ZmYgbGlrZSB0aGlzIG9uZVxuICAgICAgLy8gVW5wcm9jZXNzYWJsZUVycm9yOiBVbmFibGUgdG8gZW5jb2RlIGEgdmlkZW8gd2l0aCBGUFMgbmVhciB6ZXJvLlxuICAgICAgLy8gdG9kbyBjb25zaWRlciByZW1vdmluZyB0aGlzIGxhdGVyIG9yIGhhdmUgaXQgZm9yIGRlYnVnPTEgb25seT9cbiAgICAgIC8vXG4gICAgICAvLyBpZiAob3B0aW9ucy5sb2dnZXIgJiYgb3B0aW9ucy5sb2dnZXIuZ2V0TGluZXMpIHtcbiAgICAgIC8vICAgY29tbWFuZE9iai5sb2dMaW5lcyA9IG9wdGlvbnMubG9nZ2VyLmdldExpbmVzKClcbiAgICAgIC8vIH1cblxuICAgICAgd3JpdGVTdHJlYW0oQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkoY29tbWFuZE9iaikpKVxuXG4gICAgICBpZiAoY2IpIHtcbiAgICAgICAgLy8ga2VlcCBhbGwgY2FsbGJhY2tzIGFzeW5jXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNiKClcbiAgICAgICAgfSwgMClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkaXNjb25uZWN0ICgpIHtcbiAgICBpZiAoY29ubmVjdGVkKSB7XG4gICAgICBkZWJ1ZygnUmVjb3JkZXI6IGRpc2Nvbm5lY3QoKScpXG5cbiAgICAgIGlmICh1c2VyTWVkaWEpIHtcbiAgICAgICAgLy8gcHJldmVudHMgaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLWNsaWVudC9pc3N1ZXMvMTE0XG4gICAgICAgIHVzZXJNZWRpYS51bmxvYWRSZW1haW5pbmdFdmVudExpc3RlbmVycygpXG4gICAgICB9XG5cbiAgICAgIGlmIChzdWJtaXR0aW5nKSB7XG4gICAgICAgIC8vIHNlcnZlciB3aWxsIGRpc2Nvbm5lY3Qgc29ja2V0IGF1dG9tYXRpY2FsbHkgYWZ0ZXIgc3VibWl0dGluZ1xuICAgICAgICBjb25uZWN0aW5nID0gY29ubmVjdGVkID0gZmFsc2VcbiAgICAgIH0gZWxzZSBpZiAoc3RyZWFtKSB7XG4gICAgICAgIC8vIGZvcmNlIHRvIGRpc2Nvbm5lY3Qgc29ja2V0IHJpZ2h0IG5vdyB0byBjbGVhbiB0ZW1wIGZpbGVzIG9uIHNlcnZlclxuICAgICAgICAvLyBldmVudCBsaXN0ZW5lcnMgd2lsbCBkbyB0aGUgcmVzdFxuICAgICAgICBzdHJlYW0uZW5kKClcbiAgICAgICAgc3RyZWFtID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsQW5pbWF0aW9uRnJhbWUgKCkge1xuICAgIGxvb3AgJiYgbG9vcC5kaXNwb3NlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEludGVydmFsU3VtICgpIHtcbiAgICByZXR1cm4gbG9vcC5nZXRFbGFwc2VkVGltZSgpXG4gIH1cblxuICBmdW5jdGlvbiBnZXRBdmdJbnRlcnZhbCAoKSB7XG4gICAgcmV0dXJuIChnZXRJbnRlcnZhbFN1bSgpIC8gZnJhbWVzQ291bnQpXG4gIH1cblxuICB0aGlzLmdldFJlY29yZGluZ1N0YXRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZWNvcmRpbmdTdGF0c1xuICB9XG5cbiAgdGhpcy5nZXRBdWRpb1NhbXBsZVJhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZXJNZWRpYS5nZXRBdWRpb1NhbXBsZVJhdGUoKVxuICB9XG5cbiAgdGhpcy5zdG9wID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIGRlYnVnKCdzdG9wKCknLCBwYXJhbXMpXG5cbiAgICBjb25zdCBsaW1pdFJlYWNoZWQgPSBwYXJhbXMubGltaXRSZWFjaGVkXG5cbiAgICB0aGlzLmVtaXQoRXZlbnRzLlNUT1BQSU5HLCBsaW1pdFJlYWNoZWQpXG5cbiAgICBsb29wLmNvbXBsZXRlKClcblxuICAgIHN0b3BUaW1lID0gRGF0ZS5ub3coKVxuXG4gICAgcmVjb3JkaW5nU3RhdHMgPSB7XG4gICAgICBhdmdGcHM6IGxvb3AuZ2V0RlBTKCksXG4gICAgICB3YW50ZWRGcHM6IG9wdGlvbnMudmlkZW8uZnBzLFxuICAgICAgYXZnSW50ZXJ2YWw6IGdldEF2Z0ludGVydmFsKCksXG4gICAgICB3YW50ZWRJbnRlcnZhbDogMWUzIC8gb3B0aW9ucy52aWRlby5mcHMsXG5cbiAgICAgIGludGVydmFsU3VtOiBnZXRJbnRlcnZhbFN1bSgpLFxuICAgICAgZnJhbWVzQ291bnQ6IGZyYW1lc0NvdW50LFxuICAgICAgdmlkZW9UeXBlOiByZXBsYXkuZ2V0VmlkZW9UeXBlKClcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pc0F1ZGlvRW5hYmxlZCgpKSB7XG4gICAgICByZWNvcmRpbmdTdGF0cy5zYW1wbGVzQ291bnQgPSBzYW1wbGVzQ291bnRcbiAgICAgIHJlY29yZGluZ1N0YXRzLnNhbXBsZVJhdGUgPSB1c2VyTWVkaWEuZ2V0QXVkaW9TYW1wbGVSYXRlKClcbiAgICB9XG5cbiAgICB3cml0ZUNvbW1hbmQoJ3N0b3AnLCByZWNvcmRpbmdTdGF0cylcblxuICAgIC8vIGJld2FyZSwgcmVzZXR0aW5nIHdpbGwgc2V0IGZyYW1lc0NvdW50IHRvIHplcm8sIHNvIGxlYXZlIHRoaXMgaGVyZVxuICAgIHRoaXMucmVzZXQoKVxuICB9XG5cbiAgdGhpcy5iYWNrID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgdGhpcy5lbWl0KEV2ZW50cy5HT0lOR19CQUNLKVxuXG4gICAgc2hvdygpXG4gICAgdGhpcy5yZXNldCgpXG5cbiAgICB3cml0ZUNvbW1hbmQoJ2JhY2snLCBjYilcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlSW5pdGlhbGlzZUF1ZGlvICgpIHtcbiAgICBkZWJ1ZygnUmVjb3JkZXI6IHJlSW5pdGlhbGlzZUF1ZGlvKCknKVxuXG4gICAgY2xlYXJVc2VyTWVkaWFUaW1lb3V0KClcblxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZnJlZSBtZW1vcnlcbiAgICB1c2VyTWVkaWEgJiYgdXNlck1lZGlhLnN0b3AoKVxuXG4gICAgdXNlck1lZGlhTG9hZGVkID0ga2V5ID0gY2FudmFzID0gY3R4ID0gbnVsbFxuXG4gICAgbG9hZFVzZXJNZWRpYSgpXG4gIH1cblxuICB0aGlzLnVubG9hZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCF1bmxvYWRlZCkge1xuICAgICAgdmFyIGNhdXNlXG5cbiAgICAgIGlmIChlKSB7XG4gICAgICAgIGNhdXNlID0gZS5uYW1lIHx8IGUuc3RhdHVzVGV4dCB8fCBlLnRvU3RyaW5nKClcbiAgICAgIH1cblxuICAgICAgZGVidWcoJ1JlY29yZGVyOiB1bmxvYWQoKScgKyAoY2F1c2UgPyAnLCBjYXVzZTogJyArIGNhdXNlIDogJycpKVxuXG4gICAgICB0aGlzLnJlc2V0KClcblxuICAgICAgY2xlYXJVc2VyTWVkaWFUaW1lb3V0KClcblxuICAgICAgZGlzY29ubmVjdCgpXG5cbiAgICAgIHVubG9hZGVkID0gdHJ1ZVxuXG4gICAgICBidWlsdCA9IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBubyBuZWVkIHRvIHJlc2V0IHdoZW4gYWxyZWFkeSB1bmxvYWRlZFxuICAgIGlmICghdW5sb2FkZWQpIHtcbiAgICAgIGRlYnVnKCdSZWNvcmRlcjogcmVzZXQoKScpXG5cbiAgICAgIHRoaXMuZW1pdChFdmVudHMuUkVTRVRUSU5HKVxuXG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSgpXG5cbiAgICAgIC8vIGltcG9ydGFudCB0byBmcmVlIG1lbW9yeVxuICAgICAgdXNlck1lZGlhICYmIHVzZXJNZWRpYS5zdG9wKClcblxuICAgICAgcmVwbGF5LnJlc2V0KClcblxuICAgICAgdXNlck1lZGlhTG9hZGVkID0ga2V5ID0gY2FudmFzID0gY3R4ID0gd2FpdGluZ1RpbWUgPSBudWxsXG4gICAgfVxuICB9XG5cbiAgdGhpcy52YWxpZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29ubmVjdGVkICYmIGZyYW1lc0NvdW50ID4gMCAmJiBjYW52YXMgPT09IG51bGxcbiAgfVxuXG4gIHRoaXMuaXNSZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlck1lZGlhLmlzUmVhZHkoKVxuICB9XG5cbiAgdGhpcy5wYXVzZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBjb25zdCBlID0gcGFyYW1zICYmIHBhcmFtcy5ldmVudFxuXG4gICAgaWYgKGUgaW5zdGFuY2VvZiB3aW5kb3cuRXZlbnQpIHtcbiAgICAgIHBhcmFtcy5ldmVudFR5cGUgPSBlLnR5cGVcbiAgICB9XG5cbiAgICBkZWJ1ZygncGF1c2UoKScsIHBhcmFtcylcblxuICAgIHVzZXJNZWRpYS5wYXVzZSgpXG4gICAgbG9vcC5zdG9wKClcblxuICAgIHRoaXMuZW1pdChFdmVudHMuUEFVU0VEKVxuXG4gICAgc2VuZFBpbmdzKClcbiAgfVxuXG4gIHRoaXMuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZXJNZWRpYSAmJiB1c2VyTWVkaWEuaXNQYXVzZWQoKVxuICB9XG5cbiAgdGhpcy5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ1JlY29yZGVyOiByZXN1bWUoKScpXG5cbiAgICBzdG9wUGluZ3MoKVxuXG4gICAgdGhpcy5lbWl0KEV2ZW50cy5SRVNVTUlORylcblxuICAgIHVzZXJNZWRpYS5yZXN1bWUoKVxuICAgIGxvb3Auc3RhcnQoKVxuICB9XG5cbiAgZnVuY3Rpb24gb25GbHVzaGVkIChvcHRzKSB7XG4gICAgY29uc3QgZnJhbWVOdW1iZXIgPSBvcHRzICYmIG9wdHMuZnJhbWVOdW1iZXJcblxuICAgIGlmIChmcmFtZU51bWJlciA9PT0gMSkge1xuICAgICAgc2VsZi5lbWl0KEV2ZW50cy5GSVJTVF9GUkFNRV9TRU5UKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUxvb3AgKCkge1xuICAgIGNvbnN0IG5ld0xvb3AgPSBhbmltaXR0ZXIoe2Zwczogb3B0aW9ucy52aWRlby5mcHN9LCBkcmF3KVxuXG4gICAgLy8gcmVtZW1iZXIgaXQgZmlyc3RcbiAgICBvcmlnaW5hbEFuaW1hdGlvbkZyYW1lT2JqZWN0ID0gbmV3TG9vcC5nZXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWVPYmplY3QoKVxuXG4gICAgcmV0dXJuIG5ld0xvb3BcbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYXcgKGRlbHRhVGltZSwgZWxhcHNlZFRpbWUpIHtcbiAgICB0cnkge1xuICAgICAgLy8gY3R4IGFuZCBzdHJlYW0gbWlnaHQgYmVjb21lIG51bGwgd2hpbGUgdW5sb2FkaW5nXG4gICAgICBpZiAoIXNlbGYuaXNQYXVzZWQoKSAmJiBzdHJlYW0gJiYgY3R4KSB7XG4gICAgICAgIGlmIChmcmFtZXNDb3VudCA9PT0gMCkge1xuICAgICAgICAgIHNlbGYuZW1pdChFdmVudHMuU0VORElOR19GSVJTVF9GUkFNRSlcbiAgICAgICAgfVxuXG4gICAgICAgIGZyYW1lc0NvdW50KytcblxuICAgICAgICBjdHguZHJhd0ltYWdlKFxuICAgICAgICAgIHVzZXJNZWRpYS5nZXRSYXdWaXN1YWxzKCksXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIGNhbnZhcy53aWR0aCxcbiAgICAgICAgICBjYW52YXMuaGVpZ2h0XG4gICAgICAgIClcblxuICAgICAgICByZWNvcmRpbmdCdWZmZXIgPSBmcmFtZS50b0J1ZmZlcigpXG4gICAgICAgIHJlY29yZGluZ0J1ZmZlckxlbmd0aCA9IHJlY29yZGluZ0J1ZmZlci5sZW5ndGhcblxuICAgICAgICBpZiAocmVjb3JkaW5nQnVmZmVyTGVuZ3RoIDwgMSkge1xuICAgICAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnRmFpbGVkIHRvIGV4dHJhY3Qgd2ViY2FtIGRhdGEuJywgb3B0aW9ucylcbiAgICAgICAgfVxuXG4gICAgICAgIGJ5dGVzU3VtICs9IHJlY29yZGluZ0J1ZmZlckxlbmd0aFxuXG4gICAgICAgIHdyaXRlU3RyZWFtKHJlY29yZGluZ0J1ZmZlciwge1xuICAgICAgICAgIGZyYW1lTnVtYmVyOiBmcmFtZXNDb3VudCxcbiAgICAgICAgICBvbkZsdXNoZWRDYWxsYmFjazogb25GbHVzaGVkXG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gaWYgKG9wdGlvbnMudmVyYm9zZSkge1xuICAgICAgICAvLyAgIGRlYnVnKFxuICAgICAgICAvLyAgICAgJ0ZyYW1lICMnICsgZnJhbWVzQ291bnQgKyAnICgnICsgcmVjb3JkaW5nQnVmZmVyTGVuZ3RoICsgJyBieXRlcyk6JyxcbiAgICAgICAgLy8gICAgICcgZGVsdGE9JyArIGRlbHRhVGltZSArICdtcywgJyArXG4gICAgICAgIC8vICAgICAnIGVsYXBzZWQ9JyArIGVsYXBzZWRUaW1lICsgJ21zJ1xuICAgICAgICAvLyAgIClcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIHZpc3VhbHMuY2hlY2tUaW1lcih7aW50ZXJ2YWxTdW06IGVsYXBzZWRUaW1lfSlcbiAgICAgIH1cbiAgICB9IGNhdGNoIChleGMpIHtcbiAgICAgIHNlbGYuZW1pdChFdmVudHMuRVJST1IsIGV4YylcbiAgICB9XG4gIH1cblxuICB0aGlzLnJlY29yZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodW5sb2FkZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIC8vIHJlY29ubmVjdCB3aGVuIG5lZWRlZFxuICAgIGlmICghY29ubmVjdGVkKSB7XG4gICAgICBkZWJ1ZygnUmVjb3JkZXI6IHJlY29ubmVjdGluZyBiZWZvcmUgcmVjb3JkaW5nIC4uLicpXG5cbiAgICAgIGluaXRTb2NrZXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLm9uY2UoRXZlbnRzLlVTRVJfTUVESUFfUkVBRFksIHNlbGYucmVjb3JkKVxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNhbnZhcyA9IHVzZXJNZWRpYS5jcmVhdGVDYW52YXMoKVxuICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgc2VsZi5lbWl0KFxuICAgICAgICBFdmVudHMuRVJST1IsXG4gICAgICAgIFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnRmFpbGVkIHRvIGNyZWF0ZSBjYW52YXMuJywgZXhjLCBvcHRpb25zKVxuICAgICAgKVxuXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuXG4gICAgaWYgKCFjYW52YXMud2lkdGgpIHtcbiAgICAgIHNlbGYuZW1pdChcbiAgICAgICAgRXZlbnRzLkVSUk9SLFxuICAgICAgICBWaWRlb21haWxFcnJvci5jcmVhdGUoJ0NhbnZhcyBoYXMgYW4gaW52YWxpZCB3aWR0aC4nLCBvcHRpb25zKVxuICAgICAgKVxuXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoIWNhbnZhcy5oZWlnaHQpIHtcbiAgICAgIHNlbGYuZW1pdChcbiAgICAgICAgRXZlbnRzLkVSUk9SLFxuICAgICAgICBWaWRlb21haWxFcnJvci5jcmVhdGUoJ0NhbnZhcyBoYXMgYW4gaW52YWxpZCBoZWlnaHQuJywgb3B0aW9ucylcbiAgICAgIClcblxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgYnl0ZXNTdW0gPSAwXG5cbiAgICBmcmFtZSA9IG5ldyBGcmFtZShjYW52YXMsIG9wdGlvbnMpXG5cbiAgICBkZWJ1ZygnUmVjb3JkZXI6IHJlY29yZCgpJylcbiAgICB1c2VyTWVkaWEucmVjb3JkKClcblxuICAgIHNlbGYuZW1pdChFdmVudHMuUkVDT1JESU5HLCBmcmFtZXNDb3VudClcblxuICAgIGxvb3Auc3RhcnQoKVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0QW5pbWF0aW9uRnJhbWVPYmplY3QgKG5ld09iaikge1xuICAgIC8vIG11c3Qgc3RvcCBhbmQgdGhlbiBzdGFydCB0byBtYWtlIGl0IGJlY29tZSBlZmZlY3RpdmUsIHNlZVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9oYXB0aWNkYXRhL2FuaW1pdHRlci9pc3N1ZXMvNSNpc3N1ZWNvbW1lbnQtMjkyMDE5MTY4XG4gICAgaWYgKGxvb3ApIHtcbiAgICAgIGNvbnN0IGlzUmVjb3JkaW5nID0gc2VsZi5pc1JlY29yZGluZygpXG5cbiAgICAgIGxvb3Auc3RvcCgpXG4gICAgICBsb29wLnNldFJlcXVlc3RBbmltYXRpb25GcmFtZU9iamVjdChuZXdPYmopXG5cbiAgICAgIGlmIChpc1JlY29yZGluZykge1xuICAgICAgICBsb29wLnN0YXJ0KClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXN0b3JlQW5pbWF0aW9uRnJhbWVPYmplY3QgKCkge1xuICAgIGRlYnVnKCdSZWNvcmRlcjogcmVzdG9yZUFuaW1hdGlvbkZyYW1lT2JqZWN0KCknKVxuXG4gICAgc2V0QW5pbWF0aW9uRnJhbWVPYmplY3Qob3JpZ2luYWxBbmltYXRpb25GcmFtZU9iamVjdClcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvb3BXaXRoVGltZW91dHMgKCkge1xuICAgIGRlYnVnKCdSZWNvcmRlcjogbG9vcFdpdGhUaW1lb3V0cygpJylcblxuICAgIGNvbnN0IHdhbnRlZEludGVydmFsID0gMWUzIC8gb3B0aW9ucy52aWRlby5mcHNcblxuICAgIHZhciBwcm9jZXNzaW5nVGltZSA9IDBcbiAgICB2YXIgc3RhcnRcblxuICAgIGZ1bmN0aW9uIHJhZiAoZm4pIHtcbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgICAgICAgZm4oKVxuICAgICAgICAgIHByb2Nlc3NpbmdUaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHJlZHVjaW5nIHdhbnRlZCBpbnRlcnZhbCBieSByZXNwZWN0aW5nIHRoZSB0aW1lIGl0IHRha2VzIHRvXG4gICAgICAgIC8vIGNvbXB1dGUgaW50ZXJuYWxseSBzaW5jZSB0aGlzIGlzIG5vdCBtdWx0aS10aHJlYWRlZCBsaWtlXG4gICAgICAgIC8vIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgICB3YW50ZWRJbnRlcnZhbCAtIHByb2Nlc3NpbmdUaW1lXG4gICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuY2VsIChpZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGlkKVxuICAgIH1cblxuICAgIHNldEFuaW1hdGlvbkZyYW1lT2JqZWN0KHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZTogcmFmLFxuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWU6IGNhbmNlbFxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBidWlsZEVsZW1lbnQgKCkge1xuICAgIHJlY29yZGVyRWxlbWVudCA9IGgoJ3ZpZGVvLicgKyBvcHRpb25zLnNlbGVjdG9ycy51c2VyTWVkaWFDbGFzcylcbiAgICB2aXN1YWxzLmFwcGVuZENoaWxkKHJlY29yZGVyRWxlbWVudClcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvcnJlY3REaW1lbnNpb25zICgpIHtcbiAgICBpZiAob3B0aW9ucy5oYXNEZWZpbmVkV2lkdGgoKSkge1xuICAgICAgcmVjb3JkZXJFbGVtZW50LndpZHRoID0gc2VsZi5nZXRSZWNvcmRlcldpZHRoKHRydWUpXG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaGFzRGVmaW5lZEhlaWdodCgpKSB7XG4gICAgICByZWNvcmRlckVsZW1lbnQuaGVpZ2h0ID0gc2VsZi5nZXRSZWNvcmRlckhlaWdodCh0cnVlKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRFdmVudHMgKCkge1xuICAgIGRlYnVnKCdSZWNvcmRlcjogaW5pdEV2ZW50cygpJylcblxuICAgIHNlbGZcbiAgICAgIC5vbihFdmVudHMuU1VCTUlUVElORywgZnVuY3Rpb24gKCkge1xuICAgICAgICBzdWJtaXR0aW5nID0gdHJ1ZVxuICAgICAgfSlcbiAgICAgIC5vbihFdmVudHMuU1VCTUlUVEVELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN1Ym1pdHRpbmcgPSBmYWxzZVxuICAgICAgICBzZWxmLnVubG9hZCgpXG4gICAgICB9KVxuICAgICAgLm9uKEV2ZW50cy5CTE9DS0lORywgZnVuY3Rpb24gKCkge1xuICAgICAgICBibG9ja2luZyA9IHRydWVcbiAgICAgICAgY2xlYXJVc2VyTWVkaWFUaW1lb3V0KClcbiAgICAgIH0pXG4gICAgICAub24oRXZlbnRzLkhJREUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5oaWRlKClcbiAgICAgIH0pXG4gICAgICAub24oRXZlbnRzLkxPQURFRF9NRVRBX0RBVEEsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29ycmVjdERpbWVuc2lvbnMoKVxuICAgICAgfSlcbiAgICAgIC5vbihFdmVudHMuRElTQUJMSU5HX0FVRElPLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlSW5pdGlhbGlzZUF1ZGlvKClcbiAgICAgIH0pXG4gICAgICAub24oRXZlbnRzLkVOQUJMSU5HX0FVRElPLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlSW5pdGlhbGlzZUF1ZGlvKClcbiAgICAgIH0pXG4gICAgICAub24oRXZlbnRzLklOVklTSUJMRSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBsb29wV2l0aFRpbWVvdXRzKClcbiAgICAgIH0pXG4gICAgICAub24oRXZlbnRzLlZJU0lCTEUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVzdG9yZUFuaW1hdGlvbkZyYW1lT2JqZWN0KClcbiAgICAgIH0pXG4gIH1cblxuICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlcnIgPSBicm93c2VyLmNoZWNrUmVjb3JkaW5nQ2FwYWJpbGl0aWVzKClcblxuICAgIGlmICghZXJyKSB7XG4gICAgICBlcnIgPSBicm93c2VyLmNoZWNrQnVmZmVyVHlwZXMoKVxuICAgIH1cblxuICAgIGlmIChlcnIpIHtcbiAgICAgIHRoaXMuZW1pdChFdmVudHMuRVJST1IsIGVycilcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjb3JkZXJFbGVtZW50ID0gdmlzdWFscy5xdWVyeVNlbGVjdG9yKCd2aWRlby4nICsgb3B0aW9ucy5zZWxlY3RvcnMudXNlck1lZGlhQ2xhc3MpXG5cbiAgICAgIGlmICghcmVjb3JkZXJFbGVtZW50KSB7XG4gICAgICAgIGJ1aWxkRWxlbWVudCgpXG4gICAgICB9XG5cbiAgICAgIGNvcnJlY3REaW1lbnNpb25zKClcblxuICAgICAgLy8gcHJldmVudCBhdWRpbyBmZWVkYmFjaywgc2VlXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYmluYXJ5a2l0Y2hlbi92aWRlb21haWwtY2xpZW50L2lzc3Vlcy8zNVxuICAgICAgcmVjb3JkZXJFbGVtZW50Lm11dGVkID0gdHJ1ZVxuXG4gICAgICAvLyBmb3IgaXBob25lcywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJydGMvc2FtcGxlcy9pc3N1ZXMvOTI5XG4gICAgICByZWNvcmRlckVsZW1lbnQuc2V0QXR0cmlidXRlKCdwbGF5c2lubGluZScsIHRydWUpXG4gICAgICByZWNvcmRlckVsZW1lbnQuc2V0QXR0cmlidXRlKCd3ZWJraXQtcGxheXNpbmxpbmUnLCAnd2Via2l0LXBsYXlzaW5saW5lJylcblxuICAgICAgaWYgKCF1c2VyTWVkaWEpIHtcbiAgICAgICAgdXNlck1lZGlhID0gbmV3IFVzZXJNZWRpYSh0aGlzLCBvcHRpb25zKVxuICAgICAgfVxuXG4gICAgICBzaG93KClcblxuICAgICAgaWYgKCFidWlsdCkge1xuICAgICAgICBpbml0RXZlbnRzKClcblxuICAgICAgICBpZiAoIWNvbm5lY3RlZCkge1xuICAgICAgICAgIGluaXRTb2NrZXQoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvYWRVc2VyTWVkaWEoKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2FkVXNlck1lZGlhKClcbiAgICAgIH1cblxuICAgICAgYnVpbHQgPSB0cnVlXG4gICAgfVxuICB9XG5cbiAgdGhpcy5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlck1lZGlhICYmIHVzZXJNZWRpYS5pc1BhdXNlZCgpICYmICFsb29wLmlzUnVubmluZygpXG4gIH1cblxuICB0aGlzLmlzUmVjb3JkaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIGNoZWNraW5nIGZvciBzdHJlYW0uZGVzdHJveWVkIG5lZWRlZCBzaW5jZVxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC5pby9pc3N1ZXMvMjk2XG4gICAgcmV0dXJuIGxvb3AgJiYgbG9vcC5pc1J1bm5pbmcoKSAmJiAhdGhpcy5pc1BhdXNlZCgpICYmICFpc05vdGlmeWluZygpICYmIHN0cmVhbSAmJiAhc3RyZWFtLmRlc3Ryb3llZFxuICB9XG5cbiAgdGhpcy5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghaXNIaWRkZW4oKSkge1xuICAgICAgcmVjb3JkZXJFbGVtZW50ICYmIGhpZGRlbihyZWNvcmRlckVsZW1lbnQsIHRydWUpXG5cbiAgICAgIGNsZWFyVXNlck1lZGlhVGltZW91dCgpXG4gICAgICBjbGVhclJldHJ5VGltZW91dCgpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5pc1VubG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1bmxvYWRlZFxuICB9XG5cbiAgLy8gdGhlc2UgdHdvIHJldHVybiB0aGUgdHJ1ZSBkaW1lbnNpb25zIG9mIHRoZSB3ZWJjYW0gYXJlYS5cbiAgLy8gbmVlZGVkIGJlY2F1c2Ugb24gbW9iaWxlcyB0aGV5IG1pZ2h0IGJlIGRpZmZlcmVudC5cblxuICB0aGlzLmdldFJlY29yZGVyV2lkdGggPSBmdW5jdGlvbiAocmVzcG9uc2l2ZSkge1xuICAgIGlmICh1c2VyTWVkaWEgJiYgdXNlck1lZGlhLmhhc1ZpZGVvV2lkdGgoKSkge1xuICAgICAgcmV0dXJuIHVzZXJNZWRpYS5nZXRSYXdXaWR0aChyZXNwb25zaXZlKVxuICAgIH0gZWxzZSBpZiAocmVzcG9uc2l2ZSAmJiBvcHRpb25zLmhhc0RlZmluZWRXaWR0aCgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5saW1pdFdpZHRoKG9wdGlvbnMudmlkZW8ud2lkdGgpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5nZXRSZWNvcmRlckhlaWdodCA9IGZ1bmN0aW9uIChyZXNwb25zaXZlKSB7XG4gICAgaWYgKHVzZXJNZWRpYSkge1xuICAgICAgcmV0dXJuIHVzZXJNZWRpYS5nZXRSYXdIZWlnaHQocmVzcG9uc2l2ZSlcbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNpdmUgJiYgb3B0aW9ucy5oYXNEZWZpbmVkSGVpZ2h0KCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZUhlaWdodChyZXNwb25zaXZlKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJhdGlvICgpIHtcbiAgICB2YXIgcmF0aW9cblxuICAgIGlmICh1c2VyTWVkaWEpIHtcbiAgICAgIGNvbnN0IHVzZXJNZWRpYVZpZGVvV2lkdGggPSB1c2VyTWVkaWEuZ2V0VmlkZW9XaWR0aCgpXG5cbiAgICAgIC8vIGF2b2lkIGRpdmlzaW9uIGJ5IHplcm9cbiAgICAgIGlmICh1c2VyTWVkaWFWaWRlb1dpZHRoIDwgMSkge1xuICAgICAgICAvLyB1c2UgYXMgYSBsYXN0IHJlc29ydCBmYWxsYmFjayBjb21wdXRhdGlvbiAobmVlZGVkIGZvciBzYWZhcmkgMTEpXG4gICAgICAgIHJhdGlvID0gdmlzdWFscy5nZXRSYXRpbygpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByYXRpbyA9IHVzZXJNZWRpYS5nZXRWaWRlb0hlaWdodCgpIC8gdXNlck1lZGlhVmlkZW9XaWR0aFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByYXRpbyA9IG9wdGlvbnMuZ2V0UmF0aW8oKVxuICAgIH1cblxuICAgIHJldHVybiByYXRpb1xuICB9XG5cbiAgdGhpcy5jYWxjdWxhdGVXaWR0aCA9IGZ1bmN0aW9uIChyZXNwb25zaXZlKSB7XG4gICAgdmFyIHZpZGVvSGVpZ2h0XG5cbiAgICBpZiAodXNlck1lZGlhKSB7XG4gICAgICB2aWRlb0hlaWdodCA9IHVzZXJNZWRpYS5nZXRWaWRlb0hlaWdodCgpXG4gICAgfSBlbHNlIGlmIChyZWNvcmRlckVsZW1lbnQpIHtcbiAgICAgIHZpZGVvSGVpZ2h0ID0gcmVjb3JkZXJFbGVtZW50LnZpZGVvSGVpZ2h0IHx8IHJlY29yZGVyRWxlbWVudC5oZWlnaHRcbiAgICB9XG5cbiAgICByZXR1cm4gdmlzdWFscy5jYWxjdWxhdGVXaWR0aCh7XG4gICAgICByZXNwb25zaXZlOiByZXNwb25zaXZlLFxuICAgICAgcmF0aW86IGdldFJhdGlvKCksXG4gICAgICB2aWRlb0hlaWdodDogdmlkZW9IZWlnaHRcbiAgICB9KVxuICB9XG5cbiAgdGhpcy5jYWxjdWxhdGVIZWlnaHQgPSBmdW5jdGlvbiAocmVzcG9uc2l2ZSkge1xuICAgIHZhciB2aWRlb1dpZHRoXG5cbiAgICBpZiAodXNlck1lZGlhKSB7XG4gICAgICB2aWRlb1dpZHRoID0gdXNlck1lZGlhLmdldFZpZGVvV2lkdGgoKVxuICAgIH0gZWxzZSBpZiAocmVjb3JkZXJFbGVtZW50KSB7XG4gICAgICB2aWRlb1dpZHRoID0gcmVjb3JkZXJFbGVtZW50LnZpZGVvV2lkdGggfHwgcmVjb3JkZXJFbGVtZW50LndpZHRoXG4gICAgfVxuXG4gICAgcmV0dXJuIHZpc3VhbHMuY2FsY3VsYXRlSGVpZ2h0KHtcbiAgICAgIHJlc3BvbnNpdmU6IHJlc3BvbnNpdmUsXG4gICAgICByYXRpbzogZ2V0UmF0aW8oKSxcbiAgICAgIHZpZGVvV2lkdGg6IHZpZGVvV2lkdGhcbiAgICB9KVxuICB9XG5cbiAgdGhpcy5nZXRSYXdWaXN1YWxVc2VyTWVkaWEgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlY29yZGVyRWxlbWVudFxuICB9XG5cbiAgdGhpcy5pc0Nvbm5lY3RlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29ubmVjdGVkXG4gIH1cblxuICB0aGlzLmlzQ29ubmVjdGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29ubmVjdGluZ1xuICB9XG5cbiAgdGhpcy5saW1pdFdpZHRoID0gZnVuY3Rpb24gKHdpZHRoKSB7XG4gICAgcmV0dXJuIHZpc3VhbHMubGltaXRXaWR0aCh3aWR0aClcbiAgfVxuXG4gIHRoaXMubGltaXRIZWlnaHQgPSBmdW5jdGlvbiAoaGVpZ2h0KSB7XG4gICAgcmV0dXJuIHZpc3VhbHMubGltaXRIZWlnaHQoaGVpZ2h0KVxuICB9XG5cbiAgdGhpcy5pc1VzZXJNZWRpYUxvYWRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlck1lZGlhTG9hZGVkXG4gIH1cbn1cblxudXRpbC5pbmhlcml0cyhSZWNvcmRlciwgRXZlbnRFbWl0dGVyKVxuXG5leHBvcnQgZGVmYXVsdCBSZWNvcmRlclxuIiwiaW1wb3J0IHV0aWwgZnJvbSAndXRpbCdcbmltcG9ydCBoIGZyb20gJ2h5cGVyc2NyaXB0J1xuaW1wb3J0IGhpZGRlbiBmcm9tICdoaWRkZW4nXG5pbXBvcnQgYWRkRXZlbnRMaXN0ZW5lcldpdGhPcHRpb25zIGZyb20gJ2FkZC1ldmVudGxpc3RlbmVyLXdpdGgtb3B0aW9ucydcblxuaW1wb3J0IEV2ZW50cyBmcm9tICcuLy4uLy4uL2V2ZW50cydcbmltcG9ydCBCcm93c2VyIGZyb20gJy4vLi4vLi4vdXRpbC9icm93c2VyJ1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLy4uLy4uL3V0aWwvZXZlbnRFbWl0dGVyJ1xuaW1wb3J0IFZpZGVvbWFpbEVycm9yIGZyb20gJy4vLi4vLi4vdXRpbC92aWRlb21haWxFcnJvcidcblxuaW1wb3J0IGVuYWJsZUlubGluZVZpZGVvIGZyb20gJ2lwaG9uZS1pbmxpbmUtdmlkZW8nXG5cbmNvbnN0IFJlcGxheSA9IGZ1bmN0aW9uIChwYXJlbnRFbGVtZW50LCBvcHRpb25zKSB7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMsIG9wdGlvbnMsICdSZXBsYXknKVxuXG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGNvbnN0IGJyb3dzZXIgPSBuZXcgQnJvd3NlcihvcHRpb25zKVxuICBjb25zdCBkZWJ1ZyA9IG9wdGlvbnMuZGVidWdcblxuICB2YXIgYnVpbHRcbiAgdmFyIHJlcGxheUVsZW1lbnRcbiAgdmFyIHZpZGVvbWFpbFxuXG4gIGZ1bmN0aW9uIGJ1aWxkRWxlbWVudCAoKSB7XG4gICAgZGVidWcoJ1JlcGxheTogYnVpbGRFbGVtZW50KCknKVxuXG4gICAgcmVwbGF5RWxlbWVudCA9IGgoJ3ZpZGVvLicgKyBvcHRpb25zLnNlbGVjdG9ycy5yZXBsYXlDbGFzcylcblxuICAgIGlmICghcmVwbGF5RWxlbWVudC5zZXRBdHRyaWJ1dGUpIHtcbiAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZSgnUGxlYXNlIHVwZ3JhZGUgYnJvd3NlcicsIG9wdGlvbnMpXG4gICAgfVxuXG4gICAgcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChyZXBsYXlFbGVtZW50KVxuICB9XG5cbiAgZnVuY3Rpb24gaXNTdGFuZGFsb25lICgpIHtcbiAgICByZXR1cm4gcGFyZW50RWxlbWVudC5jb25zdHJ1Y3Rvci5uYW1lID09PSAnSFRNTERpdkVsZW1lbnQnXG4gIH1cblxuICBmdW5jdGlvbiBjb3B5QXR0cmlidXRlcyAobmV3VmlkZW9tYWlsKSB7XG4gICAgdmFyIGF0dHJpYnV0ZUNvbnRhaW5lclxuXG4gICAgT2JqZWN0LmtleXMobmV3VmlkZW9tYWlsKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgIGF0dHJpYnV0ZUNvbnRhaW5lciA9IHBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBhdHRyaWJ1dGUpXG5cbiAgICAgIGlmIChhdHRyaWJ1dGVDb250YWluZXIpIHtcbiAgICAgICAgYXR0cmlidXRlQ29udGFpbmVyLmlubmVySFRNTCA9IG5ld1ZpZGVvbWFpbFthdHRyaWJ1dGVdXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvcnJlY3REaW1lbnNpb25zIChvcHRpb25zKSB7XG4gICAgdmFyIHdpZHRoLCBoZWlnaHRcblxuICAgIGlmICh2aWRlb21haWwgJiYgdmlkZW9tYWlsLnBsYXllcldpZHRoKSB7XG4gICAgICB3aWR0aCA9IHZpZGVvbWFpbC5wbGF5ZXJXaWR0aFxuICAgIH0gZWxzZSBpZiAocGFyZW50RWxlbWVudC5jYWxjdWxhdGVXaWR0aCkge1xuICAgICAgd2lkdGggPSBwYXJlbnRFbGVtZW50LmNhbGN1bGF0ZVdpZHRoKG9wdGlvbnMpXG4gICAgfVxuXG4gICAgaWYgKHZpZGVvbWFpbCAmJiB2aWRlb21haWwucGxheWVySGVpZ2h0KSB7XG4gICAgICBoZWlnaHQgPSB2aWRlb21haWwucGxheWVySGVpZ2h0XG4gICAgfSBlbHNlIGlmIChwYXJlbnRFbGVtZW50LmNhbGN1bGF0ZUhlaWdodCkge1xuICAgICAgaGVpZ2h0ID0gcGFyZW50RWxlbWVudC5jYWxjdWxhdGVIZWlnaHQob3B0aW9ucylcbiAgICB9XG5cbiAgICBpZiAod2lkdGggPiAwKSB7XG4gICAgICByZXBsYXlFbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcGxheUVsZW1lbnQuc3R5bGUud2lkdGggPSAnYXV0bydcbiAgICB9XG5cbiAgICBpZiAoaGVpZ2h0ID4gMCkge1xuICAgICAgcmVwbGF5RWxlbWVudC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcGxheUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nXG4gICAgfVxuICB9XG5cbiAgdGhpcy5zZXRWaWRlb21haWwgPSBmdW5jdGlvbiAobmV3VmlkZW9tYWlsKSB7XG4gICAgdmlkZW9tYWlsID0gbmV3VmlkZW9tYWlsXG5cbiAgICBpZiAodmlkZW9tYWlsKSB7XG4gICAgICBpZiAodmlkZW9tYWlsLndlYm0pIHtcbiAgICAgICAgdGhpcy5zZXRXZWJNU291cmNlKHZpZGVvbWFpbC53ZWJtKVxuICAgICAgfVxuXG4gICAgICBpZiAodmlkZW9tYWlsLm1wNCkge1xuICAgICAgICB0aGlzLnNldE1wNFNvdXJjZSh2aWRlb21haWwubXA0KVxuICAgICAgfVxuXG4gICAgICBpZiAodmlkZW9tYWlsLnBvc3Rlcikge1xuICAgICAgICByZXBsYXlFbGVtZW50LnNldEF0dHJpYnV0ZSgncG9zdGVyJywgdmlkZW9tYWlsLnBvc3RlcilcbiAgICAgIH1cblxuICAgICAgY29weUF0dHJpYnV0ZXModmlkZW9tYWlsKVxuICAgIH1cblxuICAgIGNvbnN0IGhhc0F1ZGlvID0gdmlkZW9tYWlsICYmIHZpZGVvbWFpbC5yZWNvcmRpbmdTdGF0cyAmJiB2aWRlb21haWwucmVjb3JkaW5nU3RhdHMuc2FtcGxlUmF0ZSA+IDBcblxuICAgIHRoaXMuc2hvdyhcbiAgICAgIHZpZGVvbWFpbCAmJiB2aWRlb21haWwud2lkdGgsXG4gICAgICB2aWRlb21haWwgJiYgdmlkZW9tYWlsLmhlaWdodCxcbiAgICAgIGhhc0F1ZGlvXG4gICAgKVxuICB9XG5cbiAgdGhpcy5zaG93ID0gZnVuY3Rpb24gKHJlY29yZGVyV2lkdGgsIHJlY29yZGVySGVpZ2h0LCBoYXNBdWRpbykge1xuICAgIGlmICh2aWRlb21haWwpIHtcbiAgICAgIGNvcnJlY3REaW1lbnNpb25zKHtcbiAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICAgICAgLy8gYmV3YXJlIHRoYXQgcmVjb3JkZXJXaWR0aCBhbmQgcmVjb3JkZXJIZWlnaHQgY2FuIGJlIG51bGwgc29tZXRpbWVzXG4gICAgICAgIHZpZGVvV2lkdGg6IHJlY29yZGVyV2lkdGggfHwgcmVwbGF5RWxlbWVudC52aWRlb1dpZHRoLFxuICAgICAgICB2aWRlb0hlaWdodDogcmVjb3JkZXJIZWlnaHQgfHwgcmVwbGF5RWxlbWVudC52aWRlb0hlaWdodFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBoaWRkZW4ocmVwbGF5RWxlbWVudCwgZmFsc2UpXG5cbiAgICAvLyBwYXJlbnQgZWxlbWVudCBjYW4gYmUgYW55IG9iamVjdCwgYmUgY2FyZWZ1bCFcbiAgICBpZiAocGFyZW50RWxlbWVudCkge1xuICAgICAgaWYgKHBhcmVudEVsZW1lbnQuc3R5bGUpIHtcbiAgICAgICAgaGlkZGVuKHBhcmVudEVsZW1lbnQsIGZhbHNlKVxuICAgICAgfSBlbHNlIGlmIChwYXJlbnRFbGVtZW50LnNob3cpIHtcbiAgICAgICAgcGFyZW50RWxlbWVudC5zaG93KClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaGFzQXVkaW8pIHtcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC1jbGllbnQvaXNzdWVzLzExNVxuICAgICAgLy8gZG8gbm90IHNldCBtdXRlIHRvIGZhbHNlIGFzIHRoaXMgd2lsbCBtZXNzIHVwLiBqdXN0IGRvIG5vdCBtZW50aW9uIHRoaXMgYXR0cmlidXRlIGF0IGFsbFxuICAgICAgcmVwbGF5RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3ZvbHVtZScsIDEpXG4gICAgfSBlbHNlIGlmICghb3B0aW9ucy5pc0F1ZGlvRW5hYmxlZCgpKSB7XG4gICAgICByZXBsYXlFbGVtZW50LnNldEF0dHJpYnV0ZSgnbXV0ZWQnLCB0cnVlKVxuICAgIH1cblxuICAgIC8vIHRoaXMgbXVzdCBiZSBjYWxsZWQgYWZ0ZXIgc2V0dGluZyB0aGUgc291cmNlcyBhbmQgd2hlbiBiZWNvbWluZyB2aXNpYmxlXG4gICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iZnJlZC1pdC9pcGhvbmUtaW5saW5lLXZpZGVvL2lzc3Vlcy8xNlxuICAgIGVuYWJsZUlubGluZVZpZGVvICYmIGVuYWJsZUlubGluZVZpZGVvKHJlcGxheUVsZW1lbnQsIHtcbiAgICAgIGlQYWQ6IHRydWVcbiAgICB9KVxuXG4gICAgLy8gdGhpcyBmb3JjZXMgdG8gYWN0dWFsbHkgZmV0Y2ggdGhlIHZpZGVvcyBmcm9tIHRoZSBzZXJ2ZXJcbiAgICByZXBsYXlFbGVtZW50LmxvYWQoKVxuXG4gICAgaWYgKCF2aWRlb21haWwpIHtcbiAgICAgIHNlbGYuZW1pdChFdmVudHMuUFJFVklFV19TSE9XTilcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5lbWl0KEV2ZW50cy5SRVBMQVlfU0hPV04pXG4gICAgfVxuICB9XG5cbiAgdGhpcy5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1ZygnUmVwbGF5OiBidWlsZCgpJylcblxuICAgIHJlcGxheUVsZW1lbnQgPSBwYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3ZpZGVvLicgKyBvcHRpb25zLnNlbGVjdG9ycy5yZXBsYXlDbGFzcylcblxuICAgIGlmICghcmVwbGF5RWxlbWVudCkge1xuICAgICAgYnVpbGRFbGVtZW50KClcbiAgICB9XG5cbiAgICB0aGlzLmhpZGUoKVxuXG4gICAgcmVwbGF5RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2F1dG9wbGF5JywgdHJ1ZSlcbiAgICByZXBsYXlFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXV0b3N0YXJ0JywgdHJ1ZSlcbiAgICByZXBsYXlFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXV0b2J1ZmZlcicsIHRydWUpXG4gICAgcmVwbGF5RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3BsYXlzaW5saW5lJywgdHJ1ZSlcbiAgICByZXBsYXlFbGVtZW50LnNldEF0dHJpYnV0ZSgnd2Via2l0LXBsYXlzaW5saW5lJywgJ3dlYmtpdC1wbGF5c2lubGluZScpXG4gICAgcmVwbGF5RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NvbnRyb2xzJywgJ2NvbnRyb2xzJylcbiAgICByZXBsYXlFbGVtZW50LnNldEF0dHJpYnV0ZSgncHJlbG9hZCcsICdhdXRvJylcblxuICAgIGlmICghYnVpbHQpIHtcbiAgICAgIGlmICghaXNTdGFuZGFsb25lKCkpIHtcbiAgICAgICAgdGhpcy5vbihFdmVudHMuUFJFVklFVywgZnVuY3Rpb24gKGtleSwgcmVjb3JkZXJXaWR0aCwgcmVjb3JkZXJIZWlnaHQpIHtcbiAgICAgICAgICBzZWxmLnNob3cocmVjb3JkZXJXaWR0aCwgcmVjb3JkZXJIZWlnaHQpXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIC8vIG1ha2VzIHVzZSBvZiBwYXNzaXZlIG9wdGlvbiBhdXRvbWF0aWNhbGx5IGZvciBiZXR0ZXIgcGVyZm9ybWFuY2VcbiAgICAgIC8vIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2FkZC1ldmVudGxpc3RlbmVyLXdpdGgtb3B0aW9uc1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcldpdGhPcHRpb25zKHJlcGxheUVsZW1lbnQsICd0b3VjaHN0YXJ0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZSAmJiBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICAgICBpZiAodGhpcy5wYXVzZWQpIHtcbiAgICAgICAgICBwbGF5KClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXVzZSgpXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIHJlcGxheUVsZW1lbnQub25jbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICAgICAgaWYgKHRoaXMucGF1c2VkKSB7XG4gICAgICAgICAgcGxheSgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGF1c2UoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYnVpbHQgPSB0cnVlXG5cbiAgICBkZWJ1ZygnUmVwbGF5OiBidWlsdC4nKVxuICB9XG5cbiAgdGhpcy51bmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgYnVpbHQgPSBmYWxzZVxuICB9XG5cbiAgdGhpcy5nZXRWaWRlb1NvdXJjZSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgY29uc3Qgc291cmNlcyA9IHJlcGxheUVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NvdXJjZScpXG4gICAgY29uc3QgbCA9IHNvdXJjZXMubGVuZ3RoXG4gICAgY29uc3QgdmlkZW9UeXBlID0gJ3ZpZGVvLycgKyB0eXBlXG5cbiAgICB2YXIgc291cmNlXG5cbiAgICBpZiAobCkge1xuICAgICAgdmFyIGlcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGwgJiYgIXNvdXJjZTsgaSsrKSB7XG4gICAgICAgIGlmIChzb3VyY2VzW2ldLmdldEF0dHJpYnV0ZSgndHlwZScpID09PSB2aWRlb1R5cGUpIHtcbiAgICAgICAgICBzb3VyY2UgPSBzb3VyY2VzW2ldXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlXG4gIH1cblxuICBmdW5jdGlvbiBzZXRWaWRlb1NvdXJjZSAodHlwZSwgc3JjLCBidXN0Q2FjaGUpIHtcbiAgICB2YXIgc291cmNlID0gc2VsZi5nZXRWaWRlb1NvdXJjZSh0eXBlKVxuXG4gICAgaWYgKHNyYyAmJiBidXN0Q2FjaGUpIHtcbiAgICAgIHNyYyArPSAnPycgKyBEYXRlLm5vdygpXG4gICAgfVxuXG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgc291cmNlID0gaCgnc291cmNlJywge1xuICAgICAgICAgIHNyYzogc3JjLFxuICAgICAgICAgIHR5cGU6ICd2aWRlby8nICsgdHlwZVxuICAgICAgICB9KVxuXG4gICAgICAgIHJlcGxheUVsZW1lbnQuYXBwZW5kQ2hpbGQoc291cmNlKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3JjKSB7XG4gICAgICAgIHNvdXJjZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIHNyYylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcGxheUVsZW1lbnQucmVtb3ZlQ2hpbGQoc291cmNlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuc2V0TXA0U291cmNlID0gZnVuY3Rpb24gKHNyYywgYnVzdENhY2hlKSB7XG4gICAgc2V0VmlkZW9Tb3VyY2UoJ21wNCcsIHNyYywgYnVzdENhY2hlKVxuICB9XG5cbiAgdGhpcy5zZXRXZWJNU291cmNlID0gZnVuY3Rpb24gKHNyYywgYnVzdENhY2hlKSB7XG4gICAgc2V0VmlkZW9Tb3VyY2UoJ3dlYm0nLCBzcmMsIGJ1c3RDYWNoZSlcbiAgfVxuXG4gIHRoaXMuZ2V0VmlkZW9UeXBlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBicm93c2VyLmdldFZpZGVvVHlwZShyZXBsYXlFbGVtZW50KVxuICB9XG5cbiAgZnVuY3Rpb24gcGF1c2UgKGNiKSB7XG4gICAgLy8gYXZvaWRzIHJhY2UgY29uZGl0aW9uLCBpbnNwaXJlZCBieVxuICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzY4MDMxNzYvaG93LXRvLXByZXZlbnQtdGhlLXBsYXktcmVxdWVzdC13YXMtaW50ZXJydXB0ZWQtYnktYS1jYWxsLXRvLXBhdXNlLWVycm9yXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXBsYXlFbGVtZW50LnBhdXNlKClcbiAgICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgICAvLyBqdXN0IGlnbm9yZSwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlraXRjaGVuL3ZpZGVvbWFpbC5pby9pc3N1ZXMvMzg2XG4gICAgICAgIG9wdGlvbnMubG9nZ2VyLndhcm4oZXhjKVxuICAgICAgfVxuXG4gICAgICBjYiAmJiBjYigpXG4gICAgfSwgMTUpXG4gIH1cblxuICBmdW5jdGlvbiBwbGF5ICgpIHtcbiAgICBpZiAocmVwbGF5RWxlbWVudCAmJiByZXBsYXlFbGVtZW50LnBsYXkpIHtcbiAgICAgIGNvbnN0IHAgPSByZXBsYXlFbGVtZW50LnBsYXkoKVxuXG4gICAgICBpZiAocCAmJiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSAmJiAocCBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAgIHAuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICAgIG9wdGlvbnMubG9nZ2VyLndhcm4oJ0NhdWdodCBwZW5kaW5nIHBsYXkgZXhjZXB0aW9uOiAlcycsIHJlYXNvbilcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgLy8gcGF1c2UgdmlkZW8gdG8gbWFrZSBzdXJlIGl0IHdvbid0IGNvbnN1bWUgYW55IG1lbW9yeVxuICAgIHBhdXNlKCgpID0+IHtcbiAgICAgIGlmIChyZXBsYXlFbGVtZW50KSB7XG4gICAgICAgIHNlbGYuc2V0TXA0U291cmNlKG51bGwpXG4gICAgICAgIHNlbGYuc2V0V2ViTVNvdXJjZShudWxsKVxuICAgICAgfVxuXG4gICAgICBjYiAmJiBjYigpXG4gICAgfSlcbiAgfVxuXG4gIHRoaXMuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaXNTdGFuZGFsb25lKCkpIHtcbiAgICAgIGhpZGRlbihwYXJlbnRFbGVtZW50LCB0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXBsYXlFbGVtZW50ICYmIGhpZGRlbihyZXBsYXlFbGVtZW50LCB0cnVlKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuaXNTaG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmVwbGF5RWxlbWVudCAmJiAhaGlkZGVuKHJlcGxheUVsZW1lbnQpXG4gIH1cblxuICB0aGlzLmdldFBhcmVudEVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHBhcmVudEVsZW1lbnRcbiAgfVxufVxuXG51dGlsLmluaGVyaXRzKFJlcGxheSwgRXZlbnRFbWl0dGVyKVxuXG5leHBvcnQgZGVmYXVsdCBSZXBsYXlcbiIsImltcG9ydCBoIGZyb20gJ2h5cGVyc2NyaXB0J1xuXG5pbXBvcnQgQXVkaW9SZWNvcmRlciBmcm9tICcuLy4uLy4uL3V0aWwvYXVkaW9SZWNvcmRlcidcbmltcG9ydCBWaWRlb21haWxFcnJvciBmcm9tICcuLy4uLy4uL3V0aWwvdmlkZW9tYWlsRXJyb3InXG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJy4vLi4vLi4vdXRpbC9ldmVudEVtaXR0ZXInXG5pbXBvcnQgTUVESUFfRVZFTlRTIGZyb20gJy4vLi4vLi4vdXRpbC9tZWRpYUV2ZW50cydcbmltcG9ydCBwcmV0dHkgZnJvbSAnLi8uLi8uLi91dGlsL3ByZXR0eSdcbmltcG9ydCBCcm93c2VyIGZyb20gJy4vLi4vLi4vdXRpbC9icm93c2VyJ1xuaW1wb3J0IEV2ZW50cyBmcm9tICcuLy4uLy4uL2V2ZW50cydcblxuY29uc3QgRVZFTlRfQVNDSUkgPSAnfOKAlE/igJR8J1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAocmVjb3JkZXIsIG9wdGlvbnMpIHtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcywgb3B0aW9ucywgJ1VzZXJNZWRpYScpXG5cbiAgY29uc3QgcmF3VmlzdWFsVXNlck1lZGlhID0gcmVjb3JkZXIgJiYgcmVjb3JkZXIuZ2V0UmF3VmlzdWFsVXNlck1lZGlhKClcbiAgY29uc3QgYnJvd3NlciA9IG5ldyBCcm93c2VyKG9wdGlvbnMpXG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgdmFyIHBhdXNlZCA9IGZhbHNlXG4gIHZhciByZWNvcmQgPSBmYWxzZVxuXG4gIHZhciBhdWRpb1JlY29yZGVyXG4gIHZhciBjdXJyZW50VmlzdWFsU3RyZWFtXG5cbiAgZnVuY3Rpb24gYXR0YWNoTWVkaWFTdHJlYW0gKHN0cmVhbSkge1xuICAgIGN1cnJlbnRWaXN1YWxTdHJlYW0gPSBzdHJlYW1cblxuICAgIGlmICh0eXBlb2YgcmF3VmlzdWFsVXNlck1lZGlhLnNyY09iamVjdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJhd1Zpc3VhbFVzZXJNZWRpYS5zcmNPYmplY3QgPSBzdHJlYW1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiByYXdWaXN1YWxVc2VyTWVkaWEuc3JjICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgVVJMID0gd2luZG93LlVSTCB8fCB3aW5kb3cud2Via2l0VVJMXG4gICAgICByYXdWaXN1YWxVc2VyTWVkaWEuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChzdHJlYW0pIHx8IHN0cmVhbVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBWaWRlb21haWxFcnJvci5jcmVhdGUoXG4gICAgICAgICdFcnJvciBhdHRhY2hpbmcgc3RyZWFtIHRvIGVsZW1lbnQuJyxcbiAgICAgICAgJ0NvbnRhY3QgdGhlIGRldmVsb3BlciBhYm91dCB0aGlzJyxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFZpc3VhbFN0cmVhbSAobG9jYWxNZWRpYVN0cmVhbSkge1xuICAgIGlmIChsb2NhbE1lZGlhU3RyZWFtKSB7XG4gICAgICBhdHRhY2hNZWRpYVN0cmVhbShsb2NhbE1lZGlhU3RyZWFtKVxuICAgIH0gZWxzZSB7XG4gICAgICByYXdWaXN1YWxVc2VyTWVkaWEucmVtb3ZlQXR0cmlidXRlKCdzcmNPYmplY3QnKVxuICAgICAgcmF3VmlzdWFsVXNlck1lZGlhLnJlbW92ZUF0dHJpYnV0ZSgnc3JjJylcblxuICAgICAgY3VycmVudFZpc3VhbFN0cmVhbSA9IG51bGxcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRWaXN1YWxTdHJlYW0gKCkge1xuICAgIGlmIChyYXdWaXN1YWxVc2VyTWVkaWEubW96U3JjT2JqZWN0KSB7XG4gICAgICByZXR1cm4gcmF3VmlzdWFsVXNlck1lZGlhLm1velNyY09iamVjdFxuICAgIH0gZWxzZSBpZiAocmF3VmlzdWFsVXNlck1lZGlhLnNyY09iamVjdCkge1xuICAgICAgcmV0dXJuIHJhd1Zpc3VhbFVzZXJNZWRpYS5zcmNPYmplY3RcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN1cnJlbnRWaXN1YWxTdHJlYW1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYXNFbmRlZCAoKSB7XG4gICAgaWYgKHJhd1Zpc3VhbFVzZXJNZWRpYS5lbmRlZCkge1xuICAgICAgcmV0dXJuIHJhd1Zpc3VhbFVzZXJNZWRpYS5lbmRlZFxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB2aXN1YWxTdHJlYW0gPSBnZXRWaXN1YWxTdHJlYW0oKVxuICAgICAgcmV0dXJuIHZpc3VhbFN0cmVhbSAmJiB2aXN1YWxTdHJlYW0uZW5kZWRcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYXNJbnZhbGlkRGltZW5zaW9ucyAoKSB7XG4gICAgaWYgKChyYXdWaXN1YWxVc2VyTWVkaWEudmlkZW9XaWR0aCAmJiByYXdWaXN1YWxVc2VyTWVkaWEudmlkZW9XaWR0aCA8IDMpIHx8XG4gICAgICAgIChyYXdWaXN1YWxVc2VyTWVkaWEuaGVpZ2h0ICYmIHJhd1Zpc3VhbFVzZXJNZWRpYS5oZWlnaHQgPCAzKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUcmFja3MgKGxvY2FsTWVkaWFTdHJlYW0pIHtcbiAgICB2YXIgdHJhY2tzXG5cbiAgICBpZiAobG9jYWxNZWRpYVN0cmVhbSAmJiBsb2NhbE1lZGlhU3RyZWFtLmdldFRyYWNrcykge1xuICAgICAgdHJhY2tzID0gbG9jYWxNZWRpYVN0cmVhbS5nZXRUcmFja3MoKVxuICAgIH1cblxuICAgIHJldHVybiB0cmFja3NcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFZpZGVvVHJhY2tzIChsb2NhbE1lZGlhU3RyZWFtKSB7XG4gICAgdmFyIHZpZGVvVHJhY2tzXG5cbiAgICBpZiAobG9jYWxNZWRpYVN0cmVhbSAmJiBsb2NhbE1lZGlhU3RyZWFtLmdldFZpZGVvVHJhY2tzKSB7XG4gICAgICB2aWRlb1RyYWNrcyA9IGxvY2FsTWVkaWFTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKVxuICAgIH1cblxuICAgIHJldHVybiB2aWRlb1RyYWNrc1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Rmlyc3RWaWRlb1RyYWNrIChsb2NhbE1lZGlhU3RyZWFtKSB7XG4gICAgY29uc3QgdmlkZW9UcmFja3MgPSBnZXRWaWRlb1RyYWNrcyhsb2NhbE1lZGlhU3RyZWFtKVxuICAgIHZhciB2aWRlb1RyYWNrXG5cbiAgICBpZiAodmlkZW9UcmFja3MgJiYgdmlkZW9UcmFja3NbMF0pIHtcbiAgICAgIHZpZGVvVHJhY2sgPSB2aWRlb1RyYWNrc1swXVxuICAgIH1cblxuICAgIHJldHVybiB2aWRlb1RyYWNrXG4gIH1cblxuICBmdW5jdGlvbiBsb2dFdmVudCAoZXZlbnQsIHBhcmFtcykge1xuICAgIG9wdGlvbnMuZGVidWcoJ1VzZXJNZWRpYTogLi4uJywgRVZFTlRfQVNDSUksICdldmVudCcsIGV2ZW50LCBKU09OLnN0cmluZ2lmeShwYXJhbXMpKVxuICB9XG5cbiAgZnVuY3Rpb24gaXNQcm9taXNlIChhbnl0aGluZykge1xuICAgIHJldHVybiAoYW55dGhpbmcgJiYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykgJiYgKGFueXRoaW5nIGluc3RhbmNlb2YgUHJvbWlzZSkpXG4gIH1cblxuICBmdW5jdGlvbiBvdXRwdXRFdmVudCAoZSkge1xuICAgIGxvZ0V2ZW50KGUudHlwZSwge3JlYWR5U3RhdGU6IHJhd1Zpc3VhbFVzZXJNZWRpYS5yZWFkeVN0YXRlfSlcblxuICAgIC8vIHJlbW92ZSBteXNlbGZcbiAgICByYXdWaXN1YWxVc2VyTWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lciAmJlxuICAgIHJhd1Zpc3VhbFVzZXJNZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKGUudHlwZSwgb3V0cHV0RXZlbnQpXG4gIH1cblxuICB0aGlzLnVubG9hZFJlbWFpbmluZ0V2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgIG9wdGlvbnMuZGVidWcoJ1VzZXJNZWRpYTogdW5sb2FkUmVtYWluaW5nRXZlbnRMaXN0ZW5lcnMoKScpXG5cbiAgICBNRURJQV9FVkVOVFMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICByYXdWaXN1YWxVc2VyTWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG91dHB1dEV2ZW50KVxuICAgIH0pXG4gIH1cblxuICB0aGlzLmluaXQgPSBmdW5jdGlvbiAobG9jYWxNZWRpYVN0cmVhbSwgdmlkZW9DYWxsYmFjaywgYXVkaW9DYWxsYmFjaywgZW5kZWRFYXJseUNhbGxiYWNrKSB7XG4gICAgdGhpcy5zdG9wKGxvY2FsTWVkaWFTdHJlYW0sIHRydWUpXG5cbiAgICB2YXIgb25QbGF5UmVhY2hlZCA9IGZhbHNlXG4gICAgdmFyIG9uTG9hZGVkTWV0YURhdGFSZWFjaGVkID0gZmFsc2VcbiAgICB2YXIgcGxheWluZ1Byb21pc2VSZWFjaGVkID0gZmFsc2VcblxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaXNBdWRpb0VuYWJsZWQoKSkge1xuICAgICAgYXVkaW9SZWNvcmRlciA9IGF1ZGlvUmVjb3JkZXIgfHwgbmV3IEF1ZGlvUmVjb3JkZXIodGhpcywgb3B0aW9ucylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdWRpb1JlY29yZCAoKSB7XG4gICAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKEV2ZW50cy5TRU5ESU5HX0ZJUlNUX0ZSQU1FLCBhdWRpb1JlY29yZClcbiAgICAgIGF1ZGlvUmVjb3JkZXIgJiYgYXVkaW9SZWNvcmRlci5yZWNvcmQoYXVkaW9DYWxsYmFjaylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bmxvYWRBbGxFdmVudExpc3RlbmVycyAoKSB7XG4gICAgICBvcHRpb25zLmRlYnVnKCdVc2VyTWVkaWE6IHVubG9hZEFsbEV2ZW50TGlzdGVuZXJzKCknKVxuXG4gICAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKEV2ZW50cy5TRU5ESU5HX0ZJUlNUX0ZSQU1FLCBhdWRpb1JlY29yZClcblxuICAgICAgcmF3VmlzdWFsVXNlck1lZGlhLnJlbW92ZUV2ZW50TGlzdGVuZXIgJiZcbiAgICAgIHJhd1Zpc3VhbFVzZXJNZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCdwbGF5Jywgb25QbGF5KVxuXG4gICAgICByYXdWaXN1YWxVc2VyTWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lciAmJlxuICAgICAgcmF3VmlzdWFsVXNlck1lZGlhLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWRlZG1ldGFkYXRhJywgb25Mb2FkZWRNZXRhRGF0YSlcblxuICAgICAgc2VsZi51bmxvYWRSZW1haW5pbmdFdmVudExpc3RlbmVycygpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGxheSAoKSB7XG4gICAgICAvLyBSZXNldHMgdGhlIG1lZGlhIGVsZW1lbnQgYW5kIHJlc3RhcnRzIHRoZSBtZWRpYSByZXNvdXJjZS4gQW55IHBlbmRpbmcgZXZlbnRzIGFyZSBkaXNjYXJkZWQuXG4gICAgICB0cnkge1xuICAgICAgICByYXdWaXN1YWxVc2VyTWVkaWEubG9hZCgpXG5cbiAgICAgICAgLy8gZml4ZXMgaHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeWtpdGNoZW4vdmlkZW9tYWlsLmlvL2lzc3Vlcy80MDFcbiAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnRFZGdlL0RlbW9zL2Jsb2IvbWFzdGVyL3Bob3RvY2FwdHVyZS9zY3JpcHRzL2RlbW8uanMjTDI3XG4gICAgICAgIGlmIChyYXdWaXN1YWxVc2VyTWVkaWEucGF1c2VkKSB7XG4gICAgICAgICAgb3B0aW9ucy5kZWJ1ZyhcbiAgICAgICAgICAgICdVc2VyTWVkaWE6IHBsYXkoKScsXG4gICAgICAgICAgICAnbWVkaWEucmVhZHlTdGF0ZT0nICsgcmF3VmlzdWFsVXNlck1lZGlhLnJlYWR5U3RhdGUsXG4gICAgICAgICAgICAnbWVkaWEucGF1c2VkPScgKyByYXdWaXN1YWxVc2VyTWVkaWEucGF1c2VkLFxuICAgICAgICAgICAgJ21lZGlhLmVuZGVkPScgKyByYXdWaXN1YWxVc2VyTWVkaWEuZW5kZWQsXG4gICAgICAgICAgICAnbWVkaWEucGxheWVkPScgKyBwcmV0dHkocmF3VmlzdWFsVXNlck1lZGlhLnBsYXllZClcbiAgICAgICAgICApXG5cbiAgICAgICAgICBjb25zdCBwID0gcmF3VmlzdWFsVXNlck1lZGlhLnBsYXkoKVxuXG4gICAgICAgICAgLy8gdXNpbmcgdGhlIHByb21pc2UgaGVyZSBqdXN0IGV4cGVyaW1lbnRhbCBmb3Igbm93XG4gICAgICAgICAgLy8gYW5kIHRoaXMgdG8gY2F0Y2ggYW55IHdlaXJkIGVycm9ycyBlYXJseSBpZiBwb3NzaWJsZVxuICAgICAgICAgIGlmIChpc1Byb21pc2UocCkpIHtcbiAgICAgICAgICAgIHAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmICghcGxheWluZ1Byb21pc2VSZWFjaGVkKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5kZWJ1ZygnVXNlck1lZGlhOiBwbGF5IHByb21pc2Ugc3VjY2Vzc2Z1bC4gUGxheWluZyBub3cuJylcbiAgICAgICAgICAgICAgICBwbGF5aW5nUHJvbWlzZVJlYWNoZWQgPSB0cnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgICAgLy8gcHJvbWlzZSBjYW4gYmUgaW50ZXJydXB0ZWQsIGkuRS4gd2hlbiBzd2l0Y2hpbmcgdGFic1xuICAgICAgICAgICAgICAvLyBhbmQgcHJvbWlzZSBjYW4gZ2V0IHJlc3VtZWQgd2hlbiBzd2l0Y2hpbmcgYmFjayB0byB0YWIsIGhlbmNlXG4gICAgICAgICAgICAgIC8vIGRvIG5vdCB0cmVhdCB0aGlzIGxpa2UgYW4gZXJyb3JcbiAgICAgICAgICAgICAgb3B0aW9ucy5kZWJ1ZygnVXNlck1lZGlhOicsIHJlYXNvbi50b1N0cmluZygpKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgICB1bmxvYWRBbGxFdmVudExpc3RlbmVycygpXG4gICAgICAgIGVuZGVkRWFybHlDYWxsYmFjayhleGMpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlyZUNhbGxiYWNrcyAoKSB7XG4gICAgICBjb25zdCByZWFkeVN0YXRlID0gcmF3VmlzdWFsVXNlck1lZGlhLnJlYWR5U3RhdGVcblxuICAgICAgLy8gcmVhZHkgc3RhdGUsIHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTE1lZGlhRWxlbWVudC9yZWFkeVN0YXRlXG4gICAgICBvcHRpb25zLmRlYnVnKFxuICAgICAgICAnVXNlck1lZGlhOiBmaXJlQ2FsbGJhY2tzKCcgK1xuICAgICAgICAncmVhZHlTdGF0ZT0nICsgcmVhZHlTdGF0ZSArICcsICcgK1xuICAgICAgICAnb25QbGF5UmVhY2hlZD0nICsgb25QbGF5UmVhY2hlZCArICcsICcgK1xuICAgICAgICAnb25Mb2FkZWRNZXRhRGF0YVJlYWNoZWQ9JyArIG9uTG9hZGVkTWV0YURhdGFSZWFjaGVkICsgJyknXG4gICAgICApXG5cbiAgICAgIGlmIChvblBsYXlSZWFjaGVkICYmIG9uTG9hZGVkTWV0YURhdGFSZWFjaGVkKSB7XG4gICAgICAgIHZpZGVvQ2FsbGJhY2soKVxuXG4gICAgICAgIGlmIChhdWRpb1JlY29yZGVyICYmIGF1ZGlvQ2FsbGJhY2spIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXVkaW9SZWNvcmRlci5pbml0KGxvY2FsTWVkaWFTdHJlYW0pXG4gICAgICAgICAgICBzZWxmLm9uKEV2ZW50cy5TRU5ESU5HX0ZJUlNUX0ZSQU1FLCBhdWRpb1JlY29yZClcbiAgICAgICAgICB9IGNhdGNoIChleGMpIHtcbiAgICAgICAgICAgIHVubG9hZEFsbEV2ZW50TGlzdGVuZXJzKClcbiAgICAgICAgICAgIGVuZGVkRWFybHlDYWxsYmFjayhleGMpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25QbGF5ICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxvZ0V2ZW50KCdwbGF5Jywge1xuICAgICAgICAgIHJlYWR5U3RhdGU6IHJhd1Zpc3VhbFVzZXJNZWRpYS5yZWFkeVN0YXRlLFxuICAgICAgICAgIGF1ZGlvOiBvcHRpb25zLmlzQXVkaW9FbmFibGVkKCksXG4gICAgICAgICAgd2lkdGg6IHJhd1Zpc3VhbFVzZXJNZWRpYS53aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IHJhd1Zpc3VhbFVzZXJNZWRpYS5oZWlnaHQsXG4gICAgICAgICAgdmlkZW9XaWR0aDogcmF3VmlzdWFsVXNlck1lZGlhLnZpZGVvV2lkdGgsXG4gICAgICAgICAgdmlkZW9IZWlnaHQ6IHJhd1Zpc3VhbFVzZXJNZWRpYS52aWRlb0hlaWdodFxuICAgICAgICB9KVxuXG4gICAgICAgIHJhd1Zpc3VhbFVzZXJNZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyICYmXG4gICAgICAgIHJhd1Zpc3VhbFVzZXJNZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCdwbGF5Jywgb25QbGF5KVxuXG4gICAgICAgIGlmIChoYXNFbmRlZCgpIHx8IGhhc0ludmFsaWREaW1lbnNpb25zKCkpIHtcbiAgICAgICAgICBlbmRlZEVhcmx5Q2FsbGJhY2soXG4gICAgICAgICAgICBWaWRlb21haWxFcnJvci5jcmVhdGUoXG4gICAgICAgICAgICAgICdBbHJlYWR5IGJ1c3knLFxuICAgICAgICAgICAgICAnUHJvYmFibHkgYW5vdGhlciBicm93c2VyIHdpbmRvdyBpcyB1c2luZyB5b3VyIHdlYmNhbT8nLFxuICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uUGxheVJlYWNoZWQgPSB0cnVlXG4gICAgICAgICAgZmlyZUNhbGxiYWNrcygpXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgICB1bmxvYWRBbGxFdmVudExpc3RlbmVycygpXG4gICAgICAgIGVuZGVkRWFybHlDYWxsYmFjayhleGMpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcGxheWVyIG1vZGlmaWNhdGlvbnMgdG8gcGVyZm9ybSB0aGF0IG11c3Qgd2FpdCB1bnRpbCBgbG9hZGVkbWV0YWRhdGFgIGhhcyBiZWVuIHRyaWdnZXJlZFxuICAgIGZ1bmN0aW9uIG9uTG9hZGVkTWV0YURhdGEgKCkge1xuICAgICAgbG9nRXZlbnQoJ2xvYWRlZG1ldGFkYXRhJywge1xuICAgICAgICByZWFkeVN0YXRlOiByYXdWaXN1YWxVc2VyTWVkaWEucmVhZHlTdGF0ZSxcbiAgICAgICAgcGF1c2VkOiByYXdWaXN1YWxVc2VyTWVkaWEucGF1c2VkLFxuICAgICAgICB3aWR0aDogcmF3VmlzdWFsVXNlck1lZGlhLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHJhd1Zpc3VhbFVzZXJNZWRpYS5oZWlnaHQsXG4gICAgICAgIHZpZGVvV2lkdGg6IHJhd1Zpc3VhbFVzZXJNZWRpYS52aWRlb1dpZHRoLFxuICAgICAgICB2aWRlb0hlaWdodDogcmF3VmlzdWFsVXNlck1lZGlhLnZpZGVvSGVpZ2h0XG4gICAgICB9KVxuXG4gICAgICByYXdWaXN1YWxVc2VyTWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lciAmJlxuICAgICAgcmF3VmlzdWFsVXNlck1lZGlhLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWRlZG1ldGFkYXRhJywgb25Mb2FkZWRNZXRhRGF0YSlcblxuICAgICAgaWYgKCFoYXNFbmRlZCgpICYmICFoYXNJbnZhbGlkRGltZW5zaW9ucygpKSB7XG4gICAgICAgIHNlbGYuZW1pdChFdmVudHMuTE9BREVEX01FVEFfREFUQSlcblxuICAgICAgICAvLyBmb3IgYW5kcm9pZCBkZXZpY2VzLCB3ZSBjYW5ub3QgY2FsbCBwbGF5KCkgdW5sZXNzIG1ldGEgZGF0YSBoYXMgYmVlbiBsb2FkZWQhXG4gICAgICAgIC8vIHRvZG8gY29uc2lkZXIgcmVtb3ZpbmcgdGhhdCBpZiBpdCdzIG5vdCB0aGUgY2FzZSBhbnltb3JlIChmb3IgYmV0dGVyIHBlcmZvcm1hbmNlKVxuICAgICAgICBpZiAoYnJvd3Nlci5pc0FuZHJvaWQoKSkge1xuICAgICAgICAgIHBsYXkoKVxuICAgICAgICB9XG5cbiAgICAgICAgb25Mb2FkZWRNZXRhRGF0YVJlYWNoZWQgPSB0cnVlXG4gICAgICAgIGZpcmVDYWxsYmFja3MoKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB2aWRlb1RyYWNrID0gZ2V0Rmlyc3RWaWRlb1RyYWNrKGxvY2FsTWVkaWFTdHJlYW0pXG5cbiAgICAgIGlmICghdmlkZW9UcmFjaykge1xuICAgICAgICBvcHRpb25zLmRlYnVnKCdVc2VyTWVkaWE6IGRldGVjdGVkIChidXQgbm8gdmlkZW8gdHJhY2tzIGV4aXN0JylcbiAgICAgIH0gZWxzZSBpZiAoIXZpZGVvVHJhY2suZW5hYmxlZCkge1xuICAgICAgICB0aHJvdyBWaWRlb21haWxFcnJvci5jcmVhdGUoXG4gICAgICAgICAgJ1dlYmNhbSBpcyBkaXNhYmxlZCcsXG4gICAgICAgICAgJ1RoZSB2aWRlbyB0cmFjayBzZWVtcyB0byBiZSBkaXNhYmxlZC4gRW5hYmxlIGl0IGluIHlvdXIgc3lzdGVtLicsXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZGVzY3JpcHRpb25cblxuICAgICAgICBpZiAodmlkZW9UcmFjay5sYWJlbCAmJiB2aWRlb1RyYWNrLmxhYmVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBkZXNjcmlwdGlvbiA9IHZpZGVvVHJhY2subGFiZWxcbiAgICAgICAgfVxuXG4gICAgICAgIGRlc2NyaXB0aW9uICs9ICcgd2l0aCBlbmFibGVkPScgKyB2aWRlb1RyYWNrLmVuYWJsZWRcbiAgICAgICAgZGVzY3JpcHRpb24gKz0gJywgbXV0ZWQ9JyArIHZpZGVvVHJhY2subXV0ZWRcbiAgICAgICAgZGVzY3JpcHRpb24gKz0gJywgcmVtb3RlPScgKyB2aWRlb1RyYWNrLnJlbW90ZVxuICAgICAgICBkZXNjcmlwdGlvbiArPSAnLCByZWFkeVN0YXRlPScgKyB2aWRlb1RyYWNrLnJlYWR5U3RhdGVcbiAgICAgICAgZGVzY3JpcHRpb24gKz0gJywgZXJyb3I9JyArIHZpZGVvVHJhY2suZXJyb3JcblxuICAgICAgICBvcHRpb25zLmRlYnVnKFxuICAgICAgICAgICdVc2VyTWVkaWE6ICcgKyB2aWRlb1RyYWNrLmtpbmQgKyAnIGRldGVjdGVkLicsXG4gICAgICAgICAgZGVzY3JpcHRpb24gfHwgJydcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICAvLyB2ZXJ5IHVzZWZ1bCBpIHRoaW5rLCBzbyBsZWF2ZSB0aGlzIGFuZCBqdXN0IHVzZSBvcHRpb25zLmRlYnVnKClcbiAgICAgIGNvbnN0IGhlYXZ5RGVidWdnaW5nID0gdHJ1ZVxuXG4gICAgICBpZiAoaGVhdnlEZWJ1Z2dpbmcpIHtcbiAgICAgICAgTUVESUFfRVZFTlRTLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICAgIHJhd1Zpc3VhbFVzZXJNZWRpYS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgb3V0cHV0RXZlbnQsIGZhbHNlKVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICByYXdWaXN1YWxVc2VyTWVkaWEuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkbWV0YWRhdGEnLCBvbkxvYWRlZE1ldGFEYXRhKVxuICAgICAgcmF3VmlzdWFsVXNlck1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCBvblBsYXkpXG5cbiAgICAgIC8vIGV4cGVyaW1lbnRhbCwgbm90IHN1cmUgaWYgdGhpcyBpcyBldmVyIG5lZWRlZC9jYWxsZWQ/IHNpbmNlIDIgYXByIDIwMTdcbiAgICAgIC8vIEFuIGVycm9yIG9jY3VycyB3aGlsZSBmZXRjaGluZyB0aGUgbWVkaWEgZGF0YS5cbiAgICAgIC8vIEVycm9yIGNhbiBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgY29kZSBNRURJQV9FUlJfTkVUV09SSyBvciBoaWdoZXIuXG4gICAgICAvLyBuZXR3b3JrU3RhdGUgZXF1YWxzIGVpdGhlciBORVRXT1JLX0VNUFRZIG9yIE5FVFdPUktfSURMRSwgZGVwZW5kaW5nIG9uIHdoZW4gdGhlIGRvd25sb2FkIHdhcyBhYm9ydGVkLlxuICAgICAgcmF3VmlzdWFsVXNlck1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBvcHRpb25zLmxvZ2dlci53YXJuKFxuICAgICAgICAgICdDYXVnaHQgdmlkZW8gZWxlbWVudCBlcnJvciBldmVudDogJXMnLFxuICAgICAgICAgIHByZXR0eShlcnIpXG4gICAgICAgIClcbiAgICAgIH0pXG5cbiAgICAgIHNldFZpc3VhbFN0cmVhbShsb2NhbE1lZGlhU3RyZWFtKVxuXG4gICAgICBwbGF5KClcbiAgICB9IGNhdGNoIChleGMpIHtcbiAgICAgIHNlbGYuZW1pdChFdmVudHMuRVJST1IsIGV4YylcbiAgICB9XG4gIH1cblxuICB0aGlzLmlzUmVhZHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhcmF3VmlzdWFsVXNlck1lZGlhLnNyY1xuICB9XG5cbiAgdGhpcy5zdG9wID0gZnVuY3Rpb24gKHZpc3VhbFN0cmVhbSwgYWJvdXRUb0luaXRpYWxpemUpIHtcbiAgICB0cnkge1xuICAgICAgLy8gZG8gbm90IHN0b3AgXCJ0b28gbXVjaFwiIHdoZW4gZ29pbmcgdG8gaW5pdGlhbGl6ZSBhbnl3YXlcbiAgICAgIGlmICghYWJvdXRUb0luaXRpYWxpemUpIHtcbiAgICAgICAgaWYgKCF2aXN1YWxTdHJlYW0pIHtcbiAgICAgICAgICB2aXN1YWxTdHJlYW0gPSBnZXRWaXN1YWxTdHJlYW0oKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHJhY2tzID0gZ2V0VHJhY2tzKHZpc3VhbFN0cmVhbSlcbiAgICAgICAgdmFyIG5ld1N0b3BBcGlGb3VuZCA9IGZhbHNlXG5cbiAgICAgICAgaWYgKHRyYWNrcykge1xuICAgICAgICAgIHRyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFjaykge1xuICAgICAgICAgICAgaWYgKHRyYWNrLnN0b3ApIHtcbiAgICAgICAgICAgICAgbmV3U3RvcEFwaUZvdW5kID0gdHJ1ZVxuICAgICAgICAgICAgICB0cmFjay5zdG9wKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2lsbCBwcm9iYWJseSBiZWNvbWUgb2Jzb2xldGUgaW4gb25lIHllYXIgKGFmdGVyIGp1bmUgMjAxNylcbiAgICAgICAgIW5ld1N0b3BBcGlGb3VuZCAmJiB2aXN1YWxTdHJlYW0gJiYgdmlzdWFsU3RyZWFtLnN0b3AgJiYgdmlzdWFsU3RyZWFtLnN0b3AoKVxuXG4gICAgICAgIHNldFZpc3VhbFN0cmVhbShudWxsKVxuXG4gICAgICAgIGF1ZGlvUmVjb3JkZXIgJiYgYXVkaW9SZWNvcmRlci5zdG9wKClcblxuICAgICAgICBhdWRpb1JlY29yZGVyID0gbnVsbFxuICAgICAgfVxuXG4gICAgICBwYXVzZWQgPSByZWNvcmQgPSBmYWxzZVxuICAgIH0gY2F0Y2ggKGV4Yykge1xuICAgICAgc2VsZi5lbWl0KEV2ZW50cy5FUlJPUiwgZXhjKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuY3JlYXRlQ2FudmFzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBoKCdjYW52YXMnLCB7XG4gICAgICB3aWR0aDogdGhpcy5nZXRSYXdXaWR0aCh0cnVlKSxcbiAgICAgIGhlaWdodDogdGhpcy5nZXRSYXdIZWlnaHQodHJ1ZSlcbiAgICB9KVxuICB9XG5cbiAgdGhpcy5nZXRWaWRlb0hlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmF3VmlzdWFsVXNlck1lZGlhLnZpZGVvSGVpZ2h0XG4gIH1cblxuICB0aGlzLmdldFZpZGVvV2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJhd1Zpc3VhbFVzZXJNZWRpYS52aWRlb1dpZHRoXG4gIH1cblxuICB0aGlzLmhhc1ZpZGVvV2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VmlkZW9XaWR0aCgpID4gMFxuICB9XG5cbiAgdGhpcy5nZXRSYXdXaWR0aCA9IGZ1bmN0aW9uIChyZXNwb25zaXZlKSB7XG4gICAgdmFyIHJhd1dpZHRoID0gdGhpcy5nZXRWaWRlb1dpZHRoKClcbiAgICBjb25zdCB3aWR0aERlZmluZWQgPSBvcHRpb25zLmhhc0RlZmluZWRXaWR0aCgpXG5cbiAgICBpZiAod2lkdGhEZWZpbmVkIHx8IG9wdGlvbnMuaGFzRGVmaW5lZEhlaWdodCgpKSB7XG4gICAgICBpZiAoIXJlc3BvbnNpdmUgJiYgd2lkdGhEZWZpbmVkKSB7XG4gICAgICAgIHJhd1dpZHRoID0gb3B0aW9ucy52aWRlby53aWR0aFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmF3V2lkdGggPSByZWNvcmRlci5jYWxjdWxhdGVXaWR0aChyZXNwb25zaXZlKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyZXNwb25zaXZlKSB7XG4gICAgICByYXdXaWR0aCA9IHJlY29yZGVyLmxpbWl0V2lkdGgocmF3V2lkdGgpXG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd1dpZHRoXG4gIH1cblxuICB0aGlzLmdldFJhd0hlaWdodCA9IGZ1bmN0aW9uIChyZXNwb25zaXZlKSB7XG4gICAgdmFyIHJhd0hlaWdodFxuXG4gICAgaWYgKG9wdGlvbnMuaGFzRGVmaW5lZERpbWVuc2lvbigpKSB7XG4gICAgICByYXdIZWlnaHQgPSByZWNvcmRlci5jYWxjdWxhdGVIZWlnaHQocmVzcG9uc2l2ZSlcblxuICAgICAgaWYgKHJhd0hlaWdodCA8IDEpIHtcbiAgICAgICAgdGhyb3cgVmlkZW9tYWlsRXJyb3IuY3JlYXRlKFxuICAgICAgICAgICdCYWQgZGltZW5zaW9ucycsXG4gICAgICAgICAgJ0NhbGN1bGF0ZWQgcmF3IGhlaWdodCBjYW5ub3QgYmUgbGVzcyB0aGFuIDEhJyxcbiAgICAgICAgICBvcHRpb25zXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmF3SGVpZ2h0ID0gdGhpcy5nZXRWaWRlb0hlaWdodCgpXG5cbiAgICAgIGlmIChyYXdIZWlnaHQgPCAxKSB7XG4gICAgICAgIHRocm93IFZpZGVvbWFpbEVycm9yLmNyZWF0ZShcbiAgICAgICAgICAnQmFkIGRpbWVuc2lvbnMnLFxuICAgICAgICAgICdSYXcgdmlkZW8gaGVpZ2h0IGZyb20gRE9NIGVsZW1lbnQgY2Fubm90IGJlIGxlc3MgdGhhbiAxIScsXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJlc3BvbnNpdmUpIHtcbiAgICAgIHJhd0hlaWdodCA9IHJlY29yZGVyLmxpbWl0SGVpZ2h0KHJhd0hlaWdodClcbiAgICB9XG5cbiAgICByZXR1cm4gcmF3SGVpZ2h0XG4gIH1cblxuICB0aGlzLmdldFJhd1Zpc3VhbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJhd1Zpc3VhbFVzZXJNZWRpYVxuICB9XG5cbiAgdGhpcy5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBwYXVzZWQgPSB0cnVlXG4gIH1cblxuICB0aGlzLmlzUGF1c2VkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwYXVzZWRcbiAgfVxuXG4gIHRoaXMucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHBhdXNlZCA9IGZhbHNlXG4gIH1cblxuICB0aGlzLnJlY29yZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZWNvcmQgPSB0cnVlXG4gIH1cblxuICB0aGlzLmlzUmVjb3JkaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZWNvcmRcbiAgfVxuXG4gIHRoaXMuZ2V0QXVkaW9TYW1wbGVSYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChhdWRpb1JlY29yZGVyKSB7XG4gICAgICByZXR1cm4gYXVkaW9SZWNvcmRlci5nZXRTYW1wbGVSYXRlKClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICB9XG5cbiAgdGhpcy5nZXRDaGFyYWN0ZXJpc3RpY3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGF1ZGlvU2FtcGxlUmF0ZTogdGhpcy5nZXRBdWRpb1NhbXBsZVJhdGUoKSxcbiAgICAgIG11dGVkOiByYXdWaXN1YWxVc2VyTWVkaWEgJiYgcmF3VmlzdWFsVXNlck1lZGlhLm11dGVkLFxuICAgICAgd2lkdGg6IHJhd1Zpc3VhbFVzZXJNZWRpYSAmJiByYXdWaXN1YWxVc2VyTWVkaWEud2lkdGgsXG4gICAgICBoZWlnaHQ6IHJhd1Zpc3VhbFVzZXJNZWRpYSAmJiByYXdWaXN1YWxVc2VyTWVkaWEuaGVpZ2h0LFxuICAgICAgdmlkZW9XaWR0aDogcmF3VmlzdWFsVXNlck1lZGlhICYmIHJhd1Zpc3VhbFVzZXJNZWRpYS52aWRlb1dpZHRoLFxuICAgICAgdmlkZW9IZWlnaHQ6IHJhd1Zpc3VhbFVzZXJNZWRpYSAmJiByYXdWaXN1YWxVc2VyTWVkaWEudmlkZW9IZWlnaHRcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBzdGFuZGFyZGl6ZSBmcm9tICcuL3V0aWwvc3RhbmRhcmRpemUnXG5pbXBvcnQgQ2xpZW50IGZyb20gJy4vY2xpZW50J1xuXG5pZiAoIW5hdmlnYXRvcikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05hdmlnYXRvciBpcyBtaXNzaW5nIScpXG59IGVsc2Uge1xuICAvLyBFbnN1cmVzIFZpZGVvbWFpbCBmdW5jdGlvbmFsaXR5IGlzIG5vdCBicm9rZW4gb24gZXhvdGljIGJyb3dzZXJzIHdpdGggc2hpbXMuXG4gIC8vXG4gIC8vIFVNRCAoVW5pdmVyc2FsIE1vZHVsZSBEZWZpbml0aW9uKSwgaW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltXG4gIDsoZnVuY3Rpb24gKG5hdmlnYXRvcikge1xuICAgIHN0YW5kYXJkaXplKHdpbmRvdywgbmF2aWdhdG9yKVxuICB9KG5hdmlnYXRvcikpXG59XG5cbmV4cG9ydCBkZWZhdWx0IENsaWVudFxuXG4vLyBhbHNvIGFkZCB0aGF0IHNvIHRoYXQgd2UgY2FuIHJlcXVpcmUoKSBpdCB0aGUgbm9ybWFsIEVTNSB3YXlcbm1vZHVsZS5leHBvcnRzID0gQ2xpZW50XG4iXX0=
